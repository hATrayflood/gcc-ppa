# DP: Search for plugins in a default plugin dir, backport from the trunk.

gcc/

2010-04-13  Matthias Klose  <doko@ubuntu.com>

	* gcc.c (cc1_options): Handle -iplugindir before processing
	the cc1 spec. Only add -iplugindir once.
	(cpp_unique_options): Add -iplugindir option if -fplugin* options
	found.
	* common.opt (iplugindir): Remove `Separate' property, initialize.
	* plugin.c (default_plugin_dir_name): Error with missing -iplugindir
	option.
	* Makefile.in (check-%, check-parallel-%): Create plugin dir.
	(distclean): Remove plugin dir.
	* doc/invoke.texi: Document -iplugindir.

2010-04-13  Basile Starynkevitch  <basile@starynkevitch.net>

	* doc/plugins.texi (Loading Plugins): Document short
	-fplugin=foo option.
	(Plugin API): Mention default_plugin_dir_name function.

	* gcc.c (find_file_spec_function): Add new declaration.
	(static_spec_func): Use it for "find-file".
	(find_file_spec_function): Add new function.
	(cc1_options): Add -iplugindir option if -fplugin* options found.

	* gcc-plugin.h (default_plugin_dir_name): Added new declaration.

	* plugin.c (add_new_plugin): Updated comment, and handle short
	plugin name.
	(default_plugin_dir_name): Added new function.

	* common.opt (iplugindir): New option to set the plugin
	directory.

2010-06-01  Matthias Klose  <doko@ubuntu.com>

        * gcc.c (cc1_options, cpp_unique_options): Use find-plugindir spec
        function to add the -iplugindir option.
        (find_plugindir_spec_function): Add new declaration and function.
        (static_spec_func): Use it for "find-plugindir".

gcc/testsuite/

2010-04-13  Matthias Klose  <doko@ubuntu.com>

	* gcc.dg/plugindir1.c: New testcase.
	* gcc.dg/plugindir2.c: New testcase.
	* gcc.dg/plugindir3.c: New testcase.
	* gcc.dg/plugindir4.c: New testcase.

gcc/testsuite/

2010-04-28  Matthias Klose  <doko@ubuntu.com>

	* gcc.dg/plugin/plugin.exp: Run the plugindir tests.
	* gcc.dg/plugindir1.c: Move to gcc.dg/plugin/plugindir1.c.
	* gcc.dg/plugindir2.c: Move to gcc.dg/plugin/plugindir2.c.
	* gcc.dg/plugindir3.c: Move to gcc.dg/plugin/plugindir3.c.
	* gcc.dg/plugindir4.c: Move to gcc.dg/plugin/plugindir4.c.

Index: gcc/gcc.c
===================================================================
--- a/src/gcc/gcc.c	(revision 160097)
+++ b/src/gcc/gcc.c	(working copy)
@@ -403,6 +403,8 @@
 static const char *replace_outfile_spec_function (int, const char **);
 static const char *version_compare_spec_function (int, const char **);
 static const char *include_spec_function (int, const char **);
+static const char *find_file_spec_function (int, const char **);
+static const char *find_plugindir_spec_function (int, const char **);
 static const char *print_asm_header_spec_function (int, const char **);
 static const char *compare_debug_dump_opt_spec_function (int, const char **);
 static const char *compare_debug_self_opt_spec_function (int, const char **);
@@ -872,6 +874,7 @@
  %{M} %{MM} %{MF*} %{MG} %{MP} %{MQ*} %{MT*}\
  %{!E:%{!M:%{!MM:%{!MT:%{!MQ:%{MD|MMD:%{o*:-MQ %*}}}}}}}\
  %{remap} %{g3|ggdb3|gstabs3|gcoff3|gxcoff3|gvms3:-dD}\
+ %{!iplugindir*:%{fplugin*:%:find-plugindir()}}\
  %{H} %C %{D*&U*&A*} %{i*} %Z %i\
  %{fmudflap:-D_MUDFLAP -include mf-runtime.h}\
  %{fmudflapth:-D_MUDFLAP -D_MUDFLAPTH -include mf-runtime.h}\
@@ -894,6 +897,7 @@
 /* NB: This is shared amongst all front-ends, except for Ada.  */
 static const char *cc1_options =
 "%{pg:%{fomit-frame-pointer:%e-pg and -fomit-frame-pointer are incompatible}}\
+ %{!iplugindir*:%{fplugin*:%:find-plugindir()}}\
  %1 %{!Q:-quiet} %{!dumpbase:-dumpbase %B} %{d*} %{m*} %{a*}\
  %{fcompare-debug-second:%:compare-debug-auxbase-opt(%b)} \
  %{!fcompare-debug-second:%{c|S:%{o*:-auxbase-strip %*}%{!o*:-auxbase %b}}}%{!c:%{!S:-auxbase %b}} \
@@ -1726,6 +1730,8 @@
   { "replace-outfile",		replace_outfile_spec_function },
   { "version-compare",		version_compare_spec_function },
   { "include",			include_spec_function },
+  { "find-file",		find_file_spec_function },
+  { "find-plugindir",		find_plugindir_spec_function },
   { "print-asm-header",		print_asm_header_spec_function },
   { "compare-debug-dump-opt",	compare_debug_dump_opt_spec_function },
   { "compare-debug-self-opt",	compare_debug_self_opt_spec_function },
@@ -8794,6 +8800,38 @@
   return NULL;
 }
 
+/* %:find-file spec function.  This function replace its argument by
+    the file found thru find_file, that is the -print-file-name gcc
+    program option. */
+static const char *
+find_file_spec_function (int argc, const char**argv)
+{
+  const char *file;
+
+  if (argc != 1)
+    abort ();
+
+  file = find_file (argv[0]);
+  return file;
+}
+
+
+/* %:find-plugindir spec function.  This function replace its argument
+    by the -iplugindir=<dir> option.  `dir' is found thru find_file, that
+    is the -print-file-name gcc program option. */
+static const char *
+find_plugindir_spec_function (int argc, const char**argv ATTRIBUTE_UNUSED)
+{
+  const char *option;
+
+  if (argc != 0)
+    abort ();
+
+  option = concat ("-iplugindir=", find_file ("plugin"), NULL);
+  return option;
+}
+
+
 /* %:print-asm-header spec function.  Print a banner to say that the
    following output is from the assembler.  */
 
Index: gcc/testsuite/gcc.dg/plugin/plugin.exp
===================================================================
--- a/src/gcc/testsuite/gcc.dg/plugin/plugin.exp	(revision 158844)
+++ b/src/gcc/testsuite/gcc.dg/plugin/plugin.exp	(working copy)
@@ -68,3 +68,15 @@
     set plugin_input_tests [lreplace $plugin_test 0 0]
     plugin-test-execute $plugin_src $plugin_input_tests
 }
+
+# run the plugindir tests
+
+# Initialize `dg'.
+dg-init
+
+# Main loop.
+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/plugindir*.\[cSi\]]] \
+	"" $DEFAULT_CFLAGS
+
+# All done.
+dg-finish
Index: gcc/testsuite/gcc.dg/plugin/plugindir1.c
===================================================================
--- a/src/gcc/testsuite/gcc.dg/plugin/plugindir1.c	(revision 0)
+++ b/src/gcc/testsuite/gcc.dg/plugin/plugindir1.c	(revision 0)
@@ -0,0 +1,4 @@
+/* { dg-do compile } */
+/* { dg-options "-c -fplugin=foo" } */
+
+/* { dg-prune-output ".*inacessible plugin file.*foo\.so expanded from short plugin name.*" } */
Index: gcc/testsuite/gcc.dg/plugin/plugindir2.c
===================================================================
--- a/src/gcc/testsuite/gcc.dg/plugin/plugindir2.c	(revision 0)
+++ b/src/gcc/testsuite/gcc.dg/plugin/plugindir2.c	(revision 0)
@@ -0,0 +1,4 @@
+/* { dg-do compile } */
+/* { dg-options "-save-temps -c -fplugin=foo" } */
+
+/* { dg-prune-output ".*inacessible plugin file.*foo\.so expanded from short plugin name.*" } */
Index: gcc/testsuite/gcc.dg/plugin/plugindir3.c
===================================================================
--- a/src/gcc/testsuite/gcc.dg/plugin/plugindir3.c	(revision 0)
+++ b/src/gcc/testsuite/gcc.dg/plugin/plugindir3.c	(revision 0)
@@ -0,0 +1,4 @@
+/* { dg-do preprocess } */
+/* { dg-options "-fplugin=foo" } */
+
+/* { dg-prune-output ".*inacessible plugin file.*foo\.so expanded from short plugin name.*" } */
Index: gcc/testsuite/gcc.dg/plugin/plugindir4.c
===================================================================
--- a/src/gcc/testsuite/gcc.dg/plugin/plugindir4.c	(revision 0)
+++ b/src/gcc/testsuite/gcc.dg/plugin/plugindir4.c	(revision 0)
@@ -0,0 +1,4 @@
+/* { dg-do preprocess } */
+/* { dg-options "-iplugindir=my-plugindir -fplugin=foo" } */
+
+/* { dg-prune-output ".*inacessible plugin file.*my-plugindir/foo\.so expanded from short plugin name.*" } */
Index: gcc/gcc-plugin.h
===================================================================
--- a/src/gcc/gcc-plugin.h	(revision 158844)
+++ b/src/gcc/gcc-plugin.h	(working copy)
@@ -141,4 +141,10 @@
 
 extern int unregister_callback (const char *plugin_name, int event);
 
+
+/* Retrieve the plugin directory name, as returned by the
+   -fprint-file-name=plugin argument to the gcc program, which is the
+   -iplugindir program argument to cc1.  */
+extern const char* default_plugin_dir_name (void);
+
 #endif /* GCC_PLUGIN_H */
Index: gcc/common.opt
===================================================================
--- a/src/gcc/common.opt	(revision 158844)
+++ b/src/gcc/common.opt	(working copy)
@@ -1535,6 +1535,10 @@
 Common JoinedOrMissing Negative(gcoff)
 Generate debug information in extended XCOFF format
 
+iplugindir=
+Common Joined Var(plugindir_string) Init(0)
+-iplugindir=<dir>	Set <dir> to be the default plugin directory
+
 o
 Common Joined Separate
 -o <file>	Place output into <file>
Index: gcc/plugin.c
===================================================================
--- a/src/gcc/plugin.c	(revision 158844)
+++ b/src/gcc/plugin.c	(working copy)
@@ -1,5 +1,5 @@
 /* Support for GCC plugin mechanism.
-   Copyright (C) 2009 Free Software Foundation, Inc.
+   Copyright (C) 2009, 2010 Free Software Foundation, Inc.
 
 This file is part of GCC.
 
@@ -124,17 +124,42 @@
 }
 
 
-/* Create a plugin_name_args object for the give plugin and insert it to
-   the hash table. This function is called when -fplugin=/path/to/NAME.so
-   option is processed.  */
+/* Create a plugin_name_args object for the given plugin and insert it
+   to the hash table. This function is called when
+   -fplugin=/path/to/NAME.so or -fplugin=NAME option is processed.  */
 
 void
 add_new_plugin (const char* plugin_name)
 {
   struct plugin_name_args *plugin;
   void **slot;
-  char *base_name = get_plugin_base_name (plugin_name);
+  char *base_name;
+  bool name_is_short;
+  const char *pc;
 
+  /* Replace short names by their full path when relevant.  */
+  name_is_short  = !IS_ABSOLUTE_PATH (plugin_name);
+  for (pc = plugin_name; name_is_short && *pc; pc++)
+    if (*pc == '.' || IS_DIR_SEPARATOR (*pc))
+      name_is_short = false;
+
+  if (name_is_short)
+    {
+      base_name = CONST_CAST (char*, plugin_name);
+      /* FIXME: the ".so" suffix is currently builtin, since plugins
+	 only work on ELF host systems like e.g. Linux or Solaris.
+	 When plugins shall be available on non ELF systems such as
+	 Windows or MacOS, this code has to be greatly improved.  */
+      plugin_name = concat (default_plugin_dir_name (), "/",
+			    plugin_name, ".so", NULL);
+      if (access (plugin_name, R_OK))
+	fatal_error
+	  ("inacessible plugin file %s expanded from short plugin name %s: %m",
+	   plugin_name, base_name);
+    }
+  else
+    base_name = get_plugin_base_name (plugin_name);
+
   /* If this is the first -fplugin= option we encounter, create
      'plugin_name_args_tab' hash table.  */
   if (!plugin_name_args_tab)
@@ -809,6 +834,7 @@
   return true;
 }
 
+
 /* Return the current value of event_last, so that plugins which provide
    additional functionality for events for the benefit of high-level plugins
    know how many valid entries plugin_event_name holds.  */
@@ -818,3 +844,15 @@
 {
   return event_last;
 }
+
+
+/* Retrieve the default plugin directory.  The gcc driver should have passed
+   it as -iplugindir <dir> to the cc1 program, and it is queriable thru the
+   -print-file-name=plugin option to gcc.  */
+const char*
+default_plugin_dir_name (void)
+{
+  if (!plugindir_string)
+    fatal_error ("-iplugindir <dir> option not passed from the gcc driver");
+  return plugindir_string;
+}
Index: gcc/Makefile.in
===================================================================
--- a/src/gcc/Makefile.in	(revision 158844)
+++ b/src/gcc/Makefile.in	(working copy)
@@ -4231,7 +4231,7 @@
 	-rm -f gcov.pod
 # Delete po/*.gmo only if we are not building in the source directory.
 	-if [ ! -f po/exgettext ]; then rm -f po/*.gmo; fi
-	-rmdir ada cp f java objc intl po testsuite 2>/dev/null
+	-rmdir ada cp f java objc intl po testsuite plugin 2>/dev/null
 
 # Get rid of every file that's generated from some other file, except for `configure'.
 # Most of these files ARE PRESENT in the GCC distribution.
@@ -4688,6 +4688,7 @@
 
 # This is only used for check-% targets that aren't parallelized.
 $(filter-out $(lang_checks_parallelized),$(lang_checks)): check-% : site.exp
+	-test -d plugin || mkdir plugin
 	-test -d $(TESTSUITEDIR) || mkdir $(TESTSUITEDIR)
 	test -d $(TESTSUITEDIR)/$* || mkdir $(TESTSUITEDIR)/$*
 	-(rootme=`${PWD_COMMAND}`; export rootme; \
@@ -4775,6 +4776,7 @@
 # Otherwise check-$lang isn't parallelized and runtest is invoked just with
 # the $(RUNTESTFLAGS) arguments.
 check-parallel-% : site.exp
+	-test -d plugin || mkdir plugin
 	-test -d $(TESTSUITEDIR) || mkdir $(TESTSUITEDIR)
 	test -d $(TESTSUITEDIR)/$(check_p_subdir) || mkdir $(TESTSUITEDIR)/$(check_p_subdir)
 	-(rootme=`${PWD_COMMAND}`; export rootme; \
