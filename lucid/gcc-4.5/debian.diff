diff -urN debian/changelog gcc-4.5-4.5.3.orig/debian/changelog
--- debian/changelog	2014-05-09 17:45:51.151132460 +0900
+++ gcc-4.5-4.5.3.orig/debian/changelog	2014-11-09 08:10:27.824316510 +0900
@@ -1,3 +1,9 @@
+gcc-4.5 (4.5.3-12ubuntu2lucid3) lucid; urgency=low
+
+  * ppa for lucid
+
+ -- ABE Hiroki (hATrayflood) <h.rayflood@gmail.com>  Sun, 09 Nov 2014 08:10:00 +0900
+
 gcc-4.5 (4.5.3-12ubuntu2) precise; urgency=low
 
   * Pursuant to the cross-distro consensus on the armhf linker path,
diff -urN debian/control gcc-4.5-4.5.3.orig/debian/control
--- debian/control	2014-05-09 17:45:51.151132460 +0900
+++ gcc-4.5-4.5.3.orig/debian/control	2014-11-09 08:10:52.927824792 +0900
@@ -1,20 +1,16 @@
 Source: gcc-4.5
 Section: devel
 Priority: optional
-Maintainer: Ubuntu Core developers <ubuntu-devel-discuss@lists.ubuntu.com>
-XSBC-Original-Maintainer: Debian GCC Maintainers <debian-gcc@lists.debian.org>
-Uploaders: Matthias Klose <doko@debian.org>, Arthur Loiret <aloiret@debian.org>
+Maintainer: ABE Hiroki (hATrayflood) <h.rayflood@gmail.com>
 Standards-Version: 3.9.2
-Build-Depends: dpkg-dev (>= 1.16.0~ubuntu4), debhelper (>= 5.0.62), g++-multilib [amd64 i386 mips mipsel powerpc ppc64 s390 s390x sparc kfreebsd-amd64], libc6.1-dev (>= 2.13-0ubuntu6) [alpha ia64] | libc0.3-dev (>= 2.13-0ubuntu6) [hurd-i386] | libc0.1-dev (>= 2.13-0ubuntu6) [kfreebsd-i386 kfreebsd-amd64] | libc6-dev (>= 2.13-0ubuntu6), libc6-dev-amd64 [i386], libc6-dev-sparc64 [sparc], libc6-dev-s390 [s390x], libc6-dev-s390x [s390], libc6-dev-i386 [amd64], libc6-dev-powerpc [ppc64], libc6-dev-ppc64 [powerpc], libc0.1-dev-i386 [kfreebsd-amd64], lib32gcc1 [amd64 ppc64 kfreebsd-amd64 s390x], lib64gcc1 [i386 powerpc sparc s390], libc6-dev-mips64 [mips mipsel], libc6-dev-mipsn32 [mips mipsel], m4, libtool, autoconf2.64, automake (>= 1:1.11), automake (<< 1:1.12), libunwind7-dev (>= 0.98.5-6) [ia64], libatomic-ops-dev [ia64], zlib1g-dev, gawk, lzma, xz-utils, patchutils, binutils (>= 2.20.1-14~) | binutils-multiarch (>= 2.20.1-14~), binutils-hppa64 (>= 2.20.1-14~) [hppa], gperf (>= 3.0.1), bison (>= 1:2.3), flex, gettext, texinfo (>= 4.3), locales [!m68k !knetbsd-i386 !knetbsd-alpha], procps, sharutils, binutils-spu (>= 2.20.1-14~) [powerpc ppc64], newlib-spu (>= 1.16.0) [powerpc ppc64], libcloog-ppl-dev (>= 0.15.9-2~), libmpc-dev, libmpfr-dev (>= 3.0.0-9~), libgmp-dev (>= 2:5.0.1~), libelfg0-dev (>= 0.8.12), dejagnu [!m68k !hurd-i386 !hurd-alpha], autogen, realpath (>= 1.9.12), chrpath, lsb-release, make (>= 3.81), quilt
+Build-Depends: dpkg-dev (>= 1.14.15), debhelper (>= 5.0.62), g++-multilib [amd64 i386 mips mipsel powerpc ppc64 s390 s390x sparc kfreebsd-amd64], libc6.1-dev (>= 2.5) [alpha ia64] | libc0.3-dev (>= 2.5) [hurd-i386] | libc0.1-dev (>= 2.5) [kfreebsd-i386 kfreebsd-amd64] | libc6-dev (>= 2.5), libc6-dev-amd64 [i386], libc6-dev-sparc64 [sparc], libc6-dev-s390 [s390x], libc6-dev-s390x [s390], libc6-dev-i386 [amd64], libc6-dev-powerpc [ppc64], libc6-dev-ppc64 [powerpc], libc0.1-dev-i386 [kfreebsd-amd64], lib32gcc1 [amd64 ppc64 kfreebsd-amd64 s390x], lib64gcc1 [i386 powerpc sparc s390], libc6-dev-mips64 [mips mipsel], libc6-dev-mipsn32 [mips mipsel], m4, libtool, autoconf2.64, automake (>= 1:1.11), automake (<< 1:1.12), libunwind7-dev (>= 0.98.5-6) [ia64], libatomic-ops-dev [ia64], zlib1g-dev, gawk, lzma, xz-utils, patchutils, binutils (>= 2.20.1) | binutils-multiarch (>= 2.20.1), binutils-hppa64 (>= 2.20.1) [hppa], gperf (>= 3.0.1), bison (>= 1:2.3), flex, gettext, texinfo (>= 4.3), locales [!m68k !knetbsd-i386 !knetbsd-alpha], procps, sharutils, binutils-spu (>= 2.20.1) [powerpc ppc64], newlib-spu (>= 1.16.0) [powerpc ppc64], libcloog-ppl-dev (>= 0.15.8), libmpc-dev, libmpfr-dev, libgmp3-dev, libelfg0-dev (>= 0.8.12), dejagnu [!m68k !hurd-i386 !hurd-alpha], autogen, realpath (>= 1.9.12), chrpath, lsb-release, make (>= 3.81), quilt
 Build-Depends-Indep: doxygen (>= 1.4.2), graphviz (>= 2.2), gsfonts-x11, texlive-latex-base, 
 Build-Conflicts: binutils-gold
-Homepage: http://gcc.gnu.org/
-XS-Vcs-Browser: http://svn.debian.org/viewsvn/gcccvs/branches/sid/gcc-4.5/
-XS-Vcs-Svn: svn://svn.debian.org/svn/gcccvs/branches/sid/gcc-4.5
+Homepage: https://launchpad.net/~h-rayflood/+archive/gcc-upper
+XS-Vcs-Browser: https://github.com/hATrayflood/gcc-ppa
 
 Package: gcc-4.5-base
 Architecture: any
-Multi-Arch: same
 Section: libs
 Priority: required
 Depends: ${misc:Depends}
@@ -51,7 +47,7 @@
 Architecture: any
 Section: devel
 Priority: optional
-Depends: gcc-4.5-base (= ${gcc:Version}), gcc-4.5 (= ${gcc:Version}), libgmp-dev (>= 2:5.0.1~), ${shlibs:Depends}, ${misc:Depends}
+Depends: gcc-4.5-base (= ${gcc:Version}), gcc-4.5 (= ${gcc:Version}), libgmp3-dev, ${shlibs:Depends}, ${misc:Depends}
 Description: Files for GNU GCC plugin development.
  This package contains (header) files for GNU GCC plugin development. It
  is only used for the development of GCC plugins, but not needed to run
@@ -212,8 +208,6 @@
 Package: libobjc2
 Section: libs
 Architecture: any
-Multi-Arch: same
-Pre-Depends: multiarch-support
 Priority: optional
 Depends: gcc-4.5-base (= ${gcc:Version}), ${shlibs:Depends}, ${misc:Depends}
 Description: Runtime library for GNU Objective-C applications
@@ -222,7 +216,6 @@
 Package: libobjc2-dbg
 Section: debug
 Architecture: any
-Multi-Arch: same
 Priority: extra
 Depends: gcc-4.5-base (= ${gcc:Version}), libobjc2 (= ${gcc:Version}), libgcc1-dbg, ${misc:Depends}
 Description: Runtime library for GNU Objective-C applications (debug symbols)
diff -urN debian/control.m4 gcc-4.5-4.5.3.orig/debian/control.m4
--- debian/control.m4	2014-05-09 17:45:51.151132460 +0900
+++ gcc-4.5-4.5.3.orig/debian/control.m4	2014-05-09 17:45:51.200091917 +0900
@@ -25,23 +25,7 @@
 Source: SRCNAME
 Section: devel
 Priority: PRI(optional)
-ifelse(DIST,`Ubuntu',`dnl
-ifelse(regexp(SRCNAME, `gnat\|gdc-'),0,`dnl
-Maintainer: Ubuntu MOTU Developers <ubuntu-motu@lists.ubuntu.com>
-', `dnl
-Maintainer: Ubuntu Core developers <ubuntu-devel-discuss@lists.ubuntu.com>
-')dnl SRCNAME
-XSBC-Original-Maintainer: MAINTAINER
-', `dnl
-Maintainer: MAINTAINER
-')dnl DIST
-ifelse(regexp(SRCNAME, `gnat'),0,`dnl
-Uploaders: Ludovic Brenta <lbrenta@debian.org>
-', regexp(SRCNAME, `gdc'),0,`dnl
-Uploaders: Arthur Loiret <arthur.loiret@gmail.com>
-', `dnl
-Uploaders: Matthias Klose <doko@debian.org>, Arthur Loiret <aloiret@debian.org>
-')dnl SRCNAME
+Maintainer: ABE Hiroki (hATrayflood) <h.rayflood@gmail.com>
 Standards-Version: 3.9.2
 ifdef(`TARGET',`dnl cross
 Build-Depends: DPKG_BUILD_DEP debhelper (>= 5.0.62), dpkg-cross (>= 1.25.99), LIBC_BUILD_DEP, LIBC_BIARCH_BUILD_DEP LIBUNWIND_BUILD_DEP LIBATOMIC_OPS_BUILD_DEP AUTOGEN_BUILD_DEP CLOOG_BUILD_DEP AUTO_BUILD_DEP SOURCE_BUILD_DEP CROSS_BUILD_DEP MPFR_BUILD_DEP GMP_BUILD_DEP zlib1g-dev, gawk, lzma, xz-utils, patchutils, BINUTILS_BUILD_DEP, bison (>= 1:2.3), flex, realpath (>= 1.9.12), lsb-release, make (>= 3.81), quilt
@@ -52,15 +36,8 @@
 ')dnl
 ')dnl
 Build-Conflicts: binutils-gold
-ifelse(regexp(SRCNAME, `gnat'),0,`dnl
-Homepage: http://gcc.gnu.org/
-', regexp(SRCNAME, `gdc'),0,`dnl
-Homepage: http://dgcc.sourceforge.net/
-', `dnl
-Homepage: http://gcc.gnu.org/
-')dnl SRCNAME
-XS-Vcs-Browser: http://svn.debian.org/viewsvn/gcccvs/branches/sid/gcc`'PV/
-XS-Vcs-Svn: svn://svn.debian.org/svn/gcccvs/branches/sid/gcc`'PV
+Homepage: https://launchpad.net/~h-rayflood/+archive/gcc-upper
+XS-Vcs-Browser: https://github.com/hATrayflood/gcc-ppa
 
 ifelse(SRCNAME,gcc-snapshot,`dnl
 Package: gcc-snapshot
diff -urN debian/patches/gcc-linaro.diff gcc-4.5-4.5.3.orig/debian/patches/gcc-linaro.diff
--- debian/patches/gcc-linaro.diff	2014-05-09 17:45:51.184081480 +0900
+++ gcc-4.5-4.5.3.orig/debian/patches/gcc-linaro.diff	2014-11-09 08:07:43.103514438 +0900
@@ -75,7 +75,7 @@
  	* GCC 4.5.3 released.
 --- a/src/ChangeLog.linaro
 +++ b/src/ChangeLog.linaro
-@@ -0,0 +1,5337 @@
+@@ -0,0 +1,5264 @@
 +2012-01-11  Andrew Stubbs  <ams@codesourcery.com>
 +
 +	GCC Linaro 4.5-2012.01 released.
@@ -709,11 +709,6 @@
 +
 +	Merge from FSF 4.5 branch r173417 (pre 4.5.4).
 +
-+2011-05-03  Tom de Vries  <tom@codesourcery.com>
-+
-+	gcc/
-+	* stmt.c (set_jump_prob): Make robust against *inv_scale == 0.
-+
 +2011-05-06  Richard Sandiford  <richard.sandiford@linaro.org>
 +
 +	gcc/
@@ -1481,44 +1476,6 @@
 +	* sched-int.h (find_fallthru_edge_from): Rename declaration as well.
 +	* basic-block.h (find_fallthru_edge): New inline function.
 +
-+2010-02-04  Tom de Vries  <tom@codesourcery.com>
-+
-+	gcc/
-+	stmt.c (set_jump_prob): Fix assert condition.
-+
-+2010-01-27  Tom de Vries  <tom@codesourcery.com>
-+
-+	gcc/
-+	stmt.c (rtx_seq_cost): Use insn_rtx_cost instead of rtx_cost.
-+
-+2010-01-26  Tom de Vries  <tom@codesourcery.com>
-+
-+	gcc/
-+	* stmt.c (struct  case_bit_test): Add rev_hi and rev_lo field.
-+	* stmt.c (emit_case_bit_test_jump): New function.
-+	* stmt.c (rtx_seq_cost): New function.
-+	* stmt.c (choose_case_bit_test_expand_method): New function.
-+	* stmt.c (set_bit): New function.
-+	* stmt.c (emit_case_bit_test): Adjust comment.
-+	* stmt.c (emit_case_bit_test): Set and update rev_hi and rev_lo fields.
-+	* stmt.c (emit_case_bit_test): Use set_bit.
-+	* stmt.c (emit_case_bit_test): Use choose_case_bit_test_expand_method.
-+	* stmt.c (emit_case_bit_test): Use emit_case_bit_test_jump.
-+	* testsuite/gcc.dg/switch-bittest.c: New test.
-+
-+2010-01-25  Tom de Vries  <tom@codesourcery.com>
-+
-+	gcc/
-+	* stmt.c (emit_case_bit_tests): Change prototype.
-+	* stmt.c (struct case_bit_test): Add prob field.
-+	* stmt.c (get_label_prob): New function.
-+	* stmt.c (set_jump_prob): New function.
-+	* stmt.c (emit_case_bit_tests): Use get_label_prob.
-+	* stmt.c (emit_case_bit_tests): Set prob field.
-+	* stmt.c (emit_case_bit_tests): Use set_jump_prob.
-+	* stmt.c (expand_case): Add new args to emit_case_bit_tests invocation.
-+	* testsuite/gcc.dg/switch-prob.c: Add test.
-+
 +2011-02-04  Andrew Stubbs  <ams@codesourcery.com>
 +
 +	gcc/
@@ -1531,36 +1488,6 @@
 +	gcc/
 +	* LINARO-VERSION: Update.
 +
-+2011-02-04  Andrew Stubbs  <ams@codesourcery.com>
-+
-+	Revert:
-+
-+	2010-01-25  Tom de Vries  <tom@codesourcery.com>
-+
-+	gcc/
-+	* stmt.c (emit_case_bit_tests): Change prototype.
-+	* stmt.c (struct case_bit_test): Add prob field.
-+	* stmt.c (get_label_prob): New function.
-+	* stmt.c (set_jump_prob): New function.
-+	* stmt.c (emit_case_bit_tests): Use get_label_prob.
-+	* stmt.c (emit_case_bit_tests): Set prob field.
-+	* stmt.c (emit_case_bit_tests): Use set_jump_prob.
-+	* stmt.c (expand_case): Add new args to emit_case_bit_tests invocation.
-+	* testsuite/gcc.dg/switch-prob.c: Add test.
-+
-+2010-01-25  Tom de Vries  <tom@codesourcery.com>
-+
-+	gcc/
-+	* stmt.c (emit_case_bit_tests): Change prototype.
-+	* stmt.c (struct case_bit_test): Add prob field.
-+	* stmt.c (get_label_prob): New function.
-+	* stmt.c (set_jump_prob): New function.
-+	* stmt.c (emit_case_bit_tests): Use get_label_prob.
-+	* stmt.c (emit_case_bit_tests): Set prob field.
-+	* stmt.c (emit_case_bit_tests): Use set_jump_prob.
-+	* stmt.c (expand_case): Add new args to emit_case_bit_tests invocation.
-+	* testsuite/gcc.dg/switch-prob.c: Add test.
-+
 +2010-12-13  Tom de Vries  <tom@codesourcery.com>
 +
 +	gcc/
@@ -47064,16 +46991,6 @@
        if (STORE_FLAG_VALUE == 1
 --- a/src/gcc/stmt.c
 +++ b/src/gcc/stmt.c
-@@ -117,7 +117,8 @@
- static int estimate_case_costs (case_node_ptr);
- static bool lshift_cheap_p (void);
- static int case_bit_test_cmp (const void *, const void *);
--static void emit_case_bit_tests (tree, tree, tree, tree, case_node_ptr, rtx);
-+static void emit_case_bit_tests (tree, tree, tree, tree, case_node_ptr, tree,
-+                                 rtx, basic_block);
- static void balance_case_nodes (case_node_ptr *, case_node_ptr);
- static int node_has_low_bound (case_node_ptr, tree);
- static int node_has_high_bound (case_node_ptr, tree);
 @@ -684,13 +685,14 @@
    for (tail = clobbers; tail; tail = TREE_CHAIN (tail))
      {
@@ -47317,304 +47234,6 @@
      }
    else if (retval_rhs != 0
  	   && !VOID_TYPE_P (TREE_TYPE (retval_rhs))
-@@ -2089,8 +2010,11 @@
- {
-   HOST_WIDE_INT hi;
-   HOST_WIDE_INT lo;
-+  HOST_WIDE_INT rev_hi;
-+  HOST_WIDE_INT rev_lo;
-   rtx label;
-   int bits;
-+  int prob;
- };
- 
- /* Determine whether "1 << x" is relatively cheap in word_mode.  */
-@@ -2130,10 +2054,195 @@
-   return CODE_LABEL_NUMBER (d2->label) - CODE_LABEL_NUMBER (d1->label);
- }
- 
-+/* Emit a bit test and a conditional jump.  */
-+
-+static void
-+emit_case_bit_test_jump (unsigned int count, rtx index, rtx label,
-+                         unsigned int method, HOST_WIDE_INT hi,
-+                         HOST_WIDE_INT lo, HOST_WIDE_INT rev_hi,
-+                         HOST_WIDE_INT rev_lo)
-+{
-+  rtx expr;
-+
-+  if (method == 1)
-+    {
-+      /* (1 << index). */
-+      if (count == 0)
-+        index = expand_binop (word_mode, ashl_optab, const1_rtx,
-+                              index, NULL_RTX, 1, OPTAB_WIDEN);
-+      /* CST.  */
-+      expr = immed_double_const (lo, hi, word_mode);
-+      /* ((1 << index) & CST).  */
-+      expr = expand_binop (word_mode, and_optab, index, expr,
-+                           NULL_RTX, 1, OPTAB_WIDEN);
-+      /* if (((1 << index) & CST)).   */
-+      emit_cmp_and_jump_insns (expr, const0_rtx, NE, NULL_RTX,
-+                               word_mode, 1, label);
-+    }
-+  else if (method == 2)
-+    {
-+      /* (bit_reverse (CST)) */
-+      expr = immed_double_const (rev_lo, rev_hi, word_mode);
-+      /* ((bit_reverse (CST)) << index) */
-+      expr = expand_binop (word_mode, ashl_optab, expr,
-+                           index, NULL_RTX, 1, OPTAB_WIDEN);
-+      /* if (((bit_reverse (CST)) << index) < 0).  */
-+      emit_cmp_and_jump_insns (expr, const0_rtx, LT, NULL_RTX,
-+                               word_mode, 0, label);
-+    }
-+  else
-+    gcc_unreachable ();
-+}
-+
-+/* Return the cost of rtx sequence SEQ.  The sequence is supposed to contain one
-+   jump, which has no effect in the cost.  */
-+
-+static unsigned int
-+rtx_seq_cost (rtx seq)
-+{
-+  rtx one;
-+  unsigned int nr_branches = 0;
-+  unsigned int sum = 0, cost;
-+
-+  for (one = seq; one != NULL_RTX; one = NEXT_INSN (one))
-+    if (JUMP_P (one))
-+      nr_branches++;
-+    else
-+      {
-+        cost = insn_rtx_cost (PATTERN (one), optimize_insn_for_speed_p ());
-+        if (dump_file)
-+          {
-+            print_rtl_single (dump_file, one);
-+            fprintf (dump_file, "cost: %u\n", cost);
-+          }
-+        sum += cost;
-+      }
-+
-+  gcc_assert (nr_branches == 1);
-+
-+  if (dump_file)
-+    fprintf (dump_file, "total cost: %u\n", sum);
-+  return sum;
-+}
-+
-+/* Generate the rtx sequences for 2 bit test expansion methods, measure the cost
-+   and choose the cheapest.  */
-+
-+static unsigned int
-+choose_case_bit_test_expand_method (rtx label)
-+{
-+  rtx seq, index;
-+  unsigned int cost[2];
-+  static bool method_known = false;
-+  static unsigned int method;
-+
-+  /* If already known, return the method.  */
-+  if (method_known)
-+    return method;
-+
-+  index = gen_rtx_REG (word_mode, 10000);
-+
-+  for (method = 1; method <= 2; ++method)
-+    {
-+      start_sequence ();
-+      emit_case_bit_test_jump (0, index, label, method, 0, 0x0f0f0f0f, 0,
-+                               0x0f0f0f0f);
-+      seq = get_insns ();
-+      end_sequence ();
-+      cost[method - 1] = rtx_seq_cost (seq);
-+    }
-+
-+  /* Determine method based on heuristic.  */
-+  method = ((cost[1] < cost[0]) ? 1 : 0) + 1;
-+
-+  /* Save and return method.  */
-+  method_known = true;
-+  return method;
-+}
-+
-+/* Get the edge probability of the edge from SRC to LABEL_DECL.  */
-+
-+static int
-+get_label_prob (basic_block src, tree label_decl)
-+{
-+  basic_block dest;
-+  int prob = 0, nr_prob = 0;
-+  unsigned int i;
-+  edge e;
-+
-+  if (label_decl == NULL_TREE)
-+    return 0;
-+
-+  dest = VEC_index (basic_block, label_to_block_map,
-+                    LABEL_DECL_UID (label_decl));
-+
-+  for (i = 0; i < EDGE_COUNT (src->succs); ++i)
-+    {
-+      e = EDGE_SUCC (src, i);
-+
-+      if (e->dest != dest)
-+        continue;
-+
-+      prob += e->probability;
-+      nr_prob++;
-+    }
-+
-+  gcc_assert (nr_prob == 1);
-+
-+  return prob;
-+}
-+
-+/* Add probability note with scaled PROB to JUMP and update INV_SCALE.  This
-+   function is intended to be used with a series of conditional jumps to L[i]
-+   where the probabilities p[i] to get to L[i] are known, and the jump
-+   probabilities j[i] need to be computed.
-+
-+   The algorithm to calculate the probabilities is
-+
-+   scale = REG_BR_PROB_BASE;
-+   for (i = 0; i < n; ++i)
-+     {
-+       j[i] = p[i] * scale / REG_BR_PROB_BASE;
-+       f[i] = REG_BR_PROB_BASE - j[i];
-+       scale = scale / (f[i] / REG_BR_PROB_BASE);
-+     }
-+
-+   The implementation uses inv_scale (REG_BR_PROB_BASE / scale) instead of
-+   scale, because scale tends to grow bigger than REG_BR_PROB_BASE.  */
-+
-+static void
-+set_jump_prob (rtx jump, int prob, int *inv_scale)
-+{
-+  /* j[i] = p[i] * scale / REG_BR_PROB_BASE.  */
-+  int jump_prob = (*inv_scale > 0
-+                   ? prob * REG_BR_PROB_BASE / *inv_scale
-+                   : REG_BR_PROB_BASE / 2);
-+  /* f[i] = REG_BR_PROB_BASE - j[i].  */
-+  int fallthrough_prob = REG_BR_PROB_BASE - jump_prob;
-+
-+  gcc_assert (jump_prob <= REG_BR_PROB_BASE);
-+  add_reg_note (jump, REG_BR_PROB, GEN_INT (jump_prob));
-+
-+  /* scale = scale / (f[i] / REG_BR_PROB_BASE).  */
-+  *inv_scale = *inv_scale * fallthrough_prob / REG_BR_PROB_BASE;
-+}
-+
-+/* Set bit in hwi hi/lo pair.  */
-+
-+static void
-+set_bit (HOST_WIDE_INT *hi, HOST_WIDE_INT *lo, unsigned int j)
-+{
-+  if (j >= HOST_BITS_PER_WIDE_INT)
-+    *hi |= (HOST_WIDE_INT) 1 << (j - HOST_BITS_PER_INT);
-+  else
-+    *lo |= (HOST_WIDE_INT) 1 << j;
-+}
-+
- /*  Expand a switch statement by a short sequence of bit-wise
-     comparisons.  "switch(x)" is effectively converted into
--    "if ((1 << (x-MINVAL)) & CST)" where CST and MINVAL are
--    integer constants.
-+    "if ((1 << (x-MINVAL)) & CST)" or
-+    "if (((bit_reverse (CST)) << (x-MINVAL)) < 0)", where CST
-+    and MINVAL are integer constants.
- 
-     INDEX_EXPR is the value being switched on, which is of
-     type INDEX_TYPE.  MINVAL is the lowest case value of in
-@@ -2147,14 +2256,17 @@
- 
- static void
- emit_case_bit_tests (tree index_type, tree index_expr, tree minval,
--		     tree range, case_node_ptr nodes, rtx default_label)
-+		     tree range, case_node_ptr nodes, tree default_label_decl,
-+		     rtx default_label, basic_block bb)
- {
-   struct case_bit_test test[MAX_CASE_BIT_TESTS];
-   enum machine_mode mode;
-   rtx expr, index, label;
-   unsigned int i,j,lo,hi;
-   struct case_node *n;
--  unsigned int count;
-+  unsigned int count, method;
-+  int inv_scale = REG_BR_PROB_BASE;
-+  int default_prob = get_label_prob (bb, default_label_decl);
- 
-   count = 0;
-   for (n = nodes; n; n = n->right)
-@@ -2169,8 +2281,11 @@
- 	  gcc_assert (count < MAX_CASE_BIT_TESTS);
- 	  test[i].hi = 0;
- 	  test[i].lo = 0;
-+	  test[i].rev_hi = 0;
-+	  test[i].rev_lo = 0;
- 	  test[i].label = label;
- 	  test[i].bits = 1;
-+	  test[i].prob = get_label_prob (bb, n->code_label);
- 	  count++;
- 	}
-       else
-@@ -2181,10 +2296,11 @@
-       hi = tree_low_cst (fold_build2 (MINUS_EXPR, index_type,
- 				      n->high, minval), 1);
-       for (j = lo; j <= hi; j++)
--        if (j >= HOST_BITS_PER_WIDE_INT)
--	  test[i].hi |= (HOST_WIDE_INT) 1 << (j - HOST_BITS_PER_INT);
--	else
--	  test[i].lo |= (HOST_WIDE_INT) 1 << j;
-+        {
-+          set_bit (&test[i].hi, &test[i].lo, j);
-+          set_bit (&test[i].rev_hi, &test[i].rev_lo,
-+                   GET_MODE_BITSIZE (word_mode) - j - 1);
-+        }
-     }
- 
-   qsort (test, count, sizeof(*test), case_bit_test_cmp);
-@@ -2198,20 +2314,20 @@
-   mode = TYPE_MODE (index_type);
-   expr = expand_normal (range);
-   if (default_label)
--    emit_cmp_and_jump_insns (index, expr, GTU, NULL_RTX, mode, 1,
--			     default_label);
-+    {
-+      emit_cmp_and_jump_insns (index, expr, GTU, NULL_RTX, mode, 1,
-+                               default_label);
-+      set_jump_prob (get_last_insn (), default_prob / 2, &inv_scale);
-+    }
- 
-   index = convert_to_mode (word_mode, index, 0);
--  index = expand_binop (word_mode, ashl_optab, const1_rtx,
--			index, NULL_RTX, 1, OPTAB_WIDEN);
- 
-+  method = choose_case_bit_test_expand_method (test[0].label);
-   for (i = 0; i < count; i++)
-     {
--      expr = immed_double_const (test[i].lo, test[i].hi, word_mode);
--      expr = expand_binop (word_mode, and_optab, index, expr,
--			   NULL_RTX, 1, OPTAB_WIDEN);
--      emit_cmp_and_jump_insns (expr, const0_rtx, NE, NULL_RTX,
--			       word_mode, 1, test[i].label);
-+      emit_case_bit_test_jump (i, index, test[i].label, method, test[i].hi,
-+                               test[i].lo, test[i].rev_hi, test[i].rev_lo);
-+      set_jump_prob (get_last_insn (), test[i].prob, &inv_scale);
-     }
- 
-   if (default_label)
-@@ -2382,7 +2498,8 @@
- 	      range = maxval;
- 	    }
- 	  emit_case_bit_tests (index_type, index_expr, minval, range,
--			       case_list, default_label);
-+			       case_list, default_label_decl, default_label,
-+			       gimple_bb (stmt));
- 	}
- 
-       /* If range of values is much bigger than number of values,
 --- a/src/gcc/stor-layout.c
 +++ b/src/gcc/stor-layout.c
 @@ -507,6 +507,34 @@
@@ -49766,62 +49385,6 @@
 +  free (temp.count);
 +  return 0;
 +}
---- a/src/gcc/testsuite/gcc.dg/switch-bittest.c
-+++ b/src/gcc/testsuite/gcc.dg/switch-bittest.c
-@@ -0,0 +1,25 @@
-+/* { dg-do compile } */
-+/* { dg-options "-O2 -fdump-rtl-expand" } */
-+
-+const char *
-+f (const char *p)
-+{
-+  while (1)
-+    {
-+      switch (*p)
-+        {
-+        case 9:
-+        case 10:
-+        case 13:
-+        case 32:
-+          break;
-+        default:
-+          return p;
-+        }
-+    }
-+}
-+
-+/* { dg-final { scan-rtl-dump-times "jump_insn" 4 "expand" { target mips*-*-* } } } */
-+/* { dg-final { scan-rtl-dump-times "REG_BR_PROB" 2 "expand" { target mips*-*-* } } } */
-+/* { dg-final { scan-rtl-dump-times "lt " 1 "expand"  { target mips*-*-* } } } */
-+/* { dg-final { cleanup-rtl-dump "expand" } } */
---- a/src/gcc/testsuite/gcc.dg/switch-prob.c
-+++ b/src/gcc/testsuite/gcc.dg/switch-prob.c
-@@ -0,0 +1,25 @@
-+/* { dg-do compile } */
-+/* { dg-options "-O2 -fdump-rtl-expand" } */
-+
-+const char *
-+f (const char *p)
-+{
-+  while (1)
-+    {
-+      switch (*p)
-+        {
-+        case 9:
-+        case 10:
-+        case 13:
-+        case 32:
-+          break;
-+        default:
-+          return p;
-+        }
-+    }
-+}
-+
-+/* { dg-final { scan-rtl-dump-times "jump_insn" 4 "expand" { target mips*-*-* } } } */
-+/* { dg-final { scan-rtl-dump-times "REG_BR_PROB" 2 "expand" { target mips*-*-* } } } */
-+/* { dg-final { scan-rtl-dump-times "heuristics" 0 "expand"  { target mips*-*-* } } } */
-+/* { dg-final { cleanup-rtl-dump "expand" } } */
 --- a/src/gcc/testsuite/gcc.dg/torture/arm-fp16-ops-5.c
 +++ b/src/gcc/testsuite/gcc.dg/torture/arm-fp16-ops-5.c
 @@ -1,7 +1,8 @@
diff -urN debian/rules.conf gcc-4.5-4.5.3.orig/debian/rules.conf
--- debian/rules.conf	2014-05-09 17:45:51.192100974 +0900
+++ gcc-4.5-4.5.3.orig/debian/rules.conf	2014-05-09 17:45:51.232287726 +0900
@@ -126,7 +126,7 @@
 # See http://gcc.gnu.org/ml/gcc-patches/2008-09/msg01713.html
 BINUTILSV      = 2.20.51.20100418~
 # Lower the binutils build dependency for amd64/i386. gold seems to be good enough on these architectures.
-BINUTILSV      = 2.20.1-14~
+BINUTILSV      = 2.20.1
 ifeq ($(DEB_CROSS),yes)
   BINUTILS_BUILD_DEP = binutils$(TS) (>= $(BINUTILSV))
 else
@@ -248,8 +248,8 @@
 endif
 
 PPL_BUILD_DEP = libppl-dev (>= 0.10) | libppl0.10-dev (>= 0.10),
-CLOOG_BUILD_DEP = libcloog-ppl-dev (>= 0.15.9-2~),
-CLOOG_RUNTIME_DEP = libcloog-ppl0 (>= 0.15.9-2~), libppl-c2, libppl7
+CLOOG_BUILD_DEP = libcloog-ppl-dev (>= 0.15.8),
+CLOOG_RUNTIME_DEP = libcloog-ppl0 (>= 0.15.8), libppl-c2, libppl7
 MPC_BUILD_DEP = libmpc-dev,
 ELF_BUILD_DEP = libelfg0-dev (>= 0.8.12),
 
diff -urN debian/rules.defs gcc-4.5-4.5.3.orig/debian/rules.defs
--- debian/rules.defs	2014-05-09 17:45:51.196104159 +0900
+++ gcc-4.5-4.5.3.orig/debian/rules.defs	2014-05-09 17:45:51.232287726 +0900
@@ -297,6 +297,10 @@
 # XXX: should with_common_libs be "yes" only if this is the default compiler
 # version on the targeted arch?
 
+# PPA uploads ...
+with_common_pkgs :=
+with_common_libs :=
+
 # is this a multiarch-enabled build?
 ifeq (,$(filter $(distrelease),lenny etch squeeze dapper hardy jaunty karmic lucid maverick))
   with_multiarch_lib := yes
@@ -947,6 +951,7 @@
 ifneq ($(findstring nocheck, $(DEB_BUILD_OPTIONS)),)
   with_check := disabled by DEB_BUILD_OPTIONS
 endif
+with_check := disabled for this build
 
 # not a dependency on all archs, but if available, use it for the testsuite
 ifneq (,$(wildcard /usr/bin/localedef))
diff -urN debian/rules.parameters gcc-4.5-4.5.3.orig/debian/rules.parameters
--- debian/rules.parameters	2014-05-09 17:45:51.196104159 +0900
+++ gcc-4.5-4.5.3.orig/debian/rules.parameters	2014-11-09 08:10:52.935278925 +0900
@@ -2,15 +2,15 @@
 GCC_VERSION	:= 4.5.3
 NEXT_GCC_VERSION	:= 4.5.4
 BASE_VERSION	:= 4.5
-SOURCE_VERSION	:= 4.5.3-12ubuntu1
-DEB_VERSION	:= 4.5.3-12ubuntu1
-DEB_EVERSION	:= 1:4.5.3-12ubuntu1
+SOURCE_VERSION	:= 4.5.3-12ubuntu2lucid3
+DEB_VERSION	:= 4.5.3-12ubuntu2lucid3
+DEB_EVERSION	:= 1:4.5.3-12ubuntu2lucid3
 GDC_BASE_VERSION  := 
 DEB_GDC_VERSION	:= 
 DEB_SOVERSION	:= 4.4
 DEB_SOEVERSION	:= 1:4.4
 DEB_LIBGCC_SOVERSION	:= 1:4.4
-DEB_LIBGCC_VERSION	:= 1:4.5.3-12ubuntu1
+DEB_LIBGCC_VERSION	:= 1:4.5.3-12ubuntu2lucid3
 DEB_STDCXX_SOVERSION	:= 4.4
 DEB_GCJ_SOVERSION	:= 4.4
 PKG_GCJ_EXT	:= 11
diff -urN debian/rules.patch gcc-4.5-4.5.3.orig/debian/rules.patch
--- debian/rules.patch	2014-05-09 17:45:51.196104159 +0900
+++ gcc-4.5-4.5.3.orig/debian/rules.patch	2014-05-09 17:45:51.232287726 +0900
@@ -250,11 +250,7 @@
 debian_patches += $(if $(with_linaro_branch),,gcc-powerpc-undef)
 debian_patches += gcc-only-build-m4nofpu
 ifeq ($(biarch32),yes)
-  ifeq ($(with_multiarch_lib),yes)
     debian_patches += gcc-multilib64-multiarch
-  else
-    debian_patches += gcc-multilib64
-  endif
 endif
 ifeq (,$(filter $(distrelease),lenny squeeze dapper hardy intrepid jaunty karmic lucid maverick))
   debian_patches += gcc-no-add-needed
