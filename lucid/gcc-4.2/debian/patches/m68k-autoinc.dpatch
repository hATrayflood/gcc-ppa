#! /bin/sh -e

# All lines beginning with `# DPATCH:' are a description of the patch.
# DP: recognize a few more autoinc possibilities

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p1 < $0
        #cd ${dir}gcc && autoconf
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p1 < $0
        #rm ${dir}gcc/configure
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

---
 gcc/flow.c |   55 +++++++++++++++++++++++++++++++++++++++++++++----------
 1 file changed, 45 insertions(+), 10 deletions(-)

Index: gcc-4.2/gcc/flow.c
===================================================================
--- gcc-4.2.orig/gcc/flow.c
+++ gcc-4.2/gcc/flow.c
@@ -1801,7 +1801,6 @@ propagate_one_insn (struct propagate_blo
 	&& REG_P (SET_DEST (x))
 	&& (GET_CODE (SET_SRC (x)) == PLUS
 	    || GET_CODE (SET_SRC (x)) == MINUS)
-	&& XEXP (SET_SRC (x), 0) == SET_DEST (x)
 	&& GET_CODE (XEXP (SET_SRC (x), 1)) == CONST_INT
 	/* Ok, look for a following memory ref we can combine with.
 	   If one is found, change the memory ref to a PRE_INC
@@ -3502,13 +3501,25 @@ attempt_auto_inc (struct propagate_block
   rtx set = single_set (incr);
   rtx q = SET_DEST (set);
   rtx y = SET_SRC (set);
-  int opnum = XEXP (y, 0) == incr_reg ? 0 : 1;
+  rtx *loc = &SET_SRC (set);
   int changed;
 
   /* Make sure this reg appears only once in this insn.  */
   if (count_occurrences (PATTERN (insn), incr_reg, 1) != 1)
     return;
 
+  if (GET_CODE (y) != PLUS)
+    {
+      if (MEM_P (y) && GET_CODE (XEXP (y, 0)) == PLUS)
+	loc = &XEXP (y, 0);
+      else if (MEM_P (q) && GET_CODE (XEXP (q, 0)) == PLUS)
+	loc = &XEXP (q, 0);
+      else
+	abort();
+      y = *loc;
+      q = NULL_RTX;
+    }
+
   if (dead_or_set_p (incr, incr_reg)
       /* Mustn't autoinc an eliminable register.  */
       && (regno >= FIRST_PSEUDO_REGISTER
@@ -3520,7 +3531,7 @@ attempt_auto_inc (struct propagate_block
       if (! validate_change (insn, &XEXP (mem, 0), inc, 0))
 	return;
     }
-  else if (REG_P (q)
+  else if (q && REG_P (q)
 	   /* PREV_INSN used here to check the semi-open interval
 	      [insn,incr).  */
 	   && ! reg_used_between_p (q,  PREV_INSN (insn), incr)
@@ -3535,6 +3546,7 @@ attempt_auto_inc (struct propagate_block
 	 Change it to q = p, ...*q..., q = q+size.
 	 Then fall into the usual case.  */
       rtx insns, temp;
+      int opnum = XEXP (y, 0) == incr_reg ? 0 : 1;
 
       start_sequence ();
       emit_move_insn (q, incr_reg);
@@ -3607,13 +3619,13 @@ attempt_auto_inc (struct propagate_block
 
   /* Modify the old increment-insn to simply copy
      the already-incremented value of our register.  */
-  changed = validate_change (incr, &SET_SRC (set), incr_reg, 0);
+  changed = validate_change (incr, loc, incr_reg, 0);
   gcc_assert (changed);
 
   /* If that makes it a no-op (copying the register into itself) delete
      it so it won't appear to be a "use" and a "set" of this
      register.  */
-  if (REGNO (SET_DEST (set)) == REGNO (incr_reg))
+  if (q && REGNO (q) == REGNO (incr_reg))
     {
       /* If the original source was dead, it's dead now.  */
       rtx note;
@@ -3687,7 +3699,22 @@ find_auto_inc (struct propagate_block_in
   y = SET_SRC (set);
 
   if (GET_CODE (y) != PLUS)
-    return;
+    {
+      if (MEM_P (y) && GET_CODE (XEXP (y, 0)) == PLUS)
+	{
+	  if (reg_overlap_mentioned_p (addr, SET_DEST (set)))
+	    return;
+	  y = XEXP (y, 0);
+	}
+      else
+	{
+	  y = SET_DEST (set);
+	  if (!MEM_P (y) || GET_CODE (XEXP (y, 0)) != PLUS
+	      || reg_overlap_mentioned_p (addr, SET_SRC (set)))
+	    return;
+	  y = XEXP (y, 0);
+	}
+    }
 
   if (REG_P (XEXP (y, 0)) && REGNO (XEXP (y, 0)) == REGNO (addr))
     inc_val = XEXP (y, 1);
@@ -4250,10 +4277,6 @@ try_pre_increment_1 (struct propagate_bl
       && ! dead_or_set_p (y, SET_DEST (x))
       && try_pre_increment (y, SET_DEST (x), amount))
     {
-      /* We have found a suitable auto-increment and already changed
-	 insn Y to do it.  So flush this increment instruction.  */
-      propagate_block_delete_insn (insn);
-
       /* Count a reference to this reg for the increment insn we are
 	 deleting.  When a reg is incremented, spilling it is worse,
 	 so we want to make that less likely.  */
@@ -4263,6 +4286,18 @@ try_pre_increment_1 (struct propagate_bl
 	  REG_N_SETS (regno)++;
 	}
 
+      if (XEXP (SET_SRC (x), 0) != SET_DEST (x))
+	{
+	  int change;
+	  change = validate_change (insn, &SET_SRC (x), XEXP (SET_SRC (x), 0), 0);
+	  gcc_assert(change);
+	  return 0;
+	}
+
+      /* We have found a suitable auto-increment and already changed
+	 insn Y to do it.  So flush this increment instruction.  */
+      propagate_block_delete_insn (insn);
+
       /* Flush any remembered memories depending on the value of
 	 the incremented register.  */
       invalidate_mems_from_set (pbi, SET_DEST (x));
