#! /bin/sh -e

# gdc-4.2-build.dpatch by Arthur Loiret <arthur.loiret@gmail.com>
# DP: Update gdc for gcc-4.2.x builtins.

dir=
if [ $# -eq 3 ] && [ "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
	patch $pdir -f --no-backup-if-mismatch -p0 < $0
        cd ${dir}libcpp && autoconf
	;;
    -unpatch)
	patch $pdir -f --no-backup-if-mismatch -R -p0 < $0
        cd ${dir}libcpp && autoconf
	;;
    *)
	echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
	exit 1;;
esac
exit 0

--- gcc/d/Make-lang.in	2008-02-03 16:05:55.000000000 +0000
+++ gcc/d/Make-lang.in	2008-02-03 16:12:36.000000000 +0000
@@ -43,12 +43,43 @@
 # specification syntax.  Can still use extended asm if disabled.
 # D_EXTRA_DEFINES += -DGDC_EXTENDED_ASM_SYNTAX=1
 
+# Would be better to configure these rather than running shell script again and again,
+# but would require a patch to gcc/configure.ac
+D_gcc_main_ver:=$(shell echo $(version) | sed -e 's/\([0-9]*\.[0-9]*\).*/\1/')
+ifeq ($(D_gcc_main_ver),4.0)
+  D_is_apple_ver:=$(shell grep version_string $(gcc_version_trigger) | grep 'Apple')
+endif
+
+ifeq ($(D_gcc_main_ver),3.3)
+  $(error gcc-3.3 is no longer supported by gdc)
+else ifeq ($(D_gcc_main_ver),3.4)
+  D_EXTRA_DEFINES += -DD_GCC_VER=34
+else ifeq ($(D_gcc_main_ver),4.0)
+  D_EXTRA_DEFINES += -DD_GCC_VER=40
+else ifeq ($(D_gcc_main_ver),4.1)
+  D_EXTRA_DEFINES += -DD_GCC_VER=41
+else ifeq ($(D_gcc_main_ver),4.2)
+  D_EXTRA_DEFINES += -DD_GCC_VER=42
+else ifeq ($(D_gcc_main_ver),4.3)
+  D_EXTRA_DEFINES += -DD_GCC_VER=43
+else
+  $(error gcc-$(D_gcc_main_ver) is not supported by gdc)
+endif
+
+
 # As with C++: (quote) OTOH, I think this means the g++ driver...
 # Note that it would be nice to move the dependency on g++
 # into the C++ rule, but that needs a little bit of work
 # to do the right thing within all.cross.
 D_DRIVER_NAME = gdc
-D_DRIVER_OBJS = d/d-spec.o d/d-gcc.o version.o prefix.o intl.o
+D_DRIVER_OBJS = d/d-spec.o version.o prefix.o intl.o
+ifeq ($(D_gcc_main_ver),4.2)
+  D_DRIVER_OBJS += $(GCC_OBJS)
+else ifeq ($(D_gcc_main_ver),4.3)
+  D_DRIVER_OBJS += $(GCC_OBJS)
+else
+  D_DRIVER_OBJS += d/d-gcc.o
+endif
 D_COMPILER_NAME = cc1d
 
 D_INSTALL_NAME = $(shell echo $(D_DRIVER_NAME)|sed '$(program_transform_name)')
@@ -98,24 +129,8 @@
 #D_EXTRA_DEFINES += -DD_PHOBOS_DIR=\"$(gcc_d_include_dir)\"
 
 
-# Would be better to configure these rather than running shell script again and again,
-# but would require a patch to gcc/configure.ac
-D_gcc_main_ver:=$(shell echo $(version) | sed -e 's/\([0-9]*\.[0-9]*\).*/\1/')
-ifeq ($(D_gcc_main_ver),4.0)
-  D_is_apple_ver:=$(shell grep version_string $(gcc_version_trigger) | grep 'Apple')
-endif
-
 gcc_d_target_include_dir=$(gcc_d_include_dir)/$(target_noncanonical)
 
-ifeq ($(D_gcc_main_ver),3.4)
-  D_EXTRA_DEFINES += -DD_GCC_VER=34
-else
-  ifeq ($(D_gcc_main_ver),4.0)
-   D_EXTRA_DEFINES += -DD_GCC_VER=40
-  else
-   D_EXTRA_DEFINES += -DD_GCC_VER=41
-  endif
-endif
 
 # Actual names to use when installing a cross-compiler.
 D_CROSS_NAME = $(D_INSTALL_NAME)
@@ -167,11 +182,18 @@
 	cp $(D_DRIVER_NAME)$(exeext) $(D_DRIVER_NAME)-cross$(exeext)
 
 D_DMD_OBJS = \
-    d/access.dmd.o d/array.dmd.o d/attrib.dmd.o d/cast.dmd.o d/class.dmd.o d/cond.dmd.o d/constfold.dmd.o d/dchar.dmd.o d/declaration.dmd.o d/delegatize.dmd.o d/doc.dmd.o \
-    d/dsymbol.dmd.o d/dump.dmd.o d/entity.dmd.o d/enum.dmd.o d/expression.dmd.o d/func.dmd.o d/gnuc.dmd.o d/hdrgen.dmd.o d/html.dmd.o d/identifier.dmd.o d/import.dmd.o \
-    d/init.dmd.o d/inline.dmd.o d/interpret.dmd.o d/lexer.dmd.o d/lstring.dmd.o d/macro.dmd.o d/mangle.dmd.o d/mars.dmd.o d/mem.dmd.o d/mtype.dmd.o d/module.dmd.o d/opover.dmd.o d/optimize.dmd.o d/parse.dmd.o \
-    d/root.dmd.o d/scope.dmd.o d/statement.dmd.o d/staticassert.dmd.o d/stringtable.dmd.o d/struct.dmd.o d/template.dmd.o  \
-    d/todt.dmd.o d/toobj.dmd.o d/typinf.dmd.o d/unialpha.dmd.o d/utf.dmd.o d/version.dmd.o
+    d/access.dmd.o d/array.dmd.o d/attrib.dmd.o d/cast.dmd.o d/class.dmd.o \
+    d/cond.dmd.o d/constfold.dmd.o d/dchar.dmd.o d/declaration.dmd.o \
+    d/delegatize.dmd.o d/doc.dmd.o d/dsymbol.dmd.o d/dump.dmd.o \
+    d/entity.dmd.o d/enum.dmd.o d/expression.dmd.o d/func.dmd.o \
+    d/gnuc.dmd.o d/hdrgen.dmd.o d/html.dmd.o d/identifier.dmd.o \
+    d/import.dmd.o d/init.dmd.o d/inline.dmd.o d/interpret.dmd.o \
+    d/lexer.dmd.o d/lstring.dmd.o d/macro.dmd.o d/mangle.dmd.o d/mars.dmd.o \
+    d/mem.dmd.o d/mtype.dmd.o d/module.dmd.o d/opover.dmd.o d/optimize.dmd.o \
+    d/parse.dmd.o d/root.dmd.o d/scope.dmd.o d/statement.dmd.o \
+    d/staticassert.dmd.o d/stringtable.dmd.o d/struct.dmd.o d/template.dmd.o \
+    d/todt.dmd.o d/toobj.dmd.o d/typinf.dmd.o d/unialpha.dmd.o d/utf.dmd.o \
+    d/version.dmd.o
 ifeq ($(D_LANGUAGE_VERSION),2)
 D_DMD_OBJS += d/builtin.dmd.o d/traits.dmd.o
 endif
@@ -180,7 +202,7 @@
 D_GLUE_OBJS = d/d-lang.glue.o d/d-decls.glue.o d/d-codegen.glue.o d/d-objfile.glue.o d/d-irstate.glue.o  \
 	d/d-glue.glue.o d/d-convert.glue.o d/d-todt.glue.o d/d-gcc-real.glue.o \
         d/d-gt.cglue.o d/d-builtins.cglue.o d/d-misc.cglue.o d/d-builtins2.glue.o \
-	d/symbol.glue.o d/asmstmt.glue.o d/dt.glue.o 
+	d/symbol.glue.o d/asmstmt.glue.o d/dt.glue.o
 ifeq ($(D_LANGUAGE_VERSION),2)
 D_GLUE_OBJS += d/d-cppmngl.glue.o
 endif
--- gcc/d/d-builtins.c	2008-02-03 16:06:22.000000000 +0000
+++ gcc/d/d-builtins.c	2008-02-03 16:07:42.000000000 +0000
@@ -203,6 +203,7 @@
 #define DEF_FUNCTION_TYPE_4(NAME, RETURN, ARG1, ARG2, ARG3, ARG4) NAME,
 #define DEF_FUNCTION_TYPE_5(NAME, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5) NAME,
 #define DEF_FUNCTION_TYPE_6(NAME, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6) NAME,
+#define DEF_FUNCTION_TYPE_7(NAME, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7) NAME,
 #define DEF_FUNCTION_TYPE_VAR_0(NAME, RETURN) NAME,
 #define DEF_FUNCTION_TYPE_VAR_1(NAME, RETURN, ARG1) NAME,
 #define DEF_FUNCTION_TYPE_VAR_2(NAME, RETURN, ARG1, ARG2) NAME,
@@ -219,6 +220,7 @@
 #undef DEF_FUNCTION_TYPE_4
 #undef DEF_FUNCTION_TYPE_5
 #undef DEF_FUNCTION_TYPE_6
+#undef DEF_FUNCTION_TYPE_7
 #undef DEF_FUNCTION_TYPE_VAR_0
 #undef DEF_FUNCTION_TYPE_VAR_1
 #undef DEF_FUNCTION_TYPE_VAR_2
@@ -230,14 +232,56 @@
   };
   typedef enum builtin_type builtin_type;
 
-  tree builtin_types[(int) BT_LAST];
-  
+  tree builtin_types[(int) BT_LAST + 1];
+
+#if D_GCC_VER >= 42
+/* A helper function for c_common_nodes_and_builtins.  Build function type
+   for DEF with return type RET and N arguments.  If VAR is true, then the
+   function should be variadic after those N arguments.
+
+   Takes special care not to ICE if any of the types involved are
+   error_mark_node, which indicates that said type is not in fact available
+   (see builtin_type_for_size).  In which case the function type as a whole
+   should be error_mark_node.  */
+
+  void
+  def_fn_type (builtin_type def, builtin_type ret, bool var, int n, ...)
+  {
+    tree args = NULL, t;
+    va_list list;
+    int i;
+
+    va_start (list, n);
+    for (i = 0; i < n; ++i)
+      {
+        builtin_type a = va_arg (list, builtin_type);
+        t = builtin_types[a];
+        if (t == error_mark_node)
+         goto egress;
+        args = tree_cons (NULL_TREE, t, args);
+      }
+    va_end (list);
+
+    args = nreverse (args);
+    if (!var)
+      args = chainon (args, void_list_node);
+
+    t = builtin_types[ret];
+    if (t == error_mark_node)
+      goto egress;
+    t = build_function_type (t, args);
+
+   egress:
+    builtin_types[def] = t;
+}
+#endif
+
   tree va_list_ref_type_node;
   tree va_list_arg_type_node;
 
   d_bi_init((int) BT_LAST, (int) END_BUILTINS);
-    
-    
+
+
   if (TREE_CODE (va_list_type_node) == ARRAY_TYPE)
     {
 	/* It might seem natural to make the reference type a pointer,
@@ -268,6 +312,42 @@
   pid_type_node = lookup_C_type_name(PID_TYPE);
 #endif
 
+#if D_GCC_VER >= 42
+#define DEF_PRIMITIVE_TYPE(ENUM, VALUE) \
+  builtin_types[ENUM] = VALUE;
+#define DEF_FUNCTION_TYPE_0(ENUM, RETURN) \
+  def_fn_type (ENUM, RETURN, 0, 0);
+#define DEF_FUNCTION_TYPE_1(ENUM, RETURN, ARG1) \
+  def_fn_type (ENUM, RETURN, 0, 1, ARG1);
+#define DEF_FUNCTION_TYPE_2(ENUM, RETURN, ARG1, ARG2) \
+  def_fn_type (ENUM, RETURN, 0, 2, ARG1, ARG2);
+#define DEF_FUNCTION_TYPE_3(ENUM, RETURN, ARG1, ARG2, ARG3) \
+  def_fn_type (ENUM, RETURN, 0, 3, ARG1, ARG2, ARG3);
+#define DEF_FUNCTION_TYPE_4(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4) \
+  def_fn_type (ENUM, RETURN, 0, 4, ARG1, ARG2, ARG3, ARG4);
+#define DEF_FUNCTION_TYPE_5(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5) \
+  def_fn_type (ENUM, RETURN, 0, 5, ARG1, ARG2, ARG3, ARG4, ARG5);
+#define DEF_FUNCTION_TYPE_6(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \
+                            ARG6)                                       \
+  def_fn_type (ENUM, RETURN, 0, 6, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6);
+#define DEF_FUNCTION_TYPE_7(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5, \
+                            ARG6, ARG7)                                 \
+  def_fn_type (ENUM, RETURN, 0, 7, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7);
+#define DEF_FUNCTION_TYPE_VAR_0(ENUM, RETURN) \
+  def_fn_type (ENUM, RETURN, 1, 0);
+#define DEF_FUNCTION_TYPE_VAR_1(ENUM, RETURN, ARG1) \
+  def_fn_type (ENUM, RETURN, 1, 1, ARG1);
+#define DEF_FUNCTION_TYPE_VAR_2(ENUM, RETURN, ARG1, ARG2) \
+  def_fn_type (ENUM, RETURN, 1, 2, ARG1, ARG2);
+#define DEF_FUNCTION_TYPE_VAR_3(ENUM, RETURN, ARG1, ARG2, ARG3) \
+  def_fn_type (ENUM, RETURN, 1, 3, ARG1, ARG2, ARG3);
+#define DEF_FUNCTION_TYPE_VAR_4(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4) \
+  def_fn_type (ENUM, RETURN, 1, 4, ARG1, ARG2, ARG3, ARG4);
+#define DEF_FUNCTION_TYPE_VAR_5(ENUM, RETURN, ARG1, ARG2, ARG3, ARG4, ARG5) \
+  def_fn_type (ENUM, RETURN, 1, 5, ARG1, ARG2, ARG3, ARG4, ARG5);
+#define DEF_POINTER_TYPE(ENUM, TYPE) \
+  builtin_types[(int) ENUM] = build_pointer_type (builtin_types[(int) TYPE]);
+#else
 #define DEF_PRIMITIVE_TYPE(ENUM, VALUE) \
   builtin_types[(int) ENUM] = VALUE;
 #define DEF_FUNCTION_TYPE_0(ENUM, RETURN)		\
@@ -417,6 +497,7 @@
 #define DEF_POINTER_TYPE(ENUM, TYPE)			\
   builtin_types[(int) ENUM]				\
     = build_pointer_type (builtin_types[(int) TYPE]);
+#endif
 #include "builtin-types.def"
 #undef DEF_PRIMITIVE_TYPE
 #undef DEF_FUNCTION_TYPE_1
