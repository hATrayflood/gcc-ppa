#! /bin/sh -e

# gdc-fix-build.dpatch by Arthur Loiret <arthur.loiret@gmail.com>
# DP: Fix libphobos build on non-biarched 64 bit systems.

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p0 < $0
        #cd ${dir}gcc && autoconf
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p0 < $0
        #rm ${dir}gcc/configure
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

--- gcc/d/dmd/mtype.c	2008-02-04 20:54:14.000000000 +0000
+++ gcc/d/dmd/mtype.c	2008-02-04 20:54:17.000000000 +0000
@@ -247,7 +247,7 @@
 
     tvoidptr = tvoid->pointerTo();
 
-    if (global.params.isX86_64)
+    if (global.params.is64BIT)
     {
 	PTRSIZE = 8;
 	if (global.params.isLinux)
--- gcc/d/dmd/statement.c	2008-02-04 20:54:14.000000000 +0000
+++ gcc/d/dmd/statement.c	2008-02-04 20:54:17.000000000 +0000
@@ -1180,7 +1180,7 @@
 		    error("no storage class for key %s", arg->ident->toChars());
 		TY keyty = arg->type->ty;
 		if ((keyty != Tint32 && keyty != Tuns32) &&
-		    (! global.params.isX86_64 ||
+		    (! global.params.is64BIT ||
 			(keyty != Tint64 && keyty != Tuns64))
 		   )
 		{
@@ -1322,7 +1322,7 @@
 
 	    if (key &&
 		((key->type->ty != Tint32 && key->type->ty != Tuns32) &&
-		 (! global.params.isX86_64 ||
+		 (! global.params.is64BIT ||
 		     (key->type->ty != Tint64 && key->type->ty != Tuns64))
 	        )
 	       )
--- gcc/d/dmd/mars.h	2008-02-04 20:54:14.000000000 +0000
+++ gcc/d/dmd/mars.h	2008-02-04 20:54:17.000000000 +0000
@@ -54,7 +54,7 @@
     char symdebug;	// insert debug symbolic information
     char optimize;	// run optimizer
     char cpu;		// target CPU
-    char isX86_64;	// generate X86_64 bit code
+    char is64BIT;	// generate 64 bit code
     char isLinux;	// generate code for linux
     char isWindows;	// generate code for Windows
     char scheduler;	// which scheduler to use
--- gcc/d/dmd/func.c	2008-02-04 20:54:14.000000000 +0000
+++ gcc/d/dmd/func.c	2008-02-04 20:54:17.000000000 +0000
@@ -2570,7 +2570,7 @@
     {
 	Argument *a = Argument::getNth(tf->parameters, 0);
 	if (!a->type->equals(Type::tuns32)  &&
-	    (! global.params.isX86_64 || !a->type->equals(Type::tuns64)))
+	    (! global.params.is64BIT || !a->type->equals(Type::tuns64)))
 	    error("first argument must be type uint, not %s", a->type->toChars());
     }
 
--- gcc/d/dmd2/mtype.c	2008-02-04 20:54:14.000000000 +0000
+++ gcc/d/dmd2/mtype.c	2008-02-04 20:54:17.000000000 +0000
@@ -274,7 +274,7 @@
 
     tvoidptr = tvoid->pointerTo();
 
-    if (global.params.isX86_64)
+    if (global.params.is64BIT)
     {
 	PTRSIZE = 8;
 	if (global.params.isLinux)
--- gcc/d/dmd2/statement.c	2008-02-04 20:54:14.000000000 +0000
+++ gcc/d/dmd2/statement.c	2008-02-04 20:54:17.000000000 +0000
@@ -1180,7 +1180,7 @@
 		    error("no storage class for key %s", arg->ident->toChars());
 		TY keyty = arg->type->ty;
 		if ((keyty != Tint32 && keyty != Tuns32) &&
-		    (! global.params.isX86_64 ||
+		    (! global.params.is64BIT ||
 			(keyty != Tint64 && keyty != Tuns64))
 		   )
 		{
@@ -1325,7 +1325,7 @@
 
 	    if (key &&
 		((key->type->ty != Tint32 && key->type->ty != Tuns32) &&
-		 (! global.params.isX86_64 ||
+		 (! global.params.is64BIT ||
 		     (key->type->ty != Tint64 && key->type->ty != Tuns64))
 	        )
 	       )
--- gcc/d/dmd2/mars.h	2008-02-04 20:54:14.000000000 +0000
+++ gcc/d/dmd2/mars.h	2008-02-04 20:54:17.000000000 +0000
@@ -54,7 +54,7 @@
     char symdebug;	// insert debug symbolic information
     char optimize;	// run optimizer
     char cpu;		// target CPU
-    char isX86_64;	// generate X86_64 bit code
+    char is64BIT;	// generate 64 bit code
     char isLinux;	// generate code for linux
     char isWindows;	// generate code for Windows
     char scheduler;	// which scheduler to use
--- gcc/d/dmd2/func.c	2008-02-04 20:54:14.000000000 +0000
+++ gcc/d/dmd2/func.c	2008-02-04 20:54:17.000000000 +0000
@@ -2507,7 +2507,7 @@
     {
 	Argument *a = Argument::getNth(tf->parameters, 0);
 	if (!a->type->equals(Type::tuns32)  &&
-	    (! global.params.isX86_64 || !a->type->equals(Type::tuns64)))
+	    (! global.params.is64BIT || !a->type->equals(Type::tuns64)))
 	    error("first argument must be type uint, not %s", a->type->toChars());
     }
 
--- gcc/d/d-glue.cc	2008-02-04 20:54:14.000000000 +0000
+++ gcc/d/d-glue.cc	2008-02-04 20:54:17.000000000 +0000
@@ -2874,7 +2874,7 @@
 
 	/* On PowerPC 64, GCC may not always clear the padding at the end
 	   of the struct. Adding 32-bit words at the end helps. */
-	if (global.params.isX86_64 && ! sym->isUnionDeclaration() && sym->fields.dim)
+	if (global.params.is64BIT && ! sym->isUnionDeclaration() && sym->fields.dim)
 	{
 	    target_size_t ofs;
 	    {
--- gcc/d/d-lang.cc	2008-02-04 20:54:14.000000000 +0000
+++ gcc/d/d-lang.cc	2008-02-04 20:54:17.000000000 +0000
@@ -275,10 +275,38 @@
 {
     const char * cpu_versym = NULL;
     
-    /* Currently, isX86_64 indicates a 64-bit target in general and is not
-       Intel-specific. */
+    /* isX86_64 has been renamed to is64BIT since it was not Intel-specific. */
 #ifdef TARGET_64BIT
-    global.params.isX86_64 = TARGET_64BIT ? 1 : 0;
+    global.params.is64BIT = TARGET_64BIT ? 1 : 0;
+#else
+    /* TARGET_64BIT is only defined on biarched defaulted to 64bits archs
+     * (as amd64 or s390x) so for full 64 bits archs (as ia64 or alpha) we
+     * need to test it more. */
+#  ifdef D_CPU_VERSYM64
+	/* We are "defaulting" to 32bits, which mean that if both D_CPU_VERSYM
+	 * and D_CPU_VERSYM64 are defined, and not TARGET_64BIT, we will use
+	 * 32 bits. This will be overidden for full 64 bits archs */
+	global.params.is64BIT = 0;
+#    ifndef D_CPU_VERSYM
+	/* So this is typically for alpha and ia64 */
+	global.params.is64BIT = 1;
+#    endif
+#  else
+#    ifdef D_CPU_VERSYM /* D_CPU_VERSYM is defined and D_CPU_VERSYM64 is not. */
+	global.params.is64BIT = 0;
+#    else
+	/* If none of D_CPU_VERSYM and D_CPU_VERSYM64 defined check size_t
+	 * length instead. */
+	switch (sizeof(size_t)) {
+	    case 4:
+	    	global.params.is64BIT = 0;
+		break;
+	    case 8:
+	        global.params.is64BIT = 1;
+		break;
+	}
+#    endif
+#  endif
 #endif
     
     Type::init();
@@ -294,11 +322,9 @@
 #ifdef D_CPU_VERSYM
     cpu_versym = D_CPU_VERSYM;
 #endif
-#ifdef TARGET_64BIT
-#  ifdef D_CPU_VERSYM64
-    if (TARGET_64BIT)
-	cpu_versym = D_CPU_VERSYM64;
-#  endif
+#ifdef D_CPU_VERSYM64
+    if (global.params.is64BIT == 1)
+    	cpu_versym = D_CPU_VERSYM64;
 #endif
     if (cpu_versym)
 	VersionCondition::addPredefinedGlobalIdent((char*) cpu_versym);
--- gcc/d/target-ver-syms.sh	2008-02-04 20:54:14.000000000 +0000
+++ gcc/d/target-ver-syms.sh	2008-02-04 20:54:17.000000000 +0000
@@ -47,14 +47,19 @@
 esac
 
 case "$target_cpu" in
-alpha*)  d_cpu_versym=Alpha ; d_cpu_versym64=Alpha64 ;;
+alpha*)                       d_cpu_versym64=Alpha ;;
 arm*)    d_cpu_versym=ARM ;;
+hppa*)   d_cpu_versym=HPPA  ; d_cpu_versym64=HPPA64 ;;
 i*86)    d_cpu_versym=X86   ; d_cpu_versym64=X86_64 ;;
+ia64*)                        d_cpu_versym64=IA64 ;;
 mips*)   d_cpu_versym=MIPS  ; d_cpu_versym64=MIPS64 ;;
+parisc*) d_cpu_versym=HPPA  ; d_cpu_versym64=HPPA64 ;;
 *ppc*)   d_cpu_versym=PPC   ; d_cpu_versym64=PPC64 ;;
 powerpc*)d_cpu_versym=PPC   ; d_cpu_versym64=PPC64 ;;
+s390*)   d_cpu_versym=S390  ; d_cpu_versym64=S390X ;;
 sparc*)  d_cpu_versym=SPARC ; d_cpu_versym64=SPARC64 ;;
 x86_64)  d_cpu_versym=X86   ; d_cpu_versym64=X86_64 ;;
+sh*)     d_cpu_versym=SH    ; d_cpu_versym64=SH64 ;;
 esac
 
 if test -n "$d_cpu_versym"; then
--- gcc/d/d-gcc-includes.h	2008-02-04 20:54:14.000000000 +0000
+++ gcc/d/d-gcc-includes.h	2008-02-04 20:54:46.000000000 +0000
@@ -31,6 +31,23 @@
 #include "config.h"
 #include "system.h"
 
+/* Those are used in TARGET_OS_CPP_BUILTINS in some gcc/config/<arch>/<arch>.c
+ * (alpha, mips, arm and a few others) for some builtin_defines such
+ * __LAGUAGE_C_PLUS_PLUS but are defined in c-common.h. */
+#ifndef c_dialect_cxx
+#  define c_dialect_cxx()      0
+#endif
+#ifndef c_dialect_objc
+#  define c_dialect_objc()     0
+#endif
+
+/* Even if they are defined in d-apple-gcc.c and d-c-stubs.c, they are also
+ * used in config/mips (as in config/darwin), so as we don't /need/ them,
+ * better to define an empty macro here. */
+#ifndef builtin_define_with_value
+#  define builtin_define_with_value(macro, expansion, is_str)
+#endif
+
 /* Before gcc 4.0, <stdbool.h> was included before defining bool.  In 4.0,
    it is always defined as "unsigned char" unless __cplusplus.  Have to make
    sure the "bool" under c++ is the same so that structs are laid out
--- gcc/config/rs6000/rs6000.h	2008-02-04 20:56:08.000000000 +0000
+++ gcc/config/rs6000/rs6000.h	2008-02-04 22:40:58.000000000 +0000
@@ -357,10 +357,6 @@
   targetm.resolve_overloaded_builtin = altivec_resolve_overloaded_builtin; \
 } while (0)
 
-/* Target #defines.  */
-#define TARGET_CPU_CPP_BUILTINS() \
-  rs6000_cpu_cpp_builtins (pfile)
-
 /* This is used by rs6000_cpu_cpp_builtins to indicate the byte order
    we're compiling for.  Some configurations may need to override it.  */
 #define RS6000_CPU_CPP_ENDIAN_BUILTINS()	\
@@ -380,6 +376,76 @@
 	}					\
     }						\
   while (0)
+
+/* Target #defines.  */
+#define TARGET_CPU_CPP_BUILTINS() do {				\
+  if (TARGET_POWER2)						\
+      builtin_define ("_ARCH_PWR2");				\
+  else if (TARGET_POWER)					\
+      builtin_define ("_ARCH_PWR");				\
+  if (TARGET_POWERPC)						\
+      builtin_define ("_ARCH_PPC");				\
+  if (TARGET_PPC_GPOPT)						\
+      builtin_define ("_ARCH_PPCSQ");				\
+  if (TARGET_PPC_GFXOPT)					\
+      builtin_define ("_ARCH_PPCGR");				\
+  if (TARGET_POWERPC64)						\
+      builtin_define ("_ARCH_PPC64");				\
+  if (TARGET_MFCRF)						\
+      builtin_define ("_ARCH_PWR4");				\
+  if (TARGET_POPCNTB)						\
+      builtin_define ("_ARCH_PWR5");				\
+  if (TARGET_FPRND)						\
+      builtin_define ("_ARCH_PWR5X");				\
+  if (! TARGET_POWER && ! TARGET_POWER2 && ! TARGET_POWERPC)	\
+      builtin_define ("_ARCH_COM");				\
+  if (TARGET_ALTIVEC)						\
+      {								\
+        builtin_define ("__ALTIVEC__");				\
+        builtin_define ("__VEC__=10206");			\
+								\
+        /* Define the AltiVec syntactic elements.  */		\
+        builtin_define ("__vector=__attribute__((altivec(vector__)))");			\
+        builtin_define ("__pixel=__attribute__((altivec(pixel__))) unsigned short");	\
+        builtin_define ("__bool=__attribute__((altivec(bool__))) unsigned");		\
+      }								\
+      if (TARGET_SPE)						\
+        builtin_define ("__SPE__");				\
+      if (TARGET_SOFT_FLOAT)					\
+        builtin_define ("_SOFT_FLOAT");				\
+      /* Used by lwarx/stwcx. errata work-around.  */		\
+      if (rs6000_cpu == PROCESSOR_PPC405)			\
+        builtin_define ("__PPC405__");				\
+      /* Used by libstdc++.  */					\
+      if (TARGET_NO_LWSYNC)					\
+        builtin_define ("__NO_LWSYNC__");			\
+      /* May be overridden by target configuration.  */		\
+      RS6000_CPU_CPP_ENDIAN_BUILTINS();				\
+								\
+      if (TARGET_LONG_DOUBLE_128)				\
+          builtin_define ("__LONG_DOUBLE_128__");		\
+								\
+      switch (rs6000_current_abi)				\
+        {							\
+          case ABI_V4:						\
+            builtin_define ("_CALL_SYSV");			\
+            break;						\
+          case ABI_AIX:						\
+            builtin_define ("_CALL_AIXDESC");			\
+            builtin_define ("_CALL_AIX");			\
+            break;						\
+          case ABI_DARWIN:					\
+            builtin_define ("_CALL_DARWIN");			\
+            break;						\
+          default:						\
+            break;						\
+         }							\
+								\
+        /* Let the compiled code know if 'f' class registers will not be available.  */	\
+	if (TARGET_SOFT_FLOAT || !TARGET_FPRS)			\
+          builtin_define ("__NO_FPRS__");			\
+} while(0)
+
 
 /* Target machine storage layout.  */
 
