#! /bin/sh -e

# All lines beginning with `# DPATCH:' are a description of the patch.
# DP: gcc/config/m68k/m68k.md:
# DP: always use as fjcc pseudo op, we rely heavily on as 
# DP: to generate the right size for the jump instructions
# DP: fixes #359281

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p1 < $0
        #cd ${dir}gcc && autoconf
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p1 < $0
        #rm ${dir}gcc/configure
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

---
 gcc/config/m68k/m68k.md |   90 ++++++++++++++----------------------------------
 1 file changed, 27 insertions(+), 63 deletions(-)

Index: gcc-4.2/gcc/config/m68k/m68k.md
===================================================================
--- gcc-4.2.orig/gcc/config/m68k/m68k.md
+++ gcc-4.2/gcc/config/m68k/m68k.md
@@ -5781,10 +5781,7 @@
 		      (pc)))]
   ""
 {
-  if (MOTOROLA)
-    OUTPUT_JUMP ("jbeq %l0", "fbeq %l0", "jbeq %l0");
-  else
-    OUTPUT_JUMP ("jeq %l0", "fjeq %l0", "jeq %l0");
+  OUTPUT_JUMP ("jeq %l0", "fjeq %l0", "jeq %l0");
 })
 
 (define_insn "bne"
@@ -5795,10 +5792,7 @@
 		      (pc)))]
   ""
 {
-  if (MOTOROLA)
-    OUTPUT_JUMP ("jbne %l0", "fbne %l0", "jbne %l0");
-  else
-    OUTPUT_JUMP ("jne %l0", "fjne %l0", "jne %l0");
+  OUTPUT_JUMP ("jne %l0", "fjne %l0", "jne %l0");
 })
 
 (define_insn "bgt"
@@ -5809,10 +5803,7 @@
 		      (pc)))]
   ""
 {
-  if (MOTOROLA)
-    OUTPUT_JUMP ("jbgt %l0", "fbgt %l0", 0);
-  else
-    OUTPUT_JUMP ("jgt %l0", "fjgt %l0", 0);
+  OUTPUT_JUMP ("jgt %l0", "fjgt %l0", 0);
 })
 
 (define_insn "bgtu"
@@ -5834,10 +5825,7 @@
 		      (pc)))]
   ""
 {
-  if (MOTOROLA)
-    OUTPUT_JUMP ("jblt %l0", "fblt %l0", "jbmi %l0");
-  else
-    OUTPUT_JUMP ("jlt %l0", "fjlt %l0", "jmi %l0");
+  OUTPUT_JUMP ("jlt %l0", "fjlt %l0", "jmi %l0");
 })
 
 (define_insn "bltu"
@@ -5859,10 +5847,7 @@
 		      (pc)))]
   ""
 {
-  if (MOTOROLA)
-    OUTPUT_JUMP ("jbge %l0", "fbge %l0", "jbpl %l0");
-  else
-    OUTPUT_JUMP ("jge %l0", "fjge %l0", "jpl %l0");
+  OUTPUT_JUMP ("jge %l0", "fjge %l0", "jpl %l0");
 })
 
 (define_insn "bgeu"
@@ -5884,10 +5869,7 @@
 		      (pc)))]
   ""
 {
-  if (MOTOROLA)
-    OUTPUT_JUMP ("jble %l0", "fble %l0", 0);
-  else
-    OUTPUT_JUMP ("jle %l0", "fjle %l0", 0);
+  OUTPUT_JUMP ("jle %l0", "fjle %l0", 0);
 })
 
 (define_insn "bleu"
@@ -5909,7 +5891,7 @@
   "TARGET_68881"
 {
   gcc_assert (cc_prev_status.flags & CC_IN_68881);
-  return MOTOROLA ? "fbor %l0" : "fjor %l0";
+  return "fjor %l0";
 })
 
 (define_insn "bunordered"
@@ -5920,7 +5902,7 @@
   "TARGET_68881"
 {
   gcc_assert (cc_prev_status.flags & CC_IN_68881);
-  return MOTOROLA ? "fbun %l0" : "fjun %l0";
+  return "fjun %l0";
 })
 
 (define_insn "buneq"
@@ -5931,7 +5913,7 @@
   "TARGET_68881"
 {
   gcc_assert (cc_prev_status.flags & CC_IN_68881);
-  return MOTOROLA ? "fbueq %l0" : "fjueq %l0";
+  return "fjueq %l0";
 })
 
 (define_insn "bunge"
@@ -5942,7 +5924,7 @@
   "TARGET_68881"
 {
   gcc_assert (cc_prev_status.flags & CC_IN_68881);
-  return MOTOROLA ? "fbuge %l0" : "fjuge %l0";
+  return "fjuge %l0";
 })
 
 (define_insn "bungt"
@@ -5953,7 +5935,7 @@
   "TARGET_68881"
 {
   gcc_assert (cc_prev_status.flags & CC_IN_68881);
-  return MOTOROLA ? "fbugt %l0" : "fjugt %l0";
+  return "fjugt %l0";
 })
 
 (define_insn "bunle"
@@ -5964,7 +5946,7 @@
   "TARGET_68881"
 {
   gcc_assert (cc_prev_status.flags & CC_IN_68881);
-  return MOTOROLA ? "fbule %l0" : "fjule %l0";
+  return "fjule %l0";
 })
 
 (define_insn "bunlt"
@@ -5975,7 +5957,7 @@
   "TARGET_68881"
 {
   gcc_assert (cc_prev_status.flags & CC_IN_68881);
-  return MOTOROLA ? "fbult %l0" : "fjult %l0";
+  return "fjult %l0";
 })
 
 (define_insn "bltgt"
@@ -5986,7 +5968,7 @@
   "TARGET_68881"
 {
   gcc_assert (cc_prev_status.flags & CC_IN_68881);
-  return MOTOROLA ? "fbogl %l0" : "fjogl %l0";
+  return "fjogl %l0";
 })
 
 ;; Negated conditional jump instructions.
@@ -5999,10 +5981,7 @@
 		      (label_ref (match_operand 0 "" ""))))]
   ""
 {
-  if (MOTOROLA)
-    OUTPUT_JUMP ("jbne %l0", "fbne %l0", "jbne %l0");
-  else
-    OUTPUT_JUMP ("jne %l0", "fjne %l0", "jne %l0");
+  OUTPUT_JUMP ("jne %l0", "fjne %l0", "jne %l0");
 })
 
 (define_insn ""
@@ -6013,10 +5992,7 @@
 		      (label_ref (match_operand 0 "" ""))))]
   ""
 {
-  if (MOTOROLA)
-    OUTPUT_JUMP ("jbeq %l0", "fbeq %l0", "jbeq %l0");
-  else
-    OUTPUT_JUMP ("jeq %l0", "fjeq %l0", "jeq %l0");
+  OUTPUT_JUMP ("jeq %l0", "fjeq %l0", "jeq %l0");
 })
 
 (define_insn ""
@@ -6027,10 +6003,7 @@
 		      (label_ref (match_operand 0 "" ""))))]
   ""
 {
-  if (MOTOROLA)
-    OUTPUT_JUMP ("jble %l0", "fbngt %l0", 0);
-  else
-    OUTPUT_JUMP ("jle %l0", "fjngt %l0", 0);
+  OUTPUT_JUMP ("jle %l0", "fjngt %l0", 0);
 })
 
 (define_insn ""
@@ -6052,10 +6025,7 @@
 		      (label_ref (match_operand 0 "" ""))))]
   ""
 {
-  if (MOTOROLA)
-    OUTPUT_JUMP ("jbge %l0", "fbnlt %l0", "jbpl %l0");
-  else
-    OUTPUT_JUMP ("jge %l0", "fjnlt %l0", "jpl %l0");
+  OUTPUT_JUMP ("jge %l0", "fjnlt %l0", "jpl %l0");
 })
 
 (define_insn ""
@@ -6077,10 +6047,7 @@
 		      (label_ref (match_operand 0 "" ""))))]
   ""
 {
-  if (MOTOROLA)
-    OUTPUT_JUMP ("jblt %l0", "fbnge %l0", "jbmi %l0");
-  else
-    OUTPUT_JUMP ("jlt %l0", "fjnge %l0", "jmi %l0");
+  OUTPUT_JUMP ("jlt %l0", "fjnge %l0", "jmi %l0");
 })
 
 (define_insn ""
@@ -6102,10 +6069,7 @@
 		      (label_ref (match_operand 0 "" ""))))]
   ""
 {
-  if (MOTOROLA)
-    OUTPUT_JUMP ("jbgt %l0", "fbnle %l0", 0);
-  else
-    OUTPUT_JUMP ("jgt %l0", "fjnle %l0", 0);
+  OUTPUT_JUMP ("jgt %l0", "fjnle %l0", 0);
 })
 
 (define_insn ""
@@ -6127,7 +6091,7 @@
   "TARGET_68881"
 {
   gcc_assert (cc_prev_status.flags & CC_IN_68881);
-  return MOTOROLA ? "fbun %l0" : "fjun %l0";
+  return "fjun %l0";
 })
 
 (define_insn "*bunordered_rev"
@@ -6138,7 +6102,7 @@
   "TARGET_68881"
 {
   gcc_assert (cc_prev_status.flags & CC_IN_68881);
-  return MOTOROLA ? "fbor %l0" : "fjor %l0";
+  return "fjor %l0";
 })
 
 (define_insn "*buneq_rev"
@@ -6149,7 +6113,7 @@
   "TARGET_68881"
 {
   gcc_assert (cc_prev_status.flags & CC_IN_68881);
-  return MOTOROLA ? "fbogl %l0" : "fjogl %l0";
+  return "fjogl %l0";
 })
 
 (define_insn "*bunge_rev"
@@ -6160,7 +6124,7 @@
   "TARGET_68881"
 {
   gcc_assert (cc_prev_status.flags & CC_IN_68881);
-  return MOTOROLA ? "fbolt %l0" : "fjolt %l0";
+  return "fjolt %l0";
 })
 
 (define_insn "*bungt_rev"
@@ -6182,7 +6146,7 @@
   "TARGET_68881"
 {
   gcc_assert (cc_prev_status.flags & CC_IN_68881);
-  return MOTOROLA ? "fbogt %l0" : "fjogt %l0";
+  return "fjogt %l0";
 })
 
 (define_insn "*bunlt_rev"
@@ -6193,7 +6157,7 @@
   "TARGET_68881"
 {
   gcc_assert (cc_prev_status.flags & CC_IN_68881);
-  return MOTOROLA ? "fboge %l0" : "fjoge %l0";
+  return "fjoge %l0";
 })
 
 (define_insn "*bltgt_rev"
@@ -6204,7 +6168,7 @@
   "TARGET_68881"
 {
   gcc_assert (cc_prev_status.flags & CC_IN_68881);
-  return MOTOROLA ? "fbueq %l0" : "fjueq %l0";
+  return "fjueq %l0";
 })
 
 ;; Unconditional and other jump instructions
