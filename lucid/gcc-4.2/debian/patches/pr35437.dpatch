#! /bin/sh -e

# DP: Fix PR c/35437 (ice-on-invalid), taken from the gcc-4.3 branch.

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p0 < $0
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p0 < $0
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

gcc/

2008-10-08  Simon Martin  <simartin@users.sourceforge.net>

	PR c/35437
	* expr.c (count_type_elements): Handle ERROR_MARK.

gcc/testsuite/

2008-10-08  Simon Martin  <simartin@users.sourceforge.net>

	PR c/35437
	* gcc.dg/struct-parse-2.c: New test.
	* g++.dg/parse/struct-4.C: New test.

Index: gcc/testsuite/gcc.dg/struct-parse-2.c
===================================================================
--- gcc/testsuite/gcc.dg/struct-parse-2.c	(revision 0)
+++ gcc/testsuite/gcc.dg/struct-parse-2.c	(revision 0)
@@ -0,0 +1,13 @@
+/* PR c/35437 */
+/* { dg-do "compile" } */
+
+struct A
+{
+  int i;
+  struct A a; /* { dg-error "has incomplete type" } */
+};
+
+void foo()
+{
+  struct A b = { 0 };
+}
Index: gcc/testsuite/g++.dg/parse/struct-4.C
===================================================================
--- gcc/testsuite/g++.dg/parse/struct-4.C	(revision 0)
+++ gcc/testsuite/g++.dg/parse/struct-4.C	(revision 0)
@@ -0,0 +1,13 @@
+/* PR c/35437 */
+/* { dg-do "compile" } */
+
+struct A
+{
+  int i;
+  struct A a; /* { dg-error "has incomplete type" } */
+};
+
+void foo()
+{
+  struct A b = { 0 };
+}
Index: gcc/expr.c
===================================================================
--- gcc/expr.c	(revision 140971)
+++ gcc/expr.c	(working copy)
@@ -4796,6 +4796,9 @@
     case REFERENCE_TYPE:
       return 1;
 
+    case ERROR_MARK:
+      return 0;
+
     case VOID_TYPE:
     case METHOD_TYPE:
     case FUNCTION_TYPE:
