#! /bin/sh -e

# DP: Fix PR libjava/35020, taken from the trunk.

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p0 < $0
	uudecode $0
	tar -xv -f pr35020-classes.tgz -C ${dir}
	rm -f pr35020-classes.tgz
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p0 < $0
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

2008-05-22  Andrew Haley  <aph@redhat.com>

	PR libgcj/35020
	* java/lang/Class.java (getSimpleName): Replace incorrect use of
	String.lastIndexOf(String, int) with String.substring.
	* testsuite/libjava.lang/PR35020.java: New file.
	* testsuite/libjava.lang/PR35020.out: New file.

2008-05-22  Andrew Haley  <aph@redhat.com>

	PR libgcj/35020
	* java/lang/Class.java (getSimpleName): Import from GNU Classpath.

Index: libjava/testsuite/libjava.lang/PR35020.java
===================================================================
--- libjava/testsuite/libjava.lang/PR35020.java	(revision 0)
+++ libjava/testsuite/libjava.lang/PR35020.java	(revision 135801)
@@ -0,0 +1,21 @@
+public class PR35020
+{
+   class inner
+   {
+   }
+   public static void main(String[] args)
+   {
+      System.out.println(inner.class.getSimpleName());
+      System.out.println(PR35020.class.getSimpleName());
+      System.out.println(Class.class.getSimpleName());
+      System.out.println((new int[7]).getClass().getSimpleName());
+      System.out.println((new Object[1][1][1][1][1][1][1][1]).getClass().getSimpleName());
+      System.out.println((new java.security.PrivilegedAction() 
+	{
+	  public Object run() {
+	    return null;
+	  }
+	}).getClass().getSimpleName());
+   }
+}
+
Index: libjava/testsuite/libjava.lang/PR35020.out
===================================================================
--- libjava/testsuite/libjava.lang/PR35020.out	(revision 0)
+++ libjava/testsuite/libjava.lang/PR35020.out	(revision 135801)
@@ -0,0 +1,6 @@
+inner
+PR35020
+Class
+int[]
+Object[][][][][][][][]
+
Index: libjava/java/lang/Class.java
===================================================================
--- libjava/java/lang/Class.java	(revision 135770)
+++ libjava/java/lang/Class.java	(revision 135801)
@@ -1075,22 +1075,29 @@
    */
   public String getSimpleName()
   {
-    StringBuffer sb = new StringBuffer();
-    Class klass = this;
-    int arrayCount = 0;
-    while (klass.isArray())
+    if (isAnonymousClass())
+      return "";
+    if (isArray())
       {
-	klass = klass.getComponentType();
-	++arrayCount;
+	return getComponentType().getSimpleName() + "[]";
       }
-    if (! klass.isAnonymousClass())
+    String fullName = getName();
+    int pos = fullName.lastIndexOf("$");
+    if (pos == -1)
+      pos = 0;
+    else
       {
-	String fullName = klass.getName();
-	sb.append(fullName, fullName.lastIndexOf(".") + 1, fullName.length());
+	++pos;
+	while (Character.isDigit(fullName.charAt(pos)))
+	  ++pos;
+	fullName = fullName.substring(pos);
       }
-    while (arrayCount-- > 0)
-      sb.append("[]");
-    return sb.toString();
+
+    int packagePos = fullName.lastIndexOf(".");
+    if (packagePos == -1)
+      return fullName;
+    else
+      return fullName.substring(packagePos + 1);
   }
 
   /**

begin-base64 644 pr35020-classes.tgz
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
5CnXQoGyDwqV/TBHuc7CcXmS43J4RXKcRzM/oZFCaa8QXiULWTkuT3rIa/D6
9By9ITn6aSZHdxBHdxJHdxFHdxNH9/w/cKTwh3WToyNEhdPIdrL0z+6GLR7K
+28X1d4DDaa/dlbLBc8x+NWu6qJVRbXj8M4kvDcBv+fh+7Ttg3HEjoOQ78kZ
x5wOT6Y3PAAO5etQrByCBcqD5BHfgM3KI3Cu8qgliW1PSrLdlGQBVFJFr05L
YtsTPo/5yNEOWIBC2r4rlYxxFq3PxkIJV4TFyfkSei8lC/D8HHN9rvmch2Vm
qs4jyPkUPcaeRajwFzq2Ii6lp6GzTxOsTL2T6OYwd3mO4IpxrKqawDrO5I4j
uPpwdYYe1DWQozaAU10Lheo6mKOuh/nqBlikNtsk8xwox0ZcR/TmgAvPxrX2
yZy/lJs8xWk/r9VXjeP628DJ1jvMNqP3ptsgvxTPOQh5pbjRsB0vG5ZLsTmb
WVDPBYfqBaFut+T9+qy8X59koZVUKFmgsFdktXIY6Y/0MImbH/I8hu2nwOPZ
1fU0D5nwUfQqwF3rrOojeP449tU881DNMwdhac0zJ47gzjSQAhOE8ew6BRrj
MT1zQ04pXrwgR2aoYl5GY9dBOIvfFuQYrwty0mBvB0f1qQ9fy6beRdRNzF0E
XCPxFh3BjyfRuumlxnipsUAZGH+awaz2EPnSfFgD62W1aZTP9dAkn5dRjZmQ
0feYfE6QHSeShthP3gDqpZCrapCvDsAslaqNOkj+MgQr1GGoUkeggd6b1QB4
1SB0qiHoU8fgYvUKuEyNgl+NQUyNw351L3xBvQq+on4CHlA/CYfUa+AIwTyu
7oen1evgBfV6+JF6AN5Qb4SfqZ+F36qfg/fVz6Oi3iyN38KHBeqtzSpEsTAo
q9AKakN0HCJze+G4OfLTmDNPDjwNm+TIknkkjjLZLjyRzDwXmie1sqqiVeM4
3LxQuRccpNLDVerCcRxNHdtkkVRJy+od5Jd3QpF6l6VIlkliQCFWhCEq10iz
DbDWJHKLWdjcFKrsTuV/aufaw2rK2vha++zd6X45xyndG1OpTvd0JLppijqd
RGEiNGgMkkuFeTDkTgkRXzERCZEpdIpQRIwZlBmXSZRqyHW+oSm30ay1zz6n
cxLffDPfN3/t3/PU3vvstdd617vW+3vfd6+9t6MDqnwmMopEHF1oOTpJYbIU
zu9KXWXGmo+MdS8y1v1Al1MA+JwDwIhzEFhyDinRr5WCtKzgArplEsVm2GwJ
VEobqsOFKvRrpbCZRfAredwPF9NyTmNCBx6KGOCSbKBVDpdGl8LlFQ7d7bMG
SVWLdHBVSQc8hSQ8FPUKmECh65yR/BxciVkTroLhivZX0+1PZto3RHTGdxBK
4RolGYTdZbiDxqEBTclGJRkMFTIYwlT4uUqwYqjoeRrUVLS8jm65GWkNXy9G
HU/PAkEOfLiRgzNXuClMWAYzhRAdcaQwqxLuKBpdDnOj+XB3KdxTwezn4/2w
crgP7RcIS+HBCkRpHDSIHwNr1C28dUV8jreD4DdMN0RAB3XjKZpSz9DgPkeD
2wasOe3AhvMCuHJeATfOG2Rdb4EPCcEnJAGC0HiHkFwlphYz3eUDA1iMYhUI
fNCQH4ZHVDouVnisDYynOcpsS/AW7UjlDI6OZVM1GSmiNIsxBSk8ngUsGB4/
IYWnZPTNh5UMe2PGChPy4RkpPOtjhkxInYOI3nw5ARHdo/9CM+TPy+D57M7f
0C72z3x4CZX1NUdlKWGR0JyMRT93jXAwMED+RwS4ZH+gRXoBHukNnMhBwJ30
Ad4kymBJP6SSwWAIGQhCyU+ABG0/JYPAeHIo+JwMAdPJUDCDDFOyk2RGVe4g
EF6hnbs3GAhrkMXgtFsP1tJBdpfSkhVKu6qSY0H4A8pG5O78Gjq+Dm/gkBAv
XtHK/AnWMXa/EbWMh8mecYdoDlFFyD/fwn4JO8f8onJ4OxqFYbABRTiwqZu3
JtEAkCgCJrcDA/JrICBzgAm5E1iTuUpzwJ7pmAHKOH6mO2aNWPIevK/ire0V
k78VPmDEK2TE85ENsBqPg4d6QDbQx+46G2g48BAFUVBF5DBVkR92iWwLNJDI
VUjks0CTrAYW5HlgRX4LbMiLwJ78DjiTl4AXeVlJdB9GdBuF6F49iO6jEP0J
fKqw21/oLixiumCuEJFzEv5bVcRn3aJZsgFQZCPQIO8CXbIZ9CZblEQyV2Q7
cpF69yCSuUKkNpQryUVqp0U6h47V0dYTSpAaO8Kdor25p0RqHBG1F5gacwWU
uzeJo4LXEAjzgZoxKVlOQQElUMvtbOkerpHPAEE+RxptA6bkb8CWbEeabAMe
ZIdS+uip4DxPRGEC2vd4EJDAXMoFzgSHwDoyBboEReDA31DRWU8FK6MrCTXF
lVyck+NVNIYU4lFp3KWcckI9upTQDHOQElrR3tQpEUkn0MaUubtE6Ej3yVFK
6NIJtIBkEmgUs4Q50heonRJRHBG5F7gaqwlI93An+gpvrtCYKyV42cDQmMsn
BFLCKAtood+c6KpIKCAFVG7nFUf6LuP5TqlQSphIHB2PEeYQnIRvjhEWBKgk
LLt054ulprhAnVIHZpQGsENbN0oTiCgtMIDSBcMofTCaMgDTKR5IRMeLKG2w
FJ1bSQlAKmVI63Yo1j/IUaTmWwgrFFtCYAa0iT60bkUgAiWY+G7kMGBN/8ZB
4YQZSjgF6NpUwCdsUOIpmzYyDspR3KvEtfVFtdF1oLSUYMrbY83jZRjGRFuY
8CReZqLWNP8SQhzv98Z8LHyXiQmnLID8N+HKlLNUKXcJlUOVnOoq7p4NNGVk
T8mIvEuPzvheO+UDuJQf0KP8AZ8KQLoMBC5UEOhPBYOB1BCkxxAQR4WCKZRY
yYziGb3poXTLkzaj/ijpEtF7XWYULzcjvNjI9HgiPQsB4qBSor/cot8oJ3R0
JEaNBRQVAzSocUCXGq8UAegrDFiL8CZIlfb05ek7XoSi2zVGqRljvsRAuv0Y
JgbRRvEHMagaUcVBFHPJ26Zv3lMzldrTVlifNmN9hirnjOTnCF/sTPDzKZg3
8OIZvXWhXbA6fvaJ0cBAJonSKSf8opEWAsqIwNHFQB6I0jfFqPVAm9qqlBzp
wFQiBItJhNKdETOdCiMk9DWQ8AMs/heI/zPv/1u7/a0vAHz4/X9XN/d+nt3f
/3dzZ9///0cgf/8fWNPv/7+7PvyBLwBYfHi9V/Z2hDX9VOWfXOVVvM7/Zx+T
ZF7510CsoaON/JQ6fqRYTxvFbvrybwL8d58A4HdfW7d2ww+ZzElOeM/bAJoo
pDLhAuOeP3rQTWJtFLiYvftQKGk3Bkv6/jVuvW4PsnHBR+9+qwFXrtl9sRnf
x8YETAGoz8MKAoAmcw3MovTisxfjIjQdhCXIT5QCXRk7GwD5eiu6GjE0Zmv5
AgUfuQL8uwC5hq5aZAsfR1GELwVGsEi1FmoTCmA291ALB8WfuKQFsAT4Lp0V
6IPySprl6XIs/p+Q839SXGJSYvLUpDgX5hdn2WPhIzw8ER2jaTjnr7fxH/gf
teCqyv9u/T1c3Vn+/ycQIeaQmvRedWypl/IZDWTdkqCoAKeQ8GCXkVEagPPx
HtFQ/DdyPgnaUK6Ir8UWrE5f+6WNvQ0eMXf010v5WklAeEhwUGSUsyS4x2qe
S77/Lkzs5FyrI3ZyuPz9lSMjXH/0aJzjHCpxDJHUJhccHWG3bGjrlnuZhnvz
Z82GQLVZ8wzhs4eIJ0agQF0HNSufsXTA0mN7M4ZLZvKG9/JZT1SlRaZG1Fwf
Fl+4ZMzOdcK0bba2EtsSg8CrPzpbtFETPDz6VcU2ucwp1MreN/t+tWXcII+0
God5syvu/O7VcWJCRcVbUHPmUMrmJbNffN7xZeLeqVZOG/w2WU6uyny789fj
8/Jf5fq3r2hPfjEidv+YR5p5HSv3XjzDCzM1nkyNMntyYFnxjcjTY39KzPQ/
bdy+51ZmSnqTdZZuw6ONSx5YP6oL+3LEa+Lnh8UeE25pcJ7o1ZUcWmNqZ2IX
A6+99NLMnDJJYEOYpK/5pt+M61XVHw0MbBc+KNGp7/Vp+NwZ0xpGp6zwrBcV
hV94nrLgkNm6+PrT47boRd2svXPsgG7ekAsHrtV1VjrWDzlXyUlpWnpSZDFx
2facIfZbz2cWpCakvlgweZLWempOvcnuxrNCrWZrvf0aBy37Nr157bdw8eBR
nRZ1hyNWhUyLc12t5hw7qvKh9vmACSev1lbcDHk0N+rCLL9dDuMLvaz4Hqs0
L4j6hNQ2l0aappkcXSqKrPB/mvgmfviU5rxKz2kLxviXh01v8h6VcW9Y2q7S
TS4XjC7y67Mbx7esPVYuSnxePW/60kvR28Nb+hYc++7lzH2W4xofOHpyS84l
+6fvDNuctb9musF135QBdo2r283XbvXf0WgsbX4bfHDbQa4wsmW+Q9z1J2Bx
t5kyKaFvmxjNlFaIMznFTJEHtz3OlXERY8VEQK+3waP73/C89H1CTaSeycbs
tsnkR9TpURl3xcOavVsveGsdKR/cWZCz1OIV/H1f6+PjQ/vNuhdT8UvMqcW+
FSBp1hd9qiJ6D0p2qbv/pDldY1mu+33xnWdl2VKL84l3V9o+0x4S0k8/IS/u
RZ3JF8c25/xr7bclpqET3Fpc9mTcFQRKa83cei9a3Mdx8vCjn01clvt4qI3F
rnOftk7xbScDr/067um6si3FO9TWzbLlrNx1xKJgyGbvXbolwT+89DO1Kcy1
nDq6/mLvhL1FR8o2ZN+xu/Gcsz+/o8/2l3x+sppHYXHxqkUPyxozbj5at9Xv
cVUEf5/RzIkN9jZJDc0BVsTRgOYNLa1LjHl1604Q0eOupiU9beFcX5AhfVCa
cZinHbrlwuHRQTc/yer3telY+9NTQzd8NnN6ku+aqLdWHvbuqdOaZuwOrqvU
nTt7Q9vY4prXlOpgDEj48SIXDQSyZxQHdA3GVBy8fGBARkZIxFX+vbZvzRvH
jzR91HEpUG/k6epvNjXtsVIPCNrTIYlJEmf7Z7yqGLS68bRl43peg3PAhvOX
L2/r/9i0/fX951qVBnNJs8G/PH3b4uibvuq4XZRNo8GurIWZzTGGV5pvJeUf
XlkzY3yST5rGV1dfXYk+UbMiwVnjbuuw29t4J0Je5i3U3xKYVKPTuMtocOyK
xvS03B2tg2873ttfYBGXLTxjZe+RNSxuj6RhbU70tPrOPs+aGnNjorKOX60W
SH8I3JR9a/qk7JbDh0Y6FQXpF6bUFOvFbt197A3VK8h2x2cLyS0v2rO+PnOX
WPr7snkr9ZbPrB/Q6jG38EbQ2d5jLGIFnIETjpSl6xzg3bCVpkyIEEPCiPM+
4tZh9vTBkwC8VaJxSqbSkfMx9eM63kfgsjpwAJaXMki5DhU6/0B1qsSsoxAv
L+UI9juqNP2BelTNVrme2wR414g/UJPqnFOuaRoJep6BKrVR+Dk/FElTACUK
oJT6qz6XBQsWLFiwYMGCBQsWLFiwYMGCBQsWLFiwYMGCBQsWLFiwYMGCBQsW
LFiwYMHi7+APRvHkTwB4AAA=
====
