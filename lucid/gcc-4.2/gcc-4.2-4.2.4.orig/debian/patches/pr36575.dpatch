#! /bin/sh -e

# DP: Fix PR middle-end/36575 (wrong code).

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p0 < $0
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p0 < $0
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

# append the patch here and adjust the -p? flag in the patch calls.

gcc/

2008-09-28  Eric Botcazou  <ebotcazou@adacore.com>

	PR middle-end/36575
	* fold-const (div_and_round_double) <ROUND_DIV_EXPR>: Fix typo.

gcc/testsuite/

2008-09-28  Eric Botcazou  <ebotcazou@adacore.com>

	* gnat.dg/conv_decimal.adb: New test.

Index: gcc/fold-const.c
===================================================================
--- gcc/fold-const.c	(Revision 140735)
+++ gcc/fold-const.c	(Revision 140736)
@@ -816,7 +816,7 @@
 	if (hden < 0)
 	  neg_double (lden, hden, &labs_den, &habs_den);
 
-	/* If (2 * abs (lrem) >= abs (lden)) */
+	/* If (2 * abs (lrem) >= abs (lden)), adjust the quotient.  */
 	mul_double ((HOST_WIDE_INT) 2, (HOST_WIDE_INT) 0,
 		    labs_rem, habs_rem, &ltwice, &htwice);
 
@@ -824,7 +824,7 @@
 	     < (unsigned HOST_WIDE_INT) htwice)
 	    || (((unsigned HOST_WIDE_INT) habs_den
 		 == (unsigned HOST_WIDE_INT) htwice)
-		&& (labs_den < ltwice)))
+		&& (labs_den <= ltwice)))
 	  {
 	    if (*hquo < 0)
 	      /* quo = quo - 1;  */
Index: gcc/testsuite/gnat.dg/conv_decimal.adb
===================================================================
--- gcc/testsuite/gnat.dg/conv_decimal.adb	(Revision 0)
+++ gcc/testsuite/gnat.dg/conv_decimal.adb	(Revision 140736)
@@ -0,0 +1,34 @@
+-- PR middle-end/36575
+-- reporter: Laurent Guerby <laurent@guerby.net>
+-- { dg-do run }
+
+procedure Conv_Decimal is
+
+  type Unsigned_Over_8 is mod 2**8+2;
+  type Signed_Over_8 is range -200 .. 200;
+
+  procedure Assert(Truth: Boolean) is
+  begin
+    if not Truth then
+      raise Program_Error;
+    end if;
+  end;
+
+  type Decim is delta 0.1 digits 5;
+
+  Halfway  : Decim := 2.5;
+  Neg_Half : Decim := -2.5;
+
+  Big      : Unsigned_Over_8;
+  Also_Big : Signed_Over_8;
+
+begin
+  Big := Unsigned_Over_8 (Halfway); -- Rounds up by 4.6(33).
+  Assert(Big = 3);
+
+  Also_Big := Signed_Over_8 (Halfway); -- Rounds up by 4.6(33).
+  Assert(Also_Big = 3);
+
+  Also_Big := Signed_Over_8 (Neg_Half); -- Rounds down by 4.6(33).
+  Assert(Also_Big = -3);
+end;
