#! /bin/sh -e

# All lines beginning with `# DPATCH:' are a description of the patch.
# DP: Fix for PR target/26743 (hppa)
# DP: Backport from gcc trunk 2006-04-12 by tausq@debian.org

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p0 < $0
        #cd ${dir}gcc && autoconf
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p0 < $0
        #rm ${dir}gcc/configure
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

From: "John David Anglin" <dave@hiauly1.hia.nrc.ca>
Sender: gcc-patches-owner@gcc.gnu.org
To: gcc-patches@gcc.gnu.org
Subject: [committed] Define symbolic constants for maximum branch offsets in pa.md
Date: Tue, 11 Apr 2006 14:34:18 -0400 (EDT)

The enclosed change is to facilitate changing the maximum branch
offsets.  There should be no change in functionality.

Tested on hppa-unknown-linux-gnu.  Applied to trunk.

Dave

2006-04-11  John David Anglin  <dava.anglin@nrc-cnrc.gc.ca>

	* pa.md (MAX_12BIT_OFFSET, MAX_17BIT_OFFSET): Define and use new
	symbolic constants in branch patterns.

--- gcc/config/pa/pa.md.orig	2006-04-19 10:32:39.320447960 +0200
+++ gcc/config/pa/pa.md	2006-04-19 10:34:28.789806088 +0200
@@ -1,6 +1,6 @@
 ;;- Machine description for HP PA-RISC architecture for GCC compiler
 ;;   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
-;;   2002, 2003, 2004, 2005 Free Software Foundation, Inc.
+;;   2002, 2003, 2004, 2005, 2006 Free Software Foundation, Inc.
 ;;   Contributed by the Center for Software Science at the University
 ;;   of Utah.
 
@@ -45,6 +45,16 @@
    (UNSPECV_LONGJMP	5)	; builtin_longjmp
   ])
 
+;; Maximum pc-relative branch offsets.
+
+;; These numbers are a bit smaller than the maximum allowable offsets
+;; so that a few instructions may be inserted before the actual branch.
+
+(define_constants
+  [(MAX_12BIT_OFFSET     8184)	; 12-bit branch
+   (MAX_17BIT_OFFSET   262100)	; 17-bit branch
+  ])
+
 ;; Insn type.  Used to default other attribute values.
 
 ;; type "unary" insns have one input operand (1) and one output operand (0)
@@ -1706,10 +1716,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 24)
@@ -1735,10 +1745,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 24)
@@ -1762,10 +1772,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 24)
@@ -1791,10 +1801,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 24)
@@ -1817,10 +1827,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 24)
@@ -1846,10 +1856,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 24)
@@ -1875,10 +1885,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 28)
@@ -1903,10 +1913,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 28)
@@ -1931,10 +1941,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 28)
@@ -1959,10 +1969,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 28)
@@ -1987,10 +1997,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 28)
@@ -2015,10 +2025,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 28)
@@ -2043,10 +2053,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 28)
@@ -2071,10 +2081,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 28)
@@ -2100,10 +2110,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 28)
@@ -2128,10 +2138,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 28)
@@ -2156,10 +2166,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 28)
@@ -2184,10 +2194,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 28)
@@ -2212,10 +2222,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 28)
@@ -2240,10 +2250,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 28)
@@ -2268,10 +2278,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 28)
@@ -2296,10 +2306,10 @@
 [(set_attr "type" "cbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 28)
@@ -2348,7 +2358,7 @@
 [(set_attr "type" "fbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 32)
@@ -2392,7 +2402,7 @@
 [(set_attr "type" "fbranch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 12)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 28)
@@ -7125,11 +7135,11 @@
     (cond [(eq (symbol_ref "jump_in_call_delay (insn)") (const_int 1))
 	   (if_then_else (lt (abs (minus (match_dup 0)
 					 (plus (pc) (const_int 8))))
-			     (const_int 8184))
+			     (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (const_int 8))
 	   (lt (abs (minus (match_dup 0) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 4)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 20)
@@ -8955,10 +8965,10 @@
 ;; Short branch has length of 4
 ;; Long branch has length of 8, 20, 24 or 28
 	(cond [(lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 24)
@@ -8971,10 +8981,10 @@
 	(if_then_else (eq_attr "alternative" "1")
 	  (if_then_else (lt (match_dup 3) (pc))
 	     (cond [(lt (abs (minus (match_dup 3) (plus (pc) (const_int 24))))
-		      (const_int 8184))
+		      (const_int MAX_12BIT_OFFSET))
 		    (const_int 24)
 		    (lt (abs (minus (match_dup 3) (plus (pc) (const_int 24))))
-		      (const_int 262100))
+		      (const_int MAX_17BIT_OFFSET))
 		    (const_int 28)
 		    (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 		    (const_int 44)
@@ -8982,10 +8992,10 @@
 		    (const_int 40)]
 		  (const_int 48))
 	     (cond [(lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))
-		      (const_int 8184))
+		      (const_int MAX_12BIT_OFFSET))
 		    (const_int 24)
 		    (lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))
-		      (const_int 262100))
+		      (const_int MAX_17BIT_OFFSET))
 		    (const_int 28)
 		    (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 		    (const_int 44)
@@ -8997,10 +9007,10 @@
 ;; Extra goo to deal with additional reload insns.
 	(if_then_else (lt (match_dup 3) (pc))
 	     (cond [(lt (abs (minus (match_dup 3) (plus (pc) (const_int 12))))
-		      (const_int 8184))
+		      (const_int MAX_12BIT_OFFSET))
 		    (const_int 12)
 		    (lt (abs (minus (match_dup 3) (plus (pc) (const_int 12))))
-		      (const_int 262100))
+		      (const_int MAX_17BIT_OFFSET))
 		    (const_int 16)
 		    (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 		    (const_int 32)
@@ -9008,10 +9018,10 @@
 		    (const_int 28)]
 		  (const_int 36))
 	     (cond [(lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))
-		      (const_int 8184))
+		      (const_int MAX_12BIT_OFFSET))
 		    (const_int 12)
 		    (lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))
-		      (const_int 262100))
+		      (const_int MAX_17BIT_OFFSET))
 		    (const_int 16)
 		    (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 		    (const_int 32)
@@ -9038,10 +9048,10 @@
 ;; Short branch has length of 4
 ;; Long branch has length of 8, 20, 24 or 28
         (cond [(lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 24)
@@ -9054,10 +9064,10 @@
 	(if_then_else (eq_attr "alternative" "1")
 	  (if_then_else (lt (match_dup 3) (pc))
 	     (cond [(lt (abs (minus (match_dup 3) (plus (pc) (const_int 12))))
-		      (const_int 8184))
+		      (const_int MAX_12BIT_OFFSET))
 		    (const_int 12)
 		    (lt (abs (minus (match_dup 3) (plus (pc) (const_int 12))))
-		      (const_int 262100))
+		      (const_int MAX_17BIT_OFFSET))
 		    (const_int 16)
 		    (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 		    (const_int 32)
@@ -9065,10 +9075,10 @@
 		    (const_int 28)]
 		  (const_int 36))
 	     (cond [(lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))
-		      (const_int 8184))
+		      (const_int MAX_12BIT_OFFSET))
 		    (const_int 12)
 		    (lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))
-		      (const_int 262100))
+		      (const_int MAX_17BIT_OFFSET))
 		    (const_int 16)
 		    (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 		    (const_int 32)
@@ -9079,10 +9089,10 @@
 ;; Loop counter in memory or sar case.
 ;; Extra goo to deal with additional reload insns.
 	(cond [(lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))
-		   (const_int 8184))
+		   (const_int MAX_12BIT_OFFSET))
 		(const_int 8)
 		(lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))
-		  (const_int 262100))
+		  (const_int MAX_17BIT_OFFSET))
 		(const_int 12)
 		(ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 		(const_int 28)
@@ -9110,10 +9120,10 @@
 ;; Short branch has length of 4
 ;; Long branch has length of 8
         (cond [(lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 24)
@@ -9126,10 +9136,10 @@
 	(if_then_else (eq_attr "alternative" "1")
 	  (if_then_else (lt (match_dup 3) (pc))
 	     (cond [(lt (abs (minus (match_dup 3) (plus (pc) (const_int 12))))
-		      (const_int 8184))
+		      (const_int MAX_12BIT_OFFSET))
 		    (const_int 12)
 		    (lt (abs (minus (match_dup 3) (plus (pc) (const_int 12))))
-		      (const_int 262100))
+		      (const_int MAX_17BIT_OFFSET))
 		    (const_int 16)
 		    (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 		    (const_int 32)
@@ -9137,10 +9147,10 @@
 		    (const_int 28)]
 		  (const_int 36))
 	     (cond [(lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))
-		      (const_int 8184))
+		      (const_int MAX_12BIT_OFFSET))
 		    (const_int 12)
 		    (lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))
-		      (const_int 262100))
+		      (const_int MAX_17BIT_OFFSET))
 		    (const_int 16)
 		    (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 		    (const_int 32)
@@ -9151,10 +9161,10 @@
 ;; Loop counter in memory or SAR case.
 ;; Extra goo to deal with additional reload insns.
 	(cond [(lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))
-		   (const_int 8184))
+		   (const_int MAX_12BIT_OFFSET))
 		(const_int 8)
 		(lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))
-		  (const_int 262100))
+		  (const_int MAX_17BIT_OFFSET))
 		(const_int 12)
 		(ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 		(const_int 28)
@@ -9175,10 +9185,10 @@
 [(set_attr "type" "parallel_branch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 3) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 24)
@@ -9198,10 +9208,10 @@
 [(set_attr "type" "parallel_branch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 24)
@@ -9221,10 +9231,10 @@
 [(set_attr "type" "parallel_branch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 24)
@@ -9244,10 +9254,10 @@
 [(set_attr "type" "parallel_branch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 24)
@@ -9267,10 +9277,10 @@
 [(set_attr "type" "parallel_branch")
  (set (attr "length")
     (cond [(lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 8184))
+	       (const_int MAX_12BIT_OFFSET))
 	   (const_int 4)
 	   (lt (abs (minus (match_dup 2) (plus (pc) (const_int 8))))
-	       (const_int 262100))
+	       (const_int MAX_17BIT_OFFSET))
 	   (const_int 8)
 	   (ne (symbol_ref "TARGET_PORTABLE_RUNTIME") (const_int 0))
 	   (const_int 24)
