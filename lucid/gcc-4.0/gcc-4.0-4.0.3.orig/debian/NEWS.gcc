GCC 4.0 Release Series - Changes, New Features, and Fixes
=========================================================

The latest release in the 4.0 release series is GCC 4.0.1.


Caveats
=======

- GCC now generates location lists by default when compiling with
  debug info and optimization.
	
  - GDB 6.0 and older crashes when it sees location lists.  GDB 6.1 or
    later is needed to debug binaries containing location lists.

  - When you are trying to view a value of a variable in a part of a
    function where it has no location (for example when the variable is
    no longer used and thus its location was used for something else)
    GDB will say that it is not available.
	
  You can disable generating location lists by -fno-var-tracking.

- GCC no longer accepts the -fwritable-strings option.  Use named
  character arrays when you need a writable string.

- The options -freduce-all-givs and -fmove-all-movables have been
  discontinued.  They were used to circumvent a shortcoming in the
  heuristics of the old loop optimization code with respect to common
  Fortran constructs.  The new (tree) loop optimizer works differently
  and doesn't need those work-arounds.

- The graph-coloring register allocator, formerly enabled by the
  option -fnew-ra, has been discontinued.

- -I- has been deprecated.  -iquote is meant to replace the need for
  this option.

- The MIPS -membedded-pic and -mrnames options have been removed.

- All MIPS targets now require the GNU assembler.  In particular, IRIX
  configurations can no longer use the MIPSpro assemblers, although they
  do still support the MIPSpro linkers.

- The SPARC option -mflat has been removed.

- English-language diagnostic messages will now use Unicode quotation
  marks in UTF-8 locales.  (Non-English messages already used the quotes
  appropriate for the language in previous releases.)  If your terminal
  does not support UTF-8 but you are using a UTF-8 locale (such locales
  are the default on many GNU/Linux systems) then you should set
  LC_CTYPE=C in the environment to disable that locale.  Programs that
  parse diagnostics and expect plain ASCII English-language messages
  should set LC_ALL=C.  See Markus Kuhn's explanation of Unicode
  quotation marks for more information.

- The specs file is no longer installed on most platforms.  Most users
  will be totally unaffected.  However, if you are accustomed to editing
  the specs file yourself, you will now have to use the -dumpspecs
  option to generate the specs file, and then edit the resulting file.
  

General Optimizer Improvements
==============================
    
- The tree ssa branch has been merged.  This merge has brought in a
  completely new optimization framework based on a higher level
  intermediate representation than the existing RTL representation.
  Numerous new code transformations based on the new framework are
  available in GCC 4.0, including:

        
  - Scalar replacement of aggregates
  - Constant propagation
  - Value range propagation
  - Partial redundancy elimination
  - Load and store motion
  - Strength reduction
  - Dead store elimination
  - Dead and unreachable code elimination
  - Autovectorization
  - Loop interchange
  - Tail recursion by accumulation
        
  Many of these passes outperform their counterparts from previous
  GCC releases.
    
- Swing Modulo Scheduling (SMS).  An RTL level instruction scheduling
  optimization intended for loops that perform heavy computations.
    

New Languages and Language specific improvements
================================================

C family
--------
  
- The sentinel attribute has been added to GCC.  This function
  attribute allows GCC to warn when variadic functions such as execl are
  not NULL terminated.  See the GCC manual for a complete description of
  its behavior.

- Given __attribute__((alias("target"))) it is now an error if target 
  is not a symbol, defined in the same translation unit.  This also
  applies to aliases created by #pragma weak alias=target.  This is
  because it's meaningless to define an alias to an undefined symbol.
  On Solaris, the native assembler would have caught this error, but GNU
  as does not.
  

C and Objective-C
-----------------
  
- The -Wstrict-aliasing=2 option has been added.  This warning catches
  all unsafe cases, but it may also give a warning for some cases that
  are safe.

- The cast-as-lvalue, conditional-expression-as-lvalue and
  compound-expression-as-lvalue extensions, which were deprecated in
  3.3.4 and 3.4, have been removed.

- The -fwritable-strings option, which was deprecated in 3.4, has been
  removed.

- #pragma pack() semantics have been brought closer to those used by
  other compilers. This also applies to C++.

- Taking the address of a variable with register storage is invalid in
  C.  GCC now issues an error instead of a warning.

- Arrays of incomplete element type are invalid in C.  GCC now issues
  an error for such arrays.  Declarations such as extern struct s x[];
  (where struct s has not been defined) can be moved after the
  definition of struct s.  Function parameters declared as arrays of
  incomplete type can instead be declared as pointers.
  

C++
---
  
- When compiling without optimizations (-O0), the C++ frontend is much
  faster than in any previous versions of GCC. Independent testers have
  measured speed-ups up to 25% in real-world production code, compared
  to the 3.4 family (which was already the fastest version to
  date). Upgrading from older versions might show even bigger
  improvements.

- ELF visibility attributes can now be applied to a class type, so
  that it affects every member function of a class at once, without
  having to specify each individually:

    class __attribute__ ((visibility("hidden"))) Foo
    {
      int foo1();
      void foo2();
    };

  The syntax is deliberately similar to the __declspec() system used
  by Microsoft Windows based compilers, allowing cross-platform
  projects to easily reuse their existing macro system for denoting
  exports and imports. By explicitly marking internal classes never
  used outside a binary as hidden, one can completely avoid PLT
  indirection overheads during their usage by the compiler. You can
  find out more about the advantages of this at
  http://people.redhat.com/drepper/dsohowto.pdf

- The -fvisibility-inlines-hidden option has been added which marks
  all inlineable functions as having hidden ELF visibility, thus
  removing their symbol and typeinfo from the exported symbol table of
  the output ELF binary. Using this option can reduce the exported
  symbol count of template-heavy code by up to 40% with no code change
  at all, thus notably improving link and load times for the binary as
  well as a reduction in size of up to 10%. Also, check the new
  -fvisibility option.

- The compiler now uses the library interface specified by the C++ ABI
  for thread-safe initialization of function-scope static variables.
  Most users should leave this alone, but embedded programmers may want
  to disable this by specifying -fno-threadsafe-statics for a small
  savings in code size.

- Taking the address of an explicit register variable is no longer
  supported.  Note that C++ allows taking the address of variables with
  register storage so this will continue to compile with a warning.  For
  example, assuming that r0 is a machine register:

    register int foo asm ("r0");
    register int bar;
    &foo; // error, no longer accepted
    &bar; // OK, with a warning

- G++ has an undocumented extension to virtual function covariancy
  rules that allowed the overrider to return a type that was implicitly
  convertable to the overridden function's return type.  For instance a
  function returning void * could be overridden by a function returning
  T *.  This is now deprecated and will be removed in a future release.
 
- The G++ minimum and maximum operators (<? and >?) and their compound
  forms (<?=) and >?=) have been deprecated and will be removed in a
  future version.  Code using these operators should be modified to use
  std::min and std::max instead.

- Declaration of nested classes of class templates as friends are
  supported:

    template <typename T> struct A {
      class B {};
    };
    class C {
      template <typename T> friend class A<T>::B;
    };

  This complements the feature member functions of class templates as
  friends introduced in GCC 3.4.0.

- When declaring a friend class using an unqualified name, classes
  outside the innermost non-class scope are not searched:

    class A;
    namespace N {
      class B {
        friend class A;   // Refer to N::A which has not been declared yet
                          // because name outside namespace N are not searched
        friend class ::A; // Refer to ::A
      };
    }

  Hiding the friend name until declaration is still not implemented.

- Friends of classes defined outside their namespace are correctly
  handled:

    namespace N {
      class A;
    }
    class N::A {
      friend class B; // Refer to N::B in GCC 4.0.0
                      // but ::B in earlier versions of GCC
    };
  

Runtime Library (libstdc++)
---------------------------
  
- Optimization work:
      
  - Added efficient specializations of istream functions for char and
    wchar_t.

  - Further performance tuning of strings, in particular wrt
    single-char append and getline.

  - iter_swap - and therefore most of the mutating algorithms - now
    makes an unqualified call to swap when the value_type of the two
    iterators is the same.
      
- A large subset of the features in Technical Report 1 (TR1 for short)
  is experimentally delivered (i.e., no guarantees about the
  implementation are provided. In particular it is not promised that the
  library will remain link-compatible when code using TR1 is used):
      
  - General utilities such as reference_wrapper and shared_ptr.

  - Function objects, i.e., result_of, mem_fn, bind, function.

  - Support for metaprogramming.

  - New containers such as tuple, array, unordered_set, unordered_map,
    unordered_multiset, unordered_multimap.
      
- As usual, many bugs have been fixed and LWG resolutions
  implemented for the first time (e.g., DR 409).
  

Java
----
  
- In order to prevent naming conflicts with other implementations of
  these tools, some GCJ binaries have been renamed:
	
  - rmic is now grmic,
  - rmiregistry is now grmiregistry, and
  - jar is now fastjar.
	
  In particular, these names were problematic for the jpackage.org
  packaging conventions which install symlinks in /usr/bin that point
  to the preferred versions of these tools.

- The -findirect-dispatch argument to the compiler now works and
  generates code following a new "binary compatibility" ABI.  Code
  compiled this way follows the binary compatibility rules of the Java
  Language Specification.
    
- libgcj now has support for using GCJ as a JIT, using the gnu.gcj.jit
  family of system properties.
    
- libgcj can now find a shared library corresponding to the bytecode
  representation of a class.  See the documentation for the new
  gcj-dbtool program, and the new gnu.gcj.precompiled.db.path system
  property.
    
- There have been many improvements to the class library.  Here are
  some highlights:
      
  - Much more of AWT and Swing exist.
	
  - Many new packages and classes were added, including
    java.util.regex, java.net.URI, javax.crypto,
    javax.crypto.interfaces, javax.crypto.spec, javax.net,
    javax.net.ssl, javax.security.auth, javax.security.auth.callback,
    javax.security.auth.login, javax.security.auth.x500,
    javax.security.sasl, org.ietf.jgss, javax.imageio,
    javax.imageio.event, javax.imageio.spi, javax.print,
    javax.print.attribute, javax.print.attribute.standard,
    javax.print.event, and javax.xml

  - Updated SAX and DOM, and imported GNU JAXP 
      

Fortran
-------
  
- A new Fortran front end has replaced the aging GNU Fortran 77 front
  end.  The new front end supports Fortran 90 and Fortran 95.  It may
  not yet be as stable as the old Fortran front end.
     

Ada
---
  
- Ada (with tasking and Zero Cost Exceptions) is now available on many
  more targets, including but not limited to: alpha-linux, hppa-hpux,
  hppa-linux, powerpc-darwin, powerpc-linux, s390-linux, s390x-linux,
  sparc-linux.
    
- Some of the new Ada 2005 features are now implemented like
  Wide_Wide_Character and Ada.Containers.
    
- Many bugs have been fixed, tools and documentation improved.

- To compile Ada from the sources, install an older working Ada
  compiler and then use --enable-languages=ada at configuration time,
  since the Ada frontend is not currently activated by default. See the
  Installing GCC for details.
    

New Targets and Target Specific Improvements
============================================

H8/300
------
  
- The frame layout has changed.  In the new layout, the prologue of a
  function first saves registers and then allocate space for locals,
  resulting in an 1% improvement on code size.
  

IA-32/x86-64 (AMD64)
--------------------
  
- The acos, asin, drem, exp10, exp2, expm1, fmod, ilogb, log10, log1p,
  log2, logb and tan mathematical builtins (and their float and long
  double variants) are now implemented as inline x87 intrinsics when
  using -ffast-math.

- The ceil, floor, nearbyint, rint and trunc mathematical builtins
  (and their float and long double variants) are now implemented as
  inline x87 intrinsics when using -ffast-math.

- The x87's fsincos instruction is now used automatically with
  -ffast-math when calculating both the sin and cos of the same
  argument.

- Instruction selection for multiplication and division by constants
  has been improved.
  

IA-64
-----
  
- Floating point division, integer division and sqrt are now inlined,
  resulting in significant performance improvements on some codes.
  

MIPS
----
  
- Division by zero checks now use conditional traps if the target
  processor supports them.  This decreases code size by one word per
  division operation.  The old behavior (branch and break) can be
  obtained either at configure time by passing --with-divide=breaks to
  configure or at runtime by passing -mdivide-breaks to GCC.

- Support for MIPS64 paired-single instructions has been added.  It is
  enabled by -mpaired-single and can be accessed using both the
  target-independent vector extensions and new MIPS-specific built-in
  functions.

- Support for the MIPS-3D ASE has been added.  It is enabled by
  -mips3d and provides new MIPS-3D-specific built-in functions.

- The -mexplicit-relocs option now supports static n64 code (as is
  used, for example, in 64-bit linux kernels).  -mexplicit-relocs should
  now be feature-complete and is enabled by default when GCC is
  configured to use a compatible assembler.

- Support for the NEC VR4130 series has been added.  This support
  includes the use of VR-specific instructions and a new VR4130
  scheduler.  Full VR4130 support can be selected with -march=vr4130
  while code for any ISA can be tuned for the VR4130 using
  -mtune=vr4130.  There is also a new -mvr4130-align option that
  produces better schedules at the cost of increased code size.

- Support for the Broadcom SB-1 has been extended.  There is now an
  SB-1 scheduler as well as support for the SB-1-specific paired-single
  instructions.  Full SB-1 support can be selected with -march=sb1 while
  code for any ISA can be optimized for the SB-1 using -mtune=sb1.

- The compiler can now work around errata in R4000, R4400, VR4120 and
  VR4130 processors.  These workarounds are enabled by -mfix-r4000,
  -mfix-r4400, -mfix-vr4120 and -mfix-vr4130 respectively.  The VR4120
  and VR4130 workarounds need binutils 2.16 or above.

- IRIX shared libraries are now installed into the standard library
  directories: o32 libraries go into lib/, n32 libraries go into lib32/
  and n64 libraries go into lib64/.

- The compiler supports a new -msym32 option.  It can be used to
  optimize n64 code in which all symbols are known to have 32-bit
  values.
  

S/390 and zSeries
-----------------
  
- New command line options help to generate code intended to run in an
  environment where stack space is restricted, e.g. Linux kernel code:
	
  - -mwarn-framesize and -mwarn-dynamicstack trigger compile-time
    warnings for single functions that require large or dynamic stack
    frames.

  - -mstack-size and -mstack-guard generate code that checks for stack
    overflow at run time.

  - -mpacked-stack generates code that reduces the stack frame size of
    many functions by reusing unneeded parts of the stack bias area.
	
- The -msoft-float option now ensures that generated code never
  accesses floating point registers.

- The s390x-ibm-tpf target now fully supports C++, including
  exceptions and threads.

- Various changes to improve performance of the generated code have
  been implemented, including:
	
  - GCC now uses sibling calls where possible.

  - Condition code handling has been optimized, allowing GCC
    to omit redundant comparisons in certain cases.

  - The cost function guiding many optimizations has been refined to
    more accurately represent the z900 and z990 processors.

  - The ADD LOGICAL WITH CARRY and SUBTRACT LOGICAL WITH BORROW
    instructions are now used to avoid conditional branches in certain
    cases.

  - The back end now uses the LEGITIMIZE_RELOAD_ADDRESS feature to
    optimize address arithmetic required to access large stack frames.

  - GCC now makes more efficient use of memory-to-memory type
    instructions (MVC, CLC, ...).

  - More precise tracking of special register use allows better
    instruction scheduling, in particular of the function prologue and
    epilogue sequences.

  - The Java front end now generates inline code to implement integer
    division, instead of calling library routines.
	

SPARC
-----
  
- The options -mv8, -msparclite, -mcypress, -msupersparc, -mf930 and
  -mf934 have been removed.  They have been replaced with -mcpu=xxx.

- The internal model used to estimate the relative cost of each
  instruction has been updated.  It is expected to give better results
  on recent UltraSPARC processors.

- Code generation for function prologues and epilogues has been
  improved, resulting in better scheduling and allowing multiple exit
  points in functions.

- Support for Sun's Visual Instruction Set (VIS) has been enhanced.
  It is enabled by -mvis and provides new built-in functions for VIS
  instructions on UltraSPARC processors.

- The option -mapp-regs has been turned on by default on Solaris too.
  

NetWare
-------
  
- Novell NetWare (on ix86, no other hardware platform was ever really
  supported by this OS) has been re-enabled and the ABI supported by GCC
  has been brought into sync with that of MetroWerks CodeWarrior (the
  ABI previously supported was that of some Unix systems, which NetWare
  never tried to support).
  

Obsolete Systems
----------------

Support for a number of older systems has been declared obsolete in
GCC 4.0.  Unless there is activity to revive them, the next release of
GCC will have their sources permanently removed.

All GCC ports for the following processor architectures have been
declared obsolete:

- Intel i860
- Ubicom IP2022
- National Semiconductor NS32K
- Texas Instruments TMS320C[34]x
  

Also, those for some individual systems have been obsoleted:

  
- SPARC family
      
  - SPARClite-based systems (sparclite-*-coff, sparclite-*-elf,
    sparc86x-*-elf)
   
  - OpenBSD 32-bit (sparc-*-openbsd*)
      

Documentation improvements
==========================


Other significant improvements
==============================
  
- Location lists are now generated by default when compiling with
  debug info and optimization.  Location lists provide more accurate
  debug info about locations of variables and they allow debugging code
  compiled with -fomit-frame-pointer.
	
- The -fvisibility option has been added which allows the default ELF
  visibility of all symbols to be set per compilation and the new
  #pragma GCC visibility preprocessor command allows the setting of
  default ELF visibility for a region of code. Using -fvisibility=hidden
  especially in combination with the new -fvisibility-inlines-hidden can
  yield substantial improvements in output binary quality including
  avoiding PLT indirection overheads, reduction of the exported symbol
  count by up to 60% (with resultant improvements to link and load
  times), better scope for the optimizer to improve code and up to a 20%
  reduction in binary size. Using these options correctly yields a
  binary with a similar symbol count to a Windows DLL.<br/> Perhaps more
  importantly, this new feature finally allows (with careful planning)
  complete avoidance of symbol clashes when manually loading shared
  objects with RTLD_GLOBAL, thus finally solving problems many projects
  such as python were forced to use RTLD_LOCAL for (with its resulting
  issues for C++ correctness). You can find more information about using
  these options at http://gcc.gnu.org/wiki/Visibility.
  


GCC 4.0.1
=========

This is the list of problem reports (PRs) from GCC's bug tracking
system that are known to be fixed in the 4.0.1 release. This list
might not be complete (that is, it is possible that some PRs that have
been fixed are not listed here).

http://gcc.gnu.org/bugzilla/buglist.cgi?bug_status=RESOLVED&resolution=FIXED&target_milestone=4.0.1


------------------------------------------------------------------------------
Please send FSF & GNU inquiries & questions tognu@gnu.org.There are
also other ways to contact the FSF.

These pages are maintained by the GCC team.

For questions related to the use of GCC, please consult these web
pages and the GCC manuals. If that fails, the gcc-help@gcc.gnu.org
mailing list might help.  Please send comments on these web pages and
the development of GCC to our public developer mailing list at
gcc@gnu.org or gcc@gcc.gnu.org.

Copyright (C) Free Software Foundation, Inc.,
51 Franklin St - Suite 330, Boston, MA 02110, USA.

Verbatim copying and distribution of this entire article is permitted
in any medium, provided this notice is preserved.


Last modified 2005-07-07
