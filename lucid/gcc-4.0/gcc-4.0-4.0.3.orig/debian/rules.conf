# -*- makefile -*-
# rules.conf
#	- used to build debian/control and debian/rules.parameters
#	- assumes unpacked sources

include debian/rules.defs

# The binutils version needed.
# The oldest suitable versions for the various platforms can be found in
# INSTALL/specific.html ; we take a tighter dependency if possible to be on
# the safe side (something like newest( version in stable, versions for the
# various platforms in INSTALL/specific.html) ).
BINUTILSV = 2.16.1cvs20051214
ifdef DEB_CROSS
  BINUTILS_BUILD_DEP = binutils$(TS) (>= $(BINUTILSV))
else
  BINUTILS_BUILD_DEP = binutils (>= $(BINUTILSV)) | binutils-multiarch (>= $(BINUTILSV))
endif

# libc-dev dependencies
libc_ver := 2.3.5-10
ifeq ($(distribution),Ubuntu)
  libc_ver := 2.3.5-1ubuntu5
endif
ifeq ($(DEB_TARGET_ARCH_OS),linux)
  ifneq (,$(findstring $(DEB_TARGET_ARCH),alpha ia64))
    LIBC_DEV_DEP = libc6.1-dev$(LS) (>= $(libc_ver))
  else
    LIBC_DEV_DEP = libc6-dev$(LS) (>= $(libc_ver))
  endif
  ifeq ($(DEB_TARGET_ARCH),hppa)
    LIBC_DEV_DEP = libc6-dev$(LS) (>= $(libc_ver))
  endif
else
  ifeq ($(DEB_TARGET_ARCH_OS),gnu)
    LIBC_DEV_DEP = libc0.3-dev$(LS)
  endif
  ifeq ($(DEB_TARGET_ARCH_OS),kfreebsd)
    LIBC_DEV_DEP = libc0.1-dev
  endif
  ifeq ($(DEB_TARGET_ARCH_OS),knetbsd)
    LIBC_DEV_DEP = libc0.1-dev$(LS)
  endif
  ifeq ($(DEB_TARGET_ARCH_OS),netbsd)
    LIBC_DEV_DEP = libc12-dev$(LS)
  endif
endif

LIBC_BIARCH_DEP :=
LIBC_BIARCH_DEV_DEP :=
LIBCXX_BIARCH_DEP :=
ifeq ($(biarch),yes)
  ifeq ($(DEB_TARGET_ARCH),i386)
    LIBC_BIARCH_DEP := libc6-amd64$(LS) (>= $(libc_ver))
    LIBC_BIARCH_DEV_DEP := libc6-dev-amd64$(LS)
  endif
  ifeq ($(DEB_TARGET_ARCH),powerpc)
    LIBC_BIARCH_DEP := libc6-ppc64$(LS) (>= $(libc_ver))
    LIBC_BIARCH_DEV_DEP := libc6-dev-ppc64$(LS) (>= $(libc_ver))
  endif
  ifeq ($(DEB_TARGET_ARCH),sparc)
    LIBC_BIARCH_DEP := libc6-sparc64$(LS) (>= $(libc_ver))
    LIBC_BIARCH_DEV_DEP := libc6-dev-sparc64$(LS) (>= $(libc_ver))
  endif
  ifeq ($(DEB_TARGET_ARCH),s390)
    LIBC_BIARCH_DEP := libc6-s390x$(LS) (>= $(libc_ver))
    LIBC_BIARCH_DEV_DEP := libc6-dev-s390x$(LS) (>= $(libc_ver))
  endif
  LIBCXX_BIARCH_DEP = lib64stdc++$(CXX_SONAME)$(LS)
endif
ifeq ($(biarch32),yes)
  ifeq ($(DEB_TARGET_ARCH),amd64)
    LIBC_BIARCH_DEV_DEP := libc6-dev-i386$(LS) (>= $(libc_ver))
    LIBC_BIARCH_DEP := libc6-i386$(LS) (>= $(libc_ver))
  endif
  ifeq ($(DEB_TARGET_ARCH),ppc64)
    LIBC_BIARCH_DEP := libc6-powerpc$(LS) (>= $(libc_ver))
    LIBC_BIARCH_DEV_DEP := libc6-dev-powerpc$(LS) (>= $(libc_ver))
  endif
  LIBCXX_BIARCH_DEP = lib32stdc++$(CXX_SONAME)$(LS)
endif

LIBUNWIND_DEV_DEP :=
ifeq ($(DEB_TARGET_ARCH),ia64)
  LIBUNWIND_DEV_DEP := libunwind7-dev$(LS) (>= 0.98.5-6)
endif

ifndef DEB_CROSS

LIBC_BUILD_DEP := libc6.1-dev (>= $(libc_ver)) [alpha ia64] | libc0.3-dev (>= $(libc_ver)) | libc0.1-dev (>= $(libc_ver)) | libc12-dev (>= $(libc_ver)) | libc6-dev (>= $(libc_ver))

JAVA_BUILD_DEP := libxtst-dev [java_no_archs], libxt-dev [java_no_archs], libgtk2.0-dev (>= 2.4.4-2) [java_no_archs], libart-2.0-dev [java_no_archs], libcairo2-dev [java_no_archs],
ifeq ($(with_separate_libgcj),yes)
  ifneq (,$(findstring gcc-4,$(PKGSOURCE)))
    JAVA_BUILD_DEP :=
  endif
endif

#PASCAL_BUILD_DEP := libncurses5-dev [pascal_no_archs], tetex-bin [pascal_no_archs], libgmp3-dev [pascal_no_archs], help2man [pascal_no_archs],

LIBC_BIARCH_BUILD_DEP = libc6-dev-amd64 [i386], libc6-dev-sparc64 [sparc], libc6-dev-s390x [s390], libc6-dev-i386 [amd64], libc6-dev-powerpc [ppc64], libc6-dev-ppc64 [powerpc], lib32gcc1 [amd64 ppc64], lib64gcc1 [i386 powerpc sparc s390], lib64z1-dev [i386 powerpc sparc s390], lib32z1-dev [amd64],

#ifeq ($(PKGSOURCE),gcc-snapshot)
#  LIBC_BIARCH_BUILD_DEP =
#endif

else
# building cross compiler

LIBC_BUILD_DEP := $(LIBC_DEV_DEP)

ifneq ($(LIBC_BIARCH_DEV_DEP),)
  LIBC_BIARCH_BUILD_DEP := $(LIBC_BIARCH_DEV_DEP),
else
  LIBC_BIARCH_BUILD_DEP :=
endif

ifneq ($(LIBUNWIND_DEV_DEP),)
  LIBUNWIND_BUILD_DEP := $(LIBUNWIND_DEV_DEP),
else
  LIBUNWIND_BUILD_DEP := 
endif

ifeq ($(DEB_TARGET_ARCH),ia64)
  LIBATOMIC_OPS_BUILD_DEP := libatomic-ops-dev$(LS),
else
  LIBATOMIC_OPS_BUILD_DEP :=
endif

JAVA_BUILD_DEP :=

endif

SOURCE_VERSION := $(shell dpkg-parsechangelog | awk '/^Version:/ {print $$NF}')
DEB_VERSION := $(shell echo $(SOURCE_VERSION) \
	| sed -e 's/.*://' -e 's/ds[0-9]*//')
DEB_VERSION_NOREL := $(shell echo $(DEB_VERSION) | sed 's/-[^-]*$$//')
# epoch used for gcc versions up to 3.3.x, now used for some remaining
# libraries: libgcc1, libobjc1, libffi2, libffi2-dev, libg2c0
EPOCH := 1
DEB_EVERSION := $(EPOCH):$(DEB_VERSION)
BASE_VERSION := $(shell echo $(DEB_VERSION) | sed -e 's/\([1-9]\.[0-9]\).*-.*/\1/')

# The version number can be found in gcc/version.c e.g.
# char *version_string = "2.95 19990710 (prerelease)";
GCC_VERSION := $(strip $(shell grep version_string $(srcdir)/gcc/version.c \
			| sed -e 's/^.*= *"//' -e 's/ .*$$//' -e 's/".*$$//'))
#GCC_VERSION := $(strip $(shell cat $(srcdir)/gcc/BASE-VER))

# The numeric part of the gcc version number (x.yy.zz)
NEXT_GCC_VERSION := $(shell echo $(GCC_VERSION) | \
		awk -F. '{OFS="."; if (NF==2) $$3=1; else $$NF += 1; print}')
# first version with a new path component in gcc_lib_dir (i.e. GCC_VERSION
# or TARGET_ALIAS changes), or last version available for all architectures
DEB_GCC_SOFT_VERSION := 4.0.3-1
DEB_GCJ_SOFT_VERSION := 4.0.3-1
ifeq ($(with_pascal),yes)
GPC_DATE := $(shell sed -n 's/^.define GPC_VERSION_STRING "\(.*\)"/\1/p' $(srcdir)/gcc/p/version.h || true)
DEB_GPC_VERSION := $(shell echo $(DEB_VERSION) \
			   | sed 's/.*:\(.*\)-\(.*\)/2:\1.$(GPC_DATE)-\2/')
endif

# semiautomatic ...
DEB_SOVERSION := $(DEB_VERSION)
DEB_SOVERSION := 4.0.2
DEB_SOEVERSION := $(EPOCH):4.0.2
DEB_STDCXX_SOVERSION := 4.0.2-4
DEB_GCJ_SOVERSION := 4.0.2-4
DEB_FFI_SOVERSION := $(DEB_SOVERSION)
DEB_FFI_SOVERSION := 4.0.2

DEB_GCC_VERSION := $(DEB_VERSION)
DEB_GCJ_VERSION := $(DEB_VERSION)
ifeq ($(with_separate_libgcj),yes)
  ifeq ($(PKGSOURCE),gcj-$(BASE_VERSION))
    DEB_GCC_VERSION := $(DEB_GCC_SOFT_VERSION)
  endif
endif

# manual ...
ifeq ($(DEB_TARGET_GNU_CPU), $(findstring $(DEB_TARGET_GNU_CPU),hppa m68k))
  GCC_SONAME := 2
  DEB_LIBGCC_SOVERSION := $(DEB_SOVERSION)
  DEB_LIBGCC_VERSION := $(DEB_VERSION)
else
  GCC_SONAME := 1
  DEB_LIBGCC_SOVERSION := $(DEB_SOEVERSION)
  DEB_LIBGCC_VERSION := $(DEB_EVERSION)
endif

LIBGCC_DEP := libgcc$(GCC_SONAME)$(LS) (>= $(DEB_LIBGCC_VERSION))
LIBGCC_BIARCH_DEP := 
ifeq ($(biarch),yes)
  LIBGCC_BIARCH_DEP := lib64gcc$(GCC_SONAME)$(LS) (>= $(DEB_LIBGCC_VERSION))
endif
ifeq ($(biarch32),yes)
  LIBGCC_BIARCH_DEP := lib32gcc$(GCC_SONAME)$(LS) (>= $(DEB_LIBGCC_VERSION))
endif

CXX_SONAME := $(strip $(shell awk -F= \
			'/^libtool_VERSION/ {split($$2,v,":"); print v[1]}' \
			$(srcdir)/libstdc++-v3/configure.ac))

OBJC_SONAME := $(strip $(shell awk -F= '/^VERSION/ \
					{split($$2,v,":"); print v[1]}' \
				$(srcdir)/libobjc/configure.ac))

FORTRAN_SONAME := $(strip $(shell tail -1 \
					$(srcdir)/libgfortran/libtool-version \
				  | awk -F: '{ print $$1 }' ))

MUDFLAP_SONAME := $(strip $(shell tail -1 \
					$(srcdir)/libmudflap/libtool-version \
				  | awk -F: '{ print $$1 }' ))

GCJ_SONAME := $(strip $(shell tail -1 $(srcdir)/libjava/libtool-version \
				  | awk -F: '{ print $$1 }' ))

FFI_SONAME := $(strip $(shell tail -1 $(srcdir)/libffi/libtool-version \
				  | awk -F: '{ print $$1 }' ))

GNAT_SONAME := $(strip $(shell \
		grep '[^_]Library_Version.*:' $(srcdir)/gcc/ada/gnatvsn.ads \
		  | sed -e 's/.*"\([^"]*\)".*/\1/'))

GNAT_VERSION := $(BASE_VERSION)

LIBGNAT_DEP :=
ifeq ($(with_libgnat),yes)
  LIBGNAT_DEP := libgnat-$(GNAT_VERSION) (= $(DEB_VERSION))
endif

GPC_BASE_VERSION := 2.1

pkg_ver := -$(BASE_VERSION)
gpc_pkg_ver := -$(GPC_BASE_VERSION)$(pkg_ver)

ctrl_flags = \
	-DBINUTILSV=$(BINUTILSV) \
	-DSRCNAME=$(PKGSOURCE) \
	-D__$(DEB_TARGET_GNU_CPU)__ \
	-DARCH=$(DEB_TARGET_ARCH) \
	-DDIST=$(distribution)
ifeq ($(with_objc)-$(with_objc_gc),yes-yes)
  ctrl_flags +=	-DOBJC_GC
endif

ctrl_flags += \
	-DLIBC_DEV_DEP="$(LIBC_DEV_DEP)" \
	-DLIBC_BIARCH_BUILD_DEP="$(LIBC_BIARCH_BUILD_DEP)" \
	-DGNAT_BUILD_DEP="$(GNAT_BUILD_DEP)" \
	-DJAVA_BUILD_DEP="$(JAVA_BUILD_DEP)" \
	-DPASCAL_BUILD_DEP="$(PASCAL_BUILD_DEP)" \
	-DBINUTILS_BUILD_DEP="$(BINUTILS_BUILD_DEP)" \
	-DLIBC_BUILD_DEP="$(LIBC_BUILD_DEP)" \
	-DTP=$(TP) \
	-DTS=$(TS) \
	-DLS=$(LS)

ifdef DEB_CROSS
  ctrl_flags += \
	-DTARGET=$(DEB_TARGET_ARCH) \
	-DLIBUNWIND_BUILD_DEP="$(LIBUNWIND_BUILD_DEP)" \
	-DLIBATOMIC_OPS_BUILD_DEP="$(LIBATOMIC_OPS_BUILD_DEP)"
else
  # add '-DPRI=optional' to ctrl_flags if this is not the default compiler
  # ctrl_flags += \
  #     -DPRI=optional
endif

ifeq ($(with_base_only),yes)
  ctrl_flags += \
	-DBASE_ONLY=yes
endif

control: control-file parameters-file substvars-file versioned-files

ifdef DEB_CROSS
  languages = c c++
  addons = libgcc lib64gcc libcxx lib64cxx cdev c++dev
  ifdef DEB_CROSS_INDEPENDENT
    addons += gccxbase
  endif
else
  languages = ada c c++ f95 java objc treelang # pascal
  addons = gccbase cdev c++dev fdev fixincl libcxx libg2c \
	   libgcc libfortran libgcj libgcjdev libgnat libobjc libs \
	   lib64gcc lib64cxx lib64ffi lib64gcj lib64objc lib64gfortran \
	   lib32objc lib32gfortran lib32gcj lib32gcc lib32cxx \
	   objcdev proto mudflap # libnof lib64gcj libffi
  #addons += fastjar
  ifeq ($(with_separate_libgcj),yes)
    ifeq ($(PKGSOURCE),gcc-$(BASE_VERSION))
      languages := $(filter-out java,$(languages))
      addons := $(filter-out gcj libgcj libgcjdev lib32gcj lib64gcj,$(addons))
    endif
    ifeq ($(PKGSOURCE),gcj-$(BASE_VERSION))
      languages = java
      addons = gcj libgcj libgcjdev lib32gcj lib64gcj
    endif
  endif
  ifneq ($(with_standalone_gcj),yes)
    addons += libgcjcommon
  endif
endif

ifeq ($(distribution),DebianXXX)
# use type-handling
ada_no_archs := $(strip \
	$(shell type-handling -n -r `echo $(ada_no_cpus) | tr ' ' ,` any) \
	$(shell type-handling -n -r any `echo $(ada_no_systems) | tr ' ' ,`))
java_no_archs := $(strip \
	$(shell type-handling -n -r `echo $(java_no_cpus) | tr ' ' ,` any) \
	$(shell type-handling -n -r any `echo $(java_no_systems) | tr ' ' ,`))
pascal_no_archs := $(strip \
	$(shell type-handling -n -r `echo $(pascal_no_cpus) | tr ' ' ,` any) \
	$(shell type-handling -n -r any `echo $(pascal_no_systems) | tr ' ' ,`))
f95_no_archs := $(strip \
	$(shell type-handling -n -r `echo $(f95_no_cpus) | tr ' ' ,` any) \
	$(shell type-handling -n -r any `echo $(f95_no_systems) | tr ' ' ,`))
libgc_no_archs := $(strip \
	$(shell type-handling -n -r `echo $(libgc_no_cpus) | tr ' ' ,` any) \
	$(shell type-handling -n -r any `echo $(libgc_no_systems) | tr ' ' ,`))
check_no_archs := $(strip \
	$(shell type-handling -n -r `echo $(check_no_cpus) | tr ' ' ,` any) \
	$(shell type-handling -n -r any `echo $(check_no_systems) | tr ' ' ,`) \
	!hurd-i386)
locale_no_archs := $(strip \
	$(shell type-handling -n -r `echo $(locale_no_cpus) | tr ' ' ,` any) \
	$(shell type-handling -n -r any `echo $(locale_no_systems) | tr ' ' ,`))

linux_gnu_archs := $(shell type-handling -r any linux-gnu)
else
# avoid it ...
ada_no_archs    := $(strip $(foreach cpu,$(ada_no_cpus),!$(cpu)) \
			!knetbsd-i386 !netbsd-i386 !hurd-i386)
java_no_archs   := $(strip $(foreach cpu,$(java_no_cpus),!$(cpu)) \
			!kfreebsd-i386 !knetbsd-i386 !netbsd-i386)
pascal_no_archs := $(strip $(foreach cpu,$(pascal_no_cpus),!$(cpu)) \
			!netbsd-i386)
f95_no_archs	:= $(strip $(foreach cpu,$(f95_no_cpus),!$(cpu)) \
			!avr)
libgc_no_archs  := $(strip $(foreach cpu,$(libgc_no_cpus),!$(cpu)) \
			!knetbsd-i386)
check_no_archs  := $(strip $(foreach cpu,$(check_no_cpus),!$(cpu)) \
			!hurd-i386)
locale_no_archs := $(strip $(foreach cpu,$(locale_no_cpus),!$(cpu)) \
			!hurd-i386 !knetbsd-i386 !netbsd-i386)
linux_gnu_archs := !hurd-i386
endif

control-file:
	echo /$(foo)/$(with_separate_libgcj)/$(PKGSOURCE),gcc-$(BASE_VERSION)/
	echo "addons: $(addons)"; \
	m4 $(ctrl_flags) \
	  -DPV=$(pkg_ver) \
	  -DGPC_PV=$(gpc_pkg_ver) \
	  -DCXX_SO=$(CXX_SONAME) \
	  -DGCC_SO=$(GCC_SONAME) \
	  -DOBJC_SO=$(OBJC_SONAME) \
	  -DFORTRAN_SO=$(FORTRAN_SONAME) \
	  -DGCJ_SO=$(GCJ_SONAME) \
	  -DGNAT_SO=$(GNAT_SONAME) \
	  -DGNAT_V=$(GNAT_VERSION) \
	  -DFFI_SO=$(FFI_SONAME) \
	  -DMF_SO=$(MUDFLAP_SONAME) \
	  -Denabled_languages="$(languages) $(addons)" \
	  -Dada_no_archs="$(ada_no_archs)" \
	  -Djava_no_archs="$(java_no_archs)" \
	  -Dpascal_no_archs="$(pascal_no_archs)" \
	  -Df95_no_archs="$(f95_no_archs)" \
	  -Dlibgc_no_archs="$(libgc_no_archs)" \
	  -Dcheck_no_archs="$(check_no_archs)" \
	  -Dlocale_no_archs="$(locale_no_archs)" \
	  -Dlinux_gnu_archs="$(linux_gnu_archs)" \
	  -Dbiarch32_archs="$(strip $(subst /, ,$(biarch32_archs)))" \
	  -Dbiarch64_archs="$(strip $(subst /, ,$(biarch_archs)))" \
		debian/control.m4 > debian/control.tmp2
	uniq debian/control.tmp2 | sed '/^Build/s/ *, */, /g' \
		> debian/control.tmp
	rm -f debian/control.tmp2
	[ -e debian/control ] \
	  && cmp -s debian/control debian/control.tmp \
	  && rm -f debian/control.tmp && exit 0; \
	  mv debian/control.tmp debian/control; touch $(control_stamp)

substvars-file:
	rm -f debian/substvars.local.tmp
	( \
		echo 'gcc:Version=$(DEB_GCC_VERSION)'; \
		echo 'gcc:SoftVersion=$(DEB_GCC_SOFT_VERSION)'; \
		echo 'gcc:EpochVersion=$(DEB_EVERSION)'; \
		echo 'gcj:Version=$(DEB_GCJ_VERSION)'; \
		echo 'gcj:SoftVersion=$(DEB_GCJ_SOFT_VERSION)'; \
		echo 'gpc:Version=$(DEB_GPC_VERSION)'; \
		echo 'binutils:Version=$(BINUTILSV)'; \
		echo 'dep:libgcc=$(LIBGCC_DEP)'; \
		echo 'dep:libgccbiarch=$(LIBGCC_BIARCH_DEP)'; \
		echo 'dep:libcdev=$(LIBC_DEV_DEP)'; \
		echo 'dep:libcbiarch=$(LIBC_BIARCH_DEP)'; \
		echo 'dep:libcbiarchdev=$(LIBC_BIARCH_DEV_DEP)'; \
		echo 'dep:libunwinddev=$(LIBUNWIND_DEV_DEP)'; \
		echo 'dep:libcxxbiarch=$(LIBCXX_BIARCH_DEP)'; \
		echo 'dep:libgnat=$(LIBGNAT_DEP)'; \
	) > debian/substvars.local.tmp
	[ -e debian/substvars.local ] \
	  && cmp -s debian/substvars.local debian/substvars.local.tmp \
	  && rm -f debian/substvars.local.tmp && exit 0; \
	  mv debian/substvars.local.tmp debian/substvars.local; \
	  touch $(control_stamp)

parameters-file:
	rm -f debian/rules.parameters.tmp
	( \
		echo '# configuration parameters taken from upstream source files'; \
		echo 'GCC_VERSION	:= $(GCC_VERSION)'; \
		echo 'BASE_VERSION	:= $(BASE_VERSION)'; \
		echo 'SOURCE_VERSION	:= $(SOURCE_VERSION)'; \
		echo 'DEB_VERSION	:= $(DEB_VERSION)'; \
		echo 'DEB_EVERSION	:= $(DEB_EVERSION)'; \
		echo 'GPC_BASE_VERSION	:= $(GPC_BASE_VERSION)'; \
		echo 'DEB_GPC_VERSION	:= $(DEB_GPC_VERSION)'; \
		echo 'DEB_SOVERSION	:= $(DEB_SOVERSION)'; \
		echo 'DEB_SOEVERSION	:= $(DEB_SOEVERSION)'; \
		echo 'DEB_LIBGCC_SOVERSION	:= $(DEB_LIBGCC_SOVERSION)'; \
		echo 'DEB_LIBGCC_VERSION	:= $(DEB_LIBGCC_VERSION)'; \
		echo 'DEB_STDCXX_SOVERSION	:= $(DEB_STDCXX_SOVERSION)'; \
		echo 'DEB_GCJ_SOVERSION	:= $(DEB_GCJ_SOVERSION)'; \
		echo 'DEB_FFI_SOVERSION	:= $(DEB_FFI_SOVERSION)'; \
		echo 'GCC_SONAME	:= $(GCC_SONAME)'; \
		echo 'CXX_SONAME	:= $(CXX_SONAME)'; \
		echo 'FORTRAN_SONAME	:= $(FORTRAN_SONAME)'; \
		echo 'OBJC_SONAME	:= $(OBJC_SONAME)'; \
		echo 'GCJ_SONAME	:= $(GCJ_SONAME)'; \
		echo 'GNAT_VERSION	:= $(GNAT_VERSION)'; \
		echo 'GNAT_SONAME	:= $(GNAT_SONAME)'; \
		echo 'FFI_SONAME	:= $(FFI_SONAME)'; \
		echo 'MUDFLAP_SONAME	:= $(MUDFLAP_SONAME)'; \
		echo 'LIBC_DEP		:= $(LIBC_DEP)'; \
	) > debian/rules.parameters.tmp
	[ -e debian/rules.parameters ] \
	  && cmp -s debian/rules.parameters debian/rules.parameters.tmp \
	  && rm -f debian/rules.parameters.tmp && exit 0; \
	  mv debian/rules.parameters.tmp debian/rules.parameters; \
	  touch $(control_stamp)

versioned-files:
	fs=`echo debian/*-BV* debian/*GCJ* debian/*CXX* debian/*LC*|sort -u`; \
	for f in $$fs; do \
	  [ -f $$f ] || echo "CANNOT FIND $$f"; \
	  [ -f $$f ] || continue; \
	  f2=$$(echo $$f \
		| sed 's/BV/$(BASE_VERSION)/;s/PV/$(GPC_BASE_VERSION)/;s/CXX/$(CXX_SONAME)/;s/GCJ/$(GCJ_SONAME)/;s/LC/$(GCC_SONAME)/;s/FFI/$(FFI_SONAME)/'); \
	  sed -e 's/@BV@/$(BASE_VERSION)/g' \
	      -e 's/@PV@/$(GPC_BASE_VERSION)/g' \
	      -e 's/@CXX@/$(CXX_SONAME)/g' \
	      -e 's/@GCJ@/$(GCJ_SONAME)/g' \
	      -e 's/@LC@/$(GCC_SONAME)/g' \
	      -e 's/@FFI@/$(FFI_SONAME)/g' \
	    $$f > $$f2; \
	  touch -r $$f $$f2; \
	done
