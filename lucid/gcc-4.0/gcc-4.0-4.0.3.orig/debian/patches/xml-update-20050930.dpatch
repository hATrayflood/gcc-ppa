#! /bin/sh -e

# DP: classpath xml-update from 20050930

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p0 < $0
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p0 < $0
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0


diff -Naur libjava.orig/gnu/xml/transform/AbstractNumberNode.java libjava/gnu/xml/transform/AbstractNumberNode.java
--- libjava.orig/gnu/xml/transform/AbstractNumberNode.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/AbstractNumberNode.java	2005-09-30 19:07:23.000000000 +0200
@@ -306,6 +306,15 @@
   abstract int[] compute(Stylesheet stylesheet, Node context, int pos, int len)
     throws TransformerException;
 
+  public boolean references(QName var)
+  {
+    if (format.references(var))
+      {
+        return true;
+      }
+    return super.references(var);
+  }
+
   public String toString()
   {
     StringBuffer buf = new StringBuffer(getClass().getName());
diff -Naur libjava.orig/gnu/xml/transform/ApplyImportsNode.java libjava/gnu/xml/transform/ApplyImportsNode.java
--- libjava.orig/gnu/xml/transform/ApplyImportsNode.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/ApplyImportsNode.java	2005-09-30 19:05:20.000000000 +0200
@@ -81,6 +81,6 @@
                    parent, nextSibling);
       }
   }
-  
+
 }
 
diff -Naur libjava.orig/gnu/xml/transform/ApplyTemplatesNode.java libjava/gnu/xml/transform/ApplyTemplatesNode.java
--- libjava.orig/gnu/xml/transform/ApplyTemplatesNode.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/ApplyTemplatesNode.java	2005-09-30 19:07:35.000000000 +0200
@@ -41,6 +41,7 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.List;
 import javax.xml.namespace.QName;
 import javax.xml.transform.TransformerException;
@@ -111,14 +112,26 @@
       {
         if (withParams != null)
           {
-            // push the parameter context
-            stylesheet.bindings.push(false);
-            // set the parameters
+            // compute the parameter values
+            LinkedList values = new LinkedList();
             for (Iterator i = withParams.iterator(); i.hasNext(); )
               {
                 WithParam p = (WithParam) i.next();
                 Object value = p.getValue(stylesheet, mode, context, pos, len);
-                stylesheet.bindings.set(p.name, value, false);
+                Object[] pair = new Object[2];
+                pair[0] = p.name;
+                pair[1] = value;
+                values.add(pair);
+              }
+            // push the parameter context
+            stylesheet.bindings.push(Bindings.WITH_PARAM);
+            // set the parameters
+            for (Iterator i = values.iterator(); i.hasNext(); )
+              {
+                Object[] pair = (Object[]) i.next();
+                QName name = (QName) pair[0];
+                Object value = pair[1];
+                stylesheet.bindings.set(name, value, Bindings.WITH_PARAM);
               }
           }
         Collection ns = (Collection) ret;
@@ -154,7 +167,7 @@
         if (withParams != null)
           {
             // pop the variable context
-            stylesheet.bindings.pop(false);
+            stylesheet.bindings.pop(Bindings.WITH_PARAM);
           }
       }
     // apply-templates doesn't have processable children
@@ -165,6 +178,35 @@
                    parent, nextSibling);
       }
   }
+
+  public boolean references(QName var)
+  {
+    if (select != null && select.references(var))
+      {
+        return true;
+      }
+    if (withParams != null)
+      {
+        for (Iterator i = withParams.iterator(); i.hasNext(); )
+          {
+            if (((WithParam) i.next()).references(var))
+              {
+                return true;
+              }
+          }
+      }
+    if (sortKeys != null)
+      {
+        for (Iterator i = sortKeys.iterator(); i.hasNext(); )
+          {
+            if (((SortKey) i.next()).references(var))
+              {
+                return true;
+              }
+          }
+      }
+    return super.references(var);
+  }
   
   public String toString()
   {
diff -Naur libjava.orig/gnu/xml/transform/AttributeNode.java libjava/gnu/xml/transform/AttributeNode.java
--- libjava.orig/gnu/xml/transform/AttributeNode.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/AttributeNode.java	2005-09-30 19:07:42.000000000 +0200
@@ -237,6 +237,19 @@
       }
     return ret;
   }
+
+  public boolean references(QName var)
+  {
+    if (name != null && name.references(var))
+      {
+        return true;
+      }
+    if (namespace != null && namespace.references(var))
+      {
+        return true;
+      }
+    return super.references(var);
+  }
   
   public String toString()
   {
diff -Naur libjava.orig/gnu/xml/transform/Bindings.java libjava/gnu/xml/transform/Bindings.java
--- libjava.orig/gnu/xml/transform/Bindings.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/Bindings.java	2005-09-30 19:06:27.000000000 +0200
@@ -57,6 +57,10 @@
   implements XPathVariableResolver, Cloneable
 {
 
+  static final int VARIABLE = 0;
+  static final int PARAM = 1;
+  static final int WITH_PARAM = 2;
+
   final Stylesheet stylesheet;
 
   /**
@@ -69,13 +73,21 @@
    */
   final LinkedList parameters;
 
+  /**
+   * Argument (with-param) value stack.
+   */
+  final LinkedList withParameters;
+
   Bindings(Stylesheet stylesheet)
   {
     this.stylesheet = stylesheet;
     variables = new LinkedList();
     parameters = new LinkedList();
-    push(true);
-    push(false);
+    withParameters = new LinkedList();
+    for (int i = 0; i < 3; i++)
+      {
+        push(i);
+      }
   }
 
   public Object clone()
@@ -90,53 +102,87 @@
       }
   }
 
-  void push(boolean global)
+  void push(int type)
   {
-    if (global)
+    switch (type)
       {
+      case VARIABLE:
         variables.addFirst(new HashMap());
-      }
-    else
-      {
+        break;
+      case PARAM:
         parameters.addFirst(new HashMap());
+        break;
+      case WITH_PARAM:
+        withParameters.addFirst(new HashMap());
+        break;
       }
   }
 
-  void pop(boolean global)
+  void pop(int type)
   {
-    if (global)
+    switch (type)
       {
+      case VARIABLE:
         variables.removeFirst();
-      }
-    else
-      {
+        break;
+      case PARAM:
         parameters.removeFirst();
+        break;
+      case WITH_PARAM:
+        withParameters.removeFirst();
+        break;
       }
   }
 
-  public boolean containsKey(String name, boolean global)
+  public boolean containsKey(QName name, int type)
   {
-    Iterator i = global ? variables.iterator() : parameters.iterator();
-    while (i.hasNext())
+    Iterator i = null;
+    switch (type)
       {
-        Map ctx = (Map) i.next();
-        if (ctx.containsKey(name))
+      case VARIABLE:
+        i = variables.iterator();
+        break;
+      case PARAM:
+        i = parameters.iterator();
+        break;
+      case WITH_PARAM:
+        Map ctx = (Map) withParameters.getFirst();
+        return ctx.containsKey(name);
+      }
+    if (i != null)
+      {
+        while (i.hasNext())
           {
-            return true;
+            Map ctx = (Map) i.next();
+            if (ctx.containsKey(name))
+              {
+                return true;
+              }
           }
       }
     return false;
   }
 
-  public Object get(String name, Node context, int pos, int len)
+  public Object get(QName name, Node context, int pos, int len)
   {
     //System.err.println("bindings.get: "+name);
     //System.err.println("\t"+toString());
     Object ret = null;
-    for (Iterator i = variables.iterator(); i.hasNext() && ret == null; )
+    //if (parameters.size() > 1 && containsKey(name, PARAM))
+      // check that template defines parameter
       {
-        Map vctx = (Map) i.next();
-        ret = vctx.get(name);
+        Map cwp = (Map) withParameters.getFirst();
+        ret = cwp.get(name);
+        //System.err.println("\twith-param: ret="+ret);
+      }
+    if (ret == null)
+      {
+        for (Iterator i = variables.iterator(); i.hasNext() && ret == null; )
+          {
+            Map vctx = (Map) i.next();
+            ret = vctx.get(name);
+          }
+        //System.err.println("\tvariable: ret="+ret);
       }
     if (ret == null)
       {
@@ -145,6 +191,7 @@
             Map pctx = (Map) i.next();
             ret = pctx.get(name);
           }
+        //System.err.println("\tparam: ret="+ret);
       }
     /*if (ret instanceof Expr && context != null)
       {
@@ -163,23 +210,29 @@
     return ret;
   }
 
-  void set(String name, Object value, boolean global)
+  void set(QName name, Object value, int type)
   {
-    if (global)
-      {
-        Map context = (Map) variables.getFirst();
-        context.put(name, value);
-      }
-    else
+    switch (type)
       {
-        Map context = (Map) parameters.getFirst();
-        context.put(name, value);
+      case VARIABLE:
+        Map vctx = (Map) variables.getFirst();
+        vctx.put(name, value);
+        break;
+      case PARAM:
+        Map pctx = (Map) parameters.getFirst();
+        pctx.put(name, value);
+        break;
+      case WITH_PARAM:
+        Map wctx = (Map) withParameters.getFirst();
+        wctx.put(name, value);
+        break;
       }
+    //System.err.println("Set "+name+"="+value);
   }
 
   public Object resolveVariable(QName qName)
   {
-    return get(qName.toString(), null, 1, 1);
+    return get(qName, null, 1, 1);
   }
   
   public String toString()
@@ -187,6 +240,31 @@
     StringBuffer buf = new StringBuffer();
     boolean next = false;
     Collection seen = new HashSet();
+    Map wctx = (Map) withParameters.getFirst();
+    buf.append('(');
+    for (Iterator i = wctx.entrySet().iterator(); i.hasNext(); )
+      {
+        if (next)
+          {
+            buf.append(',');
+          }
+        else
+          {
+            next = true;
+          }
+        Map.Entry entry = (Map.Entry) i.next();
+        Object key = entry.getKey();
+        if (!seen.contains(key))
+          {
+            buf.append(key);
+            buf.append('=');
+            buf.append(entry.getValue());
+            seen.add(key);
+          }
+      }
+    buf.append(')');
+    next = false;
+    seen.clear();
     buf.append('{');
     for (Iterator i = variables.iterator(); i.hasNext(); )
       {
@@ -212,6 +290,10 @@
               }
           } 
       }
+    buf.append('}');
+    next = false;
+    seen.clear();
+    buf.append('[');
     for (Iterator i = parameters.iterator(); i.hasNext(); )
       {
         Map ctx = (Map) i.next();
@@ -236,7 +318,8 @@
               }
           } 
       }
-    buf.append('}');
+    buf.append(']');
     return buf.toString();
   }
+
 }
diff -Naur libjava.orig/gnu/xml/transform/CallTemplateNode.java libjava/gnu/xml/transform/CallTemplateNode.java
--- libjava.orig/gnu/xml/transform/CallTemplateNode.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/CallTemplateNode.java	2005-09-30 19:07:51.000000000 +0200
@@ -39,6 +39,7 @@
 
 import java.util.ArrayList;
 import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.List;
 import javax.xml.namespace.QName;
 import javax.xml.transform.TransformerException;
@@ -90,14 +91,30 @@
   {
     if (withParams != null)
       {
-        // push the parameter context
-        stylesheet.bindings.push(false);
-        // set the parameters
+        // compute the parameter values
+        LinkedList values = new LinkedList();
         for (Iterator i = withParams.iterator(); i.hasNext(); )
           {
             WithParam p = (WithParam) i.next();
             Object value = p.getValue(stylesheet, mode, context, pos, len);
-            stylesheet.bindings.set(p.name, value, false);
+            Object[] pair = new Object[2];
+            pair[0] = p.name;
+            pair[1] = value;
+            values.add(pair);
+          }
+        // push the parameter context
+        stylesheet.bindings.push(Bindings.WITH_PARAM);
+        // set the parameters
+        for (Iterator i = values.iterator(); i.hasNext(); )
+          {
+            Object[] pair = (Object[]) i.next();
+            QName name = (QName) pair[0];
+            Object value = pair[1];
+            stylesheet.bindings.set(name, value, Bindings.WITH_PARAM);
+            if (stylesheet.debug)
+              {
+                System.err.println("with-param: " + name + " = " + value);
+              }
           }
       }
     TemplateNode t = stylesheet.getTemplate(mode, name);
@@ -109,7 +126,7 @@
     if (withParams != null)
       {
         // pop the variable context
-        stylesheet.bindings.pop(false);
+        stylesheet.bindings.pop(Bindings.WITH_PARAM);
       }
     // call-template doesn't have processable children
     if (next != null)
@@ -120,6 +137,21 @@
       }
   }
   
+  public boolean references(QName var)
+  {
+    if (withParams != null)
+      {
+        for (Iterator i = withParams.iterator(); i.hasNext(); )
+          {
+            if (((WithParam) i.next()).references(var))
+              {
+                return true;
+              }
+          }
+      }
+    return super.references(var);
+  }
+  
   public String toString()
   {
     StringBuffer buf = new StringBuffer(getClass().getName());
diff -Naur libjava.orig/gnu/xml/transform/CopyOfNode.java libjava/gnu/xml/transform/CopyOfNode.java
--- libjava.orig/gnu/xml/transform/CopyOfNode.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/CopyOfNode.java	2005-09-23 19:29:52.000000000 +0200
@@ -170,6 +170,15 @@
       }
   }
   
+  public boolean references(QName var)
+  {
+    if (select != null && select.references(var))
+      {
+        return true;
+      }
+    return super.references(var);
+  }
+  
   public String toString()
   {
     StringBuffer buf = new StringBuffer(getClass().getName());
diff -Naur libjava.orig/gnu/xml/transform/CurrentFunction.java libjava/gnu/xml/transform/CurrentFunction.java
--- libjava.orig/gnu/xml/transform/CurrentFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/CurrentFunction.java	2005-09-23 19:29:52.000000000 +0200
@@ -39,6 +39,7 @@
 
 import java.util.Collections;
 import java.util.List;
+import javax.xml.namespace.QName;
 import javax.xml.xpath.XPathFunction;
 import javax.xml.xpath.XPathFunctionException;
 import org.w3c.dom.Node;
@@ -89,6 +90,11 @@
     return new CurrentFunction(s);
   }
 
+  public boolean references(QName var)
+  {
+    return false;
+  }
+
   public String toString()
   {
     return "current()";
diff -Naur libjava.orig/gnu/xml/transform/DocumentFunction.java libjava/gnu/xml/transform/DocumentFunction.java
--- libjava.orig/gnu/xml/transform/DocumentFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/DocumentFunction.java	2005-09-23 19:29:52.000000000 +0200
@@ -43,6 +43,7 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.TreeSet;
+import javax.xml.namespace.QName;
 import javax.xml.transform.TransformerException;
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.xpath.XPathFunction;
@@ -239,5 +240,17 @@
     f.setArguments(args2);
     return f;
   }
+
+  public boolean references(QName var)
+  {
+    for (Iterator i = args.iterator(); i.hasNext(); )
+      {
+        if (((Expr) i.next()).references(var))
+          {
+            return true;
+          }
+      }
+    return false;
+  }
   
 }
diff -Naur libjava.orig/gnu/xml/transform/ElementAvailableFunction.java libjava/gnu/xml/transform/ElementAvailableFunction.java
--- libjava.orig/gnu/xml/transform/ElementAvailableFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/ElementAvailableFunction.java	2005-09-23 19:29:52.000000000 +0200
@@ -40,8 +40,10 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.Iterator;
 import java.util.List;
 import java.util.TreeSet;
+import javax.xml.namespace.QName;
 import javax.xml.namespace.NamespaceContext;
 import javax.xml.xpath.XPathFunction;
 import javax.xml.xpath.XPathFunctionException;
@@ -165,5 +167,17 @@
     return f;
   }
 
+  public boolean references(QName var)
+  {
+    for (Iterator i = args.iterator(); i.hasNext(); )
+      {
+        if (((Expr) i.next()).references(var))
+          {
+            return true;
+          }
+      }
+    return false;
+  }
+
 }
 
diff -Naur libjava.orig/gnu/xml/transform/ElementNode.java libjava/gnu/xml/transform/ElementNode.java
--- libjava.orig/gnu/xml/transform/ElementNode.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/ElementNode.java	2005-09-23 19:29:52.000000000 +0200
@@ -265,6 +265,19 @@
       }
   }
 
+  public boolean references(QName var)
+  {
+    if (name != null && name.references(var))
+      {
+        return true;
+      }
+    if (namespace != null && namespace.references(var))
+      {
+        return true;
+      }
+    return super.references(var);
+  }
+  
   public String toString()
   {
     StringBuffer buf = new StringBuffer(getClass().getName());
diff -Naur libjava.orig/gnu/xml/transform/ForEachNode.java libjava/gnu/xml/transform/ForEachNode.java
--- libjava.orig/gnu/xml/transform/ForEachNode.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/ForEachNode.java	2005-09-23 19:29:52.000000000 +0200
@@ -139,6 +139,25 @@
       }
   }
 
+  public boolean references(QName var)
+  {
+    if (select != null && select.references(var))
+      {
+        return true;
+      }
+    if (sortKeys != null)
+      {
+        for (Iterator i = sortKeys.iterator(); i.hasNext(); )
+          {
+            if (((SortKey) i.next()).references(var))
+              {
+                return true;
+              }
+          }
+      }
+    return super.references(var);
+  }
+  
   public String toString()
   {
     StringBuffer buf = new StringBuffer(getClass().getName());
diff -Naur libjava.orig/gnu/xml/transform/FormatNumberFunction.java libjava/gnu/xml/transform/FormatNumberFunction.java
--- libjava.orig/gnu/xml/transform/FormatNumberFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/FormatNumberFunction.java	2005-09-23 19:29:52.000000000 +0200
@@ -40,7 +40,9 @@
 import java.text.DecimalFormat;
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Iterator;
 import java.util.List;
+import javax.xml.namespace.QName;
 import javax.xml.xpath.XPathFunction;
 import javax.xml.xpath.XPathFunctionException;
 import org.w3c.dom.Node;
@@ -128,5 +130,17 @@
     return f;
   }
 
+  public boolean references(QName var)
+  {
+    for (Iterator i = args.iterator(); i.hasNext(); )
+      {
+        if (((Expr) i.next()).references(var))
+          {
+            return true;
+          }
+      }
+    return false;
+  }
+
 }
 
diff -Naur libjava.orig/gnu/xml/transform/FunctionAvailableFunction.java libjava/gnu/xml/transform/FunctionAvailableFunction.java
--- libjava.orig/gnu/xml/transform/FunctionAvailableFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/FunctionAvailableFunction.java	2005-09-23 19:29:52.000000000 +0200
@@ -40,9 +40,11 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.Iterator;
 import java.util.List;
 import java.util.TreeSet;
 import javax.xml.namespace.NamespaceContext;
+import javax.xml.namespace.QName;
 import javax.xml.xpath.XPathFunction;
 import javax.xml.xpath.XPathFunctionException;
 import org.w3c.dom.Node;
@@ -171,5 +173,17 @@
     return f;
   }
 
+  public boolean references(QName var)
+  {
+    for (Iterator i = args.iterator(); i.hasNext(); )
+      {
+        if (((Expr) i.next()).references(var))
+          {
+            return true;
+          }
+      }
+    return false;
+  }
+
 }
 
diff -Naur libjava.orig/gnu/xml/transform/GenerateIdFunction.java libjava/gnu/xml/transform/GenerateIdFunction.java
--- libjava.orig/gnu/xml/transform/GenerateIdFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/GenerateIdFunction.java	2005-09-23 19:29:52.000000000 +0200
@@ -40,7 +40,9 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
+import java.util.Iterator;
 import java.util.List;
+import javax.xml.namespace.QName;
 import javax.xml.xpath.XPathFunction;
 import javax.xml.xpath.XPathFunctionException;
 import org.w3c.dom.Node;
@@ -122,5 +124,17 @@
     return f;
   }
 
+  public boolean references(QName var)
+  {
+    for (Iterator i = args.iterator(); i.hasNext(); )
+      {
+        if (((Expr) i.next()).references(var))
+          {
+            return true;
+          }
+      }
+    return false;
+  }
+
 }
 
diff -Naur libjava.orig/gnu/xml/transform/IfNode.java libjava/gnu/xml/transform/IfNode.java
--- libjava.orig/gnu/xml/transform/IfNode.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/IfNode.java	2005-09-23 19:29:52.000000000 +0200
@@ -98,6 +98,15 @@
       }
   }
   
+  public boolean references(QName var)
+  {
+    if (test != null && test.references(var))
+      {
+        return true;
+      }
+    return super.references(var);
+  }
+  
   public String toString()
   {
     StringBuffer buf = new StringBuffer(getClass().getName());
diff -Naur libjava.orig/gnu/xml/transform/KeyFunction.java libjava/gnu/xml/transform/KeyFunction.java
--- libjava.orig/gnu/xml/transform/KeyFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/KeyFunction.java	2005-09-23 19:29:52.000000000 +0200
@@ -212,5 +212,17 @@
     return f;
   }
 
+  public boolean references(QName var)
+  {
+    for (Iterator i = args.iterator(); i.hasNext(); )
+      {
+        if (((Expr) i.next()).references(var))
+          {
+            return true;
+          }
+      }
+    return false;
+  }
+
 }
 
diff -Naur libjava.orig/gnu/xml/transform/ParameterNode.java libjava/gnu/xml/transform/ParameterNode.java
--- libjava.orig/gnu/xml/transform/ParameterNode.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/ParameterNode.java	2005-09-23 19:29:52.000000000 +0200
@@ -53,24 +53,25 @@
  */
 final class ParameterNode
   extends TemplateNode
+  implements Comparable
 {
 
-  final String name;
+  final QName name;
   final Expr select;
-  final boolean global;
+  final int type;
 
-  ParameterNode(String name, Expr select, boolean global)
+  ParameterNode(QName name, Expr select, int type)
   {
     this.name = name;
     this.select = select;
-    this.global = global;
+    this.type = type;
   }
 
   TemplateNode clone(Stylesheet stylesheet)
   {
     TemplateNode ret = new ParameterNode(name,
                                          select.clone(stylesheet),
-                                         global);
+                                         type);
     if (children != null)
       {
         ret.children = children.clone(stylesheet);
@@ -83,20 +84,20 @@
   }
 
   void doApply(Stylesheet stylesheet, QName mode,
-             Node context, int pos, int len,
-             Node parent, Node nextSibling)
+               Node context, int pos, int len,
+               Node parent, Node nextSibling)
     throws TransformerException
   {
-    boolean apply = global || !stylesheet.bindings.containsKey(name, global);
-    if (apply)
+    // push the variable context
+    stylesheet.bindings.push(type);
+    // set the variable
+    Object value = getValue(stylesheet, mode, context, pos, len);
+    if (value != null)
       {
-        // push the variable context
-        stylesheet.bindings.push(global);
-        // set the variable
-        Object value = getValue(stylesheet, mode, context, pos, len);
-        if (value != null)
+        stylesheet.bindings.set(name, value, type);
+        if (stylesheet.debug)
           {
-            stylesheet.bindings.set(name, value, global);
+            System.err.println(this + ": set to " + value);
           }
       }
     // variable and param don't process children as such
@@ -107,11 +108,8 @@
                    context, pos, len,
                    parent, nextSibling);
       }
-    if (apply)
-      {
-        // pop the variable context
-        stylesheet.bindings.pop(global);
-      }
+    // pop the variable context
+    stylesheet.bindings.pop(type);
   }
   
   Object getValue(Stylesheet stylesheet, QName mode,
@@ -136,6 +134,38 @@
       }
   }
   
+  public boolean references(QName var)
+  {
+    if (select != null && select.references(var))
+      {
+        return true;
+      }
+    return super.references(var);
+  }
+
+  public int compareTo(Object other)
+  {
+    if (other instanceof ParameterNode)
+      {
+        ParameterNode pn = (ParameterNode) other;
+        boolean r1 = references(pn.name);
+        boolean r2 = pn.references(name);
+        if (r1 && r2)
+          {
+            throw new IllegalArgumentException("circular definitions");
+          }
+        if (r1)
+          {
+            return 1;
+          }
+        if (r2)
+          {
+            return -1;
+          }
+      }
+    return 0;
+  }
+  
   public String toString()
   {
     StringBuffer buf = new StringBuffer(getClass().getName());
@@ -147,9 +177,18 @@
         buf.append(",select=");
         buf.append(select);
       }
-    if (global)
+    buf.append(",type=");
+    switch (type)
       {
-        buf.append(",global");
+      case Bindings.VARIABLE:
+        buf.append("variable");
+        break;
+      case Bindings.PARAM:
+        buf.append("param");
+        break;
+      case Bindings.WITH_PARAM:
+        buf.append("with-param");
+        break;
       }
     buf.append(']');
     return buf.toString();
diff -Naur libjava.orig/gnu/xml/transform/SortKey.java libjava/gnu/xml/transform/SortKey.java
--- libjava.orig/gnu/xml/transform/SortKey.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/SortKey.java	2005-09-23 19:29:52.000000000 +0200
@@ -151,4 +151,29 @@
       }
   }
 
+  boolean references(QName var)
+  {
+    if (select != null && select.references(var))
+      {
+        return true;
+      }
+    if (langTemplate != null && langTemplate.references(var))
+      {
+        return true;
+      }
+    if (dataTypeTemplate != null && dataTypeTemplate.references(var))
+      {
+        return true;
+      }
+    if (orderTemplate != null && orderTemplate.references(var))
+      {
+        return true;
+      }
+    if (caseOrderTemplate != null && caseOrderTemplate.references(var))
+      {
+        return true;
+      }
+    return false;
+  }
+
 }
diff -Naur libjava.orig/gnu/xml/transform/Stylesheet.java libjava/gnu/xml/transform/Stylesheet.java
--- libjava.orig/gnu/xml/transform/Stylesheet.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/Stylesheet.java	2005-09-23 19:29:52.000000000 +0200
@@ -354,13 +354,21 @@
   void initTopLevelVariables(Node context)
     throws TransformerException
   {
-    for (Iterator i = variables.iterator(); i.hasNext(); )
+    current = context;
+    // Sort the variables into order
+    // See XSLT 11.4: "If the template or expression specifying the value of
+    // a global variable x references a global variable y, then the value
+    // for y must be computed before the value of x."
+    List topLevel = new ArrayList(variables);
+    Collections.sort(topLevel);
+    for (Iterator i = topLevel.iterator(); i.hasNext(); )
       {
         ParameterNode var = (ParameterNode) i.next();
         bindings.set(var.name,
                      var.getValue(this, null, context, 1, 1),
-                     var.global);
+                     var.type);
       }
+    current = null;
   }
 
   // -- NamespaceContext --
@@ -380,6 +388,19 @@
     // TODO
     return Collections.singleton(getPrefix(namespaceURI)).iterator();
   }
+
+  final QName getQName(String name)
+  {
+    String localName = name, uri = null, prefix = null;
+    int ci = name.indexOf(':');
+    if (ci != -1)
+      {
+        prefix = name.substring(0, ci);
+        localName = name.substring(ci + 1);
+        uri = getNamespaceURI(prefix);
+      }
+    return new QName(uri, localName, prefix);
+  }
   
   // -- Template selection --
   
@@ -713,9 +734,11 @@
             else if ("param".equals(name) ||
                      "variable".equals(name))
               {
-                boolean global = "variable".equals(name);
+                int type = "variable".equals(name) ?
+                  Bindings.VARIABLE : Bindings.PARAM;
                 TemplateNode content = parse(node.getFirstChild());
-                String paramName = getRequiredAttribute(attrs, "name", node);
+                QName paramName =
+                  getQName(getRequiredAttribute(attrs, "name", node));
                 String select = getAttribute(attrs, "select");
                 ParameterNode param;
                 if (select != null && select.length() > 0)
@@ -728,15 +751,14 @@
                         throw new TransformerConfigurationException(msg, l);
                       }
                     Expr expr = (Expr) xpath.compile(select);
-                    param = new ParameterNode(paramName, expr, global);
+                    param = new ParameterNode(paramName, expr, type);
                   }
                 else
                   {
-                    param = new ParameterNode(paramName, null, global);
+                    param = new ParameterNode(paramName, null, type);
                     param.children = content;
                   }
                 variables.add(param);
-                bindings.set(paramName, content, global);
               }
             else if ("include".equals(name) || "import".equals(name))
               {
@@ -860,20 +882,6 @@
       }
   }
 
-  final QName getQName(String name)
-  {
-    QName qName = QName.valueOf(name);
-    String prefix = qName.getPrefix();
-    String uri = qName.getNamespaceURI();
-    if (prefix != null && (uri == null || uri.length() == 0))
-      {
-        uri = getNamespaceURI(prefix);
-        String localName = qName.getLocalPart();
-        qName = new QName(uri, localName, prefix);
-      }
-    return qName;
-  }
-
   final TemplateNode parseAttributeValueTemplate(String value, Node source)
     throws TransformerConfigurationException, XPathExpressionException
   {
@@ -1501,11 +1509,13 @@
             else if ("param".equals(name) ||
                      "variable".equals(name))
               {
-                boolean global = "variable".equals(name);
+                int type = "variable".equals(name) ?
+                  Bindings.VARIABLE : Bindings.PARAM;
                 NamedNodeMap attrs = node.getAttributes();
                 Node children = node.getFirstChild();
                 TemplateNode content = parse(children);
-                String paramName = getRequiredAttribute(attrs, "name", node);
+                QName paramName = 
+                  getQName(getRequiredAttribute(attrs, "name", node));
                 String select = getAttribute(attrs, "select");
                 ParameterNode ret;
                 if (select != null)
@@ -1518,11 +1528,11 @@
                         throw new TransformerConfigurationException(msg, l);
                       }
                     Expr expr = (Expr) xpath.compile(select);
-                    ret = new ParameterNode(paramName, expr, global);
+                    ret = new ParameterNode(paramName, expr, type);
                   }
                 else
                   {
-                    ret = new ParameterNode(paramName, null, global);
+                    ret = new ParameterNode(paramName, null, type);
                     ret.children = content;
                   }
                 return ret;
@@ -1563,6 +1573,11 @@
             if (!isPreserved(text))
               {
                 // Strip
+                /*String data = text.getData().trim();
+                if (data.length() > 0)
+                  {
+                    text.setData(data);
+                  } // else */
                 text.getParentNode().removeChild(text);
                 return null;
               }
@@ -1697,7 +1712,8 @@
           {
             NamedNodeMap attrs = node.getAttributes();
             TemplateNode content = parse(node.getFirstChild());
-            String name = getRequiredAttribute(attrs, "name", node);
+            QName name =
+              getQName(getRequiredAttribute(attrs, "name", node));
             String select = getAttribute(attrs, "select");
             if (select != null)
               {
diff -Naur libjava.orig/gnu/xml/transform/SystemPropertyFunction.java libjava/gnu/xml/transform/SystemPropertyFunction.java
--- libjava.orig/gnu/xml/transform/SystemPropertyFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/SystemPropertyFunction.java	2005-09-23 19:29:52.000000000 +0200
@@ -38,6 +38,7 @@
 package gnu.xml.transform;
 
 import java.util.ArrayList;
+import java.util.Iterator;
 import java.util.List;
 import javax.xml.namespace.QName;
 import javax.xml.xpath.XPathFunction;
@@ -124,5 +125,17 @@
     return f;
   }
 
+  public boolean references(QName var)
+  {
+    for (Iterator i = args.iterator(); i.hasNext(); )
+      {
+        if (((Expr) i.next()).references(var))
+          {
+            return true;
+          }
+      }
+    return false;
+  }
+
 }
 
diff -Naur libjava.orig/gnu/xml/transform/TemplateNode.java libjava/gnu/xml/transform/TemplateNode.java
--- libjava.orig/gnu/xml/transform/TemplateNode.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/TemplateNode.java	2005-09-23 19:29:52.000000000 +0200
@@ -88,6 +88,19 @@
 
   abstract TemplateNode clone(Stylesheet stylesheet);
 
+  public boolean references(QName var)
+  {
+    if (children != null && children.references(var))
+      {
+        return true;
+      }
+    if (next != null && next.references(var))
+      {
+        return true;
+      }
+    return false;
+  }
+
   /**
    * Debugging
    */
diff -Naur libjava.orig/gnu/xml/transform/TransformerImpl.java libjava/gnu/xml/transform/TransformerImpl.java
--- libjava.orig/gnu/xml/transform/TransformerImpl.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/TransformerImpl.java	2005-09-23 19:29:52.000000000 +0200
@@ -106,7 +106,7 @@
     if (stylesheet != null)
       {
         // Set up parameter context for this transformer
-        stylesheet.bindings.push(false);
+        stylesheet.bindings.push(Bindings.PARAM);
       }
   }
 
@@ -559,7 +559,7 @@
   {
     if (stylesheet != null)
       {
-        stylesheet.bindings.set(name, value, false);
+        stylesheet.bindings.set(new QName(null, name), value, Bindings.PARAM);
       }
   }
 
@@ -567,7 +567,7 @@
   {
     if (stylesheet != null)
       {
-        return stylesheet.bindings.get(name, null, 1, 1);
+        return stylesheet.bindings.get(new QName(null, name), null, 1, 1);
       }
     return null;
   }
@@ -576,8 +576,8 @@
   {
     if (stylesheet != null)
       {
-        stylesheet.bindings.pop(false);
-        stylesheet.bindings.push(false);
+        stylesheet.bindings.pop(Bindings.PARAM);
+        stylesheet.bindings.push(Bindings.PARAM);
       }
   }
 
diff -Naur libjava.orig/gnu/xml/transform/UnparsedEntityUriFunction.java libjava/gnu/xml/transform/UnparsedEntityUriFunction.java
--- libjava.orig/gnu/xml/transform/UnparsedEntityUriFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/UnparsedEntityUriFunction.java	2005-09-23 19:29:52.000000000 +0200
@@ -39,7 +39,9 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Iterator;
 import java.util.List;
+import javax.xml.namespace.QName;
 import javax.xml.xpath.XPathFunction;
 import javax.xml.xpath.XPathFunctionException;
 import org.w3c.dom.DocumentType;
@@ -114,5 +116,17 @@
     return f;
   }
 
+  public boolean references(QName var)
+  {
+    for (Iterator i = args.iterator(); i.hasNext(); )
+      {
+        if (((Expr) i.next()).references(var))
+          {
+            return true;
+          }
+      }
+    return false;
+  }
+
 }
 
diff -Naur libjava.orig/gnu/xml/transform/ValueOfNode.java libjava/gnu/xml/transform/ValueOfNode.java
--- libjava.orig/gnu/xml/transform/ValueOfNode.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/ValueOfNode.java	2005-09-23 19:29:52.000000000 +0200
@@ -85,6 +85,10 @@
     throws TransformerException
   {
     Object ret = select.evaluate(context, pos, len);
+    /*if (stylesheet.debug)
+      {
+        System.err.println("value-of: " + select + " -> " + ret);
+      }*/
     String value;
     if (ret instanceof Collection)
       {
@@ -100,10 +104,10 @@
       {
         value = Expr._string(context, ret);
       }
-    /*if (stylesheet.debug)
+    if (stylesheet.debug)
       {
         System.err.println("value-of: "+context+" "+ select + " -> "+ value);
-      }*/
+      }
     if (value != null && value.length() > 0)
       {
         Document doc = (parent instanceof Document) ?
@@ -131,6 +135,15 @@
       }
   }
 
+  public boolean references(QName var)
+  {
+    if (select != null && select.references(var))
+      {
+        return true;
+      }
+    return super.references(var);
+  }
+  
   public String toString()
   {
     StringBuffer buf = new StringBuffer(getClass().getName());
diff -Naur libjava.orig/gnu/xml/transform/WhenNode.java libjava/gnu/xml/transform/WhenNode.java
--- libjava.orig/gnu/xml/transform/WhenNode.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/WhenNode.java	2005-09-23 19:29:52.000000000 +0200
@@ -101,6 +101,15 @@
       }
   }
   
+  public boolean references(QName var)
+  {
+    if (test != null && test.references(var))
+      {
+        return true;
+      }
+    return super.references(var);
+  }
+  
   public String toString()
   {
     StringBuffer buf = new StringBuffer(getClass().getName());
diff -Naur libjava.orig/gnu/xml/transform/WithParam.java libjava/gnu/xml/transform/WithParam.java
--- libjava.orig/gnu/xml/transform/WithParam.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/transform/WithParam.java	2005-09-23 19:29:52.000000000 +0200
@@ -55,18 +55,18 @@
 final class WithParam
 {
 
-  final String name;
+  final QName name;
   final Expr select;
   final TemplateNode content;
 
-  WithParam(String name, Expr select)
+  WithParam(QName name, Expr select)
   {
     this.name = name;
     this.select = select;
     content = null;
   }
 
-  WithParam(String name, TemplateNode content)
+  WithParam(QName name, TemplateNode content)
   {
     this.name = name;
     this.content = content;
@@ -107,4 +107,17 @@
       }
   }
 
+  boolean references(QName var)
+  {
+    if (select != null && select.references(var))
+      {
+        return true;
+      }
+    if (content != null && content.references(var))
+      {
+        return true;
+      }
+    return false;
+  }
+
 }
diff -Naur libjava.orig/gnu/xml/xpath/AndExpr.java libjava/gnu/xml/xpath/AndExpr.java
--- libjava.orig/gnu/xml/xpath/AndExpr.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/AndExpr.java	2005-09-23 19:29:53.000000000 +0200
@@ -37,6 +37,7 @@
 
 package gnu.xml.xpath;
 
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -73,6 +74,11 @@
     return new AndExpr(lhs.clone(context), rhs.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return (lhs.references(var) || rhs.references(var));
+  }
+
   public String toString()
   {
     return lhs + " and " + rhs;
diff -Naur libjava.orig/gnu/xml/xpath/ArithmeticExpr.java libjava/gnu/xml/xpath/ArithmeticExpr.java
--- libjava.orig/gnu/xml/xpath/ArithmeticExpr.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/ArithmeticExpr.java	2005-09-23 23:30:39.000000000 +0200
@@ -37,6 +37,7 @@
 
 package gnu.xml.xpath;
 
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -94,17 +95,31 @@
       case DIVIDE:
         if (rn == 0.0d || rn == -0.0d)
           {
-            return new Double(ln < 0.0d ?
-                              Double.NEGATIVE_INFINITY :
-                              Double.POSITIVE_INFINITY);
+            if (ln == 0.0d || ln == -0.0d)
+              {
+                return new Double(Double.NaN);
+              }
+            else
+              {
+                return new Double(ln < 0.0d ?
+                                  Double.NEGATIVE_INFINITY :
+                                  Double.POSITIVE_INFINITY);
+              }
           }
         return new Double(ln / rn);
       case MODULO:
-        if (rn == 0.0d || rn == -0.0d)
+        if (rn == 0.0d || rn == 0.0d)
           {
-            return new Double(ln < 0.0d ?
-                              Double.NEGATIVE_INFINITY :
-                              Double.POSITIVE_INFINITY);
+            if (ln == 0.0d || ln == -0.0d)
+              {
+                return new Double(Double.NaN);
+              }
+            else
+              {
+                return new Double(ln < 0.0d ?
+                                  Double.NEGATIVE_INFINITY :
+                                  Double.POSITIVE_INFINITY);
+              }
           }
         return new Double(ln % rn);
       default:
@@ -117,6 +132,11 @@
     return new ArithmeticExpr(lhs.clone(context), rhs.clone(context), op);
   }
 
+  public boolean references(QName var)
+  {
+    return (lhs.references(var) || rhs.references(var));
+  }
+
   public String toString()
   {
     StringBuffer buf = new StringBuffer();
diff -Naur libjava.orig/gnu/xml/xpath/BooleanFunction.java libjava/gnu/xml/xpath/BooleanFunction.java
--- libjava.orig/gnu/xml/xpath/BooleanFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/BooleanFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -38,6 +38,7 @@
 package gnu.xml.xpath;
 
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -80,6 +81,11 @@
   {
     return new BooleanFunction(arg.clone(context));
   }
+
+  public boolean references(QName var)
+  {
+    return arg.references(var);
+  }
   
   public String toString()
   {
diff -Naur libjava.orig/gnu/xml/xpath/CeilingFunction.java libjava/gnu/xml/xpath/CeilingFunction.java
--- libjava.orig/gnu/xml/xpath/CeilingFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/CeilingFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -38,6 +38,7 @@
 package gnu.xml.xpath;
 
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -74,6 +75,11 @@
   {
     return new CeilingFunction(arg.clone(context));
   }
+
+  public boolean references(QName var)
+  {
+    return arg.references(var);
+  }
   
   public String toString()
   {
diff -Naur libjava.orig/gnu/xml/xpath/ConcatFunction.java libjava/gnu/xml/xpath/ConcatFunction.java
--- libjava.orig/gnu/xml/xpath/ConcatFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/ConcatFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -40,6 +40,7 @@
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -81,6 +82,18 @@
     return new ConcatFunction(args2);
   }
 
+  public boolean references(QName var)
+  {
+    for (Iterator i = args.iterator(); i.hasNext(); )
+      {
+        if (((Expr) i.next()).references(var))
+          {
+            return true;
+          }
+      }
+    return false;
+  }
+
   public String toString()
   {
     StringBuffer buf = new StringBuffer("concat(");
diff -Naur libjava.orig/gnu/xml/xpath/Constant.java libjava/gnu/xml/xpath/Constant.java
--- libjava.orig/gnu/xml/xpath/Constant.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/Constant.java	2005-09-23 19:29:53.000000000 +0200
@@ -37,6 +37,7 @@
 
 package gnu.xml.xpath;
 
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -65,6 +66,11 @@
     return new Constant(value);
   }
 
+  public boolean references(QName var)
+  {
+    return false;
+  }
+
   public String toString()
   {
     String ret = value.toString();
diff -Naur libjava.orig/gnu/xml/xpath/ContainsFunction.java libjava/gnu/xml/xpath/ContainsFunction.java
--- libjava.orig/gnu/xml/xpath/ContainsFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/ContainsFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -38,6 +38,7 @@
 package gnu.xml.xpath;
 
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -78,6 +79,11 @@
     return new ContainsFunction(arg1.clone(context), arg2.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return (arg1.references(var) || arg2.references(var));
+  }
+
   public String toString()
   {
     return "contains(" + arg1 + "," + arg2 + ")";
diff -Naur libjava.orig/gnu/xml/xpath/CountFunction.java libjava/gnu/xml/xpath/CountFunction.java
--- libjava.orig/gnu/xml/xpath/CountFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/CountFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -39,6 +39,7 @@
 
 import java.util.Collection;
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -74,6 +75,11 @@
     return new CountFunction(arg.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return arg.references(var);
+  }
+
   public String toString()
   {
     return "count(" + arg + ")";
diff -Naur libjava.orig/gnu/xml/xpath/EqualityExpr.java libjava/gnu/xml/xpath/EqualityExpr.java
--- libjava.orig/gnu/xml/xpath/EqualityExpr.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/EqualityExpr.java	2005-09-23 19:29:53.000000000 +0200
@@ -39,6 +39,7 @@
 
 import java.util.Collection;
 import java.util.Iterator;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -91,6 +92,10 @@
       {
         Collection lns = (Collection) left;
         Collection rns = (Collection) right;
+        if (lns.isEmpty())
+          {
+            return false;
+          }
         boolean all = true;
         for (Iterator i = lns.iterator(); i.hasNext(); )
           {
@@ -119,7 +124,7 @@
                   }
               }
           }
-        return false;
+        return all;
       }
     /* 
      * If one object to be compared is a node-set and the other is a number,
@@ -243,6 +248,11 @@
     return new EqualityExpr(lhs.clone(context), rhs.clone(context), invert);
   }
 
+  public boolean references(QName var)
+  {
+    return (lhs.references(var) || rhs.references(var));
+  }
+
   public String toString()
   {
     if (invert)
diff -Naur libjava.orig/gnu/xml/xpath/Expr.java libjava/gnu/xml/xpath/Expr.java
--- libjava.orig/gnu/xml/xpath/Expr.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/Expr.java	2005-09-23 19:29:53.000000000 +0200
@@ -177,6 +177,8 @@
   public abstract Object evaluate(Node context, int pos, int len);
 
   public abstract Expr clone(Object context);
+
+  public abstract boolean references(QName var);
   
   /* -- 4.1 Node Set Functions -- */
 
diff -Naur libjava.orig/gnu/xml/xpath/FalseFunction.java libjava/gnu/xml/xpath/FalseFunction.java
--- libjava.orig/gnu/xml/xpath/FalseFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/FalseFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -37,6 +37,7 @@
 
 package gnu.xml.xpath;
 
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -58,6 +59,11 @@
     return new FalseFunction();
   }
 
+  public boolean references(QName var)
+  {
+    return false;
+  }
+
   public String toString()
   {
     return "false()";
diff -Naur libjava.orig/gnu/xml/xpath/FloorFunction.java libjava/gnu/xml/xpath/FloorFunction.java
--- libjava.orig/gnu/xml/xpath/FloorFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/FloorFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -38,6 +38,7 @@
 package gnu.xml.xpath;
 
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -75,6 +76,11 @@
     return new FloorFunction(arg.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return arg.references(var);
+  }
+
   public String toString()
   {
     return "floor(" + arg + ")";
diff -Naur libjava.orig/gnu/xml/xpath/FunctionCall.java libjava/gnu/xml/xpath/FunctionCall.java
--- libjava.orig/gnu/xml/xpath/FunctionCall.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/FunctionCall.java	2005-09-23 19:29:53.000000000 +0200
@@ -39,6 +39,7 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Iterator;
 import java.util.List;
 import javax.xml.namespace.QName;
 import javax.xml.xpath.XPathFunction;
@@ -129,6 +130,18 @@
     return new FunctionCall(r, name, args2);
   }
 
+  public boolean references(QName var)
+  {
+    for (Iterator i = args.iterator(); i.hasNext(); )
+      {
+        if (((Expr) i.next()).references(var))
+          {
+            return true;
+          }
+      }
+    return false;
+  }
+
   public String toString()
   {
     StringBuffer buf = new StringBuffer();
diff -Naur libjava.orig/gnu/xml/xpath/IdFunction.java libjava/gnu/xml/xpath/IdFunction.java
--- libjava.orig/gnu/xml/xpath/IdFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/IdFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -39,6 +39,7 @@
 
 import java.util.Collection;
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -88,6 +89,11 @@
     return new IdFunction(arg.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return arg.references(var);
+  }
+
   public String toString()
   {
     return "id(" + arg + ")";
diff -Naur libjava.orig/gnu/xml/xpath/LangFunction.java libjava/gnu/xml/xpath/LangFunction.java
--- libjava.orig/gnu/xml/xpath/LangFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/LangFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -38,6 +38,7 @@
 package gnu.xml.xpath;
 
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Element;
 import org.w3c.dom.Node;
 
@@ -102,6 +103,11 @@
     return new IdFunction(arg.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return arg.references(var);
+  }
+
   public String toString()
   {
     return "lang(" + arg + ")";
diff -Naur libjava.orig/gnu/xml/xpath/LastFunction.java libjava/gnu/xml/xpath/LastFunction.java
--- libjava.orig/gnu/xml/xpath/LastFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/LastFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -37,6 +37,7 @@
 
 package gnu.xml.xpath;
 
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -59,6 +60,11 @@
     return new LastFunction();
   }
 
+  public boolean references(QName var)
+  {
+    return false;
+  }
+
   public String toString()
   {
     return "last()";
diff -Naur libjava.orig/gnu/xml/xpath/LocalNameFunction.java libjava/gnu/xml/xpath/LocalNameFunction.java
--- libjava.orig/gnu/xml/xpath/LocalNameFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/LocalNameFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -39,6 +39,7 @@
 
 import java.util.Collection;
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -79,6 +80,11 @@
                                  arg.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return (arg == null) ? false : arg.references(var);
+  }
+
   public String toString()
   {
     return (arg == null) ? "local-name()" : "local-name(" + arg + ")";
diff -Naur libjava.orig/gnu/xml/xpath/NameFunction.java libjava/gnu/xml/xpath/NameFunction.java
--- libjava.orig/gnu/xml/xpath/NameFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/NameFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -39,6 +39,7 @@
 
 import java.util.Collection;
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -86,6 +87,11 @@
     return new NameFunction((arg == null) ? null :
                             arg.clone(context));
   }
+
+  public boolean references(QName var)
+  {
+    return (arg == null) ? false : arg.references(var);
+  }
   
   public String toString()
   {
diff -Naur libjava.orig/gnu/xml/xpath/NamespaceTest.java libjava/gnu/xml/xpath/NamespaceTest.java
--- libjava.orig/gnu/xml/xpath/NamespaceTest.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/NamespaceTest.java	2005-09-23 19:29:53.000000000 +0200
@@ -111,6 +111,11 @@
     return new NamespaceTest(qName, anyLocalName, any);
   }
 
+  public boolean references(QName var)
+  {
+    return false;
+  }
+
   public String toString ()
   {
     if (any)
diff -Naur libjava.orig/gnu/xml/xpath/NamespaceUriFunction.java libjava/gnu/xml/xpath/NamespaceUriFunction.java
--- libjava.orig/gnu/xml/xpath/NamespaceUriFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/NamespaceUriFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -39,6 +39,7 @@
 
 import java.util.Collection;
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -78,6 +79,11 @@
     return new NamespaceUriFunction((arg == null) ? null :
                                     arg.clone(context));
   }
+
+  public boolean references(QName var)
+  {
+    return (arg == null) ? false : arg.references(var);
+  }
   
   public String toString()
   {
diff -Naur libjava.orig/gnu/xml/xpath/NameTest.java libjava/gnu/xml/xpath/NameTest.java
--- libjava.orig/gnu/xml/xpath/NameTest.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/NameTest.java	2005-09-23 19:29:53.000000000 +0200
@@ -125,6 +125,11 @@
     return new NameTest(qName, anyLocalName, any);
   }
 
+  public boolean references(QName var)
+  {
+    return false;
+  }
+
   public String toString ()
   {
     if (any)
diff -Naur libjava.orig/gnu/xml/xpath/NegativeExpr.java libjava/gnu/xml/xpath/NegativeExpr.java
--- libjava.orig/gnu/xml/xpath/NegativeExpr.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/NegativeExpr.java	2005-09-23 19:29:53.000000000 +0200
@@ -37,6 +37,7 @@
 
 package gnu.xml.xpath;
 
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -67,6 +68,11 @@
     return new NegativeExpr(expr.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return expr.references(var);
+  }
+
   public String toString()
   {
     return "-" + expr;
diff -Naur libjava.orig/gnu/xml/xpath/NodeTypeTest.java libjava/gnu/xml/xpath/NodeTypeTest.java
--- libjava.orig/gnu/xml/xpath/NodeTypeTest.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/NodeTypeTest.java	2005-09-23 19:29:53.000000000 +0200
@@ -37,6 +37,7 @@
 
 package gnu.xml.xpath;
 
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -106,6 +107,11 @@
     return new NodeTypeTest(type, data);
   }
 
+  public boolean references(QName var)
+  {
+    return false;
+  }
+
   public String toString()
   {
     switch (type)
diff -Naur libjava.orig/gnu/xml/xpath/NormalizeSpaceFunction.java libjava/gnu/xml/xpath/NormalizeSpaceFunction.java
--- libjava.orig/gnu/xml/xpath/NormalizeSpaceFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/NormalizeSpaceFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -39,6 +39,7 @@
 
 import java.util.List;
 import java.util.StringTokenizer;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -91,6 +92,11 @@
     return new NormalizeSpaceFunction(arg.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return (arg == null) ? false : arg.references(var);
+  }
+
   public String toString()
   {
     return (arg == null) ? "normalize-space()" : "normalize-space(" + arg + ")";
diff -Naur libjava.orig/gnu/xml/xpath/NotFunction.java libjava/gnu/xml/xpath/NotFunction.java
--- libjava.orig/gnu/xml/xpath/NotFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/NotFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -38,6 +38,7 @@
 package gnu.xml.xpath;
 
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -73,6 +74,11 @@
     return new NotFunction(arg.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return arg.references(var);
+  }
+
   public String toString()
   {
     return "not(" + arg + ")";
diff -Naur libjava.orig/gnu/xml/xpath/NumberFunction.java libjava/gnu/xml/xpath/NumberFunction.java
--- libjava.orig/gnu/xml/xpath/NumberFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/NumberFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -38,6 +38,7 @@
 package gnu.xml.xpath;
 
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -88,6 +89,11 @@
     return new NumberFunction(arg.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return arg.references(var);
+  }
+
   public String toString()
   {
     return "number(" + arg + ")";
diff -Naur libjava.orig/gnu/xml/xpath/OrExpr.java libjava/gnu/xml/xpath/OrExpr.java
--- libjava.orig/gnu/xml/xpath/OrExpr.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/OrExpr.java	2005-09-23 19:29:53.000000000 +0200
@@ -37,6 +37,7 @@
 
 package gnu.xml.xpath;
 
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -73,6 +74,11 @@
     return new OrExpr(lhs.clone(context), rhs.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return (lhs.references(var) || rhs.references(var));
+  }
+
   public String toString()
   {
     return lhs + " or " + rhs;
diff -Naur libjava.orig/gnu/xml/xpath/ParenthesizedExpr.java libjava/gnu/xml/xpath/ParenthesizedExpr.java
--- libjava.orig/gnu/xml/xpath/ParenthesizedExpr.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/ParenthesizedExpr.java	2005-09-23 19:29:53.000000000 +0200
@@ -41,6 +41,7 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -76,6 +77,11 @@
     return new ParenthesizedExpr(expr.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return expr.references(var);
+  }
+
   public String toString()
   {
     return "(" + expr + ")";
diff -Naur libjava.orig/gnu/xml/xpath/Pattern.java libjava/gnu/xml/xpath/Pattern.java
--- libjava.orig/gnu/xml/xpath/Pattern.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/Pattern.java	2005-09-23 19:29:53.000000000 +0200
@@ -40,7 +40,7 @@
 import org.w3c.dom.Node;
 
 /**
- * Interface implemented by expressions that can for part of XSL patterns.
+ * Interface implemented by expressions that can form part of XSL patterns.
  *
  * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
  */
diff -Naur libjava.orig/gnu/xml/xpath/PositionFunction.java libjava/gnu/xml/xpath/PositionFunction.java
--- libjava.orig/gnu/xml/xpath/PositionFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/PositionFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -37,6 +37,7 @@
 
 package gnu.xml.xpath;
 
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -59,6 +60,11 @@
     return new PositionFunction();
   }
 
+  public boolean references(QName var)
+  {
+    return false;
+  }
+
   public String toString()
   {
     return "position()";
diff -Naur libjava.orig/gnu/xml/xpath/Predicate.java libjava/gnu/xml/xpath/Predicate.java
--- libjava.orig/gnu/xml/xpath/Predicate.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/Predicate.java	2005-09-23 19:29:53.000000000 +0200
@@ -37,6 +37,7 @@
 
 package gnu.xml.xpath;
 
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -70,6 +71,11 @@
   {
     return new Predicate(expr.clone(context));
   }
+
+  public boolean references(QName var)
+  {
+    return expr.references(var);
+  }
   
   public String toString()
   {
diff -Naur libjava.orig/gnu/xml/xpath/RelationalExpr.java libjava/gnu/xml/xpath/RelationalExpr.java
--- libjava.orig/gnu/xml/xpath/RelationalExpr.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/RelationalExpr.java	2005-09-23 19:29:53.000000000 +0200
@@ -37,6 +37,7 @@
 
 package gnu.xml.xpath;
 
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -93,6 +94,11 @@
     return new RelationalExpr(lhs.clone(context), rhs.clone(context), lt, eq);
   }
 
+  public boolean references(QName var)
+  {
+    return (lhs.references(var) || rhs.references(var));
+  }
+
   public String toString()
   {
     return lhs + " " + (lt ? "<" : ">") + (eq ? "=" : "") + " " + rhs;
diff -Naur libjava.orig/gnu/xml/xpath/Root.java libjava/gnu/xml/xpath/Root.java
--- libjava.orig/gnu/xml/xpath/Root.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/Root.java	2005-09-23 19:29:53.000000000 +0200
@@ -39,6 +39,7 @@
 
 import java.util.Collection;
 import java.util.Collections;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Document;
 import org.w3c.dom.Node;
 
@@ -73,6 +74,11 @@
     return new Root();
   }
 
+  public boolean references(QName var)
+  {
+    return false;
+  }
+
   public String toString()
   {
     return "/";
diff -Naur libjava.orig/gnu/xml/xpath/RoundFunction.java libjava/gnu/xml/xpath/RoundFunction.java
--- libjava.orig/gnu/xml/xpath/RoundFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/RoundFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -38,6 +38,7 @@
 package gnu.xml.xpath;
 
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -82,6 +83,11 @@
     return new RoundFunction(arg.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return arg.references(var);
+  }
+
   public String toString()
   {
     return "round(" + arg + ")";
diff -Naur libjava.orig/gnu/xml/xpath/Selector.java libjava/gnu/xml/xpath/Selector.java
--- libjava.orig/gnu/xml/xpath/Selector.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/Selector.java	2005-09-23 19:29:53.000000000 +0200
@@ -44,6 +44,7 @@
 import java.util.List;
 import java.util.Set;
 import javax.xml.XMLConstants;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Attr;
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;
@@ -424,6 +425,18 @@
     return new Selector(axis, tests2);
   }
 
+  public boolean references(QName var)
+  {
+    for (int i = 0; i < tests.length; i++)
+      {
+        if (tests[i].references(var))
+          {
+            return true;
+          }
+      }
+    return false;
+  }
+
   public String toString()
   {
     StringBuffer buf = new StringBuffer();
@@ -436,7 +449,15 @@
         buf.append("ancestor-or-self::");
         break;
       case ATTRIBUTE:
-        buf.append("attribute::");
+        if (tests.length == 0 ||
+            (tests[0] instanceof NameTest))
+          {
+            buf.append('@');
+          }
+        else
+          {
+            buf.append("attribute::");
+          }
         break;
       case CHILD:
         //buf.append("child::");
diff -Naur libjava.orig/gnu/xml/xpath/StartsWithFunction.java libjava/gnu/xml/xpath/StartsWithFunction.java
--- libjava.orig/gnu/xml/xpath/StartsWithFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/StartsWithFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -38,6 +38,7 @@
 package gnu.xml.xpath;
 
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -78,6 +79,11 @@
     return new StartsWithFunction(arg1.clone(context), arg2.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return (arg1.references(var) || arg2.references(var));
+  }
+
   public String toString()
   {
     return "starts-with(" + arg1 + "," + arg2 + ")";
diff -Naur libjava.orig/gnu/xml/xpath/Steps.java libjava/gnu/xml/xpath/Steps.java
--- libjava.orig/gnu/xml/xpath/Steps.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/Steps.java	2005-09-23 19:29:53.000000000 +0200
@@ -43,6 +43,7 @@
 import java.util.LinkedHashSet;
 import java.util.LinkedList;
 import java.util.Set;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Attr;
 import org.w3c.dom.Node;
 
@@ -219,6 +220,18 @@
     return new Steps(path2);
   }
 
+  public boolean references(QName var)
+  {
+    for (Iterator i = path.iterator(); i.hasNext(); )
+      {
+        if (((Expr) i.next()).references(var))
+          {
+            return true;
+          }
+      }
+    return false;
+  }
+
   public String toString()
   {
     StringBuffer buf = new StringBuffer();
diff -Naur libjava.orig/gnu/xml/xpath/StringFunction.java libjava/gnu/xml/xpath/StringFunction.java
--- libjava.orig/gnu/xml/xpath/StringFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/StringFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -38,6 +38,7 @@
 package gnu.xml.xpath;
 
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -105,6 +106,11 @@
                               arg.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return (arg == null) ? false : arg.references(var);
+  }
+
   public String toString()
   {
     return (arg == null) ? "string()" : "string(" + arg + ")";
diff -Naur libjava.orig/gnu/xml/xpath/StringLengthFunction.java libjava/gnu/xml/xpath/StringLengthFunction.java
--- libjava.orig/gnu/xml/xpath/StringLengthFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/StringLengthFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -38,6 +38,7 @@
 package gnu.xml.xpath;
 
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -77,6 +78,11 @@
                                     arg.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return (arg == null) ? false : arg.references(var);
+  }
+
   public String toString()
   {
     return (arg == null) ? "string-length()" : "string-length(" + arg + ")";
diff -Naur libjava.orig/gnu/xml/xpath/SubstringAfterFunction.java libjava/gnu/xml/xpath/SubstringAfterFunction.java
--- libjava.orig/gnu/xml/xpath/SubstringAfterFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/SubstringAfterFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -38,6 +38,7 @@
 package gnu.xml.xpath;
 
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -84,6 +85,11 @@
                                       arg2.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return (arg1.references(var) || arg2.references(var));
+  }
+
   public String toString()
   {
     return "substring-after(" + arg1 + "," + arg2 + ")";
diff -Naur libjava.orig/gnu/xml/xpath/SubstringBeforeFunction.java libjava/gnu/xml/xpath/SubstringBeforeFunction.java
--- libjava.orig/gnu/xml/xpath/SubstringBeforeFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/SubstringBeforeFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -38,6 +38,7 @@
 package gnu.xml.xpath;
 
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -83,6 +84,11 @@
                                        arg2.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return (arg1.references(var) || arg2.references(var));
+  }
+
   public String toString()
   {
     return "substring-before(" + arg1 + "," + arg2 + ")";
diff -Naur libjava.orig/gnu/xml/xpath/SubstringFunction.java libjava/gnu/xml/xpath/SubstringFunction.java
--- libjava.orig/gnu/xml/xpath/SubstringFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/SubstringFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -38,6 +38,7 @@
 package gnu.xml.xpath;
 
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -113,6 +114,12 @@
                                  (arg3 == null) ? null : arg3.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return (arg1.references(var) || arg2.references(var) ||
+            (arg3 == null) ? false : arg3.references(var));
+  }
+
   public String toString()
   {
     return (arg3 == null) ? "substring(" + arg1 + "," + arg2 + ")" :
diff -Naur libjava.orig/gnu/xml/xpath/SumFunction.java libjava/gnu/xml/xpath/SumFunction.java
--- libjava.orig/gnu/xml/xpath/SumFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/SumFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -40,6 +40,7 @@
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -86,6 +87,11 @@
     return new SumFunction(arg.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return arg.references(var);
+  }
+
   public String toString()
   {
     return "sum(" + arg + ")";
diff -Naur libjava.orig/gnu/xml/xpath/Test.java libjava/gnu/xml/xpath/Test.java
--- libjava.orig/gnu/xml/xpath/Test.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/Test.java	2005-09-23 19:29:53.000000000 +0200
@@ -37,6 +37,7 @@
 
 package gnu.xml.xpath;
 
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -52,4 +53,6 @@
 
   public abstract Test clone(Object context);
 
+  public abstract boolean references(QName var);
+
 }
diff -Naur libjava.orig/gnu/xml/xpath/TranslateFunction.java libjava/gnu/xml/xpath/TranslateFunction.java
--- libjava.orig/gnu/xml/xpath/TranslateFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/TranslateFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -38,6 +38,7 @@
 package gnu.xml.xpath;
 
 import java.util.List;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -117,6 +118,12 @@
     return new TranslateFunction(arg1.clone(context), arg2.clone(context),
                                  arg3.clone(context));
   }
+
+  public boolean references(QName var)
+  {
+    return (arg1.references(var) || arg2.references(var) ||
+            arg3.references(var));
+  }
   
   public String toString()
   {
diff -Naur libjava.orig/gnu/xml/xpath/TrueFunction.java libjava/gnu/xml/xpath/TrueFunction.java
--- libjava.orig/gnu/xml/xpath/TrueFunction.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/TrueFunction.java	2005-09-23 19:29:53.000000000 +0200
@@ -37,6 +37,7 @@
 
 package gnu.xml.xpath;
 
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -58,6 +59,11 @@
     return new TrueFunction();
   }
 
+  public boolean references(QName var)
+  {
+    return false;
+  }
+
   public String toString()
   {
     return "true()";
diff -Naur libjava.orig/gnu/xml/xpath/UnionExpr.java libjava/gnu/xml/xpath/UnionExpr.java
--- libjava.orig/gnu/xml/xpath/UnionExpr.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/UnionExpr.java	2005-09-23 19:29:53.000000000 +0200
@@ -43,6 +43,7 @@
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
+import javax.xml.namespace.QName;
 import org.w3c.dom.Node;
 
 /**
@@ -94,6 +95,11 @@
     return new UnionExpr(lhs.clone(context), rhs.clone(context));
   }
 
+  public boolean references(QName var)
+  {
+    return (lhs.references(var) || rhs.references(var));
+  }
+
   public String toString()
   {
     return lhs + " | " + rhs;
diff -Naur libjava.orig/gnu/xml/xpath/VariableReference.java libjava/gnu/xml/xpath/VariableReference.java
--- libjava.orig/gnu/xml/xpath/VariableReference.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/VariableReference.java	2005-09-23 19:29:53.000000000 +0200
@@ -47,9 +47,9 @@
 {
 
   final XPathVariableResolver resolver;
-  final String name;
+  final QName name;
 
-  public VariableReference(XPathVariableResolver resolver, String name)
+  public VariableReference(XPathVariableResolver resolver, QName name)
   {
     this.resolver = resolver;
     this.name = name;
@@ -64,8 +64,7 @@
             // Needs context to operate properly
             return ((Bindings) resolver).get(name, context, pos, len);
           }
-        QName qname = QName.valueOf(name);
-        return resolver.resolveVariable(qname);
+        return resolver.resolveVariable(name);
       }
     throw new IllegalStateException("no variable resolver");
   }
@@ -80,9 +79,22 @@
     return new VariableReference(r, name);
   }
 
+  public boolean references(QName var)
+  {
+    return name.equals(var);
+  }
+
   public String toString()
   {
-    return "$" + name;
+    StringBuffer buf = new StringBuffer("$");
+    String prefix = name.getPrefix();
+    if (prefix != null && !"".equals(prefix))
+      {
+        buf.append(prefix);
+        buf.append(':');
+      }
+    buf.append(name.getLocalPart());
+    return buf.toString();
   }
   
 }
diff -Naur libjava.orig/gnu/xml/xpath/XPathParser.java libjava/gnu/xml/xpath/XPathParser.java
--- libjava.orig/gnu/xml/xpath/XPathParser.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/XPathParser.java	2005-09-23 23:30:39.000000000 +0200
@@ -1,8 +1,8 @@
 // created by jay 0.8 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de
 
 					// line 2 "XPathParser.y"
-/* XPathParser.java -- An XPath 1.0 parser.
-   Copyright (C) 2004 Free Software Foundation, Inc.
+/* XPathParser.y - An XPath 1.0 parser.
+   Copyright (C) 2004 The Free Software Foundation
 
 This file is part of GNU Classpath.
 
@@ -38,11 +38,13 @@
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
 
+
 package gnu.xml.xpath;
 
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
+import java.util.Map;
 import javax.xml.namespace.NamespaceContext;
 import javax.xml.namespace.QName;
 import javax.xml.xpath.XPathFunctionResolver;
@@ -205,7 +207,7 @@
     return new FunctionCall(functionResolver, name, args);
   }
 
-					// line 210 "-"
+					// line 211 "-"
 // %token constants
 
   public static final int LITERAL = 257;
@@ -474,13 +476,13 @@
         yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
         switch (yyN) {
 case 4:
-					// line 276 "XPathParser.y"
+					// line 277 "XPathParser.y"
   {
       yyVal = new Root();
     }
   break;
 case 5:
-					// line 280 "XPathParser.y"
+					// line 281 "XPathParser.y"
   {
       Steps steps;
       if (yyVals[0+yyTop] instanceof Steps)
@@ -498,7 +500,7 @@
     }
   break;
 case 6:
-					// line 296 "XPathParser.y"
+					// line 297 "XPathParser.y"
   {
       Test nt = new NodeTypeTest((short) 0);
       Selector s = new Selector(Selector.DESCENDANT_OR_SELF,
@@ -521,7 +523,7 @@
     }
   break;
 case 8:
-					// line 321 "XPathParser.y"
+					// line 322 "XPathParser.y"
   {
       Steps steps;
       if (yyVals[-2+yyTop] instanceof Steps)
@@ -539,7 +541,7 @@
     }
   break;
 case 9:
-					// line 337 "XPathParser.y"
+					// line 338 "XPathParser.y"
   {
       Test nt = new NodeTypeTest((short) 0);
       Selector s = new Selector(Selector.DESCENDANT_OR_SELF,
@@ -562,37 +564,37 @@
     }
   break;
 case 10:
-					// line 361 "XPathParser.y"
+					// line 362 "XPathParser.y"
   {
       yyVal = new Selector (Selector.CHILD, (List) yyVals[0+yyTop]);
     }
   break;
 case 11:
-					// line 365 "XPathParser.y"
+					// line 366 "XPathParser.y"
   {
       yyVal = new Selector (Selector.ATTRIBUTE, (List) yyVals[0+yyTop]);
     }
   break;
 case 12:
-					// line 369 "XPathParser.y"
+					// line 370 "XPathParser.y"
   {
       yyVal = new Selector (((Integer) yyVals[-2+yyTop]).intValue (), (List) yyVals[0+yyTop]);
     }
   break;
 case 13:
-					// line 373 "XPathParser.y"
+					// line 374 "XPathParser.y"
   {
       yyVal = new Selector (Selector.SELF, Collections.EMPTY_LIST);
     }
   break;
 case 14:
-					// line 377 "XPathParser.y"
+					// line 378 "XPathParser.y"
   {
       yyVal = new Selector (Selector.PARENT, Collections.EMPTY_LIST);
     }
   break;
 case 15:
-					// line 384 "XPathParser.y"
+					// line 385 "XPathParser.y"
   {
       List list = new ArrayList();
       list.add(yyVals[0+yyTop]);
@@ -600,7 +602,7 @@
     }
   break;
 case 16:
-					// line 390 "XPathParser.y"
+					// line 391 "XPathParser.y"
   {
       List list = (List)yyVals[-1+yyTop];
       list.add(yyVals[0+yyTop]);
@@ -608,133 +610,133 @@
     }
   break;
 case 17:
-					// line 414 "XPathParser.y"
+					// line 415 "XPathParser.y"
   {
       yyVal = new Integer(Selector.ANCESTOR);
     }
   break;
 case 18:
-					// line 418 "XPathParser.y"
+					// line 419 "XPathParser.y"
   {
       yyVal = new Integer(Selector.ANCESTOR_OR_SELF);
     }
   break;
 case 19:
-					// line 422 "XPathParser.y"
+					// line 423 "XPathParser.y"
   {
       yyVal = new Integer(Selector.ATTRIBUTE);
     }
   break;
 case 20:
-					// line 426 "XPathParser.y"
+					// line 427 "XPathParser.y"
   {
       yyVal = new Integer(Selector.CHILD);
     }
   break;
 case 21:
-					// line 430 "XPathParser.y"
+					// line 431 "XPathParser.y"
   {
       yyVal = new Integer(Selector.DESCENDANT);
     }
   break;
 case 22:
-					// line 434 "XPathParser.y"
+					// line 435 "XPathParser.y"
   {
       yyVal = new Integer(Selector.DESCENDANT_OR_SELF);
     }
   break;
 case 23:
-					// line 438 "XPathParser.y"
+					// line 439 "XPathParser.y"
   {
       yyVal = new Integer(Selector.FOLLOWING);
     }
   break;
 case 24:
-					// line 442 "XPathParser.y"
+					// line 443 "XPathParser.y"
   {
       yyVal = new Integer(Selector.FOLLOWING_SIBLING);
     }
   break;
 case 25:
-					// line 446 "XPathParser.y"
+					// line 447 "XPathParser.y"
   {
       yyVal = new Integer(Selector.NAMESPACE);
     }
   break;
 case 26:
-					// line 450 "XPathParser.y"
+					// line 451 "XPathParser.y"
   {
       yyVal = new Integer(Selector.PARENT);
     }
   break;
 case 27:
-					// line 454 "XPathParser.y"
+					// line 455 "XPathParser.y"
   {
       yyVal = new Integer(Selector.PRECEDING);
     }
   break;
 case 28:
-					// line 458 "XPathParser.y"
+					// line 459 "XPathParser.y"
   {
       yyVal = new Integer(Selector.PRECEDING_SIBLING);
     }
   break;
 case 29:
-					// line 462 "XPathParser.y"
+					// line 463 "XPathParser.y"
   {
       yyVal = new Integer(Selector.SELF);
     }
   break;
 case 31:
-					// line 471 "XPathParser.y"
+					// line 472 "XPathParser.y"
   {
       yyVal = new NodeTypeTest(Node.PROCESSING_INSTRUCTION_NODE, (String) yyVals[-1+yyTop]);
     }
   break;
 case 32:
-					// line 476 "XPathParser.y"
+					// line 477 "XPathParser.y"
   {
       yyVal = new NodeTypeTest(((Short) yyVals[-1+yyTop]).shortValue());
     }
   break;
 case 33:
-					// line 483 "XPathParser.y"
+					// line 484 "XPathParser.y"
   {
       yyVal = new Predicate((Expr) yyVals[-1+yyTop]);
     }
   break;
 case 35:
-					// line 491 "XPathParser.y"
+					// line 492 "XPathParser.y"
   {
       yyVal = new ParenthesizedExpr((Expr) yyVals[-1+yyTop]);
     }
   break;
 case 36:
-					// line 495 "XPathParser.y"
+					// line 496 "XPathParser.y"
   {
       yyVal = new Constant(yyVals[0+yyTop]);
     }
   break;
 case 37:
-					// line 499 "XPathParser.y"
+					// line 500 "XPathParser.y"
   {
       yyVal = new Constant(yyVals[0+yyTop]);
     }
   break;
 case 39:
-					// line 507 "XPathParser.y"
+					// line 508 "XPathParser.y"
   {
       yyVal = lookupFunction((String) yyVals[-2+yyTop], Collections.EMPTY_LIST);
     }
   break;
 case 40:
-					// line 511 "XPathParser.y"
+					// line 512 "XPathParser.y"
   {
       yyVal = lookupFunction((String) yyVals[-3+yyTop], (List) yyVals[-1+yyTop]);
     }
   break;
 case 41:
-					// line 518 "XPathParser.y"
+					// line 519 "XPathParser.y"
   {
       List list = new ArrayList();
       list.add(yyVals[0+yyTop]);
@@ -742,7 +744,7 @@
     }
   break;
 case 42:
-					// line 524 "XPathParser.y"
+					// line 525 "XPathParser.y"
   {
       List list = (List) yyVals[0+yyTop];
       list.add(0, yyVals[-2+yyTop]);
@@ -750,13 +752,13 @@
     }
   break;
 case 44:
-					// line 534 "XPathParser.y"
+					// line 535 "XPathParser.y"
   {
       yyVal = new UnionExpr((Expr) yyVals[-2+yyTop], (Expr) yyVals[0+yyTop]);
     }
   break;
 case 47:
-					// line 543 "XPathParser.y"
+					// line 544 "XPathParser.y"
   {
       Steps steps;
       if (yyVals[0+yyTop] instanceof Steps)
@@ -774,7 +776,7 @@
     }
   break;
 case 48:
-					// line 559 "XPathParser.y"
+					// line 560 "XPathParser.y"
   {
       Test nt = new NodeTypeTest((short) 0);
       Selector s = new Selector(Selector.DESCENDANT_OR_SELF,
@@ -797,7 +799,7 @@
     }
   break;
 case 50:
-					// line 584 "XPathParser.y"
+					// line 585 "XPathParser.y"
   {
       Predicate filter = (Predicate) yyVals[0+yyTop];
       Selector s = new Selector(Selector.SELF,
@@ -818,170 +820,171 @@
     }
   break;
 case 52:
-					// line 607 "XPathParser.y"
+					// line 608 "XPathParser.y"
   {
       yyVal = new OrExpr((Expr) yyVals[-2+yyTop], (Expr) yyVals[0+yyTop]);
     }
   break;
 case 54:
-					// line 615 "XPathParser.y"
+					// line 616 "XPathParser.y"
   {
       yyVal = new AndExpr((Expr) yyVals[-2+yyTop], (Expr) yyVals[0+yyTop]);
     }
   break;
 case 56:
-					// line 623 "XPathParser.y"
+					// line 624 "XPathParser.y"
   {
       yyVal = new EqualityExpr((Expr) yyVals[-2+yyTop], (Expr) yyVals[0+yyTop], false);
     }
   break;
 case 57:
-					// line 627 "XPathParser.y"
+					// line 628 "XPathParser.y"
   {
       yyVal = new EqualityExpr((Expr) yyVals[-2+yyTop], (Expr) yyVals[0+yyTop], true);
     }
   break;
 case 59:
-					// line 635 "XPathParser.y"
+					// line 636 "XPathParser.y"
   {
       yyVal = new RelationalExpr((Expr) yyVals[-2+yyTop], (Expr) yyVals[0+yyTop], true, false);
     }
   break;
 case 60:
-					// line 639 "XPathParser.y"
+					// line 640 "XPathParser.y"
   {
       yyVal = new RelationalExpr((Expr) yyVals[-2+yyTop], (Expr) yyVals[0+yyTop], false, false);
     }
   break;
 case 61:
-					// line 643 "XPathParser.y"
+					// line 644 "XPathParser.y"
   {
       yyVal = new RelationalExpr((Expr) yyVals[-2+yyTop], (Expr) yyVals[0+yyTop], true, true);
     }
   break;
 case 62:
-					// line 647 "XPathParser.y"
+					// line 648 "XPathParser.y"
   {
       yyVal = new RelationalExpr((Expr) yyVals[-2+yyTop], (Expr) yyVals[0+yyTop], false, true);
     }
   break;
 case 64:
-					// line 655 "XPathParser.y"
+					// line 656 "XPathParser.y"
   {
       yyVal = new ArithmeticExpr((Expr) yyVals[-2+yyTop], (Expr) yyVals[0+yyTop], ArithmeticExpr.ADD);
     }
   break;
 case 65:
-					// line 659 "XPathParser.y"
+					// line 660 "XPathParser.y"
   {
       yyVal = new ArithmeticExpr((Expr) yyVals[-2+yyTop], (Expr) yyVals[0+yyTop], ArithmeticExpr.SUBTRACT);
     }
   break;
 case 67:
-					// line 667 "XPathParser.y"
+					// line 668 "XPathParser.y"
   {
       yyVal = new ArithmeticExpr((Expr) yyVals[-2+yyTop], (Expr) yyVals[0+yyTop], ArithmeticExpr.MULTIPLY);
     }
   break;
 case 68:
-					// line 671 "XPathParser.y"
+					// line 672 "XPathParser.y"
   {
       yyVal = new ArithmeticExpr((Expr) yyVals[-2+yyTop], (Expr) yyVals[0+yyTop], ArithmeticExpr.DIVIDE);
     }
   break;
 case 69:
-					// line 675 "XPathParser.y"
+					// line 676 "XPathParser.y"
   {
       yyVal = new ArithmeticExpr((Expr) yyVals[-2+yyTop], (Expr) yyVals[0+yyTop], ArithmeticExpr.MODULO);
     }
   break;
 case 71:
-					// line 683 "XPathParser.y"
+					// line 684 "XPathParser.y"
   {
       yyVal = new NegativeExpr((Expr) yyVals[0+yyTop]);
     }
   break;
 case 72:
-					// line 690 "XPathParser.y"
+					// line 691 "XPathParser.y"
   {
       yyVal = new Double((String) yyVals[0+yyTop] + ".0");
     }
   break;
 case 73:
-					// line 694 "XPathParser.y"
+					// line 695 "XPathParser.y"
   {
       yyVal = new Double((String) yyVals[-1+yyTop] + ".0");
     }
   break;
 case 74:
-					// line 698 "XPathParser.y"
+					// line 699 "XPathParser.y"
   {
       yyVal = new Double((String) yyVals[-2+yyTop] + "." + (String) yyVals[0+yyTop]);
     }
   break;
 case 75:
-					// line 702 "XPathParser.y"
+					// line 703 "XPathParser.y"
   {
       yyVal = new Double("0." + (String) yyVals[0+yyTop]);
     }
   break;
 case 77:
-					// line 731 "XPathParser.y"
+					// line 732 "XPathParser.y"
   {
-      yyVal = new VariableReference(variableResolver, (String) yyVals[0+yyTop]);
+      String name = (String) yyVals[0+yyTop];
+      yyVal = new VariableReference(variableResolver, getQName(name));
     }
   break;
 case 78:
-					// line 738 "XPathParser.y"
+					// line 740 "XPathParser.y"
   {
       yyVal = new NameTest(null, true, true);
     }
   break;
 case 79:
-					// line 742 "XPathParser.y"
+					// line 744 "XPathParser.y"
   {
       QName qName = getQName((String) yyVals[-2+yyTop]);
       yyVal = new NameTest(qName, true, false);
     }
   break;
 case 80:
-					// line 747 "XPathParser.y"
+					// line 749 "XPathParser.y"
   {
       QName qName = getQName((String) yyVals[0+yyTop]);
       yyVal = new NameTest(qName, false, false);
     }
   break;
 case 82:
-					// line 756 "XPathParser.y"
+					// line 758 "XPathParser.y"
   {
       yyVal = (String) yyVals[-2+yyTop] + ':' + (String) yyVals[0+yyTop];
     }
   break;
 case 83:
-					// line 763 "XPathParser.y"
+					// line 765 "XPathParser.y"
   {
       yyVal = new Short(Node.COMMENT_NODE);
     }
   break;
 case 84:
-					// line 767 "XPathParser.y"
+					// line 769 "XPathParser.y"
   {
       yyVal = new Short(Node.TEXT_NODE);
     }
   break;
 case 85:
-					// line 771 "XPathParser.y"
+					// line 773 "XPathParser.y"
   {
       yyVal = new Short(Node.PROCESSING_INSTRUCTION_NODE);
     }
   break;
 case 86:
-					// line 775 "XPathParser.y"
+					// line 777 "XPathParser.y"
   {
       yyVal = new Short((short) 0);
     }
   break;
-					// line 986 "-"
+					// line 988 "-"
         }
         yyTop -= YyLenClass.yyLen[yyN];
         yyState = yyStates[yyTop];
@@ -1455,7 +1458,7 @@
   } /* End of class YyNameClass */
 
 
-					// line 781 "XPathParser.y"
+					// line 783 "XPathParser.y"
 
 }
-					// line 1461 "-"
+					// line 1463 "-"
diff -Naur libjava.orig/gnu/xml/xpath/XPathParser.y libjava/gnu/xml/xpath/XPathParser.y
--- libjava.orig/gnu/xml/xpath/XPathParser.y	2005-09-30 15:45:28.000000000 +0200
+++ libjava/gnu/xml/xpath/XPathParser.y	2005-09-23 23:30:39.000000000 +0200
@@ -1,6 +1,6 @@
 %{
-/* XPathParser.java -- An XPath 1.0 parser.
-   Copyright (C) 2004 Free Software Foundation, Inc.
+/* XPathParser.y - An XPath 1.0 parser.
+   Copyright (C) 2004 The Free Software Foundation
 
 This file is part of GNU Classpath.
 
@@ -36,6 +36,7 @@
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
 
+
 package gnu.xml.xpath;
 
 import java.util.ArrayList;
@@ -729,7 +730,8 @@
 variable_reference:
   DOLLAR qname
     {
-      $$ = new VariableReference(variableResolver, (String) $2);
+      String name = (String) $2;
+      $$ = new VariableReference(variableResolver, getQName(name));
     }
   ;
 
diff -Naur libjava.orig/javax/xml/datatype/DatatypeFactory.java libjava/javax/xml/datatype/DatatypeFactory.java
--- libjava.orig/javax/xml/datatype/DatatypeFactory.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/javax/xml/datatype/DatatypeFactory.java	2005-09-30 19:10:23.000000000 +0200
@@ -91,7 +91,7 @@
 
   /**
    * Returns a new duration.
-   * @param durationInMilliseconds the duration in milliseconds
+   * @param durationInMilliSeconds the duration in milliseconds
    */
   public abstract Duration newDuration(long durationInMilliSeconds);
 
@@ -231,10 +231,6 @@
    * @param isPositive whether the duration is positive
    * @param years the number of years
    * @param months the number of months
-   * @param days the number of days
-   * @param hours the number of hours
-   * @param minutes th number of minutes
-   * @param seconds the number of seconds
    */
   public Duration newDurationYearMonth(boolean isPositive,
                                        BigInteger years,
@@ -254,10 +250,6 @@
    * @param isPositive whether the duration is positive
    * @param years the number of years
    * @param months the number of months
-   * @param days the number of days
-   * @param hours the number of hours
-   * @param minutes th number of minutes
-   * @param seconds the number of seconds
    */
   public Duration newDurationYearMonth(boolean isPositive,
                                        int years,
diff -Naur libjava.orig/javax/xml/namespace/QName.java libjava/javax/xml/namespace/QName.java
--- libjava.orig/javax/xml/namespace/QName.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/javax/xml/namespace/QName.java	2005-09-23 23:30:56.000000000 +0200
@@ -1,5 +1,5 @@
-/* QName.java -- 
-   Copyright (C) 2004, 2005  Free Software Foundation, Inc.
+/* QName.java - An XML qualified name.
+   Copyright (C) 2004 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -7,7 +7,7 @@
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation; either version 2, or (at your option)
 any later version.
-
+ 
 GNU Classpath is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
@@ -35,6 +35,7 @@
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
 
+
 package javax.xml.namespace;
 
 import javax.xml.XMLConstants;
@@ -43,7 +44,7 @@
  * An XML
  * <a href='http://www.w3.org/TR/REC-xml-names/#ns-qualnames'>qualified name</a>.
  *
- * @author (a href='mailto:dog@gnu.org'>Chris Burdess</a)
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
  * @since 1.3
  */
 public class QName
@@ -53,6 +54,7 @@
   private final String localPart;
   private final String prefix;
   private final String qName;
+  int hashCode = -1;
 
   public QName(String namespaceURI, String localPart)
   {
@@ -78,13 +80,13 @@
     this.prefix = prefix;
     
     StringBuffer buf = new StringBuffer();
-    if (namespaceURI != null && namespaceURI.length() > 0)
+    if (namespaceURI.length() > 0)
       {
         buf.append('{');
         buf.append(namespaceURI);
         buf.append('}');
       }
-    if (prefix != null && prefix.length() > 0)
+    if (prefix.length() > 0)
       {
         buf.append(prefix);
         buf.append(':');
@@ -126,7 +128,16 @@
 
   public final int hashCode()
   {
-    return qName.hashCode();
+    if (hashCode == -1)
+      {
+        StringBuffer buf = new StringBuffer();
+        buf.append('{');
+        buf.append(namespaceURI);
+        buf.append('}');
+        buf.append(localPart);
+        hashCode = buf.toString().hashCode();
+      }
+    return hashCode;
   }
 
   public String toString()
diff -Naur libjava.orig/javax/xml/parsers/DocumentBuilder.java libjava/javax/xml/parsers/DocumentBuilder.java
--- libjava.orig/javax/xml/parsers/DocumentBuilder.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/javax/xml/parsers/DocumentBuilder.java	2005-09-30 19:10:40.000000000 +0200
@@ -132,7 +132,7 @@
 
   /**
    * Parse the specified input source and return a DOM Document.
-   * @param is the input source
+   * @param source the input source
    * @exception IllegalArgumentException if the input source is null
    */
   public abstract Document parse(InputSource source) 
diff -Naur libjava.orig/javax/xml/parsers/SAXParser.java libjava/javax/xml/parsers/SAXParser.java
--- libjava.orig/javax/xml/parsers/SAXParser.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/javax/xml/parsers/SAXParser.java	2005-09-30 19:10:53.000000000 +0200
@@ -254,7 +254,7 @@
   /**
    * Parse the specified input source, reporting SAX2 events to the
    * given handler.
-   * @param f an XML file
+   * @param is an XML file
    * @param dh the SAX2 handler
    * @exception IllegalArgumentException if the input source is null
    */
diff -Naur libjava.orig/javax/xml/transform/Source.java libjava/javax/xml/transform/Source.java
--- libjava.orig/javax/xml/transform/Source.java	2005-09-30 15:45:28.000000000 +0200
+++ libjava/javax/xml/transform/Source.java	2005-09-30 19:11:08.000000000 +0200
@@ -48,7 +48,7 @@
   /**
    * Sets the XML system ID for this source.
    * This can be used to resolve external entities in the source.
-   * @param systemID the system ID URI
+   * @param systemId the system ID URI
    */
   public void setSystemId(String systemId);
 
