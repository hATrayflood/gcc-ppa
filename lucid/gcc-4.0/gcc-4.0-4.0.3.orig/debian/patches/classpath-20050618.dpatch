#! /bin/sh -e

# DP: - update classpath awt, swing and xml parser for HTML support in swing.
# DP:   taken from classpath CVS HEAD 2005-06-18.
# DP: - updates for gnu.xml and javax.swing.text.html.

#pdir="-d libjava"
dir="libjava"
if [ $# -eq 3 -a "$2" = '-d' ]; then
    #pdir="-d $3/libjava"
    #dir="$3/libjava"
    pdir="-d $3"
    dir="$3"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p0 < $0
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p0 < $0
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

Index: libjava/gnu/java/awt/Buffers.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/Buffers.java,v
retrieving revision 1.3
diff -u -r1.3 Buffers.java
--- libjava/gnu/java/awt/Buffers.java	20 Apr 2004 08:37:47 -0000	1.3
+++ libjava/gnu/java/awt/Buffers.java	9 Jul 2005 22:09:34 -0000
@@ -1,4 +1,5 @@
-/* Copyright (C) 2000, 2002, 2004  Free Software Foundation
+/* Buffers.java --
+   Copyright (C) 2000, 2002, 2004  Free Software Foundation
 
 This file is part of GNU Classpath.
 
@@ -34,9 +35,16 @@
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
 
+
 package gnu.java.awt;
 
-import java.awt.image.*;
+import java.awt.image.DataBuffer;
+import java.awt.image.DataBufferByte;
+import java.awt.image.DataBufferDouble;
+import java.awt.image.DataBufferFloat;
+import java.awt.image.DataBufferInt;
+import java.awt.image.DataBufferShort;
+import java.awt.image.DataBufferUShort;
 
 /** 
  * Utility class for creating and accessing data buffers of arbitrary
Index: libjava/gnu/java/awt/ComponentDataBlitOp.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/ComponentDataBlitOp.java,v
retrieving revision 1.4
diff -u -r1.4 ComponentDataBlitOp.java
--- libjava/gnu/java/awt/ComponentDataBlitOp.java	29 Jul 2004 09:30:18 -0000	1.4
+++ libjava/gnu/java/awt/ComponentDataBlitOp.java	9 Jul 2005 22:09:34 -0000
@@ -53,7 +53,7 @@
  * @throws java.lang.ClassCastException if the sample models of the
  * rasters are not of type ComponentSampleModel.
  * 
- * @author Rolf W. Rasmussen <rolfwr@ii.uib.no>
+ * @author Rolf W. Rasmussen (rolfwr@ii.uib.no)
  */
 public class ComponentDataBlitOp implements RasterOp
 {
Index: libjava/gnu/java/awt/EmbeddedWindowSupport.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/EmbeddedWindowSupport.java,v
retrieving revision 1.3
diff -u -r1.3 EmbeddedWindowSupport.java
--- libjava/gnu/java/awt/EmbeddedWindowSupport.java	11 Oct 2003 17:10:03 -0000	1.3
+++ libjava/gnu/java/awt/EmbeddedWindowSupport.java	9 Jul 2005 22:09:34 -0000
@@ -51,7 +51,7 @@
  * @see gnu.java.awt.EmbeddedWindow
  * @see java.awt.Toolkit
  *
- * @author Michael Koch <konqueror@gmx.de>
+ * @author Michael Koch (konqueror@gmx.de)
  */
 public interface EmbeddedWindowSupport
 {
Index: libjava/gnu/java/awt/GradientPaintContext.java
===================================================================
RCS file: libjava/gnu/java/awt/GradientPaintContext.java
diff -N libjava/gnu/java/awt/GradientPaintContext.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/java/awt/GradientPaintContext.java	9 Jul 2005 22:09:34 -0000
@@ -0,0 +1,164 @@
+/* GradientPaintContext.java -- 
+   Copyright (C) 2005, Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.java.awt;
+
+import java.awt.geom.Point2D;
+import java.awt.image.ColorModel;
+import java.awt.image.Raster;
+import java.awt.image.WritableRaster;
+import java.awt.PaintContext;
+import java.awt.Color;
+
+/**
+ * A {@link PaintContext} used by the {@link GradientPaint} class.
+ */
+public class GradientPaintContext implements PaintContext 
+{
+
+  // This implementation follows the technique described in 
+  // "Java(tm) 2D Graphics" by Jonathan Knudsen (O'Reilly 1999).
+    
+  /** The x-coordinate of the anchor point for color 1. */
+  private final float x1;
+    
+  /** The y-coordinate of the anchor point for color 1. */
+  private final float y1;
+    
+  /** Color 1. */
+  private final Color c1;
+    
+  /** The x-coordinate of the anchor point for color 2. */
+  private final float x2;
+    
+  /** The y-coordinate of the anchor point for color 2. */
+  private final float y2;
+    
+  /** Color 2. */
+  private final Color c2;
+    
+  /** A flag indicating whether the gradient is cyclic or acyclic. */
+  private final boolean cyclic;
+    
+  /** The length of the gradient line - computed from the two anchor points. */
+  private final double length; 
+
+  /**
+   * Creates a new instance.
+   * 
+   * @param x1  the x-coordinate for the anchor point for color 1.
+   * @param y1  the y-coordinate for the anchor point for color 1.
+   * @param c1  color 1.
+   * @param x2  the x-coordinate for the anchor point for color 2.
+   * @param y2  the y-coordinate for the anchor point for color 2.
+   * @param c2  color 2.
+   * @param cyclic  a flag that determines whether the gradient is cyclic
+   *                or acyclic.
+   */
+  public GradientPaintContext(float x1, float y1, Color c1, 
+                              float x2, float y2, Color c2, boolean cyclic) 
+  {     
+    this.x1 = x1;
+    this.y1 = y1;
+    this.c1 = c1;
+    this.x2 = x2;
+    this.y2 = y2;
+    this.c2 = c2;
+    this.cyclic = cyclic;
+    length = Point2D.distance(x1, y1, x2, y2);
+  }
+    
+  /**
+   * Return the color model of this context. It may be different from the
+   * hint specified during createContext, as not all contexts can generate
+   * color patterns in an arbitrary model.
+   *
+   * @return the context color model
+   */
+  public ColorModel getColorModel() 
+  {
+    return ColorModel.getRGBdefault();   
+  }
+
+  /**
+   * Return a raster containing the colors for the graphics operation.
+   *
+   * @param x the x-coordinate, in device space
+   * @param y the y-coordinate, in device space
+   * @param w the width, in device space
+   * @param h the height, in device space
+   * @return a raster for the given area and color
+   */
+  public Raster getRaster(int x, int y, int w, int h) {
+    ColorModel cm = getColorModel();
+    WritableRaster raster = cm.createCompatibleWritableRaster(w, h);
+    int[] data = new int[w * h * 4];
+    double pd2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
+    for (int r = 0; r < h; r++) {
+      for (int c = 0; c < w; c++) {
+        double u = 0.0;
+        if (pd2 != 0) 
+          u = (((x + c) - x1) * (x2 - x1) + ((y + r) - y1) * (y2 - y1)) 
+                  / Math.sqrt(pd2);
+        double ratio = u / length;
+        if (cyclic)
+          ratio = Math.abs(ratio - Math.floor((ratio + 1.0) / 2.0) * 2.0);
+        else 
+          ratio = Math.max(0.0, Math.min(1.0, ratio));
+        int base = (r * w + c) * 4;
+        data[base] = (int) (c1.getRed() + ratio * (c2.getRed() - c1.getRed()));
+        data[base + 1] 
+          = (int) (c1.getGreen() + ratio * (c2.getGreen() - c1.getGreen()));
+        data[base + 2] 
+          = (int) (c1.getBlue() + ratio * (c2.getBlue() - c1.getBlue()));
+        data[base + 3] 
+          = (int) (c1.getAlpha() + ratio * (c2.getAlpha() - c1.getAlpha()));
+      }
+    }
+    raster.setPixels(0, 0, w, h, data);
+    return raster;
+  }
+
+  /**
+   * Release the resources allocated for the paint (none in this 
+   * implementation).
+   */
+  public void dispose() {
+    // nothing to do    
+  }
+    
+}
Index: libjava/gnu/java/awt/color/CieXyzConverter.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/color/CieXyzConverter.java,v
retrieving revision 1.2
diff -u -r1.2 CieXyzConverter.java
--- libjava/gnu/java/awt/color/CieXyzConverter.java	30 Nov 2004 23:58:32 -0000	1.2
+++ libjava/gnu/java/awt/color/CieXyzConverter.java	9 Jul 2005 22:09:34 -0000
@@ -1,40 +1,39 @@
 /* CieXyzConverter.java -- CieXyz conversion class
    Copyright (C) 2004 Free Software Foundation
 
-   This file is part of GNU Classpath.
+This file is part of GNU Classpath.
 
-   GNU Classpath is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
-   GNU Classpath is distributed in the hope that it will be useful, but
-   WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
-
-   Linking this library statically or dynamically with other modules is
-   making a combined work based on this library.  Thus, the terms and
-   conditions of the GNU General Public License cover the whole
-   combination.
-
-   As a special exception, the copyright holders of this library give you
-   permission to link this library with independent modules to produce an
-   executable, regardless of the license terms of these independent
-   modules, and to copy and distribute the resulting executable under
-   terms of your choice, provided that you also meet, for each linked
-   independent module, the terms and conditions of the license of that
-   module.  An independent module is a module which is not derived from
-   or based on this library.  If you modify this library, you may extend
-   this exception to your version of the library, but you are not
-   obligated to do so.  If you do not wish to do so, delete this
-   exception statement from your version.
-*/
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
 
 package gnu.java.awt.color;
 
Index: libjava/gnu/java/awt/color/ClutProfileConverter.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/color/ClutProfileConverter.java,v
retrieving revision 1.3
diff -u -r1.3 ClutProfileConverter.java
--- libjava/gnu/java/awt/color/ClutProfileConverter.java	16 Feb 2005 20:01:16 -0000	1.3
+++ libjava/gnu/java/awt/color/ClutProfileConverter.java	9 Jul 2005 22:09:34 -0000
@@ -1,40 +1,39 @@
 /* ClutProfileConverter.java -- Conversion routines for CLUT-Based profiles
    Copyright (C) 2004 Free Software Foundation
 
-   This file is part of GNU Classpath.
+This file is part of GNU Classpath.
 
-   GNU Classpath is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
-   GNU Classpath is distributed in the hope that it will be useful, but
-   WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
-
-   Linking this library statically or dynamically with other modules is
-   making a combined work based on this library.  Thus, the terms and
-   conditions of the GNU General Public License cover the whole
-   combination.
-
-   As a special exception, the copyright holders of this library give you
-   permission to link this library with independent modules to produce an
-   executable, regardless of the license terms of these independent
-   modules, and to copy and distribute the resulting executable under
-   terms of your choice, provided that you also meet, for each linked
-   independent module, the terms and conditions of the license of that
-   module.  An independent module is a module which is not derived from
-   or based on this library.  If you modify this library, you may extend
-   this exception to your version of the library, but you are not
-   obligated to do so.  If you do not wish to do so, delete this
-   exception statement from your version.
-*/
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
 
 package gnu.java.awt.color;
 
Index: libjava/gnu/java/awt/color/ColorLookUpTable.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/color/ColorLookUpTable.java,v
retrieving revision 1.2
diff -u -r1.2 ColorLookUpTable.java
--- libjava/gnu/java/awt/color/ColorLookUpTable.java	30 Nov 2004 23:58:32 -0000	1.2
+++ libjava/gnu/java/awt/color/ColorLookUpTable.java	9 Jul 2005 22:09:34 -0000
@@ -1,40 +1,39 @@
 /* ColorLookUpTable.java -- ICC v2 CLUT
    Copyright (C) 2004 Free Software Foundation
 
-   This file is part of GNU Classpath.
+This file is part of GNU Classpath.
 
-   GNU Classpath is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
-   GNU Classpath is distributed in the hope that it will be useful, but
-   WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
-
-   Linking this library statically or dynamically with other modules is
-   making a combined work based on this library.  Thus, the terms and
-   conditions of the GNU General Public License cover the whole
-   combination.
-
-   As a special exception, the copyright holders of this library give you
-   permission to link this library with independent modules to produce an
-   executable, regardless of the license terms of these independent
-   modules, and to copy and distribute the resulting executable under
-   terms of your choice, provided that you also meet, for each linked
-   independent module, the terms and conditions of the license of that
-   module.  An independent module is a module which is not derived from
-   or based on this library.  If you modify this library, you may extend
-   this exception to your version of the library, but you are not
-   obligated to do so.  If you do not wish to do so, delete this
-   exception statement from your version.
-*/
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
 
 package gnu.java.awt.color;
 
Index: libjava/gnu/java/awt/color/ColorSpaceConverter.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/color/ColorSpaceConverter.java,v
retrieving revision 1.2
diff -u -r1.2 ColorSpaceConverter.java
--- libjava/gnu/java/awt/color/ColorSpaceConverter.java	30 Nov 2004 23:58:32 -0000	1.2
+++ libjava/gnu/java/awt/color/ColorSpaceConverter.java	9 Jul 2005 22:09:34 -0000
@@ -1,40 +1,39 @@
 /* ColorSpaceConverter.java -- an interface for colorspace conversion
    Copyright (C) 2004 Free Software Foundation
 
-   This file is part of GNU Classpath.
+This file is part of GNU Classpath.
 
-   GNU Classpath is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
-   GNU Classpath is distributed in the hope that it will be useful, but
-   WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
-
-   Linking this library statically or dynamically with other modules is
-   making a combined work based on this library.  Thus, the terms and
-   conditions of the GNU General Public License cover the whole
-   combination.
-
-   As a special exception, the copyright holders of this library give you
-   permission to link this library with independent modules to produce an
-   executable, regardless of the license terms of these independent
-   modules, and to copy and distribute the resulting executable under
-   terms of your choice, provided that you also meet, for each linked
-   independent module, the terms and conditions of the license of that
-   module.  An independent module is a module which is not derived from
-   or based on this library.  If you modify this library, you may extend
-   this exception to your version of the library, but you are not
-   obligated to do so.  If you do not wish to do so, delete this
-   exception statement from your version.
-*/
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
 
 package gnu.java.awt.color;
 
Index: libjava/gnu/java/awt/color/GrayProfileConverter.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/color/GrayProfileConverter.java,v
retrieving revision 1.2
diff -u -r1.2 GrayProfileConverter.java
--- libjava/gnu/java/awt/color/GrayProfileConverter.java	30 Nov 2004 23:58:32 -0000	1.2
+++ libjava/gnu/java/awt/color/GrayProfileConverter.java	9 Jul 2005 22:09:34 -0000
@@ -1,47 +1,46 @@
 /* GrayProfileConverter.java -- Gray profile conversion class
    Copyright (C) 2004 Free Software Foundation
 
-   This file is part of GNU Classpath.
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
 
-   GNU Classpath is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
-   GNU Classpath is distributed in the hope that it will be useful, but
-   WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
-
-   Linking this library statically or dynamically with other modules is
-   making a combined work based on this library.  Thus, the terms and
-   conditions of the GNU General Public License cover the whole
-   combination.
-
-   As a special exception, the copyright holders of this library give you
-   permission to link this library with independent modules to produce an
-   executable, regardless of the license terms of these independent
-   modules, and to copy and distribute the resulting executable under
-   terms of your choice, provided that you also meet, for each linked
-   independent module, the terms and conditions of the license of that
-   module.  An independent module is a module which is not derived from
-   or based on this library.  If you modify this library, you may extend
-   this exception to your version of the library, but you are not
-   obligated to do so.  If you do not wish to do so, delete this
-   exception statement from your version.
-*/
 
 package gnu.java.awt.color;
 
-import java.awt.color.ProfileDataException;
 import java.awt.color.ICC_Profile;
 import java.awt.color.ICC_ProfileGray;
-
+import java.awt.color.ProfileDataException;
 
 /**
  * GrayProfileConverter - converts Grayscale profiles (ICC_ProfileGray)
Index: libjava/gnu/java/awt/color/GrayScaleConverter.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/color/GrayScaleConverter.java,v
retrieving revision 1.2
diff -u -r1.2 GrayScaleConverter.java
--- libjava/gnu/java/awt/color/GrayScaleConverter.java	30 Nov 2004 23:58:32 -0000	1.2
+++ libjava/gnu/java/awt/color/GrayScaleConverter.java	9 Jul 2005 22:09:34 -0000
@@ -1,40 +1,39 @@
 /* GrayScaleConverter.java -- Linear grayscale conversion class
    Copyright (C) 2004 Free Software Foundation
 
-   This file is part of GNU Classpath.
+This file is part of GNU Classpath.
 
-   GNU Classpath is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
-   GNU Classpath is distributed in the hope that it will be useful, but
-   WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
-
-   Linking this library statically or dynamically with other modules is
-   making a combined work based on this library.  Thus, the terms and
-   conditions of the GNU General Public License cover the whole
-   combination.
-
-   As a special exception, the copyright holders of this library give you
-   permission to link this library with independent modules to produce an
-   executable, regardless of the license terms of these independent
-   modules, and to copy and distribute the resulting executable under
-   terms of your choice, provided that you also meet, for each linked
-   independent module, the terms and conditions of the license of that
-   module.  An independent module is a module which is not derived from
-   or based on this library.  If you modify this library, you may extend
-   this exception to your version of the library, but you are not
-   obligated to do so.  If you do not wish to do so, delete this
-   exception statement from your version.
-*/
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
 
 package gnu.java.awt.color;
 
Index: libjava/gnu/java/awt/color/LinearRGBConverter.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/color/LinearRGBConverter.java,v
retrieving revision 1.2
diff -u -r1.2 LinearRGBConverter.java
--- libjava/gnu/java/awt/color/LinearRGBConverter.java	30 Nov 2004 23:58:32 -0000	1.2
+++ libjava/gnu/java/awt/color/LinearRGBConverter.java	9 Jul 2005 22:09:34 -0000
@@ -1,39 +1,39 @@
 /* LinearRGBConverter.java -- conversion to a linear RGB color space
    Copyright (C) 2004 Free Software Foundation
 
-   This file is part of GNU Classpath.
+This file is part of GNU Classpath.
 
-   GNU Classpath is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
-   GNU Classpath is distributed in the hope that it will be useful, but
-   WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
-
-   Linking this library statically or dynamically with other modules is
-   making a combined work based on this library.  Thus, the terms and
-   conditions of the GNU General Public License cover the whole
-   combination.
-
-   As a special exception, the copyright holders of this library give you
-   permission to link this library with independent modules to produce an
-   executable, regardless of the license terms of these independent
-   modules, and to copy and distribute the resulting executable under
-   terms of your choice, provided that you also meet, for each linked
-   independent module, the terms and conditions of the license of that
-   module.  An independent module is a module which is not derived from
-   or based on this library.  If you modify this library, you may extend
-   this exception to your version of the library, but you are not
-   obligated to do so.  If you do not wish to do so, delete this
-   exception statement from your version. */
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
 
 package gnu.java.awt.color;
 
Index: libjava/gnu/java/awt/color/ProfileHeader.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/color/ProfileHeader.java,v
retrieving revision 1.2
diff -u -r1.2 ProfileHeader.java
--- libjava/gnu/java/awt/color/ProfileHeader.java	30 Nov 2004 23:58:32 -0000	1.2
+++ libjava/gnu/java/awt/color/ProfileHeader.java	9 Jul 2005 22:09:34 -0000
@@ -1,40 +1,39 @@
 /* ProfileHeader.java -- Encapsules ICC Profile header data
    Copyright (C) 2004 Free Software Foundation
 
-   This file is part of GNU Classpath.
+This file is part of GNU Classpath.
 
-   GNU Classpath is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
-   GNU Classpath is distributed in the hope that it will be useful, but
-   WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
-
-   Linking this library statically or dynamically with other modules is
-   making a combined work based on this library.  Thus, the terms and
-   conditions of the GNU General Public License cover the whole
-   combination.
-
-   As a special exception, the copyright holders of this library give you
-   permission to link this library with independent modules to produce an
-   executable, regardless of the license terms of these independent
-   modules, and to copy and distribute the resulting executable under
-   terms of your choice, provided that you also meet, for each linked
-   independent module, the terms and conditions of the license of that
-   module.  An independent module is a module which is not derived from
-   or based on this library.  If you modify this library, you may extend
-   this exception to your version of the library, but you are not
-   obligated to do so.  If you do not wish to do so, delete this
-   exception statement from your version.
-*/
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
 
 package gnu.java.awt.color;
 
Index: libjava/gnu/java/awt/color/PyccConverter.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/color/PyccConverter.java,v
retrieving revision 1.2
diff -u -r1.2 PyccConverter.java
--- libjava/gnu/java/awt/color/PyccConverter.java	30 Nov 2004 23:58:32 -0000	1.2
+++ libjava/gnu/java/awt/color/PyccConverter.java	9 Jul 2005 22:09:34 -0000
@@ -1,40 +1,39 @@
 /* PyccConverter.java -- PhotoYCC conversion class
    Copyright (C) 2004 Free Software Foundation
 
-   This file is part of GNU Classpath.
+This file is part of GNU Classpath.
 
-   GNU Classpath is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
-   GNU Classpath is distributed in the hope that it will be useful, but
-   WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
-
-   Linking this library statically or dynamically with other modules is
-   making a combined work based on this library.  Thus, the terms and
-   conditions of the GNU General Public License cover the whole
-   combination.
-
-   As a special exception, the copyright holders of this library give you
-   permission to link this library with independent modules to produce an
-   executable, regardless of the license terms of these independent
-   modules, and to copy and distribute the resulting executable under
-   terms of your choice, provided that you also meet, for each linked
-   independent module, the terms and conditions of the license of that
-   module.  An independent module is a module which is not derived from
-   or based on this library.  If you modify this library, you may extend
-   this exception to your version of the library, but you are not
-   obligated to do so.  If you do not wish to do so, delete this
-   exception statement from your version.
-*/
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
 
 package gnu.java.awt.color;
 
Index: libjava/gnu/java/awt/color/RgbProfileConverter.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/color/RgbProfileConverter.java,v
retrieving revision 1.2
diff -u -r1.2 RgbProfileConverter.java
--- libjava/gnu/java/awt/color/RgbProfileConverter.java	30 Nov 2004 23:58:32 -0000	1.2
+++ libjava/gnu/java/awt/color/RgbProfileConverter.java	9 Jul 2005 22:09:34 -0000
@@ -1,47 +1,46 @@
 /* RgbProfileConverter.java -- RGB Profile conversion class
    Copyright (C) 2004 Free Software Foundation
 
-   This file is part of GNU Classpath.
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
 
-   GNU Classpath is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
-   GNU Classpath is distributed in the hope that it will be useful, but
-   WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
-
-   Linking this library statically or dynamically with other modules is
-   making a combined work based on this library.  Thus, the terms and
-   conditions of the GNU General Public License cover the whole
-   combination.
-
-   As a special exception, the copyright holders of this library give you
-   permission to link this library with independent modules to produce an
-   executable, regardless of the license terms of these independent
-   modules, and to copy and distribute the resulting executable under
-   terms of your choice, provided that you also meet, for each linked
-   independent module, the terms and conditions of the license of that
-   module.  An independent module is a module which is not derived from
-   or based on this library.  If you modify this library, you may extend
-   this exception to your version of the library, but you are not
-   obligated to do so.  If you do not wish to do so, delete this
-   exception statement from your version.
-*/
 
 package gnu.java.awt.color;
 
-import java.awt.color.ProfileDataException;
 import java.awt.color.ICC_Profile;
 import java.awt.color.ICC_ProfileRGB;
-
+import java.awt.color.ProfileDataException;
 
 /**
  * RgbProfileConverter - converts RGB profiles (ICC_ProfileRGB)
@@ -49,7 +48,7 @@
  * This type of profile contains a matrix and three
  * tone reproduction curves (TRCs).
  *
- * Device RGB --> CIE XYZ is done through first multiplying with
+ * Device RGB --&gt; CIE XYZ is done through first multiplying with
  * a matrix, then each component is looked-up against it's TRC.
  *
  * The opposite transform is done using the inverse of the matrix,
Index: libjava/gnu/java/awt/color/SrgbConverter.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/color/SrgbConverter.java,v
retrieving revision 1.2
diff -u -r1.2 SrgbConverter.java
--- libjava/gnu/java/awt/color/SrgbConverter.java	30 Nov 2004 23:58:32 -0000	1.2
+++ libjava/gnu/java/awt/color/SrgbConverter.java	9 Jul 2005 22:09:34 -0000
@@ -1,40 +1,39 @@
 /* SrgbConverter.java -- sRGB conversion class
    Copyright (C) 2004 Free Software Foundation
 
-   This file is part of GNU Classpath.
+This file is part of GNU Classpath.
 
-   GNU Classpath is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
-   GNU Classpath is distributed in the hope that it will be useful, but
-   WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
-
-   Linking this library statically or dynamically with other modules is
-   making a combined work based on this library.  Thus, the terms and
-   conditions of the GNU General Public License cover the whole
-   combination.
-
-   As a special exception, the copyright holders of this library give you
-   permission to link this library with independent modules to produce an
-   executable, regardless of the license terms of these independent
-   modules, and to copy and distribute the resulting executable under
-   terms of your choice, provided that you also meet, for each linked
-   independent module, the terms and conditions of the license of that
-   module.  An independent module is a module which is not derived from
-   or based on this library.  If you modify this library, you may extend
-   this exception to your version of the library, but you are not
-   obligated to do so.  If you do not wish to do so, delete this
-   exception statement from your version.
-*/
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
 
 package gnu.java.awt.color;
 
Index: libjava/gnu/java/awt/color/TagEntry.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/color/TagEntry.java,v
retrieving revision 1.2
diff -u -r1.2 TagEntry.java
--- libjava/gnu/java/awt/color/TagEntry.java	30 Nov 2004 23:58:32 -0000	1.2
+++ libjava/gnu/java/awt/color/TagEntry.java	9 Jul 2005 22:09:34 -0000
@@ -1,40 +1,39 @@
 /* TagEntry.java -- A utility class used for storing the tags in ICC_Profile
    Copyright (C) 2004 Free Software Foundation
 
-   This file is part of GNU Classpath.
+This file is part of GNU Classpath.
 
-   GNU Classpath is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
-   GNU Classpath is distributed in the hope that it will be useful, but
-   WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
-
-   Linking this library statically or dynamically with other modules is
-   making a combined work based on this library.  Thus, the terms and
-   conditions of the GNU General Public License cover the whole
-   combination.
-
-   As a special exception, the copyright holders of this library give you
-   permission to link this library with independent modules to produce an
-   executable, regardless of the license terms of these independent
-   modules, and to copy and distribute the resulting executable under
-   terms of your choice, provided that you also meet, for each linked
-   independent module, the terms and conditions of the license of that
-   module.  An independent module is a module which is not derived from
-   or based on this library.  If you modify this library, you may extend
-   this exception to your version of the library, but you are not
-   obligated to do so.  If you do not wish to do so, delete this
-   exception statement from your version.
-*/
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
 
 package gnu.java.awt.color;
 
Index: libjava/gnu/java/awt/color/ToneReproductionCurve.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/color/ToneReproductionCurve.java,v
retrieving revision 1.2
diff -u -r1.2 ToneReproductionCurve.java
--- libjava/gnu/java/awt/color/ToneReproductionCurve.java	30 Nov 2004 23:58:32 -0000	1.2
+++ libjava/gnu/java/awt/color/ToneReproductionCurve.java	9 Jul 2005 22:09:34 -0000
@@ -1,40 +1,39 @@
 /* ToneReproductionCurve.java -- Representation of an ICC 'curv' type TRC
    Copyright (C) 2004 Free Software Foundation
 
-   This file is part of GNU Classpath.
+This file is part of GNU Classpath.
 
-   GNU Classpath is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
-   GNU Classpath is distributed in the hope that it will be useful, but
-   WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-   General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
-
-   Linking this library statically or dynamically with other modules is
-   making a combined work based on this library.  Thus, the terms and
-   conditions of the GNU General Public License cover the whole
-   combination.
-
-   As a special exception, the copyright holders of this library give you
-   permission to link this library with independent modules to produce an
-   executable, regardless of the license terms of these independent
-   modules, and to copy and distribute the resulting executable under
-   terms of your choice, provided that you also meet, for each linked
-   independent module, the terms and conditions of the license of that
-   module.  An independent module is a module which is not derived from
-   or based on this library.  If you modify this library, you may extend
-   this exception to your version of the library, but you are not
-   obligated to do so.  If you do not wish to do so, delete this
-   exception statement from your version.
-*/
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
 
 package gnu.java.awt.color;
 
Index: libjava/gnu/java/awt/image/ImageDecoder.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/image/ImageDecoder.java,v
retrieving revision 1.6
diff -u -r1.6 ImageDecoder.java
--- libjava/gnu/java/awt/image/ImageDecoder.java	16 Feb 2005 20:01:17 -0000	1.6
+++ libjava/gnu/java/awt/image/ImageDecoder.java	9 Jul 2005 22:09:34 -0000
@@ -1,4 +1,4 @@
-/* ImageDecoder.java
+/* ImageDecoder.java --
    Copyright (C) 1999, 2000, 2004  Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
@@ -41,8 +41,8 @@
 import java.awt.image.ImageProducer;
 import java.io.ByteArrayInputStream;
 import java.io.FileInputStream;
-import java.io.InputStream;
 import java.io.IOException;
+import java.io.InputStream;
 import java.net.URL;
 import java.util.Vector;
 
Index: libjava/gnu/java/awt/image/XBMDecoder.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/image/XBMDecoder.java,v
retrieving revision 1.3
diff -u -r1.3 XBMDecoder.java
--- libjava/gnu/java/awt/image/XBMDecoder.java	30 Nov 2004 23:58:33 -0000	1.3
+++ libjava/gnu/java/awt/image/XBMDecoder.java	9 Jul 2005 22:09:34 -0000
@@ -1,4 +1,4 @@
-/* XBMDecoder -- Decodes X-bitmaps
+/* XBMDecoder.java -- Decodes X-bitmaps
    Copyright (C) 1999, 2004  Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
@@ -41,9 +41,9 @@
 import java.awt.image.ColorModel;
 import java.awt.image.ImageConsumer;
 import java.io.BufferedReader;
+import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
-import java.io.IOException;
 import java.io.Reader;
 import java.net.URL;
 import java.util.StringTokenizer;
@@ -121,7 +121,7 @@
       }
   }    
 
-  static public int[] getScanline (Reader in, int len) throws IOException
+  public static int[] getScanline (Reader in, int len) throws IOException
   {
     char byteStr[] = new char[2];
     int scanline[] = new int[len];
Index: libjava/gnu/java/awt/peer/ClasspathFontPeer.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/peer/ClasspathFontPeer.java,v
retrieving revision 1.5
diff -u -r1.5 ClasspathFontPeer.java
--- libjava/gnu/java/awt/peer/ClasspathFontPeer.java	30 Nov 2004 23:58:34 -0000	1.5
+++ libjava/gnu/java/awt/peer/ClasspathFontPeer.java	9 Jul 2005 22:09:34 -0000
@@ -38,14 +38,24 @@
 
 package gnu.java.awt.peer;
 
-import java.awt.*;
-import java.awt.peer.*;
-import java.awt.font.*;
-import java.awt.geom.*;
-import java.text.*;
-import java.util.*;
-import gnu.java.awt.*;
+import gnu.java.awt.ClasspathToolkit;
 
+import java.awt.Font;
+import java.awt.FontMetrics;
+import java.awt.Toolkit;
+import java.awt.font.FontRenderContext;
+import java.awt.font.GlyphVector;
+import java.awt.font.LineMetrics;
+import java.awt.font.TextAttribute;
+import java.awt.font.TransformAttribute;
+import java.awt.geom.AffineTransform;
+import java.awt.geom.Rectangle2D;
+import java.awt.peer.FontPeer;
+import java.text.AttributedCharacterIterator;
+import java.text.CharacterIterator;
+import java.util.HashMap;
+import java.util.Locale;
+import java.util.Map;
 
 /**
  * A peer for fonts that are used inside Classpath. The purpose of
Index: libjava/gnu/java/awt/peer/gtk/GdkGraphics.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/peer/gtk/GdkGraphics.java,v
retrieving revision 1.10
diff -u -r1.10 GdkGraphics.java
--- libjava/gnu/java/awt/peer/gtk/GdkGraphics.java	17 Feb 2005 07:48:22 -0000	1.10
+++ libjava/gnu/java/awt/peer/gtk/GdkGraphics.java	9 Jul 2005 22:09:35 -0000
@@ -58,6 +58,7 @@
   GtkComponentPeer component;
   Font font;
   Rectangle clip;
+  GtkImage image; 
 
   int xOffset = 0;
   int yOffset = 0;
@@ -66,6 +67,7 @@
 
   native void initState (GtkComponentPeer component);
   native void initState (int width, int height);
+  native void initFromImage (GtkImage image);
   native void copyState (GdkGraphics g);
 
   GdkGraphics (GdkGraphics g)
@@ -87,10 +89,21 @@
     font = new Font ("Dialog", Font.PLAIN, 12);
   }
 
+  GdkGraphics (GtkImage image)
+  {
+    this.image = image;
+    initFromImage (image);
+    color = Color.black;
+    clip = new Rectangle (0, 0, 
+			  image.getWidth(null), image.getHeight(null));
+    font = new Font ("Dialog", Font.PLAIN, 12);
+  }
+
   GdkGraphics (GtkComponentPeer component)
   {
     this.component = component;
     font = component.awtComponent.getFont ();
+    color = Color.black;
 
     if (component.isRealized ())
       initComponentGraphics ();
@@ -129,191 +142,57 @@
 
   public native void dispose();
 
-  native void copyPixmap (Graphics g, int x, int y, int width, int height);
-  native void copyAndScalePixmap (Graphics g, boolean flip_x, boolean flip_y,
-                                  int src_x, int src_y, 
-                                  int src_width, int src_height, 
-                                  int dest_x, int dest_y, 
-                                  int dest_width, int dest_height);
   public boolean drawImage (Image img, int x, int y, 
 			    Color bgcolor, ImageObserver observer)
   {
-    if (component != null && ! component.isRealized ())
-      return false;
-
-    if (img instanceof GtkOffScreenImage)
-      {
-        int width = img.getWidth (null);
-        int height = img.getHeight (null);
-	copyPixmap (img.getGraphics (), 
-		    x, y, width, height);
-        // FIXME: need to differentiate between SOMEBITS and FRAMEBITS.
-        if (observer != null)
-          observer.imageUpdate (img,
-                                ImageObserver.FRAMEBITS,
-                                x, y, width, height);
-	return true;
-      }
-
-    GtkImage image = (GtkImage) img;
-    new GtkImagePainter (image, this, x, y, -1, -1, bgcolor, observer);
-    return image.isLoaded ();
+    return drawImage(img, x, y, img.getWidth(null), img.getHeight(null),
+		     bgcolor, observer);
   }
 
   public boolean drawImage (Image img, int x, int y, ImageObserver observer)
   {
-    if (component != null && ! component.isRealized ())
-      return false;
-
-    if (img instanceof GtkOffScreenImage)
-      {
-        int width = img.getWidth (null);
-        int height = img.getHeight (null);
-	copyPixmap (img.getGraphics (), 
-		    x, y, width, height);
-
-        // FIXME: need to differentiate between SOMEBITS and FRAMEBITS.
-        if (observer != null)
-          observer.imageUpdate (img,
-                                ImageObserver.FRAMEBITS,
-                                x, y, width, height);
-	return true;
-      }
-
-    if (component != null)
-      return drawImage (img, x, y, component.getBackground (), observer);
-    else
-      return drawImage (img, x, y, SystemColor.window, observer);
+    return drawImage (img, x, y, null, observer);
   }
 
   public boolean drawImage (Image img, int x, int y, int width, int height, 
 			    Color bgcolor, ImageObserver observer)
   {
-    if (component != null && ! component.isRealized ())
-      return false;
-
-    if (img instanceof GtkOffScreenImage)
-      {
-        copyAndScalePixmap (img.getGraphics (), false, false,
-                            0, 0, img.getWidth (null), img.getHeight (null), 
-                            x, y, width, height);
-        // FIXME: need to differentiate between SOMEBITS and FRAMEBITS.
-        if (observer != null)
-          observer.imageUpdate (img,
-                                ImageObserver.FRAMEBITS,
-                                x, y, width, height);
-        return true;
-      }
-
-    GtkImage image = (GtkImage) img;
-    new GtkImagePainter (image, this, x, y, width, height, bgcolor, observer);
-    return image.isLoaded ();
+    if (img instanceof GtkImage)
+      return ((GtkImage)img).drawImage (this, x, y, width, height, 
+					bgcolor, observer);
+    else
+      return (new GtkImage(img.getSource())).drawImage (this, x, y, 
+							width, height, 
+							bgcolor, observer);
   }
 
   public boolean drawImage (Image img, int x, int y, int width, int height, 
 			    ImageObserver observer)
   {
-    if (component != null && ! component.isRealized ())
-      return false;
-
-    if (component != null)
-      return drawImage (img, x, y, width, height, component.getBackground (),
-                        observer);
-    else
-      return drawImage (img, x, y, width, height, SystemColor.window,
-                        observer);
+    return drawImage (img, x, y, width, height,  null, observer);
   }
 
   public boolean drawImage (Image img, int dx1, int dy1, int dx2, int dy2, 
 			    int sx1, int sy1, int sx2, int sy2, 
 			    Color bgcolor, ImageObserver observer)
   {
-    if (component != null && ! component.isRealized ())
-      return false;
-
-    if (img instanceof GtkOffScreenImage)
-      {
-        int dx_start, dy_start, d_width, d_height;
-        int sx_start, sy_start, s_width, s_height;
-        boolean x_flip = false;
-        boolean y_flip = false;
-
-        if (dx1 < dx2)
-        {
-          dx_start = dx1;
-          d_width = dx2 - dx1;
-        }
-        else
-        {
-          dx_start = dx2;
-          d_width = dx1 - dx2;
-          x_flip ^= true;
-        }
-        if (dy1 < dy2)
-        {
-          dy_start = dy1;
-          d_height = dy2 - dy1;
-        }
-        else
-        {
-          dy_start = dy2;
-          d_height = dy1 - dy2;
-          y_flip ^= true;
-        }
-        if (sx1 < sx2)
-        {
-          sx_start = sx1;
-          s_width = sx2 - sx1;
-        }
-        else
-        {
-          sx_start = sx2;
-          s_width = sx1 - sx2;
-          x_flip ^= true;
-        }
-        if (sy1 < sy2)
-        {
-          sy_start = sy1;
-          s_height = sy2 - sy1;
-        }
-        else
-        {
-          sy_start = sy2;
-          s_height = sy1 - sy2;
-          y_flip ^= true;
-        }
-
-        copyAndScalePixmap (img.getGraphics (), x_flip, y_flip,
-                            sx_start, sy_start, s_width, s_height, 
-                            dx_start, dy_start, d_width, d_height);
-
-        // FIXME: need to differentiate between SOMEBITS and FRAMEBITS.
-        if (observer != null)
-          observer.imageUpdate (img,
-                                ImageObserver.FRAMEBITS,
-                                dx_start, dy_start, d_width, d_height);
-        return true;
-      }
-
-    GtkImage image = (GtkImage) img;
-    new GtkImagePainter (image, this, dx1, dy1, dx2, dy2, 
-			 sx1, sy1, sx2, sy2, bgcolor, observer);
-    return image.isLoaded ();
+    if (img instanceof GtkImage)
+      return ((GtkImage)img).drawImage(this, dx1, dy1, dx2, dy2, 
+				       sx1, sy1, sx2, sy2, bgcolor, observer);
+    else
+      return (new GtkImage(img.getSource())).drawImage(this, dx1, dy1, 
+						       dx2, dy2, 
+						       sx1, sy1, sx2, sy2, 
+						       bgcolor, observer);
   }
 
   public boolean drawImage (Image img, int dx1, int dy1, int dx2, int dy2, 
 			    int sx1, int sy1, int sx2, int sy2, 
 			    ImageObserver observer) 
   {
-    if (component != null && ! component.isRealized ())
-      return false;
-
-    if (component != null)
-      return drawImage (img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2,
-                        component.getBackground (), observer);
-    else
-      return drawImage (img, dx1, dy1, dx2, dy2, sx1, sy1, sx2, sy2,
-                        SystemColor.window, observer);
+    return drawImage (img, dx1, dy1, dx2, dy2, 
+		      sx1, sy1, sx2, sy2, 
+		      null, observer);
   }
 
   public native void drawLine(int x1, int y1, int x2, int y2);
@@ -404,7 +283,10 @@
 
   public Rectangle getClipBounds ()
   {
-    return new Rectangle (clip.x, clip.y, clip.width, clip.height);
+    if (clip == null)
+      return null;
+    else
+      return clip.getBounds();
   }
 
   public Color getColor ()
@@ -445,7 +327,8 @@
 
   public void setClip (Shape clip)
   {
-    setClip (clip.getBounds ());
+    if (clip != null)
+      setClip(clip.getBounds());
   }
 
   private native void setFGColor(int red, int green, int blue);
Index: libjava/gnu/java/awt/peer/gtk/GdkGraphics2D.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/peer/gtk/GdkGraphics2D.java,v
retrieving revision 1.15
diff -u -r1.15 GdkGraphics2D.java
--- libjava/gnu/java/awt/peer/gtk/GdkGraphics2D.java	17 Feb 2005 07:48:22 -0000	1.15
+++ libjava/gnu/java/awt/peer/gtk/GdkGraphics2D.java	9 Jul 2005 22:09:35 -0000
@@ -110,19 +110,22 @@
   
   private final int native_state = GtkGenericPeer.getUniqueInteger();  
 
-  private Paint paint;
-  private Stroke stroke;
-  private Color fg;
-  private Color bg;
-  private Shape clip;
-  private AffineTransform transform;
+  // These are package-private to avoid accessor methods.
+  Paint paint;
+  Stroke stroke;
+  Color fg;
+  Color bg;
+  Shape clip;
+  AffineTransform transform;
   private GtkComponentPeer component;
-  private Font font;
+  // This is package-private to avoid an accessor method.
+  Font font;
   private RenderingHints hints;
   private BufferedImage bimage;
   private boolean pixelConversionRequired;
   private int[] pixelBuffer;
-  private Composite comp;
+  // This is package-private to avoid an accessor method.
+  Composite comp;
   private Stack stateStack;
 
   private native void initState(GtkComponentPeer component);
@@ -283,8 +286,8 @@
   private native void cairoRestore();
   private native void cairoSetMatrix(double[] m);
   private native void cairoSetOperator(int cairoOperator);
-  private native void cairoSetRGBColor(double red, double green, double blue);
-  private native void cairoSetAlpha(double alpha);
+  private native void cairoSetRGBAColor(double red, double green,
+                                        double blue, double alpha);
   private native void cairoSetFillRule(int cairoFillRule);
   private native void cairoSetLineWidth(double width);
   private native void cairoSetLineCap(int cairoLineCap);
@@ -503,21 +506,22 @@
     if (img == null)
       return false;
 
-    if (img instanceof GtkOffScreenImage
-        && img.getGraphics() instanceof GdkGraphics2D
-        && (xform == null || xform.getType() == AffineTransform.TYPE_IDENTITY
-        || xform.getType() == AffineTransform.TYPE_TRANSLATION))
-      {
-	// we are being asked to flush a double buffer from Gdk
-	GdkGraphics2D g2 = (GdkGraphics2D) img.getGraphics();
-	gdkDrawDrawable(g2, (int) xform.getTranslateX(),
-	                (int) xform.getTranslateY());
-
-	updateBufferedImage();
-
-	return true;
-      }
-    else
+    // FIXME: I'll fix this, /Sven
+//     if (img instanceof GtkOffScreenImage
+//         && img.getGraphics() instanceof GdkGraphics2D
+//         && (xform == null || xform.getType() == AffineTransform.TYPE_IDENTITY
+//         || xform.getType() == AffineTransform.TYPE_TRANSLATION))
+//       {
+// 	// we are being asked to flush a double buffer from Gdk
+// 	GdkGraphics2D g2 = (GdkGraphics2D) img.getGraphics();
+// 	gdkDrawDrawable(g2, (int) xform.getTranslateX(),
+// 	                (int) xform.getTranslateY());
+
+// 	updateBufferedImage();
+
+// 	return true;
+//       }
+//     else
       {
 	// In this case, xform is an AffineTransform that transforms bounding
 	// box of the specified image from image space to user space. However
@@ -799,9 +803,8 @@
 
     fg = c;
     paint = c;
-    cairoSetRGBColor(fg.getRed() / 255.0, fg.getGreen() / 255.0,
-                     fg.getBlue() / 255.0);
-    cairoSetAlpha((fg.getAlpha() & 255) / 255.0);
+    cairoSetRGBAColor(fg.getRed() / 255.0, fg.getGreen() / 255.0,
+                      fg.getBlue() / 255.0, fg.getAlpha() / 255.0);
   }
 
   public Color getColor()
@@ -906,9 +909,8 @@
 
   public void clearRect(int x, int y, int width, int height)
   {
-    cairoSetRGBColor(bg.getRed() / 255.0, bg.getGreen() / 255.0,
-                     bg.getBlue() / 255.0);
-    cairoSetAlpha(1.0);
+    cairoSetRGBAColor(bg.getRed() / 255.0, bg.getGreen() / 255.0,
+                      bg.getBlue() / 255.0, 1.0);
     cairoNewPath();
     cairoRectangle(x, y, width, height);
     cairoFill();
Index: libjava/gnu/java/awt/peer/gtk/GdkGraphicsConfiguration.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/peer/gtk/GdkGraphicsConfiguration.java,v
retrieving revision 1.3
diff -u -r1.3 GdkGraphicsConfiguration.java
--- libjava/gnu/java/awt/peer/gtk/GdkGraphicsConfiguration.java	17 Feb 2005 07:48:22 -0000	1.3
+++ libjava/gnu/java/awt/peer/gtk/GdkGraphicsConfiguration.java	9 Jul 2005 22:09:35 -0000
@@ -86,14 +86,14 @@
 
   public VolatileImage createCompatibleVolatileImage(int w, int h)
   {
-    throw new java.lang.UnsupportedOperationException ();
+    return new GtkVolatileImage(w, h);
   }
 
   public VolatileImage createCompatibleVolatileImage(int w, int h,
                                                      ImageCapabilities caps)
     throws java.awt.AWTException
   {
-    throw new java.lang.UnsupportedOperationException ();
+    return new GtkVolatileImage(w, h, caps);
   }
 
   public ColorModel getColorModel()
Index: libjava/gnu/java/awt/peer/gtk/GdkScreenGraphicsDevice.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/peer/gtk/GdkScreenGraphicsDevice.java,v
retrieving revision 1.3
diff -u -r1.3 GdkScreenGraphicsDevice.java
--- libjava/gnu/java/awt/peer/gtk/GdkScreenGraphicsDevice.java	17 Feb 2005 07:48:22 -0000	1.3
+++ libjava/gnu/java/awt/peer/gtk/GdkScreenGraphicsDevice.java	9 Jul 2005 22:09:35 -0000
@@ -38,6 +38,8 @@
 
 package gnu.java.awt.peer.gtk;
 
+import java.awt.Dimension;
+import java.awt.DisplayMode;
 import java.awt.GraphicsConfiguration;
 import java.awt.GraphicsDevice;
 
@@ -79,4 +81,35 @@
     // FIXME: query X for default configuration
     return new GdkGraphicsConfiguration(this);
   }
+
+
+  /**
+   * Returns the current display mode of this device, or null if unknown.
+   *
+   * @return the current display mode
+   * @see #setDisplayMode(DisplayMode)
+   * @see #getDisplayModes()
+   * @since 1.4
+   */
+  public DisplayMode getDisplayMode()
+  {
+    // determine display mode
+    Dimension dim = getToolkit().getScreenSize();
+    DisplayMode mode = new DisplayMode(dim.width, dim.height, 0,
+				       DisplayMode.REFRESH_RATE_UNKNOWN);
+    return mode;
+  }
+
+  /**
+   * This device does not yet support fullscreen exclusive mode, so this
+   * returns <code>false</code>.
+   *
+   * @return <code>false</code>
+   * @since 1.4
+   */
+  public boolean isFullScreenSupported()
+  {
+    return false;
+  }
+
 }
Index: libjava/gnu/java/awt/peer/gtk/GtkComponentPeer.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/peer/gtk/GtkComponentPeer.java,v
retrieving revision 1.26
diff -u -r1.26 GtkComponentPeer.java
--- libjava/gnu/java/awt/peer/gtk/GtkComponentPeer.java	17 Feb 2005 07:48:22 -0000	1.26
+++ libjava/gnu/java/awt/peer/gtk/GtkComponentPeer.java	9 Jul 2005 22:09:35 -0000
@@ -39,6 +39,7 @@
 package gnu.java.awt.peer.gtk;
 
 import java.awt.AWTEvent;
+import java.awt.AWTException;
 import java.awt.BufferCapabilities;
 import java.awt.Color;
 import java.awt.Component;
@@ -71,6 +72,9 @@
 public class GtkComponentPeer extends GtkGenericPeer
   implements ComponentPeer
 {
+  VolatileImage backBuffer;
+  BufferCapabilities caps;
+
   Component awtComponent;
 
   Insets insets;
@@ -194,33 +198,21 @@
   public int checkImage (Image image, int width, int height, 
 			 ImageObserver observer) 
   {
-    GtkImage i = (GtkImage) image;
-    return i.checkImage ();
+    return getToolkit().checkImage(image, width, height, observer);
   }
 
   public Image createImage (ImageProducer producer) 
   {
-    GtkImage image = new GtkImage (producer, null);
-    producer.startProduction (image);
-    return image;
+    return new GtkImage (producer);
   }
 
   public Image createImage (int width, int height)
   {
-    Graphics g;
-    if (GtkToolkit.useGraphics2D ())
-      {
-        Graphics2D g2 = new GdkGraphics2D (width, height);
-        g2.setBackground (getBackground ());
-        g = g2;
-      }
-    else
-      g = new GdkGraphics (width, height);
-
+    GtkImage image = new GtkImage (width, height);
+    Graphics g = image.getGraphics();
     g.setColor(getBackground());
     g.fillRect(0, 0, width, height);
-
-    return new GtkOffScreenImage (null, g, width, height);
+    return image;
   }
 
   public void disable () 
@@ -349,29 +341,7 @@
   public boolean prepareImage (Image image, int width, int height,
 			       ImageObserver observer) 
   {
-    GtkImage i = (GtkImage) image;
-
-    if (i.isLoaded ()) return true;
-
-    class PrepareImage extends Thread
-    {
-      GtkImage image;
-      ImageObserver observer;
-
-      PrepareImage (GtkImage image, ImageObserver observer)
-      {
-	this.image = image;
-	image.setObserver (observer);
-      }
-      
-      public void run ()
-      {
-	image.source.startProduction (image);
-      }
-    }
-
-    new PrepareImage (i, observer).start ();
-    return false;
+    return getToolkit().prepareImage(image, width, height, observer);
   }
 
   public void print (Graphics g) 
@@ -596,35 +566,63 @@
     
   }
 
-  public VolatileImage createVolatileImage (int width, int height)
-  {
-    return null;
-  }
-
   public boolean handlesWheelScrolling ()
   {
     return false;
   }
 
-  public void createBuffers (int x, BufferCapabilities capabilities)
-    throws java.awt.AWTException
-
+  // Convenience method to create a new volatile image on the screen
+  // on which this component is displayed.
+  public VolatileImage createVolatileImage (int width, int height)
   {
-    
+    return new GtkVolatileImage (width, height);
+  }
+
+  // Creates buffers used in a buffering strategy.
+  public void createBuffers (int numBuffers, BufferCapabilities caps)
+    throws AWTException
+  {
+    // numBuffers == 2 implies double-buffering, meaning one back
+    // buffer and one front buffer.
+    if (numBuffers == 2)
+      backBuffer = new GtkVolatileImage(awtComponent.getWidth(),
+					awtComponent.getHeight(),
+					caps.getBackBufferCapabilities());
+    else
+      throw new AWTException("GtkComponentPeer.createBuffers:"
+			     + " multi-buffering not supported");
+    this.caps = caps;
   }
 
+  // Return the back buffer.
   public Image getBackBuffer ()
   {
-    return null;
+    return backBuffer;
   }
 
+  // FIXME: flip should be implemented as a fast native operation
   public void flip (BufferCapabilities.FlipContents contents)
   {
-    
+    getGraphics().drawImage(backBuffer,
+			    awtComponent.getWidth(),
+			    awtComponent.getHeight(),
+			    null);
+
+    // create new back buffer and clear it to the background color.
+    if (contents == BufferCapabilities.FlipContents.BACKGROUND)
+	{
+	  backBuffer = createVolatileImage(awtComponent.getWidth(),
+					   awtComponent.getHeight());
+	  backBuffer.getGraphics().clearRect(0, 0,
+					     awtComponent.getWidth(),
+					     awtComponent.getHeight());
+	}
+    // FIXME: support BufferCapabilities.FlipContents.PRIOR
   }
 
+  // Release the resources allocated to back buffers.
   public void destroyBuffers ()
   {
-    
+    backBuffer.flush();
   }
 }
Index: libjava/gnu/java/awt/peer/gtk/GtkContainerPeer.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/peer/gtk/GtkContainerPeer.java,v
retrieving revision 1.13
diff -u -r1.13 GtkContainerPeer.java
--- libjava/gnu/java/awt/peer/gtk/GtkContainerPeer.java	16 Feb 2005 20:01:31 -0000	1.13
+++ libjava/gnu/java/awt/peer/gtk/GtkContainerPeer.java	9 Jul 2005 22:09:35 -0000
@@ -115,9 +115,14 @@
     Component[] components = ((Container) awtComponent).getComponents();
     for (int i = 0; i < components.length; i++)
       {
-        GtkComponentPeer peer = (GtkComponentPeer) components[i].getPeer();
-        if (peer != null && ! peer.awtComponent.isFontSet())
-          peer.setFont(f);
+        if (components[i].isLightweight ())
+          components[i].setFont (f);
+        else
+          {
+            GtkComponentPeer peer = (GtkComponentPeer) components[i].getPeer();
+            if (peer != null && ! peer.awtComponent.isFontSet())
+              peer.setFont(f);
+          }
       }
   }
 
Index: libjava/gnu/java/awt/peer/gtk/GtkFramePeer.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/peer/gtk/GtkFramePeer.java,v
retrieving revision 1.20
diff -u -r1.20 GtkFramePeer.java
--- libjava/gnu/java/awt/peer/gtk/GtkFramePeer.java	16 Feb 2005 20:01:34 -0000	1.20
+++ libjava/gnu/java/awt/peer/gtk/GtkFramePeer.java	9 Jul 2005 22:09:35 -0000
@@ -166,36 +166,17 @@
     setIconImage(frame.getIconImage());
   }
 
-  native void nativeSetIconImageFromDecoder (GdkPixbufDecoder decoder);
-  native void nativeSetIconImageFromData (int[] pixels, int width, int height);
+  native void nativeSetIconImage (GtkImage image);
+
   public void setIconImage (Image image) 
   {
-      if (image != null && image instanceof GtkImage)
-        {
-          GtkImage img = (GtkImage) image;
-          // FIXME: Image should be loaded, but if not, do image loading here.
-          if (img.isLoaded())
-            {
-              if (img.getSource() instanceof GdkPixbufDecoder)
-                {
-                  nativeSetIconImageFromDecoder((GdkPixbufDecoder) img.getSource());
-                }
-              else
-                {
-                  int[] pixels = img.getPixelCache();
-                  ColorModel model = img.getColorModel();
-                  int[] data = new int[pixels.length * 4];
-                  for (int i = 0; i < pixels.length; i++)
-                    {
-                      data[i * 4] = model.getRed(pixels[i]);
-                      data[i * 4 + 1] = model.getGreen(pixels[i]);
-                      data[i * 4 + 2] = model.getBlue(pixels[i]);
-                      data[i * 4 + 3] = model.getAlpha(pixels[i]);
-                    }
-                  nativeSetIconImageFromData(data, img.getWidth(null), img.getHeight(null));
-                }
-            }
-        }
+      if (image != null)
+	{
+	  if (image instanceof GtkImage)
+	    nativeSetIconImage((GtkImage) image);
+	  else
+	    nativeSetIconImage(new GtkImage(image.getSource()));
+	}
   }
 
   public Graphics getGraphics ()
Index: libjava/gnu/java/awt/peer/gtk/GtkImage.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/peer/gtk/GtkImage.java,v
retrieving revision 1.8
diff -u -r1.8 GtkImage.java
--- libjava/gnu/java/awt/peer/gtk/GtkImage.java	30 Nov 2004 23:58:35 -0000	1.8
+++ libjava/gnu/java/awt/peer/gtk/GtkImage.java	9 Jul 2005 22:09:35 -0000
@@ -1,5 +1,5 @@
 /* GtkImage.java
-   Copyright (C) 1999, 2002, 2003 Free Software Foundation, Inc.
+   Copyright (C) 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -39,306 +39,423 @@
 package gnu.java.awt.peer.gtk;
 
 import java.awt.Graphics;
+import java.awt.Color;
 import java.awt.Image;
 import java.awt.image.ColorModel;
+import java.awt.image.DirectColorModel;
+import java.awt.image.MemoryImageSource;
 import java.awt.image.ImageConsumer;
 import java.awt.image.ImageObserver;
 import java.awt.image.ImageProducer;
+import java.io.File;
+import java.io.IOException;
 import java.util.Hashtable;
 import java.util.Vector;
+import gnu.gcj.RawData;
 
-public class GtkImage extends Image implements ImageConsumer
+/**
+ * GtkImage - wraps a GdkPixbuf or GdkPixmap.
+ *
+ * The constructor GtkImage(int, int) creates an 'off-screen' GdkPixmap,
+ * this can be drawn to (it's a GdkDrawable), and correspondingly, you can
+ * create a GdkGraphics object for it. 
+ *
+ * This corresponds to the Image implementation returned by 
+ * Component.createImage(int, int). 
+ *
+ * A GdkPixbuf is 'on-screen' and the gdk cannot draw to it,
+ * this is used for the other constructors (and other createImage methods), and
+ * corresponds to the Image implementations returned by the Toolkit.createImage
+ * methods, and is basically immutable. 
+ *
+ * @author Sven de Marothy
+ */
+public class GtkImage extends Image
 {
   int width = -1, height = -1;
-  Hashtable props = null;
-  boolean isLoaded = false;
-  boolean isCacheable = true;
-  boolean loading = false;
-
-  Vector widthObservers = new Vector ();
-  Vector heightObservers = new Vector ();
-  Vector propertyObservers = new Vector ();
 
+  /**
+   * Properties.
+   */
+  Hashtable props;
+
+  /**
+   * Loaded or not flag, for asynchronous compatibility.
+   */
+  boolean isLoaded;
+
+  /**
+   * Pointer to the GdkPixbuf
+   */
+  RawData pixmap;
+
+  /**
+   * Observer queue.
+   */
+  Vector observers;
+
+  /**
+   * If offScreen is set, a GdkBitmap is wrapped and not a Pixbuf.
+   */
+  boolean offScreen;
+
+  /**
+   * Original source, if created from an ImageProducer.
+   */
   ImageProducer source;
-  ImageObserver observer;
-  Graphics g;
 
-  /* Variables in which we stored cached data, if possible.
-
-     An image is cached if the following properties are true:
-     1. The ColorModel passed into setColorModel is the same ColorModel
-        passed to all invocations of setPixels.
-     2. The image contains a single frame.
-
-  */
-  int[] pixelCache;
-  ColorModel model;
-
-  public 
-  GtkImage (ImageProducer producer, Graphics g)
+  /*
+   * The 32-bit AABBGGRR format the GDK uses.
+   */
+  static ColorModel nativeModel = new DirectColorModel(32, 
+						       0x000000FF,
+						       0x0000FF00,
+						       0x00FF0000,
+						       0xFF000000);
+
+  /**
+   * Returns a copy of the pixel data as a java array.
+   */
+  private native int[] getPixels();
+
+  /**
+   * Sets the pixel data from a java array.
+   */
+  private native void setPixels(int[] pixels);
+
+  /**
+   * Loads an image using gdk-pixbuf.
+   */
+  private native boolean loadPixbuf(String name);
+
+  /**
+   * Allocates a Gtk Pixbuf or pixmap
+   */
+  private native void createPixmap();
+
+  /**
+   * Frees the above.
+   */
+  private native void freePixmap();
+
+  /**
+   * Sets the pixmap to scaled copy of src image. hints are rendering hints.
+   */
+  private native void createScaledPixmap(GtkImage src, int hints);
+
+  /**
+   * Draws the image, optionally scaled and composited.
+   */
+  private native void drawPixelsScaled (GdkGraphics gc, 
+					int bg_red, int bg_green, int bg_blue, 
+					int x, int y, int width, int height, 
+					boolean composite);
+
+  /**
+   * Draws the image, optionally scaled flipped and composited.
+   */
+  private native void drawPixelsScaledFlipped (GdkGraphics gc, 
+					       int bg_red, int bg_green, 
+					       int bg_blue, 
+					       boolean flipX, boolean flipY,
+					       int srcX, int srcY,
+					       int srcWidth, int srcHeight,
+					       int dstX, int dstY,
+					       int dstWidth, int dstHeight,
+					       boolean composite);
+
+  /**
+   * Constructs a GtkImage from an ImageProducer. Asynchronity is handled in
+   * the following manner: 
+   * A GtkImageConsumer gets the image data, and calls setImage() when 
+   * completely finished. The GtkImage is not considered loaded until the
+   * GtkImageConsumer is completely finished. We go for all "all or nothing".
+   */
+  public GtkImage (ImageProducer producer)
   {
+    isLoaded = false;
+    observers = new Vector();
     source = producer;
-    this.g = g;
+    source.startProduction(new GtkImageConsumer(this, source));
+    offScreen = false;
+  }
 
-    if (source != null)
-      source.addConsumer (this);
+  /**
+   * Constructs a GtkImage by loading a given file.
+   *
+   * @throws IllegalArgumentException if the image could not be loaded.
+   */
+  public GtkImage (String filename)
+  {
+    File f = new File(filename);
+    try
+      {
+	if (loadPixbuf(f.getCanonicalPath()) != true)
+	  throw new IllegalArgumentException("Couldn't load image: "+filename);
+      } 
+    catch(IOException e)
+      {
+	  throw new IllegalArgumentException("Couldn't load image: "+filename);
+      }
+
+    isLoaded = true;
+    observers = null;
+    offScreen = false;
+    props = new Hashtable();
   }
 
-  public void setObserver (ImageObserver observer)
+  /**
+   * Constructs an empty GtkImage.
+   */
+  public GtkImage (int width, int height)
   {
-    this.observer = observer;
+    this.width = width;
+    this.height = height;
+    props = new Hashtable();
+    isLoaded = true;
+    observers = null;
+    offScreen = true;
+    createPixmap();
   }
 
-  public synchronized int[]
-  getPixelCache ()
+  /**
+   * Constructs a scaled version of the src bitmap, using the GDK.
+   */
+  private GtkImage (GtkImage src, int width, int height, int hints)
   {
-    return pixelCache;
+    this.width = width;
+    this.height = height;
+    props = new Hashtable();
+    isLoaded = true;
+    observers = null;
+    offScreen = false;
+
+    // Use the GDK scaling method.
+    createScaledPixmap(src, hints);
   }
 
-  public synchronized ColorModel
-  getColorModel ()
+  /**
+   * Callback from the image consumer.
+   */
+  public void setImage(int width, int height, 
+		       int[] pixels, Hashtable properties)
   {
-    return model;
+    this.width = width;
+    this.height = height;
+    props = (properties != null) ? properties : new Hashtable();
+    isLoaded = true;
+    deliver();
+    createPixmap();
+    setPixels(pixels);
   }
 
-  public synchronized int 
-  getWidth (ImageObserver observer)
+  // java.awt.Image methods ////////////////////////////////////////////////
+
+  public synchronized int getWidth (ImageObserver observer)
   {
-    if (width == -1)
-      widthObservers.addElement (observer);
-    
+    if (addObserver(observer))
+      return -1;
+
     return width;
   }
   
-  public synchronized int 
-  getHeight (ImageObserver observer)
+  public synchronized int getHeight (ImageObserver observer)
   {
-    if (height == -1)
-      heightObservers.addElement (observer);
+    if (addObserver(observer))
+      return -1;
     
     return height;
   }
-  
-  public ImageProducer 
-  getSource ()
-  {
-    return source;
-  }
 
-  public Graphics 
-  getGraphics ()
+  public synchronized Object getProperty (String name, ImageObserver observer)
   {
-    return g;
-  }
-  
-  public synchronized Object 
-  getProperty (String name, ImageObserver observer)
-  {
-    if (props == null)
-      {
-	propertyObservers.addElement (observer);
-	return null;
-      }
+    if (addObserver(observer))
+      return UndefinedProperty;
     
     Object value = props.get (name);
     return (value == null) ? UndefinedProperty : value;
   }
 
-  public synchronized void 
-  flush ()
-  {
-    isLoaded = false;
-    isCacheable = true;
-    width = height = -1;
-    props = null;
-    pixelCache = null;
-    model = null;
-
-    if (source != null)
-      {
-	source.removeConsumer (this);
-	source.addConsumer (this);
-      }
-  }
-
-  public boolean
-  isLoaded ()
-  {
-    return isLoaded;
+  /**
+   * Returns the source of this image.
+   */
+  public ImageProducer getSource ()
+  {
+    if (!isLoaded)
+      return null;
+    return new MemoryImageSource(width, height, nativeModel, getPixels(), 
+				 0, width);
+  }
+
+  /**
+   * Creates a GdkGraphics context for this pixmap.
+   */
+  public Graphics getGraphics ()
+  {
+    if (!isLoaded) 
+      return null;
+    if (offScreen)
+      return new GdkGraphics(this);
+    else
+      throw new IllegalAccessError("This method only works for off-screen"
+				   +" Images.");
   }
-
-  /* ImageConsumer methods */
-
-  public synchronized void 
-  setDimensions (int width, int height)
+  
+  /**
+   * Returns a scaled instance of this pixmap.
+   */
+  public Image getScaledInstance(int width,
+				 int height,
+				 int hints)
   {
-    pixelCache = new int[width*height];
-
-    this.width = width;
-    this.height = height;
-    
-    for (int i = 0; i < widthObservers.size (); i++)
-      {
-	ImageObserver io = (ImageObserver) widthObservers.elementAt (i);
-	if (io != null)
-	  io.imageUpdate (this, ImageObserver.WIDTH, -1, -1, width, height);
-      }
-
-    for (int i = 0; i < heightObservers.size (); i++)
-      {
-	ImageObserver io = (ImageObserver) heightObservers.elementAt (i);
-	if (io != null)
-	  io.imageUpdate (this, ImageObserver.HEIGHT, -1, -1, width, height);
-      }
+    if (width <= 0 || height <= 0)
+      throw new IllegalArgumentException("Width and height of scaled bitmap"+
+					 "must be >= 0");
 
-    if (observer != null)
-      observer.imageUpdate (this,
-			    (ImageObserver.WIDTH
-			     | ImageObserver.HEIGHT),
-			    -1, -1, width, height);
+    return new GtkImage(this, width, height, hints);
   }
 
-  public synchronized void 
-  setProperties (Hashtable props)
+  /**
+   * If the image is loaded and comes from an ImageProducer, 
+   * regenerate the image from there.
+   *
+   * I have no idea if this is ever actually used. Since GtkImage can't be
+   * instantiated directly, how is the user to know if it was created from
+   * an ImageProducer or not?
+   */
+  public synchronized void flush ()
   {
-    this.props = props;
-    
-    for (int i = 0; i < propertyObservers.size (); i++)
+    if (isLoaded && source != null)
       {
-	ImageObserver io = (ImageObserver) propertyObservers.elementAt (i);
-	if (io != null)
-	  io.imageUpdate (this, ImageObserver.PROPERTIES, -1, -1, width, height);
+	observers = new Vector();
+	isLoaded = false;
+	freePixmap();
+	source.startProduction(new GtkImageConsumer(this, source));
       }
   }
 
-  public synchronized void 
-  setColorModel (ColorModel model)
-  {
-    if (this.model == null || this.model.equals(model))
-      this.model = model;
-    else
-      isCacheable = false;
-  }
-
-  public synchronized void 
-  setHints (int flags)
+  public void finalize()
   {
+    if (isLoaded)
+      freePixmap();
   }
 
-  public synchronized void 
-  setPixels (int x, int y, int width, int height, ColorModel cm, byte[] pixels,
-	     int offset, int scansize)
+  /**
+   * Returns the image status, used by GtkToolkit
+   */
+  public int checkImage (ImageObserver observer)
   {
-    setPixels (x, y, width, height, cm, convertPixels (pixels), offset,
-               scansize);
+    if (addObserver(observer))
+      return 0;
 
-    if (observer != null)
-      observer.imageUpdate (this,
-			    ImageObserver.SOMEBITS,
-			    x, y, width, height);
+    return ImageObserver.ALLBITS | ImageObserver.WIDTH | ImageObserver.HEIGHT;
   }
 
-  public synchronized void 
-  setPixels (int x, int y, int width, int height, ColorModel cm, int[] pixels,
-	     int offset, int scansize)
-  {
-    loading = true;
-
-    if (!isCacheable)
-      return;
-
-    if (!cm.equals(model) || pixelCache == null)
-      {
-	isCacheable = false;
-	return;
-      }
+  // Drawing methods ////////////////////////////////////////////////
 
-    if (scansize == width && height == 1)
-      {
-        // Copy contents of pixels array into pixel cache.
-	System.arraycopy (pixels, offset,
-			  pixelCache, y * this.width + x,
-			  pixels.length - offset);
-      }
-    else			// skip over scansize-width for each row
-      {
-	for (int i = 0; i < height; i++)
-	  System.arraycopy (pixels, offset + (i * scansize),
-			    pixelCache, (y + i) * this.width + x,
-			    width);
-      }
-  }
-
-  public synchronized void 
-  imageComplete (int status)
+  /**
+   * Draws an image with eventual scaling/transforming.
+   */
+  public boolean drawImage (GdkGraphics g, int dx1, int dy1, int dx2, int dy2, 
+			    int sx1, int sy1, int sx2, int sy2, 
+			    Color bgcolor, ImageObserver observer)
   {
-    if (status == ImageConsumer.STATICIMAGEDONE && isCacheable)
-      isLoaded = true;
+    if (addObserver(observer))
+      return false;
 
-    if (status == ImageConsumer.SINGLEFRAME)
-      isCacheable = false;
+    boolean flipX = (dx1 > dx2)^(sx1 > sx2);
+    boolean flipY = (dy1 > dy2)^(sy1 > sy2);
+    int dstWidth = Math.abs (dx2 - dx1);
+    int dstHeight = Math.abs (dy2 - dy1);
+    int srcWidth = Math.abs (sx2 - sx1);
+    int srcHeight = Math.abs (sy2 - sy1);
+    int srcX = (sx1 < sx2) ? sx1 : sx2;
+    int srcY = (sy1 < sy2) ? sy1 : sy2;
+    int dstX = (dx1 < dx2) ? dx1 : dx2;
+    int dstY = (dy1 < dy2) ? dy1 : dy2;
 
-    if (observer != null)
+    // Clipping. This requires the dst to be scaled as well, 
+    if (srcWidth + srcX > width)
       {
-	if (status == ImageConsumer.IMAGEERROR)
-	  observer.imageUpdate (null,
-				ImageObserver.ERROR,
-				-1, -1, -1, -1);
-	else
-	  observer.imageUpdate (null,
-				ImageObserver.ALLBITS,
-				-1, -1, -1, -1);
-      }
-
-    if (source != null && status != ImageConsumer.SINGLEFRAME)
-      source.removeConsumer (this);
-  }
+	dstWidth = (int)((double)dstWidth * (double)(width - srcX)/(double)srcWidth);
+	srcWidth = width - srcX;
+    }
 
-  public synchronized void
-  startProduction (GtkImagePainter painter)
-  {
-    if (isLoaded)
+    if (srcHeight + srcY > height)
       {
-	painter.setDimensions (width, height);
-	painter.setPixels (0, 0, width, height, model, pixelCache, 0, width);
+	dstHeight = (int)((double)dstHeight * (double)(width - srcY)/(double)srcHeight);
+	srcHeight = height - srcY;
       }
+    
+    if(bgcolor != null)
+      drawPixelsScaledFlipped (g, bgcolor.getRed (), bgcolor.getGreen (), 
+			       bgcolor.getBlue (), 
+			       flipX, flipY,
+			       srcX, srcY,
+			       srcWidth, srcHeight,
+			       dstX,  dstY,
+			       dstWidth, dstHeight,
+			       true);
     else
-      {
-	if (source != null)
-	  {
-	    source.startProduction (painter);
-	    source.removeConsumer (painter);
-	  }
-      }
-  }
-
-  private int[]
-  convertPixels (byte[] pixels)
-  {
-    int ret[] = new int[pixels.length];
+      drawPixelsScaledFlipped (g, 0, 0, 0, flipX, flipY,
+			       srcX, srcY, srcWidth, srcHeight,
+			       dstX,  dstY, dstWidth, dstHeight,
+			       false);
+    return true;
+  }
+
+  /**
+   * Draws an image to the GdkGraphics context, at (x,y) scaled to 
+   * width and height, with optional compositing with a background color.
+   */
+  public boolean drawImage (GdkGraphics g, int x, int y, int width, int height,
+			    Color bgcolor, ImageObserver observer)
+  {
+    if (addObserver(observer))
+      return false;
+
+    if(bgcolor != null)
+      drawPixelsScaled(g, bgcolor.getRed (), bgcolor.getGreen (), 
+		       bgcolor.getBlue (), x, y, width, height, true);
+    else
+      drawPixelsScaled(g, 0, 0, 0, x, y, width, height, false);
 
-    for (int i = 0; i < pixels.length; i++)
-      ret[i] = pixels[i];
-    
-    return ret;
+    return true;
   }
 
-  synchronized int 
-  checkImage ()
+  // Private methods ////////////////////////////////////////////////
+
+  /**
+   * Delivers notifications to all queued observers.
+   */
+  private void deliver()
   {
-    int bits = 0;
+    int flags = ImageObserver.HEIGHT | 
+      ImageObserver.WIDTH |
+      ImageObserver.PROPERTIES |
+      ImageObserver.ALLBITS;
 
-    if (width != -1)
-      bits |= ImageObserver.WIDTH;
-    if (height != -1)
-      bits |= ImageObserver.HEIGHT;
-    if (props != null)
-      bits |= ImageObserver.PROPERTIES;
-    if (loading)
-      bits |= ImageObserver.SOMEBITS;
-    if (isLoaded)
-      bits |= ImageObserver.ALLBITS;
+    if (observers != null)
+      for(int i=0; i < observers.size(); i++)
+	((ImageObserver)observers.elementAt(i)).
+	  imageUpdate(this, flags, 0, 0, width, height);
 
-    return bits;
+    observers = null;
+  }
+  
+  /**
+   * Adds an observer, if we need to.
+   * @return true if an observer was added.
+   */
+  private boolean addObserver(ImageObserver observer)
+  {
+    if (!isLoaded)
+      {
+	if(observer != null)
+	  if (!observers.contains (observer))
+	    observers.addElement (observer);
+	return true;
+      }
+    return false;
   }
 }
Index: libjava/gnu/java/awt/peer/gtk/GtkImageConsumer.java
===================================================================
RCS file: libjava/gnu/java/awt/peer/gtk/GtkImageConsumer.java
diff -N libjava/gnu/java/awt/peer/gtk/GtkImageConsumer.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/java/awt/peer/gtk/GtkImageConsumer.java	9 Jul 2005 22:09:36 -0000
@@ -0,0 +1,155 @@
+/* GtkImageConsumer.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.java.awt.peer.gtk;
+
+import java.awt.Graphics;
+import java.awt.Image;
+import java.awt.image.ColorModel;
+import java.awt.image.DirectColorModel;
+import java.awt.image.ImageConsumer;
+import java.awt.image.ImageObserver;
+import java.awt.image.ImageProducer;
+import java.util.Hashtable;
+import java.util.Vector;
+
+/**
+ * Helper class to GtkImage. Sits and gathers pixels for a GtkImage and then
+ * calls GtkImage.setImage().
+ *
+ * @author Sven de Marothy
+ */
+public class GtkImageConsumer implements ImageConsumer
+{
+  private GtkImage target;
+  private int width, height;
+  private Hashtable properties;
+  private int[] pixelCache = null;
+  private ImageProducer source;
+
+  public GtkImageConsumer(GtkImage target, ImageProducer source)
+  {
+    this.target = target;
+    this.source = source;
+  }
+
+  public synchronized void imageComplete (int status)
+  {
+    source.removeConsumer(this);
+    target.setImage(width, height, pixelCache, properties);
+  }
+
+  public synchronized void setColorModel (ColorModel model)
+  {
+    // This method is to inform on what the most used color model
+    // in the image is, for optimization reasons. We ignore this
+    // information.
+  }
+
+  public synchronized void setDimensions (int width, int height)
+  {
+    pixelCache = new int[width*height];
+
+    this.width = width;
+    this.height = height;
+  }
+
+  public synchronized void setHints (int flags)
+  {
+    // This method informs us in which order the pixels are
+    // delivered, for progressive-loading support, etc. 
+    // Since we wait until it's all loaded, we can ignore the hints.
+  }
+
+  public synchronized void setPixels (int x, int y, int width, int height, 
+				      ColorModel cm, byte[] pixels,
+				      int offset, int scansize)
+  {
+    setPixels (x, y, width, height, cm, convertPixels (pixels), offset,
+               scansize);
+  }
+
+  public synchronized void setPixels (int x, int y, int width, int height, 
+				      ColorModel cm, int[] pixels,
+				      int offset, int scansize)
+  {
+    if (pixelCache == null)
+      return; // Not sure this should ever happen.
+
+    if (cm.equals(GtkImage.nativeModel))
+      for (int i = 0; i < height; i++)
+	System.arraycopy (pixels, offset + (i * scansize),
+			  pixelCache, (y + i) * this.width + x,
+			  width);
+    else
+      {
+	for (int i = 0; i < height; i++)
+	  for (int j = 0; j < width; j++)
+	    {
+	      // get in AARRGGBB and convert to AABBGGRR
+	      int pix = cm.getRGB(pixels[offset + (i * scansize) + x + j]);
+	      byte b = (byte)(pix & 0xFF);
+	      byte r = (byte)(((pix & 0x00FF0000) >> 16) & 0xFF);
+	      pix &= 0xFF00FF00;
+	      pix |= ((b & 0xFF) << 16);
+	      pix |= (r & 0xFF);
+	      pixelCache[(y + i) * this.width + x + j] = pix;
+	    }
+      }
+  }
+
+  /**
+   * This is an old method, no idea if it's correct.
+   */
+  private int[] convertPixels (byte[] pixels)
+  {
+    int ret[] = new int[pixels.length];
+
+    for (int i = 0; i < pixels.length; i++)
+      ret[i] = pixels[i] & 0xFF;
+    
+    return ret;
+  }
+
+  public synchronized void setProperties (Hashtable props)
+  {
+    this.properties = props;
+  }
+}
+
+
Index: libjava/gnu/java/awt/peer/gtk/GtkImagePainter.java
===================================================================
RCS file: libjava/gnu/java/awt/peer/gtk/GtkImagePainter.java
diff -N libjava/gnu/java/awt/peer/gtk/GtkImagePainter.java
--- libjava/gnu/java/awt/peer/gtk/GtkImagePainter.java	30 Nov 2004 23:58:35 -0000	1.6
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1,272 +0,0 @@
-/* GtkImagePainter.java
-   Copyright (C) 1999, 2000 Free Software Foundation, Inc.
-
-This file is part of GNU Classpath.
-
-GNU Classpath is free software; you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation; either version 2, or (at your option)
-any later version.
-
-GNU Classpath is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
-
-Linking this library statically or dynamically with other modules is
-making a combined work based on this library.  Thus, the terms and
-conditions of the GNU General Public License cover the whole
-combination.
-
-As a special exception, the copyright holders of this library give you
-permission to link this library with independent modules to produce an
-executable, regardless of the license terms of these independent
-modules, and to copy and distribute the resulting executable under
-terms of your choice, provided that you also meet, for each linked
-independent module, the terms and conditions of the license of that
-module.  An independent module is a module which is not derived from
-or based on this library.  If you modify this library, you may extend
-this exception to your version of the library, but you are not
-obligated to do so.  If you do not wish to do so, delete this
-exception statement from your version. */
-
-
-package gnu.java.awt.peer.gtk;
-
-import java.awt.Color;
-import java.awt.Rectangle;
-import java.awt.image.ColorModel;
-import java.awt.image.ImageConsumer;
-import java.awt.image.ImageObserver;
-import java.util.Hashtable;
-
-public class GtkImagePainter implements Runnable, ImageConsumer
-{
-  GtkImage image;
-  GdkGraphics gc;
-  int startX, startY;
-  int redBG;
-  int greenBG;
-  int blueBG;
-  double affine[];
-  int width, height;
-  boolean flipX, flipY;
-  Rectangle clip;
-  int s_width, s_height;
-  ImageObserver observer;
-
-  public
-  GtkImagePainter (GtkImage image, GdkGraphics gc, int x, int y, 
-		   int width, int height, Color bgcolor, ImageObserver o)
-  {
-    this.image = image;
-    this.gc = (GdkGraphics) gc.create ();
-    startX = x;
-    startY = y;
-    redBG = bgcolor.getRed ();
-    greenBG = bgcolor.getGreen ();
-    blueBG = bgcolor.getBlue ();
-    this.width = width;
-    this.height = height;
-    flipX = flipY = false;
-    s_width = s_height = 0;
-    clip = null;
-    observer = o;
-
-    run ();
-  }
-
-  public
-  GtkImagePainter (GtkImage image, GdkGraphics gc, 
-		   int dx1, int dy1, int dx2, int dy2,
-		   int sx1, int sy1, int sx2, int sy2,
-		   Color bgcolor, ImageObserver o)
-  {
-    this.image = image;
-    this.gc = (GdkGraphics) gc.create ();
-    startX = (dx1 < dx2) ? dx1 : dx2;
-    startY = dy1;
-    redBG = bgcolor.getRed ();
-    greenBG = bgcolor.getGreen ();
-    blueBG = bgcolor.getBlue ();
-    observer = o;
-
-    this.width = Math.abs (dx2 - dx1);
-    this.height = Math.abs (dy2 - dy1);
-
-    flipX = ((dx1 > dx2 && sx2 > sx1)
-	     || (dx1 < dx2 && sx2 < sx1));
-
-    flipY = ((dy1 > dy2 && sy2 > sy1)
-	     || (dy1 < dy2 && sy2 < sy1));
-
-    s_width = Math.abs (sx2 - sx1);
-    s_height = Math.abs (sy2 - sy1);
-    clip = new Rectangle (sx1, sy1, s_width, s_height);
-
-    run ();
-  }
-
-  public void
-  run ()
-  {
-    image.startProduction (this);
-    gc.dispose ();
-  }
-
-  /* Convert pixel data into a format that gdkrgb can understand */
-  static int[] 
-  convertPixels (int[] pixels, ColorModel model)
-  {
-    if (pixels == null || model == null)
-    {
-      return null;
-    }
-
-    if (model.equals (ColorModel.getRGBdefault ()))
-      return pixels;
-
-    int ret[] = new int[pixels.length];
-
-    for (int i = 0; i < pixels.length; i++)
-      ret[i] = model.getRGB (pixels[i]);
-
-    return ret;
-  }
-
-  static int[]
-  convertPixels (byte[] pixels, ColorModel model)
-  {
-    if (pixels == null || model == null)
-    {
-      return null;
-    }
-
-    int ret[] = new int[pixels.length];
-
-    for (int i = 0; i < pixels.length; i++)
-      ret[i] = model.getRGB (pixels[i]);
-
-    return ret;
-  }
-
-  native void
-  drawPixels (GdkGraphics gc, int bg_red, int bg_green, int bg_blue, 
-	      int x, int y, int width, int height, int[] pixels, int offset, 
-	      int scansize, double affine[]);
-
- 
-  public void 
-  setPixels (int x, int y, int width, int height, ColorModel model,
-	     int[] pixels, int offset, int scansize)
-  {
-    if (clip != null)
-      {
-	Rectangle r;
-	r = clip.intersection (new Rectangle (x, y, width, height));
-	if (r.width == 0 && r.height == 0)
-	  return;
-
-	offset += r.y * scansize + r.x;
-
-	width = r.width;
-	height = r.height;
-	x = r.x;
-	y = r.y;
-      }
-
-    drawPixels (gc, redBG, greenBG, blueBG,
-	        startX + x, startY + y,
-		width, height, convertPixels (pixels, model), offset,
-		scansize, affine);
-
-    if (observer != null)
-      observer.imageUpdate (image,
-			    ImageObserver.SOMEBITS,
-			    x, y, width, height);
-  }
-
-  public void 
-  setPixels (int x, int y, int width, int height, ColorModel model, 
-	     byte[] pixels, int offset, int scansize)
-  {
-    setPixels (x, y, width, height, ColorModel.getRGBdefault(),
-	       convertPixels (pixels, model), offset, scansize);
-  }
-
-  public void 
-  setDimensions (int width, int height)
-  {
-    if (!flipX && !flipY && 
-	((this.width == -1 && this.height == -1)
-	 || (this.width == width && this.height == height)))
-      return;
-
-    affine = new double[6];
-    affine[1] = affine[2] = affine[4] = affine[5] = 0;
-    
-    if (clip != null)
-      {
-	affine[0] = this.width / (double) s_width;
-	affine[3] = this.height / (double) s_height;
-      }
-    else
-      {
-	affine[0] = this.width / (double) width;
-	affine[3] = this.height / (double) height;
-      }
-
-    if (flipX)
-      {
-	affine[0] = -affine[0];
-	affine[4] = this.width;
-      }
-
-    if (flipY)
-      {
-	affine[3] = -affine[3];
-	affine[5] = this.height;
-      }
-
-    if (affine[0] == 1 && affine[3] == 1)
-      affine = null;
-  }
-
-  public void 
-  setProperties (Hashtable props)
-  {
-  }
-
-  public void 
-  setColorModel (ColorModel model)
-  {
-  }
-
-  public void 
-  setHints (int flags)
-  {
-  }
-
-  public void 
-  imageComplete (int status)
-  {
-    image.imageComplete(status);
-
-    if (observer != null)
-      {
-	if (status == ImageConsumer.IMAGEERROR)
-	  observer.imageUpdate (null,
-				ImageObserver.ERROR,
-				-1, -1, -1, -1);
-	else
-	  observer.imageUpdate (null,
-				ImageObserver.ALLBITS,
-				-1, -1, -1, -1);
-      }
-  }
-}
Index: libjava/gnu/java/awt/peer/gtk/GtkOffScreenImage.java
===================================================================
RCS file: libjava/gnu/java/awt/peer/gtk/GtkOffScreenImage.java
diff -N libjava/gnu/java/awt/peer/gtk/GtkOffScreenImage.java
--- libjava/gnu/java/awt/peer/gtk/GtkOffScreenImage.java	2 Sep 2004 05:10:11 -0000	1.3
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1,93 +0,0 @@
-/* GtkOffScreenImage.java
-   Copyright (C) 1999 Free Software Foundation, Inc.
-
-This file is part of GNU Classpath.
-
-GNU Classpath is free software; you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation; either version 2, or (at your option)
-any later version.
-
-GNU Classpath is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
-
-Linking this library statically or dynamically with other modules is
-making a combined work based on this library.  Thus, the terms and
-conditions of the GNU General Public License cover the whole
-combination.
-
-As a special exception, the copyright holders of this library give you
-permission to link this library with independent modules to produce an
-executable, regardless of the license terms of these independent
-modules, and to copy and distribute the resulting executable under
-terms of your choice, provided that you also meet, for each linked
-independent module, the terms and conditions of the license of that
-module.  An independent module is a module which is not derived from
-or based on this library.  If you modify this library, you may extend
-this exception to your version of the library, but you are not
-obligated to do so.  If you do not wish to do so, delete this
-exception statement from your version. */
-
-
-package gnu.java.awt.peer.gtk;
-
-import java.awt.Graphics;
-import java.awt.Image;
-import java.awt.image.ImageObserver;
-import java.awt.image.ImageProducer;
-
-public class GtkOffScreenImage extends Image
-{
-  int width, height;
-  ImageProducer source;
-  Graphics g;
-  
-  public GtkOffScreenImage (ImageProducer source, Graphics g,
-			    int width, int height)
-  {
-    this.width = width;
-    this.height = height;
-
-    this.source = source;
-    this.g = g;
-  }
-
-  public int getWidth (ImageObserver observer)
-  {
-    return width;
-  }
-
-  public int getHeight (ImageObserver observer)
-  {
-    return height;
-  }
-
-  public ImageProducer getSource ()
-  {
-    return source;
-  }
-
-  public Graphics getGraphics ()
-  {
-    if (g instanceof GdkGraphics2D)
-      return new GdkGraphics2D ((GdkGraphics2D) this.g);
-    else
-      return new GdkGraphics ((GdkGraphics) this.g);
-  }
-
-  public Object getProperty (String name, ImageObserver observer)
-  {
-    return Image.UndefinedProperty;
-  }
-
-  public void flush ()
-  {
-  }
-}
Index: libjava/gnu/java/awt/peer/gtk/GtkPanelPeer.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/peer/gtk/GtkPanelPeer.java,v
retrieving revision 1.6
diff -u -r1.6 GtkPanelPeer.java
--- libjava/gnu/java/awt/peer/gtk/GtkPanelPeer.java	30 Nov 2004 23:58:35 -0000	1.6
+++ libjava/gnu/java/awt/peer/gtk/GtkPanelPeer.java	9 Jul 2005 22:09:36 -0000
@@ -65,4 +65,6 @@
       }
     super.handleEvent (event);
   }
+
+  native void connectSignals ();
 }
Index: libjava/gnu/java/awt/peer/gtk/GtkToolkit.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/java/awt/peer/gtk/GtkToolkit.java,v
retrieving revision 1.17
diff -u -r1.17 GtkToolkit.java
--- libjava/gnu/java/awt/peer/gtk/GtkToolkit.java	17 Feb 2005 07:48:22 -0000	1.17
+++ libjava/gnu/java/awt/peer/gtk/GtkToolkit.java	9 Jul 2005 22:09:36 -0000
@@ -53,6 +53,7 @@
 import java.awt.im.InputMethodHighlight;
 import java.awt.image.BufferedImage;
 import java.awt.image.ColorModel;
+import java.awt.image.DirectColorModel;
 import java.awt.image.ImageConsumer;
 import java.awt.image.ImageObserver;
 import java.awt.image.ImageProducer;
@@ -140,9 +141,7 @@
       | ImageObserver.HEIGHT;
 
     if (image instanceof GtkImage)
-      {        
-        status = ((GtkImage) image).checkImage ();
-      }
+	return ((GtkImage) image).checkImage (observer);
 
     if (observer != null)
       observer.imageUpdate (image, status,
@@ -250,12 +249,7 @@
     if (useGraphics2D())
       return bufferedImageOrError(GdkPixbufDecoder.createBufferedImage (filename));
     else
-      {
-        GdkPixbufDecoder d = new GdkPixbufDecoder (filename);
-        GtkImage image = new GtkImage (d, null);
-        d.startProduction (image);
-        return image;        
-      }
+      return new GtkImage (filename);
   }
 
   public Image createImage (URL url)
@@ -265,8 +259,7 @@
     else
       {
         GdkPixbufDecoder d = new GdkPixbufDecoder (url);
-        GtkImage image = new GtkImage (d, null);
-        d.startProduction (image);
+        GtkImage image = new GtkImage (d);
         return image;        
       }
   }
@@ -276,11 +269,7 @@
     if (useGraphics2D())
       return bufferedImageOrError(GdkPixbufDecoder.createBufferedImage (producer));
     else
-      {
-        GtkImage image = new GtkImage (producer, null);
-        producer.startProduction (image);
-        return image;        
-      }
+      return new GtkImage (producer);
   }
 
   public Image createImage (byte[] imagedata, int imageoffset,
@@ -295,8 +284,7 @@
         GdkPixbufDecoder d = new GdkPixbufDecoder (imagedata,
                                                    imageoffset, 
                                                    imagelength);
-        GtkImage image = new GtkImage (d, null);
-        d.startProduction (image);
+        GtkImage image = new GtkImage (d);
         return image;        
       }
   }
@@ -312,9 +300,18 @@
     return new GdkPixbufDecoder(url);  
   }
 
+  /**
+   * Returns the native color model (which isn't the same as the default
+   * ARGB color model, but doesn't have to be). 
+   */
   public ColorModel getColorModel () 
   {
-    return ColorModel.getRGBdefault ();
+    /* Return the GDK-native ABGR format */
+    return new DirectColorModel(32, 
+				0x000000FF,
+				0x0000FF00,
+				0x00FF0000,
+				0xFF000000);
   }
 
   public String[] getFontList () 
@@ -403,32 +400,20 @@
     return systemClipboard;
   }
 
+  /**
+   * Prepares a GtkImage. For every other kind of Image it just
+   * assumes the image is already prepared for rendering.
+   */
   public boolean prepareImage (Image image, int width, int height, 
 			       ImageObserver observer) 
   {
-    GtkImage i = (GtkImage) image;
-
-    if (i.isLoaded ()) return true;
-
-    class PrepareImage extends Thread
-    {
-      GtkImage image;
-      ImageObserver observer;
-
-      PrepareImage (GtkImage image, ImageObserver observer)
-      {
-	this.image = image;
-	image.setObserver (observer);
-      }
-      
-      public void run ()
-      {
-	image.source.startProduction (image);
-      }
-    }
+    /* GtkImages are always prepared, as long as they're loaded. */
+    if (image instanceof GtkImage)
+      return ((((GtkImage)image).checkImage (observer) & 
+	       ImageObserver.ALLBITS) != 0);
 
-    new PrepareImage (i, observer).start ();
-    return false;
+    /* Assume anything else is too */
+    return true;
   }
 
   public native void sync();
Index: libjava/gnu/java/awt/peer/gtk/GtkVolatileImage.java
===================================================================
RCS file: libjava/gnu/java/awt/peer/gtk/GtkVolatileImage.java
diff -N libjava/gnu/java/awt/peer/gtk/GtkVolatileImage.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/java/awt/peer/gtk/GtkVolatileImage.java	9 Jul 2005 22:09:36 -0000
@@ -0,0 +1,118 @@
+/* GtkVolatileImage.java -- a hardware-accelerated image buffer
+   Copyright (C) 2005  Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.java.awt.peer.gtk;
+
+import java.awt.ImageCapabilities;
+import java.awt.Graphics2D;
+import java.awt.GraphicsConfiguration;
+import java.awt.image.BufferedImage;
+import java.awt.image.ImageObserver;
+import java.awt.image.VolatileImage;
+
+public class GtkVolatileImage extends VolatileImage
+{
+  private int width;
+  private int height;
+  private ImageCapabilities caps;
+
+  public GtkVolatileImage(int width, int height)
+  {
+    this(width, height, null);
+  }
+
+  public GtkVolatileImage(int width, int height, ImageCapabilities caps)
+  {
+    this.width = width;
+    this.height = height;
+    this.caps = caps;
+  }
+
+  // FIXME: should return a buffered image snapshot of the accelerated
+  // visual
+  public BufferedImage getSnapshot()
+  {
+    return null;
+  }
+
+  public int getWidth()
+  {
+    return width;
+  }
+
+  public int getHeight()
+  {
+    return height;
+  }
+
+  // FIXME: should return a graphics wrapper around this image's
+  // visual
+  public Graphics2D createGraphics()
+  {
+    return null;
+  }
+
+  public int validate(GraphicsConfiguration gc)
+  {
+    return VolatileImage.IMAGE_OK;
+  }
+
+  public boolean contentsLost()
+  {
+    return false;
+  }
+
+  public ImageCapabilities getCapabilities()
+  {
+    return caps;
+  }
+
+  public synchronized Object getProperty (String name, ImageObserver observer)
+  {
+    return null;
+  }
+
+  public synchronized int getWidth (ImageObserver observer)
+  {
+    return width;
+  }
+  
+  public synchronized int getHeight (ImageObserver observer)
+  {
+    return height;
+  }
+}
Index: libjava/gnu/javax/swing/text/html/package.html
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/package.html
diff -N libjava/gnu/javax/swing/text/html/package.html
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/package.html	9 Jul 2005 22:09:36 -0000
@@ -0,0 +1,50 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+<!-- package.html - describes classes in javax.swing.text.html package.
+   Copyright (C) 2002 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. -->
+
+<html>
+<head><title>GNU Classpath - javax.swing.text.html</title></head>
+
+<body>
+<p> Provides supporting classes for web browsers,
+ web robots, web page content analysers, web editors and
+ other applications applications working with Hypertext
+ Markup Language (HTML).
+</p>
+
+</body>
+</html>
Index: libjava/gnu/javax/swing/text/html/parser/HTML_401F.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/HTML_401F.java
diff -N libjava/gnu/javax/swing/text/html/parser/HTML_401F.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/HTML_401F.java	9 Jul 2005 22:09:36 -0000
@@ -0,0 +1,3729 @@
+/* HTML_401F.java -- HTML 4.01 FRAMESET DTD java conception.
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser;
+
+import gnu.javax.swing.text.html.parser.models.PCDATAonly_model;
+import gnu.javax.swing.text.html.parser.models.TableRowContentModel;
+import gnu.javax.swing.text.html.parser.models.noTagModel;
+
+import java.io.IOException;
+import java.io.Serializable;
+
+import javax.swing.text.html.parser.*;
+import javax.swing.text.html.parser.ContentModel;
+import javax.swing.text.html.parser.DTDConstants;
+
+/**
+ * This class represents the java implementation of the HTML 4.01
+ * ( -//W3C//DTD HTML 4.01 Frameset//EN ) Frameset version. The
+ * Frameset version includes as recommended, as obsoleted features and
+ * also the frameset support. This the default DTD to parse HTML
+ * documents in this implementation, containing 315 pre-defined general
+ * entities and 92 elements.
+ *
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class HTML_401F
+  extends gnuDTD
+  implements DTDConstants, Serializable
+{
+   private static final long serialVersionUID = 1;
+
+   /**
+    * The standard name of this DTD,
+    * '-//W3C//DTD HTML 4.01 Frameset//EN'
+    */
+   public static final String DTD_NAME = "-//W3C//DTD HTML 4.01 Frameset//EN";
+
+   /**
+    * The integer representing length in pixels.
+    */
+    static final int PIXELS = NUMBER;
+
+    static final String[] NONE = new String[0];
+
+  /* Define the HTML tags. */
+    static final String PCDATA = "#pcdata";
+    static final String A = "a";
+    static final String ABBR = "abbr";
+    static final String ACRONYM = "acronym";
+    static final String ADDRESS = "address";
+    static final String APPLET = "applet";
+    static final String AREA = "area";
+    static final String B = "b";
+    static final String BASE = "base";
+    static final String BASEFONT = "basefont";
+    static final String BDO = "bdo";
+    static final String BIG = "big";
+    static final String BLOCKQUOTE = "blockquote";
+    static final String BODY = "body";
+    static final String BR = "br";
+    static final String BUTTON = "button";
+    static final String CAPTION = "caption";
+    static final String CENTER = "center";
+    static final String CITE = "cite";
+    static final String CODE = "code";
+    static final String COL = "col";
+    static final String COLGROUP = "colgroup";
+    static final String DEFAULTS = "default";
+    static final String DD = "dd";
+    static final String DEL = "del";
+    static final String DFN = "dfn";
+    static final String DIR = "dir";
+    static final String DIV = "div";
+    static final String DL = "dl";
+    static final String DT = "dt";
+    static final String EM = "em";
+    static final String FIELDSET = "fieldset";
+    static final String FONT = "font";
+    static final String FORM = "form";
+    static final String FRAME = "frame";
+    static final String FRAMESET = "frameset";
+    static final String H1 = "h1";
+    static final String H2 = "h2";
+    static final String H3 = "h3";
+    static final String H4 = "h4";
+    static final String H5 = "h5";
+    static final String H6 = "h6";
+    static final String HEAD = "head";
+    static final String HR = "hr";
+    static final String HTML = "html";
+    static final String I = "i";
+    static final String IFRAME = "iframe";
+    static final String IMG = "img";
+    static final String INPUT = "input";
+    static final String INS = "ins";
+    static final String ISINDEX = "isindex";
+    static final String KBD = "kbd";
+    static final String LABEL = "label";
+    static final String LEGEND = "legend";
+    static final String LI = "li";
+    static final String LINK = "link";
+    static final String MAP = "map";
+    static final String MENU = "menu";
+    static final String META = "meta";
+    static final String NOFRAMES = "noframes";
+    static final String NOSCRIPT = "noscript";
+    static final String NONES    = "none";
+    static final String sNAME    = "name";
+    static final String OBJECT = "object";
+    static final String OL = "ol";
+    static final String OPTGROUP = "optgroup";
+    static final String OPTION = "option";
+    static final String P = "p";
+    static final String PARAM = "param";
+    static final String PRE = "pre";
+    static final String Q = "q";
+    static final String S = "s";
+    static final String SAMP = "samp";
+    static final String SCRIPT = "script";
+    static final String SELECT = "select";
+    static final String SMALL = "small";
+    static final String SPAN = "span";
+    static final String STRIKE = "strike";
+    static final String STRONG = "strong";
+    static final String STYLE = "style";
+    static final String SUB = "sub";
+    static final String SUP = "sup";
+    static final String TABLE = "table";
+    static final String TBODY = "tbody";
+    static final String TD = "td";
+    static final String TEXTAREA = "textarea";
+    static final String TFOOT = "tfoot";
+    static final String TH = "th";
+    static final String THEAD = "thead";
+    static final String TITLE = "title";
+    static final String TR = "tr";
+    static final String TT = "tt";
+    static final String U = "u";
+    static final String UL = "ul";
+    static final String VAR = "var";
+
+  /* Define the attribute constants. */
+    static final String C_0 = "0";
+    static final String C_1 = "1";
+    static final String CHECKBOX = "checkbox";
+    static final String DATA = "data";
+    static final String FILE = "file";
+    static final String GET = "get";
+    static final String HIDDEN = "hidden";
+    static final String IMAGE = "image";
+    static final String PASSWORD = "password";
+    static final String POST = "post";
+    static final String RADIO = "radio";
+    static final String REF = "ref";
+    static final String RESET = "reset";
+    static final String SUBMIT = "submit";
+    static final String TEXT = "text";
+    static final String ABOVE = "above";
+    static final String ACCEPT = "accept";
+    static final String ACCEPTCHARSET = "accept-charset";
+    static final String ACCESSKEY = "accesskey";
+    static final String ACTION = "action";
+    static final String ALIGN = "align";
+    static final String ALINK = "alink";
+    static final String ALL = "all";
+    static final String ALT = "alt";
+    static final String APPLICATION_X_WWW_FORM_URLENCODED
+     = "application/x-www-form-urlencoded";
+    static final String ARCHIVE = "archive";
+    static final String AUTO = "auto";
+    static final String AXIS = "axis";
+    static final String BACKGROUND = "background";
+    static final String BASELINE = "baseline";
+    static final String BELOW = "below";
+    static final String BGCOLOR = "bgcolor";
+    static final String BORDER = "border";
+    static final String BOTTOM = "bottom";
+    static final String BOX = "box";
+    static final String CELLPADDING = "cellpadding";
+    static final String CELLSPACING = "cellspacing";
+    static final String CHAR = "char";
+    static final String CHAROFF = "charoff";
+    static final String CHARSET = "charset";
+    static final String CHECKED = "checked";
+    static final String CIRCLE = "circle";
+    static final String CLASS = "class";
+    static final String CLASSID = "classid";
+    static final String CLEAR = "clear";
+    static final String CODEBASE = "codebase";
+    static final String CODETYPE = "codetype";
+    static final String COLOR = "color";
+    static final String COLS = "cols";
+    static final String COLSPAN = "colspan";
+    static final String COMPACT = "compact";
+    static final String CONTENT = "content";
+    static final String COORDS = "coords";
+    static final String DATAPAGESIZE = "datapagesize";
+    static final String DATETIME = "datetime";
+    static final String DECLARE = "declare";
+    static final String DEFER = "defer";
+    static final String DISABLED = "disabled";
+    static final String DISC = "disc";
+    static final String ENCTYPE = "enctype";
+    static final String EVENT = "event";
+    static final String FACE = "face";
+    static final String FOR = "for";
+    static final String FRAMEBORDER = "frameborder";
+    static final String GROUPS = "groups";
+    static final String HEADERS = "headers";
+    static final String HEIGHT = "height";
+    static final String HREF = "href";
+    static final String HREFLANG = "hreflang";
+    static final String HSIDES = "hsides";
+    static final String HSPACE = "hspace";
+    static final String HTTPEQUIV = "http-equiv";
+    static final String sID = "id";
+    static final String ISMAP = "ismap";
+    static final String JUSTIFY = "justify";
+    static final String LANG = "lang";
+    static final String LANGUAGE = "language";
+    static final String LEFT = "left";
+    static final String LHS = "lhs";
+    static final String LONGDESC = "longdesc";
+    static final String LTR = "ltr";
+    static final String MARGINHEIGHT = "marginheight";
+    static final String MARGINWIDTH = "marginwidth";
+    static final String MAXLENGTH = "maxlength";
+    static final String MEDIA = "media";
+    static final String METHOD = "method";
+    static final String MIDDLE = "middle";
+    static final String MULTIPLE = "multiple";
+    static final String NO = "no";
+    static final String NOHREF = "nohref";
+    static final String NORESIZE = "noresize";
+    static final String NOSHADE = "noshade";
+    static final String NOWRAP = "nowrap";
+    static final String ONBLUR = "onblur";
+    static final String ONCHANGE = "onchange";
+    static final String ONCLICK = "onclick";
+    static final String ONDBLCLICK = "ondblclick";
+    static final String ONFOCUS = "onfocus";
+    static final String ONKEYDOWN = "onkeydown";
+    static final String ONKEYPRESS = "onkeypress";
+    static final String ONKEYUP = "onkeyup";
+    static final String ONLOAD = "onload";
+    static final String ONMOUSEDOWN = "onmousedown";
+    static final String ONMOUSEMOVE = "onmousemove";
+    static final String ONMOUSEOUT = "onmouseout";
+    static final String ONMOUSEOVER = "onmouseover";
+    static final String ONMOUSEUP = "onmouseup";
+    static final String ONRESET = "onreset";
+    static final String ONSELECT = "onselect";
+    static final String ONSUBMIT = "onsubmit";
+    static final String ONUNLOAD = "onunload";
+    static final String POLY = "poly";
+    static final String PROFILE = "profile";
+    static final String PROMPT = "prompt";
+    static final String READONLY = "readonly";
+    static final String RECT = "rect";
+    static final String REL = "rel";
+    static final String REV = "rev";
+    static final String RHS = "rhs";
+    static final String RIGHT = "right";
+    static final String ROW = "row";
+    static final String ROWGROUP = "rowgroup";
+    static final String ROWS = "rows";
+    static final String ROWSPAN = "rowspan";
+    static final String RTL = "rtl";
+    static final String RULES = "rules";
+    static final String SCHEME = "scheme";
+    static final String SCOPE = "scope";
+    static final String SCROLLING = "scrolling";
+    static final String SELECTED = "selected";
+    static final String SHAPE = "shape";
+    static final String SIZE = "size";
+    static final String SQUARE = "square";
+    static final String SRC = "src";
+    static final String STANDBY = "standby";
+    static final String START = "start";
+    static final String SUMMARY = "summary";
+    static final String TABINDEX = "tabindex";
+    static final String TARGET = "target";
+    static final String TOP = "top";
+    static final String TYPE = "type";
+    static final String USEMAP = "usemap";
+    static final String VALIGN = "valign";
+    static final String VALUE = "value";
+    static final String VALUETYPE = "valuetype";
+    static final String VERSION = "version";
+    static final String VLINK = "vlink";
+    static final String VOID = "void";
+    static final String VSIDES = "vsides";
+    static final String VSPACE = "vspace";
+    static final String WIDTH = "width";
+    static final String YES = "yes";
+
+    static final String[] BLOCK =
+    new String[] {
+      ADDRESS, BLOCKQUOTE, CENTER, DIR,
+      DIV, DL, FIELDSET, FORM,
+      H1, H2, H3, H4, H5, H6,
+      HR, ISINDEX, MENU, NOFRAMES, NOSCRIPT,
+      OL, P, PRE, TABLE, UL
+    };
+
+   /**
+   * Creates this DTD, filling in the entities and attributes data
+   * as defined in -//W3C//DTD HTML 4.01 Frameset//EN.
+   */
+  protected HTML_401F()
+  {
+    super(DTD_NAME);
+    defineEntities();
+    defineElements();
+  }
+
+  /**
+   * Either takes the document (by name) from DTD table, or
+   * creates a new instance and registers it in the tabe.
+   * The document is registerd under name "-//W3C//DTD HTML 4.01 Frameset//EN".
+   * @return The new or existing DTD for parsing HTML 4.01 Frameset.
+   */
+  public static DTD getInstance()
+  {
+    try
+      {
+        DTD dtd = getDTD(DTD_NAME);
+        if (dtd == null || dtd.getClass().equals(DTD.class))
+          {
+            dtd = new HTML_401F();
+            putDTDHash(DTD_NAME, dtd);
+          }
+        return dtd;
+      }
+    catch (IOException ex)
+      {
+        throw new Error("This should never happen. Report the bug.", ex);
+      }
+  }
+
+  /**
+   * Define all elements of this DTD.
+   */
+  protected void defineElements()
+  {
+    /* Define the elements. */
+      defElement(PCDATA, 0, false, false, null, NONE, NONE,
+        new AttributeList[ 0 ]);
+
+      defElement(A, 0, false, false, null,
+      new String[] {
+        A
+      }
+      ,
+      new String[] {
+        PCDATA, ABBR, ACRONYM, APPLET,
+        B, BASEFONT, BDO, BIG, BR,
+        BUTTON, CITE, CODE, DFN, EM,
+        FONT, I, IFRAME, IMG, INPUT,
+        KBD, LABEL, MAP, OBJECT, Q,
+        S, SAMP, SCRIPT, SELECT, SMALL,
+        SPAN, STRIKE, STRONG, SUB, SUP,
+        TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(CHARSET, null, null, 0, IMPLIED),
+        attr(TYPE, null, null, 0, IMPLIED),
+        attr(sNAME, null, null, 0, IMPLIED),
+        attr(HREF, null, null, 0, IMPLIED),
+        attr(HREFLANG, null, null, 0, IMPLIED),
+        attr(TARGET, null, null, 0, IMPLIED),
+        attr(REL, null, null, 0, IMPLIED),
+        attr(REV, null, null, 0, IMPLIED),
+        attr(ACCESSKEY, null, null, 0, IMPLIED),
+        attr(SHAPE, RECT,  new String[] { RECT, CIRCLE, POLY,  DEFAULTS },
+          0, DEFAULT),
+        attr(COORDS, null, null, 0, IMPLIED),
+        attr(TABINDEX, null, null, NUMBER, IMPLIED),
+        attr(ONFOCUS, null, null, 0, IMPLIED),
+        attr(ONBLUR, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(ABBR, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(ACRONYM, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(ADDRESS, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR,
+        P
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(APPLET, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR,
+        ADDRESS, BLOCKQUOTE, CENTER, DIR, DIV,
+        DL, FIELDSET, FORM, H1, H2,
+        H3, H4, H5, H6, HR,
+        ISINDEX, MENU, NOFRAMES, NOSCRIPT, OL,
+        P, PRE, TABLE, UL, PARAM
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(CODEBASE, null, null, 0, IMPLIED),
+        attr(ARCHIVE, null, null, 0, IMPLIED),
+        attr(CODE, null, null, 0, IMPLIED),
+        attr(OBJECT, null, null, 0, IMPLIED),
+        attr(ALT, null, null, 0, IMPLIED),
+        attr(sNAME, null, null, 0, IMPLIED),
+        attr(WIDTH, null, null, 0, REQUIRED),
+        attr(HEIGHT, null, null, 0, REQUIRED),
+        attr(ALIGN, null,  new String[] { TOP, MIDDLE, BOTTOM, LEFT, RIGHT },
+          0, IMPLIED),
+        attr(HSPACE, null, null, 0, IMPLIED),
+        attr(VSPACE, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(AREA, EMPTY, false, true, null,
+      NONE
+      ,
+      NONE
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(SHAPE, RECT,  new String[] { RECT, CIRCLE, POLY, DEFAULTS },
+          0, DEFAULT),
+        attr(COORDS, null, null, 0, IMPLIED),
+        attr(HREF, null, null, 0, IMPLIED),
+        attr(TARGET, null, null, 0, IMPLIED),
+        attr(NOHREF, null,  new String[] { NOHREF }, 0, IMPLIED),
+        attr(ALT, null, null, 0, REQUIRED),
+        attr(TABINDEX, null, null, NUMBER, IMPLIED),
+        attr(ACCESSKEY, null, null, 0, IMPLIED),
+        attr(ONFOCUS, null, null, 0, IMPLIED),
+        attr(ONBLUR, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(B, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(BASE, EMPTY, false, true, null,
+      NONE
+      ,
+      NONE
+    ,
+      new AttributeList[] {
+        attr(HREF, null, null, 0, IMPLIED),
+        attr(TARGET, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(BASEFONT, EMPTY, false, true, null,
+      NONE
+      ,
+      NONE
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(SIZE, null, null, 0, REQUIRED),
+        attr(COLOR, null, null, 0, IMPLIED),
+        attr(FACE, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(BDO, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, REQUIRED)
+      }
+    );
+      defElement(BIG, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(BLOCKQUOTE, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR,
+        ADDRESS, BLOCKQUOTE, CENTER, DIR, DIV,
+        DL, FIELDSET, FORM, H1, H2,
+        H3, H4, H5, H6, HR,
+        ISINDEX, MENU, NOFRAMES, NOSCRIPT, OL,
+        P, PRE, TABLE, UL
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(CITE, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(BODY, 0, true, true, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR,
+        ADDRESS, BLOCKQUOTE, CENTER, DEL, DIR,
+        DIV, DL, FIELDSET, FORM, H1,
+        H2, H3, H4, H5, H6,
+        HR, INS, ISINDEX, MENU, NOFRAMES,
+        NOSCRIPT, OL, P, PRE, TABLE,
+        UL
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(ONLOAD, null, null, 0, IMPLIED),
+        attr(ONUNLOAD, null, null, 0, IMPLIED),
+        attr(BACKGROUND, null, null, 0, IMPLIED),
+        attr(BGCOLOR, null, null, 0, IMPLIED),
+        attr(TEXT, null, null, 0, IMPLIED),
+        attr(LINK, null, null, 0, IMPLIED),
+        attr(VLINK, null, null, 0, IMPLIED),
+        attr(ALINK, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(BR, EMPTY, false, true, null,
+      NONE
+      ,
+      NONE
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(CLEAR, "NONE",  new String[] { LEFT, ALL, RIGHT, NONES },
+          0, DEFAULT)
+      }
+    );
+      defElement(BUTTON, 0, false, false, null,
+      new String[] {
+        A, BUTTON, IFRAME, INPUT,
+        LABEL, SELECT, TEXTAREA, FIELDSET, FORM,
+        ISINDEX
+      }
+      ,
+      new String[] {
+        PCDATA, ABBR, ACRONYM, APPLET,
+        B, BASEFONT, BDO, BIG, BR,
+        CITE, CODE, DFN, EM, FONT,
+        I, IMG, KBD, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SMALL,
+        SPAN, STRIKE, STRONG, SUB, SUP,
+        TT, U, VAR, ADDRESS, BLOCKQUOTE,
+        CENTER, DIR, DIV, DL, H1,
+        H2, H3, H4, H5, H6,
+        HR, MENU, NOFRAMES, NOSCRIPT, OL,
+        P, PRE, TABLE, UL
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(sNAME, null, null, 0, IMPLIED),
+        attr(VALUE, null, null, 0, IMPLIED),
+        attr(TYPE, SUBMIT,  new String[] { BUTTON, SUBMIT, RESET }, 0, DEFAULT),
+        attr(DISABLED, null,  new String[] { DISABLED }, 0, IMPLIED),
+        attr(TABINDEX, null, null, NUMBER, IMPLIED),
+        attr(ACCESSKEY, null, null, 0, IMPLIED),
+        attr(ONFOCUS, null, null, 0, IMPLIED),
+        attr(ONBLUR, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(CAPTION, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(ALIGN, null,  new String[] { TOP, BOTTOM, LEFT, RIGHT },
+          0, IMPLIED)
+      }
+    );
+      defElement(CENTER, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR,
+        ADDRESS, BLOCKQUOTE, CENTER, DIR, DIV,
+        DL, FIELDSET, FORM, H1, H2,
+        H3, H4, H5, H6, HR,
+        ISINDEX, MENU, NOFRAMES, NOSCRIPT, OL,
+        P, PRE, TABLE, UL
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(CITE, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(CODE, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(COL, EMPTY, false, true, null,
+      NONE
+      ,
+      NONE
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(SPAN, C_1, null, NUMBER, DEFAULT),
+        attr(WIDTH, null, null, 0, IMPLIED),
+        attr(ALIGN, null,  new String[] { LEFT, CENTER, RIGHT, JUSTIFY, CHAR },
+          0, IMPLIED),
+        attr(CHAR, null, null, 0, IMPLIED),
+        attr(CHAROFF, null, null, 0, IMPLIED),
+        attr(VALIGN, null,  new String[] { TOP, MIDDLE, BOTTOM, BASELINE },
+          0, IMPLIED)
+      }
+    );
+      defElement(COLGROUP, 0, false, true, null,
+      NONE
+      ,
+      new String[] {
+        COL
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(SPAN, C_1, null, NUMBER, DEFAULT),
+        attr(WIDTH, null, null, 0, IMPLIED),
+        attr(ALIGN, null,  new String[] { LEFT, CENTER, RIGHT, JUSTIFY, CHAR },
+          0, IMPLIED),
+        attr(CHAR, null, null, 0, IMPLIED),
+        attr(CHAROFF, null, null, 0, IMPLIED),
+        attr(VALIGN, null,  new String[] { TOP, MIDDLE, BOTTOM, BASELINE },
+          0, IMPLIED)
+      }
+    );
+      defElement(DD, 0, false, true, new ContentModel(0,
+        new noTagModel( new String[] { DD, DT } ), null ),
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR,
+        ADDRESS, BLOCKQUOTE, CENTER, DIR, DIV,
+        DL, FIELDSET, FORM, H1, H2,
+        H3, H4, H5, H6, HR,
+        ISINDEX, MENU, NOFRAMES, NOSCRIPT, OL,
+        P, PRE, TABLE, UL
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(DEL, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR,
+        ADDRESS, BLOCKQUOTE, CENTER, DIR, DIV,
+        DL, FIELDSET, FORM, H1, H2,
+        H3, H4, H5, H6, HR,
+        ISINDEX, MENU, NOFRAMES, NOSCRIPT, OL,
+        P, PRE, TABLE, UL
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(CITE, null, null, 0, IMPLIED),
+        attr(DATETIME, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(DFN, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(DIR, 0, false, false, createListModel(),
+      new String[] {
+        ADDRESS, BLOCKQUOTE, CENTER, DIR,
+        DIV, DL, FIELDSET, FORM, H1,
+        H2, H3, H4, H5, H6,
+        HR, ISINDEX, MENU, NOFRAMES, NOSCRIPT,
+        OL, P, PRE, TABLE, UL
+      }
+      ,
+      new String[] {
+        LI, UL, OL
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(COMPACT, null,  new String[] { COMPACT }, 0, IMPLIED)
+      }
+    );
+      defElement(DIV, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR,
+        ADDRESS, BLOCKQUOTE, CENTER, DIR, DIV,
+        DL, FIELDSET, FORM, H1, H2,
+        H3, H4, H5, H6, HR,
+        ISINDEX, MENU, NOFRAMES, NOSCRIPT, OL,
+        P, PRE, TABLE, UL
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(ALIGN, null,  new String[] { LEFT, CENTER, RIGHT, JUSTIFY },
+          0, IMPLIED)
+      }
+    );
+      defElement(DL, 0, false, false, createDefListModel(),
+      NONE
+      ,
+      new String[] {
+        DD, DT
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(COMPACT, null,  new String[] { COMPACT }, 0, IMPLIED)
+      }
+    );
+      defElement(DT, 0, false, true,
+        new ContentModel(0,
+         new noTagModel( new String[] { DT, DD } ), null),
+        BLOCK
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(EM, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(FIELDSET, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR,
+        ADDRESS, BLOCKQUOTE, CENTER, DIR, DIV,
+        DL, FIELDSET, FORM, H1, H2,
+        H3, H4, H5, H6, HR,
+        ISINDEX, MENU, NOFRAMES, NOSCRIPT, OL,
+        P, PRE, TABLE, UL, LEGEND
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(FONT, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(SIZE, null, null, 0, IMPLIED),
+        attr(COLOR, null, null, 0, IMPLIED),
+        attr(FACE, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(FORM, 0, false, false, null,
+      new String[] {
+        FORM
+      }
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR,
+        ADDRESS, BLOCKQUOTE, CENTER, DIR, DIV,
+        DL, FIELDSET, H1, H2, H3,
+        H4, H5, H6, HR, ISINDEX,
+        MENU, NOFRAMES, NOSCRIPT, OL, P,
+        PRE, TABLE, UL
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(ACTION, null, null, 0, REQUIRED),
+        attr(METHOD, GET,  new String[] { GET, POST }, 0, DEFAULT),
+        attr(ENCTYPE, APPLICATION_X_WWW_FORM_URLENCODED, null, 0, DEFAULT),
+        attr(ACCEPT, null, null, 0, IMPLIED),
+        attr(sNAME, null, null, 0, IMPLIED),
+        attr(ONSUBMIT, null, null, 0, IMPLIED),
+        attr(ONRESET, null, null, 0, IMPLIED),
+        attr(TARGET, null, null, 0, IMPLIED),
+        attr(ACCEPTCHARSET, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(FRAME, EMPTY, false, true, null,
+      NONE
+      ,
+      NONE
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LONGDESC, null, null, 0, IMPLIED),
+        attr(sNAME, null, null, 0, IMPLIED),
+        attr(SRC, null, null, 0, IMPLIED),
+        attr(FRAMEBORDER, C_1,  new String[] { C_1, C_0 }, 0, DEFAULT),
+        attr(MARGINWIDTH, null, null, PIXELS, IMPLIED),
+        attr(MARGINHEIGHT, null, null, PIXELS, IMPLIED),
+        attr(NORESIZE, null,  new String[] { NORESIZE }, 0, IMPLIED),
+        attr(SCROLLING, AUTO,  new String[] { YES, NO, AUTO }, 0, DEFAULT)
+      }
+    );
+      defElement(FRAMESET, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        NOFRAMES, FRAME, FRAMESET
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(ROWS, null, null, 0, IMPLIED),
+        attr(COLS, null, null, 0, IMPLIED),
+        attr(ONLOAD, null, null, 0, IMPLIED),
+        attr(ONUNLOAD, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(H1, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(ALIGN, null,  new String[] { LEFT, CENTER, RIGHT, JUSTIFY },
+          0, IMPLIED)
+      }
+    );
+      defElement(H2, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(ALIGN, null,  new String[] { LEFT, CENTER, RIGHT, JUSTIFY },
+          0, IMPLIED)
+      }
+    );
+      defElement(H3, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(ALIGN, null,  new String[] { LEFT, CENTER, RIGHT, JUSTIFY },
+          0, IMPLIED)
+      }
+    );
+      defElement(H4, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(ALIGN, null,  new String[] { LEFT, CENTER, RIGHT, JUSTIFY },
+          0, IMPLIED)
+      }
+    );
+      defElement(H5, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(ALIGN, null,  new String[] { LEFT, CENTER, RIGHT, JUSTIFY },
+          0, IMPLIED)
+      }
+    );
+      defElement(H6, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(ALIGN, null,  new String[] { LEFT, CENTER, RIGHT, JUSTIFY },
+          0, IMPLIED)
+      }
+    );
+      defElement(HEAD, 0, true, true, null,
+      new String[] {
+        BODY
+      }
+      ,
+      new String[] {
+       TITLE, ISINDEX, BASE,
+       SCRIPT, STYLE, META, LINK, OBJECT
+      }
+    ,
+      new AttributeList[] {
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(PROFILE, null, null, 0, IMPLIED)
+      }
+    );
+
+      defElement(HR, EMPTY, false, true, null,
+      NONE
+      ,
+      NONE
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(ALIGN, null,  new String[] { LEFT, CENTER, RIGHT }, 0, IMPLIED),
+        attr(NOSHADE, null,  new String[] { NOSHADE }, 0, IMPLIED),
+        attr(SIZE, null, null, 0, IMPLIED),
+        attr(WIDTH, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(HTML, 0, true, true, createHtmlContentModel(),
+      NONE
+      ,
+      new String[] {
+        HEAD, BODY
+      }
+    ,
+      new AttributeList[] {
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(VERSION, DTD_NAME, null, 0, FIXED)
+      }
+    );
+      defElement(I, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(IFRAME, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR,
+        ADDRESS, BLOCKQUOTE, CENTER, DIR, DIV,
+        DL, FIELDSET, FORM, H1, H2,
+        H3, H4, H5, H6, HR,
+        ISINDEX, MENU, NOFRAMES, NOSCRIPT, OL,
+        P, PRE, TABLE, UL
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LONGDESC, null, null, 0, IMPLIED),
+        attr(sNAME, null, null, 0, IMPLIED),
+        attr(SRC, null, null, 0, IMPLIED),
+        attr(FRAMEBORDER, C_1,  new String[] { C_1, C_0 }, 0, DEFAULT),
+        attr(MARGINWIDTH, null, null, PIXELS, IMPLIED),
+        attr(MARGINHEIGHT, null, null, PIXELS, IMPLIED),
+        attr(SCROLLING, AUTO,  new String[] { YES, NO, AUTO }, 0, DEFAULT),
+        attr(ALIGN, null,  new String[] { TOP, MIDDLE, BOTTOM, LEFT, RIGHT },
+          0, IMPLIED),
+        attr(HEIGHT, null, null, 0, IMPLIED),
+        attr(WIDTH, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(IMG, EMPTY, false, true, null,
+      NONE
+      ,
+      NONE
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(SRC, null, null, 0, REQUIRED),
+        attr(ALT, null, null, 0, REQUIRED),
+        attr(LONGDESC, null, null, 0, IMPLIED),
+        attr(sNAME, null, null, 0, IMPLIED),
+        attr(HEIGHT, null, null, 0, IMPLIED),
+        attr(WIDTH, null, null, 0, IMPLIED),
+        attr(USEMAP, null, null, 0, IMPLIED),
+        attr(ISMAP, null,  new String[] { ISMAP }, 0, IMPLIED),
+        attr(ALIGN, null,  new String[] { TOP, MIDDLE, BOTTOM, LEFT, RIGHT },
+          0, IMPLIED),
+        attr(BORDER, null, null, PIXELS, IMPLIED),
+        attr(HSPACE, null, null, 0, IMPLIED),
+        attr(VSPACE, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(INPUT, EMPTY, false, true, null,
+      NONE
+      ,
+      NONE
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(TYPE, TEXT,  new String[] { TEXT, PASSWORD, CHECKBOX, RADIO,
+          SUBMIT, RESET, FILE, HIDDEN, IMAGE, BUTTON }, 0, DEFAULT),
+        attr(sNAME, null, null, 0, IMPLIED),
+        attr(VALUE, null, null, 0, IMPLIED),
+        attr(CHECKED, null,  new String[] { CHECKED }, 0, IMPLIED),
+        attr(DISABLED, null,  new String[] { DISABLED }, 0, IMPLIED),
+        attr(READONLY, null,  new String[] { READONLY }, 0, IMPLIED),
+        attr(SIZE, null, null, 0, IMPLIED),
+        attr(MAXLENGTH, null, null, 0, IMPLIED),
+        attr(SRC, null, null, 0, IMPLIED),
+        attr(ALT, null, null, 0, IMPLIED),
+        attr(USEMAP, null, null, 0, IMPLIED),
+        attr(ISMAP, null,  new String[] { ISMAP }, 0, IMPLIED),
+        attr(TABINDEX, null, null, NUMBER, IMPLIED),
+        attr(ACCESSKEY, null, null, 0, IMPLIED),
+        attr(ONFOCUS, null, null, 0, IMPLIED),
+        attr(ONBLUR, null, null, 0, IMPLIED),
+        attr(ONSELECT, null, null, 0, IMPLIED),
+        attr(ONCHANGE, null, null, 0, IMPLIED),
+        attr(ACCEPT, null, null, 0, IMPLIED),
+        attr(ALIGN, null,  new String[] { TOP, MIDDLE, BOTTOM, LEFT, RIGHT },
+          0, IMPLIED)
+      }
+    );
+      defElement(INS, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR,
+        ADDRESS, BLOCKQUOTE, CENTER, DIR, DIV,
+        DL, FIELDSET, FORM, H1, H2,
+        H3, H4, H5, H6, HR,
+        ISINDEX, MENU, NOFRAMES, NOSCRIPT, OL,
+        P, PRE, TABLE, UL
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(CITE, null, null, 0, IMPLIED),
+        attr(DATETIME, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(ISINDEX, EMPTY, false, true, null,
+      NONE
+      ,
+      NONE
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(PROMPT, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(KBD, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(LABEL, 0, false, false, null,
+      new String[] {
+        LABEL
+      }
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, MAP, OBJECT, Q,
+        S, SAMP, SCRIPT, SELECT, SMALL,
+        SPAN, STRIKE, STRONG, SUB, SUP,
+        TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(FOR, null, null, 0, IMPLIED),
+        attr(ACCESSKEY, null, null, 0, IMPLIED),
+        attr(ONFOCUS, null, null, 0, IMPLIED),
+        attr(ONBLUR, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(LEGEND, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(ACCESSKEY, null, null, 0, IMPLIED),
+        attr(ALIGN, null,  new String[] { TOP, BOTTOM, LEFT, RIGHT },
+          0, IMPLIED)
+      }
+    );
+      // LI has a special content model that will be resolved into
+      // by transformer.
+      defElement(LI, 0, false, true,
+        new ContentModel(0,
+          new noTagModel(LI), null),
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR,
+        ADDRESS, BLOCKQUOTE, CENTER, DIR, DIV,
+        DL, FIELDSET, FORM, H1, H2,
+        H3, H4, H5, H6, HR,
+        ISINDEX, MENU, NOFRAMES, NOSCRIPT, OL,
+        P, PRE, TABLE, UL
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(TYPE, null, null, 0, IMPLIED),
+        attr(VALUE, null, null, NUMBER, IMPLIED)
+      }
+    );
+      defElement(LINK, EMPTY, false, true, null,
+      NONE
+      ,
+      NONE
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(CHARSET, null, null, 0, IMPLIED),
+        attr(HREF, null, null, 0, IMPLIED),
+        attr(HREFLANG, null, null, 0, IMPLIED),
+        attr(TYPE, null, null, 0, IMPLIED),
+        attr(REL, null, null, 0, IMPLIED),
+        attr(REV, null, null, 0, IMPLIED),
+        attr(MEDIA, null, null, 0, IMPLIED),
+        attr(TARGET, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(MAP, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        ADDRESS, BLOCKQUOTE, CENTER, DIR,
+        DIV, DL, FIELDSET, FORM, H1,
+        H2, H3, H4, H5, H6,
+        HR, ISINDEX, MENU, NOFRAMES, NOSCRIPT,
+        OL, P, PRE, TABLE, UL,
+        AREA
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(sNAME, null, null, 0, REQUIRED)
+      }
+    );
+      defElement(MENU, 0, false, false, createListModel(),
+      new String[] {
+        ADDRESS, BLOCKQUOTE, CENTER, DIR,
+        DIV, DL, FIELDSET, FORM, H1,
+        H2, H3, H4, H5, H6,
+        HR, ISINDEX, MENU, NOFRAMES, NOSCRIPT,
+        OL, P, PRE, TABLE, UL
+      }
+      ,
+      new String[] {
+        LI, UL, OL
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(COMPACT, null,  new String[] { COMPACT }, 0, IMPLIED)
+      }
+    );
+      defElement(META, EMPTY, false, true, null,
+      NONE
+      ,
+      NONE
+    ,
+      new AttributeList[] {
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(HTTPEQUIV, null, null, 0, IMPLIED),
+        attr(sNAME, null, null, NAME, IMPLIED),
+        attr(CONTENT, null, null, 0, REQUIRED),
+        attr(SCHEME, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(NOFRAMES, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR,
+        ADDRESS, BLOCKQUOTE, CENTER, DIR, DIV,
+        DL, FIELDSET, FORM, H1, H2,
+        H3, H4, H5, H6, HR,
+        ISINDEX, MENU, NOFRAMES, NOSCRIPT, OL,
+        P, PRE, TABLE, UL
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(NOSCRIPT, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR,
+        ADDRESS, BLOCKQUOTE, CENTER, DIR, DIV,
+        DL, FIELDSET, FORM, H1, H2,
+        H3, H4, H5, H6, HR,
+        ISINDEX, MENU, NOFRAMES, NOSCRIPT, OL,
+        P, PRE, TABLE, UL
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(OBJECT, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR,
+        ADDRESS, BLOCKQUOTE, CENTER, DIR, DIV,
+        DL, FIELDSET, FORM, H1, H2,
+        H3, H4, H5, H6, HR,
+        ISINDEX, MENU, NOFRAMES, NOSCRIPT, OL,
+        P, PRE, TABLE, UL, PARAM
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(DECLARE, null,  new String[] { DECLARE }, 0, IMPLIED),
+        attr(CLASSID, null, null, 0, IMPLIED),
+        attr(CODEBASE, null, null, 0, IMPLIED),
+        attr(DATA, null, null, 0, IMPLIED),
+        attr(TYPE, null, null, 0, IMPLIED),
+        attr(CODETYPE, null, null, 0, IMPLIED),
+        attr(ARCHIVE, null, null, 0, IMPLIED),
+        attr(STANDBY, null, null, 0, IMPLIED),
+        attr(HEIGHT, null, null, 0, IMPLIED),
+        attr(WIDTH, null, null, 0, IMPLIED),
+        attr(USEMAP, null, null, 0, IMPLIED),
+        attr(sNAME, null, null, 0, IMPLIED),
+        attr(TABINDEX, null, null, NUMBER, IMPLIED),
+        attr(ALIGN, null,  new String[] { TOP, MIDDLE, BOTTOM, LEFT, RIGHT },
+          0, IMPLIED),
+        attr(BORDER, null, null, PIXELS, IMPLIED),
+        attr(HSPACE, null, null, 0, IMPLIED),
+        attr(VSPACE, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(OL, 0, false, false, createListModel(),
+      NONE
+      ,
+      new String[] {
+      // See note on the createListModel method
+      LI, UL, OL
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(TYPE, null, null, 0, IMPLIED),
+        attr(COMPACT, null,  new String[] { COMPACT }, 0, IMPLIED),
+        attr(START, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(OPTGROUP, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        OPTION
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(DISABLED, null,  new String[] { DISABLED }, 0, IMPLIED),
+        attr(LABEL, null, null, 0, REQUIRED)
+      }
+    );
+      defElement(OPTION, 0, false, true, new ContentModel(0,
+       new PCDATAonly_model(), null),
+       NONE,
+       new String[] {
+         PCDATA
+       }
+      ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(SELECTED, null,  new String[] { SELECTED }, 0, IMPLIED),
+        attr(DISABLED, null,  new String[] { DISABLED }, 0, IMPLIED),
+        attr(LABEL, null, null, 0, IMPLIED),
+        attr(VALUE, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(P, 0, false, true, new ContentModel( 0,
+       new noTagModel(P), null),
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(ALIGN, null,  new String[] { LEFT, CENTER, RIGHT, JUSTIFY },
+          0, IMPLIED)
+      }
+    );
+      defElement(PARAM, EMPTY, false, true, null,
+      NONE
+      ,
+      NONE
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(sNAME, null, null, 0, REQUIRED),
+        attr(VALUE, null, null, 0, IMPLIED),
+        attr(VALUETYPE, DATA,  new String[] { DATA, REF, OBJECT }, 0, DEFAULT),
+        attr(TYPE, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(PRE, 0, false, false, null,
+      new String[] {
+        APPLET, BASEFONT, BIG, FONT,
+        IMG, OBJECT, SMALL, SUB, SUP
+      }
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        B, BDO, BR, BUTTON, CITE,
+        CODE, DFN, EM, I, IFRAME,
+        INPUT, KBD, LABEL, MAP, Q,
+        S, SAMP, SCRIPT, SELECT, SPAN,
+        STRIKE, STRONG, TEXTAREA, TT, U,
+        VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(WIDTH, null, null, NUMBER, IMPLIED)
+      }
+    );
+      defElement(Q, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(CITE, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(S, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(SAMP, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(SCRIPT, CDATA, false, false, null,
+      NONE
+      ,
+      NONE
+    ,
+      new AttributeList[] {
+        attr(CHARSET, null, null, 0, IMPLIED),
+        attr(TYPE, null, null, 0, REQUIRED),
+        attr(LANGUAGE, null, null, 0, IMPLIED),
+        attr(SRC, null, null, 0, IMPLIED),
+        attr(DEFER, null,  new String[] { DEFER }, 0, IMPLIED),
+        attr(EVENT, null, null, 0, IMPLIED),
+        attr(FOR, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(SELECT, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        OPTGROUP, OPTION
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(sNAME, null, null, 0, IMPLIED),
+        attr(SIZE, null, null, NUMBER, IMPLIED),
+        attr(MULTIPLE, null,  new String[] { MULTIPLE }, 0, IMPLIED),
+        attr(DISABLED, null,  new String[] { DISABLED }, 0, IMPLIED),
+        attr(TABINDEX, null, null, NUMBER, IMPLIED),
+        attr(ONFOCUS, null, null, 0, IMPLIED),
+        attr(ONBLUR, null, null, 0, IMPLIED),
+        attr(ONCHANGE, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(SMALL, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(SPAN, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(STRIKE, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(STRONG, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(STYLE, CDATA, false, false, null,
+      NONE
+      ,
+      NONE
+    ,
+      new AttributeList[] {
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(TYPE, null, null, 0, REQUIRED),
+        attr(MEDIA, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(SUB, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(SUP, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(TABLE, 0, false, false, createTableContentModel(),
+      NONE
+      ,
+      new String[] {
+        CAPTION, COL, COLGROUP, TBODY,
+        TFOOT, THEAD
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(SUMMARY, null, null, 0, IMPLIED),
+        attr(WIDTH, null, null, 0, IMPLIED),
+        attr(BORDER, null, null, PIXELS, IMPLIED),
+        attr(FRAME, null,  new String[] { VOID, ABOVE, BELOW, HSIDES, LHS, RHS,
+         VSIDES, BOX, BORDER }, 0, IMPLIED),
+        attr(RULES, null,  new String[] { NONES, GROUPS, ROWS, COLS, ALL },
+         0, IMPLIED),
+        attr(CELLSPACING, null, null, 0, IMPLIED),
+        attr(CELLPADDING, null, null, 0, IMPLIED),
+        attr(ALIGN, null,  new String[] { LEFT, CENTER, RIGHT }, 0, IMPLIED),
+        attr(BGCOLOR, null, null, 0, IMPLIED),
+        attr(DATAPAGESIZE, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(TBODY, 0, true, true, model(TR,'+'),
+      NONE
+      ,
+      new String[] {
+        TR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(ALIGN, null,  new String[] { LEFT, CENTER, RIGHT, JUSTIFY, CHAR },
+          0, IMPLIED),
+        attr(CHAR, null, null, 0, IMPLIED),
+        attr(CHAROFF, null, null, 0, IMPLIED),
+        attr(VALIGN, null,  new String[] { TOP, MIDDLE, BOTTOM, BASELINE },
+          0, IMPLIED)
+      }
+    );
+
+      defElement(TD, 0, false, true,
+       new ContentModel(0,
+        new noTagModel(new String[] {"TD", "TH", "TR" } ), null),
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR,
+        ADDRESS, BLOCKQUOTE, CENTER, DIR, DIV,
+        DL, FIELDSET, FORM, H1, H2,
+        H3, H4, H5, H6, HR,
+        ISINDEX, MENU, NOFRAMES, NOSCRIPT, OL,
+        P, PRE, TABLE, UL
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(ABBR, null, null, 0, IMPLIED),
+        attr(AXIS, null, null, 0, IMPLIED),
+        attr(HEADERS, null, null, 0, IMPLIED),
+        attr(SCOPE, null,  new String[] { ROW, COL, ROWGROUP, COLGROUP },
+          0, IMPLIED),
+        attr(ROWSPAN, C_1, null, NUMBER, DEFAULT),
+        attr(COLSPAN, C_1, null, NUMBER, DEFAULT),
+        attr(ALIGN, null,  new String[] { LEFT, CENTER, RIGHT, JUSTIFY, CHAR },
+          0, IMPLIED),
+        attr(CHAR, null, null, 0, IMPLIED),
+        attr(CHAROFF, null, null, 0, IMPLIED),
+        attr(VALIGN, null,  new String[] { TOP, MIDDLE, BOTTOM, BASELINE },
+          0, IMPLIED),
+        attr(NOWRAP, null,  new String[] { NOWRAP }, 0, IMPLIED),
+        attr(BGCOLOR, null, null, 0, IMPLIED),
+        attr(WIDTH, null, null, 0, IMPLIED),
+        attr(HEIGHT, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(TEXTAREA, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(sNAME, null, null, 0, IMPLIED),
+        attr(ROWS, null, null, NUMBER, REQUIRED),
+        attr(COLS, null, null, NUMBER, REQUIRED),
+        attr(DISABLED, null,  new String[] { DISABLED }, 0, IMPLIED),
+        attr(READONLY, null,  new String[] { READONLY }, 0, IMPLIED),
+        attr(TABINDEX, null, null, NUMBER, IMPLIED),
+        attr(ACCESSKEY, null, null, 0, IMPLIED),
+        attr(ONFOCUS, null, null, 0, IMPLIED),
+        attr(ONBLUR, null, null, 0, IMPLIED),
+        attr(ONSELECT, null, null, 0, IMPLIED),
+        attr(ONCHANGE, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(TFOOT, 0, false, true, model(TR,'+'),
+      NONE
+      ,
+      new String[] {
+        TR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(ALIGN, null,  new String[] { LEFT, CENTER, RIGHT, JUSTIFY, CHAR },
+          0, IMPLIED),
+        attr(CHAR, null, null, 0, IMPLIED),
+        attr(CHAROFF, null, null, 0, IMPLIED),
+        attr(VALIGN, null,  new String[] { TOP, MIDDLE, BOTTOM, BASELINE },
+         0, IMPLIED)
+      }
+    );
+      defElement(TH, 0, false, true, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR,
+        ADDRESS, BLOCKQUOTE, CENTER, DIR, DIV,
+        DL, FIELDSET, FORM, H1, H2,
+        H3, H4, H5, H6, HR,
+        ISINDEX, MENU, NOFRAMES, NOSCRIPT, OL,
+        P, PRE, TABLE, UL
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(ABBR, null, null, 0, IMPLIED),
+        attr(AXIS, null, null, 0, IMPLIED),
+        attr(HEADERS, null, null, 0, IMPLIED),
+        attr(SCOPE, null,  new String[] { ROW, COL, ROWGROUP, COLGROUP },
+          0, IMPLIED),
+        attr(ROWSPAN, C_1, null, NUMBER, DEFAULT),
+        attr(COLSPAN, C_1, null, NUMBER, DEFAULT),
+        attr(ALIGN, null,  new String[] { LEFT, CENTER, RIGHT, JUSTIFY, CHAR },
+          0, IMPLIED),
+        attr(CHAR, null, null, 0, IMPLIED),
+        attr(CHAROFF, null, null, 0, IMPLIED),
+        attr(VALIGN, null,  new String[] { TOP, MIDDLE, BOTTOM, BASELINE },
+          0, IMPLIED),
+        attr(NOWRAP, null,  new String[] { NOWRAP }, 0, IMPLIED),
+        attr(BGCOLOR, null, null, 0, IMPLIED),
+        attr(WIDTH, null, null, 0, IMPLIED),
+        attr(HEIGHT, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(THEAD, 0, false, true, model(TR,'+'),
+      NONE
+      ,
+      new String[] {
+        TR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(ALIGN, null,  new String[] { LEFT, CENTER, RIGHT, JUSTIFY, CHAR },
+          0, IMPLIED),
+        attr(CHAR, null, null, 0, IMPLIED),
+        attr(CHAROFF, null, null, 0, IMPLIED),
+        attr(VALIGN, null,  new String[] { TOP, MIDDLE, BOTTOM, BASELINE },
+          0, IMPLIED)
+      }
+    );
+      defElement(TITLE, 0, false, false, null,
+      new String[] {
+        OBJECT, SCRIPT, LINK, META,
+        STYLE
+      }
+      ,
+      new String[] {
+        PCDATA
+      }
+    ,
+      new AttributeList[] {
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED)
+      }
+    );
+      defElement(TR, 0, false, true,
+       new ContentModel(0, new TableRowContentModel(this), null),
+      NONE
+      ,
+      new String[] {
+        TD, TH
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(ALIGN, null,  new String[] { LEFT, CENTER, RIGHT, JUSTIFY, CHAR },
+          0, IMPLIED),
+        attr(CHAR, null, null, 0, IMPLIED),
+        attr(CHAROFF, null, null, 0, IMPLIED),
+        attr(VALIGN, null,  new String[] { TOP, MIDDLE, BOTTOM, BASELINE },
+          0, IMPLIED),
+        attr(BGCOLOR, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(TT, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(U, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+      defElement(UL, 0, false, false, createListModel(),
+      NONE
+      ,
+      new String[] {
+        // See note on the createListModel method
+        LI, UL, OL
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED),
+        attr(TYPE, null,  new String[] { DISC, SQUARE, CIRCLE }, 0, IMPLIED),
+        attr(COMPACT, null,  new String[] { COMPACT }, 0, IMPLIED)
+      }
+    );
+      defElement(VAR, 0, false, false, null,
+      NONE
+      ,
+      new String[] {
+        PCDATA, A, ABBR, ACRONYM,
+        APPLET, B, BASEFONT, BDO, BIG,
+        BR, BUTTON, CITE, CODE, DFN,
+        EM, FONT, I, IFRAME, IMG,
+        INPUT, KBD, LABEL, MAP, OBJECT,
+        Q, S, SAMP, SCRIPT, SELECT,
+        SMALL, SPAN, STRIKE, STRONG, SUB,
+        SUP, TEXTAREA, TT, U, VAR
+      }
+    ,
+      new AttributeList[] {
+        attr(sID, null, null, ID, IMPLIED),
+        attr(CLASS, null, null, 0, IMPLIED),
+        attr(STYLE, null, null, 0, IMPLIED),
+        attr(TITLE, null, null, 0, IMPLIED),
+        attr(LANG, null, null, 0, IMPLIED),
+        attr(DIR, null,  new String[] { LTR, RTL }, 0, IMPLIED),
+        attr(ONCLICK, null, null, 0, IMPLIED),
+        attr(ONDBLCLICK, null, null, 0, IMPLIED),
+        attr(ONMOUSEDOWN, null, null, 0, IMPLIED),
+        attr(ONMOUSEUP, null, null, 0, IMPLIED),
+        attr(ONMOUSEOVER, null, null, 0, IMPLIED),
+        attr(ONMOUSEMOVE, null, null, 0, IMPLIED),
+        attr(ONMOUSEOUT, null, null, 0, IMPLIED),
+        attr(ONKEYPRESS, null, null, 0, IMPLIED),
+        attr(ONKEYDOWN, null, null, 0, IMPLIED),
+        attr(ONKEYUP, null, null, 0, IMPLIED)
+      }
+    );
+
+  }
+
+  /**
+   * Define all entities in this DTD.
+   */
+  protected void defineEntities()
+  {
+    /* Define general entities */
+    defineEntity("AElig", 198);
+    defineEntity("Aacute", 193);
+    defineEntity("Acirc", 194);
+    defineEntity("Agrave", 192);
+    defineEntity("Alpha", 913);
+    defineEntity("Aring", 197);
+    defineEntity("Atilde", 195);
+    defineEntity("Auml", 196);
+    defineEntity("Beta", 914);
+    defineEntity("Ccedil", 199);
+    defineEntity("Chi", 935);
+    defineEntity("Dagger", 8225);
+    defineEntity("Delta", 916);
+    defineEntity("ETH", 208);
+    defineEntity("Eacute", 201);
+    defineEntity("Ecirc", 202);
+    defineEntity("Egrave", 200);
+    defineEntity("Epsilon", 917);
+    defineEntity("Eta", 919);
+    defineEntity("Euml", 203);
+    defineEntity("Gamma", 915);
+    defineEntity("Iacute", 205);
+    defineEntity("Icirc", 206);
+    defineEntity("Igrave", 204);
+    defineEntity("Iota", 921);
+    defineEntity("Iuml", 207);
+    defineEntity("Kappa", 922);
+    defineEntity("Lambda", 923);
+    defineEntity("Mu", 924);
+    defineEntity("Ntilde", 209);
+    defineEntity("Nu", 925);
+    defineEntity("OElig", 338);
+    defineEntity("Oacute", 211);
+    defineEntity("Ocirc", 212);
+    defineEntity("Ograve", 210);
+    defineEntity("Omega", 937);
+    defineEntity("Omicron", 927);
+    defineEntity("Oslash", 216);
+    defineEntity("Otilde", 213);
+    defineEntity("Ouml", 214);
+    defineEntity("Phi", 934);
+    defineEntity("Pi", 928);
+    defineEntity("Prime", 8243);
+    defineEntity("Psi", 936);
+    defineEntity("Rho", 929);
+    defineEntity("Scaron", 352);
+    defineEntity("Sigma", 931);
+    defineEntity("THORN", 222);
+    defineEntity("Tau", 932);
+    defineEntity("Theta", 920);
+    defineEntity("Uacute", 218);
+    defineEntity("Ucirc", 219);
+    defineEntity("Ugrave", 217);
+    defineEntity("Upsilon", 933);
+    defineEntity("Uuml", 220);
+    defineEntity("Xi", 926);
+    defineEntity("Yacute", 221);
+    defineEntity("Yuml", 376);
+    defineEntity("Zeta", 918);
+    defineEntity("aacute", 225);
+    defineEntity("acirc", 226);
+    defineEntity("acute", 180);
+    defineEntity("aelig", 230);
+    defineEntity("agrave", 224);
+    defineEntity("alefsym", 8501);
+    defineEntity("alpha", 945);
+    defineEntity("amp", 38);
+    defineEntity("and", 8743);
+    defineEntity("ang", 8736);
+    defineEntity("aring", 229);
+    defineEntity("asymp", 8776);
+    defineEntity("atilde", 227);
+    defineEntity("auml", 228);
+    defineEntity("bdquo", 8222);
+    defineEntity("beta", 946);
+    defineEntity("brvbar", 166);
+    defineEntity("bull", 8226);
+    defineEntity("cap", 8745);
+    defineEntity("ccedil", 231);
+    defineEntity("cedil", 184);
+    defineEntity("cent", 162);
+    defineEntity("chi", 967);
+    defineEntity("circ", 710);
+    defineEntity("clubs", 9827);
+    defineEntity("cong", 8773);
+    defineEntity("copy", 169);
+    defineEntity("crarr", 8629);
+    defineEntity("cup", 8746);
+    defineEntity("curren", 164);
+    defineEntity("dArr", 8659);
+    defineEntity("dagger", 8224);
+    defineEntity("darr", 8595);
+    defineEntity("deg", 176);
+    defineEntity("delta", 948);
+    defineEntity("diams", 9830);
+    defineEntity("divide", 247);
+    defineEntity("eacute", 233);
+    defineEntity("ecirc", 234);
+    defineEntity("egrave", 232);
+    defineEntity("empty", 8709);
+    defineEntity("emsp", 8195);
+    defineEntity("ensp", 8194);
+    defineEntity("epsilon", 949);
+    defineEntity("equiv", 8801);
+    defineEntity("eta", 951);
+    defineEntity("eth", 240);
+    defineEntity("euml", 235);
+    defineEntity("euro", 8364);
+    defineEntity("exist", 8707);
+    defineEntity("fnof", 402);
+    defineEntity("forall", 8704);
+    defineEntity("frac12", 189);
+    defineEntity("frac14", 188);
+    defineEntity("frac34", 190);
+    defineEntity("frasl", 8260);
+    defineEntity("gamma", 947);
+    defineEntity("ge", 8805);
+    defineEntity("gt", 62);
+    defineEntity("hArr", 8660);
+    defineEntity("harr", 8596);
+    defineEntity("hearts", 9829);
+    defineEntity("hellip", 8230);
+    defineEntity("iacute", 237);
+    defineEntity("icirc", 238);
+    defineEntity("iexcl", 161);
+    defineEntity("igrave", 236);
+    defineEntity("image", 8465);
+    defineEntity("infin", 8734);
+    defineEntity("int", 8747);
+    defineEntity("iota", 953);
+    defineEntity("iquest", 191);
+    defineEntity("isin", 8712);
+    defineEntity("iuml", 239);
+    defineEntity("kappa", 954);
+    defineEntity("lArr", 8656);
+    defineEntity("lambda", 955);
+    defineEntity("lang", 9001);
+    defineEntity("laquo", 171);
+    defineEntity("larr", 8592);
+    defineEntity("lceil", 8968);
+    defineEntity("ldquo", 8220);
+    defineEntity("le", 8804);
+    defineEntity("lfloor", 8970);
+    defineEntity("lowast", 8727);
+    defineEntity("loz", 9674);
+    defineEntity("lrm", 8206);
+    defineEntity("lsaquo", 8249);
+    defineEntity("lsquo", 8216);
+    defineEntity("lt", 60);
+    defineEntity("macr", 175);
+    defineEntity("mdash", 8212);
+    defineEntity("micro", 181);
+    defineEntity("middot", 183);
+    defineEntity("minus", 8722);
+    defineEntity("mu", 956);
+    defineEntity("nabla", 8711);
+    defineEntity("nbsp", 160);
+    defineEntity("ndash", 8211);
+    defineEntity("ne", 8800);
+    defineEntity("ni", 8715);
+    defineEntity("not", 172);
+    defineEntity("notin", 8713);
+    defineEntity("nsub", 8836);
+    defineEntity("ntilde", 241);
+    defineEntity("nu", 957);
+    defineEntity("oacute", 243);
+    defineEntity("ocirc", 244);
+    defineEntity("oelig", 339);
+    defineEntity("ograve", 242);
+    defineEntity("oline", 8254);
+    defineEntity("omega", 969);
+    defineEntity("omicron", 959);
+    defineEntity("oplus", 8853);
+    defineEntity("or", 8744);
+    defineEntity("ordf", 170);
+    defineEntity("ordm", 186);
+    defineEntity("oslash", 248);
+    defineEntity("otilde", 245);
+    defineEntity("otimes", 8855);
+    defineEntity("ouml", 246);
+    defineEntity("para", 182);
+    defineEntity("part", 8706);
+    defineEntity("permil", 8240);
+    defineEntity("perp", 8869);
+    defineEntity("phi", 966);
+    defineEntity("pi", 960);
+    defineEntity("piv", 982);
+    defineEntity("plusmn", 177);
+    defineEntity("pound", 163);
+    defineEntity("prime", 8242);
+    defineEntity("prod", 8719);
+    defineEntity("prop", 8733);
+    defineEntity("psi", 968);
+    defineEntity("quot", 34);
+    defineEntity("rArr", 8658);
+    defineEntity("radic", 8730);
+    defineEntity("rang", 9002);
+    defineEntity("raquo", 187);
+    defineEntity("rarr", 8594);
+    defineEntity("rceil", 8969);
+    defineEntity("rdquo", 8221);
+    defineEntity("real", 8476);
+    defineEntity("reg", 174);
+    defineEntity("rfloor", 8971);
+    defineEntity("rho", 961);
+    defineEntity("rlm", 8207);
+    defineEntity("rsaquo", 8250);
+    defineEntity("rsquo", 8217);
+    defineEntity("sbquo", 8218);
+    defineEntity("scaron", 353);
+    defineEntity("sdot", 8901);
+    defineEntity("sect", 167);
+    defineEntity("shy", 173);
+    defineEntity("sigma", 963);
+    defineEntity("sigmaf", 962);
+    defineEntity("sim", 8764);
+    defineEntity("spades", 9824);
+    defineEntity("sub", 8834);
+    defineEntity("sube", 8838);
+    defineEntity("sum", 8721);
+    defineEntity("sup", 8835);
+    defineEntity("sup1", 185);
+    defineEntity("sup2", 178);
+    defineEntity("sup3", 179);
+    defineEntity("supe", 8839);
+    defineEntity("szlig", 223);
+    defineEntity("tau", 964);
+    defineEntity("there4", 8756);
+    defineEntity("theta", 952);
+    defineEntity("thetasym", 977);
+    defineEntity("thinsp", 8201);
+    defineEntity("thorn", 254);
+    defineEntity("tilde", 732);
+    defineEntity("times", 215);
+    defineEntity("trade", 8482);
+    defineEntity("uArr", 8657);
+    defineEntity("uacute", 250);
+    defineEntity("uarr", 8593);
+    defineEntity("ucirc", 251);
+    defineEntity("ugrave", 249);
+    defineEntity("uml", 168);
+    defineEntity("upsih", 978);
+    defineEntity("upsilon", 965);
+    defineEntity("uuml", 252);
+    defineEntity("weierp", 8472);
+    defineEntity("xi", 958);
+    defineEntity("yacute", 253);
+    defineEntity("yen", 165);
+    defineEntity("yuml", 255);
+    defineEntity("zeta", 950);
+    defineEntity("zwj", 8205);
+    defineEntity("zwnj", 8204);
+  }
+
+  /**
+   * Crate a content model, consisting of the single
+   * element, specified by name.
+   */
+  private ContentModel model(String element)
+  {
+    return new ContentModel(getElement(element));
+  }
+
+  /**
+   * Crate a chain from the two content models,
+   * the last containing the given element and
+   * the specified unary operation.
+   */
+  private ContentModel model(String element, int unary)
+  {
+    ContentModel ct = model(element);
+    ct.type = unary;
+    return new ContentModel(0, ct);
+  }
+
+  /**
+   * Create the model HEAD, BODY
+   * @return
+   */
+  protected ContentModel createHtmlContentModel()
+  {
+    ContentModel head = model(HEAD);
+    ContentModel body = model(BODY);
+    head.next = body;
+    head.type = ',';
+    return head;
+  }
+
+  /**
+   * Create the model
+   * ( CAPTION ? , ( COL * | COLGROUP * ) , THEAD ? , TFOOT ? , TBODY + )
+   */
+  protected ContentModel createTableContentModel()
+  {
+     ContentModel col_colgroup = new ContentModel
+      ('|', model(COL,'*'), model(COLGROUP,'*') );
+
+     col_colgroup = new ContentModel('*', col_colgroup);
+     col_colgroup = new ContentModel(',', col_colgroup);
+
+     ContentModel caption = model(CAPTION,'?');
+     ContentModel thead   = model(THEAD, '?');
+     ContentModel tfoot   = model(TFOOT, '?');
+     ContentModel tbody   = model(TBODY, '+');
+
+     caption.next = col_colgroup;
+     col_colgroup.next = thead;
+     thead.next = tfoot;
+     tfoot.next = tbody;
+
+     caption.type = col_colgroup.type = thead.type = tfoot.type =
+     tbody.type = ',';
+
+     return caption;
+  }
+
+  /**
+   * Creates a model for &lt;DL&gt; tag:
+   * <code> DT+ | DL+ </code>.
+   * @return
+   */
+  protected ContentModel createDefListModel()
+  {
+    ContentModel dt = model(DT, '+');
+    ContentModel dd = model(DD, '+');
+
+    dt.next = dd;
+    dt.type = dd.type = '|';
+    return dt;
+  }
+
+  /**
+   * This model is used for UL, OL, MENU and DIR.
+   *  HTML 4.01 specifies LI only, but the nested
+   * list seems rendered correctly only if
+   * it is not enclosed into <LI>-</LI> of the
+   * parent list.
+   */
+  protected ContentModel createListModel()
+  {
+    ContentModel li = model(LI, '+');
+    ContentModel ul = model(UL, '+');
+    ContentModel ol = model(OL, '+');
+
+    li.next = ul;
+    ul.next = ol;
+    li.type = ul.type = ol.type = '|';
+    return li;
+  }
+
+}
Index: libjava/gnu/javax/swing/text/html/parser/gnuDTD.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/gnuDTD.java
diff -N libjava/gnu/javax/swing/text/html/parser/gnuDTD.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/gnuDTD.java	9 Jul 2005 22:09:37 -0000
@@ -0,0 +1,422 @@
+/* gnuDTD.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser;
+
+import java.io.PrintStream;
+import java.io.Serializable;
+
+import java.util.BitSet;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Vector;
+
+import javax.swing.text.html.parser.AttributeList;
+import javax.swing.text.html.parser.ContentModel;
+import javax.swing.text.html.parser.Element;
+import javax.swing.text.html.parser.Entity;
+
+/**
+ * <p>
+ * The class is derived from {@link gnu.javax.swing.text.html.parser.DTD }
+ * making structure creation methods public. This is required when
+ * creating the DTD by SGML parser that must have access to the structure.
+ *
+ * SGML DTD representation. Provides basis for describing a syntax of the
+ * HTML documents. The fields of this class are NOT initialized in
+ * constructor. You need to do this separately before passing this data
+ * structure to the parser constructor.</p>
+ *
+ * <p>This implementation also provides you the derived class
+ * <code>gnu.javax.swing.text.html.parser.DTD.HTML_4_0_1</code>, where
+ * all fields are initialized to the values, representing HTML 4.01
+ * ("-//W3C//DTD HTML 4.01 Frameset//EN") DTD. You can use it if you do not care
+ * about the portability between different implementations of the core
+ * class libraries. </p>
+ * <p>Use {@link javax.swing.HTML.HTMLEditorKit.Parser#parse }
+ * for parsing in accordance with "-//W3C//DTD HTML 4.01 Frameset//EN"
+ * without specifying DTD separately.</p>
+ *
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class gnuDTD
+  extends javax.swing.text.html.parser.DTD
+  implements javax.swing.text.html.parser.DTDConstants, Serializable
+{
+  /* The undocumented element types, used to specify types, not defined
+  in DTDConstants. */
+
+  /**
+   * The URI element type (not defined in DTDConstants).
+   */
+  public static final int URI = 512;
+
+  /**
+   * The Length element type
+   */
+  public static final int Length = 513;
+
+  /**
+   * The Char element type
+   */
+  public static final int Char = 514;
+
+  /**
+   * The Color element type
+   */
+  public static final int Color = 515;
+
+  /**
+   * Creates a new instance of gnuDTD.
+   * @param name the name of the DTD.
+   */
+  public gnuDTD(String name)
+  {
+    super(name);
+  }
+
+  /**
+   * Creates and returns new attribute (not an attribute list).
+   * @param name the name of this attribute
+   * @param type the type of this attribute (FIXED, IMPLIED or
+   * REQUIRED from <code>DTDConstants</code>).
+   * @param modifier the modifier of this attribute
+   * @param default_value the default value of this attribute or null if
+   * it is not specified.
+   * @param allowed_values the allowed values of this attribute. The multiple
+   * possible values in this parameter are supposed to be separated by
+   * '|', same as in SGML DTD <code>&lt;!ATTLIST </code>tag. This parameter
+   * can be null if no list of allowed values is specified.
+   * @param atts the previous attribute of this element. This is
+   * placed to the field
+   * {@link javax.swing.text.html.parser.AttributeList#next },
+   * creating a linked list.
+   * @return
+   */
+  public AttributeList defAttributeList(String name, int type, int modifier,
+                                        String default_value,
+                                        String allowed_values,
+                                        AttributeList atts
+                                       )
+  {
+    return super.defAttributeList(name, type, modifier, default_value,
+                                  allowed_values, atts
+                                 );
+  }
+
+  /**
+   * Define the attributes for the element with the given name.
+   * If the element is not exist, it is created. This method is
+   * needed if the element attributes are defined befor the
+   * element itself.
+   * @param forElement
+   * @param attributes
+   */
+  public void defAttrsFor(String forElement, AttributeList attributes)
+  {
+    super.defineAttributes(forElement, attributes);
+  }
+
+  /**
+   * Creates a new content model.
+   * @param type specifies the BNF operation for this content model.
+   * The valid operations are documented in the
+   * {@link javax.swing.text.html.parser.ContentModel#type }.
+   * @param content the content of this content model
+   * @param next if the content model is specified by BNF-like
+   * expression, contains the rest of this expression.
+   * @return The newly created content model.
+   */
+  public ContentModel defContentModel(int type, Object content,
+                                      ContentModel next
+                                     )
+  {
+    return super.defContentModel(type, content, next);
+  }
+
+  /**
+   * Defines a new element and adds it to the element table.
+   * If the element alredy exists,
+   * overrides it settings with the specified values.
+   * @param name the name of the new element
+   * @param type the type of the element
+   * @param headless true if the element needs no starting tag
+   * @param tailless true if the element needs no closing tag
+   * @param content the element content.
+   * @param exclusions the elements that must be excluded from the
+   * content of this element, in all levels of the hierarchy.
+   * @param inclusions the elements that can be included as the
+   * content of this element.
+   * @param attributes the element attributes.
+   * @return the created or updated element.
+   */
+  public Element defElement(String name, int type, boolean headless,
+                            boolean tailless, ContentModel content,
+                            String[] exclusions, String[] inclusions,
+                            AttributeList attributes
+                           )
+  {
+    return super.defElement(name, type, headless, tailless, content,
+                            exclusions, inclusions, attributes
+                           );
+  }
+
+  /**
+   * Defines a new element and adds it to the element table.
+   * If the element alredy exists,
+   * overrides it settings with the specified values.
+   * @param name the name of the new element
+   * @param type the type of the element
+   * @param headless true if the element needs no starting tag
+   * @param tailless true if the element needs no closing tag
+   * @param content the element content.
+   * @param exclusions the elements that must be excluded from the
+   * content of this element, in all levels of the hierarchy.
+   * @param inclusions the elements that can be included as the
+   * content of this element.
+   * @param attributes the element attributes.
+   * @return the created or updated element.
+   */
+  public Element defElement(String name, int type, boolean headless,
+                            boolean tailless, ContentModel content,
+                            Collection exclusions, Collection inclusions,
+                            AttributeList attributes
+                           )
+  {
+    return super.defElement(name, type, headless, tailless, content,
+                            toStringArray(exclusions),
+                            toStringArray(inclusions), attributes
+                           );
+  }
+
+  /**
+   * Defines a new element and adds it to the element table.
+   * If the element alredy exists,
+   * overrides it settings with the specified values.
+   * @param name the name of the new element
+   * @param type the type of the element
+   * @param headless true if the element needs no starting tag
+   * @param tailless true if the element needs no closing tag
+   * @param content the element content.
+   * @param exclusions the elements that must be excluded from the
+   * content of this element, in all levels of the hierarchy.
+   * @param inclusions the elements that can be included as the
+   * content of this element.
+   * @param attributes the element attributes (an array and not a
+   * linked list). The attributes are chained into the linked list
+   * inside this method.
+   * @return the created or updated element.
+   */
+  public Element defElement(String name, int type, boolean headless,
+                            boolean tailless, ContentModel content,
+                            String[] exclusions, String[] inclusions,
+                            AttributeList[] attributes
+                           )
+  {
+    AttributeList list;
+
+    if (attributes == null || attributes.length == 0)
+      list = null;
+    else
+      {
+        if (attributes.length > 1)
+          for (int i = 1; i < attributes.length; i++)
+            {
+              attributes [ i - 1 ].next = attributes [ i ];
+            }
+        list = attributes [ 0 ];
+      }
+
+    Element e =
+      super.defElement(name, type, headless, tailless, content, exclusions,
+                       inclusions, list
+                      );
+    return e;
+  }
+
+  /**
+   * Creates, adds into the internal table and returns the
+   * character entity like <code>&amp;lt;</code>
+   *  (means '<code>&lt;</code>' );
+   * This method inactivates the recursive refenrences to the same
+   * entity.
+   * @param name The entity name (without heading &amp; and closing ;)
+   * @param type The entity type
+   * @param character The entity value (single character)
+   * @return The created entity
+   */
+  public Entity defEntity(String name, int type, String data)
+  {
+    int r;
+    String eref = "%" + name + ";";
+    do
+      {
+        r = data.indexOf(eref);
+        if (r > 0)
+          {
+            data = data.substring(0, r) + data.substring(r + 1);
+          }
+      }
+    while (r > 0);
+
+    return super.defEntity(name, type, data);
+  }
+
+  /**
+   * Summarises the document content into the given PrintStream.
+   */
+  public void dump(PrintStream p)
+  {
+    Iterator iter = entityHash.entrySet().iterator();
+    while (iter.hasNext())
+      {
+        Map.Entry item = (Map.Entry) iter.next();
+        Entity e = (Entity) item.getValue();
+        if (e.isGeneral())
+          p.println("Entity " + e.getName() + ": " + e.getString());
+      }
+
+    iter = elementHash.entrySet().iterator();
+    while (iter.hasNext())
+      {
+        Map.Entry item = (Map.Entry) iter.next();
+        Element e = (Element) item.getValue();
+        p.println("Element " + e.getName());
+
+        System.out.println(" includes:");
+        dump(e.inclusions);
+        System.out.println(" excludes:");
+        dump(e.exclusions);
+        System.out.println(" attributes:");
+
+        AttributeList atts = e.atts;
+        while (atts != null)
+          {
+            p.print("    " + atts.name + " = " + atts.value);
+            if (atts.values == null || atts.values.size() == 0)
+              p.println();
+            else
+              {
+                Iterator viter = atts.values.iterator();
+                System.out.print(" ( ");
+                while (viter.hasNext())
+                  {
+                    System.out.print(viter.next());
+                    if (viter.hasNext())
+                      System.out.print(" | ");
+                  }
+                System.out.println(" ) ");
+              }
+            atts = atts.next;
+          }
+      }
+  }
+
+  /**
+   * Prints the content of the given attribute set to the System.out.
+   * @param b
+   */
+  public void dump(BitSet b)
+  {
+    if (b != null)
+      {
+        for (int i = 0; i < b.size(); i++)
+          {
+            if (b.get(i))
+              System.out.println(" " + elements.get(i));
+          }
+      }
+    else
+      System.out.println(" NULL set");
+  }
+
+  /**
+   * Creates the attribute.
+   * @param name The attribute name.
+   * @param type The attribute type.
+   * @param modifier The attribute modifier.
+   * @param defaultValue Default value (or null)
+   * @param allowed_values Allowed values (or null)
+   * @return The newly created AttributeList. The <code>next</code>
+   * field is initialized to null.
+   */
+  protected AttributeList attr(String name, String default_value,
+                               String[] allowed_values, int type, int modifier
+                              )
+  {
+    Vector allowed = null;
+
+    if (allowed_values != null)
+      {
+        allowed = new Vector(allowed_values.length);
+        for (int i = 0; i < allowed_values.length; i++)
+          {
+            allowed.add(allowed_values [ i ]);
+          }
+      }
+    ;
+
+    AttributeList attr =
+      new AttributeList(name, type, modifier, default_value, allowed, null);
+
+    return attr;
+  }
+
+  /**
+   * Define the general entity, holding a single character.
+   * @param name The entity name (for example, 'amp').
+   * The defined entity <b>is</b> stored into the entity table.
+   * @param character The entity character (for example, '&').
+   */
+  protected void defineEntity(String name, int character)
+  {
+    super.defEntity(name, GENERAL, character);
+  }
+
+  private String[] toStringArray(Collection c)
+  {
+    String[] s = new String[ c.size() ];
+    Iterator iter = c.iterator();
+    for (int i = 0; i < s.length; i++)
+      {
+        s [ i ] = iter.next().toString();
+      }
+    return s;
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/htmlAttributeSet.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/htmlAttributeSet.java
diff -N libjava/gnu/javax/swing/text/html/parser/htmlAttributeSet.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/htmlAttributeSet.java	9 Jul 2005 22:09:37 -0000
@@ -0,0 +1,133 @@
+/* htmlAttributeSet.java -- A set to store HTML attributes
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser;
+
+import java.util.Enumeration;
+
+import javax.swing.text.AttributeSet;
+import javax.swing.text.SimpleAttributeSet;
+import javax.swing.text.html.HTML;
+
+/**
+ * A set, adapted to store HTML attributes.
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class htmlAttributeSet
+  extends SimpleAttributeSet
+{
+  public static final htmlAttributeSet EMPTY_HTML_ATTRIBUTE_SET =
+    new htmlAttributeSet();
+  AttributeSet parent;
+
+  /**
+   * Looks in this set and, if not found, later looks in the parent set.
+   * Calls toString(), allowing to pass as HTML.Attribute, as String
+   * to this method.
+   * @param key A key to search for a value.
+   * @return The value, if one is defined.
+   */
+  public Object getAttribute(Object _key)
+  {
+    Object key = _key.toString().toLowerCase();
+
+    Object v = super.getAttribute(key);
+    if (v != null)
+      return v;
+    else if (parent != null)
+      return parent.getAttribute(key);
+    else
+      return null;
+  }
+
+  /**
+   * The name set must return HTML.Attribute and not a string,
+   * where applicable.
+   */
+  public Enumeration getAttributeNames()
+  {
+    // Replace the string keys by HTML.attribute, where applicable
+    final Enumeration enumeration = super.getAttributeNames();
+
+    return new Enumeration()
+      {
+        public boolean hasMoreElements()
+        {
+          return enumeration.hasMoreElements();
+        }
+
+        public Object nextElement()
+        {
+          Object key = enumeration.nextElement();
+          HTML.Attribute hKey = HTML.getAttributeKey((String) key);
+          if (hKey != null)
+            return hKey;
+          else
+            return key;
+        }
+      };
+  }
+
+  /**
+   * Set the parent set, containing the default values.
+   * @param a_parent
+   */
+  public void setResolveParent(AttributeSet a_parent)
+  {
+    parent = a_parent;
+  }
+
+  /**
+   * Get the parent set, containing the default values.
+   * @return
+   */
+  public AttributeSet getResolveParent()
+  {
+    return parent;
+  }
+
+  /**
+   * Add the attribute to this attribute set.
+   * @param key Attribute key (will be case insensitive)
+   * @param value Attribute value
+   */
+  public void addAttribute(Object key, Object value)
+  {
+    super.addAttribute(key.toString().toLowerCase(), value);
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/htmlValidator.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/htmlValidator.java
diff -N libjava/gnu/javax/swing/text/html/parser/htmlValidator.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/htmlValidator.java	9 Jul 2005 22:09:37 -0000
@@ -0,0 +1,610 @@
+/* tagStack.java -- The HTML tag stack.
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser;
+
+import gnu.javax.swing.text.html.parser.models.node;
+import gnu.javax.swing.text.html.parser.models.transformer;
+
+import java.util.BitSet;
+import java.util.Enumeration;
+import java.util.LinkedList;
+import java.util.ListIterator;
+
+import javax.swing.text.SimpleAttributeSet;
+import javax.swing.text.html.HTML;
+import javax.swing.text.html.parser.*;
+
+/**
+ * <p>The HTML content validator, is responsible for opening and
+ * closing elements with optional start/end tags, detecting
+ * the wrongly placed html tags and reporting errors. The working instance
+ * is the inner class inside the {@link javax.swing.text.html.parser.Parser }
+ * </p>
+ * <p>This class could potentially
+ * provide basis for automated closing and insertion of the html tags,
+ * correcting the found html errors.
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public abstract class htmlValidator
+{
+  /**
+   * The tag reference, holding additional information that the tag
+   * has been forcibly closed.
+   */
+  protected class hTag
+  {
+    protected final Element element;
+    protected final HTML.Tag tag;
+    protected final TagElement tgElement;
+    protected boolean forcibly_closed;
+    protected node validationTrace;
+
+    protected hTag(TagElement an_element)
+    {
+      element = an_element.getElement();
+      tag = an_element.getHTMLTag();
+      tgElement = an_element;
+
+      if (element.content != null)
+        validationTrace = transformer.transform(element.content, dtd);
+    }
+
+    /**
+     * This is called when the tag must be forcibly closed because
+     * it would make the newly appearing tag invalid.
+     * The parser is not notified about such event (just the error
+     * is reported). For such tags, the closing message does not
+     * appear when later reaching the end of stream. The exception is
+     * the &lt;head&gt; tag: the parser is notified about its silent closing
+     * when &lt;body&gt; or other html content appears.
+     */
+    protected void forciblyCloseDueContext()
+    {
+      forcibly_closed = true;
+    }
+
+    /**
+     * This is called when the tag must be forcibly closed after
+     * reaching the end of stream. The parser is notified as if
+     * closing the tag explicitly.
+     */
+    protected void forciblyCloseDueEndOfStream()
+    {
+      forcibly_closed = true;
+      handleSupposedEndTag(element);
+    }
+  }
+
+  /**
+   * The DTD, providing information about the valid document structure.
+   */
+  protected final DTD dtd;
+
+  /**
+  * The stack, holding the current tag context.
+  */
+  protected final LinkedList stack = new LinkedList();
+
+  /**
+   * Creates a new tag stack, using the given DTD.
+   * @param a_dtd A DTD, providing the information about the valid
+   * tag content.
+   */
+  public htmlValidator(DTD a_dtd)
+  {
+    dtd = a_dtd;
+  }
+
+  /**
+   * Close all opened tags (called at the end of parsing).
+   */
+  public void closeAll()
+  {
+    hTag h;
+    while (!stack.isEmpty())
+      {
+        h = (hTag) stack.getLast();
+        if (!h.forcibly_closed && !h.element.omitEnd())
+          s_error("Unclosed <" + h.tag + ">, closing at the end of stream");
+
+        handleSupposedEndTag(h.element);
+
+        closeTag(h.tgElement);
+      }
+  }
+
+  /**
+   * Remove the given tag from the stack or (if found) from the list
+   * of the forcibly closed tags.
+   */
+  public void closeTag(TagElement tElement)
+  {
+    HTML.Tag tag = tElement.getHTMLTag();
+    hTag x;
+    hTag close;
+
+    if (!stack.isEmpty())
+      {
+        ListIterator iter = stack.listIterator(stack.size());
+
+        while (iter.hasPrevious())
+          {
+            x = (hTag) iter.previous();
+            if (tag.equals(x.tag))
+              {
+                if (x.forcibly_closed && !x.element.omitEnd())
+                  s_error("The tag <" + x.tag +
+                          "> has already been forcibly closed"
+                         );
+
+
+                // If the tag has a content model defined, forcibly close all
+                // tags that were opened after the tag being currently closed.
+                closing: 
+                if (x.element.content != null)
+                  {
+                    iter = stack.listIterator(stack.size());
+                    while (iter.hasPrevious())
+                      {
+                        close = (hTag) iter.previous();
+                        if (close == x)
+                          break closing;
+                        handleSupposedEndTag(close.element);
+                        iter.remove();
+                      }
+                  }
+
+                stack.remove(x);
+                return;
+              }
+          }
+      }
+    s_error("Closing unopened <" + tag + ">");
+  }
+
+  /**
+   * Add the given HTML tag to the stack of the opened tags. Forcibly closes
+   * all tags in the stack that does not allow this tag in they content (error
+   * is reported).
+   * @param element
+   */
+  public void openTag(TagElement tElement, htmlAttributeSet parameters)
+  {
+    // If this is a fictional call, the message from the parser
+    // has recursively returned - ignore.
+    if (tElement.fictional())
+      return;
+
+    validateParameters(tElement, parameters);
+
+    // If the stack is empty, start from HTML
+    if (stack.isEmpty() && tElement.getHTMLTag() != HTML.Tag.HTML)
+      {
+        Element html = dtd.getElement(HTML.Tag.HTML.toString());
+        openFictionalTag(html);
+      }
+
+    Object v = tagIsValidForContext(tElement);
+    if (v != Boolean.TRUE)
+      {
+        // The tag is not valid for context, the content
+        // model suggest to open another tag.
+        if (v instanceof Element)
+          {
+            int n = 0;
+            while (v instanceof Element && (n++ < 100))
+              {
+                Element fe = (Element) v;
+
+                // notify the content model that we add the proposed tag
+                getCurrentContentModel().show(fe);
+                openFictionalTag(fe);
+
+                Object vv = tagIsValidForContext(tElement);
+                if (vv instanceof Element) // One level of nesting is supported.
+                  {
+                    openFictionalTag((Element) vv);
+
+                    Object vx = tagIsValidForContext(tElement);
+                    if (vx instanceof Element)
+                      openFictionalTag((Element) vx);
+                  }
+                else if (vv == Boolean.FALSE)
+                  {
+                    // The tag is still not valid for the current
+                    // content after opening a fictional element.
+                    if (fe.omitEnd())
+                      {
+                        // close the previously opened fictional tag.
+                        closeLast();
+                        vv = tagIsValidForContext(tElement);
+                        if (vv instanceof Element)
+
+                          // another tag was suggested by the content model
+                          openFictionalTag((Element) vv);
+                      }
+                  }
+                v = tagIsValidForContext(tElement);
+              }
+          }
+        else // If the current element has the optional end tag, close it.
+          {
+            if (!stack.isEmpty())
+              {
+                closing: 
+                do
+                  {
+                    hTag last = (hTag) stack.getLast();
+                    if (last.element.omitEnd())
+                      {
+                        closeLast();
+                        v = tagIsValidForContext(tElement);
+                        if (v instanceof Element) // another tag was suggested by the content model
+                          {
+                            openFictionalTag((Element) v);
+                            break closing;
+                          }
+                      }
+                    else
+                      break closing;
+                  }
+                while (v == Boolean.FALSE && !stack.isEmpty());
+              }
+          }
+      }
+
+    stack.add(new hTag(tElement));
+  }
+
+  /**
+   * Clear the stack.
+   */
+  public void restart()
+  {
+    stack.clear();
+  }
+
+  /**
+   * Check if this tag is valid for the current context.
+   * Return Boolean.True if it is OK, Boolean.False
+   * if it is surely not OK or the Element that the
+   * content model recommends to insert making the situation
+   * ok. If Boolean.True is returned, the content model current
+   * position is moved forward. Otherwise this position remains
+   * the same.
+   * @param tElement
+   * @return
+   */
+  public Object tagIsValidForContext(TagElement tElement)
+  {
+    // Check the current content model, if one is available.
+    node cv = getCurrentContentModel();
+
+    if (cv != null)
+      return cv.show(tElement.getElement());
+
+    // Check exclusions and inclusions.
+    ListIterator iter = stack.listIterator(stack.size());
+    hTag t;
+    final int idx = tElement.getElement().index;
+
+    // Check only known tags.
+    if (idx >= 0)
+      {
+        BitSet inclusions = new BitSet();
+        while (iter.hasPrevious())
+          {
+            t = (hTag) iter.previous();
+            if (!t.forcibly_closed)
+              {
+                if (t.element.exclusions != null &&
+                    t.element.exclusions.get(idx)
+                   )
+                  return Boolean.FALSE;
+
+                if (t.element.inclusions != null)
+                  inclusions.or(t.element.inclusions);
+              }
+          }
+        if (!inclusions.get(idx))
+          return Boolean.FALSE;
+      }
+    return Boolean.TRUE;
+  }
+
+  /**
+   * Validate tag without storing in into the tag stack. This is called
+   * for the empty tags and results the subsequent calls to the openTag
+   * and closeTag.
+   */
+  public void validateTag(TagElement tElement, htmlAttributeSet parameters)
+  {
+    openTag(tElement, parameters);
+    closeTag(tElement);
+  }
+
+  /**
+   * Check for mandatory elements, subsequent to the last tag:
+   * @param tElement The element that will be inserted next.
+   */
+  protected void checkContentModel(TagElement tElement, boolean first)
+  {
+    if (stack.isEmpty())
+      return;
+
+    hTag last = (hTag) stack.getLast();
+    if (last.validationTrace == null)
+      return;
+
+    Object r = last.validationTrace.show(tElement.getElement());
+    if (r == Boolean.FALSE)
+      s_error("The <" + last.element + "> does not match the content model " +
+              last.validationTrace
+             );
+    else if (r instanceof Element) // The content model recommends insertion of this element
+      {
+        if (!first)
+          closeTag(last.tgElement);
+        handleSupposedStartTag((Element) r);
+        openTag(new TagElement((Element) r), null);
+      }
+  }
+
+  /**
+   * The method is called when the tag must be closed because
+   * it does not allow the subsequent elements inside its context
+   * or the end of stream has been reached. The parser is only
+   * informed if the element being closed does not require the
+   * end tag (the "omitEnd" flag is set).
+   * The closing message must be passed to the parser mechanism
+   * before passing message about the opening the next tag.
+   *
+   * @param element The tag being fictionally (forcibly) closed.
+   */
+  protected abstract void handleSupposedEndTag(Element element);
+
+  /**
+   * The method is called when the validator decides to open the
+   * tag on its own initiative. This may happen if the content model
+   * includes the element with the optional (supposed) start tag.
+   *
+   * @param element The tag being opened.
+   */
+  protected abstract void handleSupposedStartTag(Element element);
+
+  /**
+   * Handles the error message. This method must be overridden to pass
+   * the message where required.
+   * @param msg The message text.
+   */
+  protected abstract void s_error(String msg);
+
+  /**
+   * Validate the parameters, report the error if the given parameter is
+   * not in the parameter set, valid for the given attribute. The information
+   * about the valid parameter set is taken from the Element, enclosed
+   * inside the tag. The method does not validate the default parameters.
+   * @param tag The tag
+   * @param parameters The parameters of this tag.
+   */
+  protected void validateParameters(TagElement tag, htmlAttributeSet parameters)
+  {
+    if (parameters == null ||
+        parameters == htmlAttributeSet.EMPTY_HTML_ATTRIBUTE_SET ||
+        parameters == SimpleAttributeSet.EMPTY
+       )
+      return;
+
+    Enumeration enumeration = parameters.getAttributeNames();
+
+    while (enumeration.hasMoreElements())
+      {
+        validateAttribute(tag, parameters, enumeration);
+      }
+
+    // Check for missing required values.
+    AttributeList a = tag.getElement().getAttributes();
+
+    while (a != null)
+      {
+        if (a.getModifier() == DTDConstants.REQUIRED)
+          if (parameters.getAttribute(a.getName()) == null)
+            {
+              s_error("Missing required attribute '" + a.getName() + "' for <" +
+                      tag.getHTMLTag() + ">"
+                     );
+            }
+        a = a.next;
+      }
+  }
+
+  private node getCurrentContentModel()
+  {
+    if (!stack.isEmpty())
+      {
+        hTag last = (hTag) stack.getLast();
+        return last.validationTrace;
+      }
+    else
+      return null;
+  }
+
+  private void closeLast()
+  {
+    handleSupposedEndTag(((hTag) stack.getLast()).element);
+    stack.removeLast();
+  }
+
+  private void openFictionalTag(Element e)
+  {
+    handleSupposedStartTag(e);
+    stack.add(new hTag(new TagElement(e, true)));
+    if (!e.omitStart())
+      s_error("<" + e + "> is expected (supposing it)");
+  }
+
+  private void validateAttribute(TagElement tag, htmlAttributeSet parameters,
+                                 Enumeration enumeration
+                                )
+  {
+    Object foundAttribute;
+    AttributeList dtdAttribute;
+    foundAttribute = enumeration.nextElement();
+    dtdAttribute = tag.getElement().getAttribute(foundAttribute.toString());
+    if (dtdAttribute == null)
+      {
+        StringBuffer valid =
+          new StringBuffer("The tag <" + tag.getHTMLTag() +
+                           "> cannot contain the attribute '" + foundAttribute +
+                           "'. The valid attributes for this tag are: "
+                          );
+
+        AttributeList a = tag.getElement().getAttributes();
+
+        while (a != null)
+          {
+            valid.append(a.name.toUpperCase());
+            valid.append(' ');
+            a = a.next;
+          }
+        s_error(valid.toString());
+      }
+
+    else
+      {
+        String value = parameters.getAttribute(foundAttribute).toString();
+
+        if (dtdAttribute.type == DTDConstants.NUMBER)
+          validateNumberAttribute(tag, foundAttribute, value);
+
+        if (dtdAttribute.type == DTDConstants.NAME ||
+            dtdAttribute.type == DTDConstants.ID
+           )
+          validateNameOrIdAttribute(tag, foundAttribute, value);
+
+        if (dtdAttribute.values != null)
+          validateAttributeWithValueList(tag, foundAttribute, dtdAttribute,
+                                         value
+                                        );
+      }
+  }
+
+  private void validateAttributeWithValueList(TagElement tag,
+                                              Object foundAttribute,
+                                              AttributeList dtdAttribute,
+                                              String value
+                                             )
+  {
+    if (!dtdAttribute.values.contains(value.toLowerCase()) &&
+        !dtdAttribute.values.contains(value.toUpperCase())
+       )
+      {
+        StringBuffer valid;
+        if (dtdAttribute.values.size() == 1)
+          valid =
+            new StringBuffer("The attribute '" + foundAttribute +
+                             "' of the tag <" + tag.getHTMLTag() +
+                             "> cannot have the value '" + value +
+                             "'. The only valid value is "
+                            );
+        else
+          valid =
+            new StringBuffer("The attribute '" + foundAttribute +
+                             "' of the tag <" + tag.getHTMLTag() +
+                             "> cannot have the value '" + value + "'. The " +
+                             dtdAttribute.values.size() +
+                             " valid values are: "
+                            );
+
+        Enumeration vv = dtdAttribute.values.elements();
+        while (vv.hasMoreElements())
+          {
+            valid.append('"');
+            valid.append(vv.nextElement());
+            valid.append("\"  ");
+          }
+        s_error(valid.toString());
+      }
+  }
+
+  private void validateNameOrIdAttribute(TagElement tag, Object foundAttribute,
+                                         String value
+                                        )
+  {
+    boolean ok = true;
+
+    if (!Character.isLetter(value.charAt(0)))
+      ok = false;
+
+    char c;
+    for (int i = 0; i < value.length(); i++)
+      {
+        c = value.charAt(i);
+        if (!(
+              Character.isLetter(c) || Character.isDigit(c) ||
+              "".indexOf(c) >= 0
+            )
+           )
+          ok = false;
+      }
+    if (!ok)
+      s_error("The '" + foundAttribute + "' attribute of the tag <" +
+              tag.getHTMLTag() + "> must start from letter and consist of " +
+              "letters, digits, hypens, colons, underscores and periods. " +
+              "It cannot be '" + value + "'"
+             );
+  }
+
+  private void validateNumberAttribute(TagElement tag, Object foundAttribute,
+                                       String value
+                                      )
+  {
+    try
+      {
+        Integer.parseInt(value);
+      }
+    catch (NumberFormatException ex)
+      {
+        s_error("The '" + foundAttribute + "' attribute of the tag <" +
+                tag.getHTMLTag() + "> must be a valid number and not '" +
+                value + "'"
+               );
+      }
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/package.html
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/package.html
diff -N libjava/gnu/javax/swing/text/html/parser/package.html
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/package.html	9 Jul 2005 22:09:37 -0000
@@ -0,0 +1,51 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+<!-- package.html - describes classes in javax.swing.text.html.parser package.
+   Copyright (C) 2002 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. -->
+
+<html>
+<head><title>GNU Classpath - javax.swing.text.html.parser</title></head>
+
+<body>
+<p>Provides the error tolerant, DTD-driven HTML 4.01 parser.
+The parser that is used in web robots, html content analysers, 
+web browsers, web editors and other related applications. 
+It should compativle with the older HTML versions, supporting
+obsoleted HTML featues. This package also includes some 
+supporting classes.</p>
+@author Audrius Meskauskas, Lithuania
+</body>
+</html>
Index: libjava/gnu/javax/swing/text/html/parser/models/PCDATAonly_model.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/models/PCDATAonly_model.java
diff -N libjava/gnu/javax/swing/text/html/parser/models/PCDATAonly_model.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/models/PCDATAonly_model.java	9 Jul 2005 22:09:37 -0000
@@ -0,0 +1,62 @@
+/* PCDATAonly_model.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser.models;
+
+import java.io.Serializable;
+
+/**
+ * The model, allowing only PCDATA in it (like for element OPTION).
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class PCDATAonly_model
+  extends node
+  implements Serializable
+{
+  private static final long serialVersionUID = 1;
+
+  public PCDATAonly_model()
+  {
+    super((char) 0, (char) 0, null);
+  }
+
+  public Object show(Object x)
+  {
+    return x.toString().equalsIgnoreCase("#pcdata") ? Boolean.TRUE : Boolean.FALSE;
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/models/TableRowContentModel.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/models/TableRowContentModel.java
diff -N libjava/gnu/javax/swing/text/html/parser/models/TableRowContentModel.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/models/TableRowContentModel.java	9 Jul 2005 22:09:37 -0000
@@ -0,0 +1,77 @@
+/* TableRowContentModel.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser.models;
+
+import java.io.Serializable;
+
+import javax.swing.text.html.parser.DTD;
+import javax.swing.text.html.parser.Element;
+
+/**
+ * Table row content model.
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class TableRowContentModel
+  extends node
+  implements Serializable
+{
+  private static final long serialVersionUID = 1;
+  final Element TD;
+
+  public TableRowContentModel(DTD dtd)
+  {
+    super((char) 0, (char) 0, null);
+    TD = dtd.getElement("TD");
+  }
+
+  public Object show(Object x)
+  {
+    // Always accept TD and TH
+    String s = x.toString();
+    if (s.equalsIgnoreCase("TD") || s.equalsIgnoreCase("TH"))
+      return Boolean.TRUE;
+
+    // Suggest closing in response to TR:
+    if (s.equalsIgnoreCase("TR"))
+      return Boolean.FALSE;
+
+    // Recommend TD for other cases:
+    return TD;
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/models/list.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/models/list.java
diff -N libjava/gnu/javax/swing/text/html/parser/models/list.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/models/list.java	9 Jul 2005 22:09:37 -0000
@@ -0,0 +1,382 @@
+/* list.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser.models;
+
+import java.io.Serializable;
+
+/**
+ * Part of the internal representation of the content model.
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class list
+  extends node
+  implements Serializable
+{
+  private static final long serialVersionUID = 1;
+
+  /**
+   * Setting to true means that the list nodes must always be connected
+   * by the same operation. This is far safer and clearer, but not
+   * required by default standard.
+   */
+  public static boolean CLEAR;
+
+  /**
+   * A list of nodes.
+   */
+  public final node[] nodes;
+
+  /**
+   * Creates a new model list that is a member of some enclosing list.
+   * @param binary_operator An operator with that this list is connected
+   * with other members of the enclosing list.
+   * @param unary_operator The unary operator for this list.
+   * @param a_nodes The nodes inside this list.
+   */
+  public list(char binary_operator, char unary_operator, node[] a_nodes)
+  {
+    super(binary_operator, unary_operator, a_nodes);
+    nodes = a_nodes;
+  }
+
+  /**
+   * Creates a new model list. Assigns the previous field.
+   * @param a_nodes The nodes for this list.
+   * @throws an error if the node elements are connected by the
+   * different operations. This is not supported, use grouping.
+   */
+  public list(node[] a_nodes)
+       throws Error
+  {
+    this(',', (char) 0, a_nodes);
+
+    int operation = nodes [ 0 ].binary;
+
+    for (int i = 0; i < nodes.length; i++)
+      {
+        if (CLEAR && nodes [ i ].binary != operation)
+          throw new Error("List members can only be connected by " +
+                          "the same operation, use grouping"
+                         );
+
+        if (i > 0)
+          nodes [ i ].previous = nodes [ i - 1 ];
+      }
+  }
+
+  /**
+   * Returns true if all members in the list are closed.
+   */
+  public boolean isClosed()
+  {
+    if (super.isClosed())
+      return true;
+    for (int i = 0; i < nodes.length; i++)
+      {
+        if (!nodes [ i ].isClosed())
+          return false;
+      }
+    return true;
+  }
+
+  /**
+   * Find the token that could match as the next token in
+   * the token list.
+   *
+   * @return Such token object or null if none is found.
+   */
+  public Object findFreeNode()
+  {
+    Object fn;
+    for (int j = 0; j < nodes.length; j++)
+      {
+        if (!nodes [ j ].isClosed())
+          {
+            fn = nodes [ j ].findFreeNode();
+            if (fn != null)
+              return fn;
+          }
+      }
+    return null;
+  }
+
+  /**
+   * Tries to match this list agains the given token sequence.
+   * @param tokens the sequence of the tokens to match.
+   * @return true if the valid match is found.
+   */
+  public boolean matches(Object[] tokens)
+  {
+    reset();
+
+    Object x;
+    boolean m;
+    boolean matched = false;
+
+    for (int i = 0; i < tokens.length; i++)
+      {
+        matched = false;
+        x = tokens [ i ];
+
+        nodescan: 
+        for (int j = 0; j < nodes.length; j++)
+          {
+            if (!nodes [ j ].isClosed())
+              {
+                m = nodes [ j ].performMatch(x);
+
+                if (m)
+                  {
+                    matched = true;
+                    break nodescan;
+                  }
+              }
+          }
+        if (!matched)
+          return false;
+      }
+
+    boolean valid = true;
+
+    for (int i = 0; i < nodes.length; i++)
+      {
+        if (!nodes [ i ].valid())
+          valid = false;
+      }
+
+    return valid;
+  }
+
+  /**
+   * The list never closes, despite it is trated as closed
+   * if all members in the list are closed.
+   * @return false.
+   */
+  public boolean mustClose()
+  {
+    return false;
+  }
+
+  /**
+   * Perform a match operation for the single token
+   * against this list.
+   * @param token a token to match.
+   * @return true if the match is found.
+   */
+  public boolean performMatch(Object token)
+  {
+    boolean ok = false;
+    Matching: 
+    for (int i = 0; i < nodes.length; i++)
+      {
+        ok = nodes [ i ].performMatch(token);
+
+        if (ok)
+          break Matching;
+      }
+
+    if (ok)
+      matches();
+
+    return ok;
+  }
+
+  /**
+   * Prepeares the list for the next matching operation.
+   */
+  public void reset()
+  {
+    super.reset();
+    for (int i = 0; i < nodes.length; i++)
+      nodes [ i ].reset();
+  }
+
+  /**
+   * Check if the provided token can match as a next token in the
+   * list. In the case of match, the list state changes, moving
+   * current position after the matched token. However if this method
+   * returns a suggested new token to insert before the provided one,
+   * the state of the list does not change.
+   * @return Boolean.TRUE if the match is found,
+   * Boolean.FALSE if the match is not possible and no token can be
+   * inserted to make the match valid. Otherwise, returns the
+   * token object that can be inserted before the last token in the
+   * list, probably (not for sure) making the match valid.
+   * If the object is an instance of Element or TagElement,
+   * it is first ensured that the object flag "omit start" is set.
+   */
+  public Object show(Object x)
+  {
+    boolean m;
+    boolean matched = false;
+
+    nodescan: 
+    for (int j = 0; j < nodes.length; j++)
+      {
+        if (!nodes [ j ].isClosed())
+          {
+            m = nodes [ j ].performMatch(x);
+
+            if (m)
+              {
+                matched = true;
+                break nodescan;
+              }
+            else
+              {
+                // For comma operation, only first not closed
+                // node must be tested for a match.
+                // unless it allows matching zero times.
+                if (binary == ',' &&
+                    !(nodes [ j ].unary == '?' || nodes [ j ].unary == '*')
+                   )
+                  break nodescan;
+              }
+          }
+      }
+
+    if (!matched)
+      {
+        // Find and return that would be matched.
+        Object freeNode = findFreeNode();
+        if (freeNode == null)
+          return Boolean.FALSE;
+        else
+          return freeNode;
+      }
+
+    for (int i = 0; i < nodes.length; i++)
+      if (!nodes [ i ].validPreliminary())
+        {
+          return Boolean.FALSE;
+        }
+
+    return Boolean.TRUE;
+  }
+
+  /**
+   * Returns a string representation of the list.
+   * @return String representation, similar to BNF expression.
+   */
+  public String toString()
+  {
+    StringBuffer b = new StringBuffer();
+    b.append(" ( ");
+    for (int i = 0; i < nodes.length; i++)
+      {
+        if (i > 0)
+          b.append(" " + (char) nodes [ i ].binary + " ");
+        b.append(nodes [ i ]);
+      }
+
+    b.append(" )");
+    if (unary != 0)
+      b.append((char) unary);
+    else
+      b.append(' ');
+    return b.toString();
+  }
+
+  /**
+   * Returns true if all memebers in the list are valid.
+   */
+  public boolean valid()
+  {
+    for (int i = 0; i < nodes.length; i++)
+      {
+        if (!nodes [ i ].valid())
+          return false;
+      }
+    return true;
+  }
+
+  /**
+   * Returns true if all memebers in the list are either valid
+   * or unvisited. The unvisited members can become valid after
+   * more tokens will be shown.
+   */
+  public boolean validPreliminary()
+  {
+    if (silenceAllowed())
+      {
+        boolean everVisited = false;
+        for (int i = 0; i < nodes.length; i++)
+          {
+            if (nodes [ i ].visits > 0)
+              {
+                everVisited = true;
+                break;
+              }
+          }
+        if (!everVisited)
+          return true;
+      }
+
+    for (int i = 0; i < nodes.length; i++)
+      {
+        if (!nodes [ i ].validPreliminary())
+          return false;
+      }
+    return true;
+  }
+
+  /**
+   * Closes all members in the list.
+   */
+  protected void close()
+  {
+    super.close();
+    for (int i = 0; i < nodes.length; i++)
+      {
+        nodes [ i ].close();
+      }
+  }
+
+  /**
+   * Compare given token with the token of this node.
+   * If the token represents a <code>list</code>, the call may be
+   * delegeted to the child subnodes.
+   * @param a_token A token to compare.
+   * @return True if the token matches the token of this node.
+   */
+  protected boolean compare(Object a_token)
+  {
+    return performMatch(a_token);
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/models/noTagModel.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/models/noTagModel.java
diff -N libjava/gnu/javax/swing/text/html/parser/models/noTagModel.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/models/noTagModel.java	9 Jul 2005 22:09:37 -0000
@@ -0,0 +1,75 @@
+/* noTagModel.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser.models;
+
+import java.io.Serializable;
+
+/**
+ * Disallows a single given tag at the current content level only.
+ * <p>@author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)</p>
+ */
+public class noTagModel
+  extends node
+  implements Serializable
+{
+  private static final long serialVersionUID = 1;
+  final String[] no;
+
+  public noTagModel(String[] noTag)
+  {
+    super((char) 0, (char) 0, null);
+    no = noTag;
+  }
+
+  public noTagModel(String noTag)
+  {
+    super((char) 0, (char) 0, null);
+    no = new String[] { noTag };
+  }
+
+  public Object show(Object x)
+  {
+    for (int i = 0; i < no.length; i++)
+      {
+        if (x.toString().equalsIgnoreCase(no [ i ]))
+          return Boolean.FALSE;
+      }
+    return Boolean.TRUE;
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/models/node.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/models/node.java
diff -N libjava/gnu/javax/swing/text/html/parser/models/node.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/models/node.java	9 Jul 2005 22:09:37 -0000
@@ -0,0 +1,337 @@
+/* node.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser.models;
+
+import java.io.Serializable;
+
+/**
+ * Part of the internal representation of the content model.
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class node
+  implements Serializable
+{
+  private static final long serialVersionUID = 1;
+
+  /**
+   * The token to match (can be instance of list).
+   */
+  public Object token;
+
+  /**
+   * True for the node that cannot be visited again.
+   */
+  public boolean _closed;
+
+  /**
+   * The binary operation for this node.
+   */
+  public char binary;
+
+  /**
+   * The unary opeation for this node.
+   */
+  public char unary;
+
+  /**
+   * The number of times the node already was visited.
+   */
+  public int visits;
+
+  /**
+   * The previous node in content model (used for closing nodes).
+   */
+  public node previous;
+
+  /**
+   * Creates a new node.
+   * @param binary_operator The operator, connecting all nodes in the list.
+   * The nodes, connected by the different operators, must be arranged into
+   * the different lists.
+   * @param unary_operator The unary operator for this node or zero if
+   * no such was specified.
+   * @param token The token to match. This can be either a string or
+   * the new instance of the list.
+   * @param a_previous The previous node in the list, null for the first
+   * node. This is used for propagating the closing operation for the
+   * comma delimited list.
+   */
+  public node(char binary_operator, char unary_operator, Object a_token)
+  {
+    if (a_token != null)
+      if (a_token.getClass().equals(node.class))
+        throw new Error("Creating node in node is redundant and ineffective.");
+
+    binary = binary_operator;
+    unary = unary_operator;
+    token = a_token;
+  }
+
+  /**
+   * Checks if this node is in the closed state.
+   * @return True if the node is closed.
+   */
+  public boolean isClosed()
+  {
+    return _closed;
+  }
+
+  /**
+   * Check if closing this node means closing the previous node.
+   */
+  public boolean closePrevious()
+  {
+    return binary == ',';
+  }
+
+  /**
+   * Return the token object if it could match as a next token in
+   * a token list of null if it could not.
+   * @return
+   */
+  public Object findFreeNode()
+  {
+    boolean ok;
+    if (isClosed() || silenceAllowed())
+      return null;
+
+    // Try if the node would stay valid after a one more visit.
+    visits++;
+    ok = valid();
+    visits--;
+
+    if (ok)
+      {
+        if (token instanceof node)
+          return ((node) token).findFreeNode();
+        else
+          return token;
+      }
+    else
+      return null;
+  }
+
+  /**
+   * Check if the current situation is such that the node must be closed
+   * now.
+   */
+  public boolean mustClose()
+  {
+    switch (unary)
+      {
+        case 0 :
+          return true;
+
+        case '*' :
+          return false;
+
+        case '+' :
+          return false;
+
+        case '?' :
+          return visits <= 1;
+
+        default :
+          throw new Error("Invalid unary operation " + unary + " ( '" +
+                          (char) unary + "' )"
+                         );
+      }
+  }
+
+  /**
+   * Do the match operation with the given token. This sets various
+   * flags.
+   * @param token The token to match.
+   * @return true if the the token matches node, false if it does not match
+   * or if the node is closed.
+   */
+  public boolean performMatch(Object a_token)
+  {
+    if (isClosed())
+      return false;
+
+    boolean matches = compare(a_token);
+    if (matches)
+      matches();
+
+    return matches;
+  }
+
+  /**
+   * Prepares the node for matching against a new list of tokens.
+   */
+  public void reset()
+  {
+    _closed = false;
+    visits = 0;
+  }
+
+  /**
+   * Check if the provided token can match this node.
+   * In the case of match, the node state changes, moving
+   * current position after the matched token. However if this method
+   * returns a suggested new token to insert before the provided one,
+   * the state of the list does not change.
+   * @return Boolean.TRUE if the match is found,
+   * Boolean.FALSE if the match is not possible and no token can be
+   * inserted to make the match valid. Otherwise, returns the
+   * token object that can be inserted before the last token in the
+   * list, probably (not for sure) making the match valid.
+   */
+  public Object show(Object x)
+  {
+    if (compare(x))
+      return performMatch(x) ? Boolean.TRUE : Boolean.FALSE;
+
+    Object recommended = findFreeNode();
+    return recommended != null ? recommended : Boolean.FALSE;
+  }
+
+  /**
+   * Check if it would be a valid case if this node is visited zero times.
+   * Nodes with unary operator * or ? need not be matched to make a
+   * model valid.
+   */
+  public boolean silenceAllowed()
+  {
+    return unary == '?' || unary == '*';
+  }
+
+  /**
+   * Returns a string representation of the list.
+   * @return String representation, similar to BNF expression.
+   */
+  public String toString()
+  {
+    StringBuffer b = new StringBuffer();
+
+    b.append(token);
+    if (unary != 0)
+      b.append((char) unary);
+    else
+      b.append('\'');
+
+    return b.toString();
+  }
+
+  /**
+   * Check if the node state is valid.
+   */
+  public boolean valid()
+  {
+    switch (unary)
+      {
+        case 0 :
+          if (binary == '|')
+            return true;
+          else
+            return visits == 1;
+
+        case '*' :
+          return true;
+
+        case '+' :
+          return visits > 0;
+
+        case '?' :
+          return visits <= 1;
+
+        default :
+          throw new Error("Invalid unary operation " + unary + " ( '" +
+                          (char) unary + "' )"
+                         );
+      }
+  }
+
+  public boolean validPreliminary()
+  {
+    return visits == 0 || valid();
+  }
+
+  /**
+  * Closes this node and, if closePrevious() returs true, calls close() for
+  * the previous node.
+  */
+  protected void close()
+  {
+    _closed = true;
+    if (previous != null && closePrevious())
+      previous.close();
+  }
+
+  /**
+   * Compare the provided token object with the token object of this node.
+   */
+  protected boolean compare(Object a_token)
+  {
+    if (token instanceof Object[])
+      throw new Error("Invalid token object, probably the 'list' " +
+                      "should be used. "
+                     );
+
+    if (token instanceof node[])
+      throw new Error("Do not use 'node' for the array of nodes, use 'list'. ");
+
+    if (token instanceof node)
+      {
+        return ((node) token).performMatch(a_token);
+      }
+
+    boolean rt = false;
+
+    if (token == a_token)
+      rt = true;
+    if (token.equals(a_token))
+      rt = true;
+    if (token.toString().equalsIgnoreCase(a_token.toString()))
+      rt = true;
+
+    return rt;
+  }
+
+  /**
+   * Fire the changes that must happen then the token matches this node.
+   */
+  protected void matches()
+  {
+    visits++;
+    if (mustClose())
+      close();
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/models/package.html
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/models/package.html
diff -N libjava/gnu/javax/swing/text/html/parser/models/package.html
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/models/package.html	9 Jul 2005 22:09:37 -0000
@@ -0,0 +1,53 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+<!-- package.html - describes classes in javax.swing.text.html.parser package.
+   Copyright (C) 2002 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. -->
+
+<html>
+<head><title>GNU Classpath - gnu.javax.swing.text.html.parser.models</title></head>
+
+<body>
+<p>This package contains classes for working with content models. In this implementation, the
+standardized content model is pre-processed by <code>transformer</code> into an instance of 
+<code>node</code>. Node holds a single element of the content model with the optional unary operation.
+The derived class <code>list</code> holds multiple nodes connected by the same binary operation.
+As the members of this <code>list</code> can also be lists itself, these structures support
+the most of required operations. Several cases when the model cannot be expressed using
+BNF syntax are handled providing specialised classes that are also derived from <code>node</code>.
+</p>
+@author Audrius Meskauskas, Lithuania
+</body>
+</html>
Index: libjava/gnu/javax/swing/text/html/parser/models/transformer.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/models/transformer.java
diff -N libjava/gnu/javax/swing/text/html/parser/models/transformer.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/models/transformer.java	9 Jul 2005 22:09:37 -0000
@@ -0,0 +1,201 @@
+/* transformer.java -- Content model transforms.
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser.models;
+
+import java.io.Serializable;
+
+import javax.swing.text.html.parser.ContentModel;
+import javax.swing.text.html.parser.DTD;
+
+/**
+ * Transforms the standard ContentModel tree into the internal representation,
+ * used in this implementation.
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class transformer
+  implements Serializable
+{
+  private static final long serialVersionUID = 1;
+
+  /**
+   * All binary operators.
+   */
+  protected static String binary = "&|,";
+
+  /**
+   * All unary operators.
+   */
+  protected static String unary = "+*?";
+
+  /**
+   * Measure length of the linked list of the content models.
+   * @param c The heading element of the linked list.
+   * @return the length of the list (0 for null 1 if c!=null and c.next==null,
+   * etc.
+   */
+  public static int measureChainLength(ContentModel c)
+  {
+    if (c == null)
+      return 0;
+    else
+      return measureChainLength(c.next) + 1;
+  }
+
+  /**
+   * Transform into internal representation without usind dtd.
+   * This should be used only for testing.
+   */
+  public static node transform(ContentModel c)
+  {
+    return transform(c, null);
+  }
+
+  /**
+   * Transform into internal representation.
+   * @param c a model to transform
+   * @return a transformed model
+   * @throws Error if the model structure contains errors.
+   */
+  public static node transform(ContentModel c, DTD dtd)
+  {
+    // Handle the special cases first.
+    if (c.content instanceof node)
+      return (node) c.content;
+
+    // Do the typical transform.
+    node n;
+
+    /* Case with the single token */
+    if (c.next == null)
+      {
+        n = optionalTransform(c, dtd);
+      }
+    else /* Case with the chain of the multiple tokens. */
+      {
+        node[] l = new node[ measureChainLength(c) ];
+        ContentModel m = c;
+        for (int i = 0; i < l.length; i++)
+          {
+            if (m.content instanceof ContentModel)
+              {
+                ContentModel nested = (ContentModel) m.content;
+                if (nested.next == null &&
+                    !(nested.content instanceof ContentModel)
+                   )
+                  {
+                    l [ i ] =
+                      new node((char) m.type, (char) nested.type, nested.content);
+                  }
+                else
+                  {
+                    l [ i ] = transform(nested, dtd);
+                  }
+              }
+            else
+              l [ i ] = new node((char) 0, (char) 0, m.content);
+            addtype(l [ i ], (char) m.type);
+            m = m.next;
+          }
+
+        if (isBinary(c.type))
+          for (int i = 0; i < l.length; i++)
+            {
+              l [ i ].binary = (char) c.type;
+            }
+
+        n = new list(l);
+      }
+
+    addtype(n, (char) c.type);
+
+    return n;
+  }
+
+  /**
+   * True for binary operator
+   * @param c a character to test
+   * @return true for [ ,&| ], false otherwise.
+   */
+  private static boolean isBinary(int c)
+  {
+    return binary.indexOf((char) c) >= 0;
+  }
+
+  /**
+   * True for unary operator.
+   * @param c a character to test
+   * @return true for [ +?* ], false otherwise.
+   */
+  private static boolean isUnary(int c)
+  {
+    return unary.indexOf((char) c) >= 0;
+  }
+
+  /**
+   * Assign an operation type for the given node.
+   * @param n A node to set the operation to.
+   * @param type Either binary or unary operation, is assigned to the
+   * corresponding field of the node.
+   * @throws error if the operation type is not
+   * representing a valid unary or binary operation.
+   */
+  private static void addtype(node n, char type)
+  {
+    if (isBinary(type))
+      n.binary = type;
+
+    else if (isUnary(type))
+      n.unary = type;
+
+    else if (type != 0)
+      throw new Error("Invalid operation '" + (char) type + "'");
+  }
+
+  private static node optionalTransform(ContentModel c, DTD dtd)
+  {
+    node n;
+    if (c.content instanceof ContentModel)
+      n = transform((ContentModel) c.content, dtd);
+    else
+
+      /* A single token with the specified operation */
+      n = new node((char) 0, (char) 0, c.content);
+    return n;
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/support/Parser.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/support/Parser.java
diff -N libjava/gnu/javax/swing/text/html/parser/support/Parser.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/support/Parser.java	9 Jul 2005 22:09:38 -0000
@@ -0,0 +1,1443 @@
+/* Parser.java -- HTML parser.
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser.support;
+
+import gnu.javax.swing.text.html.parser.htmlAttributeSet;
+import gnu.javax.swing.text.html.parser.htmlValidator;
+import gnu.javax.swing.text.html.parser.support.low.Constants;
+import gnu.javax.swing.text.html.parser.support.low.ParseException;
+import gnu.javax.swing.text.html.parser.support.low.ReaderTokenizer;
+import gnu.javax.swing.text.html.parser.support.low.Token;
+import gnu.javax.swing.text.html.parser.support.low.node;
+import gnu.javax.swing.text.html.parser.support.low.pattern;
+
+import java.io.IOException;
+import java.io.Reader;
+
+import java.util.Comparator;
+import java.util.Set;
+import java.util.TreeSet;
+import java.util.Vector;
+
+import javax.swing.text.ChangedCharSetException;
+import javax.swing.text.html.HTML;
+import javax.swing.text.html.parser.AttributeList;
+import javax.swing.text.html.parser.DTD;
+import javax.swing.text.html.parser.DTDConstants;
+import javax.swing.text.html.parser.Element;
+import javax.swing.text.html.parser.Entity;
+import javax.swing.text.html.parser.TagElement;
+
+/**
+ * <p>A simple error-tolerant HTML parser that uses a DTD document
+ * to access data on the possible tokens, arguments and syntax.</p>
+ * <p> The parser reads an HTML content from a Reader and calls various
+ * notifying methods (which should be overridden in a subclass)
+ * when tags or data are encountered.</p>
+ * <p>Some HTML elements need no opening or closing tags. The
+ * task of this parser is to invoke the tag handling methods also when
+ * the tags are not explicitly specified and must be supposed using
+ * information, stored in the DTD.
+ * For  example, parsing the document
+ * <p>&lt;table&gt;&lt;tr&gt;&lt;td&gt;a&lt;td&gt;b&lt;td&gt;c&lt;/tr&gt; <br>
+ * will invoke exactly the handling methods exactly in the same order
+ * (and with the same parameters) as if parsing the document: <br>
+ * <em>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt;&lt;
+ * tbody&gt;</em>&lt;tr&gt;&lt;td&gt;a<em>&lt;/td&gt;</em>&lt;td&gt;b<em>
+ * &lt;/td&gt;</em>&lt;td&gt;c<em>&lt;/td&gt;&lt;/tr&gt;</em>&lt;
+ * <em>/tbody&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</em></p>
+ * (supposed tags are given in italics). The parser also supports
+ * obsolete elements of HTML syntax.<p>
+ * </p>
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class Parser
+  extends ReaderTokenizer
+  implements DTDConstants
+{
+  /**
+   * The current html tag.
+   */
+  public Token hTag = new Token();
+
+  /**
+   * The document template description that will be used to parse the documents.
+   */
+  protected DTD dtd;
+
+  /**
+   * The value of this field determines whether or not the Parser will be
+   * strict in enforcing SGML compatibility. The default value is false,
+   * stating that the parser should do everything to parse and get at least
+   * some information even from the incorrectly written HTML input.
+   */
+  protected boolean strict;
+
+  /**
+   * This fields has positive values in preformatted tags.
+   */
+  protected int preformatted = 0;
+
+  /**
+   * The set of the document tags. This field is used for supporting
+   * markFirstTime().
+   */
+  private Set documentTags =
+    new TreeSet(new Comparator()
+      {
+        public int compare(Object a, Object b)
+        {
+          return ((String) a).compareToIgnoreCase((String) b);
+        }
+      }
+               );
+
+  /**
+  * The buffer to collect the incremental output like text or coment.
+  */
+  private StringBuffer buffer = new StringBuffer();
+
+  /**
+   * The buffer to store the document title.
+   */
+  private StringBuffer title = new StringBuffer();
+
+  /**
+   * The current token.
+   */
+  private Token t;
+
+  /**
+   * True means that the 'title' tag of this document has
+   * already been handled.
+   */
+  private boolean titleHandled;
+
+  /**
+   * True means that the 'title' tag is currently open and all
+   * text is also added to the title buffer.
+   */
+  private boolean titleOpen;
+
+  /**
+   * The attributes of the current HTML element.
+   * Package-private to avoid an accessor method.
+   */
+  htmlAttributeSet attributes =
+    htmlAttributeSet.EMPTY_HTML_ATTRIBUTE_SET;
+
+  /**
+   * The validator, controlling the forcible closing of the tags that
+   * (in accordance to dtd) are not allowed in the current context.
+   */
+  private htmlValidator validator;
+
+  /**
+   * Provides the default values for parameters in the case when these
+   * values are defined in the DTD.
+   */
+  private parameterDefaulter defaulter;
+
+  /**
+   * The text pre-processor for handling line ends and tabs.
+   */
+  private textPreProcessor textProcessor = new textPreProcessor();
+
+  /**
+   * Creates a new Parser that uses the given
+   * {@link javax.swing.text.html.parser.DTD }. The only standard way
+   * to get an instance of DTD is to construct it manually, filling in
+   * all required fields.
+   * @param a_dtd The DTD to use. The parser behaviour after passing null
+   * as an argument is not documented and may vary between implementations.
+   */
+  public Parser(DTD a_dtd)
+  {
+    if (a_dtd == null)
+      dtd = gnu.javax.swing.text.html.parser.HTML_401F.getInstance();
+    else
+      dtd = a_dtd;
+
+    defaulter = new parameterDefaulter(dtd);
+
+    validator =
+      new htmlValidator(dtd)
+        {
+          /**
+           * Handles the error message. This method must be overridden to pass
+           * the message where required.
+           * @param msg The message text.
+           */
+          protected void s_error(String msg)
+          {
+            error(msg);
+          }
+
+          /**
+           * The method is called when the tag validator decides to close the
+           * tag on its own initiative. After reaching the end of stream,
+           * The tag validator closes all unclosed elements that are required
+           * to have the end (closing) tag.
+           *
+           * @param element The tag being fictionally (forcibly) closed.
+           */
+          protected void handleSupposedEndTag(Element tElement)
+          {
+            // The tag is cloned as the original tElement is the
+            // element from the starting tag - may be accidently used
+            // somewhere else.
+            TagElement tag = makeTag(tElement, true);
+            _handleEndTag_remaining(tag);
+          }
+
+          /**
+           * The method is called when the the tag validator decides to open
+           * the new tag on its own initiative. The tags, opened in this
+           * way, are HTML, HEAD and BODY. The attribute set is temporary
+           * assigned to the empty one, the previous value is
+           * restored before return.
+           *
+           * @param element The tag being fictionally (forcibly) closed.
+           */
+          protected void handleSupposedStartTag(Element tElement)
+          {
+            TagElement tag = makeTag(tElement, true);
+            htmlAttributeSet were = attributes;
+            attributes = htmlAttributeSet.EMPTY_HTML_ATTRIBUTE_SET;
+            _handleStartTag(tag);
+            attributes = were;
+          }
+        };
+  }
+
+  /**
+   * Get the attributes of the current tag.
+   * @return The attribute set, representing the attributes of the current tag.
+   */
+  public htmlAttributeSet getAttributes()
+  {
+    return attributes;
+  }
+
+  /**
+   * Invokes the error handler. The default method in this implementation
+   * delegates the call to handleError, also providing the current line.
+   */
+  public void error(String msg)
+  {
+    error(msg, getTokenAhead());
+  }
+
+  public void error(String msg, Token atToken)
+  {
+    if (atToken != null)
+      handleError(atToken.where.beginLine,
+                  msg + ": line " + atToken.where.beginLine +
+                  ", absolute pos " + atToken.where.startPosition
+                 );
+    else
+      handleError(0, msg);
+  }
+
+  /**
+   * Invokes the error handler. The default method in this implementation
+   * delegates the call to error (parm1+": '"+parm2+"'").
+   */
+  public void error(String msg, String invalid)
+  {
+    error(msg + ": '" + invalid + "'");
+  }
+
+  /**
+   * Invokes the error handler. The default method in this implementation
+   * delegates the call to error (parm1+" "+ parm2+" "+ parm3).
+   */
+  public void error(String parm1, String parm2, String parm3)
+  {
+    error(parm1 + " " + parm2 + " " + parm3);
+  }
+
+  /**
+   * Invokes the error handler. The default method in this implementation
+   * delegates the call to error (parm1+" "+ parm2+" "+ parm3+" "+ parm4).
+   */
+  public void error(String parm1, String parm2, String parm3, String parm4)
+  {
+    error(parm1 + " " + parm2 + " " + parm3 + " " + parm4);
+  }
+
+  public void flushAttributes()
+  {
+  }
+
+  /**
+   * Parse the HTML text, calling various methods in response to the
+   * occurence of the corresponding HTML constructions.
+   * @param reader The reader to read the source HTML from.
+   * @throws IOException If the reader throws one.
+   */
+  public synchronized void parse(Reader reader)
+                          throws IOException
+  {
+    reset(reader);
+    restart();
+    try
+      {
+        parseDocument();
+        validator.closeAll();
+      }
+    catch (ParseException ex)
+      {
+        if (ex != null)
+          {
+            error("Unable to continue parsing the document", ex.getMessage());
+
+            Throwable cause = ex.getCause();
+            if (cause instanceof IOException)
+              throw (IOException) cause;
+          }
+      }
+  }
+
+  /**
+   * Parses DTD markup declaration. Currently returns null without action.
+   * @return null.
+   * @throws IOException
+   */
+  public String parseDTDMarkup()
+                        throws IOException
+  {
+    return null;
+  }
+
+  /**
+   * Parse SGML insertion ( &lt;! ... &gt; ). When the
+   * the SGML insertion is found, this method is called, passing
+   * SGML in the string buffer as a parameter. The default method
+   * returns false without action and can be overridden to
+   * implement user - defined SGML support.
+   * <p>
+   * If you need more information about SGML insertions in HTML documents,
+   * the author suggests to read SGML tutorial on
+   * {@link http://www.w3.org/TR/WD-html40-970708/intro/sgmltut.html}.
+   * We also recommend Goldfarb C.F (1991) <i>The SGML Handbook</i>,
+   * Oxford University Press, 688 p, ISBN: 0198537379.
+   * </p>
+   * @param strBuff
+   * @return true if this is a valid DTD markup declaration.
+   * @throws IOException
+   */
+  public boolean parseMarkupDeclarations(StringBuffer strBuff)
+                                  throws IOException
+  {
+    return false;
+  }
+
+  /**
+   * Get the first line of the last parsed token.
+   */
+  protected int getCurrentLine()
+  {
+    return hTag.where.beginLine;
+  }
+
+  /**
+   * Read parseable character data, add to buffer.
+   * @param clearBuffer If true, buffer if filled by CDATA section,
+   * otherwise the section is appended to the existing content of the
+   * buffer.
+   *
+   * @throws ParseException
+   */
+  protected void CDATA(boolean clearBuffer)
+                throws ParseException
+  {
+    Token start = hTag = getTokenAhead();
+
+    if (clearBuffer)
+      buffer.setLength(0);
+
+    // Handle expected EOF.
+    if (start.kind == EOF)
+      return;
+
+    read: 
+    while (true)
+      {
+        t = getTokenAhead();
+        if (t.kind == EOF)
+          {
+            error("unexpected eof", t);
+            break read;
+          }
+        else if (t.kind == BEGIN)
+          break read;
+        else if (t.kind == Constants.ENTITY)
+          {
+            resolveAndAppendEntity(t);
+            getNextToken();
+          }
+        else
+          {
+            append(t);
+            getNextToken();
+          }
+      }
+    hTag = new Token(start, getTokenAhead(0));
+    if (buffer.length() != 0)
+      _handleText();
+  }
+
+  /**
+  * Process Comment. This method skips till --> without
+  * taking SGML constructs into consideration.  The supported SGML
+  * constructs are handled separately.
+  */
+  protected void Comment()
+                  throws ParseException
+  {
+    buffer.setLength(0);
+
+    Token start = hTag = mustBe(BEGIN);
+    optional(WS);
+    mustBe(EXCLAMATION);
+    optional(WS);
+    mustBe(DOUBLE_DASH);
+
+    Token t;
+    Token last;
+
+    comment: 
+    while (true)
+      {
+        t = getTokenAhead();
+        if (t.kind == EOF)
+          {
+            handleEOFInComment();
+            last = t;
+            break comment;
+          }
+        else if (COMMENT_END.matches(this))
+          {
+            mustBe(DOUBLE_DASH);
+            optional(WS);
+            last = mustBe(END);
+            break comment;
+          }
+        else if (COMMENT_TRIPLEDASH_END.matches(this))
+          {
+            mustBe(DOUBLE_DASH);
+            t = mustBe(NUMTOKEN);
+            if (t.getImage().equals("-"))
+              {
+                append(t);
+                last = mustBe(END);
+                break comment;
+              }
+            else
+              {
+                buffer.append("--");
+                append(t);
+                t = getTokenAhead();
+              }
+          }
+        else
+        /* The lllll-- can match as NUMTOKEN */
+        if ((t.getImage().endsWith("--")) &&
+            (
+              getTokenAhead(1).kind == END ||
+              (getTokenAhead(1).kind == WS && getTokenAhead(2).kind == END)
+            )
+           )
+          {
+            buffer.append(t.getImage().substring(0, t.getImage().length() - 2));
+
+            /* Skip the closing > that we have already checked. */
+            last = mustBe(t.kind);
+            break comment;
+          }
+        else
+          append(t);
+        mustBe(t.kind);
+      }
+    hTag = new Token(start, last);
+    handleComment();
+  }
+
+  /**
+  * Read a script. The text, returned without any changes,
+  * is terminated only by the closing tag SCRIPT.
+  */
+  protected void Script()
+                 throws ParseException
+  {
+    Token name;
+
+    Token start = hTag = mustBe(BEGIN);
+    optional(WS);
+
+    name = mustBe(SCRIPT);
+
+    optional(WS);
+
+    restOfTag(false, name, start);
+
+    buffer.setLength(0);
+
+    script: 
+    while (!SCRIPT_CLOSE.matches(this))
+      {
+        append(getNextToken());
+      }
+
+    consume(SCRIPT_CLOSE);
+
+    _handleText();
+
+    endTag(false);
+    _handleEndTag(makeTagElement(name.getImage(), false));
+  }
+
+  /**
+  * Process SGML insertion that is not a comment.
+  */
+  protected void Sgml()
+               throws ParseException
+  {
+    if (COMMENT_OPEN.matches(this))
+      Comment();
+    else // skip till ">"
+      {
+        Token start = hTag = mustBe(BEGIN);
+        optional(WS);
+        mustBe(EXCLAMATION);
+
+        buffer.setLength(0);
+        read: 
+        while (true)
+          {
+            t = getNextToken();
+            if (t.kind == Constants.ENTITY)
+              {
+                resolveAndAppendEntity(t);
+              }
+            else if (t.kind == EOF)
+              {
+                error("unexpected eof", t);
+                break read;
+              }
+            else if (t.kind == END)
+              break read;
+            else
+              append(t);
+          }
+
+        try
+          {
+            parseMarkupDeclarations(buffer);
+          }
+        catch (IOException ex)
+          {
+            error("Unable to parse SGML insertion: '" + buffer + "'",
+                  new Token(start, t)
+                 );
+          }
+      }
+  }
+
+  /**
+  * Read a style definition. The text, returned without any changes,
+  * is terminated only by the closing tag STYLE.
+  */
+  protected void Style()
+                throws ParseException
+  {
+    Token name;
+
+    Token start = hTag = mustBe(BEGIN);
+    optional(WS);
+
+    name = mustBe(STYLE);
+
+    optional(WS);
+
+    restOfTag(false, name, start);
+
+    buffer.setLength(0);
+
+    style: 
+    while (!STYLE_CLOSE.matches(this))
+      {
+        append(getNextToken());
+      }
+
+    consume(STYLE_CLOSE);
+
+    _handleText();
+
+    endTag(false);
+    _handleEndTag(makeTagElement(name.getImage(), false));
+  }
+
+  /**
+   * Read a html tag.
+   */
+  protected void Tag()
+              throws ParseException
+  {
+    mark(true);
+
+    boolean closing = false;
+    Token name;
+    Token start = hTag = mustBe(BEGIN);
+
+    optional(WS);
+    name = getNextToken();
+    optional(WS);
+
+    if (name.kind == SLASH)
+      {
+        closing = true;
+        name = getNextToken();
+      }
+
+    restOfTag(closing, name, start);
+  }
+
+  /**
+   * A hook, for operations, preceeding call to handleText.
+   * Handle text in a string buffer.
+   * In non - preformatted mode, all line breaks immediately following the
+   * start tag and immediately before an end tag is discarded,
+   * \r, \n and \t are replaced by spaces, multiple space are replaced
+   * by the single one and the result is  moved into array,
+   * passing it  to handleText().
+   */
+  protected void _handleText()
+  {
+    char[] text;
+
+    if (preformatted > 0)
+      text = textProcessor.preprocessPreformatted(buffer);
+    else
+      text = textProcessor.preprocess(buffer);
+
+    if (text != null && text.length > 0)
+      {
+        TagElement pcdata = new TagElement(dtd.getElement("#pcdata"));
+        attributes = htmlAttributeSet.EMPTY_HTML_ATTRIBUTE_SET;
+        _handleEmptyTag(pcdata);
+
+        handleText(text);
+        if (titleOpen)
+          title.append(text);
+      }
+  }
+
+  /**
+   * Add the image of this token to the buffer.
+   * @param t A token to append.
+   */
+  protected final void append(Token t)
+  {
+    if (t.kind != EOF)
+      t.appendTo(buffer);
+  }
+
+  /**
+   * Consume pattern that must match.
+   * @param p A pattern to consume.
+   */
+  protected final void consume(pattern p)
+  {
+    node n;
+    for (int i = 0; i < p.nodes.length; i++)
+      {
+        n = p.nodes [ i ];
+        if (n.optional)
+          optional(n.kind);
+        else
+          mustBe(n.kind);
+      }
+  }
+
+  /**
+   * The method is called when the HTML end (closing) tag is found or if
+   * the parser concludes that the one should be present in the
+   * current position. The method is called immediatly
+   * before calling the handleEndTag().
+   * @param omitted True if the tag is no actually present in the document,
+   * but is supposed by the parser (like &lt;/html&gt; at the end of the
+   * document).
+   */
+  protected void endTag(boolean omitted)
+  {
+  }
+
+  /**
+   * Handle HTML comment. The default method returns without action.
+   * @param comment
+   */
+  protected void handleComment(char[] comment)
+  {
+  }
+
+  /**
+   * This is additionally called in when the HTML content terminates
+   * without closing the HTML comment. This can only happen if the
+   * HTML document contains errors (for example, the closing --;gt is
+   * missing.
+   */
+  protected void handleEOFInComment()
+  {
+    error("Unclosed comment");
+  }
+
+  /**
+   * Handle the tag with no content, like &lt;br&gt;. The method is
+   * called for the elements that, in accordance with the current DTD,
+   * has an empty content.
+   * @param The tag being handled.
+   * @throws javax.swing.text.ChangedCharSetException
+   */
+  protected void handleEmptyTag(TagElement tag)
+                         throws javax.swing.text.ChangedCharSetException
+  {
+  }
+
+  /**
+   * The method is called when the HTML closing tag ((like &lt;/table&gt;)
+   * is found or if the parser concludes that the one should be present
+   * in the current position.
+   * @param The tag
+   */
+  protected void handleEndTag(TagElement tag)
+  {
+  }
+
+  /* Handle error that has occured in the given line. */
+  protected void handleError(int line, String message)
+  {
+  }
+
+  /**
+   * The method is called when the HTML opening tag ((like &lt;table&gt;)
+   * is found or if the parser concludes that the one should be present
+   * in the current position.
+   * @param The tag
+   */
+  protected void handleStartTag(TagElement tag)
+  {
+  }
+
+  /**
+   * Handle the text section.
+   * <p> For non-preformatted section, the parser replaces
+   * \t, \r and \n by spaces and then multiple spaces
+   * by a single space. Additionaly, all whitespace around
+   * tags is discarded.
+   * </p>
+   * <p> For pre-formatted text (inside TEXAREA and PRE), the parser preserves
+   * all tabs and spaces, but removes <b>one</b>  bounding \r, \n or \r\n,
+   * if it is present. Additionally, it replaces each occurence of \r or \r\n
+   * by a single \n.</p>
+   *
+   * @param text A section text.
+   */
+  protected void handleText(char[] text)
+  {
+  }
+
+  /**
+   * Handle HTML &lt;title&gt; tag. This method is invoked when
+   * both title starting and closing tags are already behind.
+   * The passed argument contains the concatenation of all
+   * title text sections.
+   * @param The title text.
+   */
+  protected void handleTitle(char[] title)
+  {
+  }
+
+  /**
+   * Constructs the tag from the given element. In this implementation,
+   * this is defined, but never called.
+   * @return the tag
+   */
+  protected TagElement makeTag(Element element)
+  {
+    return makeTag(element, false);
+  }
+
+  /**
+   * Constructs the tag from the given element.
+   * @param the tag base {@link javax.swing.text.html.parser.Element}
+   * @param isSupposed true if the tag is not actually present in the
+   * html input, but the parser supposes that it should to occur in
+   * the current location.
+   * @return the tag
+   */
+  protected TagElement makeTag(Element element, boolean isSupposed)
+  {
+    return new TagElement(element, isSupposed);
+  }
+
+  /**
+   * This is called when the tag, representing the given element,
+   * occurs first time in the document.
+   * @param element
+   */
+  protected void markFirstTime(Element element)
+  {
+  }
+
+  /**
+   * Consume the token that was checked before and hence MUST be present.
+   * @param kind The kind of token to consume.
+   */
+  protected Token mustBe(int kind)
+  {
+    if (getTokenAhead().kind == kind)
+      return getNextToken();
+    else
+      {
+        String ei = "";
+        if (kind < 1000)
+          ei = " ('" + (char) kind + "') ";
+        throw new AssertionError("The token of kind " + kind + ei +
+                                 " MUST be here,"
+                                );
+      }
+  }
+
+  /**
+   * Handle attribute without value. The default method uses
+   * the only allowed attribute value from DTD.
+   * If the attribute is unknown or allows several values,
+   * the HTML.NULL_ATTRIBUTE_VALUE is used. The attribute with
+   * this value is added to the attribute set.
+   * @param element The name of element.
+   * @param attribute The name of attribute without value.
+   */
+  protected void noValueAttribute(String element, String attribute)
+  {
+    Object value = HTML.NULL_ATTRIBUTE_VALUE;
+
+    Element e = (Element) dtd.elementHash.get(element.toLowerCase());
+    if (e != null)
+      {
+        AttributeList attr = e.getAttribute(attribute);
+        if (attr != null)
+          {
+            Vector values = attr.values;
+            if (values != null && values.size() == 1)
+              value = values.get(0);
+          }
+      }
+    attributes.addAttribute(attribute, value);
+  }
+
+  /**
+   * Consume the optional token, if present.
+   * @param kind The kind of token to consume.
+   */
+  protected Token optional(int kind)
+  {
+    if (getTokenAhead().kind == kind)
+      return getNextToken();
+    else
+      return null;
+  }
+
+  /** Parse the html document. */
+  protected void parseDocument()
+                        throws ParseException
+  {
+    while (getTokenAhead().kind != EOF)
+      {
+        advanced = false;
+        if (TAG.matches(this))
+          Tag();
+        else if (COMMENT_OPEN.matches(this))
+          Comment();
+        else if (STYLE_OPEN.matches(this))
+          Style();
+        else if (SCRIPT_OPEN.matches(this))
+          Script();
+        else if (SGML.matches(this))
+          Sgml();
+        else
+          CDATA(true);
+
+        // Surely HTML error, treat as a text.
+        if (!advanced)
+          {
+            Token wrong = getNextToken();
+            error("unexpected '" + wrong.getImage() + "'", wrong);
+            buffer.setLength(0);
+            buffer.append(wrong.getImage());
+            _handleText();
+          }
+      }
+  }
+
+  /**
+   * Read the element attributes, adding them into attribute set.
+   * @param element The element name (needed to access attribute
+   * information in dtd).
+   */
+  protected void readAttributes(String element)
+  {
+    Token name;
+    Token value;
+    Token next;
+    String attrValue;
+
+    attributes = new htmlAttributeSet();
+
+    optional(WS);
+
+    attributeReading: 
+    while (getTokenAhead().kind == NUMTOKEN)
+      {
+        name = getNextToken();
+        optional(WS);
+
+        next = getTokenAhead();
+        if (next.kind == EQ)
+          {
+            mustBe(EQ);
+            optional(WS);
+
+            next = getNextToken();
+
+            switch (next.kind)
+              {
+                case QUOT :
+
+                  // read "quoted" attribute.
+                  buffer.setLength(0);
+                  readTillTokenE(QUOT);
+                  attrValue = buffer.toString();
+                  break;
+
+                case AP :
+
+                  // read 'quoted' attribute.
+                  buffer.setLength(0);
+                  readTillTokenE(AP);
+                  attrValue = buffer.toString();
+                  break;
+
+                // read unquoted attribute.
+                case NUMTOKEN :
+                  value = next;
+                  optional(WS);
+
+                  // Check maybe the opening quote is missing.
+                  next = getTokenAhead();
+                  if (bQUOTING.get(next.kind))
+                    {
+                      hTag = next;
+                      error("The value without opening quote is closed with '" +
+                            next.getImage() + "'"
+                           );
+                    }
+                  attrValue = value.getImage();
+                  break;
+
+                default :
+                  break attributeReading;
+              }
+            attributes.addAttribute(name.getImage(), attrValue);
+            optional(WS);
+          }
+        else // The '=' is missing: attribute without value.
+          {
+            noValueAttribute(element, name.getImage());
+          }
+      }
+  }
+
+  /**
+   * Return string, corresponding the given named entity.
+   * The name is passed with the preceeding &, but without
+   * the ending semicolon.
+   */
+  protected String resolveNamedEntity(final String a_tag)
+  {
+    // Discard &
+    if (!a_tag.startsWith("&"))
+      throw new AssertionError("Named entity " + a_tag +
+                               " must start witn '&'."
+                              );
+
+    String tag = a_tag.substring(1);
+
+    try
+      {
+        Entity entity = dtd.getEntity(tag);
+        if (entity != null)
+          return entity.getString();
+
+        entity = dtd.getEntity(tag.toLowerCase());
+
+        if (entity != null)
+          {
+            error("The name of this entity should be in lowercase", a_tag);
+            return entity.getString();
+          }
+      }
+    catch (IndexOutOfBoundsException ibx)
+      {
+        /* The error will be reported. */
+      }
+
+    error("Unknown named entity", a_tag);
+    return a_tag;
+  }
+
+  /**
+   * Return char, corresponding the given numeric entity.
+   * The name is passed with the preceeding &#, but without
+   * the ending semicolon.
+   */
+  protected char resolveNumericEntity(final String a_tag)
+  {
+    // Discard &#
+    if (!a_tag.startsWith("&#"))
+      throw new AssertionError("Numeric entity " + a_tag +
+                               " must start witn '&#'."
+                              );
+
+    String tag = a_tag.substring(2);
+
+    try
+      {
+        // Determine the encoding type:
+        char cx = tag.charAt(0);
+        if (cx == 'x' || cx == 'X') // Hexadecimal &#Xnnn;
+
+          return (char) Integer.parseInt(tag.substring(1), 16);
+
+        return (char) Integer.parseInt(tag);
+      }
+
+    /* The error will be reported. */
+    catch (NumberFormatException nex)
+      {
+      }
+    catch (IndexOutOfBoundsException ix)
+      {
+      }
+
+    error("Invalid numeric entity", a_tag);
+    return '?';
+  }
+
+  /**
+   * Reset all fields into the intial default state, preparing the
+   * parset for parsing the next document.
+   */
+  protected void restart()
+  {
+    documentTags.clear();
+    titleHandled = false;
+    titleOpen = false;
+    buffer.setLength(0);
+    title.setLength(0);
+    validator.restart();
+  }
+
+  /**
+   * The method is called when the HTML opening tag ((like &lt;table&gt;)
+   * is found or if the parser concludes that the one should be present
+   * in the current position. The method is called immediately before
+   * calling the handleStartTag.
+   * @param The tag
+   */
+  protected void startTag(TagElement tag)
+                   throws ChangedCharSetException
+  {
+  }
+
+  /**
+   * Handle a complete element, when the tag content is already present in the
+   * buffer and both starting and heading tags behind. This is called
+   * in the case when the tag text must not be parsed for the nested
+   * elements (elements STYLE and SCRIPT).
+   */
+  private void _handleCompleteElement(TagElement tag)
+  {
+    _handleStartTag(tag);
+
+    // Suppress inclusion of the SCRIPT ans STYLE texts into the title.
+    HTML.Tag h = tag.getHTMLTag();
+    if (h == HTML.Tag.SCRIPT || h == HTML.Tag.STYLE)
+      {
+        boolean tmp = titleOpen;
+        titleOpen = false;
+        _handleText();
+        titleOpen = tmp;
+      }
+    else
+      _handleText();
+
+    _handleEndTag(tag);
+  }
+
+  /**
+   * A hooks for operations, preceeding call to handleEmptyTag().
+   * Handle the tag with no content, like &lt;br&gt;. As no any
+   * nested tags are expected, the tag validator is not involved.
+   * @param The tag being handled.
+   */
+  private void _handleEmptyTag(TagElement tag)
+  {
+    try
+      {
+        validator.validateTag(tag, attributes);
+        handleEmptyTag(tag);
+      }
+    catch (ChangedCharSetException ex)
+      {
+        error("Changed charset exception:", ex.getMessage());
+      }
+  }
+
+  /**
+   * A hooks for operations, preceeding call to handleEndTag().
+   * The method is called when the HTML closing tag
+   * is found. Calls handleTitle after closing the 'title' tag.
+   * @param The tag
+   */
+  private void _handleEndTag(TagElement tag)
+  {
+    validator.closeTag(tag);
+    _handleEndTag_remaining(tag);
+  }
+
+  /**
+   * Actions that are also required if the closing action was
+   * initiated by the tag validator.
+   * Package-private to avoid an accessor method.
+   */
+  void _handleEndTag_remaining(TagElement tag)
+  {
+    HTML.Tag h = tag.getHTMLTag();
+
+    handleEndTag(tag);
+    endTag(tag.fictional());
+
+    if (h.isPreformatted())
+      preformatted--;
+    if (preformatted < 0)
+      preformatted = 0;
+
+    if (h == HTML.Tag.TITLE)
+      {
+        titleOpen = false;
+        titleHandled = true;
+
+        char[] a = new char[ title.length() ];
+        title.getChars(0, a.length, a, 0);
+        handleTitle(a);
+      }
+  }
+
+  /**
+   * A hooks for operations, preceeding call to handleStartTag().
+   * The method is called when the HTML opening tag ((like &lt;table&gt;)
+   * is found.
+   * Package-private to avoid an accessor method.
+   * @param The tag
+   */
+  void _handleStartTag(TagElement tag)
+  {
+    validator.openTag(tag, attributes);
+    startingTag(tag);
+    handleStartTag(tag);
+
+    HTML.Tag h = tag.getHTMLTag();
+
+    if (h.isPreformatted())
+      preformatted++;
+
+    if (h == HTML.Tag.TITLE)
+      {
+        if (titleHandled)
+          error("Repetetive <TITLE> tag");
+        titleOpen = true;
+        titleHandled = false;
+      }
+  }
+
+  /**
+   * Resume parsing after heavy errors in HTML tag structure.
+   * @throws ParseException
+   */
+  private void forciblyCloseTheTag()
+                            throws ParseException
+  {
+    int closeAt = 0;
+    buffer.setLength(0);
+
+    ahead: 
+    for (int i = 1; i < 100; i++)
+      {
+        t = getTokenAhead(i - 1);
+        if (t.kind == EOF || t.kind == BEGIN)
+          break ahead;
+        if (t.kind == END)
+          {
+            /* Closing '>' found. */
+            closeAt = i;
+            break ahead;
+          }
+      }
+    if (closeAt > 0)
+      {
+        buffer.append("Ignoring '");
+        for (int i = 1; i <= closeAt; i++)
+          {
+            t = getNextToken();
+            append(t);
+          }
+        buffer.append('\'');
+        error(buffer.toString());
+      }
+  }
+
+  /**
+   * Handle comment in string buffer. You can avoid allocating a char
+   * array each time by processing your comment directly here.
+   */
+  private void handleComment()
+  {
+    char[] a = new char[ buffer.length() ];
+    buffer.getChars(0, a.length, a, 0);
+    handleComment(a);
+  }
+
+  private TagElement makeTagElement(String name, boolean isSupposed)
+  {
+    Element e = (Element) dtd.elementHash.get(name.toLowerCase());
+    if (e == null)
+      {
+        error("Unknown tag <" + name + ">");
+        e = dtd.getElement(name);
+        e.name = name.toUpperCase();
+        e.index = -1;
+      }
+
+    if (!documentTags.contains(e.name))
+      {
+        markFirstTime(e);
+        documentTags.add(e.name);
+      }
+
+    return makeTag(e, isSupposed);
+  }
+
+  /**
+   * Read till the given token, resolving entities. Consume the given
+   * token without adding it to buffer.
+   * @param till The token to read till
+   * @throws ParseException
+   */
+  private void readTillTokenE(int till)
+                       throws ParseException
+  {
+    buffer.setLength(0);
+    read: 
+    while (true)
+      {
+        t = getNextToken();
+        if (t.kind == Constants.ENTITY)
+          {
+            resolveAndAppendEntity(t);
+          }
+        else if (t.kind == EOF)
+          {
+            error("unexpected eof", t);
+            break read;
+          }
+        else if (t.kind == till)
+          break read;
+        else if (t.kind == WS)
+          {
+            // Processing whitespace in accordance with CDATA rules:
+            String s = t.getImage();
+            char c;
+            for (int i = 0; i < s.length(); i++)
+              {
+                c = s.charAt(i);
+                if (c == '\r')
+                  buffer.append(' '); // CR replaced by space
+                else if (c == '\n')
+                  ; // LF ignored
+                else if (c == '\t')
+                  buffer.append(' '); // Tab replaced by space
+                else
+                  buffer.append(c);
+              }
+          }
+        else
+          append(t);
+      }
+  }
+
+  /**
+   * Resolve the entity and append it to the end of buffer.
+   * @param entity
+   */
+  private void resolveAndAppendEntity(Token entity)
+  {
+    switch (entity.category)
+      {
+        case ENTITY_NAMED :
+          buffer.append(resolveNamedEntity(entity.getImage()));
+          break;
+
+        case ENTITY_NUMERIC :
+          buffer.append(resolveNumericEntity(entity.getImage()));
+          break;
+
+        default :
+          throw new AssertionError("Invalid entity category " +
+                                   entity.category
+                                  );
+      }
+  }
+
+  /**
+   * Handle the remaining of HTML tags. This is a common end for
+   * TAG, SCRIPT and STYLE.
+   * @param closing True for closing tags ( &lt;/TAG&gt; ).
+   * @param name Name of element
+   * @param start Token where element has started
+   * @throws ParseException
+   */
+  private void restOfTag(boolean closing, Token name, Token start)
+                  throws ParseException
+  {
+    boolean end = false;
+    Token next;
+
+    optional(WS);
+
+    readAttributes(name.getImage());
+
+    optional(WS);
+
+    next = getTokenAhead();
+    if (next.kind == END)
+      {
+        mustBe(END);
+        end = true;
+      }
+
+    hTag = new Token(start, next);
+
+    attributes.setResolveParent(defaulter.getDefaultParameters(name.getImage()));
+
+    if (!end)
+      {
+        // The tag body contains errors. If additionally the tag
+        // name is not valid, this construction is treated as text.
+        if (dtd.elementHash.get(name.getImage().toLowerCase()) == null &&
+            backupMode
+           )
+          {
+            error("Errors in tag body and unknown tag name. " +
+                  "Treating the tag as a text."
+                 );
+            reset();
+
+            hTag = mustBe(BEGIN);
+            buffer.setLength(0);
+            buffer.append(hTag.getImage());
+            CDATA(false);
+            return;
+          }
+        else
+          {
+            error("Forcibly closing invalid parameter list");
+            forciblyCloseTheTag();
+          }
+      }
+
+    if (closing)
+      {
+        endTag(false);
+        _handleEndTag(makeTagElement(name.getImage(), false));
+      }
+    else
+      {
+        TagElement te = makeTagElement(name.getImage(), false);
+        if (te.getElement().type == DTDConstants.EMPTY)
+          _handleEmptyTag(te);
+        else
+          _handleStartTag(te);
+      }
+  }
+
+  /**
+   * This should fire additional actions in response to the
+   * ChangedCharSetException.  The current implementation
+   * does nothing.
+   * @param tag
+   */
+  private void startingTag(TagElement tag)
+  {
+    try
+      {
+        startTag(tag);
+      }
+    catch (ChangedCharSetException cax)
+      {
+        error("Invalid change of charset");
+      }
+  }
+
+  private void ws_error()
+  {
+    error("Whitespace here is not permitted");
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/support/gnuStringIntMapper.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/support/gnuStringIntMapper.java
diff -N libjava/gnu/javax/swing/text/html/parser/support/gnuStringIntMapper.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/support/gnuStringIntMapper.java	9 Jul 2005 22:09:38 -0000
@@ -0,0 +1,112 @@
+/* gnuStringIntMapper.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser.support;
+
+import java.util.HashMap;
+import java.util.Map;
+import java.util.TreeMap;
+
+/**
+ * A helper class, mapping between the strings and they unique integer
+ * identifiers.
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public abstract class gnuStringIntMapper
+{
+  /**
+   * Maps argument integer values from DTDConstants into they string
+   * names. Initialized on demand.
+   */
+  private Map is_Map;
+
+  /**
+   * Maps argument string names into they integer values from DTDConstants.
+   * Initialized on demand.
+   */
+  private Map si_Map;
+
+  /**
+   *  Get string from id or null if no such id is present in the mapper.
+   */
+  public final String get(int id)
+  {
+    if (is_Map == null)
+      createTheMap();
+
+    return (String) is_Map.get(new Integer(id));
+  }
+
+  /** Get id from string or 0 if no such string is present in the mapper. */
+  public final int get(String id)
+  {
+    if (si_Map == null)
+      createTheMap();
+
+    Integer i = (Integer) si_Map.get(id);
+
+    return i != null ? i.intValue() : 0;
+  }
+
+  /**
+   * Create the mapping table for this mapper by adding the required
+   * String/int pairs. The method is invoked
+   * only once for each instance, after the first invocation of the any
+   * form of the <code>get</code> method. Use <code>add</code> to
+   * create a map for a concrete instance.
+   */
+  protected abstract void create();
+
+  /**
+   * Add an id/string pair to this mapper. This is called from
+   * the method <code>create</code> only.
+   */
+  protected void add(String name, int id)
+  {
+    Integer i = new Integer(id);
+    si_Map.put(name, i);
+    is_Map.put(i, name);
+  }
+
+  private void createTheMap()
+  {
+    is_Map = new HashMap();
+    si_Map = new TreeMap();
+    create();
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/support/package.html
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/support/package.html
diff -N libjava/gnu/javax/swing/text/html/parser/support/package.html
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/support/package.html	9 Jul 2005 22:09:38 -0000
@@ -0,0 +1,47 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+<!-- package.html - describes classes in javax.swing.text.html.parser package.
+   Copyright (C) 2002 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. -->
+
+<html>
+<head><title>GNU Classpath - gnu.javax.swing.text.html.parser.support</title></head>
+
+<body>
+<p>This package provides various specialised classes, needed by HTML parser.
+</p>
+@author Audrius Meskauskas, Lithuania
+</body>
+</html>
Index: libjava/gnu/javax/swing/text/html/parser/support/parameterDefaulter.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/support/parameterDefaulter.java
diff -N libjava/gnu/javax/swing/text/html/parser/support/parameterDefaulter.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/support/parameterDefaulter.java	9 Jul 2005 22:09:38 -0000
@@ -0,0 +1,106 @@
+/* parameterDefaulter.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser.support;
+
+import gnu.javax.swing.text.html.parser.htmlAttributeSet;
+
+import java.util.Hashtable;
+
+import javax.swing.text.html.parser.AttributeList;
+import javax.swing.text.html.parser.DTD;
+import javax.swing.text.html.parser.Element;
+
+/**
+ * Returns an attribute set, containing default
+ * parameters for the given element. Caches sets of default
+ * parameters.
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class parameterDefaulter
+{
+  public final DTD dtd;
+  Hashtable sets = new Hashtable();
+
+  /**
+   * Create a parameterDefaulter that looks for the default attribute
+   * values in the given DTD.
+   * @param a_dtd
+   */
+  public parameterDefaulter(DTD a_dtd)
+  {
+    dtd = a_dtd;
+  }
+
+  /**
+   * Get the default parameter set for the given element.
+   * @param element The element name (case insensitive).
+   * @return the default attrbute set.
+   */
+  public htmlAttributeSet getDefaultParameters(String element)
+  {
+    String key = element.toLowerCase();
+    htmlAttributeSet atts = (htmlAttributeSet) sets.get(key);
+
+    if (atts == null)
+      {
+        htmlAttributeSet set = new htmlAttributeSet();
+        Element e = (Element) dtd.elementHash.get(element.toLowerCase());
+
+        if (e != null)
+          {
+            AttributeList a = e.getAttributes();
+
+            while (a != null)
+              {
+                if (a.value != null)
+                  set.addAttribute(a.name, a.value);
+                a = a.next;
+              }
+          }
+
+        if (set.getAttributeCount() > 0)
+          sets.put(key, set);
+        else
+          sets.put(key, htmlAttributeSet.EMPTY_HTML_ATTRIBUTE_SET);
+
+        atts = set;
+      }
+    return atts;
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/support/textPreProcessor.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/support/textPreProcessor.java
diff -N libjava/gnu/javax/swing/text/html/parser/support/textPreProcessor.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/support/textPreProcessor.java	9 Jul 2005 22:09:38 -0000
@@ -0,0 +1,193 @@
+/* textPreProcessor.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser.support;
+
+import gnu.javax.swing.text.html.parser.support.low.Constants;
+
+/**
+ * Pre - processes text in text parts of the html document.
+ * Not thread - safe.
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class textPreProcessor
+{
+  /**
+   * Pre - process non-preformatted text.
+   * \t, \r and \n mutate into spaces, then multiple spaces mutate
+   * into single one, all whitespace around tags is consumed.
+   * The content of the passed buffer is destroyed.
+   * @param text A text to pre-process.
+   */
+  public char[] preprocess(StringBuffer a_text)
+  {
+    if (a_text.length() == 0)
+      return null;
+
+    char[] text = toCharArray(a_text);
+
+    int a = 0;
+    int b = text.length - 1;
+
+    try
+      {
+        while (Constants.bWHITESPACE.get(text [ a ]))
+          a++;
+        while (Constants.bWHITESPACE.get(text [ b ]))
+          b--;
+      }
+    catch (ArrayIndexOutOfBoundsException sx)
+      {
+        // A text fragment, consisting from line breaks only.
+        return null;
+      }
+
+    a_text.setLength(0);
+
+    boolean spacesWere = false;
+    boolean spaceNow;
+    char c;
+
+    chars: 
+    for (int i = a; i <= b; i++)
+      {
+        c = text [ i ];
+        spaceNow = Constants.bWHITESPACE.get(c);
+        if (spacesWere && spaceNow)
+          continue chars;
+        if (spaceNow)
+          a_text.append(' ');
+        else
+          a_text.append(c);
+        spacesWere = spaceNow;
+      }
+
+    if (a_text.length() == text.length)
+      {
+        a_text.getChars(0, a_text.length(), text, 0);
+        return text;
+      }
+    else
+      return toCharArray(a_text);
+  }
+
+  /**
+   * Pre - process pre-formatted text.
+   * Heading/closing spaces and tabs preserved.
+   * ONE  bounding \r, \n or \r\n is removed.
+   * \r or \r\n mutate into \n. Tabs are
+   * preserved.
+   * The content of the passed buffer is destroyed.
+   * @param text
+   * @return
+   */
+  public char[] preprocessPreformatted(StringBuffer a_text)
+  {
+    if (a_text.length() == 0)
+      return null;
+
+    char[] text = toCharArray(a_text);
+
+    int a = 0;
+    int n = text.length - 1;
+    int b = n;
+
+    if (text [ 0 ] == '\n')
+      a++;
+    else
+      {
+        if (text [ 0 ] == '\r')
+          {
+            a++;
+            if (text.length > 1 && text [ 1 ] == '\n')
+              a++;
+          }
+      }
+
+    if (text [ n ] == '\r')
+      b--;
+    else
+      {
+        if (text [ n ] == '\n')
+          {
+            b--;
+            if (n > 0 && text [ n - 1 ] == '\r')
+              b--;
+          }
+      }
+
+    a_text.setLength(0);
+
+    if (a > b)
+      return null;
+
+    char c;
+
+    for (int i = a; i <= b; i++)
+      {
+        c = text [ i ];
+        if (c == '\r')
+          {
+            if (i == b || text [ i + 1 ] != '\n')
+              a_text.append('\n');
+          }
+        else
+          a_text.append(c);
+      }
+
+    if (a_text.length() == text.length)
+      {
+        a_text.getChars(0, a_text.length(), text, 0);
+        return text;
+      }
+    else
+      return toCharArray(a_text);
+  }
+
+  /**
+   * Return array of chars, present in the given buffer.
+   * @param a_text The buffer
+   * @return
+   */
+  private static char[] toCharArray(StringBuffer a_text)
+  {
+    char[] text = new char[ a_text.length() ];
+    a_text.getChars(0, text.length, text, 0);
+    return text;
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/support/low/Buffer.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/support/low/Buffer.java
diff -N libjava/gnu/javax/swing/text/html/parser/support/low/Buffer.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/support/low/Buffer.java	9 Jul 2005 22:09:38 -0000
@@ -0,0 +1,238 @@
+/* Buffer.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser.support.low;
+
+/**
+ * A string buffer that additionally holds line and absolute postion
+ * information.
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class Buffer
+{
+  public static int INITIAL_SIZE = 2048;
+
+  /**
+   * True if the \n symbol has been seen.
+   */
+  public boolean n_seen;
+
+  /**
+   * True if the \r symbol has been seen.
+   */
+  public boolean r_seen;
+  char[] chr = new char[ INITIAL_SIZE ];
+  int[] line = new int[ INITIAL_SIZE ];
+  int[] position = new int[ INITIAL_SIZE ];
+
+  /**
+   * Current line.
+   */
+  int current_line = 0;
+
+  /**
+   * Point to the next free position.
+   */
+  int length;
+
+  public Buffer()
+  {
+  }
+
+  public Buffer(String content)
+  {
+    for (int i = 0; i < content.length(); i++)
+      {
+        append(content.charAt(i), i);
+      }
+  }
+
+  /**
+   * Get the characters into array.
+   * @param srcBegin From, inclusive
+   * @param srcEnd To, exclusive.
+   * @param dst Into
+   * @param dstBegin Offset.
+   */
+  public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)
+  {
+    System.arraycopy(chr, srcBegin, dst, dstBegin, (srcEnd - srcBegin));
+  }
+
+  /**
+   * Return the sequence, used to separate lines in the document.
+   * @return one of \n, \r or \r\n.
+   */
+  public String getEndOfLineSequence()
+  {
+    if (r_seen && n_seen)
+      return "\r\n";
+    else if (r_seen)
+      return "\r";
+    else
+
+      // This also is returned for single-line document.
+      return "\n";
+  }
+
+  /**
+   * Truncate.
+   * @param n The length to truncate till.
+   */
+  public void setLength(int n)
+  {
+    length = n;
+  }
+
+  /**
+   * Get location information for the given region.
+   * @param from Region start, inclusive.
+   * @param to Region end, exclusive.
+   * @return The location, covering the region.
+   */
+  public Location getLocation(int from, int to)
+  {
+    Location l = new Location();
+    l.beginLine = line [ from ];
+    l.endLine = line [ to - 1 ];
+
+    l.startPosition = position [ from ];
+    l.endPosition = position [ to - 1 ] + 1;
+
+    return l;
+  }
+
+  /**
+   * Add the character.
+   * @param c The character.
+   * @param pos The character position in the stream (the line number
+   * is handled internally in the buffer).
+   */
+  public void append(char c, int pos)
+  {
+    if (length >= chr.length)
+      expand();
+    chr [ length ] = c;
+    position [ length ] = pos;
+
+    if (c == '\n')
+      {
+        if (!r_seen)
+          current_line++;
+        n_seen = true;
+      }
+    else if (c == '\r')
+      {
+        current_line++;
+        r_seen = true;
+      }
+
+    line [ length ] = current_line;
+
+    length++;
+  }
+
+  /**
+   * Return char at the given positon.
+   */
+  public char charAt(int i)
+  {
+    return chr [ i ];
+  }
+
+  /**
+   * Delete the range
+   * @param from Start position, inclusive.
+   * @param to End position, exclusive.
+   */
+  public void delete(int from, int to)
+  {
+    int len = to - from;
+    if (len < 1)
+      throw new AssertionError("Deleting " + from + " till " + to);
+
+    int tail = length - to;
+
+    System.arraycopy(chr, to, chr, from, tail);
+    System.arraycopy(position, to, position, from, tail);
+    System.arraycopy(line, to, line, from, tail);
+    length = length - len;
+  }
+
+  /**
+   * Double the buffer size.
+   */
+  public void expand()
+  {
+    int nSize = 2 * chr.length;
+
+    char[] nchr = new char[ nSize ];
+    int[] nposition = new int[ nSize ];
+    int[] nline = new int[ nSize ];
+
+    System.arraycopy(chr, 0, nchr, 0, chr.length);
+    System.arraycopy(position, 0, nposition, 0, position.length);
+    System.arraycopy(line, 0, nline, 0, line.length);
+
+    chr = nchr;
+    position = nposition;
+    line = nline;
+  }
+
+  /**
+   * Return length of the occupied part of the buffer.
+   */
+  public int length()
+  {
+    return length;
+  }
+
+  /**
+   * Prepare for parsing the new document.
+   */
+  public void reset()
+  {
+    setLength(0);
+    r_seen = n_seen = false;
+  }
+
+  public String toString()
+  {
+    return new String(chr, 0, length);
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/support/low/Constants.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/support/low/Constants.java
diff -N libjava/gnu/javax/swing/text/html/parser/support/low/Constants.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/support/low/Constants.java	9 Jul 2005 22:09:38 -0000
@@ -0,0 +1,422 @@
+/* Constants.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser.support.low;
+
+import java.util.BitSet;
+
+/**
+ * The parser constants and operations, directly related to the parser
+ * constants.
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class Constants
+{
+  /* Single character tokens are reflected into they ASCII codes. */
+
+  /**
+   * Start of HTML token.
+   */
+  public static final int BEGIN = '<';
+
+  /**
+   * End of HTML token.
+   */
+  public static final int END = '>';
+
+  /**
+   * Exclamation (indicates SGML or comment).
+   */
+  public static final int EXCLAMATION = '!';
+
+  /**
+   * Slash (indicates closing tag).
+   */
+  public static final int SLASH = '/';
+
+  /**
+   * Equals sign.
+   */
+  public static final int EQ = '=';
+
+  /**
+   * Quoting sign.
+   */
+  public static final int AP = '\'';
+
+  /**
+   * Quoting sign.
+   */
+  public static final int QUOT = '"';
+
+  /* The numbers of other tokens start outside the ascii space. */
+  /* String tokens */
+
+  /**
+   * Double dash (--)
+   */
+  public static final int DOUBLE_DASH = 1000;
+
+  /**
+   * The STYLE tag (needs special handling).
+   */
+  public static final int STYLE = 1001;
+
+  /**
+   * The SCRIPT tag (needs special handling).
+   */
+  public static final int SCRIPT = 1002;
+
+  /* Pattern tokens */
+
+  /**
+   * HTML whitespace.
+   */
+  public static final int WS = 1003;
+
+  /**
+   * Named or numeric entity,
+   */
+  public static final int ENTITY = 1004;
+
+  /**
+   * Sequence of valid name characters (can start from digit).
+   */
+  public static final int NUMTOKEN = 1005;
+
+  /* Complex tokens */
+
+  /**
+   * Comment opening sequence.
+   */
+  public static final pattern COMMENT_OPEN =
+    new pattern(new node[]
+                {
+                  new node(BEGIN), new node(WS, true), new node(EXCLAMATION),
+                  new node(WS, true), new node(DOUBLE_DASH),
+                }
+               );
+
+  /**
+   * Comment closing sequence
+   */
+  public static final pattern COMMENT_END =
+    new pattern(new node[]
+                {
+                  new node(DOUBLE_DASH), new node(WS, true), new node(END)
+                }
+               );
+
+  /**
+   * Special case ---> (also is treated as end of comment).
+   */
+  public static final pattern COMMENT_TRIPLEDASH_END =
+    new pattern(new node[]
+                {
+                  new node(DOUBLE_DASH), new node(NUMTOKEN), new node(END)
+                }
+               );
+
+  /**
+   * STYLE element heading pattern.
+   */
+  public static final pattern STYLE_OPEN =
+    new pattern(new node[] { new node(BEGIN), new node(WS, true), new node(STYLE) });
+
+  /**
+   * SCRIPT element heading pattern.
+   */
+  public static final pattern SCRIPT_OPEN =
+    new pattern(new node[] { new node(BEGIN), new node(WS, true), new node(SCRIPT) });
+
+  /**
+   * SGML element heading pattern.
+   */
+  public static final pattern SGML =
+    new pattern(new node[]
+                {
+                  new node(BEGIN), new node(WS, true), new node(EXCLAMATION)
+                }
+               );
+
+  /**
+   * SCRIPT element closing pattern.
+   */
+  public static final pattern SCRIPT_CLOSE =
+    new pattern(new node[]
+                {
+                  new node(BEGIN), new node(WS, true), new node(SLASH),
+                  new node(WS, true), new node(SCRIPT), new node(WS, true),
+                  new node(END)
+                }
+               );
+
+  /**
+   * STYLE element closing pattern.
+   */
+  public static final pattern STYLE_CLOSE =
+    new pattern(new node[]
+                {
+                  new node(BEGIN), new node(WS, true), new node(SLASH),
+                  new node(WS, true), new node(STYLE), new node(WS, true),
+                  new node(END)
+                }
+               );
+
+  /**
+   * Ordinary HTML tag heading pattern.
+   */
+  public static final pattern TAG =
+    new pattern(new node[]
+                {
+                  new node(BEGIN), new node(WS, true), new node(SLASH, true),
+                  new node(WS, true), new node(NUMTOKEN)
+                }
+               );
+
+  /* Special tokens */
+
+  /**
+   * All other tokens.
+   */
+  public static final int OTHER = 1999;
+
+  /**
+   * The UNICODE "end of text" control code
+   */
+  static final char ETX = 3;
+
+  /**
+   * End of file.
+   */
+  public static final int EOF = ETX;
+
+  /* Character categories */
+
+  /**
+   * All single char tokens.
+   */
+  public static final BitSet bSINGLE_CHAR_TOKEN = new BitSet();
+
+  /**
+   * Non letters and non numbers, allowed in HTML names.
+   */
+  public static final BitSet bSPECIAL = new BitSet();
+
+  /**
+   * All letters, used in HTML names.
+   */
+  public static final BitSet bLETTER = new BitSet();
+
+  /**
+   * Digits.
+   */
+  public static final BitSet bDIGIT = new BitSet();
+
+  /**
+   * Both line breaks.
+   */
+  public static final BitSet bLINEBREAK = new BitSet();
+
+  /**
+   * All whitespace.
+   */
+  public static final BitSet bWHITESPACE = new BitSet();
+
+  /**
+   * Both quoting characters.
+   */
+  public static final BitSet bQUOTING = new BitSet();
+
+  /**
+   * Valid name characters.
+   */
+  public static final BitSet bNAME = new BitSet();
+
+  /* Entity subcategories */
+
+  /**
+   * Named entity.
+   */
+  public static final int ENTITY_NAMED = 1;
+
+  /**
+   * Numeric entity.
+   */
+  public static final int ENTITY_NUMERIC = 2;
+
+  static
+  {
+    bQUOTING.set(AP);
+    bQUOTING.set(QUOT);
+
+    bSINGLE_CHAR_TOKEN.set(BEGIN);
+    bSINGLE_CHAR_TOKEN.set(END);
+    bSINGLE_CHAR_TOKEN.set(EXCLAMATION);
+    bSINGLE_CHAR_TOKEN.set(SLASH);
+    bSINGLE_CHAR_TOKEN.set(EQ);
+    bSINGLE_CHAR_TOKEN.set(EOF);
+
+    bSINGLE_CHAR_TOKEN.or(bQUOTING);
+
+    bLINEBREAK.set('\r');
+    bLINEBREAK.set('\n');
+
+    bWHITESPACE.set(' ');
+    bWHITESPACE.set('\t');
+    bWHITESPACE.set(0xC);
+    bWHITESPACE.or(bLINEBREAK);
+
+    for (char i = '0'; i <= '9'; i++)
+      {
+        bDIGIT.set(i);
+      }
+
+    for (char i = 'a'; i <= 'z'; i++)
+      {
+        bLETTER.set(i);
+      }
+
+    for (char i = 'A'; i <= 'Z'; i++)
+      {
+        bLETTER.set(i);
+      }
+
+    bSPECIAL.set('-');
+    bSPECIAL.set('_');
+    bSPECIAL.set(':');
+    bSPECIAL.set('.');
+
+    bNAME.or(bLETTER);
+    bNAME.or(bDIGIT);
+    bNAME.or(bSPECIAL);
+  }
+
+  /**
+   * Verifies if one of the tokens matches the end of string
+   * buffer. The last character in the string buffer is the
+   * "future character", some tokens needs to verify it the
+   * token does not continue "towards the future". If the token
+   * matches, it matches till "pre-last" character in the buffer.
+   * @param b
+   * @return
+   */
+  public Token endMatches(Buffer b)
+  {
+    if (b.length() < 2)
+      return null;
+
+    int p = b.length() - 2;
+
+    if (b.length() > 2 && b.charAt(p) == '-' && b.charAt(p - 1) == '-')
+      return new Token(DOUBLE_DASH, "--", b.getLocation(p - 1, p + 1));
+
+    char last = b.charAt(p);
+
+    if (bSINGLE_CHAR_TOKEN.get(last))
+      return new Token(last, last, b.getLocation(p, p + 1));
+
+    char future = b.charAt(p + 1);
+
+    // Check for numtokens, script and style:
+    if (bNAME.get(last) && !bNAME.get(future))
+      {
+        // Scan the history up:
+        int u = p - 1;
+        while (u >= 0 && bNAME.get(b.charAt(u)))
+          u--;
+        u++;
+
+        char[] token = new char[ p - u + 1 ];
+
+        // Found a numtoken
+        b.getChars(u, p + 1, token, 0);
+
+        // Verify for the built-in tokens:
+        String e = new String(token);
+
+        // found the entity reference
+        if (u > 0 && b.charAt(u - 1) == '&')
+          {
+            // The subsequent semicolon may be the part of the token
+            // as well. The semicolon must be ignored. This must be
+            // handled elsewhere.
+            return new Token(ENTITY, ENTITY_NAMED, "&" + e,
+                             b.getLocation(u - 1, p + 1)
+                            );
+          }
+
+        // found the numeric entity reference
+        if (u > 1 && b.charAt(u - 1) == '#' && b.charAt(u - 2) == '&')
+          {
+            // The subsequent semicolon may be the part of the token
+            // as well. The semicolon must be ignored. This must be
+            // handled elsewhere.
+            return new Token(ENTITY, ENTITY_NUMERIC, "&#" + e,
+                             b.getLocation(u - 2, p + 2)
+                            );
+          }
+
+        Location le = b.getLocation(u, p + 1);
+
+        if (e.equalsIgnoreCase("SCRIPT"))
+          return new Token(SCRIPT, e, le);
+        else if (e.equalsIgnoreCase("STYLE"))
+          return new Token(STYLE, e, le);
+        else
+          return new Token(NUMTOKEN, e, le);
+      }
+
+    // Check for whitespace
+    if (bWHITESPACE.get(last) && !bWHITESPACE.get(future))
+      {
+        // Scan the history up:
+        int u = p - 1;
+        while (u >= 0 && bWHITESPACE.get(b.charAt(u)))
+          u--;
+        u++;
+
+        char[] token = new char[ p - u + 1 ];
+        b.getChars(u, p + 1, token, 0);
+
+        return new Token(WS, new String(token), b.getLocation(u, p + 1));
+      }
+
+    return null;
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/support/low/Location.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/support/low/Location.java
diff -N libjava/gnu/javax/swing/text/html/parser/support/low/Location.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/support/low/Location.java	9 Jul 2005 22:09:38 -0000
@@ -0,0 +1,83 @@
+/* Location.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser.support.low;
+
+/**
+ * Defines a region in the text: its bounding positions and the line number.
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class Location
+{
+  /**
+   * The line number, where the token starts.
+   */
+  public int beginLine;
+
+  /**
+   * The line, where the token ends.
+   */
+  public int endLine;
+
+  /**
+   * The absolute token end position in the input stream,
+   * exclusive.
+   */
+  public int endPosition;
+
+  /**
+   * The absolute token start position in the input stream,
+   * inclusive.
+   */
+  public int startPosition;
+
+  public Location()
+  {
+  }
+
+  /**
+   * Special case, used to mark EOF.
+   * @param p The total stream length.
+   */
+  public Location(int p)
+  {
+    startPosition = p;
+    endPosition = p + 1;
+    beginLine = endLine = -1;
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/support/low/ParseException.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/support/low/ParseException.java
diff -N libjava/gnu/javax/swing/text/html/parser/support/low/ParseException.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/support/low/ParseException.java	9 Jul 2005 22:09:38 -0000
@@ -0,0 +1,51 @@
+/* ParseException.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser.support.low;
+
+/**
+ * This can be thrown from various parsing methods.
+ */
+public class ParseException
+  extends RuntimeException
+{
+  public ParseException(String s, Throwable cause)
+  {
+    super(s, cause);
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/support/low/Queue.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/support/low/Queue.java
diff -N libjava/gnu/javax/swing/text/html/parser/support/low/Queue.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/support/low/Queue.java	9 Jul 2005 22:09:38 -0000
@@ -0,0 +1,142 @@
+/* Queue.java -- a token queue.
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser.support.low;
+
+import java.util.Arrays;
+
+/**
+ * A token queue.
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class Queue
+{
+  Token[] m = new Token[ 64 ];
+  int a = 0;
+  int b = 0;
+
+  /**
+   * True for the empty queue.
+   */
+  public boolean isEmpty()
+  {
+    return size() == 0;
+  }
+
+  /**
+   *  Add this trace to the end of the queue.
+   */
+  public void add(Token u)
+  {
+    if (a < m.length)
+      {
+        m [ a ] = u;
+        a++;
+      }
+    else // The end of array has been reached.
+      {
+        if (b > 0) // If some elements were deleted from the start of the queue, shift.
+          {
+            int d = b;
+            System.arraycopy(m, b, m, 0, a - b);
+            b = b - d;
+            a = a - d;
+            m [ a ] = u;
+            a++;
+          }
+        else // Enlarge the queue, doubling the size.
+          {
+            int n = m.length * 2;
+            Token[] nm = new Token[ 2 * n ];
+            System.arraycopy(m, 0, nm, 0, m.length);
+            Arrays.fill(m, null);
+
+            nm [ a ] = u;
+            m = nm;
+            a++;
+          }
+      }
+  }
+
+  /**
+   * Clear the queue.
+   */
+  public void clear()
+  {
+    a = b = 0;
+    Arrays.fill(m, null);
+  }
+
+  /**
+   * Read the value ahead. 0 is the value that will be returned with
+   * the following next. This method does not remove values from the
+   * queue. To test if there is enough tokens in the queue, size() must
+   * be checked before calling this method.
+   */
+  public Token get(int ahead)
+  {
+    int p = b + ahead;
+    if (p < a)
+      return m [ p ];
+    else
+      throw new ArrayIndexOutOfBoundsException("Not enough tokens");
+  }
+
+  /**
+   * Read the oldest value from the queue and remove this value from
+   * the queue.
+   */
+  public Token next()
+  {
+    if (a == b)
+      throw new ArrayIndexOutOfBoundsException("queue empty");
+
+    Token r = m [ b ];
+    m [ b ] = null;
+    b++;
+    return r;
+  }
+
+  /**
+   * Size of the queue.
+   */
+  public int size()
+  {
+    return a - b;
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/support/low/ReaderTokenizer.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/support/low/ReaderTokenizer.java
diff -N libjava/gnu/javax/swing/text/html/parser/support/low/ReaderTokenizer.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/support/low/ReaderTokenizer.java	9 Jul 2005 22:09:38 -0000
@@ -0,0 +1,374 @@
+/* ReaderTokenizer.java -- splits the input char sequence int tokens.
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser.support.low;
+
+import java.io.IOException;
+import java.io.Reader;
+
+/**
+ * Reader splits the input char sequence into tokens.
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class ReaderTokenizer
+  extends Constants
+{
+  /**
+   * This is set to true each time the getNextToken is called.
+   * Used in preventing loops when all patterns refuse to accept
+   * the invalid input.
+   */
+  protected boolean advanced;
+
+  /**
+   * If true, the returned tokens are also placed in the backup
+   * queue.
+   */
+  protected boolean backupMode;
+
+  /**
+   * The buffer to read document into.
+   */
+  Buffer buffer = new Buffer();
+
+  /**
+   * The queue for supporting mark().
+   */
+  Queue backup = new Queue();
+
+  /**
+   * The queue of found tokens.
+   */
+  Queue queue = new Queue();
+
+  /**
+   * The reader to read the document from.
+   */
+  Reader reader;
+
+  /**
+   * Array of char tokens
+   */
+  char[] charTokens;
+
+  /**
+   * Array of string tokens.
+   */
+  String[] stringTokens;
+
+  /**
+   * The current reader position.
+   */
+  int readerPosition = -1;
+
+  /**
+   * Creates a new ReaderTokenizer. The reset(...) method must be
+   * subsequently called to set the reader.
+   */
+  public ReaderTokenizer()
+  {
+  }
+
+  /**
+   * Return the sequence, used to separate lines in the document.
+   * @return one of \n, \r or \r\n.
+   */
+  public String getEndOfLineSequence()
+  {
+    return buffer.getEndOfLineSequence();
+  }
+
+  /**
+   * Get the next token.
+   * @return
+   */
+  public Token getNextToken()
+  {
+    Token rt;
+    advanced = true;
+    try
+      {
+        if (queue.isEmpty())
+          read(1);
+
+        if (!queue.isEmpty())
+          rt = queue.next();
+        else
+          rt = new Token(EOF, new Location(readerPosition));
+      }
+    catch (IOException ex)
+      {
+        throw new ParseException("IO Exception", ex);
+      }
+    if (backupMode)
+      backup.add(rt);
+    return rt;
+  }
+
+  /**
+   * Get a token, lying the given number of tokens
+   * ahead. getToken(0) will return the same token,
+   * what would be returned by getNextToken().
+   * getToken(..) does change the current position
+   * in the input stream. If the end of stream is
+   * reached, the EOF token is always returned.
+   */
+  public Token getTokenAhead(int ahead)
+  {
+    try
+      {
+        read(ahead - queue.size() + 1);
+        return queue.size() >= ahead ? queue.get(ahead) : eofToken();
+      }
+    catch (IOException ex)
+      {
+        throw new ParseException("IO Exception", ex);
+      }
+  }
+
+  /**
+   * Get a token, bein immediatley ahead.
+   * If the end of stream is
+   * reached, the EOF token is always returned.
+   * The method is equivalent calling getTokenAhead(0).
+   */
+  public Token getTokenAhead()
+  {
+    try
+      {
+        if (queue.isEmpty())
+          read(1);
+        if (!queue.isEmpty())
+          return queue.get(0);
+        else
+          return eofToken();
+      }
+    catch (IOException ex)
+      {
+        throw new ParseException("IO Exception", ex);
+      }
+  }
+
+  /**
+   * Invokes the error handler.
+   */
+  public void error(String msg, Token at)
+  {
+    System.out.println(msg);
+  }
+
+  /**
+   * Turns the backup mode on or off.
+   * It is possible to return where the mark(true) was last called
+   * by calling reset().
+   * @param mode True if it is required to save tokens, making
+   * returning to the current point possible.
+   */
+  public void mark(boolean mode)
+  {
+    backup.clear();
+    backupMode = mode;
+  }
+
+  /**
+   * Prepare for new parsing from the given stream.
+   * @param a_reader A reader to parse from.
+   */
+  public void reset(Reader a_reader)
+  {
+    reader = a_reader;
+    readerPosition = -1;
+    buffer.reset();
+    queue.clear();
+  }
+
+  /**
+   * Reset the internal cursor to the position where the mark()
+   * was last time called. Switches the backup mode off.
+   */
+  public void reset()
+  {
+    if (!backupMode)
+      throw new AssertionError("Call mark(true) before using reset()!");
+    backupMode = false;
+
+    // That is now in the queue, will be appended to the end of backup.
+    while (!queue.isEmpty())
+      backup.add(queue.next());
+
+    Queue t = queue;
+    queue = backup;
+    backup = t;
+    backup.clear();
+  }
+
+  /**
+   * Read the given number of the tokens. Add the needed number of EOF
+   * tokens if there are no more data in the stream.
+   * @param amount The number of additional tokens to read.
+   */
+  void read(int numberOfTokens)
+     throws IOException
+  {
+    if (numberOfTokens <= 0)
+      return;
+
+    reading: 
+    for (int i = 0; i < numberOfTokens; i++)
+      readToken();
+  }
+
+  /**
+   * Read next token from the reader, add it to the queue
+   */
+  void readToken()
+          throws IOException
+  {
+    Token t;
+    int ch;
+
+    enlarging: 
+    while (true)
+      {
+        t = tokenMatches();
+        if (t != null)
+          break enlarging;
+        else
+          {
+            ch = reader.read();
+            readerPosition++;
+            if (ch == ETX)
+              ch = ' ';
+            if (ch < 0)
+              {
+                if (buffer.length() == 0)
+                  {
+                    queue.add(eofToken());
+                    return;
+                  }
+                else
+                  {
+                    if (buffer.charAt(buffer.length() - 1) != ETX)
+                      buffer.append(ETX, readerPosition++);
+                    else
+                      {
+                        // Discard terminating ETX
+                        buffer.setLength(buffer.length() - 1);
+                        if (buffer.length() > 0)
+                          {
+                            t = new Token(OTHER, buffer.toString(),
+                                          buffer.getLocation(0, buffer.length())
+                                         );
+                            queue.add(t);
+                            buffer.setLength(0);
+                          }
+                        return;
+                      }
+                  }
+              }
+            else
+              buffer.append((char) ch, readerPosition);
+          }
+      }
+  }
+
+  /**
+   * Check if the end of buffer matches one of the tokens. If it does,
+   * return this token and remove the token sequence from the end of
+   * buffer.
+   * @return The matching token.
+   */
+  Token tokenMatches()
+  {
+    Token rt = endMatches(buffer);
+    if (rt != null) // Remove the matched image
+      {
+        // Consume future character if it was an entity and the future
+        // character is semicolon.
+        if (rt.kind == ENTITY)
+          {
+            if (buffer.charAt(buffer.length() - 1) == ';')
+              buffer.setLength(buffer.length() - rt.getImage().length() - 1);
+            else
+              {
+                error("Missing closing semicolon for entity '" + rt.getImage() +
+                      "'", rt
+                     );
+                consumeBuffer(rt);
+              }
+          }
+        else
+          {
+            consumeBuffer(rt);
+          }
+      }
+
+    // If the buffer is not empty, some sequence does not match any tokens.
+    // Add it to the queue as "OTHER".
+    if (rt != null)
+      {
+        if (buffer.length() > 1)
+          {
+            String rest = buffer.toString();
+            rest = rest.substring(0, rest.length() - 1);
+
+            Token other =
+              new Token(OTHER, rest, buffer.getLocation(0, buffer.length));
+            queue.add(other);
+            consumeBuffer(other);
+          }
+        queue.add(rt);
+      }
+    return rt;
+  }
+
+  private void consumeBuffer(Token rt)
+  {
+    buffer.delete(buffer.length() - rt.getImage().length() - 1,
+                  buffer.length() - 1
+                 );
+  }
+
+  /**
+   * Create EOF token.
+   */
+  private Token eofToken()
+  {
+    return new Token(EOF, "#", new Location(readerPosition));
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/support/low/Token.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/support/low/Token.java
diff -N libjava/gnu/javax/swing/text/html/parser/support/low/Token.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/support/low/Token.java	9 Jul 2005 22:09:38 -0000
@@ -0,0 +1,169 @@
+/* Token.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser.support.low;
+
+/**
+ * A token.
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class Token
+{
+  /**
+   * The place of this token in the document.
+   */
+  public Location where;
+
+  /**
+   * The additional category of token.
+   */
+  public int category;
+
+  /**
+   * An integer that describes the kind of this token.
+   */
+  public int kind;
+
+  /**
+   * The string image of the token, null if the char image must be used.
+   */
+  private String stringImage;
+
+  /**
+   * The char image of the token.
+   */
+  private char charImage;
+
+  /**
+   * Creates a new token with fields, initialized to the default values.
+   */
+  public Token()
+  {
+  }
+
+  /**
+   * Creates a new token of the given kind.
+   */
+  public Token(int _kind, Location _where)
+  {
+    kind = _kind;
+    where = _where;
+  }
+
+  /**
+   * Creates a new token of the given kind and given single char image.
+   */
+  public Token(int _kind, char _image, Location _where)
+  {
+    kind = _kind;
+    charImage = _image;
+    where = _where;
+  }
+
+  /**
+   * Creates a new token of the given kind and given string image.
+   */
+  public Token(int _kind, String _image, Location _where)
+  {
+    kind = _kind;
+    stringImage = _image;
+    where = _where;
+  }
+
+  /**
+   * Creates a new token of the given kind, category and given string image.
+   */
+  public Token(int _kind, int _category, String _image, Location _where)
+  {
+    kind = _kind;
+    category = _category;
+    stringImage = _image;
+    where = _where;
+  }
+
+  /**
+   * Creates a new token, where location fields are set as for token,
+   * spanning over two provided tokens and any tokens between them.
+   * The image field is initialized to null, the kind field is set to -1.
+   */
+  public Token(Token fromInclusive, Token toInclusive)
+  {
+    where = new Location();
+    where.beginLine = fromInclusive.where.beginLine;
+    where.startPosition = fromInclusive.where.startPosition;
+
+    where.endLine = toInclusive.where.endLine;
+    where.endPosition = toInclusive.where.endPosition;
+  }
+
+  public String getImage()
+  {
+    if (kind == 3)
+      return "#";
+    if (stringImage == null)
+      {
+        if (charImage == 0)
+          return null;
+        stringImage = new String(new char[] { charImage });
+      }
+    return stringImage;
+  }
+
+  /**
+   * Append the token image to the given string buffer.
+   * This may be more effective that buffer.append(this.getImage()).
+   * @param buffer A buffer to append.
+   */
+  public void appendTo(StringBuffer buffer)
+  {
+    if (charImage == 0)
+      buffer.append(getImage());
+    else
+      buffer.append(charImage);
+  }
+
+  /**
+   * Returns the string image or, if null, the bounding positions.
+   */
+  public String toString()
+  {
+    return getImage() != null ? kind + "'" + getImage()
+           : "<line " + where.beginLine + ", abs pos " + where.startPosition +
+           ".." + where.endPosition + ">";
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/support/low/node.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/support/low/node.java
diff -N libjava/gnu/javax/swing/text/html/parser/support/low/node.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/support/low/node.java	9 Jul 2005 22:09:38 -0000
@@ -0,0 +1,78 @@
+/* node.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser.support.low;
+
+/**
+ * A text level content model node. The only required unary operations
+ * here are "appears" and "optionally appears" ('?').
+ * <p>@author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)</p>
+ */
+public class node
+{
+  /**
+   * True for node that is optional for the given position.
+   */
+  public boolean optional;
+
+  /**
+   * The kind of the token to match.
+   */
+  public int kind;
+
+  /**
+   * Creates the new node for matching a given kind of the token.
+   * @param kind The kind of the token to match.
+   * @param modifier The modifier (*?+).
+   */
+  public node(int kind, boolean _optional)
+  {
+    this.kind = kind;
+    optional = _optional;
+  }
+
+  /**
+   * Creates the node, indicating that token must match exactluy one time.
+   * @param kind The kind of token to match.
+   */
+  public node(int kind)
+  {
+    this.kind = kind;
+    optional = false;
+  }
+}
Index: libjava/gnu/javax/swing/text/html/parser/support/low/package.html
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/support/low/package.html
diff -N libjava/gnu/javax/swing/text/html/parser/support/low/package.html
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/support/low/package.html	9 Jul 2005 22:09:38 -0000
@@ -0,0 +1,47 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
+<!-- package.html - describes classes in javax.swing.text.html.parser package.
+   Copyright (C) 2002 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. -->
+
+<html>
+<head><title>GNU Classpath - gnu.javax.swing.text.html.parser.support.low</title></head>
+
+<body>
+<p>This package contains classes that are directly used to process
+the text input: adapted stream tokenizer, specialized buffer and text-level content models .</p>
+@author Audrius Meskauskas, Lithuania
+</body>
+</html>
Index: libjava/gnu/javax/swing/text/html/parser/support/low/pattern.java
===================================================================
RCS file: libjava/gnu/javax/swing/text/html/parser/support/low/pattern.java
diff -N libjava/gnu/javax/swing/text/html/parser/support/low/pattern.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/javax/swing/text/html/parser/support/low/pattern.java	9 Jul 2005 22:09:38 -0000
@@ -0,0 +1,105 @@
+/* pattern.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.javax.swing.text.html.parser.support.low;
+
+
+/**
+ * The simple pattern, consisting from the sequence of tokens that
+ * may have the unary modifier '?'. Choices and grouping
+ * are not required here.
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class pattern
+{
+  /**
+   * The nodes of this pattern.
+   */
+  public final node[] nodes;
+
+  /**
+   * Create a pattern, containing the given list of nodes.
+   * @param a_nodes
+   */
+  public pattern(node[] a_nodes)
+  {
+    nodes = a_nodes;
+  }
+
+  /**
+   * Checks if the pattern can match the tokens in this
+   * tokenizer. Does not change the state of tokenizer.
+   * @param stream The tokenizer to read data from
+   * @return True if the pattern sequence matches the
+   * beginning of the tokenizer content.
+   */
+  public boolean matches(ReaderTokenizer stream)
+  {
+    try
+      {
+        int pt = 0;
+        int pn = 0;
+        Token t;
+        node n;
+
+        while (pn < nodes.length)
+          {
+            n = nodes [ pn ];
+            t = stream.getTokenAhead(pt);
+
+            if (t.kind == n.kind)
+              {
+                pn++;
+                pt++;
+              }
+            else
+              {
+                if (!n.optional)
+                  return false;
+                else
+                  pn++;
+              }
+          }
+        return true;
+      }
+    catch (Exception ex)
+      {
+        throw new ParseException("Exception", ex);
+      }
+  }
+}
Index: libjava/gnu/xml/aelfred2/ContentHandler2.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/aelfred2/ContentHandler2.java,v
retrieving revision 1.1
diff -u -r1.1 ContentHandler2.java
--- libjava/gnu/xml/aelfred2/ContentHandler2.java	2 Feb 2005 00:42:07 -0000	1.1
+++ libjava/gnu/xml/aelfred2/ContentHandler2.java	9 Jul 2005 22:09:38 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/aelfred2/JAXPFactory.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/aelfred2/JAXPFactory.java,v
retrieving revision 1.1.14.1
diff -u -r1.1.14.1 JAXPFactory.java
--- libjava/gnu/xml/aelfred2/JAXPFactory.java	29 Mar 2005 20:13:49 -0000	1.1.14.1
+++ libjava/gnu/xml/aelfred2/JAXPFactory.java	9 Jul 2005 22:09:38 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/aelfred2/SAXDriver.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/aelfred2/SAXDriver.java,v
retrieving revision 1.2.4.1
diff -u -r1.2.4.1 SAXDriver.java
--- libjava/gnu/xml/aelfred2/SAXDriver.java	29 Mar 2005 20:13:49 -0000	1.2.4.1
+++ libjava/gnu/xml/aelfred2/SAXDriver.java	9 Jul 2005 22:09:38 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/aelfred2/XmlParser.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/aelfred2/XmlParser.java,v
retrieving revision 1.1.14.1
diff -u -r1.1.14.1 XmlParser.java
--- libjava/gnu/xml/aelfred2/XmlParser.java	29 Mar 2005 20:13:49 -0000	1.1.14.1
+++ libjava/gnu/xml/aelfred2/XmlParser.java	9 Jul 2005 22:09:40 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -1437,7 +1437,7 @@
       }
     else
       {
-        if (type.equals("CDATA") || type == null)
+        if (type == null || type.equals("CDATA"))
           {
             value = readLiteral(flags);
           }
@@ -3382,7 +3382,7 @@
       {
         if (ids.systemId.indexOf('#') != -1)
           {
-            handler.verror("SYSTEM id has an URI fragment: " + ids.systemId);
+            handler.verror("SYSTEM id has a URI fragment: " + ids.systemId);
           }
         ids.baseUri = handler.getSystemId();
         if (ids.baseUri == null && uriWarnings)
@@ -4559,7 +4559,7 @@
                           encoding.substring(temp + 1,
                                              encoding.indexOf('"', temp + 2));
                       }
-                    encoding.trim();
+                    encoding = encoding.trim();
                   }
                 else
                   {
Index: libjava/gnu/xml/aelfred2/XmlReader.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/aelfred2/XmlReader.java,v
retrieving revision 1.1.14.1
diff -u -r1.1.14.1 XmlReader.java
--- libjava/gnu/xml/aelfred2/XmlReader.java	29 Mar 2005 20:13:49 -0000	1.1.14.1
+++ libjava/gnu/xml/aelfred2/XmlReader.java	9 Jul 2005 22:09:40 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/Consumer.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/Consumer.java,v
retrieving revision 1.2
diff -u -r1.2 Consumer.java
--- libjava/gnu/xml/dom/Consumer.java	17 Feb 2005 18:26:31 -0000	1.2
+++ libjava/gnu/xml/dom/Consumer.java	9 Jul 2005 22:09:40 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DTDAttributeTypeInfo.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DTDAttributeTypeInfo.java,v
retrieving revision 1.1
diff -u -r1.1 DTDAttributeTypeInfo.java
--- libjava/gnu/xml/dom/DTDAttributeTypeInfo.java	2 Feb 2005 00:42:07 -0000	1.1
+++ libjava/gnu/xml/dom/DTDAttributeTypeInfo.java	9 Jul 2005 22:09:40 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DTDElementTypeInfo.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DTDElementTypeInfo.java,v
retrieving revision 1.1
diff -u -r1.1 DTDElementTypeInfo.java
--- libjava/gnu/xml/dom/DTDElementTypeInfo.java	2 Feb 2005 00:42:07 -0000	1.1
+++ libjava/gnu/xml/dom/DTDElementTypeInfo.java	9 Jul 2005 22:09:40 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomAttr.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomAttr.java,v
retrieving revision 1.2
diff -u -r1.2 DomAttr.java
--- libjava/gnu/xml/dom/DomAttr.java	16 Feb 2005 19:25:02 -0000	1.2
+++ libjava/gnu/xml/dom/DomAttr.java	9 Jul 2005 22:09:40 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomCDATASection.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomCDATASection.java,v
retrieving revision 1.1
diff -u -r1.1 DomCDATASection.java
--- libjava/gnu/xml/dom/DomCDATASection.java	16 Feb 2005 19:25:03 -0000	1.1
+++ libjava/gnu/xml/dom/DomCDATASection.java	9 Jul 2005 22:09:40 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomCharacterData.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomCharacterData.java,v
retrieving revision 1.3
diff -u -r1.3 DomCharacterData.java
--- libjava/gnu/xml/dom/DomCharacterData.java	17 Feb 2005 18:26:31 -0000	1.3
+++ libjava/gnu/xml/dom/DomCharacterData.java	9 Jul 2005 22:09:40 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomComment.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomComment.java,v
retrieving revision 1.1
diff -u -r1.1 DomComment.java
--- libjava/gnu/xml/dom/DomComment.java	2 Feb 2005 00:42:07 -0000	1.1
+++ libjava/gnu/xml/dom/DomComment.java	9 Jul 2005 22:09:40 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomDOMException.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomDOMException.java,v
retrieving revision 1.1
diff -u -r1.1 DomDOMException.java
--- libjava/gnu/xml/dom/DomDOMException.java	16 Feb 2005 19:25:03 -0000	1.1
+++ libjava/gnu/xml/dom/DomDOMException.java	9 Jul 2005 22:09:40 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomDoctype.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomDoctype.java,v
retrieving revision 1.2
diff -u -r1.2 DomDoctype.java
--- libjava/gnu/xml/dom/DomDoctype.java	16 Feb 2005 19:25:03 -0000	1.2
+++ libjava/gnu/xml/dom/DomDoctype.java	9 Jul 2005 22:09:40 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomDocument.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomDocument.java,v
retrieving revision 1.3
diff -u -r1.3 DomDocument.java
--- libjava/gnu/xml/dom/DomDocument.java	17 Feb 2005 18:26:31 -0000	1.3
+++ libjava/gnu/xml/dom/DomDocument.java	9 Jul 2005 22:09:41 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -581,7 +581,9 @@
       }
     else
       {
-        element = new DomElement(this, null, name);
+        DomElement domElement = new DomElement(this, null, name);
+        domElement.localName = null;
+        element = domElement;
       }
     defaultAttributes(element, name);
     return element;
@@ -776,7 +778,9 @@
       }
     else
       {
-        return new DomAttr(this, null, name);
+        DomAttr ret = new DomAttr(this, null, name);
+        ret.localName = null;
+        return ret;
       }
   }
 
@@ -1155,7 +1159,8 @@
 
   public Node adoptNode(Node source)
   {
-    switch (source.getNodeType())
+    int sourceNodeType = source.getNodeType();
+    switch (sourceNodeType)
       {
       case DOCUMENT_NODE:
       case DOCUMENT_TYPE_NODE:
@@ -1166,6 +1171,7 @@
       }
     if (source instanceof DomNode)
       {
+        // GNU native
         DomNode src = (DomNode) source;
         DomNode dst = src;
         if (dst.parent != null)
@@ -1176,7 +1182,110 @@
         src.notifyUserDataHandlers(UserDataHandler.NODE_ADOPTED, src, dst);
         return dst;
       }
-    return null;
+    else
+      {
+        // Some other implementation
+        Node dst = null;
+        switch (sourceNodeType)
+          {
+          case Node.ATTRIBUTE_NODE:
+              {
+                Attr src = (Attr) source;
+                String nodeName = src.getNodeName();
+                String localName = src.getLocalName();
+                String namespaceUri = src.getNamespaceURI();
+                dst = (localName == null) ?
+                  createAttribute(nodeName) :
+                  createAttributeNS(namespaceUri, nodeName);
+                adoptChildren(src, dst);
+                break;
+              }
+          case Node.CDATA_SECTION_NODE:
+              {
+                CDATASection src = (CDATASection) source;
+                dst = createCDATASection(src.getData());
+                break;
+              }
+          case Node.COMMENT_NODE:
+              {
+                Comment src = (Comment) source;
+                dst = createComment(src.getData());
+                break;
+              }
+          case Node.DOCUMENT_FRAGMENT_NODE:
+              {
+                DocumentFragment src = (DocumentFragment) source;
+                dst = createDocumentFragment();
+                adoptChildren(src, dst);
+                break;
+              }
+          case Node.ELEMENT_NODE:
+              {
+                Element src = (Element) source;
+                String nodeName = src.getNodeName();
+                String localName = src.getLocalName();
+                String namespaceUri = src.getNamespaceURI();
+                dst = (localName == null) ?
+                  createElement(nodeName) :
+                  createElementNS(namespaceUri, nodeName);
+                adoptAttributes(src, dst);
+                adoptChildren(src, dst);
+                break;
+              }
+          case Node.ENTITY_REFERENCE_NODE:
+              {
+                EntityReference src = (EntityReference) source;
+                dst = createEntityReference(src.getNodeName());
+                adoptChildren(src, dst);
+                break;
+              }
+          case Node.PROCESSING_INSTRUCTION_NODE:
+              {
+                ProcessingInstruction src = (ProcessingInstruction) source;
+                dst = createProcessingInstruction(src.getTarget(),
+                                                  src.getData());
+                break;
+              }
+          case Node.TEXT_NODE:
+              {
+                Text src = (Text) source;
+                dst = createTextNode(src.getData());
+                break;
+              }
+          }
+        return dst;
+      }
+  }
+
+  void adoptChildren(Node src, Node dst)
+  {
+    Node node = src.getFirstChild();
+    while (node != null)
+      {
+        Node next = node.getNextSibling();
+        dst.appendChild(adoptNode(node));
+        node = next;
+      }
+  }
+
+  void adoptAttributes(Node src, Node dst)
+  {
+    NamedNodeMap srcAttrs = src.getAttributes();
+    NamedNodeMap dstAttrs = dst.getAttributes();
+    int len = srcAttrs.getLength();
+    for (int i = 0; i < len; i++)
+      {
+        Node node = srcAttrs.item(i);
+        String localName = node.getLocalName();
+        if (localName == null)
+          {
+            dstAttrs.setNamedItem(adoptNode(node));
+          }
+        else
+          {
+            dstAttrs.setNamedItemNS(adoptNode(node));
+          }
+      }
   }
 
   public DOMConfiguration getDomConfig()
Index: libjava/gnu/xml/dom/DomDocumentBuilder.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomDocumentBuilder.java,v
retrieving revision 1.2
diff -u -r1.2 DomDocumentBuilder.java
--- libjava/gnu/xml/dom/DomDocumentBuilder.java	17 Feb 2005 18:26:31 -0000	1.2
+++ libjava/gnu/xml/dom/DomDocumentBuilder.java	9 Jul 2005 22:09:41 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -39,6 +39,8 @@
 
 import java.io.InputStream;
 import java.io.IOException;
+import java.io.Reader;
+import java.net.URL;
 import javax.xml.parsers.DocumentBuilder;
 import org.w3c.dom.Document;
 import org.w3c.dom.DOMConfiguration;
@@ -140,6 +142,7 @@
     throws SAXException, IOException
   {
     LSInput input = ls.createLSInput();
+    String systemId = is.getSystemId();
     InputStream in = is.getByteStream();
     if (in != null)
       {
@@ -147,10 +150,19 @@
       }
     else
       {
-        input.setCharacterStream(is.getCharacterStream());
+        Reader reader = is.getCharacterStream();
+        if (reader != null)
+          {
+            input.setCharacterStream(reader);
+          }
+        else
+          {
+            URL url = new URL(systemId);
+            input.setByteStream(url.openStream());
+          }
       }
     input.setPublicId(is.getPublicId());
-    input.setSystemId(is.getSystemId());
+    input.setSystemId(systemId);
     input.setEncoding(is.getEncoding());
     return parser.parse(input);
   }
Index: libjava/gnu/xml/dom/DomDocumentBuilderFactory.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomDocumentBuilderFactory.java,v
retrieving revision 1.1
diff -u -r1.1 DomDocumentBuilderFactory.java
--- libjava/gnu/xml/dom/DomDocumentBuilderFactory.java	2 Feb 2005 00:42:08 -0000	1.1
+++ libjava/gnu/xml/dom/DomDocumentBuilderFactory.java	9 Jul 2005 22:09:41 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomDocumentConfiguration.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomDocumentConfiguration.java,v
retrieving revision 1.2
diff -u -r1.2 DomDocumentConfiguration.java
--- libjava/gnu/xml/dom/DomDocumentConfiguration.java	16 Feb 2005 19:25:03 -0000	1.2
+++ libjava/gnu/xml/dom/DomDocumentConfiguration.java	9 Jul 2005 22:09:41 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomDocumentFragment.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomDocumentFragment.java,v
retrieving revision 1.1
diff -u -r1.1 DomDocumentFragment.java
--- libjava/gnu/xml/dom/DomDocumentFragment.java	16 Feb 2005 19:25:03 -0000	1.1
+++ libjava/gnu/xml/dom/DomDocumentFragment.java	9 Jul 2005 22:09:41 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomElement.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomElement.java,v
retrieving revision 1.2
diff -u -r1.2 DomElement.java
--- libjava/gnu/xml/dom/DomElement.java	16 Feb 2005 19:25:03 -0000	1.2
+++ libjava/gnu/xml/dom/DomElement.java	9 Jul 2005 22:09:41 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomEntity.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomEntity.java,v
retrieving revision 1.1
diff -u -r1.1 DomEntity.java
--- libjava/gnu/xml/dom/DomEntity.java	2 Feb 2005 00:42:08 -0000	1.1
+++ libjava/gnu/xml/dom/DomEntity.java	9 Jul 2005 22:09:41 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomEntityReference.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomEntityReference.java,v
retrieving revision 1.1
diff -u -r1.1 DomEntityReference.java
--- libjava/gnu/xml/dom/DomEntityReference.java	2 Feb 2005 00:42:08 -0000	1.1
+++ libjava/gnu/xml/dom/DomEntityReference.java	9 Jul 2005 22:09:41 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomEvent.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomEvent.java,v
retrieving revision 1.1
diff -u -r1.1 DomEvent.java
--- libjava/gnu/xml/dom/DomEvent.java	2 Feb 2005 00:42:08 -0000	1.1
+++ libjava/gnu/xml/dom/DomEvent.java	9 Jul 2005 22:09:41 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomExtern.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomExtern.java,v
retrieving revision 1.1
diff -u -r1.1 DomExtern.java
--- libjava/gnu/xml/dom/DomExtern.java	2 Feb 2005 00:42:08 -0000	1.1
+++ libjava/gnu/xml/dom/DomExtern.java	9 Jul 2005 22:09:41 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomImpl.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomImpl.java,v
retrieving revision 1.2
diff -u -r1.2 DomImpl.java
--- libjava/gnu/xml/dom/DomImpl.java	16 Feb 2005 19:25:03 -0000	1.2
+++ libjava/gnu/xml/dom/DomImpl.java	9 Jul 2005 22:09:41 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -47,6 +47,7 @@
 import org.w3c.dom.ls.LSOutput;
 import org.w3c.dom.ls.LSParser;
 import org.w3c.dom.ls.LSSerializer;
+import gnu.xml.dom.html2.DomHTMLImpl;
 import gnu.xml.dom.ls.DomLSInput;
 import gnu.xml.dom.ls.DomLSOutput;
 import gnu.xml.dom.ls.DomLSParser;
@@ -150,6 +151,12 @@
                 "".equals(version) ||
                 "3.0".equals(version));
       }
+    else if ("html".equals(name) || "xhtml".equals(name))
+      {
+        return (version == null ||
+                "".equals(version) ||
+                "2.0".equals(version));
+      }
 
     // views
     // stylesheets
@@ -199,7 +206,7 @@
                                  String rootName,
                                  DocumentType doctype)
   {
-    Document doc = new DomDocument(this);
+    Document doc = createDocument();
     Element root = null;
     
     if (rootName != null)
@@ -223,12 +230,22 @@
     return doc;
   }
 
+  protected Document createDocument()
+  {
+    return new DomDocument(this);
+  }
+
   // DOM Level 3
   
   public Object getFeature(String feature, String version)
   {
     if (hasFeature(feature, version))
       {
+        if ("html".equalsIgnoreCase(feature) ||
+            "xhtml".equalsIgnoreCase(feature))
+          {
+            return new DomHTMLImpl();
+          }
         return this;
       }
     return null;
Index: libjava/gnu/xml/dom/DomIterator.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomIterator.java,v
retrieving revision 1.3
diff -u -r1.3 DomIterator.java
--- libjava/gnu/xml/dom/DomIterator.java	17 Feb 2005 18:26:32 -0000	1.3
+++ libjava/gnu/xml/dom/DomIterator.java	9 Jul 2005 22:09:41 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomNSResolverContext.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomNSResolverContext.java,v
retrieving revision 1.1
diff -u -r1.1 DomNSResolverContext.java
--- libjava/gnu/xml/dom/DomNSResolverContext.java	2 Feb 2005 00:42:08 -0000	1.1
+++ libjava/gnu/xml/dom/DomNSResolverContext.java	9 Jul 2005 22:09:41 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomNamedNodeMap.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomNamedNodeMap.java,v
retrieving revision 1.2
diff -u -r1.2 DomNamedNodeMap.java
--- libjava/gnu/xml/dom/DomNamedNodeMap.java	16 Feb 2005 19:25:03 -0000	1.2
+++ libjava/gnu/xml/dom/DomNamedNodeMap.java	9 Jul 2005 22:09:41 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -206,6 +206,10 @@
         if (ns)
           {
             String tln = ctx.getLocalName();
+            if (tln == null)
+              {
+                tln = ctx.getNodeName();
+              }
             if (tln.equals(localName))
               {
                 String tu = ctx.getNamespaceURI();
Index: libjava/gnu/xml/dom/DomNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomNode.java,v
retrieving revision 1.3.2.1
diff -u -r1.3.2.1 DomNode.java
--- libjava/gnu/xml/dom/DomNode.java	29 Mar 2005 20:13:49 -0000	1.3.2.1
+++ libjava/gnu/xml/dom/DomNode.java	9 Jul 2005 22:09:42 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -1840,7 +1840,7 @@
     if (ns1 != null && ns2 != null)
       {
         return ns1.equals(ns2) &&
-          getLocalName().equals(other.getLocalName());
+          equal(getLocalName(), other.getLocalName());
       }
 
     // if neither has a namespace, this is a "no-namespace" name.
Index: libjava/gnu/xml/dom/DomNodeIterator.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomNodeIterator.java,v
retrieving revision 1.1
diff -u -r1.1 DomNodeIterator.java
--- libjava/gnu/xml/dom/DomNodeIterator.java	2 Feb 2005 00:42:08 -0000	1.1
+++ libjava/gnu/xml/dom/DomNodeIterator.java	9 Jul 2005 22:09:42 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomNotation.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomNotation.java,v
retrieving revision 1.1
diff -u -r1.1 DomNotation.java
--- libjava/gnu/xml/dom/DomNotation.java	2 Feb 2005 00:42:08 -0000	1.1
+++ libjava/gnu/xml/dom/DomNotation.java	9 Jul 2005 22:09:42 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomNsNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomNsNode.java,v
retrieving revision 1.2
diff -u -r1.2 DomNsNode.java
--- libjava/gnu/xml/dom/DomNsNode.java	16 Feb 2005 19:25:03 -0000	1.2
+++ libjava/gnu/xml/dom/DomNsNode.java	9 Jul 2005 22:09:42 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -54,7 +54,7 @@
   private String name;
   private String namespace;
   private String prefix;
-  private String localName;
+  String localName;
   
   /**
    * Constructs a node associated with the specified document, and
Index: libjava/gnu/xml/dom/DomProcessingInstruction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomProcessingInstruction.java,v
retrieving revision 1.1
diff -u -r1.1 DomProcessingInstruction.java
--- libjava/gnu/xml/dom/DomProcessingInstruction.java	16 Feb 2005 19:25:03 -0000	1.1
+++ libjava/gnu/xml/dom/DomProcessingInstruction.java	9 Jul 2005 22:09:42 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomText.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomText.java,v
retrieving revision 1.2
diff -u -r1.2 DomText.java
--- libjava/gnu/xml/dom/DomText.java	16 Feb 2005 19:25:03 -0000	1.2
+++ libjava/gnu/xml/dom/DomText.java	9 Jul 2005 22:09:42 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomXPathExpression.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomXPathExpression.java,v
retrieving revision 1.2
diff -u -r1.2 DomXPathExpression.java
--- libjava/gnu/xml/dom/DomXPathExpression.java	17 Feb 2005 18:26:32 -0000	1.2
+++ libjava/gnu/xml/dom/DomXPathExpression.java	9 Jul 2005 22:09:42 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomXPathNSResolver.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomXPathNSResolver.java,v
retrieving revision 1.1
diff -u -r1.1 DomXPathNSResolver.java
--- libjava/gnu/xml/dom/DomXPathNSResolver.java	2 Feb 2005 00:42:08 -0000	1.1
+++ libjava/gnu/xml/dom/DomXPathNSResolver.java	9 Jul 2005 22:09:42 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/DomXPathResult.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/DomXPathResult.java,v
retrieving revision 1.2
diff -u -r1.2 DomXPathResult.java
--- libjava/gnu/xml/dom/DomXPathResult.java	17 Feb 2005 18:26:32 -0000	1.2
+++ libjava/gnu/xml/dom/DomXPathResult.java	9 Jul 2005 22:09:42 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/ImplementationList.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/ImplementationList.java,v
retrieving revision 1.1
diff -u -r1.1 ImplementationList.java
--- libjava/gnu/xml/dom/ImplementationList.java	2 Feb 2005 00:42:08 -0000	1.1
+++ libjava/gnu/xml/dom/ImplementationList.java	9 Jul 2005 22:09:42 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/ImplementationSource.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/ImplementationSource.java,v
retrieving revision 1.1
diff -u -r1.1 ImplementationSource.java
--- libjava/gnu/xml/dom/ImplementationSource.java	2 Feb 2005 00:42:08 -0000	1.1
+++ libjava/gnu/xml/dom/ImplementationSource.java	9 Jul 2005 22:09:42 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/JAXPFactory.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/JAXPFactory.java,v
retrieving revision 1.2
diff -u -r1.2 JAXPFactory.java
--- libjava/gnu/xml/dom/JAXPFactory.java	17 Feb 2005 18:26:32 -0000	1.2
+++ libjava/gnu/xml/dom/JAXPFactory.java	9 Jul 2005 22:09:42 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/html2/DomHTMLAnchorElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLAnchorElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLAnchorElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLAnchorElement.java	9 Jul 2005 22:09:42 -0000
@@ -0,0 +1,189 @@
+/* DomHTMLAnchorElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLAnchorElement;
+
+/**
+ * An HTML 'A' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLAnchorElement
+  extends DomHTMLElement
+  implements HTMLAnchorElement
+{
+
+  protected DomHTMLAnchorElement(DomHTMLDocument owner, String namespaceURI,
+                                 String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getAccessKey()
+  {
+    return getHTMLAttribute("accesskey");
+  }
+
+  public void setAccessKey(String accessKey)
+  {
+    setHTMLAttribute("accesskey", accessKey);
+  }
+  
+  public String getCharset()
+  {
+    return getHTMLAttribute("charset");
+  }
+
+  public void setCharset(String charset)
+  {
+    setHTMLAttribute("charset", charset);
+  }
+  
+  public String getCoords()
+  {
+    return getHTMLAttribute("coords");
+  }
+
+  public void setCoords(String coords)
+  {
+    setHTMLAttribute("coords", coords);
+  }
+  
+  public String getHref()
+  {
+    return getHTMLAttribute("href");
+  }
+
+  public void setHref(String href)
+  {
+    setHTMLAttribute("href", href);
+  }
+  
+  public String getHreflang()
+  {
+    return getHTMLAttribute("hreflang");
+  }
+
+  public void setHreflang(String hreflang)
+  {
+    setHTMLAttribute("hreflang", hreflang);
+  }
+  
+  public String getName()
+  {
+    return getHTMLAttribute("name");
+  }
+
+  public void setName(String name)
+  {
+    setHTMLAttribute("name", name);
+  }
+  
+  public String getRel()
+  {
+    return getHTMLAttribute("rel");
+  }
+
+  public void setRel(String rel)
+  {
+    setHTMLAttribute("rel", rel);
+  }
+  
+  public String getRev()
+  {
+    return getHTMLAttribute("rev");
+  }
+
+  public void setRev(String rev)
+  {
+    setHTMLAttribute("rev", rev);
+  }
+  
+  public String getShape()
+  {
+    return getHTMLAttribute("shape");
+  }
+
+  public void setShape(String shape)
+  {
+    setHTMLAttribute("shape", shape);
+  }
+  
+  public int getTabIndex()
+  {
+    return getIntHTMLAttribute("tabindex");
+  }
+
+  public void setTabIndex(int tabIndex)
+  {
+    setIntHTMLAttribute("tabindex", tabIndex);
+  }
+  
+  public String getTarget()
+  {
+    return getHTMLAttribute("target");
+  }
+
+  public void setTarget(String target)
+  {
+    setHTMLAttribute("target", target);
+  }
+  
+  public String getType()
+  {
+    return getHTMLAttribute("type");
+  }
+
+  public void setType(String type)
+  {
+    setHTMLAttribute("type", type);
+  }
+
+  public void blur()
+  {
+    dispatchUIEvent("blur");
+  }
+
+  public void focus()
+  {
+    dispatchUIEvent("focus");
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLAppletElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLAppletElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLAppletElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLAppletElement.java	9 Jul 2005 22:09:42 -0000
@@ -0,0 +1,169 @@
+/* DomHTMLAppletElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLAppletElement;
+
+/**
+ * An HTML 'APPLET' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLAppletElement
+  extends DomHTMLElement
+  implements HTMLAppletElement
+{
+
+  protected DomHTMLAppletElement(DomHTMLDocument owner, String namespaceURI,
+                                 String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getAlign()
+  {
+    return getHTMLAttribute("align");
+  }
+
+  public void setAlign(String align)
+  {
+    setHTMLAttribute("align", align);
+  }
+  
+  public String getAlt()
+  {
+    return getHTMLAttribute("alt");
+  }
+
+  public void setAlt(String alt)
+  {
+    setHTMLAttribute("alt", alt);
+  }
+  
+  public String getArchive()
+  {
+    return getHTMLAttribute("archive");
+  }
+
+  public void setArchive(String archive)
+  {
+    setHTMLAttribute("archive", archive);
+  }
+  
+  public String getCode()
+  {
+    return getHTMLAttribute("code");
+  }
+
+  public void setCode(String code)
+  {
+    setHTMLAttribute("code", code);
+  }
+  
+  public String getCodeBase()
+  {
+    return getHTMLAttribute("codebase");
+  }
+
+  public void setCodeBase(String codeBase)
+  {
+    setHTMLAttribute("codebase", codeBase);
+  }
+  
+  public String getHeight()
+  {
+    return getHTMLAttribute("height");
+  }
+
+  public void setHeight(String height)
+  {
+    setHTMLAttribute("height", height);
+  }
+  
+  public int getHspace()
+  {
+    return getIntHTMLAttribute("hspace");
+  }
+
+  public void setHspace(int hspace)
+  {
+    setIntHTMLAttribute("hspace", hspace);
+  }
+  
+  public String getName()
+  {
+    return getHTMLAttribute("name");
+  }
+
+  public void setName(String name)
+  {
+    setHTMLAttribute("name", name);
+  }
+  
+  public String getObject()
+  {
+    return getHTMLAttribute("object");
+  }
+
+  public void setObject(String object)
+  {
+    setHTMLAttribute("object", object);
+  }
+  
+  public int getVspace()
+  {
+    return getIntHTMLAttribute("vspace");
+  }
+
+  public void setVspace(int vspace)
+  {
+    setIntHTMLAttribute("vspace", vspace);
+  }
+  
+  public String getWidth()
+  {
+    return getHTMLAttribute("width");
+  }
+
+  public void setWidth(String width)
+  {
+    setHTMLAttribute("width", width);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLAreaElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLAreaElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLAreaElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLAreaElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,139 @@
+/* DomHTMLAreaElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLAreaElement;
+
+/**
+ * An HTML 'AREA' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLAreaElement
+  extends DomHTMLElement
+  implements HTMLAreaElement
+{
+
+  protected DomHTMLAreaElement(DomHTMLDocument owner, String namespaceURI,
+                               String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getAccessKey()
+  {
+    return getHTMLAttribute("accesskey");
+  }
+
+  public void setAccessKey(String accessKey)
+  {
+    setHTMLAttribute("accesskey", accessKey);
+  }
+  
+  public String getAlt()
+  {
+    return getHTMLAttribute("alt");
+  }
+
+  public void setAlt(String alt)
+  {
+    setHTMLAttribute("alt", alt);
+  }
+  
+  public String getCoords()
+  {
+    return getHTMLAttribute("coords");
+  }
+
+  public void setCoords(String coords)
+  {
+    setHTMLAttribute("coords", coords);
+  }
+  
+  public String getHref()
+  {
+    return getHTMLAttribute("href");
+  }
+
+  public void setHref(String href)
+  {
+    setHTMLAttribute("href", href);
+  }
+  
+  public boolean getNoHref()
+  {
+    return getBooleanHTMLAttribute("nohref");
+  }
+
+  public void setNoHref(boolean nohref)
+  {
+    setBooleanHTMLAttribute("nohref", nohref);
+  }
+  
+  public String getShape()
+  {
+    return getHTMLAttribute("shape");
+  }
+
+  public void setShape(String shape)
+  {
+    setHTMLAttribute("shape", shape);
+  }
+  
+  public int getTabIndex()
+  {
+    return getIntHTMLAttribute("tabindex");
+  }
+
+  public void setTabIndex(int tabIndex)
+  {
+    setIntHTMLAttribute("tabindex", tabIndex);
+  }
+  
+  public String getTarget()
+  {
+    return getHTMLAttribute("target");
+  }
+
+  public void setTarget(String target)
+  {
+    setHTMLAttribute("target", target);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLBRElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLBRElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLBRElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLBRElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,69 @@
+/* DomHTMLBRElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLBRElement;
+
+/**
+ * An HTML 'BR' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLBRElement
+  extends DomHTMLElement
+  implements HTMLBRElement
+{
+
+  protected DomHTMLBRElement(DomHTMLDocument owner, String namespaceURI,
+                             String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getClear()
+  {
+    return getHTMLAttribute("clear");
+  }
+
+  public void setClear(String clear)
+  {
+    setHTMLAttribute("clear", clear);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLBaseElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLBaseElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLBaseElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLBaseElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,79 @@
+/* DomHTMLBaseElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLBaseElement;
+
+/**
+ * An HTML 'BASE' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLBaseElement
+  extends DomHTMLElement
+  implements HTMLBaseElement
+{
+
+  protected DomHTMLBaseElement(DomHTMLDocument owner, String namespaceURI,
+                               String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getHref()
+  {
+    return getHTMLAttribute("href");
+  }
+
+  public void setHref(String href)
+  {
+    setHTMLAttribute("href", href);
+  }
+  
+  public String getTarget()
+  {
+    return getHTMLAttribute("target");
+  }
+
+  public void setTarget(String target)
+  {
+    setHTMLAttribute("target", target);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLBaseFontElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLBaseFontElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLBaseFontElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLBaseFontElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,89 @@
+/* DomHTMLBaseFontElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLBaseFontElement;
+
+/**
+ * An HTML 'BASEFONT' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLBaseFontElement
+  extends DomHTMLElement
+  implements HTMLBaseFontElement
+{
+
+  protected DomHTMLBaseFontElement(DomHTMLDocument owner, String namespaceURI,
+                                   String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getColor()
+  {
+    return getHTMLAttribute("color");
+  }
+
+  public void setColor(String color)
+  {
+    setHTMLAttribute("color", color);
+  }
+  
+  public String getFace()
+  {
+    return getHTMLAttribute("face");
+  }
+
+  public void setFace(String face)
+  {
+    setHTMLAttribute("face", face);
+  }
+  
+  public int getSize()
+  {
+    return getIntHTMLAttribute("size");
+  }
+
+  public void setSize(int size)
+  {
+    setIntHTMLAttribute("size", size);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLBodyElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLBodyElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLBodyElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLBodyElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,119 @@
+/* DomHTMLBodyElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLBodyElement;
+
+/**
+ * An HTML 'BODY' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLBodyElement
+  extends DomHTMLElement
+  implements HTMLBodyElement
+{
+
+  protected DomHTMLBodyElement(DomHTMLDocument owner, String namespaceURI,
+                               String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getALink()
+  {
+    return getHTMLAttribute("alink");
+  }
+
+  public void setALink(String alink)
+  {
+    setHTMLAttribute("alink", alink);
+  }
+  
+  public String getBackground()
+  {
+    return getHTMLAttribute("background");
+  }
+
+  public void setBackground(String background)
+  {
+    setHTMLAttribute("background", background);
+  }
+  
+  public String getBgColor()
+  {
+    return getHTMLAttribute("bgcolor");
+  }
+
+  public void setBgColor(String bgcolor)
+  {
+    setHTMLAttribute("bgcolor", bgcolor);
+  }
+  
+  public String getLink()
+  {
+    return getHTMLAttribute("link");
+  }
+
+  public void setLink(String link)
+  {
+    setHTMLAttribute("link", link);
+  }
+  
+  public String getText()
+  {
+    return getHTMLAttribute("text");
+  }
+
+  public void setText(String text)
+  {
+    setHTMLAttribute("text", text);
+  }
+  
+  public String getVLink()
+  {
+    return getHTMLAttribute("vlink");
+  }
+
+  public void setVLink(String vlink)
+  {
+    setHTMLAttribute("vlink", vlink);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLButtonElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLButtonElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLButtonElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLButtonElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,121 @@
+/* DomHTMLButtonElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.Node;
+import org.w3c.dom.html2.HTMLButtonElement;
+import org.w3c.dom.html2.HTMLFormElement;
+
+/**
+ * An HTML 'BUTTON' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLButtonElement
+  extends DomHTMLElement
+  implements HTMLButtonElement
+{
+
+  protected DomHTMLButtonElement(DomHTMLDocument owner, String namespaceURI,
+                                 String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public HTMLFormElement getForm()
+  {
+    return (HTMLFormElement) getParentElement("form");
+  }
+
+  public String getAccessKey()
+  {
+    return getHTMLAttribute("accesskey");
+  }
+
+  public void setAccessKey(String accessKey)
+  {
+    setHTMLAttribute("accesskey", accessKey);
+  }
+  
+  public boolean getDisabled()
+  {
+    return getBooleanHTMLAttribute("disabled");
+  }
+
+  public void setDisabled(boolean disabled)
+  {
+    setBooleanHTMLAttribute("disabled", disabled);
+  }
+  
+  public String getName()
+  {
+    return getHTMLAttribute("name");
+  }
+
+  public void setName(String name)
+  {
+    setHTMLAttribute("name", name);
+  }
+  
+  public int getTabIndex()
+  {
+    return getIntHTMLAttribute("tabindex");
+  }
+
+  public void setTabIndex(int tabIndex)
+  {
+    setIntHTMLAttribute("tabindex", tabIndex);
+  }
+
+  public String getType()
+  {
+    return getHTMLAttribute("type");
+  }
+  
+  public String getValue()
+  {
+    return getHTMLAttribute("value");
+  }
+
+  public void setValue(String value)
+  {
+    setHTMLAttribute("value", value);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLCollection.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLCollection.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLCollection.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLCollection.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,227 @@
+/* DomHTMLCollection.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import gnu.xml.dom.DomDOMException;
+import gnu.xml.dom.DomElement;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
+import org.w3c.dom.DOMException;
+import org.w3c.dom.NamedNodeMap;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+import org.w3c.dom.html2.HTMLCollection;
+import org.w3c.dom.html2.HTMLOptionsCollection;
+import org.w3c.dom.traversal.NodeFilter;
+import org.w3c.dom.traversal.NodeIterator;
+
+/**
+ * An HTML element collection.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class DomHTMLCollection
+  implements HTMLCollection, HTMLOptionsCollection, NodeList, NodeFilter
+{
+
+  final DomHTMLDocument doc;
+  final Node root;
+  List nodeNames;
+  List attributeNames;
+  List results;
+
+  DomHTMLCollection(DomHTMLDocument doc, Node root)
+  {
+    this.doc = doc;
+    this.root = root;
+  }
+
+  // -- Node name and attribute filtering --
+
+  void addNodeName(String name)
+  {
+    if (nodeNames == null)
+      {
+        nodeNames = new LinkedList();
+      }
+    nodeNames.add(name);
+  }
+
+  void addAttributeName(String name)
+  {
+    if (attributeNames == null)
+      {
+        attributeNames = new LinkedList();
+      }
+    attributeNames.add(name);
+  }
+
+  public short acceptNode(Node n)
+  {
+    if (n.getNodeType() != Node.ELEMENT_NODE)
+      {
+        return NodeFilter.FILTER_SKIP;
+      }
+    String localName = n.getLocalName();
+    if (localName == null)
+      {
+        localName = n.getNodeName();
+      }
+    if (nodeNames != null && !acceptName(localName))
+      {
+        return NodeFilter.FILTER_SKIP;
+      }
+    if (attributeNames != null && !acceptAttributes(n.getAttributes()))
+      {
+        return NodeFilter.FILTER_SKIP;
+      }
+    return NodeFilter.FILTER_ACCEPT;
+  }
+
+  private boolean acceptName(String name)
+  {
+    for (Iterator i = nodeNames.iterator(); i.hasNext(); )
+      {
+        String nodeName = (String) i.next();
+        if (nodeName.equalsIgnoreCase(name))
+          {
+            return true;
+          }
+      }
+    return false;
+  }
+
+  private boolean acceptAttributes(NamedNodeMap attrs)
+  {
+    for (Iterator i = attributeNames.iterator(); i.hasNext(); )
+      {
+        String attributeName = (String) i.next();
+        Node attr = getNamedItem(attrs, attributeName);
+        if (attr != null)
+          {
+            // Check that attribute has a non-null value
+            String nodeValue = attr.getNodeValue();
+            if (nodeValue != null && nodeValue.length() > 0)
+              {
+                return true;
+              }
+          }
+      }
+    return false;
+  }
+
+  /**
+   * Case-insensitive version of getNamedItem.
+   */
+  private Node getNamedItem(NamedNodeMap attrs, String name)
+  {
+    int len = attrs.getLength();
+    for (int i = 0; i < len; i++)
+      {
+        Node attr = attrs.item(i);
+        String attrName = attr.getLocalName();
+        if (attrName == null)
+          {
+            attrName = attr.getNodeName();
+          }
+        if (name.equalsIgnoreCase(attrName))
+          {
+            return attr;
+          }
+      }
+    return null;
+  }
+
+  // -- Perform query --
+
+  void evaluate()
+  {
+    NodeIterator i = doc.createNodeIterator(root, NodeFilter.SHOW_ELEMENT,
+                                            this, true);
+    results = new ArrayList();
+    for (Node node = i.nextNode(); node != null; node = i.nextNode())
+      {
+        results.add(node);
+      }
+  }
+
+  // -- HTMLCollection/NodeList interface --
+
+  public int getLength()
+  {
+    return results.size();
+  }
+
+  public void setLength(int length)
+  {
+    throw new DomDOMException(DOMException.NOT_SUPPORTED_ERR);
+  }
+
+  public Node item(int index)
+  {
+    return (Node) results.get(index);
+  }
+
+  public Node namedItem(String name)
+  {
+    boolean xhtml = false; // FIXME detect XHTML document
+    for (Iterator i = results.iterator(); i.hasNext(); )
+      {
+        Node node = (Node) i.next();
+        NamedNodeMap attrs = node.getAttributes();
+        Node attr = getNamedItem(attrs, "id");
+        if (name.equals(attr.getTextContent()))
+          {
+            return node;
+          }
+        if (!xhtml)
+          {
+            attr = getNamedItem(attrs, "name");
+            if (name.equals(attr.getTextContent()))
+              {
+                return node;
+              }
+          }
+      }
+    return null;
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLDListElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLDListElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLDListElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLDListElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,69 @@
+/* DomHTMLDListElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLDListElement;
+
+/**
+ * An HTML 'DL' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLDListElement
+  extends DomHTMLElement
+  implements HTMLDListElement
+{
+
+  protected DomHTMLDListElement(DomHTMLDocument owner, String namespaceURI,
+                                String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public boolean getCompact()
+  {
+    return getBooleanHTMLAttribute("compact");
+  }
+
+  public void setCompact(boolean compact)
+  {
+    setBooleanHTMLAttribute("compact", compact);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLDirectoryElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLDirectoryElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLDirectoryElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLDirectoryElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,69 @@
+/* DomHTMLDirectoryElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLDirectoryElement;
+
+/**
+ * An HTML 'DIR' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLDirectoryElement
+  extends DomHTMLElement
+  implements HTMLDirectoryElement
+{
+
+  protected DomHTMLDirectoryElement(DomHTMLDocument owner, String namespaceURI,
+                                    String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public boolean getCompact()
+  {
+    return getBooleanHTMLAttribute("compact");
+  }
+
+  public void setCompact(boolean compact)
+  {
+    setBooleanHTMLAttribute("compact", compact);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLDivElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLDivElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLDivElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLDivElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,69 @@
+/* DomHTMLDivElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLDivElement;
+
+/**
+ * An HTML 'DIV' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLDivElement
+  extends DomHTMLElement
+  implements HTMLDivElement
+{
+
+  protected DomHTMLDivElement(DomHTMLDocument owner, String namespaceURI,
+                              String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getAlign()
+  {
+    return getHTMLAttribute("align");
+  }
+
+  public void setAlign(String align)
+  {
+    setHTMLAttribute("align", align);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLDocument.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLDocument.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLDocument.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLDocument.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,425 @@
+/* DomHTMLDocument.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import gnu.xml.dom.DomDocument;
+import gnu.xml.dom.DomDOMException;
+import java.lang.reflect.Constructor;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import org.w3c.dom.DOMException;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+import org.w3c.dom.html2.HTMLCollection;
+import org.w3c.dom.html2.HTMLDocument;
+import org.w3c.dom.html2.HTMLElement;
+
+/**
+ * An HTML document.
+ * This is the factory object used to create HTML elements.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLDocument
+  extends DomDocument
+  implements HTMLDocument
+{
+
+  private static final Class[] ELEMENT_PT = new Class[] {
+    DomHTMLDocument.class,
+    String.class,
+    String.class
+  };
+
+  private static Map ELEMENT_CLASSES;
+  static
+  {
+    Map map = new HashMap();
+    map.put("a", DomHTMLAnchorElement.class);
+    map.put("applet", DomHTMLAppletElement.class);
+    map.put("area", DomHTMLAreaElement.class);
+    map.put("base", DomHTMLBaseElement.class);
+    map.put("basefont", DomHTMLBaseFontElement.class);
+    map.put("body", DomHTMLBodyElement.class);
+    map.put("br", DomHTMLBRElement.class);
+    map.put("button", DomHTMLButtonElement.class);
+    map.put("dir", DomHTMLDirectoryElement.class);
+    map.put("div", DomHTMLDivElement.class);
+    map.put("dlist", DomHTMLDListElement.class);
+    map.put("fieldset", DomHTMLFieldSetElement.class);
+    map.put("font", DomHTMLFontElement.class);
+    map.put("form", DomHTMLFormElement.class);
+    map.put("frame", DomHTMLFrameElement.class);
+    map.put("frameset", DomHTMLFrameSetElement.class);
+    map.put("head", DomHTMLHeadElement.class);
+    map.put("h1", DomHTMLHeadingElement.class);
+    map.put("h2", DomHTMLHeadingElement.class);
+    map.put("h3", DomHTMLHeadingElement.class);
+    map.put("h4", DomHTMLHeadingElement.class);
+    map.put("h5", DomHTMLHeadingElement.class);
+    map.put("h6", DomHTMLHeadingElement.class);
+    map.put("html", DomHTMLHtmlElement.class);
+    map.put("iframe", DomHTMLIFrameElement.class);
+    map.put("img", DomHTMLImageElement.class);
+    map.put("input", DomHTMLInputElement.class);
+    map.put("isindex", DomHTMLIsIndexElement.class);
+    map.put("label", DomHTMLLabelElement.class);
+    map.put("legend", DomHTMLLegendElement.class);
+    map.put("li", DomHTMLLIElement.class);
+    map.put("link", DomHTMLLinkElement.class);
+    map.put("map", DomHTMLMapElement.class);
+    map.put("menu", DomHTMLMenuElement.class);
+    map.put("meta", DomHTMLMetaElement.class);
+    map.put("ins", DomHTMLModElement.class);
+    map.put("del", DomHTMLModElement.class);
+    map.put("object", DomHTMLObjectElement.class);
+    map.put("ol", DomHTMLOListElement.class);
+    map.put("optgroup", DomHTMLOptGroupElement.class);
+    map.put("option", DomHTMLOptionElement.class);
+    map.put("p", DomHTMLParagraphElement.class);
+    map.put("param", DomHTMLParamElement.class);
+    map.put("pre", DomHTMLPreElement.class);
+    map.put("q", DomHTMLQuoteElement.class);
+    map.put("blockquote", DomHTMLQuoteElement.class);
+    map.put("script", DomHTMLScriptElement.class);
+    map.put("select", DomHTMLSelectElement.class);
+    map.put("style", DomHTMLStyleElement.class);
+    map.put("caption", DomHTMLTableCaptionElement.class);
+    map.put("th", DomHTMLTableCellElement.class);
+    map.put("td", DomHTMLTableCellElement.class);
+    map.put("col", DomHTMLTableColElement.class);
+    map.put("colgroup", DomHTMLTableColElement.class);
+    map.put("table", DomHTMLTableElement.class);
+    map.put("tr", DomHTMLTableRowElement.class);
+    map.put("thead", DomHTMLTableSectionElement.class);
+    map.put("tfoot", DomHTMLTableSectionElement.class);
+    map.put("tbody", DomHTMLTableSectionElement.class);
+    map.put("textarea", DomHTMLTextAreaElement.class);
+    map.put("title", DomHTMLTitleElement.class);
+    map.put("ul", DomHTMLUListElement.class);
+    ELEMENT_CLASSES = Collections.unmodifiableMap(map);
+  }
+
+  private static Set HTML_NS_URIS;
+  static
+  {
+    Set set = new HashSet();
+    set.add("http://www.w3.org/TR/html4/strict");
+    set.add("http://www.w3.org/TR/html4/loose");
+    set.add("http://www.w3.org/TR/html4/frameset");
+    set.add("http://www.w3.org/1999/xhtml");
+    set.add("http://www.w3.org/TR/xhtml1/strict");
+    set.add("http://www.w3.org/TR/xhtml1/loose");
+    set.add("http://www.w3.org/TR/xhtml1/frameset");
+    HTML_NS_URIS = Collections.unmodifiableSet(set);
+  }
+
+  /**
+   * Convenience constructor.
+   */
+  public DomHTMLDocument()
+  {
+    this(new DomHTMLImpl());
+  }
+
+  /**
+   * Constructor.
+   * This is called by the DOMImplementation.
+   */
+  public DomHTMLDocument(DomHTMLImpl impl)
+  {
+    super(impl);
+  }
+
+  private Node getChildNodeByName(Node parent, String name)
+  {
+    for (Node ctx = parent.getFirstChild(); ctx != null;
+         ctx = ctx.getNextSibling())
+      {
+        if (name.equalsIgnoreCase(ctx.getNodeName()))
+          {
+            return ctx;
+          }
+      }
+    return null;
+  }
+
+  public String getTitle()
+  {
+    Node html = getDocumentElement();
+    if (html != null)
+      {
+        Node head = getChildNodeByName(html, "head");
+        if (head != null)
+          {
+            Node title = getChildNodeByName(head, "title");
+            if (title != null)
+              {
+                return title.getTextContent();
+              }
+          }
+      }
+    return null;
+  }
+
+  public void setTitle(String title)
+  {
+    Node html = getDocumentElement();
+    if (html == null)
+      {
+        html = createElement("html");
+        appendChild(html);
+      }
+    Node head = getChildNodeByName(html, "head");
+    if (head == null)
+      {
+        head = createElement("head");
+        Node first = html.getFirstChild();
+        if (first != null)
+          {
+            html.insertBefore(first, head);
+          }
+        else
+          {
+            html.appendChild(head);
+          }
+      }
+    Node titleNode = getChildNodeByName(head, "title");
+    if (titleNode == null)
+      {
+        titleNode = createElement("title");
+        Node first = head.getFirstChild();
+        if (first != null)
+          {
+            head.insertBefore(first, titleNode);
+          }
+        else
+          {
+            head.appendChild(titleNode);
+          }
+      }
+    titleNode.setTextContent(title);
+  }
+
+  public String getReferrer()
+  {
+    // TODO getReferrer
+    return null;
+  }
+
+  public String getDomain()
+  {
+    try
+      {
+        URL url = new URL(getDocumentURI());
+        return url.getHost();
+      }
+    catch (MalformedURLException e)
+      {
+        return null;
+      }
+  }
+
+  public String getURL()
+  {
+    return getDocumentURI();
+  }
+
+  public HTMLElement getBody()
+  {
+    Node html = getDocumentElement();
+    if (html != null)
+      {
+        Node body = getChildNodeByName(html, "body");
+        if (body == null)
+          {
+            body = getChildNodeByName(html, "frameset");
+          }
+        return (HTMLElement) body;
+      }
+    return null;
+  }
+
+  public void setBody(HTMLElement body)
+  {
+    Node html = getDocumentElement();
+    if (html == null)
+      {
+        html = createElement("html");
+        appendChild(html);
+      }
+    Node ref = getBody();
+    if (ref == null)
+      {
+        html.appendChild(body);
+      }
+    else
+      {
+        html.replaceChild(body, ref);
+      }
+  }
+
+  public HTMLCollection getImages()
+  {
+    DomHTMLCollection ret = new DomHTMLCollection(this, this);
+    ret.addNodeName("img");
+    ret.evaluate();
+    return ret;
+  }
+
+  public HTMLCollection getApplets()
+  {
+    DomHTMLCollection ret = new DomHTMLCollection(this, this);
+    ret.addNodeName("object");
+    ret.addNodeName("applet");
+    ret.evaluate();
+    return ret;
+  }
+
+  public HTMLCollection getLinks()
+  {
+    DomHTMLCollection ret = new DomHTMLCollection(this, this);
+    ret.addNodeName("area");
+    ret.addNodeName("a");
+    ret.evaluate();
+    return ret;
+  }
+
+  public HTMLCollection getForms()
+  {
+    DomHTMLCollection ret = new DomHTMLCollection(this, this);
+    ret.addNodeName("form");
+    ret.evaluate();
+    return ret;
+  }
+
+  public HTMLCollection getAnchors()
+  {
+    DomHTMLCollection ret = new DomHTMLCollection(this, this);
+    ret.addNodeName("a");
+    ret.addAttributeName("name");
+    ret.evaluate();
+    return ret;
+  }
+
+  public String getCookie()
+  {
+    // TODO getCookie
+    return null;
+  }
+
+  public void setCookie(String cookie)
+  {
+    // TODO setCookie
+  }
+
+  public void open()
+  {
+    // TODO open
+  }
+
+  public void close()
+  {
+    // TODO close
+  }
+
+  public void write(String text)
+  {
+    // TODO write
+  }
+
+  public void writeln(String text)
+  {
+    // TODO write
+  }
+
+  public NodeList getElementsByName(String name)
+  {
+    DomHTMLCollection ret = new DomHTMLCollection(this, this);
+    ret.addNodeName(name);
+    ret.evaluate();
+    return ret;
+    // TODO xhtml: return only form controls (?)
+  }
+
+  public Element createElement(String tagName)
+  {
+    return createElementNS(null, tagName);
+  }
+
+  public Element createElementNS(String uri, String qName)
+  {
+    /* If a non-HTML element, use the default implementation. */
+    if (uri != null && !HTML_NS_URIS.contains(uri))
+      {
+        return super.createElementNS(uri, qName);
+      }
+    String localName = qName.toLowerCase();
+    int ci = qName.indexOf(':');
+    if (ci != -1)
+      {
+        localName = qName.substring(ci + 1);
+      }
+    Class t = (Class) ELEMENT_CLASSES.get(localName);
+    /* If a non-HTML element, use the default implementation. */
+    if (t == null)
+      {
+        return super.createElementNS(uri, qName);
+      }
+    try
+      {
+        Constructor c = t.getDeclaredConstructor(ELEMENT_PT);
+        Object[] args = new Object[] { this, uri, qName };
+        return (Element) c.newInstance(args);
+      }
+    catch (Exception e)
+      {
+        DOMException e2 = new DomDOMException(DOMException.TYPE_MISMATCH_ERR);
+        e2.initCause(e);
+        throw e2;
+      }
+  }
+
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,287 @@
+/* DomHTMLElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import gnu.xml.dom.DomDOMException;
+import gnu.xml.dom.DomElement;
+import gnu.xml.dom.DomEvent;
+import org.w3c.dom.DOMException;
+import org.w3c.dom.NamedNodeMap;
+import org.w3c.dom.Node;
+import org.w3c.dom.events.UIEvent;
+import org.w3c.dom.html2.HTMLElement;
+
+/**
+ * Abstract implementation of an HTML element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public abstract class DomHTMLElement
+  extends DomElement
+  implements HTMLElement
+{
+
+  protected DomHTMLElement(DomHTMLDocument owner, String namespaceURI,
+                           String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  /**
+   * Returns the value of the specified attribute.
+   * The attribute name is case insensitive.
+   */
+  protected String getHTMLAttribute(String name)
+  {
+    if (hasAttributes())
+      {
+        NamedNodeMap attrs = getAttributes();
+        int len = attrs.getLength();
+        for (int i = 0; i < len; i++)
+          {
+            Node attr = attrs.item(i);
+            String attrName = attr.getLocalName();
+            if (attrName == null)
+              {
+                attrName = attr.getNodeName();
+              }
+            if (attrName.equalsIgnoreCase(name))
+              {
+                return attr.getNodeValue();
+              }
+          }
+      }
+    return "";
+  }
+
+  protected int getIntHTMLAttribute(String name)
+  {
+    String value = getHTMLAttribute(name);
+    if (value == null)
+      {
+        return -1;
+      }
+    try
+      {
+        return Integer.parseInt(value);
+      }
+    catch (NumberFormatException e)
+      {
+        return -1;
+      }
+  }
+
+  protected boolean getBooleanHTMLAttribute(String name)
+  {
+    String value = getHTMLAttribute(name);
+    return value != null;
+  }
+
+  /**
+   * Sets the value of the specified attribute.
+   * The attribute name is case insensitive.
+   */
+  protected void setHTMLAttribute(String name, String value)
+  {
+    Node attr;
+    NamedNodeMap attrs = getAttributes();
+    int len = attrs.getLength();
+    for (int i = 0; i < len; i++)
+      {
+        attr = attrs.item(i);
+        String attrName = attr.getLocalName();
+        if (attrName == null)
+          {
+            attrName = attr.getNodeName();
+          }
+        if (attrName.equalsIgnoreCase(name))
+          {
+            if (value != null)
+              {
+                attr.setNodeValue(value);
+              }
+            else
+              {
+                attrs.removeNamedItem(attr.getNodeName());
+              }
+            return;
+          }
+      }
+    if (value != null)
+      {
+        // Create a new attribute
+        DomHTMLDocument doc = (DomHTMLDocument) getOwnerDocument();
+        // XXX namespace URI for attribute?
+        attr = doc.createAttribute(name);
+        attr.setNodeValue(value);
+      }
+  }
+
+  protected void setIntHTMLAttribute(String name, int value)
+  {
+    setHTMLAttribute(name, Integer.toString(value));
+  }
+
+  protected void setBooleanHTMLAttribute(String name, boolean value)
+  {
+    setHTMLAttribute(name, value ? name : null);
+  }
+
+  /**
+   * Returns the first parent element with the specified name.
+   */
+  protected Node getParentElement(String name)
+  {
+    for (Node parent = getParentNode(); parent != null;
+         parent = parent.getParentNode())
+      {
+        String parentName = parent.getLocalName();
+        if (parentName == null)
+          {
+              parentName = parent.getNodeName();
+          }
+        if (name.equalsIgnoreCase(parentName))
+          {
+            return parent;
+          }
+      }
+    return null;
+  }
+
+  /**
+   * Returns the first child element with the specified name.
+   */
+  protected Node getChildElement(String name)
+  {
+    for (Node child = getFirstChild(); child != null;
+         child = child.getNextSibling())
+      {
+        String childName = child.getLocalName();
+        if (childName == null)
+          {
+            childName = child.getLocalName();
+          }
+        if (name.equalsIgnoreCase(childName))
+          {
+            return child;
+          }
+      }
+    return null;
+  }
+
+  /**
+   * Returns the index of this element among elements of the same name,
+   * relative to its parent.
+   */
+  protected int getIndex()
+  {
+    int index = 0;
+    Node parent = getParentNode();
+    if (parent != null)
+      {
+        for (Node ctx = parent.getFirstChild(); ctx != null;
+             ctx = ctx.getNextSibling())
+          {
+            if (ctx == this)
+              {
+                return index;
+              }
+            index++;
+          }
+      }
+    throw new DomDOMException(DOMException.NOT_FOUND_ERR);
+  }
+
+  protected void dispatchUIEvent(String name)
+  {
+    UIEvent event = new DomEvent.DomUIEvent(name);
+    dispatchEvent(event);
+  }
+
+  public String getId()
+  {
+    return getHTMLAttribute("id");
+  }
+
+  public void setId(String id)
+  {
+    setHTMLAttribute("id", id);
+  }
+  
+  public String getTitle()
+  {
+    return getHTMLAttribute("title");
+  }
+
+  public void setTitle(String title)
+  {
+    setHTMLAttribute("title", title);
+  }
+  
+  public String getLang()
+  {
+    return getHTMLAttribute("lang");
+  }
+
+  public void setLang(String lang)
+  {
+    setHTMLAttribute("lang", lang);
+  }
+  
+  public String getDir()
+  {
+    return getHTMLAttribute("dir");
+  }
+
+  public void setDir(String dir)
+  {
+    setHTMLAttribute("dir", dir);
+  }
+  
+  public String getClassName()
+  {
+    return getHTMLAttribute("class");
+  }
+
+  public void setClassName(String className)
+  {
+    setHTMLAttribute("class", className);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLFieldSetElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLFieldSetElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLFieldSetElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLFieldSetElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,65 @@
+/* DomHTMLFieldSetElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLFieldSetElement;
+import org.w3c.dom.html2.HTMLFormElement;
+
+/**
+ * An HTML 'FIELDSET' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLFieldSetElement
+  extends DomHTMLElement
+  implements HTMLFieldSetElement
+{
+
+  protected DomHTMLFieldSetElement(DomHTMLDocument owner, String namespaceURI,
+                                   String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public HTMLFormElement getForm()
+  {
+    return (HTMLFormElement) getParentElement("form");
+  }
+
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLFontElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLFontElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLFontElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLFontElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,89 @@
+/* DomHTMLFontElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLFontElement;
+
+/**
+ * An HTML 'FONT' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLFontElement
+  extends DomHTMLElement
+  implements HTMLFontElement
+{
+
+  protected DomHTMLFontElement(DomHTMLDocument owner, String namespaceURI,
+                               String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getColor()
+  {
+    return getHTMLAttribute("color");
+  }
+
+  public void setColor(String color)
+  {
+    setHTMLAttribute("color", color);
+  }
+  
+  public String getFace()
+  {
+    return getHTMLAttribute("face");
+  }
+
+  public void setFace(String face)
+  {
+    setHTMLAttribute("face", face);
+  }
+  
+  public String getSize()
+  {
+    return getHTMLAttribute("size");
+  }
+
+  public void setSize(String size)
+  {
+    setHTMLAttribute("size", size);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLFormElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLFormElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLFormElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLFormElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,150 @@
+/* DomHTMLFormElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLCollection;
+import org.w3c.dom.html2.HTMLFormElement;
+
+/**
+ * An HTML 'FORM' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLFormElement
+  extends DomHTMLElement
+  implements HTMLFormElement
+{
+
+  protected DomHTMLFormElement(DomHTMLDocument owner, String namespaceURI,
+                               String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public HTMLCollection getElements()
+  {
+    DomHTMLCollection ret =
+      new DomHTMLCollection((DomHTMLDocument) getOwnerDocument(), this);
+    ret.addNodeName("input");
+    ret.addNodeName("button");
+    ret.addNodeName("select");
+    ret.addNodeName("textarea");
+    ret.addNodeName("isindex");
+    ret.addNodeName("label");
+    ret.addNodeName("option");
+    ret.evaluate();
+    return ret;
+  }
+
+  public int getLength()
+  {
+    return getElements().getLength();
+  }
+
+  public String getName()
+  {
+    return getHTMLAttribute("name");
+  }
+
+  public void setName(String name)
+  {
+    setHTMLAttribute("name", name);
+  }
+  
+  public String getAcceptCharset()
+  {
+    return getHTMLAttribute("accept-charset");
+  }
+
+  public void setAcceptCharset(String acceptCharset)
+  {
+    setHTMLAttribute("accept-charset", acceptCharset);
+  }
+  
+  public String getAction()
+  {
+    return getHTMLAttribute("action");
+  }
+
+  public void setAction(String action)
+  {
+    setHTMLAttribute("action", action);
+  }
+  
+  public String getEnctype()
+  {
+    return getHTMLAttribute("enctype");
+  }
+
+  public void setEnctype(String enctype)
+  {
+    setHTMLAttribute("enctype", enctype);
+  }
+  
+  public String getMethod()
+  {
+    return getHTMLAttribute("method");
+  }
+
+  public void setMethod(String method)
+  {
+    setHTMLAttribute("method", method);
+  }
+  
+  public String getTarget()
+  {
+    return getHTMLAttribute("target");
+  }
+
+  public void setTarget(String target)
+  {
+    setHTMLAttribute("target", target);
+  }
+
+  public void submit()
+  {
+    dispatchUIEvent("submit");
+  }
+
+  public void reset()
+  {
+    dispatchUIEvent("reset");
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLFrameElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLFrameElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLFrameElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLFrameElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,146 @@
+/* DomHTMLFrameElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.html2.HTMLFrameElement;
+
+/**
+ * An HTML 'FRAME' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLFrameElement
+  extends DomHTMLElement
+  implements HTMLFrameElement
+{
+
+  protected DomHTMLFrameElement(DomHTMLDocument owner, String namespaceURI,
+                                String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getFrameBorder()
+  {
+    return getHTMLAttribute("frameborder");
+  }
+
+  public void setFrameBorder(String frameBorder)
+  {
+    setHTMLAttribute("frameborder", frameBorder);
+  }
+  
+  public String getLongDesc()
+  {
+    return getHTMLAttribute("longdesc");
+  }
+
+  public void setLongDesc(String longDesc)
+  {
+    setHTMLAttribute("longdesc", longDesc);
+  }
+  
+  public String getMarginHeight()
+  {
+    return getHTMLAttribute("marginheight");
+  }
+
+  public void setMarginHeight(String marginHeight)
+  {
+    setHTMLAttribute("marginheight", marginHeight);
+  }
+  
+  public String getMarginWidth()
+  {
+    return getHTMLAttribute("marginwidth");
+  }
+
+  public void setMarginWidth(String marginWidth)
+  {
+    setHTMLAttribute("marginwidth", marginWidth);
+  }
+  
+  public String getName()
+  {
+    return getHTMLAttribute("name");
+  }
+
+  public void setName(String name)
+  {
+    setHTMLAttribute("name", name);
+  }
+  
+  public boolean getNoResize()
+  {
+    return getBooleanHTMLAttribute("noresize");
+  }
+
+  public void setNoResize(boolean noResize)
+  {
+    setBooleanHTMLAttribute("noresize", noResize);
+  }
+  
+  public String getScrolling()
+  {
+    return getHTMLAttribute("scrolling");
+  }
+
+  public void setScrolling(String scrolling)
+  {
+    setHTMLAttribute("scrolling", scrolling);
+  }
+  
+  public String getSrc()
+  {
+    return getHTMLAttribute("src");
+  }
+
+  public void setSrc(String src)
+  {
+    setHTMLAttribute("src", src);
+  }
+
+  public Document getContentDocument()
+  {
+    // TODO getContentDocument
+    return null;
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLFrameSetElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLFrameSetElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLFrameSetElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLFrameSetElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,79 @@
+/* DomHTMLFrameSetElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLFrameSetElement;
+
+/**
+ * An HTML 'FRAMESET' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLFrameSetElement
+  extends DomHTMLElement
+  implements HTMLFrameSetElement
+{
+
+  protected DomHTMLFrameSetElement(DomHTMLDocument owner, String namespaceURI,
+                                   String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getCols()
+  {
+    return getHTMLAttribute("cols");
+  }
+
+  public void setCols(String cols)
+  {
+    setHTMLAttribute("cols", cols);
+  }
+  
+  public String getRows()
+  {
+    return getHTMLAttribute("rows");
+  }
+
+  public void setRows(String rows)
+  {
+    setHTMLAttribute("rows", rows);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLHRElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLHRElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLHRElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLHRElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,99 @@
+/* DomHTMLHRElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLHRElement;
+
+/**
+ * An HTML 'HR' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLHRElement
+  extends DomHTMLElement
+  implements HTMLHRElement
+{
+
+  protected DomHTMLHRElement(DomHTMLDocument owner, String namespaceURI,
+                             String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getAlign()
+  {
+    return getHTMLAttribute("align");
+  }
+
+  public void setAlign(String align)
+  {
+    setHTMLAttribute("align", align);
+  }
+  
+  public boolean getNoShade()
+  {
+    return getBooleanHTMLAttribute("noshade");
+  }
+
+  public void setNoShade(boolean noShade)
+  {
+    setBooleanHTMLAttribute("noshade", noShade);
+  }
+  
+  public String getSize()
+  {
+    return getHTMLAttribute("size");
+  }
+
+  public void setSize(String size)
+  {
+    setHTMLAttribute("size", size);
+  }
+  
+  public String getWidth()
+  {
+    return getHTMLAttribute("width");
+  }
+
+  public void setWidth(String width)
+  {
+    setHTMLAttribute("width", width);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLHeadElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLHeadElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLHeadElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLHeadElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,69 @@
+/* DomHTMLHeadElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLHeadElement;
+
+/**
+ * An HTML 'HEAD' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLHeadElement
+  extends DomHTMLElement
+  implements HTMLHeadElement
+{
+
+  protected DomHTMLHeadElement(DomHTMLDocument owner, String namespaceURI,
+                               String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getProfile()
+  {
+    return getHTMLAttribute("profile");
+  }
+
+  public void setProfile(String profile)
+  {
+    setHTMLAttribute("profile", profile);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLHeadingElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLHeadingElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLHeadingElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLHeadingElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,69 @@
+/* DomHTMLHeadingElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLHeadingElement;
+
+/**
+ * An HTML 'H1', 'H2', 'H3', 'H4', 'H5', or 'H6' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLHeadingElement
+  extends DomHTMLElement
+  implements HTMLHeadingElement
+{
+
+  protected DomHTMLHeadingElement(DomHTMLDocument owner, String namespaceURI,
+                                  String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getAlign()
+  {
+    return getHTMLAttribute("align");
+  }
+
+  public void setAlign(String align)
+  {
+    setHTMLAttribute("align", align);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLHtmlElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLHtmlElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLHtmlElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLHtmlElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,69 @@
+/* DomHTMLHtmlElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLHtmlElement;
+
+/**
+ * An HTML 'HTML' top-level element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLHtmlElement
+  extends DomHTMLElement
+  implements HTMLHtmlElement
+{
+
+  protected DomHTMLHtmlElement(DomHTMLDocument owner, String namespaceURI,
+                               String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getVersion()
+  {
+    return getHTMLAttribute("version");
+  }
+
+  public void setVersion(String version)
+  {
+    setHTMLAttribute("version", version);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLIFrameElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLIFrameElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLIFrameElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLIFrameElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,166 @@
+/* DomHTMLIFrameElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.html2.HTMLIFrameElement;
+
+/**
+ * An HTML 'IFRAME' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLIFrameElement
+  extends DomHTMLElement
+  implements HTMLIFrameElement
+{
+
+  protected DomHTMLIFrameElement(DomHTMLDocument owner, String namespaceURI,
+                                String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getAlign()
+  {
+    return getHTMLAttribute("align");
+  }
+
+  public void setAlign(String align)
+  {
+    setHTMLAttribute("align", align);
+  }
+  
+  public String getFrameBorder()
+  {
+    return getHTMLAttribute("frameborder");
+  }
+
+  public void setFrameBorder(String frameBorder)
+  {
+    setHTMLAttribute("frameborder", frameBorder);
+  }
+  
+  public String getHeight()
+  {
+    return getHTMLAttribute("height");
+  }
+
+  public void setHeight(String height)
+  {
+    setHTMLAttribute("height", height);
+  }
+  
+  public String getLongDesc()
+  {
+    return getHTMLAttribute("longdesc");
+  }
+
+  public void setLongDesc(String longDesc)
+  {
+    setHTMLAttribute("longdesc", longDesc);
+  }
+  
+  public String getMarginHeight()
+  {
+    return getHTMLAttribute("marginheight");
+  }
+
+  public void setMarginHeight(String marginHeight)
+  {
+    setHTMLAttribute("marginheight", marginHeight);
+  }
+  
+  public String getMarginWidth()
+  {
+    return getHTMLAttribute("marginwidth");
+  }
+
+  public void setMarginWidth(String marginWidth)
+  {
+    setHTMLAttribute("marginwidth", marginWidth);
+  }
+  
+  public String getName()
+  {
+    return getHTMLAttribute("name");
+  }
+
+  public void setName(String name)
+  {
+    setHTMLAttribute("name", name);
+  }
+  
+  public String getScrolling()
+  {
+    return getHTMLAttribute("scrolling");
+  }
+
+  public void setScrolling(String scrolling)
+  {
+    setHTMLAttribute("scrolling", scrolling);
+  }
+  
+  public String getSrc()
+  {
+    return getHTMLAttribute("src");
+  }
+
+  public void setSrc(String src)
+  {
+    setHTMLAttribute("src", src);
+  }
+
+  public String getWidth()
+  {
+    return getHTMLAttribute("width");
+  }
+
+  public void setWidth(String width)
+  {
+    setHTMLAttribute("width", width);
+  }
+  
+  public Document getContentDocument()
+  {
+    // TODO getContentDocument
+    return null;
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLImageElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLImageElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLImageElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLImageElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,179 @@
+/* DomHTMLImageElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLImageElement;
+
+/**
+ * An HTML 'IMG' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLImageElement
+  extends DomHTMLElement
+  implements HTMLImageElement
+{
+
+  protected DomHTMLImageElement(DomHTMLDocument owner, String namespaceURI,
+                                String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getName()
+  {
+    return getHTMLAttribute("name");
+  }
+
+  public void setName(String name)
+  {
+    setHTMLAttribute("name", name);
+  }
+  
+  public String getAlign()
+  {
+    return getHTMLAttribute("align");
+  }
+
+  public void setAlign(String align)
+  {
+    setHTMLAttribute("align", align);
+  }
+  
+  public String getAlt()
+  {
+    return getHTMLAttribute("alt");
+  }
+
+  public void setAlt(String alt)
+  {
+    setHTMLAttribute("alt", alt);
+  }
+  
+  public String getBorder()
+  {
+    return getHTMLAttribute("border");
+  }
+
+  public void setBorder(String border)
+  {
+    setHTMLAttribute("border", border);
+  }
+  
+  public int getHeight()
+  {
+    return getIntHTMLAttribute("height");
+  }
+
+  public void setHeight(int height)
+  {
+    setIntHTMLAttribute("height", height);
+  }
+  
+  public int getHspace()
+  {
+    return getIntHTMLAttribute("hspace");
+  }
+
+  public void setHspace(int hspace)
+  {
+    setIntHTMLAttribute("hspace", hspace);
+  }
+  
+  public boolean getIsMap()
+  {
+    return getBooleanHTMLAttribute("ismap");
+  }
+
+  public void setIsMap(boolean isMap)
+  {
+    setBooleanHTMLAttribute("ismap", isMap);
+  }
+  
+  public String getLongDesc()
+  {
+    return getHTMLAttribute("longdesc");
+  }
+
+  public void setLongDesc(String longDesc)
+  {
+    setHTMLAttribute("longdesc", longDesc);
+  }
+  
+  public String getSrc()
+  {
+    return getHTMLAttribute("src");
+  }
+
+  public void setSrc(String src)
+  {
+    setHTMLAttribute("src", src);
+  }
+
+  public String getUseMap()
+  {
+    return getHTMLAttribute("usemap");
+  }
+
+  public void setUseMap(String useMap)
+  {
+    setHTMLAttribute("usemap", useMap);
+  }
+  
+  public int getVspace()
+  {
+    return getIntHTMLAttribute("vspace");
+  }
+
+  public void setVspace(int vspace)
+  {
+    setIntHTMLAttribute("vspace", vspace);
+  }
+  
+  public int getWidth()
+  {
+    return getIntHTMLAttribute("width");
+  }
+
+  public void setWidth(int width)
+  {
+    setIntHTMLAttribute("width", width);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLImpl.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLImpl.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLImpl.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLImpl.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,67 @@
+/* DomHTMLImpl.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import gnu.xml.dom.DomImpl;
+import org.w3c.dom.Document;
+
+/**
+ * Specialised DOMImplementation for creating HTML documents.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLImpl
+  extends DomImpl
+{
+  
+  protected Document createDocument()
+  {
+    return new DomHTMLDocument(this);
+  }
+
+  public Object getFeature(String feature, String version)
+  {
+    if (hasFeature(feature, version))
+      {
+        return this;
+      }
+    return null;
+  }
+
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLInputElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLInputElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLInputElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLInputElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,266 @@
+/* DomHTMLInputElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLFormElement;
+import org.w3c.dom.html2.HTMLInputElement;
+
+/**
+ * An HTML 'INPUT' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLInputElement
+  extends DomHTMLElement
+  implements HTMLInputElement
+{
+
+  protected String value;
+  protected Boolean checked;
+
+  protected DomHTMLInputElement(DomHTMLDocument owner, String namespaceURI,
+                                String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getDefaultValue()
+  {
+    return getHTMLAttribute("value");
+  }
+
+  public void setDefaultValue(String defaultValue)
+  {
+    setHTMLAttribute("value", defaultValue);
+  }
+  
+  public boolean getDefaultChecked()
+  {
+    return getBooleanHTMLAttribute("checked");
+  }
+
+  public void setDefaultChecked(boolean defaultChecked)
+  {
+    setBooleanHTMLAttribute("checked", defaultChecked);
+  }
+
+  public HTMLFormElement getForm()
+  {
+    return (HTMLFormElement) getParentElement("form");
+  }
+  
+  public String getAccept()
+  {
+    return getHTMLAttribute("accept");
+  }
+
+  public void setAccept(String accept)
+  {
+    setHTMLAttribute("accept", accept);
+  }
+  
+  public String getAccessKey()
+  {
+    return getHTMLAttribute("accesskey");
+  }
+
+  public void setAccessKey(String accessKey)
+  {
+    setHTMLAttribute("accesskey", accessKey);
+  }
+  
+  public String getAlign()
+  {
+    return getHTMLAttribute("align");
+  }
+
+  public void setAlign(String align)
+  {
+    setHTMLAttribute("align", align);
+  }
+  
+  public String getAlt()
+  {
+    return getHTMLAttribute("alt");
+  }
+
+  public void setAlt(String alt)
+  {
+    setHTMLAttribute("alt", alt);
+  }
+  
+  public boolean getChecked()
+  {
+    if (checked == null)
+      {
+        checked = Boolean.valueOf(getDefaultChecked());
+      }
+    return checked.booleanValue();
+  }
+
+  public void setChecked(boolean checked)
+  {
+    this.checked = Boolean.valueOf(checked);
+  }
+  
+  public boolean getDisabled()
+  {
+    return getBooleanHTMLAttribute("disabled");
+  }
+
+  public void setDisabled(boolean disabled)
+  {
+    setBooleanHTMLAttribute("disabled", disabled);
+  }
+  
+  public int getMaxLength()
+  {
+    return getIntHTMLAttribute("maxLength");
+  }
+
+  public void setMaxLength(int maxLength)
+  {
+    setIntHTMLAttribute("maxLength", maxLength);
+  }
+  
+  public String getName()
+  {
+    return getHTMLAttribute("name");
+  }
+
+  public void setName(String name)
+  {
+    setHTMLAttribute("name", name);
+  }
+  
+  public boolean getReadOnly()
+  {
+    return getBooleanHTMLAttribute("readonly");
+  }
+
+  public void setReadOnly(boolean readOnly)
+  {
+    setBooleanHTMLAttribute("readonly", readOnly);
+  }
+  
+  public int getSize()
+  {
+    return getIntHTMLAttribute("size");
+  }
+
+  public void setSize(int size)
+  {
+    setIntHTMLAttribute("size", size);
+  }
+  
+  public String getSrc()
+  {
+    return getHTMLAttribute("src");
+  }
+
+  public void setSrc(String src)
+  {
+    setHTMLAttribute("src", src);
+  }
+  
+  public int getTabIndex()
+  {
+    return getIntHTMLAttribute("tabindex");
+  }
+
+  public void setTabIndex(int tabIndex)
+  {
+    setIntHTMLAttribute("tabindex", tabIndex);
+  }
+  
+  public String getType()
+  {
+    return getHTMLAttribute("type");
+  }
+
+  public void setType(String type)
+  {
+    setHTMLAttribute("type", type);
+  }
+  
+  public String getUseMap()
+  {
+    return getHTMLAttribute("usemap");
+  }
+
+  public void setUseMap(String useMap)
+  {
+    setHTMLAttribute("usemap", useMap);
+  }
+  
+  public String getValue()
+  {
+    if (value == null)
+      {
+        value = getDefaultValue();
+      }
+    return value;
+  }
+
+  public void setValue(String value)
+  {
+    this.value = value;
+  }
+
+  public void blur()
+  {
+    dispatchUIEvent("blur");
+  }
+
+  public void focus()
+  {
+    dispatchUIEvent("focus");
+  }
+
+  public void select()
+  {
+    dispatchUIEvent("select");
+  }
+
+  public void click()
+  {
+    dispatchUIEvent("click");
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLIsIndexElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLIsIndexElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLIsIndexElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLIsIndexElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,75 @@
+/* DomHTMLIsIndexElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLFormElement;
+import org.w3c.dom.html2.HTMLIsIndexElement;
+
+/**
+ * An HTML 'ISINDEX' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLIsIndexElement
+  extends DomHTMLElement
+  implements HTMLIsIndexElement
+{
+
+  protected DomHTMLIsIndexElement(DomHTMLDocument owner, String namespaceURI,
+                                  String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public HTMLFormElement getForm()
+  {
+    return (HTMLFormElement) getParentElement("form");
+  }
+
+  public String getPrompt()
+  {
+    return getHTMLAttribute("prompt");
+  }
+
+  public void setPrompt(String prompt)
+  {
+    setHTMLAttribute("prompt", prompt);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLLIElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLLIElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLLIElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLLIElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,79 @@
+/* DomHTMLLIElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLLIElement;
+
+/**
+ * An HTML 'LI' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLLIElement
+  extends DomHTMLElement
+  implements HTMLLIElement
+{
+
+  protected DomHTMLLIElement(DomHTMLDocument owner, String namespaceURI,
+                             String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getType()
+  {
+    return getHTMLAttribute("type");
+  }
+
+  public void setType(String type)
+  {
+    setHTMLAttribute("type", type);
+  }
+  
+  public int getValue()
+  {
+    return getIntHTMLAttribute("value");
+  }
+
+  public void setValue(int value)
+  {
+    setIntHTMLAttribute("value", value);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLLabelElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLLabelElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLLabelElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLLabelElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,85 @@
+/* DomHTMLLabelElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLFormElement;
+import org.w3c.dom.html2.HTMLLabelElement;
+
+/**
+ * An HTML 'LABEL' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLLabelElement
+  extends DomHTMLElement
+  implements HTMLLabelElement
+{
+
+  protected DomHTMLLabelElement(DomHTMLDocument owner, String namespaceURI,
+                                String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public HTMLFormElement getForm()
+  {
+    return (HTMLFormElement) getParentElement("form");
+  }
+
+  public String getAccessKey()
+  {
+    return getHTMLAttribute("accesskey");
+  }
+
+  public void setAccessKey(String accessKey)
+  {
+    setHTMLAttribute("accesskey", accessKey);
+  }
+  
+  public String getHtmlFor()
+  {
+    return getHTMLAttribute("for");
+  }
+
+  public void setHtmlFor(String htmlFor)
+  {
+    setHTMLAttribute("for", htmlFor);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLLegendElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLLegendElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLLegendElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLLegendElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,85 @@
+/* DomHTMLLegendElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLFormElement;
+import org.w3c.dom.html2.HTMLLegendElement;
+
+/**
+ * An HTML 'LEGEND' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLLegendElement
+  extends DomHTMLElement
+  implements HTMLLegendElement
+{
+
+  protected DomHTMLLegendElement(DomHTMLDocument owner, String namespaceURI,
+                                 String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public HTMLFormElement getForm()
+  {
+    return (HTMLFormElement) getParentElement("form");
+  }
+
+  public String getAccessKey()
+  {
+    return getHTMLAttribute("accesskey");
+  }
+
+  public void setAccessKey(String accessKey)
+  {
+    setHTMLAttribute("accesskey", accessKey);
+  }
+  
+  public String getAlign()
+  {
+    return getHTMLAttribute("align");
+  }
+
+  public void setAlign(String align)
+  {
+    setHTMLAttribute("align", align);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLLinkElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLLinkElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLLinkElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLLinkElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,149 @@
+/* DomHTMLLinkElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLLinkElement;
+
+/**
+ * An HTML 'LINK' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLLinkElement
+  extends DomHTMLElement
+  implements HTMLLinkElement
+{
+
+  protected DomHTMLLinkElement(DomHTMLDocument owner, String namespaceURI,
+                               String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public boolean getDisabled()
+  {
+    return getBooleanHTMLAttribute("disabled");
+  }
+
+  public void setDisabled(boolean disabled)
+  {
+    setBooleanHTMLAttribute("disabled", disabled);
+  }
+  
+  public String getCharset()
+  {
+    return getHTMLAttribute("charset");
+  }
+
+  public void setCharset(String charset)
+  {
+    setHTMLAttribute("charset", charset);
+  }
+  
+  public String getHref()
+  {
+    return getHTMLAttribute("href");
+  }
+
+  public void setHref(String href)
+  {
+    setHTMLAttribute("href", href);
+  }
+  
+  public String getHreflang()
+  {
+    return getHTMLAttribute("hreflang");
+  }
+
+  public void setHreflang(String hreflang)
+  {
+    setHTMLAttribute("hreflang", hreflang);
+  }
+  
+  public String getMedia()
+  {
+    return getHTMLAttribute("media");
+  }
+
+  public void setMedia(String media)
+  {
+    setHTMLAttribute("media", media);
+  }
+  
+  public String getRel()
+  {
+    return getHTMLAttribute("rel");
+  }
+
+  public void setRel(String rel)
+  {
+    setHTMLAttribute("rel", rel);
+  }
+  
+  public String getRev()
+  {
+    return getHTMLAttribute("rev");
+  }
+
+  public void setRev(String rev)
+  {
+    setHTMLAttribute("rev", rev);
+  }
+  
+  public String getTarget()
+  {
+    return getHTMLAttribute("target");
+  }
+
+  public void setTarget(String target)
+  {
+    setHTMLAttribute("target", target);
+  }
+  
+  public String getType()
+  {
+    return getHTMLAttribute("type");
+  }
+
+  public void setType(String type)
+  {
+    setHTMLAttribute("type", type);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLMapElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLMapElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLMapElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLMapElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,79 @@
+/* DomHTMLMapElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLCollection;
+import org.w3c.dom.html2.HTMLMapElement;
+
+/**
+ * An HTML 'MAP' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLMapElement
+  extends DomHTMLElement
+  implements HTMLMapElement
+{
+
+  protected DomHTMLMapElement(DomHTMLDocument owner, String namespaceURI,
+                              String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public HTMLCollection getAreas()
+  {
+    DomHTMLCollection ret =
+      new DomHTMLCollection((DomHTMLDocument) getOwnerDocument(), this);
+    ret.addNodeName("area");
+    ret.evaluate();
+    return ret;
+  }
+  
+  public String getName()
+  {
+    return getHTMLAttribute("name");
+  }
+
+  public void setName(String name)
+  {
+    setHTMLAttribute("name", name);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLMenuElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLMenuElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLMenuElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLMenuElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,69 @@
+/* DomHTMLMenuElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLMenuElement;
+
+/**
+ * An HTML 'MENU' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLMenuElement
+  extends DomHTMLElement
+  implements HTMLMenuElement
+{
+
+  protected DomHTMLMenuElement(DomHTMLDocument owner, String namespaceURI,
+                               String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public boolean getCompact()
+  {
+    return getBooleanHTMLAttribute("compact");
+  }
+
+  public void setCompact(boolean compact)
+  {
+    setBooleanHTMLAttribute("compact", compact);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLMetaElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLMetaElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLMetaElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLMetaElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,99 @@
+/* DomHTMLMetaElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLMetaElement;
+
+/**
+ * An HTML 'META' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLMetaElement
+  extends DomHTMLElement
+  implements HTMLMetaElement
+{
+
+  protected DomHTMLMetaElement(DomHTMLDocument owner, String namespaceURI,
+                               String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getContent()
+  {
+    return getHTMLAttribute("content");
+  }
+
+  public void setContent(String content)
+  {
+    setHTMLAttribute("content", content);
+  }
+  
+  public String getHttpEquiv()
+  {
+    return getHTMLAttribute("http-equiv");
+  }
+
+  public void setHttpEquiv(String httpEquiv)
+  {
+    setHTMLAttribute("http-equiv", httpEquiv);
+  }
+  
+  public String getName()
+  {
+    return getHTMLAttribute("name");
+  }
+
+  public void setName(String name)
+  {
+    setHTMLAttribute("name", name);
+  }
+  
+  public String getScheme()
+  {
+    return getHTMLAttribute("scheme");
+  }
+
+  public void setScheme(String scheme)
+  {
+    setHTMLAttribute("scheme", scheme);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLModElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLModElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLModElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLModElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,79 @@
+/* DomHTMLModElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLModElement;
+
+/**
+ * An HTML 'INS' or 'DEL' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLModElement
+  extends DomHTMLElement
+  implements HTMLModElement
+{
+
+  protected DomHTMLModElement(DomHTMLDocument owner, String namespaceURI,
+                              String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getCite()
+  {
+    return getHTMLAttribute("cite");
+  }
+
+  public void setCite(String cite)
+  {
+    setHTMLAttribute("cite", cite);
+  }
+  
+  public String getDateTime()
+  {
+    return getHTMLAttribute("datetime");
+  }
+
+  public void setDateTime(String dateTime)
+  {
+    setHTMLAttribute("datetime", dateTime);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLOListElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLOListElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLOListElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLOListElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,89 @@
+/* DomHTMLOListElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLOListElement;
+
+/**
+ * An HTML 'OL' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLOListElement
+  extends DomHTMLElement
+  implements HTMLOListElement
+{
+
+  protected DomHTMLOListElement(DomHTMLDocument owner, String namespaceURI,
+                                String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public boolean getCompact()
+  {
+    return getBooleanHTMLAttribute("compact");
+  }
+
+  public void setCompact(boolean compact)
+  {
+    setBooleanHTMLAttribute("compact", compact);
+  }
+  
+  public int getStart()
+  {
+    return getIntHTMLAttribute("start");
+  }
+
+  public void setStart(int start)
+  {
+    setIntHTMLAttribute("start", start);
+  }
+  
+  public String getType()
+  {
+    return getHTMLAttribute("type");
+  }
+
+  public void setType(String type)
+  {
+    setHTMLAttribute("type", type);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLObjectElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLObjectElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLObjectElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLObjectElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,242 @@
+/* DomHTMLObjectElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.html2.HTMLFormElement;
+import org.w3c.dom.html2.HTMLObjectElement;
+
+/**
+ * An HTML 'OBJECT' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLObjectElement
+  extends DomHTMLElement
+  implements HTMLObjectElement
+{
+
+  protected DomHTMLObjectElement(DomHTMLDocument owner, String namespaceURI,
+                                 String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public HTMLFormElement getForm()
+  {
+    return (HTMLFormElement) getParentElement("form");
+  }
+
+  public String getCode()
+  {
+    return getHTMLAttribute("code");
+  }
+
+  public void setCode(String code)
+  {
+    setHTMLAttribute("code", code);
+  }
+  
+  public String getAlign()
+  {
+    return getHTMLAttribute("align");
+  }
+
+  public void setAlign(String align)
+  {
+    setHTMLAttribute("align", align);
+  }
+  
+  public String getArchive()
+  {
+    return getHTMLAttribute("archive");
+  }
+
+  public void setArchive(String archive)
+  {
+    setHTMLAttribute("archive", archive);
+  }
+  
+  public String getBorder()
+  {
+    return getHTMLAttribute("border");
+  }
+
+  public void setBorder(String border)
+  {
+    setHTMLAttribute("border", border);
+  }
+  
+  public String getCodeBase()
+  {
+    return getHTMLAttribute("codebase");
+  }
+
+  public void setCodeBase(String codeBase)
+  {
+    setHTMLAttribute("codebase", codeBase);
+  }
+  
+  public String getCodeType()
+  {
+    return getHTMLAttribute("codetype");
+  }
+
+  public void setCodeType(String codeType)
+  {
+    setHTMLAttribute("codetype", codeType);
+  }
+  
+  public String getData()
+  {
+    return getHTMLAttribute("data");
+  }
+
+  public void setData(String data)
+  {
+    setHTMLAttribute("data", data);
+  }
+  
+  public boolean getDeclare()
+  {
+    return getBooleanHTMLAttribute("declare");
+  }
+
+  public void setDeclare(boolean declare)
+  {
+    setBooleanHTMLAttribute("declare", declare);
+  }
+  
+  public String getHeight()
+  {
+    return getHTMLAttribute("height");
+  }
+
+  public void setHeight(String height)
+  {
+    setHTMLAttribute("height", height);
+  }
+  
+  public int getHspace()
+  {
+    return getIntHTMLAttribute("hspace");
+  }
+
+  public void setHspace(int hspace)
+  {
+    setIntHTMLAttribute("hspace", hspace);
+  }
+  
+  public String getName()
+  {
+    return getHTMLAttribute("name");
+  }
+
+  public void setName(String name)
+  {
+    setHTMLAttribute("name", name);
+  }
+  
+  public String getStandby()
+  {
+    return getHTMLAttribute("standby");
+  }
+
+  public void setStandby(String standby)
+  {
+    setHTMLAttribute("standby", standby);
+  }
+  
+  public int getTabIndex()
+  {
+    return getIntHTMLAttribute("tabindex");
+  }
+
+  public void setTabIndex(int tabIndex)
+  {
+    setIntHTMLAttribute("tabindex", tabIndex);
+  }
+  
+  public String getType()
+  {
+    return getHTMLAttribute("type");
+  }
+
+  public void setType(String type)
+  {
+    setHTMLAttribute("type", type);
+  }
+  
+  public String getUseMap()
+  {
+    return getHTMLAttribute("usemap");
+  }
+
+  public void setUseMap(String useMap)
+  {
+    setHTMLAttribute("usemap", useMap);
+  }
+  
+  public int getVspace()
+  {
+    return getIntHTMLAttribute("vspace");
+  }
+
+  public void setVspace(int vspace)
+  {
+    setIntHTMLAttribute("vspace", vspace);
+  }
+  
+  public String getWidth()
+  {
+    return getHTMLAttribute("width");
+  }
+
+  public void setWidth(String width)
+  {
+    setHTMLAttribute("width", width);
+  }
+
+  public Document getContentDocument()
+  {
+    // TODO getContentDocument
+    return null;
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLOptGroupElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLOptGroupElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLOptGroupElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLOptGroupElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,79 @@
+/* DomHTMLOptGroupElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLOptGroupElement;
+
+/**
+ * An HTML 'OPTGROUP' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLOptGroupElement
+  extends DomHTMLElement
+  implements HTMLOptGroupElement
+{
+
+  protected DomHTMLOptGroupElement(DomHTMLDocument owner, String namespaceURI,
+                             String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public boolean getDisabled()
+  {
+    return getBooleanHTMLAttribute("disabled");
+  }
+
+  public void setDisabled(boolean disabled)
+  {
+    setBooleanHTMLAttribute("disabled", disabled);
+  }
+
+  public String getLabel()
+  {
+    return getHTMLAttribute("label");
+  }
+
+  public void setLabel(String label)
+  {
+    setHTMLAttribute("label", label);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLOptionElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLOptionElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLOptionElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLOptionElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,131 @@
+/* DomHTMLOptionElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLFormElement;
+import org.w3c.dom.html2.HTMLOptionElement;
+
+/**
+ * An HTML 'OPTION' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLOptionElement
+  extends DomHTMLElement
+  implements HTMLOptionElement
+{
+
+  protected Boolean selected;
+
+  protected DomHTMLOptionElement(DomHTMLDocument owner, String namespaceURI,
+                                 String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public HTMLFormElement getForm()
+  {
+    return (HTMLFormElement) getParentElement("form");
+  }
+
+  public boolean getDefaultSelected()
+  {
+    return getBooleanHTMLAttribute("selected");
+  }
+
+  public void setDefaultSelected(boolean defaultSelected)
+  {
+    setBooleanHTMLAttribute("selected", defaultSelected);
+  }
+
+  public String getText()
+  {
+    return getTextContent();
+  }
+
+  public int getIndex()
+  {
+    return super.getIndex();
+  }
+  
+  public boolean getDisabled()
+  {
+    return getBooleanHTMLAttribute("disabled");
+  }
+
+  public void setDisabled(boolean disabled)
+  {
+    setBooleanHTMLAttribute("disabled", disabled);
+  }
+  
+  public String getLabel()
+  {
+    return getHTMLAttribute("label");
+  }
+
+  public void setLabel(String label)
+  {
+    setHTMLAttribute("label", label);
+  }
+  
+  public boolean getSelected()
+  {
+    if (selected == null)
+      {
+        selected = Boolean.valueOf(getDefaultSelected());
+      }
+    return selected.booleanValue();
+  }
+
+  public void setSelected(boolean selected)
+  {
+    this.selected = Boolean.valueOf(selected);
+  }
+  
+  public String getValue()
+  {
+    return getHTMLAttribute("value");
+  }
+
+  public void setValue(String value)
+  {
+    setHTMLAttribute("value", value);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLParagraphElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLParagraphElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLParagraphElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLParagraphElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,69 @@
+/* DomHTMLParagraphElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLParagraphElement;
+
+/**
+ * An HTML 'P' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLParagraphElement
+  extends DomHTMLElement
+  implements HTMLParagraphElement
+{
+
+  protected DomHTMLParagraphElement(DomHTMLDocument owner, String namespaceURI,
+                                    String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getAlign()
+  {
+    return getHTMLAttribute("align");
+  }
+
+  public void setAlign(String align)
+  {
+    setHTMLAttribute("align", align);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLParamElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLParamElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLParamElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLParamElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,99 @@
+/* DomHTMLParamElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLParamElement;
+
+/**
+ * An HTML 'PARAM' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLParamElement
+  extends DomHTMLElement
+  implements HTMLParamElement
+{
+
+  protected DomHTMLParamElement(DomHTMLDocument owner, String namespaceURI,
+                                String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getName()
+  {
+    return getHTMLAttribute("name");
+  }
+
+  public void setName(String name)
+  {
+    setHTMLAttribute("name", name);
+  }
+  
+  public String getType()
+  {
+    return getHTMLAttribute("type");
+  }
+
+  public void setType(String type)
+  {
+    setHTMLAttribute("type", type);
+  }
+  
+  public String getValue()
+  {
+    return getHTMLAttribute("value");
+  }
+
+  public void setValue(String value)
+  {
+    setHTMLAttribute("value", value);
+  }
+  
+  public String getValueType()
+  {
+    return getHTMLAttribute("valuetype");
+  }
+
+  public void setValueType(String valueType)
+  {
+    setHTMLAttribute("valuetype", valueType);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLParser.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLParser.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLParser.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLParser.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,266 @@
+/* DomHTMLParser.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.xml.dom.html2;
+
+import gnu.javax.swing.text.html.parser.support.Parser;
+
+import java.io.IOException;
+import java.io.Reader;
+
+import java.util.Enumeration;
+import java.util.Iterator;
+import java.util.LinkedList;
+
+import javax.swing.text.AttributeSet;
+import javax.swing.text.html.HTML;
+import javax.swing.text.html.parser.DTD;
+import javax.swing.text.html.parser.TagElement;
+
+import org.w3c.dom.NamedNodeMap;
+import org.w3c.dom.Node;
+import org.w3c.dom.html2.HTMLDocument;
+
+/**
+ * This parser reads HTML from the given stream and stores into
+ * {@link HTMLDocument}. The HTML tag becomes the {@link Node}.
+ * The tag attributes become the node attributes. The text inside
+ * HTML tag is inserted as one or several text nodes. The nested
+ * HTML tags are inserted as child nodes.
+ * 
+ * If the strict tree structure, closing the tag means closing all
+ * nested tags. To work around this, this parser closes the nested
+ * tags and immediately reopens them after the closed tag.
+ * In this way, <code>&lt;b&gt;&lt;i&gt;c&lt;/b&gt;d</code> 
+ * is parsed as <code>&lt;b&gt;&lt;i&gt;c&lt;/i&gt;&lt;/b&gt;&lt;i&gt;d</code> .
+ *
+ * @author Audrius Meskauskas (AudriusA@Bioinformatics.org)
+ */
+public class DomHTMLParser
+  extends gnu.javax.swing.text.html.parser.support.Parser
+{
+  /**
+   * The target where HTML document will be inserted.
+   */
+  protected DomHTMLDocument document;
+
+  /**
+   * The subsequently created new nodes will be inserted as the
+   * childs of this cursor.
+   */
+  protected Node cursor;
+
+  /**
+   * Create parser using the given DTD.
+   *
+   * @param dtd the DTD (for example,
+   * {@link gnu.javax.swing.text.html.parser.HTML_401F}).
+   */
+  public DomHTMLParser(DTD dtd)
+  {
+    super(dtd);
+  }
+
+  /**
+   * Parse SGML insertion ( &lt;! ... &gt; ).
+   * Currently just treats it as comment.
+   */
+  public boolean parseMarkupDeclarations(StringBuffer strBuff)
+                                  throws java.io.IOException
+  {
+    Node c = document.createComment(strBuff.toString());
+    cursor.appendChild(c);
+    return false;
+  }
+
+  /**
+   * Read the document, present in the given stream, and
+   * return the corresponding {@link HTMLDocument}.
+   *
+   * @param input a stream to read from.
+   * @return a document, reflecting the structure of the provided HTML
+   * text.
+   *
+   * @throws IOException if the reader throws one.
+   */
+  public HTMLDocument parseDocument(Reader input)
+                    throws IOException
+  {
+    try
+      {
+        document = new DomHTMLDocument();
+
+        cursor = document;
+
+        parse(input);
+
+        DomHTMLDocument h = document;
+        document = null;
+        return h;
+      }
+    catch (Exception ex)
+      {
+        ex.printStackTrace();
+        throw new IOException("Exception: " + ex.getMessage());
+      }
+  }
+  
+  /**
+   * Create a new node.
+   * @param name the name of node, case insensitive.
+   * @return the created node.
+   */
+  protected Node createNode(String name)
+  {
+    Node new_node = document.createElement(name.toLowerCase());
+    AttributeSet hatts = getAttributes();
+    NamedNodeMap natts = new_node.getAttributes();
+
+    Enumeration enumeration = hatts.getAttributeNames();
+    Object key;
+    Node attribute;
+
+    while (hatts != null)
+      {
+        while (enumeration.hasMoreElements())
+          {
+            key = enumeration.nextElement();
+            attribute = document.createAttribute(key.toString());
+            attribute.setNodeValue(hatts.getAttribute(key).toString());
+            natts.setNamedItem(attribute);
+          }
+
+        // The default values are stored in a parent node. 
+        hatts = hatts.getResolveParent();
+      }
+
+    return new_node;
+  }
+  
+  /**
+   * Handle comment by inserting the comment node.
+   * @param text the comment text.
+   */
+  protected void handleComment(char[] text)
+  {
+    Node c = document.createComment(new String(text));
+    cursor.appendChild(c);
+  }
+  
+  /**
+   * Handle the tag with no content.
+   * @param tag the tag to handle.
+   */
+  protected void handleEmptyTag(TagElement tag)
+  {
+    String name = tag.getHTMLTag().toString();
+
+    if (name.equalsIgnoreCase("#pcdata"))
+      return;
+
+    Node c = createNode(name);
+    cursor.appendChild(c);
+  }
+  
+  /**
+   * Close the given tag. Close and reopen all nested tags.
+   * @param tag the tag to close.
+   */
+  protected void handleEndTag(TagElement tag)
+  {
+    String name = tag.getHTMLTag().toString();
+    String nname = cursor.getNodeName();
+
+    // Closing the current tag.
+    if (nname != null && nname.equalsIgnoreCase(name))
+      {
+        cursor = cursor.getParentNode();
+      }
+    else
+      {
+        Node nCursor = cursor.getParentNode();
+
+        // Remember the opened nodes.
+        LinkedList open = new LinkedList();
+        Node close = cursor;
+        while (close != null && !close.getNodeName().equalsIgnoreCase(name))
+          {
+            if (close != document)
+              open.addFirst(close);
+            close = close.getParentNode();
+          }
+
+        if (close == null)
+          cursor = document;
+        else
+          cursor = close.getParentNode();
+
+        // Insert the copies of the opened nodes.   
+        Iterator iter = open.iterator();
+        while (iter.hasNext())
+          {
+            Node item = (Node) iter.next();
+            Node copy = item.cloneNode(true);
+            cursor.appendChild(copy);
+            cursor = copy;
+          }
+      }
+  }
+
+  /**
+   * Handle the start tag by inserting the HTML element.
+   * @param tag the tag to handle.
+   */
+  protected void handleStartTag(TagElement tag)
+  {
+    HTML.Tag h = tag.getHTMLTag();
+    Node c = createNode(h.toString());
+    cursor.appendChild(c);
+    cursor = c;
+  }
+  
+  /**
+   * Handle text by inserting the text node.
+   * @param text the text to insert.
+   */
+  protected void handleText(char[] text)
+  {
+    Node c = document.createTextNode(text, 0, text.length);
+    cursor.appendChild(c);
+  }
+}
Index: libjava/gnu/xml/dom/html2/DomHTMLPreElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLPreElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLPreElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLPreElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,69 @@
+/* DomHTMLPreElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLPreElement;
+
+/**
+ * An HTML 'PRE' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLPreElement
+  extends DomHTMLElement
+  implements HTMLPreElement
+{
+
+  protected DomHTMLPreElement(DomHTMLDocument owner, String namespaceURI,
+                             String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public int getWidth()
+  {
+    return getIntHTMLAttribute("width");
+  }
+
+  public void setWidth(int width)
+  {
+    setIntHTMLAttribute("width", width);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLQuoteElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLQuoteElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLQuoteElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLQuoteElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,69 @@
+/* DomHTMLQuoteElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLQuoteElement;
+
+/**
+ * An HTML 'Q' or 'BLOCKQUOTE' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLQuoteElement
+  extends DomHTMLElement
+  implements HTMLQuoteElement
+{
+
+  protected DomHTMLQuoteElement(DomHTMLDocument owner, String namespaceURI,
+                                String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getCite()
+  {
+    return getHTMLAttribute("cite");
+  }
+
+  public void setCite(String cite)
+  {
+    setHTMLAttribute("cite", cite);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLScriptElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLScriptElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLScriptElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLScriptElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,129 @@
+/* DomHTMLScriptElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLScriptElement;
+
+/**
+ * An HTML 'SCRIPT' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLScriptElement
+  extends DomHTMLElement
+  implements HTMLScriptElement
+{
+
+  protected DomHTMLScriptElement(DomHTMLDocument owner, String namespaceURI,
+                                 String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getText()
+  {
+    return getTextContent();
+  }
+
+  public void setText(String text)
+  {
+    setTextContent(text);
+  }
+
+  public String getHtmlFor()
+  {
+    return getHTMLAttribute("for");
+  }
+
+  public void setHtmlFor(String htmlFor)
+  {
+    setHTMLAttribute("for", htmlFor);
+  }
+
+  public String getEvent()
+  {
+    return getHTMLAttribute("event");
+  }
+
+  public void setEvent(String event)
+  {
+    setHTMLAttribute("event", event);
+  }
+
+  public String getCharset()
+  {
+    return getHTMLAttribute("charset");
+  }
+
+  public void setCharset(String charset)
+  {
+    setHTMLAttribute("charset", charset);
+  }
+
+  public boolean getDefer()
+  {
+    return getBooleanHTMLAttribute("defer");
+  }
+
+  public void setDefer(boolean defer)
+  {
+    setBooleanHTMLAttribute("defer", defer);
+  }
+
+  public String getSrc()
+  {
+    return getHTMLAttribute("src");
+  }
+
+  public void setSrc(String src)
+  {
+    setHTMLAttribute("src", src);
+  }
+
+  public String getType()
+  {
+    return getHTMLAttribute("type");
+  }
+
+  public void setType(String type)
+  {
+    setHTMLAttribute("type", type);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLSelectElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLSelectElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLSelectElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLSelectElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,211 @@
+/* DomHTMLSelectElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import gnu.xml.dom.DomDOMException;
+import org.w3c.dom.DOMException;
+import org.w3c.dom.html2.HTMLElement;
+import org.w3c.dom.html2.HTMLFormElement;
+import org.w3c.dom.html2.HTMLOptionElement;
+import org.w3c.dom.html2.HTMLOptionsCollection;
+import org.w3c.dom.html2.HTMLSelectElement;
+
+/**
+ * An HTML 'SELECT' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLSelectElement
+  extends DomHTMLElement
+  implements HTMLSelectElement
+{
+
+  protected DomHTMLSelectElement(DomHTMLDocument owner, String namespaceURI,
+                                 String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+  
+  public String getType()
+  {
+    return getHTMLAttribute("type");
+  }
+
+  public int getSelectedIndex()
+  {
+    HTMLOptionsCollection options = getOptions();
+    int len = options.getLength();
+    for (int i = 0; i < len; i++)
+      {
+        HTMLOptionElement option = (HTMLOptionElement) options.item(i);
+        if (option.getSelected())
+          {
+            return i;
+          }
+      }
+    return -1;
+  }
+
+  public void setSelectedIndex(int selectedIndex)
+  {
+    HTMLOptionsCollection options = getOptions();
+    int len = options.getLength();
+    if (selectedIndex < 0 || selectedIndex >= len)
+      {
+        throw new DomDOMException(DOMException.INDEX_SIZE_ERR);
+      }
+    for (int i = 0; i < len; i++)
+      {
+        HTMLOptionElement option = (HTMLOptionElement) options.item(i);
+        option.setSelected(i == selectedIndex);
+      }
+  }
+  
+  public String getValue()
+  {
+    return getHTMLAttribute("value");
+  }
+
+  public void setValue(String value)
+  {
+    setHTMLAttribute("value", value);
+  }
+  
+  public int getLength()
+  {
+    return getIntHTMLAttribute("length");
+  }
+
+  public void setLength(int length)
+  {
+    setIntHTMLAttribute("length", length);
+  }
+
+  public HTMLFormElement getForm()
+  {
+    return (HTMLFormElement) getParentElement("form");
+  }
+
+  public HTMLOptionsCollection getOptions()
+  {
+    DomHTMLCollection ret =
+      new DomHTMLCollection((DomHTMLDocument) getOwnerDocument(), this);
+    ret.addNodeName("option");
+    ret.evaluate();
+    return ret;
+  }
+  
+  public boolean getDisabled()
+  {
+    return getBooleanHTMLAttribute("disabled");
+  }
+
+  public void setDisabled(boolean disabled)
+  {
+    setBooleanHTMLAttribute("disabled", disabled);
+  }
+  
+  public boolean getMultiple()
+  {
+    return getBooleanHTMLAttribute("multiple");
+  }
+
+  public void setMultiple(boolean multiple)
+  {
+    setBooleanHTMLAttribute("multiple", multiple);
+  }
+  
+  public String getName()
+  {
+    return getHTMLAttribute("name");
+  }
+
+  public void setName(String name)
+  {
+    setHTMLAttribute("name", name);
+  }
+  
+  public int getSize()
+  {
+    return getIntHTMLAttribute("size");
+  }
+
+  public void setSize(int size)
+  {
+    setIntHTMLAttribute("size", size);
+  }
+  
+  public int getTabIndex()
+  {
+    return getIntHTMLAttribute("tabindex");
+  }
+
+  public void setTabIndex(int tabIndex)
+  {
+    setIntHTMLAttribute("tabindex", tabIndex);
+  }
+
+  public void add(HTMLElement element, HTMLElement before)
+  {
+    insertBefore(before, element);
+  }
+
+  public void remove(int index)
+  {
+    HTMLOptionsCollection options = getOptions();
+    int len = options.getLength();
+    if (index < 0 || index >= len)
+      {
+        throw new DomDOMException(DOMException.INDEX_SIZE_ERR);
+      }
+    HTMLOptionElement option = (HTMLOptionElement) options.item(index);
+    option.getParentNode().removeChild(option);
+  }
+
+  public void blur()
+  {
+    dispatchUIEvent("blur");
+  }
+
+  public void focus()
+  {
+    dispatchUIEvent("focus");
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLStyleElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLStyleElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLStyleElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLStyleElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,89 @@
+/* DomHTMLStyleElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLStyleElement;
+
+/**
+ * An HTML 'STYLE' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLStyleElement
+  extends DomHTMLElement
+  implements HTMLStyleElement
+{
+
+  protected DomHTMLStyleElement(DomHTMLDocument owner, String namespaceURI,
+                                String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public boolean getDisabled()
+  {
+    return getBooleanHTMLAttribute("disabled");
+  }
+
+  public void setDisabled(boolean disabled)
+  {
+    setBooleanHTMLAttribute("disabled", disabled);
+  }
+  
+  public String getMedia()
+  {
+    return getHTMLAttribute("media");
+  }
+
+  public void setMedia(String media)
+  {
+    setHTMLAttribute("media", media);
+  }
+  
+  public String getType()
+  {
+    return getHTMLAttribute("type");
+  }
+
+  public void setType(String type)
+  {
+    setHTMLAttribute("type", type);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLTableCaptionElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLTableCaptionElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLTableCaptionElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLTableCaptionElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,70 @@
+/* DomHTMLTableCaptionElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLTableCaptionElement;
+
+/**
+ * An HTML 'CAPTION' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLTableCaptionElement
+  extends DomHTMLElement
+  implements HTMLTableCaptionElement
+{
+
+  protected DomHTMLTableCaptionElement(DomHTMLDocument owner,
+                                       String namespaceURI,
+                                       String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getAlign()
+  {
+    return getHTMLAttribute("align");
+  }
+
+  public void setAlign(String align)
+  {
+    setHTMLAttribute("align", align);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLTableCellElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLTableCellElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLTableCellElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLTableCellElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,205 @@
+/* DomHTMLTableCellElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLTableCellElement;
+
+/**
+ * An HTML 'TH' or 'TD' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLTableCellElement
+  extends DomHTMLElement
+  implements HTMLTableCellElement
+{
+
+  protected DomHTMLTableCellElement(DomHTMLDocument owner,
+                                    String namespaceURI,
+                                    String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public int getCellIndex()
+  {
+    return getIndex();
+  }
+
+  public String getAbbr()
+  {
+    return getHTMLAttribute("abbr");
+  }
+
+  public void setAbbr(String abbr)
+  {
+    setHTMLAttribute("abbr", abbr);
+  }
+  
+  public String getAlign()
+  {
+    return getHTMLAttribute("align");
+  }
+
+  public void setAlign(String align)
+  {
+    setHTMLAttribute("align", align);
+  }
+  
+  public String getAxis()
+  {
+    return getHTMLAttribute("axis");
+  }
+
+  public void setAxis(String axis)
+  {
+    setHTMLAttribute("axis", axis);
+  }
+  
+  public String getBgColor()
+  {
+    return getHTMLAttribute("bgcolor");
+  }
+
+  public void setBgColor(String bgColor)
+  {
+    setHTMLAttribute("bgcolor", bgColor);
+  }
+  
+  public String getCh()
+  {
+    return getHTMLAttribute("char");
+  }
+
+  public void setCh(String ch)
+  {
+    setHTMLAttribute("char", ch);
+  }
+  
+  public String getChOff()
+  {
+    return getHTMLAttribute("charoff");
+  }
+
+  public void setChOff(String chOff)
+  {
+    setHTMLAttribute("charoff", chOff);
+  }
+  
+  public int getColSpan()
+  {
+    return getIntHTMLAttribute("colspan");
+  }
+
+  public void setColSpan(int colSpan)
+  {
+    setIntHTMLAttribute("colspan", colSpan);
+  }
+  
+  public String getHeaders()
+  {
+    return getHTMLAttribute("headers");
+  }
+
+  public void setHeaders(String headers)
+  {
+    setHTMLAttribute("headers", headers);
+  }
+  
+  public String getHeight()
+  {
+    return getHTMLAttribute("height");
+  }
+
+  public void setHeight(String height)
+  {
+    setHTMLAttribute("height", height);
+  }
+  
+  public boolean getNoWrap()
+  {
+    return getBooleanHTMLAttribute("nowrap");
+  }
+
+  public void setNoWrap(boolean noWrap)
+  {
+    setBooleanHTMLAttribute("nowrap", noWrap);
+  }
+  
+  public int getRowSpan()
+  {
+    return getIntHTMLAttribute("rowspan");
+  }
+
+  public void setRowSpan(int rowSpan)
+  {
+    setIntHTMLAttribute("rowspan", rowSpan);
+  }
+  
+  public String getScope()
+  {
+    return getHTMLAttribute("scope");
+  }
+
+  public void setScope(String scope)
+  {
+    setHTMLAttribute("scope", scope);
+  }
+  
+  public String getVAlign()
+  {
+    return getHTMLAttribute("valign");
+  }
+
+  public void setVAlign(String vAlign)
+  {
+    setHTMLAttribute("valign", vAlign);
+  }
+  
+  public String getWidth()
+  {
+    return getHTMLAttribute("width");
+  }
+
+  public void setWidth(String width)
+  {
+    setHTMLAttribute("width", width);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLTableColElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLTableColElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLTableColElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLTableColElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,120 @@
+/* DomHTMLTableColElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLTableColElement;
+
+/**
+ * An HTML 'COL' or 'COLGROUP' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLTableColElement
+  extends DomHTMLElement
+  implements HTMLTableColElement
+{
+
+  protected DomHTMLTableColElement(DomHTMLDocument owner,
+                                   String namespaceURI,
+                                   String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getAlign()
+  {
+    return getHTMLAttribute("align");
+  }
+
+  public void setAlign(String align)
+  {
+    setHTMLAttribute("align", align);
+  }
+  
+  public String getCh()
+  {
+    return getHTMLAttribute("char");
+  }
+
+  public void setCh(String ch)
+  {
+    setHTMLAttribute("char", ch);
+  }
+  
+  public String getChOff()
+  {
+    return getHTMLAttribute("charoff");
+  }
+
+  public void setChOff(String chOff)
+  {
+    setHTMLAttribute("charoff", chOff);
+  }
+  
+  public int getSpan()
+  {
+    return getIntHTMLAttribute("span");
+  }
+
+  public void setSpan(int span)
+  {
+    setIntHTMLAttribute("span", span);
+  }
+  
+  public String getVAlign()
+  {
+    return getHTMLAttribute("valign");
+  }
+
+  public void setVAlign(String vAlign)
+  {
+    setHTMLAttribute("valign", vAlign);
+  }
+  
+  public String getWidth()
+  {
+    return getHTMLAttribute("width");
+  }
+
+  public void setWidth(String width)
+  {
+    setHTMLAttribute("width", width);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLTableElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLTableElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLTableElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLTableElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,398 @@
+/* DomHTMLTableElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import gnu.xml.dom.DomDOMException;
+import org.w3c.dom.DOMException;
+import org.w3c.dom.Node;
+import org.w3c.dom.html2.HTMLCollection;
+import org.w3c.dom.html2.HTMLElement;
+import org.w3c.dom.html2.HTMLTableCaptionElement;
+import org.w3c.dom.html2.HTMLTableElement;
+import org.w3c.dom.html2.HTMLTableSectionElement;
+
+/**
+ * An HTML 'TABLE' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLTableElement
+  extends DomHTMLElement
+  implements HTMLTableElement
+{
+
+  protected DomHTMLTableElement(DomHTMLDocument owner, String namespaceURI,
+                                String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public HTMLTableCaptionElement getCaption()
+  {
+    return (HTMLTableCaptionElement) getChildElement("caption");
+  }
+
+  public void setCaption(HTMLTableCaptionElement caption)
+  {
+    HTMLTableCaptionElement ref = getCaption();
+    if (ref == null)
+      {
+        appendChild(caption);
+      }
+    else
+      {
+        replaceChild(caption, ref);
+      }
+  }
+  
+  public HTMLTableSectionElement getTHead()
+  {
+    return (HTMLTableSectionElement) getChildElement("thead");
+  }
+
+  public void setTHead(HTMLTableSectionElement tHead)
+  {
+    HTMLTableSectionElement ref = getTHead();
+    if (ref == null)
+      {
+        appendChild(tHead);
+      }
+    else
+      {
+        replaceChild(tHead, ref);
+      }
+  }
+
+  public HTMLTableSectionElement getTFoot()
+  {
+    return (HTMLTableSectionElement) getChildElement("tfoot");
+  }
+
+  public void setTFoot(HTMLTableSectionElement tFoot)
+  {
+    HTMLTableSectionElement ref = getTFoot();
+    if (ref == null)
+      {
+        appendChild(tFoot);
+      }
+    else
+      {
+        replaceChild(tFoot, ref);
+      }
+  }
+
+  public HTMLCollection getRows()
+  {
+    DomHTMLCollection ret =
+      new DomHTMLCollection((DomHTMLDocument) getOwnerDocument(), this);
+    ret.addNodeName("tr");
+    ret.evaluate();
+    return ret;
+  }
+
+  public HTMLCollection getTBodies()
+  {
+    DomHTMLCollection ret =
+      new DomHTMLCollection((DomHTMLDocument) getOwnerDocument(), this);
+    ret.addNodeName("tbody");
+    ret.evaluate();
+    return ret;
+  }
+  
+  public String getAlign()
+  {
+    return getHTMLAttribute("align");
+  }
+
+  public void setAlign(String align)
+  {
+    setHTMLAttribute("align", align);
+  }
+  
+  public String getBgColor()
+  {
+    return getHTMLAttribute("bgcolor");
+  }
+
+  public void setBgColor(String bgColor)
+  {
+    setHTMLAttribute("bgcolor", bgColor);
+  }
+  
+  public String getBorder()
+  {
+    return getHTMLAttribute("border");
+  }
+
+  public void setBorder(String border)
+  {
+    setHTMLAttribute("border", border);
+  }
+  
+  public String getCellPadding()
+  {
+    return getHTMLAttribute("cellpadding");
+  }
+
+  public void setCellPadding(String cellPadding)
+  {
+    setHTMLAttribute("cellpadding", cellPadding);
+  }
+  
+  public String getCellSpacing()
+  {
+    return getHTMLAttribute("cellspacing");
+  }
+
+  public void setCellSpacing(String cellSpacing)
+  {
+    setHTMLAttribute("cellspacing", cellSpacing);
+  }
+  
+  public String getFrame()
+  {
+    return getHTMLAttribute("frame");
+  }
+
+  public void setFrame(String frame)
+  {
+    setHTMLAttribute("frame", frame);
+  }
+  
+  public String getRules()
+  {
+    return getHTMLAttribute("rules");
+  }
+
+  public void setRules(String rules)
+  {
+    setHTMLAttribute("rules", rules);
+  }
+  
+  public String getSummary()
+  {
+    return getHTMLAttribute("summary");
+  }
+
+  public void setSummary(String summary)
+  {
+    setHTMLAttribute("summary", summary);
+  }
+  
+  public String getWidth()
+  {
+    return getHTMLAttribute("width");
+  }
+
+  public void setWidth(String width)
+  {
+    setHTMLAttribute("width", width);
+  }
+
+  public HTMLElement createTHead()
+  {
+    HTMLTableSectionElement ref = getTHead();
+    if (ref == null)
+      {
+        return (HTMLElement) getOwnerDocument().createElement("thead");
+      }
+    else
+      {
+        return ref;
+      }
+  }
+
+  public void deleteTHead()
+  {
+    HTMLTableSectionElement ref = getTHead();
+    if (ref != null)
+      {
+        removeChild(ref);
+      }
+  }
+
+  public HTMLElement createTFoot()
+  {
+    HTMLTableSectionElement ref = getTFoot();
+    if (ref == null)
+      {
+        return (HTMLElement) getOwnerDocument().createElement("tfoot");
+      }
+    else
+      {
+        return ref;
+      }
+  }
+
+  public void deleteTFoot()
+  {
+    HTMLTableSectionElement ref = getTFoot();
+    if (ref != null)
+      {
+        removeChild(ref);
+      }
+  }
+
+  public HTMLElement createCaption()
+  {
+    HTMLTableCaptionElement ref = getCaption();
+    if (ref == null)
+      {
+        return (HTMLElement) getOwnerDocument().createElement("caption");
+      }
+    else
+      {
+        return ref;
+      }
+  }
+
+  public void deleteCaption()
+  {
+    HTMLTableCaptionElement ref = getCaption();
+    if (ref != null)
+      {
+        removeChild(ref);
+      }
+  }
+
+  public HTMLElement insertRow(int index)
+  {
+    Node ref = getRow(index);
+    Node row = getOwnerDocument().createElement("tr");
+    if (ref == null)
+      {
+        Node tbody = getChildElement("tbody");
+        if (tbody == null)
+          {
+            tbody = getOwnerDocument().createElement("tfoot");
+            appendChild(tbody);
+          }
+        tbody.appendChild(row);
+      }
+    else
+      {
+        ref.getParentNode().insertBefore(row, ref);
+      }
+    return (HTMLElement) row;
+  }
+
+  public void deleteRow(int index)
+  {
+    Node ref = getRow(index);
+    if (ref == null)
+      {
+        throw new DomDOMException(DOMException.INDEX_SIZE_ERR);
+      }
+    ref.getParentNode().removeChild(ref);
+  }
+ 
+  Node getRow(final int index)
+  { 
+    int i = 0;
+    Node thead = getChildElement("thead");
+    if (thead != null)
+      {
+        for (Node ctx = thead.getFirstChild(); ctx != null;
+             ctx = ctx.getNextSibling())
+          {
+            String ctxName = ctx.getLocalName();
+            if (ctxName == null)
+              {
+                ctxName = ctx.getNodeName();
+              }
+            if (!"tr".equalsIgnoreCase(ctxName))
+              {
+                continue;
+              }
+            if (index == i)
+              {
+                return ctx;
+              }
+            i++;
+          }
+      }
+    Node tbody = getChildElement("tbody");
+    if (tbody == null)
+      {
+        tbody = this;
+      }
+    for (Node ctx = tbody.getFirstChild(); ctx != null;
+         ctx = ctx.getNextSibling())
+      {
+        String ctxName = ctx.getLocalName();
+        if (ctxName == null)
+          {
+            ctxName = ctx.getNodeName();
+          }
+        if (!"tr".equalsIgnoreCase(ctxName))
+          {
+            continue;
+          }
+        if (index == i)
+          {
+            return ctx;
+          }
+        i++;
+      }
+    Node tfoot = getChildElement("tfoot");
+    if (tfoot != null)
+      {
+        for (Node ctx = tfoot.getFirstChild(); ctx != null;
+             ctx = ctx.getNextSibling())
+          {
+            String ctxName = ctx.getLocalName();
+            if (ctxName == null)
+              {
+                ctxName = ctx.getNodeName();
+              }
+            if (!"tr".equalsIgnoreCase(ctxName))
+              {
+                continue;
+              }
+            if (index == i)
+              {
+                return ctx;
+              }
+            i++;
+          }
+      }
+    return null;
+  }
+
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLTableRowElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLTableRowElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLTableRowElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLTableRowElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,229 @@
+/* DomHTMLTableRowElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import gnu.xml.dom.DomDOMException;
+import org.w3c.dom.DOMException;
+import org.w3c.dom.Node;
+import org.w3c.dom.html2.HTMLCollection;
+import org.w3c.dom.html2.HTMLElement;
+import org.w3c.dom.html2.HTMLTableRowElement;
+
+/**
+ * An HTML 'TR' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLTableRowElement
+  extends DomHTMLElement
+  implements HTMLTableRowElement
+{
+
+  protected DomHTMLTableRowElement(DomHTMLDocument owner,
+                                   String namespaceURI,
+                                   String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public int getRowIndex()
+  {
+    return getIndex();
+  }
+
+  public int getSectionRowIndex()
+  {
+    int index = 0;
+    DomHTMLElement parent = (DomHTMLElement) getParentElement("table");
+    if (parent != null)
+      {
+        Node thead = parent.getChildElement("thead");
+        if (thead != null)
+          {
+            for (Node ctx = thead.getFirstChild(); ctx != null;
+                 ctx = ctx.getNextSibling())
+              {
+                if (ctx == this)
+                  {
+                    return index;
+                  }
+                index++;
+              }
+          }
+        Node tbody = parent.getChildElement("tbody");
+        if (tbody != null)
+          {
+            for (Node ctx = tbody.getFirstChild(); ctx != null;
+                 ctx = ctx.getNextSibling())
+              {
+                if (ctx == this)
+                  {
+                    return index;
+                  }
+                index++;
+              }
+          }
+        Node tfoot = parent.getChildElement("tfoot");
+        if (tfoot != null)
+          {
+            for (Node ctx = tfoot.getFirstChild(); ctx != null;
+                 ctx = ctx.getNextSibling())
+              {
+                if (ctx == this)
+                  {
+                    return index;
+                  }
+                index++;
+              }
+          }
+      }
+    throw new DomDOMException(DOMException.NOT_FOUND_ERR);
+  }
+
+  public HTMLCollection getCells()
+  {
+    DomHTMLCollection ret =
+      new DomHTMLCollection((DomHTMLDocument) getOwnerDocument(), this);
+    ret.addNodeName("th");
+    ret.addNodeName("td");
+    ret.evaluate();
+    return ret;
+  }
+
+  public String getAlign()
+  {
+    return getHTMLAttribute("align");
+  }
+
+  public void setAlign(String align)
+  {
+    setHTMLAttribute("align", align);
+  }
+  
+  public String getBgColor()
+  {
+    return getHTMLAttribute("bgcolor");
+  }
+
+  public void setBgColor(String bgColor)
+  {
+    setHTMLAttribute("bgcolor", bgColor);
+  }
+  
+  public String getCh()
+  {
+    return getHTMLAttribute("char");
+  }
+
+  public void setCh(String ch)
+  {
+    setHTMLAttribute("char", ch);
+  }
+  
+  public String getChOff()
+  {
+    return getHTMLAttribute("charoff");
+  }
+
+  public void setChOff(String chOff)
+  {
+    setHTMLAttribute("charoff", chOff);
+  }
+  
+  public String getVAlign()
+  {
+    return getHTMLAttribute("valign");
+  }
+
+  public void setVAlign(String vAlign)
+  {
+    setHTMLAttribute("valign", vAlign);
+  }
+
+  public HTMLElement insertCell(int index)
+  {
+    Node ref = getCell(index);
+    Node cell = getOwnerDocument().createElement("td");
+    if (ref == null)
+      {
+        appendChild(cell);
+      }
+    else
+      {
+        insertBefore(cell, ref);
+      }
+    return (HTMLElement) cell;
+  }
+
+  public void deleteCell(int index)
+  {
+    Node ref = getCell(index);
+    if (ref == null)
+      {
+        throw new DomDOMException(DOMException.INDEX_SIZE_ERR);
+      }
+    removeChild(ref);
+  }
+  
+  Node getCell(final int index)
+  { 
+    int i = 0;
+    for (Node ctx = getFirstChild(); ctx != null;
+         ctx = ctx.getNextSibling())
+      {
+        String name = ctx.getLocalName();
+        if (name == null)
+          {
+            name = ctx.getNodeName();
+          }
+        if (!"td".equalsIgnoreCase(name) &&
+            !"th".equalsIgnoreCase(name))
+          {
+            continue;
+          }
+        if (index == i)
+          {
+            return ctx;
+          }
+        i++;
+      }
+    return null;
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLTableSectionElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLTableSectionElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLTableSectionElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLTableSectionElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,163 @@
+/* DomHTMLTableSectionElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import gnu.xml.dom.DomDOMException;
+import org.w3c.dom.DOMException;
+import org.w3c.dom.Node;
+import org.w3c.dom.html2.HTMLCollection;
+import org.w3c.dom.html2.HTMLElement;
+import org.w3c.dom.html2.HTMLTableSectionElement;
+
+/**
+ * An HTML 'THEAD', 'TFOOT', or 'TBODY' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLTableSectionElement
+  extends DomHTMLElement
+  implements HTMLTableSectionElement
+{
+
+  protected DomHTMLTableSectionElement(DomHTMLDocument owner,
+                                       String namespaceURI,
+                                       String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getAlign()
+  {
+    return getHTMLAttribute("align");
+  }
+
+  public void setAlign(String align)
+  {
+    setHTMLAttribute("align", align);
+  }
+  
+  public String getCh()
+  {
+    return getHTMLAttribute("char");
+  }
+
+  public void setCh(String ch)
+  {
+    setHTMLAttribute("char", ch);
+  }
+  
+  public String getChOff()
+  {
+    return getHTMLAttribute("charoff");
+  }
+
+  public void setChOff(String chOff)
+  {
+    setHTMLAttribute("charoff", chOff);
+  }
+  
+  public String getVAlign()
+  {
+    return getHTMLAttribute("valign");
+  }
+
+  public void setVAlign(String vAlign)
+  {
+    setHTMLAttribute("valign", vAlign);
+  }
+
+  public HTMLCollection getRows()
+  {
+    DomHTMLCollection ret =
+      new DomHTMLCollection((DomHTMLDocument) getOwnerDocument(), this);
+    ret.addNodeName("tr");
+    ret.evaluate();
+    return ret;
+  }
+
+  public HTMLElement insertRow(int index)
+  {
+    Node ref = getRow(index);
+    Node row = getOwnerDocument().createElement("tr");
+    if (ref == null)
+      {
+        appendChild(row);
+      }
+    else
+      {
+        insertBefore(row, ref);
+      }
+    return (HTMLElement) row;
+  }
+
+  public void deleteRow(int index)
+  {
+    Node ref = getRow(index);
+    if (ref == null)
+      {
+        throw new DomDOMException(DOMException.INDEX_SIZE_ERR);
+      }
+    removeChild(ref);
+  }
+  
+  Node getRow(final int index)
+  { 
+    int i = 0;
+    for (Node ctx = getFirstChild(); ctx != null;
+         ctx = ctx.getNextSibling())
+      {
+        String name = ctx.getLocalName();
+        if (name == null)
+          {
+            name = ctx.getNodeName();
+          }
+        if (!"tr".equalsIgnoreCase(name))
+          {
+            continue;
+          }
+        if (index == i)
+          {
+            return ctx;
+          }
+        i++;
+      }
+    return null;
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLTextAreaElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLTextAreaElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLTextAreaElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLTextAreaElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,182 @@
+/* DomHTMLTextAreaElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLFormElement;
+import org.w3c.dom.html2.HTMLTextAreaElement;
+
+/**
+ * An HTML 'TEXTAREA' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLTextAreaElement
+  extends DomHTMLElement
+  implements HTMLTextAreaElement
+{
+
+  protected String value;
+
+  protected DomHTMLTextAreaElement(DomHTMLDocument owner,
+                                   String namespaceURI,
+                                   String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getDefaultValue()
+  {
+    return getHTMLAttribute("value");
+  }
+
+  public void setDefaultValue(String defaultValue)
+  {
+    setHTMLAttribute("value", defaultValue);
+  }
+
+  public HTMLFormElement getForm()
+  {
+    return (HTMLFormElement) getParentElement("form");
+  }
+  
+  public String getAccessKey()
+  {
+    return getHTMLAttribute("accesskey");
+  }
+
+  public void setAccessKey(String accessKey)
+  {
+    setHTMLAttribute("accesskey", accessKey);
+  }
+  
+  public int getCols()
+  {
+    return getIntHTMLAttribute("cols");
+  }
+
+  public void setCols(int cols)
+  {
+    setIntHTMLAttribute("cols", cols);
+  }
+  
+  public boolean getDisabled()
+  {
+    return getBooleanHTMLAttribute("disabled");
+  }
+
+  public void setDisabled(boolean disabled)
+  {
+    setBooleanHTMLAttribute("disabled", disabled);
+  }
+  
+  public String getName()
+  {
+    return getHTMLAttribute("name");
+  }
+
+  public void setName(String name)
+  {
+    setHTMLAttribute("name", name);
+  }
+  
+  public boolean getReadOnly()
+  {
+    return getBooleanHTMLAttribute("readOnly");
+  }
+
+  public void setReadOnly(boolean readOnly)
+  {
+    setBooleanHTMLAttribute("readonly", readOnly);
+  }
+  
+  public int getRows()
+  {
+    return getIntHTMLAttribute("rows");
+  }
+
+  public void setRows(int rows)
+  {
+    setIntHTMLAttribute("rows", rows);
+  }
+  
+  public int getTabIndex()
+  {
+    return getIntHTMLAttribute("tabindex");
+  }
+
+  public void setTabIndex(int tabIndex)
+  {
+    setIntHTMLAttribute("tabindex", tabIndex);
+  }
+  
+  public String getType()
+  {
+    return "textarea";
+  }
+
+  public String getValue()
+  {
+    if (value == null)
+      {
+        value = getDefaultValue();
+      }
+    return value;
+  }
+
+  public void setValue(String value)
+  {
+    this.value = value;
+  }
+
+  public void blur()
+  {
+    dispatchUIEvent("blur");
+  }
+
+  public void focus()
+  {
+    dispatchUIEvent("focus");
+  }
+  
+  public void select()
+  {
+    dispatchUIEvent("select");
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLTitleElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLTitleElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLTitleElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLTitleElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,69 @@
+/* DomHTMLTitleElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLTitleElement;
+
+/**
+ * An HTML 'TITLE' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLTitleElement
+  extends DomHTMLElement
+  implements HTMLTitleElement
+{
+
+  protected DomHTMLTitleElement(DomHTMLDocument owner, String namespaceURI,
+                                String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public String getText()
+  {
+    return getTextContent();
+  }
+
+  public void setText(String text)
+  {
+    setTextContent(text);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/html2/DomHTMLUListElement.java
===================================================================
RCS file: libjava/gnu/xml/dom/html2/DomHTMLUListElement.java
diff -N libjava/gnu/xml/dom/html2/DomHTMLUListElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/dom/html2/DomHTMLUListElement.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,79 @@
+/* DomHTMLUListElement.java -- 
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.dom.html2;
+
+import org.w3c.dom.html2.HTMLUListElement;
+
+/**
+ * An HTML 'UL' element node.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class DomHTMLUListElement
+  extends DomHTMLElement
+  implements HTMLUListElement
+{
+
+  protected DomHTMLUListElement(DomHTMLDocument owner, String namespaceURI,
+                                String name)
+  {
+    super(owner, namespaceURI, name);
+  }
+
+  public boolean getCompact()
+  {
+    return getBooleanHTMLAttribute("compact");
+  }
+
+  public void setCompact(boolean compact)
+  {
+    setBooleanHTMLAttribute("compact", compact);
+  }
+  
+  public String getType()
+  {
+    return getHTMLAttribute("type");
+  }
+
+  public void setType(String type)
+  {
+    setHTMLAttribute("type", type);
+  }
+  
+}
+
Index: libjava/gnu/xml/dom/ls/DomLSException.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/ls/DomLSException.java,v
retrieving revision 1.1
diff -u -r1.1 DomLSException.java
--- libjava/gnu/xml/dom/ls/DomLSException.java	16 Feb 2005 19:25:04 -0000	1.1
+++ libjava/gnu/xml/dom/ls/DomLSException.java	9 Jul 2005 22:09:43 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/ls/DomLSInput.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/ls/DomLSInput.java,v
retrieving revision 1.1
diff -u -r1.1 DomLSInput.java
--- libjava/gnu/xml/dom/ls/DomLSInput.java	2 Feb 2005 00:42:08 -0000	1.1
+++ libjava/gnu/xml/dom/ls/DomLSInput.java	9 Jul 2005 22:09:43 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/ls/DomLSOutput.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/ls/DomLSOutput.java,v
retrieving revision 1.1
diff -u -r1.1 DomLSOutput.java
--- libjava/gnu/xml/dom/ls/DomLSOutput.java	2 Feb 2005 00:42:08 -0000	1.1
+++ libjava/gnu/xml/dom/ls/DomLSOutput.java	9 Jul 2005 22:09:43 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/ls/DomLSParser.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/ls/DomLSParser.java,v
retrieving revision 1.2
diff -u -r1.2 DomLSParser.java
--- libjava/gnu/xml/dom/ls/DomLSParser.java	16 Feb 2005 19:25:04 -0000	1.2
+++ libjava/gnu/xml/dom/ls/DomLSParser.java	9 Jul 2005 22:09:43 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/ls/DomLSSerializer.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/ls/DomLSSerializer.java,v
retrieving revision 1.2
diff -u -r1.2 DomLSSerializer.java
--- libjava/gnu/xml/dom/ls/DomLSSerializer.java	16 Feb 2005 19:25:04 -0000	1.2
+++ libjava/gnu/xml/dom/ls/DomLSSerializer.java	9 Jul 2005 22:09:43 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/ls/FilteredSAXEventSink.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/ls/FilteredSAXEventSink.java,v
retrieving revision 1.1
diff -u -r1.1 FilteredSAXEventSink.java
--- libjava/gnu/xml/dom/ls/FilteredSAXEventSink.java	2 Feb 2005 00:42:08 -0000	1.1
+++ libjava/gnu/xml/dom/ls/FilteredSAXEventSink.java	9 Jul 2005 22:09:43 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/ls/ReaderInputStream.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/ls/ReaderInputStream.java,v
retrieving revision 1.1
diff -u -r1.1 ReaderInputStream.java
--- libjava/gnu/xml/dom/ls/ReaderInputStream.java	2 Feb 2005 00:42:09 -0000	1.1
+++ libjava/gnu/xml/dom/ls/ReaderInputStream.java	9 Jul 2005 22:09:43 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/ls/SAXEventSink.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/ls/SAXEventSink.java,v
retrieving revision 1.1.14.2
diff -u -r1.1.14.2 SAXEventSink.java
--- libjava/gnu/xml/dom/ls/SAXEventSink.java	25 May 2005 20:20:33 -0000	1.1.14.2
+++ libjava/gnu/xml/dom/ls/SAXEventSink.java	9 Jul 2005 22:09:43 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/dom/ls/WriterOutputStream.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/dom/ls/WriterOutputStream.java,v
retrieving revision 1.1
diff -u -r1.1 WriterOutputStream.java
--- libjava/gnu/xml/dom/ls/WriterOutputStream.java	2 Feb 2005 00:42:09 -0000	1.1
+++ libjava/gnu/xml/dom/ls/WriterOutputStream.java	9 Jul 2005 22:09:43 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/libxmlj/dom/GnomeAttr.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeAttr.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeAttr.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeAttr.java	9 Jul 2005 22:09:43 -0000
@@ -0,0 +1,116 @@
+/* GnomeAttr.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import org.w3c.dom.Attr;
+import org.w3c.dom.DOMException;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.TypeInfo;
+
+/**
+ * A DOM attribute node implemented in libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeAttr
+  extends GnomeNode
+  implements Attr
+{
+
+  GnomeAttr(Object id)
+  {
+    super(id);
+  }
+  
+  public String getName()
+  {
+    return getNodeName();
+  }
+  
+  public native boolean getSpecified();
+  
+  public native String getValue();
+  
+  public native void setValue(String value)
+    throws DOMException;
+  
+  public Node getParentNode()
+  {
+    return null;
+  }
+  
+  public Element getOwnerElement()
+  {
+    return (Element) super.getParentNode();
+  }
+  
+  // DOM Level 3 methods
+  
+  public TypeInfo getSchemaTypeInfo()
+  {
+    return new GnomeTypeInfo(id);
+  }
+
+  public boolean isId()
+  {
+    if (xmljIsId())
+      {
+        return true;
+      }
+    GnomeElement element = (GnomeElement) getOwnerElement();
+    return (element != null &&
+            element.userIdAttrs != null &&
+            element.userIdAttrs.contains(this));
+  }
+  
+  private native boolean xmljIsId();
+
+  public String toString()
+  {
+    StringBuffer buffer = new StringBuffer(getClass().getName());
+    buffer.append("[name=");
+    buffer.append(getName());
+    buffer.append(",value=");
+    buffer.append(getValue());
+    buffer.append("]");
+    return buffer.toString();
+  }
+  
+}
+
Index: libjava/gnu/xml/libxmlj/dom/GnomeCDATASection.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeCDATASection.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeCDATASection.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeCDATASection.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,57 @@
+/* GnomeCDATASection.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import org.w3c.dom.CDATASection;
+
+/**
+ * A DOM CDATA section node implemented in libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeCDATASection
+  extends GnomeText
+  implements CDATASection
+{
+
+  GnomeCDATASection(Object id)
+  {
+    super(id);
+  }
+
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeCharacterData.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeCharacterData.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeCharacterData.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeCharacterData.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,117 @@
+/* GnomeCharacterData.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import org.w3c.dom.CharacterData;
+import org.w3c.dom.DOMException;
+
+/**
+ * A DOM character data node implemented in libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+abstract class GnomeCharacterData
+  extends GnomeNode
+  implements CharacterData
+{
+
+  GnomeCharacterData(Object id)
+  {
+    super(id);
+  }
+
+  public String getData()
+    throws DOMException
+  {
+    return getNodeValue();
+  }
+
+  public void setData(String data)
+    throws DOMException
+  {
+    setNodeValue(data);
+  }
+
+  public int getLength()
+  {
+    return getData().length();
+  }
+
+  public String substringData(int offset, int count)
+    throws DOMException
+  {
+    return getData().substring(offset, offset + count);
+  }
+
+  public void appendData(String arg)
+    throws DOMException
+  {
+    setData(getData() + arg);
+  }
+
+  public void insertData(int offset, String arg)
+    throws DOMException
+  {
+    String data = getData();
+    setData(data.substring(0, offset) + arg + data.substring(offset));
+  }
+
+  public void deleteData(int offset, int count)
+    throws DOMException
+  {
+    String data = getData();
+    setData(data.substring(0, offset) + data.substring(offset + count));
+  }
+
+  public void replaceData(int offset, int count, String arg)
+  {
+    String data = getData();
+    setData(data.substring(0, offset) + arg +
+            data.substring(offset + count));
+  }
+
+  public String toString()
+  {
+    StringBuffer buffer = new StringBuffer(getClass().getName());
+    buffer.append("[data=");
+    buffer.append(getData());
+    buffer.append("]");
+    return buffer.toString();
+  }
+
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeComment.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeComment.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeComment.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeComment.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,57 @@
+/* GnomeComment.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import org.w3c.dom.Comment;
+
+/**
+ * A DOM comment node implemented in libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeComment
+  extends GnomeCharacterData
+  implements Comment
+{
+
+  GnomeComment(Object id)
+  {
+    super(id);
+  }
+
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeDOMException.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeDOMException.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeDOMException.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeDOMException.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,98 @@
+/* GnomeDOMException.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import org.w3c.dom.DOMException;
+
+class GnomeDOMException
+  extends DOMException
+{
+
+  GnomeDOMException(short code, String message)
+  {
+    super(code, createMessage(code, message));
+  }
+
+  private static String createMessage(int code, String message)
+  {
+    if (message != null)
+      {
+        return message;
+      }
+    switch (code)
+      {
+      case INDEX_SIZE_ERR:
+        return "INDEX_SIZE_ERR";
+      case DOMSTRING_SIZE_ERR:
+        return "DOMSTRING_SIZE_ERR";
+      case HIERARCHY_REQUEST_ERR:
+        return "HIERARCHY_REQUEST_ERR";
+      case WRONG_DOCUMENT_ERR:
+        return "WRONG_DOCUMENT_ERR";
+      case INVALID_CHARACTER_ERR:
+        return "INVALID_CHARACTER_ERR";
+      case NO_DATA_ALLOWED_ERR:
+        return "NO_DATA_ALLOWED_ERR";
+      case NO_MODIFICATION_ALLOWED_ERR:
+        return "NO_MODIFICATION_ALLOWED_ERR";
+      case NOT_FOUND_ERR:
+        return "NOT_FOUND_ERR";
+      case NOT_SUPPORTED_ERR:
+        return "NOT_SUPPORTED_ERR";
+      case INUSE_ATTRIBUTE_ERR:
+        return "INUSE_ATTRIBUTE_ERR";
+      case INVALID_STATE_ERR:
+        return "INVALID_STATE_ERR";
+      case SYNTAX_ERR:
+        return "SYNTAX_ERR";
+      case INVALID_MODIFICATION_ERR:
+        return "INVALID_MODIFICATION_ERR";
+      case NAMESPACE_ERR:
+        return "NAMESPACE_ERR";
+      case INVALID_ACCESS_ERR:
+        return "INVALID_ACCESS_ERR";
+      case VALIDATION_ERR:
+        return "VALIDATION_ERR";
+      case TYPE_MISMATCH_ERR:
+        return "TYPE_MISMATCH_ERR";
+      default:
+        return null;
+      }
+  }
+  
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeDOMStringList.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeDOMStringList.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeDOMStringList.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeDOMStringList.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,84 @@
+/* GnomeDOMStringList.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import org.w3c.dom.DOMStringList;
+
+/**
+ * Implementation of a string list using an array of strings.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeDOMStringList
+  implements DOMStringList
+{
+
+  final String[] values;
+
+  GnomeDOMStringList(String[] values)
+  {
+    this.values = values;
+  }
+
+  public int getLength()
+  {
+    return values.length;
+  }
+
+  public String item(int index)
+  {
+    if (index < 0 || index >= values.length)
+      {
+        return null;
+      }
+    return values[index];
+  }
+
+  public boolean contains(String value)
+  {
+    for (int i = 0; i < values.length; i++)
+      {
+        if (values[i].equalsIgnoreCase(value))
+          {
+            return true;
+          }
+      }
+    return false;
+  }
+  
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeDocument.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeDocument.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeDocument.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeDocument.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,561 @@
+/* GnomeDocument.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import java.util.Iterator;
+
+import org.w3c.dom.Attr;
+import org.w3c.dom.CDATASection;
+import org.w3c.dom.Comment;
+import org.w3c.dom.Document;
+import org.w3c.dom.DocumentFragment;
+import org.w3c.dom.DocumentType;
+import org.w3c.dom.DOMConfiguration;
+import org.w3c.dom.DOMErrorHandler;
+import org.w3c.dom.DOMException;
+import org.w3c.dom.DOMImplementation;
+import org.w3c.dom.DOMStringList;
+import org.w3c.dom.Element;
+import org.w3c.dom.EntityReference;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+import org.w3c.dom.ProcessingInstruction;
+import org.w3c.dom.Text;
+import org.w3c.dom.UserDataHandler;
+import org.w3c.dom.traversal.DocumentTraversal;
+import org.w3c.dom.traversal.NodeFilter;
+import org.w3c.dom.traversal.NodeIterator;
+import org.w3c.dom.traversal.TreeWalker;
+import org.w3c.dom.xpath.XPathEvaluator;
+import org.w3c.dom.xpath.XPathException;
+import org.w3c.dom.xpath.XPathExpression;
+import org.w3c.dom.xpath.XPathNSResolver;
+
+import gnu.xml.dom.DomNodeIterator;
+
+/**
+ * A DOM document node implemented in libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class GnomeDocument
+  extends GnomeNode
+  implements Document, DOMConfiguration, XPathEvaluator, DocumentTraversal
+{
+
+  DOMImplementation dom;
+
+  /**
+   * Not currently used.
+   */
+  boolean strictErrorChecking;
+
+  /* DOMConfiguration */
+  boolean canonicalForm = false;
+  boolean cdataSections = true;
+  boolean checkCharacterNormalization = false;
+  boolean comments = true;
+  boolean datatypeNormalization = false;
+  boolean elementContentWhitespace = true;
+  boolean entities = true;
+  DOMErrorHandler errorHandler;
+  boolean namespaces = true;
+  boolean namespaceDeclarations = true;
+  boolean normalizeCharacters = false;
+  boolean splitCdataSections = true;
+  boolean validate = false;
+  boolean validateIfSchema = false;
+  boolean wellFormed = true;
+  
+  GnomeDocument(Object id)
+  {
+    super(id);
+    strictErrorChecking = true;
+  }
+  
+  protected void finalize()
+  {
+    free(id);
+  }
+  
+  private native void free(Object id);
+
+  public native DocumentType getDoctype();
+
+  public DOMImplementation getImplementation()
+  {
+    return dom;
+  }
+
+  public native Element getDocumentElement();
+
+  public Element createElement(String tagName)
+    throws DOMException
+  {
+    return createElementNS(null, tagName);
+  }
+
+  public native DocumentType createDocumentType(String name, String publicId,
+                                                String systemId);
+
+  public native DocumentFragment createDocumentFragment();
+
+  public native Text createTextNode(String data);
+
+  public native Comment createComment(String data);
+
+  public native CDATASection createCDATASection(String data)
+    throws DOMException;
+
+  public native ProcessingInstruction createProcessingInstruction(String target,
+                                                                  String data)
+    throws DOMException;
+
+  public Attr createAttribute(String name)
+    throws DOMException
+  {
+    return createAttributeNS(null, name);
+  }
+
+  public native EntityReference createEntityReference(String name)
+    throws DOMException;
+
+  public native NodeList getElementsByTagName(String tagName);
+
+  public Node importNode(Node importedNode, boolean deep)
+    throws DOMException
+  {
+    Node ret = xmljImportNode(importedNode, deep);
+    if (importedNode instanceof GnomeNode)
+      {
+        ((GnomeNode) importedNode)
+          .notifyUserDataHandlers(UserDataHandler.NODE_IMPORTED,
+                                  importedNode, ret);
+      }
+    return ret;
+  }
+
+  private native Node xmljImportNode(Node importedNode, boolean deep)
+    throws DOMException;
+
+  public native Element createElementNS(String namespaceURI, String
+                                        qualifiedName)
+    throws DOMException;
+  
+  public native Attr createAttributeNS(String namespaceURI, String
+                                       qualifiedName)
+    throws DOMException;
+
+  public native NodeList getElementsByTagNameNS(String namespaceURI,
+      String localName);
+
+  public Element getElementById(String elementId)
+  {
+    Element element = xmljGetElementById(elementId);
+    if (element == null)
+      {
+        TreeWalker walker = createTreeWalker(this, NodeFilter.SHOW_ELEMENT,
+                                             null, false);
+        for (Node node = walker.nextNode(); node != null;
+             node = walker.nextNode())
+          {
+            GnomeElement e = (GnomeElement) node;
+            if (e.userIdAttrs != null)
+              {
+                for (Iterator i = e.userIdAttrs.iterator(); i.hasNext(); )
+                  {
+                    Attr attr = (Attr) i.next();
+                    if (attr.getNodeValue().equals(elementId))
+                      {
+                        return e;
+                      }
+                  }
+              }
+          }
+      }
+    return element;
+  }
+  
+  private native Element xmljGetElementById(String elementId);
+
+  // DOM Level 3 methods
+
+  public native String getInputEncoding();
+
+  public native String getXmlEncoding();
+
+  public native boolean getXmlStandalone();
+
+  public native void setXmlStandalone(boolean xmlStandalone);
+
+  public native String getXmlVersion();
+
+  public native void setXmlVersion(String xmlVersion);
+
+  public boolean getStrictErrorChecking()
+  {
+    return strictErrorChecking;
+  }
+
+  public void setStrictErrorChecking(boolean strictErrorChecking)
+  {
+    this.strictErrorChecking = strictErrorChecking;
+  }
+  
+  public native String getDocumentURI();
+
+  public native void setDocumentURI(String documentURI);
+
+  public Node adoptNode(Node source)
+    throws DOMException
+  {
+    if (source == null || !(source instanceof GnomeNode))
+      {
+        return null;
+      }
+    Node ret = xmljAdoptNode(source);
+    if (source instanceof GnomeNode)
+      {
+        ((GnomeNode) source).
+          notifyUserDataHandlers(UserDataHandler.NODE_ADOPTED,
+                                 source, ret);
+      }
+    return ret;
+  }
+
+  private native Node xmljAdoptNode(Node source)
+    throws DOMException;
+
+  public DOMConfiguration getDomConfig()
+  {
+    return this;
+  }
+
+  public void normalizeDocument()
+  {
+    normalize();
+  }
+
+  public native Node renameNode(Node n, String namespaceURI,
+                                String qualifiedName);
+
+  // -- DOMConfiguration methods --
+
+  public void setParameter(String name, Object value)
+    throws DOMException
+  {
+    name = name.toLowerCase();
+    if ("canonical-form".equals(name))
+      {
+        /* optional
+        canonicalForm = getBooleanValue(value);*/
+      }
+    else if ("cdata-sections".equals(name))
+      {
+        cdataSections = getBooleanValue(value);
+      }
+    else if ("check-character-normalization".equals(name))
+      {
+        /* optional
+        checkCharacterNormalization = getBooleanValue(value);*/
+      }
+    else if ("comments".equals(name))
+      {
+        comments = getBooleanValue(value);
+      }
+    else if ("datatype-normalization".equals(name))
+      {
+        /* optional
+        datatypeNormalization = getBooleanValue(value);*/
+      }
+    else if ("element-content-whitespace".equals(name))
+      {
+        /* optional
+        elementContentWhitespace = getBooleanValue(value);*/
+      }
+    else if ("entities".equals(name))
+      {
+        entities = getBooleanValue(value);
+      }
+    else if ("error-handler".equals(name))
+      {
+        errorHandler = (DOMErrorHandler) value;
+      }
+    else if ("infoset".equals(name))
+      {
+        if (getBooleanValue(value))
+          {
+            validateIfSchema = false;
+            entities = false;
+            datatypeNormalization = false;
+            cdataSections = false;
+            namespaceDeclarations = true;
+            wellFormed = true;
+            elementContentWhitespace = true;
+            comments = true;
+            namespaces = true;
+          }
+      }
+    else if ("namespaces".equals(name))
+      {
+        /* optional
+        namespaces = getBooleanValue(value);*/
+      }
+    else if ("namespace-declarations".equals(name))
+      {
+        namespaceDeclarations = getBooleanValue(value);
+      }
+    else if ("normalize-characters".equals(name))
+      {
+        /* optional
+        normalizeCharacters = getBooleanValue(value);*/
+      }
+    else if ("split-cdata-sections".equals(name))
+      {
+        splitCdataSections = getBooleanValue(value);
+      }
+    else if ("validate".equals(name))
+      {
+        /* optional
+        validate = getBooleanValue(value);*/
+      }
+    else if ("validate-if-schema".equals(name))
+      {
+        /* optional
+        validateIfSchema = getBooleanValue(value);*/
+      }
+    else if ("well-formed".equals(name))
+      {
+        /* optional
+        wellFormed = getBooleanValue(value);*/
+      }
+    else
+      {
+        throw new GnomeDOMException(DOMException.NOT_FOUND_ERR, name);
+      }
+  }
+
+  public Object getParameter(String name)
+    throws DOMException
+  {
+    name = name.toLowerCase();
+    if ("canonical-form".equals(name))
+      {
+        return new Boolean(canonicalForm);
+      }
+    else if ("cdata-sections".equals(name))
+      {
+        return new Boolean(cdataSections);
+      }
+    else if ("check-character-normalization".equals(name))
+      {
+        return new Boolean(checkCharacterNormalization);
+      }
+    else if ("comments".equals(name))
+      {
+        return new Boolean(comments);
+      }
+    else if ("datatype-normalization".equals(name))
+      {
+        return new Boolean(datatypeNormalization);
+      }
+    else if ("element-content-whitespace".equals(name))
+      {
+        return new Boolean(elementContentWhitespace);
+      }
+    else if ("entities".equals(name))
+      {
+        return new Boolean(entities);
+      }
+    else if ("error-handler".equals(name))
+      {
+        return errorHandler;
+      }
+    else if ("infoset".equals(name))
+      {
+        return new Boolean(!validateIfSchema &&
+                           !entities &&
+                           !datatypeNormalization &&
+                           !cdataSections &&
+                           namespaceDeclarations &&
+                           wellFormed &&
+                           elementContentWhitespace &&
+                           comments &&
+                           namespaces);
+      }
+    else if ("namespaces".equals(name))
+      {
+        return new Boolean(namespaces);
+      }
+    else if ("namespace-declarations".equals(name))
+      {
+        return new Boolean(namespaceDeclarations);
+      }
+    else if ("normalize-characters".equals(name))
+      {
+        return new Boolean(normalizeCharacters);
+      }
+    else if ("split-cdata-sections".equals(name))
+      {
+        return new Boolean(splitCdataSections);
+      }
+    else if ("validate".equals(name))
+      {
+        return new Boolean(validate);
+      }
+    else if ("validate-if-schema".equals(name))
+      {
+        return new Boolean(validateIfSchema);
+      }
+    else if ("well-formed".equals(name))
+      {
+        return new Boolean(wellFormed);
+      }
+    else
+      {
+        throw new GnomeDOMException(DOMException.NOT_FOUND_ERR, name);
+      }
+  }
+
+  public boolean canSetParameter(String name, Object value)
+  {
+    name = name.toLowerCase();
+    if ("error-handler".equals(name))
+      {
+        return (value == null || value instanceof DOMErrorHandler);
+      }
+    return ("cdata-sections".equals(name) ||
+            "comments".equals(name) ||
+            "entities".equals(name) ||
+            "namespace-declarations".equals(name) ||
+            "split-cdata-sections".equals(name));
+  }
+  
+  public DOMStringList getParameterNames()
+  {
+    String[] names = new String[] {
+      "canonical-form",
+      "cdata-sections",
+      "check-character-normalization",
+      "comments",
+      "datatype-normalization",
+      "element-content-whitespace",
+      "entities",
+      "error-handler",
+      "infoset",
+      "namespaces",
+      "namespace-declarations",
+      "normalize-characters",
+      "split-cdata-sections",
+      "validate",
+      "validate-if-schema",
+      "well-formed"
+    };
+    return new GnomeDOMStringList(names);
+  }
+
+  private boolean getBooleanValue(Object value)
+  {
+    if (value instanceof Boolean)
+      {
+        return ((Boolean) value).booleanValue();
+      }
+    else if (value instanceof String)
+      {
+        return new Boolean ((String) value).booleanValue();
+      }
+    return false;
+  }
+
+  // -- XPathEvaluator methods --
+
+  public XPathExpression createExpression(String expression,
+                                          XPathNSResolver resolver)
+    throws XPathException, DOMException
+  {
+    return new GnomeXPathExpression(this, expression, resolver);
+  }
+
+  public XPathNSResolver createNSResolver(Node nodeResolver)
+  {
+    return new GnomeXPathNSResolver(nodeResolver);
+  }
+
+  public native Object evaluate(String expression,
+                                Node contextNode,
+                                XPathNSResolver resolver,
+                                short type,
+                                Object result)
+    throws XPathException, DOMException;
+
+  // -- DocumentTraversal methods --
+
+  public NodeIterator createNodeIterator(Node root,
+                                         int whatToShow,
+                                         NodeFilter filter,
+                                         boolean entityReferenceExpansion)
+    throws DOMException
+  {
+    return new DomNodeIterator(root, whatToShow, filter,
+                               entityReferenceExpansion, false);
+  }
+
+  public TreeWalker createTreeWalker(Node root,
+                                    int whatToShow,
+                                    NodeFilter filter,
+                                    boolean entityReferenceExpansion)
+    throws DOMException
+  {
+    return new DomNodeIterator(root, whatToShow, filter,
+                               entityReferenceExpansion, true);
+  }
+
+  // -- Debugging --
+  
+  public String toString()
+  {
+    StringBuffer buffer = new StringBuffer(getClass().getName());
+    buffer.append("[version=");
+    buffer.append(getXmlVersion());
+    buffer.append(",standalone=");
+    buffer.append(getXmlStandalone());
+    buffer.append("]");
+    return buffer.toString();
+  }
+
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeDocumentBuilder.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeDocumentBuilder.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeDocumentBuilder.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeDocumentBuilder.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,326 @@
+/* GnomeDocumentBuilder.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import java.io.InputStream;
+import java.io.IOException;
+import java.net.URL;
+import javax.xml.parsers.DocumentBuilder;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.DocumentType;
+import org.w3c.dom.DOMImplementation;
+import org.xml.sax.EntityResolver;
+import org.xml.sax.ErrorHandler;
+import org.xml.sax.InputSource;
+import org.xml.sax.Locator;
+import org.xml.sax.SAXException;
+import org.xml.sax.SAXParseException;
+
+import gnu.xml.libxmlj.util.NamedInputStream;
+import gnu.xml.libxmlj.util.StandaloneDocumentType;
+import gnu.xml.libxmlj.util.StandaloneLocator;
+import gnu.xml.libxmlj.util.XMLJ;
+
+/**
+ * A JAXP DOM implementation that uses Gnome libxml2 as the underlying
+ * parser and node representation.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class GnomeDocumentBuilder
+  extends DocumentBuilder
+  implements DOMImplementation
+{
+
+  static
+  {
+    XMLJ.init();
+  }
+
+  // -- DocumentBuilder --
+
+  private boolean validate;
+  private boolean coalesce;
+  private boolean expandEntities;
+  private EntityResolver entityResolver;
+  private ErrorHandler errorHandler;
+  private boolean seenFatalError;
+
+  /**
+   * Constructs a new validating document builder.
+   */
+  public GnomeDocumentBuilder()
+  {
+    this(true, false, false);
+  }
+  
+  /**
+   * Constructs a new document builder.
+   * @param validate whether to validate during parsing
+   * @param coalesce whether to merge CDATA as text nodes
+   * @param expandEntities whether to expand entity references
+   */
+  public GnomeDocumentBuilder(boolean validate,
+                              boolean coalesce,
+                              boolean expandEntities)
+  {
+    this.validate = validate;
+    this.coalesce = coalesce;
+    this.expandEntities = expandEntities;
+  }
+
+  public DOMImplementation getDOMImplementation()
+  {
+    return this;
+  }
+
+  public boolean isNamespaceAware()
+  {
+    return true;
+  }
+
+  public boolean isValidating()
+  {
+    return validate;
+  }
+
+  public Document newDocument()
+  {
+    return createDocument(null, null, null);
+  }
+
+  public Document parse(InputSource input)
+    throws SAXException, IOException
+  {
+    NamedInputStream in = XMLJ.getInputStream(input);
+    byte[] detectBuffer = in.getDetectBuffer();
+    String publicId = input.getPublicId();
+    String systemId = input.getSystemId();
+    String base = XMLJ.getBaseURI(systemId);
+    // Handle zero-length document
+    if (detectBuffer == null)
+      {
+        throw new SAXParseException("No document element", publicId,
+                                    systemId, 0, 0);
+      }
+    seenFatalError = false;
+    return parseStream(in,
+                       detectBuffer,
+                       publicId,
+                       systemId,
+                       base,
+                       validate,
+                       coalesce,
+                       expandEntities,
+                       true, //entityResolver != null,
+                       errorHandler != null);
+  }
+  
+  private native Document parseStream(InputStream in,
+                                      byte[] detectBuffer,
+                                      String publicId,
+                                      String systemId,
+                                      String base,
+                                      boolean validate,
+                                      boolean coalesce,
+                                      boolean expandEntities,
+                                      boolean entityResolver,
+                                      boolean errorHandler);
+  
+  public void setEntityResolver(EntityResolver resolver)
+  {
+    entityResolver = resolver;
+  }
+
+  public void setErrorHandler(ErrorHandler handler)
+  {
+    errorHandler = handler;
+  }
+
+  // -- DOMImplementation --
+
+  public boolean hasFeature(String name, String version)
+  {
+    if (name.length() == 0)
+      {
+        return false;
+      }
+    name = name.toLowerCase();
+    if (name.charAt(0) == '+')
+      {
+        name = name.substring(1);
+      }
+    
+    if ("xml".equals(name) || "core".equals(name))
+      {
+        return (version == null ||
+                "".equals(version) ||
+                "1.0".equals(version) ||
+                "2.0".equals(version) ||
+                "3.0".equals(version));
+      
+      }
+    else if ("ls".equals(name) || "ls-async".equals(name))
+      {
+        // TODO
+        /*
+        return (version == null ||
+                "".equals(version) ||
+                "3.0".equals(version));
+                */
+        return false;
+      }
+    else if ("traversal".equals(name))
+      {
+        return (version == null ||
+                "".equals(version) ||
+		"2.0".equals(version));
+      }
+    else if ("xpath".equals(name))
+      {
+        return (version == null ||
+                "".equals(version) ||
+                "3.0".equals(version));
+      }
+    return false;
+  }
+  
+  // DOM Level 3
+
+  public Object getFeature(String feature, String version)
+  {
+    if (hasFeature(feature, version))
+      {
+        return this;
+      }
+    return null;
+  }
+  
+  public native Document createDocument(String namespaceURI,
+                                        String qualifiedName,
+                                        DocumentType doctype);
+  
+  public DocumentType createDocumentType(String qualifiedName,
+                                         String publicId,
+                                         String systemId)
+  {
+    return new StandaloneDocumentType(qualifiedName, publicId, systemId);
+  }
+  
+  // Callback hooks from JNI
+  
+  private void setDocumentLocator(Object ctx, Object loc)
+  {
+    // ignore
+  }
+  
+  private InputStream resolveEntity(String publicId, String systemId,
+                                    String base)
+    throws SAXException, IOException
+  {
+    String url = XMLJ.getAbsoluteURI(base, systemId);
+    InputStream in = null;
+    if (entityResolver != null)
+      {
+        InputSource source = entityResolver.resolveEntity(publicId, url);
+        if (source != null)
+          {
+            in = XMLJ.getInputStream(source);
+          }
+      }
+    if (in == null)
+      {
+        in  = XMLJ.getInputStream(new URL(url));
+      }
+    return in;
+  }
+  
+  private void warning(String message,
+                       int lineNumber,
+                       int columnNumber,
+                       String publicId,
+                       String systemId)
+    throws SAXException
+  {
+    if (!seenFatalError && errorHandler != null)
+      {
+        Locator l = new StandaloneLocator(lineNumber,
+                                          columnNumber,
+                                          publicId,
+                                          systemId);
+        errorHandler.warning(new SAXParseException(message, l));
+      }
+  }
+
+  private void error(String message,
+                     int lineNumber,
+                     int columnNumber,
+                     String publicId,
+                     String systemId)
+    throws SAXException
+  {
+    if (!seenFatalError && errorHandler != null)
+      {
+        Locator l = new StandaloneLocator(lineNumber,
+                                          columnNumber,
+                                          publicId,
+                                          systemId);
+        errorHandler.error(new SAXParseException(message, l));
+      }
+  }
+
+  private void fatalError(String message,
+                          int lineNumber,
+                          int columnNumber,
+                          String publicId,
+                          String systemId)
+    throws SAXException
+  {
+    if (!seenFatalError && errorHandler != null)
+      {
+        seenFatalError = true;
+        Locator l = new StandaloneLocator(lineNumber,
+                                          columnNumber,
+                                          publicId,
+                                          systemId);
+        errorHandler.fatalError(new SAXParseException(message, l));
+      }
+  }
+
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeDocumentBuilderFactory.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeDocumentBuilderFactory.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeDocumentBuilderFactory.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeDocumentBuilderFactory.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,94 @@
+/* GnomeDocumentBuilderFactory.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.parsers.ParserConfigurationException;
+
+/**
+ * Factory for JAXP document builders using the libxml2 implementation.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class GnomeDocumentBuilderFactory
+extends DocumentBuilderFactory
+{
+
+  public GnomeDocumentBuilderFactory ()
+  {
+    setNamespaceAware (true);
+  }
+
+  public Object getAttribute (String name)
+  {
+    // TODO
+    return null;
+  }
+
+  public DocumentBuilder newDocumentBuilder ()
+    throws ParserConfigurationException
+  {
+    /*
+    if (!isNamespaceAware ())
+      {
+        String msg = "Parser must be namespace-aware";
+        throw new ParserConfigurationException (msg);
+      }
+    if (isIgnoringComments ())
+      {
+        String msg = "Ignoring comments not supported";
+        throw new ParserConfigurationException (msg);
+      }
+    if (isIgnoringElementContentWhitespace ())
+      {
+        String msg = "Ignoring element content whitespace not supported";
+        throw new ParserConfigurationException (msg);
+      }
+      */
+    return new GnomeDocumentBuilder (isValidating (),
+                                     isCoalescing (),
+                                     isExpandEntityReferences ());
+  }
+
+  public void setAttribute (String name, Object value)
+  {
+    // TODO
+  }
+  
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeDocumentFragment.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeDocumentFragment.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeDocumentFragment.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeDocumentFragment.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,57 @@
+/* GnomeDocumentFragment.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import org.w3c.dom.DocumentFragment;
+
+/**
+ * A DOM document fragment node implemented in libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeDocumentFragment
+extends GnomeNode
+implements DocumentFragment
+{
+
+  GnomeDocumentFragment (Object id)
+  {
+    super (id);
+  }
+
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeDocumentType.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeDocumentType.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeDocumentType.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeDocumentType.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,96 @@
+/* GnomeDocumentType.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import org.w3c.dom.DocumentType;
+import org.w3c.dom.NamedNodeMap;
+
+/**
+ * A DOM document type node implemented in libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeDocumentType
+extends GnomeNode
+implements DocumentType
+{
+
+  GnomeDocumentType (Object id)
+  {
+    super (id);
+  }
+  
+  public String getName ()
+  {
+    return getNodeName ();
+  }
+
+  public NamedNodeMap getEntities ()
+  {
+    return new GnomeNamedNodeMap (id, 1);
+  }
+
+  public NamedNodeMap getNotations ()
+  {
+    return new GnomeNamedNodeMap (id, 2);
+  }
+
+  public native String getPublicId ();
+
+  public native String getSystemId ();
+
+  public native String getInternalSubset ();
+
+  public String toString ()
+  {
+    String publicId = getPublicId ();
+    StringBuffer buffer = new StringBuffer (getClass ().getName ());
+    buffer.append ("[");
+    if (publicId != null)
+      {
+        buffer.append ("publicId=");
+        buffer.append (publicId);
+        buffer.append (",");
+      }
+    buffer.append ("systemId=");
+    buffer.append (getSystemId ());
+    buffer.append ("]");
+    return buffer.toString ();
+  }
+
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeElement.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeElement.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeElement.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,182 @@
+/* GnomeElement.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import java.util.HashSet;
+import java.util.Set;
+
+import org.w3c.dom.Attr;
+import org.w3c.dom.DOMException;
+import org.w3c.dom.Element;
+import org.w3c.dom.NodeList;
+import org.w3c.dom.TypeInfo;
+
+/**
+ * A DOM element node implemented in libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeElement
+  extends GnomeNode
+  implements Element
+{
+
+  /**
+   * User-defined ID attributes.
+   */
+  Set userIdAttrs;
+
+  GnomeElement(Object id)
+  {
+    super(id);
+  }
+  
+  public String getTagName()
+  {
+    return getNodeName();
+  }
+
+  public native String getAttribute(String name);
+
+  public native void setAttribute(String name, String value)
+    throws DOMException;
+  
+  public void removeAttribute(String name)
+    throws DOMException
+  {
+    Attr attr = getAttributeNode(name);
+    if (attr != null)
+      {
+        removeAttributeNode(attr);
+      }
+  }
+
+  public native Attr getAttributeNode(String name);
+  
+  public native Attr setAttributeNode(Attr newAttr)
+    throws DOMException;
+
+  public native Attr removeAttributeNode(Attr oldAttr)
+    throws DOMException;
+
+  public native NodeList getElementsByTagName(String name);
+  
+  public native String getAttributeNS(String namespaceURI, String localName);
+  
+  public native void setAttributeNS(String namespaceURI, String
+                                    qualifiedName, String value)
+    throws DOMException;
+
+  public void removeAttributeNS(String namespaceURI, String localName)
+    throws DOMException
+  {
+    Attr attr = getAttributeNodeNS(namespaceURI, localName);
+    if (attr != null)
+      {
+        removeAttributeNode(attr);
+      }
+  }
+  
+  public native Attr getAttributeNodeNS(String namespaceURI,
+                                        String localName);
+
+  public native Attr setAttributeNodeNS(Attr newAttr)
+    throws DOMException;
+
+  public native NodeList getElementsByTagNameNS(String namespaceURI,
+                                                String localName);
+  
+  public native boolean hasAttribute(String name);
+
+  public native boolean hasAttributeNS(String namespaceURI,
+                                       String localName);
+
+  // DOM Level 3 methods
+
+  public TypeInfo getSchemaTypeInfo()
+  {
+    return new GnomeTypeInfo(id);
+  }
+
+  public void setIdAttribute(String name, boolean isId)
+  {
+    Attr attr = getAttributeNode(name);
+    setIdAttributeNode(attr, isId);
+  }
+
+  public void setIdAttributeNode(Attr attr, boolean isId)
+  {
+    if (attr == null)// FIXME || !attr.getOwnerElement().equals(this))
+      {
+        throw new GnomeDOMException(DOMException.NOT_FOUND_ERR, null);
+      }
+    if (isId)
+      {
+        if (userIdAttrs == null)
+          {
+            userIdAttrs = new HashSet();
+          }
+        userIdAttrs.add(attr);
+      }
+    else if (userIdAttrs != null)
+      {
+        userIdAttrs.remove(attr);
+        if (userIdAttrs.isEmpty())
+          {
+            userIdAttrs = null;
+          }
+      }
+  }
+
+  public void setIdAttributeNS(String namespaceURI, String localName,
+                               boolean isId)
+  {
+    Attr attr = getAttributeNodeNS(namespaceURI, localName);
+    setIdAttributeNode(attr, isId);
+  }
+
+  public String toString()
+  {
+    StringBuffer buffer = new StringBuffer(getClass().getName());
+    buffer.append("[tagName=");
+    buffer.append(getTagName());
+    buffer.append("]");
+    return buffer.toString();
+  }
+
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeEntity.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeEntity.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeEntity.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeEntity.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,102 @@
+/* GnomeEntity.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import org.w3c.dom.Entity;
+
+/**
+ * A DOM entity node implemented in libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeEntity
+extends GnomeNode
+implements Entity
+{
+
+  GnomeEntity (Object id)
+  {
+    super (id);
+  }
+
+  public native String getPublicId ();
+
+  public native String getSystemId ();
+
+  public native String getNotationName ();
+
+  // DOM Level 3 methods
+  
+  public String getInputEncoding ()
+  {
+    // TODO
+    return null;    
+  }
+  
+  public String getXmlEncoding ()
+  {
+    // TODO
+    return null;
+  }
+  
+  public String getXmlVersion ()
+  {
+    // TODO
+    return null;
+  }
+  
+  public String toString ()
+  {
+    String publicId = getPublicId ();
+    StringBuffer buffer = new StringBuffer (getClass ().getName ());
+    buffer.append ("[");
+    if (publicId != null)
+      {
+        buffer.append ("publicId=");
+        buffer.append (publicId);
+        buffer.append (",");
+      }
+    buffer.append ("systemId=");
+    buffer.append (getSystemId ());
+    buffer.append (",notationName=");
+    buffer.append (getNotationName ());
+    buffer.append ("]");
+    return buffer.toString ();
+  }
+
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeEntityReference.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeEntityReference.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeEntityReference.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeEntityReference.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,57 @@
+/* GnomeEntityReference.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import org.w3c.dom.EntityReference;
+
+/**
+ * A DOM entity reference node implemented in libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeEntityReference
+extends GnomeNode
+implements EntityReference
+{
+
+  GnomeEntityReference (Object id)
+  {
+    super (id);
+  }
+
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeNamedNodeMap.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeNamedNodeMap.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeNamedNodeMap.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeNamedNodeMap.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,92 @@
+/* GnomeNamedNodeMap.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import org.w3c.dom.DOMException;
+import org.w3c.dom.NamedNodeMap;
+import org.w3c.dom.Node;
+
+/**
+ * A DOM named node map implemented in libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeNamedNodeMap
+implements NamedNodeMap
+{
+
+  /**
+   * The node id.
+   */
+  private final Object id;
+
+  /**
+   * The map type.
+   * 0=attributes
+   * 1=entities
+   * 2=notations
+   */
+  private final int type;
+
+  GnomeNamedNodeMap (Object id, int type)
+  {
+    this.id = id;
+    this.type = type;
+  }
+
+  public native Node getNamedItem (String name);
+
+  public native Node setNamedItem (Node arg)
+    throws DOMException;
+
+  public native Node removeNamedItem (String name)
+    throws DOMException;
+
+  public native Node item (int index);
+  
+  public native int getLength ();
+
+  public native Node getNamedItemNS (String namespaceURI, String localName);
+
+  public native Node setNamedItemNS (Node arg)
+    throws DOMException;
+
+  public native Node removeNamedItemNS (String namespaceURI,
+                                        String localName);
+  
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeNode.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeNode.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeNode.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeNode.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,499 @@
+/* GnomeNode.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.DocumentType;
+import org.w3c.dom.DOMException;
+import org.w3c.dom.NamedNodeMap;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+import org.w3c.dom.Text;
+import org.w3c.dom.UserDataHandler;
+
+import gnu.xml.libxmlj.util.StandaloneDocumentType;
+
+/**
+ * A DOM node implemented in libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeNode
+  implements Node, Comparable
+{
+
+  /**
+   * Maps document pointers to a map of node pointers to node instances.
+   */
+  static Map instances;
+
+  /**
+   * Retrieves the node instance for the specified node pointer.
+   * This creates a new instance and adds it to the cache if required.
+   * @param doc the document pointer
+   * @param node the node pointer
+   * @param type the node type
+   */
+  static GnomeNode newInstance(final Object doc, final Object node,
+                               final int type)
+  {
+    if (doc == null)
+      {
+        throw new NullPointerException("doc");
+      }
+    if (node == null)
+      {
+        throw new NullPointerException("node");
+      }
+    if (instances == null)
+      {
+        instances = new HashMap();
+      }
+    Map docNodes = (Map) instances.get(doc);
+    if (docNodes == null)
+      {
+        docNodes = new HashMap(1024); // TODO review optimal initial capacity
+        instances.put(doc, docNodes);
+      }
+    GnomeNode nodeInstance = (GnomeNode) docNodes.get(node);
+    if (nodeInstance != null)
+      {
+        return nodeInstance; // Return cached version
+      }
+    switch (type)
+      {
+      case ELEMENT_NODE:
+        nodeInstance = new GnomeElement(node);
+        break;
+      case ATTRIBUTE_NODE:
+        nodeInstance = new GnomeAttr(node);
+        break;
+      case TEXT_NODE:
+        nodeInstance = new GnomeText(node);
+        break;
+      case CDATA_SECTION_NODE:
+        nodeInstance = new GnomeCDATASection(node);
+        break;
+      case ENTITY_REFERENCE_NODE:
+        nodeInstance = new GnomeEntityReference(node);
+        break;
+      case ENTITY_NODE:
+        nodeInstance = new GnomeEntity(node);
+        break;
+      case PROCESSING_INSTRUCTION_NODE:
+        nodeInstance = new GnomeProcessingInstruction(node);
+        break;
+      case COMMENT_NODE:
+        nodeInstance = new GnomeComment(node);
+        break;
+      case DOCUMENT_NODE:
+        nodeInstance = new GnomeDocument(node);
+        break;
+      case DOCUMENT_TYPE_NODE:
+        nodeInstance = new GnomeDocumentType(node);
+        break;
+      case DOCUMENT_FRAGMENT_NODE:
+        nodeInstance = new GnomeDocumentFragment(node);
+        break;
+      case NOTATION_NODE:
+        nodeInstance = new GnomeNotation(node);
+        break;
+      default:
+        throw new IllegalArgumentException("Unknown node type: " + type);
+      }
+    docNodes.put(node, nodeInstance);
+    return nodeInstance;
+  }
+  
+  /**
+   * Frees the specified document.
+   * This removes all its nodes from the cache.
+   */
+  static void freeDocument(final Object doc)
+  {
+    if (instances == null || doc == null)
+      {
+        return;
+      }
+    instances.remove(doc);
+    //System.out.println("Freed "+instances.remove(doc));
+  }
+  
+  /**
+   * xmlNodePtr
+   */
+  final Object id;
+
+  Map userData;
+  Map userDataHandlers;
+
+  GnomeNode(final Object id)
+  {
+    this.id = id;
+  }
+
+  public native String getNodeName();
+
+  public native String getNodeValue()
+    throws DOMException;
+
+  public native void setNodeValue(String nodeValue)
+    throws DOMException;
+
+  public native short getNodeType();
+
+  public native Node getParentNode();
+
+  public NodeList getChildNodes()
+  {
+    return new GnomeNodeList(id);
+  }
+
+  public native Node getFirstChild();
+
+  public native Node getLastChild();
+
+  public native Node getPreviousSibling();
+
+  public native Node getNextSibling();
+
+  public NamedNodeMap getAttributes()
+  {
+    return new GnomeNamedNodeMap(id, 0);
+  }
+
+  public native Document getOwnerDocument();
+
+  public Node insertBefore(Node newChild, Node refChild)
+    throws DOMException
+  {
+    if (newChild instanceof StandaloneDocumentType)
+      {
+        DocumentType dt = (DocumentType) newChild;
+        newChild = ((GnomeDocument) getOwnerDocument())
+          .createDocumentType(dt.getName(), dt.getPublicId(),
+                              dt.getSystemId());
+      }
+    if (newChild == null)
+      {
+        throw new GnomeDOMException(DOMException.NOT_FOUND_ERR, null);
+      }
+    if (!(newChild instanceof GnomeNode))
+      {
+        throw new GnomeDOMException(DOMException.WRONG_DOCUMENT_ERR, null);
+      }
+    if (refChild == null || !(refChild instanceof GnomeNode))
+      {
+        throw new GnomeDOMException(DOMException.NOT_FOUND_ERR, null);
+      }
+    return xmljInsertBefore(newChild, refChild);
+  }
+
+  private native Node xmljInsertBefore(Node newChild, Node refChild)
+    throws DOMException;
+
+  public Node replaceChild(Node newChild, Node oldChild)
+    throws DOMException
+  {
+    if (newChild instanceof StandaloneDocumentType)
+      {
+        DocumentType dt = (DocumentType) newChild;
+        newChild = ((GnomeDocument) getOwnerDocument())
+          .createDocumentType(dt.getName(), dt.getPublicId(),
+                              dt.getSystemId());
+      }
+    if (newChild == null)
+      {
+        throw new GnomeDOMException(DOMException.NOT_FOUND_ERR, null);
+      }
+    if (!(newChild instanceof GnomeNode))
+      {
+        throw new GnomeDOMException(DOMException.WRONG_DOCUMENT_ERR, newChild.toString());
+      }
+    if (oldChild == null || !(oldChild instanceof GnomeNode))
+      {
+        throw new GnomeDOMException(DOMException.NOT_FOUND_ERR, null);
+      }
+    return xmljReplaceChild(newChild, oldChild);
+  }
+
+  private native Node xmljReplaceChild(Node newChild, Node oldChild)
+    throws DOMException;
+
+  public Node removeChild(Node oldChild)
+    throws DOMException
+  {
+    if (!(oldChild instanceof GnomeNode))
+      {
+        throw new GnomeDOMException(DOMException.WRONG_DOCUMENT_ERR, null);
+      }
+    return xmljRemoveChild(oldChild);
+  }
+
+  private native Node xmljRemoveChild(Node oldChild)
+    throws DOMException;
+
+  public Node appendChild(Node newChild)
+    throws DOMException
+  {
+    if (newChild instanceof StandaloneDocumentType)
+      {
+        DocumentType dt = (DocumentType) newChild;
+        newChild = ((GnomeDocument) getOwnerDocument())
+          .createDocumentType(dt.getName(), dt.getPublicId(),
+                              dt.getSystemId());
+      }
+    if (!(newChild instanceof GnomeNode))
+      {
+        throw new GnomeDOMException(DOMException.WRONG_DOCUMENT_ERR, null);
+      }
+    return xmljAppendChild(newChild);
+  }
+
+  private native Node xmljAppendChild(Node newChild)
+    throws DOMException;
+
+  public native boolean hasChildNodes();
+
+  public Node cloneNode(boolean deep)
+  {
+    Node ret = xmljCloneNode(deep);
+    notifyUserDataHandlers(UserDataHandler.NODE_CLONED, this, ret);
+    return ret;
+  }
+  
+  private native Node xmljCloneNode(boolean deep);
+
+  public native void normalize();
+
+  public boolean isSupported(String feature, String version)
+  {
+    return getOwnerDocument().getImplementation()
+      .hasFeature(feature, version);
+  }
+
+  public native String getNamespaceURI();
+
+  public native String getPrefix();
+
+  public native void setPrefix(String prefix)
+    throws DOMException;
+
+  public native String getLocalName();
+
+  public native boolean hasAttributes();
+
+  public int hashCode()
+  {
+    return id.hashCode();
+  }
+
+  public boolean equals(Object other)
+  {
+    if (other == this)
+      {
+        return true;
+      }
+    return (other instanceof GnomeNode &&
+            ((GnomeNode) other).id == id);
+  }
+
+  // DOM Level 3 methods
+
+  public native String getBaseURI();
+
+  public short compareDocumentPosition(Node other)
+    throws DOMException
+  {
+    return (short) compareTo(other);
+  }
+
+  public final int compareTo(Object other)
+  {
+    if (other instanceof GnomeNode)
+      {
+        return xmljCompareTo(other);
+      }
+    return 0;
+  }
+
+  private native int xmljCompareTo(Object other);
+  
+  public String getTextContent()
+    throws DOMException
+  {
+    switch (getNodeType())
+      {
+      case ELEMENT_NODE:
+      case ATTRIBUTE_NODE:
+      case ENTITY_NODE:
+      case ENTITY_REFERENCE_NODE:
+      case DOCUMENT_FRAGMENT_NODE:
+        StringBuffer buffer = new StringBuffer();
+        NodeList children = getChildNodes();
+        int len = children.getLength();
+        for (int i = 0; i < len; i++)
+          {
+            Node child = children.item(i);
+            String textContent = child.getTextContent();
+            if (textContent != null)
+              {
+                buffer.append(textContent);
+              }
+          }
+        return buffer.toString();
+      case TEXT_NODE:
+      case CDATA_SECTION_NODE:
+      case COMMENT_NODE:
+      case PROCESSING_INSTRUCTION_NODE:
+        return getNodeValue();
+      default:
+        return null;
+      }
+  }
+  
+  public void setTextContent(String textContent)
+    throws DOMException
+  {
+    switch (getNodeType())
+      {
+      case ENTITY_REFERENCE_NODE:
+        // entity references are read only
+        throw new GnomeDOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,
+                                    null);
+      case ELEMENT_NODE:
+      case ATTRIBUTE_NODE:
+      case ENTITY_NODE:
+      case DOCUMENT_FRAGMENT_NODE:
+        NodeList children = getChildNodes();
+        int len = children.getLength();
+        for (int i = 0; i < len; i++)
+          {
+            Node child = children.item(i);
+            removeChild(child);
+          }
+        if (textContent != null)
+          {
+            Text text = getOwnerDocument().createTextNode(textContent);
+            appendChild(text);
+          }
+        break;
+      case TEXT_NODE:
+      case CDATA_SECTION_NODE:
+      case COMMENT_NODE:
+      case PROCESSING_INSTRUCTION_NODE:
+        setNodeValue(textContent);
+        break;
+      }
+  }
+  
+  public boolean isSameNode(Node other)
+  {
+    return equals(other);
+  }
+  
+  public native String lookupPrefix(String namespaceURI);
+  
+  public native boolean isDefaultNamespace(String namespaceURI);
+  
+  public native String lookupNamespaceURI(String prefix);
+  
+  public native boolean isEqualNode(Node arg);
+  
+  public Object getFeature(String feature, String version)
+  {
+    return getOwnerDocument().getImplementation()
+      .getFeature(feature, version);
+  }
+
+  public Object setUserData(String key, Object data, UserDataHandler handler)
+  {
+    // TODO handler
+    if (userData == null)
+      {
+        userData = new HashMap();
+      }
+    if (handler != null)
+      {
+        if (userDataHandlers == null)
+          {
+            userDataHandlers = new HashMap();
+          }
+        userDataHandlers.put(key, handler);
+      }
+    return userData.put(key, data);
+  }
+
+  public Object getUserData(String key)
+  {
+    if (userData == null)
+      {
+        return null;
+      }
+    return userData.get(key);
+  }
+
+  void notifyUserDataHandlers(short op, Node src, Node dst)
+  {
+    if (userDataHandlers != null)
+      {
+        for (Iterator i = userDataHandlers.entrySet().iterator(); i.hasNext(); )
+          {
+            Map.Entry entry = (Map.Entry) i.next();
+            String key = (String) entry.getKey();
+            UserDataHandler handler = (UserDataHandler) entry.getValue();
+            Object data = userData.get(key);
+            handler.handle(op, key, data, src, dst);
+          }
+      }
+  }
+
+  public String toString()
+  {
+    StringBuffer buffer = new StringBuffer(getClass().getName());
+    buffer.append("[nodeName=");
+    buffer.append(getNodeName());
+    buffer.append("]");
+    return buffer.toString();
+  }
+
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeNodeList.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeNodeList.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeNodeList.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeNodeList.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,66 @@
+/* GnomeNodeList.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+
+/**
+ * A DOM node list implemented in libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeNodeList
+implements NodeList
+{
+
+  /**
+   * The node id.
+   */
+  private final Object id;
+
+  GnomeNodeList (Object id)
+  {
+    this.id = id;
+  }
+
+  public native Node item (int index);
+
+  public native int getLength ();
+  
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeNotation.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeNotation.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeNotation.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeNotation.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,78 @@
+/* GnomeNotation.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import org.w3c.dom.Notation;
+
+/**
+ * A DOM notation node implemented in libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeNotation
+extends GnomeNode
+implements Notation
+{
+
+  GnomeNotation (Object id)
+  {
+    super (id);
+  }
+
+  public native String getPublicId ();
+
+  public native String getSystemId ();
+
+  public String toString ()
+  {
+    String publicId = getPublicId ();
+    StringBuffer buffer = new StringBuffer (getClass ().getName ());
+    buffer.append ("[");
+    if (publicId != null)
+      {
+        buffer.append ("publicId=");
+        buffer.append (publicId);
+        buffer.append (",");
+      }
+    buffer.append ("systemId=");
+    buffer.append (getSystemId ());
+    buffer.append ("]");
+    return buffer.toString ();
+  }
+
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeProcessingInstruction.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeProcessingInstruction.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeProcessingInstruction.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeProcessingInstruction.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,77 @@
+/* GnomeProcessingInstruction.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import org.w3c.dom.DOMException;
+import org.w3c.dom.ProcessingInstruction;
+
+/**
+ * A DOM processing instruction node implemented in libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeProcessingInstruction
+extends GnomeNode
+implements ProcessingInstruction
+{
+
+  GnomeProcessingInstruction (Object id)
+  {
+    super (id);
+  }
+
+  public String getTarget ()
+  {
+    return getNodeName ();
+  }
+
+  public native String getData ();
+
+  public native void setData (String data)
+    throws DOMException;
+
+  public String toString ()
+  {
+    StringBuffer buffer = new StringBuffer (getClass ().getName ());
+    buffer.append ("[data=");
+    buffer.append (getData ());
+    buffer.append ("]");
+    return buffer.toString ();
+  }
+
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeText.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeText.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeText.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeText.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,130 @@
+/* GnomeText.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import org.w3c.dom.DOMException;
+import org.w3c.dom.Node;
+import org.w3c.dom.Text;
+
+/**
+ * A DOM text node implemented in libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeText
+extends GnomeCharacterData
+implements Text
+{
+
+  GnomeText (Object id)
+  {
+    super (id);
+  }
+  
+  public Text splitText (int offset)
+    throws DOMException
+  {
+    String value = getNodeValue ();
+    String part1 = value.substring (0, offset);
+    String part2 = value.substring (offset);
+    Text text = getOwnerDocument ().createTextNode (part1);
+    getParentNode ().insertBefore (text, this);
+    setNodeValue (part2);
+    return text;
+  }
+  
+  // DOM Level 3
+
+  public boolean isElementContentWhitespace ()
+  {
+    return getTextContent ().trim ().length () == 0;
+  }
+  
+  public String getWholeText ()
+  {
+    Node first = this;
+    Node node = getPreviousSibling ();
+    while (node != null && node instanceof Text)
+      {
+        first = node;
+        node = node.getPreviousSibling ();
+      }
+    StringBuffer buf = new StringBuffer (first.getNodeValue ());
+    node = first.getNextSibling ();
+    while (node != null && node instanceof Text)
+      {
+        buf.append (node.getNodeValue ());
+        node = node.getNextSibling ();
+      }
+    return buf.toString ();
+  }
+
+  public Text replaceWholeText (String content) throws DOMException
+  {
+    boolean isEmpty = (content == null || content.length () == 0);
+    if (!isEmpty)
+      {
+        setNodeValue (content);
+      }
+    
+    Node first = this;
+    Node node = getPreviousSibling ();
+    while (node != null && node instanceof Text)
+      {
+        first = node;
+        node = node.getPreviousSibling ();
+      }
+    node = first.getNextSibling ();
+    Node parent = getParentNode ();
+    if (first != this || isEmpty)
+      {
+        parent.removeChild (first);
+      }
+    while (node != null && node instanceof Text)
+      {
+        Node tmp = node;
+        node = node.getNextSibling ();
+        if (tmp != this || isEmpty)
+          {
+            parent.removeChild (tmp);
+          }
+      }
+    return (isEmpty) ? null : this;
+  }
+
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeTypeInfo.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeTypeInfo.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeTypeInfo.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeTypeInfo.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,65 @@
+/* GnomeTypeInfo.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import org.w3c.dom.TypeInfo;
+
+/**
+ * Provides XML Schema information about an element or attribute.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeTypeInfo implements TypeInfo
+{
+
+  final Object id;
+
+  GnomeTypeInfo(Object id)
+  {
+    this.id = id;
+  }
+
+  public native String getTypeName ();
+
+  public native String getTypeNamespace ();
+
+  public native boolean isDerivedFrom (String typeNamespaceArg,
+                                       String typeNameArg,
+                                       int derivationMethod);
+  
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeXPathExpression.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeXPathExpression.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeXPathExpression.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeXPathExpression.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,86 @@
+/* GnomeXPathExpression.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import org.w3c.dom.DOMException;
+import org.w3c.dom.Node;
+import org.w3c.dom.xpath.XPathException;
+import org.w3c.dom.xpath.XPathExpression;
+import org.w3c.dom.xpath.XPathNSResolver;
+
+/**
+ * A compiled XPath expression implemented in libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeXPathExpression
+implements XPathExpression
+{
+
+  /**
+   * xmlXPathCompExprPtr
+   */
+  final Object expr;
+
+  GnomeXPathExpression (GnomeDocument doc, String expression,
+                        XPathNSResolver resolver)
+  {
+    expr = init (expression);
+    // TODO resolver
+  }
+
+  protected void finalize ()
+  {
+    free (expr);
+  }
+
+  private native Object init (String expression);
+
+  private native void free (Object expr);
+
+  public Object evaluate (Node contextNode, short type, Object result)
+    throws XPathException, DOMException
+  {
+    return doEvaluate (expr, contextNode, type, result);
+  }
+  
+  private native Object doEvaluate (Object expr, Node contextNode,
+                                    short type, Object result)
+    throws XPathException, DOMException;
+    
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeXPathNSResolver.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeXPathNSResolver.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeXPathNSResolver.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeXPathNSResolver.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,65 @@
+/* GnomeXPathNSResolver.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import org.w3c.dom.Node;
+import org.w3c.dom.xpath.XPathNSResolver;
+
+/**
+ * XPath namespace URI resolver implemented in libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeXPathNSResolver
+  implements XPathNSResolver
+{
+
+  Node node;
+
+  GnomeXPathNSResolver(Node node)
+  {
+    this.node = node;
+  }
+
+  public String lookupNamespaceURI(String prefix)
+  {
+    return node.lookupNamespaceURI(prefix);
+  }
+  
+}
+
Index: libjava/gnu/xml/libxmlj/dom/GnomeXPathNodeList.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeXPathNodeList.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeXPathNodeList.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeXPathNodeList.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,73 @@
+/* GnomeXPathNodeList.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+
+/**
+ * A node list that uses an XPath result object.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeXPathNodeList
+implements NodeList
+{
+
+  /**
+   * xmlXPathObjectPtr
+   */
+  final Object obj;
+
+  GnomeXPathNodeList (Object obj)
+  {
+    this.obj = obj;
+  }
+
+  protected void finalize ()
+  {
+    free(obj);
+  }
+
+  private native void free (Object obj);
+
+  public native int getLength ();
+
+  public native Node item (int index);
+
+}
Index: libjava/gnu/xml/libxmlj/dom/GnomeXPathResult.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/dom/GnomeXPathResult.java
diff -N libjava/gnu/xml/libxmlj/dom/GnomeXPathResult.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/dom/GnomeXPathResult.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,132 @@
+/* GnomeXPathResult.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.dom;
+
+import org.w3c.dom.DOMException;
+import org.w3c.dom.Node;
+import org.w3c.dom.xpath.XPathException;
+import org.w3c.dom.xpath.XPathResult;
+
+/**
+ * An XPath result object implemented in libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeXPathResult
+implements XPathResult
+{
+
+  /**
+   * xmlXPathObjectPtr
+   */
+  final Object obj;
+
+  GnomeXPathResult (Object obj)
+  {
+    this.obj = obj;
+  }
+
+  protected void finalize ()
+  {
+    free (obj);
+  }
+
+  private native void free (Object obj);
+  
+  public native short getResultType ();
+
+  public native double getNumberValue ()
+    throws XPathException;
+
+  public native String getStringValue ()
+    throws XPathException;
+
+  public native boolean getBooleanValue ()
+    throws XPathException;
+
+  public native Node getSingleNodeValue ()
+    throws XPathException;
+
+  public native boolean getInvalidIteratorState();
+
+  public native int getSnapshotLength ()
+    throws XPathException;
+
+  public native Node iterateNext ()
+    throws XPathException, DOMException;
+
+  public native Node snapshotItem (int index)
+    throws XPathException;
+
+  public String toString ()
+  {
+    short type = getResultType ();
+    switch (type)
+      {
+      case STRING_TYPE:
+        return getStringValue ();
+      case NUMBER_TYPE:
+        return new Double (getNumberValue ()).toString ();
+      case BOOLEAN_TYPE:
+        return Boolean.valueOf (getBooleanValue ()).toString ();
+      case UNORDERED_NODE_SNAPSHOT_TYPE:
+        int len = getSnapshotLength ();
+        switch (len) {
+        case 0:
+          return "[no matches]";
+        case 1:
+          return getSingleNodeValue ().toString ();
+        default:
+          StringBuffer buffer = new StringBuffer ();
+          for (int i = 0; i < len; i++)
+            {
+              if (i > 0)
+                {
+                  buffer.append (',');
+                }
+              buffer.append (snapshotItem (i));
+            }
+          return buffer.toString ();
+        }
+      default:
+        return getClass ().getName () + "[type=" + type + ",length=" +
+          getSnapshotLength () + ']';
+      }
+  }
+  
+}
Index: libjava/gnu/xml/libxmlj/sax/GnomeLocator.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/sax/GnomeLocator.java
diff -N libjava/gnu/xml/libxmlj/sax/GnomeLocator.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/sax/GnomeLocator.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,99 @@
+/* GnomeLocator.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.sax;
+
+import org.xml.sax.Locator;
+
+/**
+ * SAX Locator implementation that uses libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeLocator
+implements Locator
+{
+
+  // An xmlParserCtxtPtr
+  private final Object ctx;
+
+  // An xmlSAXLocatorPtr
+  private final Object loc;
+
+  GnomeLocator (Object ctx, Object loc)
+  {
+    this.ctx = ctx;
+    this.loc = loc;
+    if (ctx == null)
+      {
+        throw new NullPointerException ("ctx");
+      }
+    if (loc == null)
+      {
+        throw new NullPointerException ("loc");
+      }
+  }
+  
+  public String getPublicId ()
+  {
+    return publicId (ctx, loc);
+  }
+
+  private native String publicId (Object ctx, Object loc);
+
+  public String getSystemId ()
+  {
+    return systemId (ctx, loc);
+  }
+
+  private native String systemId (Object ctx, Object loc);
+
+  public int getLineNumber ()
+  {
+    return lineNumber (ctx, loc);
+  }
+  
+  private native int lineNumber (Object ctx, Object loc);
+
+  public int getColumnNumber ()
+  {
+    return columnNumber (ctx, loc);
+  }
+  
+  private native int columnNumber (Object ctx, Object loc);
+
+}
Index: libjava/gnu/xml/libxmlj/sax/GnomeSAXParser.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/sax/GnomeSAXParser.java
diff -N libjava/gnu/xml/libxmlj/sax/GnomeSAXParser.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/sax/GnomeSAXParser.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,105 @@
+/* GnomeSAXParser.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.sax;
+
+import javax.xml.parsers.SAXParser;
+
+import org.xml.sax.Parser;
+import org.xml.sax.SAXException;
+import org.xml.sax.SAXNotRecognizedException;
+import org.xml.sax.SAXNotSupportedException;
+import org.xml.sax.XMLReader;
+
+/**
+ * JAXP SAX parser implementation that uses libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class GnomeSAXParser
+extends SAXParser
+{
+
+  private boolean namespaceAware;
+  private boolean validating;
+
+  /**
+   * Creates a new SAX parser.
+   */
+  GnomeSAXParser (boolean namespaceAware, boolean validating)
+  {
+    this.namespaceAware = namespaceAware;
+    this.validating = validating;
+  }
+
+  public Parser getParser ()
+    throws SAXException
+  {
+    throw new SAXNotSupportedException ("SAX version 1 not supported");
+  }
+
+  public XMLReader getXMLReader ()
+    throws SAXException
+  {
+    return new GnomeXMLReader (namespaceAware, validating);
+  }
+
+  public Object getProperty (String name)
+    throws SAXNotRecognizedException, SAXNotSupportedException
+  {
+    GnomeXMLReader.checkPropertyName (name);
+    throw new SAXNotSupportedException (name);
+  }
+
+  public void setProperty (String name, Object value)
+    throws SAXNotRecognizedException, SAXNotSupportedException
+  {
+    GnomeXMLReader.checkPropertyName (name);
+    throw new SAXNotSupportedException (name);
+  }
+
+  public boolean isNamespaceAware ()
+  {
+    return namespaceAware;
+  }
+
+  public boolean isValidating ()
+  {
+    return validating;
+  }
+  
+}
Index: libjava/gnu/xml/libxmlj/sax/GnomeSAXParserFactory.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/sax/GnomeSAXParserFactory.java
diff -N libjava/gnu/xml/libxmlj/sax/GnomeSAXParserFactory.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/sax/GnomeSAXParserFactory.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,92 @@
+/* GnomeSAXParserFactory.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.sax;
+
+import java.util.Map;
+import java.util.HashMap;
+
+import javax.xml.parsers.SAXParser;
+import javax.xml.parsers.SAXParserFactory;
+import javax.xml.parsers.ParserConfigurationException;
+
+import org.xml.sax.SAXException;
+import org.xml.sax.SAXNotRecognizedException;
+import org.xml.sax.SAXNotSupportedException;
+
+/**
+ * JAXP SAX parser factory implementation that uses libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class GnomeSAXParserFactory
+extends SAXParserFactory
+{
+
+  private Map features;
+
+  /**
+   * Creates a new SAX parser factory.
+   */
+  public GnomeSAXParserFactory ()
+  {
+    features = new HashMap ();
+  }
+
+  public SAXParser newSAXParser ()
+    throws ParserConfigurationException, SAXException
+  {
+    // TODO features
+    return new GnomeSAXParser (isNamespaceAware (), isValidating ());
+  }
+
+  public boolean getFeature (String name)
+    throws ParserConfigurationException, SAXNotRecognizedException, SAXNotSupportedException
+  {
+    GnomeXMLReader.checkFeatureName (name);
+    Boolean val = (Boolean) features.get (name);
+    return (val == null) ? false : val.booleanValue ();
+  }
+
+  public void setFeature (String name, boolean flag)
+    throws ParserConfigurationException, SAXNotRecognizedException, SAXNotSupportedException
+  {
+    GnomeXMLReader.checkFeatureName (name);
+    features.put (name, flag ? Boolean.TRUE : Boolean.FALSE);
+  }
+  
+}
Index: libjava/gnu/xml/libxmlj/sax/GnomeXMLReader.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/sax/GnomeXMLReader.java
diff -N libjava/gnu/xml/libxmlj/sax/GnomeXMLReader.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/sax/GnomeXMLReader.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,1065 @@
+/* GnomeXMLReader.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.sax;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.InputStream;
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.Arrays;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import org.xml.sax.Attributes;
+import org.xml.sax.ContentHandler;
+import org.xml.sax.DTDHandler;
+import org.xml.sax.EntityResolver;
+import org.xml.sax.ErrorHandler;
+import org.xml.sax.InputSource;
+import org.xml.sax.Locator;
+import org.xml.sax.SAXException;
+import org.xml.sax.SAXNotRecognizedException;
+import org.xml.sax.SAXNotSupportedException;
+import org.xml.sax.SAXParseException;
+import org.xml.sax.XMLReader;
+import org.xml.sax.ext.DeclHandler;
+import org.xml.sax.ext.LexicalHandler;
+
+import gnu.xml.libxmlj.util.NamedInputStream;
+import gnu.xml.libxmlj.util.StandaloneLocator;
+import gnu.xml.libxmlj.util.XMLJ;
+
+/**
+ * A SAX2 parser that uses libxml2.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class GnomeXMLReader
+implements XMLReader
+{
+
+  static
+  {
+    XMLJ.init ();
+  }
+
+  private static final String FEATURES_PREFIX =
+    "http://xml.org/sax/features/";
+  
+  private static final List RECOGNIZED_FEATURES =
+    Arrays.asList (new String[]
+                   {
+                   "external-general-entities",
+                   "external-parameter-entities",
+                   "is-standalone",
+                   "lexical-handler/parameter-entities",
+                   "namespaces",
+                   "namespace-prefixes",
+                   "resolve-dtd-uris",
+                   "string-interning",
+                   "use-attributes2",
+                   "use-locator2",
+                   "use-entity-resolver2",
+                   "validation"
+                   });
+  
+  private static final String PROPERTIES_PREFIX =
+    "http://xml.org/sax/properties/";
+  
+  private static final List RECOGNIZED_PROPERTIES =
+    Arrays.asList (new String[]
+                   {
+                   "declaration-handler",
+                   "dom-node",
+                   "lexical-handler",
+                   "xml-string"
+                   });
+
+  // Features
+
+  private transient boolean standalone;
+  private boolean namespaces;
+  private boolean namespacePrefixes;
+  private boolean validation;
+
+  // Callback handlers
+
+  private ContentHandler contentHandler;
+
+  private DTDHandler dtdHandler;
+
+  private EntityResolver entityResolver;
+
+  private ErrorHandler errorHandler;
+
+  private DeclHandler declarationHandler;
+
+  private LexicalHandler lexicalHandler;
+
+  private GnomeLocator locator;
+
+  // Namespace helper for handling callbacks
+  private transient Namespaces ns;
+
+  // If true, do not invoke callback methods except endDocument
+  private transient boolean seenFatalError;
+
+  private transient boolean seenStartDocument;
+
+  private transient String base;
+
+  public GnomeXMLReader ()
+  {
+    this (true, true);
+  }
+
+  public GnomeXMLReader (boolean namespaces, boolean validation)
+  {
+    this.namespaces = namespaces;
+    this.validation = validation;
+    ns = new Namespaces ();
+  }
+
+  public ContentHandler getContentHandler ()
+  {
+    return contentHandler;
+  }
+
+  public void setContentHandler (ContentHandler handler)
+  {
+    contentHandler = handler;
+  }
+
+  public DTDHandler getDTDHandler ()
+  {
+    return dtdHandler;
+  }
+
+  public void setDTDHandler (DTDHandler handler)
+  {
+    dtdHandler = handler;
+  }
+
+  public EntityResolver getEntityResolver ()
+  {
+    return entityResolver;
+  }
+
+  public void setEntityResolver (EntityResolver resolver)
+  {
+    entityResolver = resolver;
+  }
+
+  public ErrorHandler getErrorHandler ()
+  {
+    return errorHandler;
+  }
+
+  public void setErrorHandler (ErrorHandler handler)
+  {
+    errorHandler = handler;
+  }
+
+  // Features
+
+  public boolean getFeature (String name)
+    throws SAXNotRecognizedException, SAXNotSupportedException
+  {
+    checkFeatureName (name);
+    String key = name.substring (FEATURES_PREFIX.length ());
+    if ("external-general-entities".equals (key))
+      {
+        return validation; // TODO check this
+      }
+    else if ("external-parameter-entities".equals (key))
+      {
+        return validation; // TODO check this
+      }
+    else if ("is-standalone".equals (key))
+      {
+        return standalone;
+      }
+    else if ("namespaces".equals (key))
+      {
+        return namespaces;
+      }
+    else if ("namespace-prefixes".equals (key))
+      {
+        return namespacePrefixes;
+      }
+    else if ("resolve-dtd-uris".equals (key))
+      {
+        return true;
+      }
+    else if ("validation".equals (key))
+      {
+        return validation;
+      }
+    else
+      {
+        return false;
+      }
+  }
+
+  public void setFeature (String name, boolean value)
+    throws SAXNotRecognizedException, SAXNotSupportedException
+  {
+    checkFeatureName (name);
+    String key = name.substring (FEATURES_PREFIX.length ());
+    if ("namespaces".equals (key))
+      {
+        namespaces = value;
+      }
+    else if ("namespace-prefixes".equals (key))
+      {
+        namespacePrefixes = value;
+      }
+    else if ("validation".equals (key))
+      {
+        validation = value;
+      }
+  }
+
+  /**
+   * Check that the specified feature name is recognized.
+   */
+  static void checkFeatureName (String name)
+    throws SAXNotRecognizedException
+  {
+    if (name == null || !name.startsWith (FEATURES_PREFIX))
+      {
+        throw new SAXNotRecognizedException (name);
+      }
+    String key = name.substring (FEATURES_PREFIX.length ());
+    if (!RECOGNIZED_FEATURES.contains (key))
+      {
+        throw new SAXNotRecognizedException (name);
+      }
+  }
+
+  // Properties
+
+  public Object getProperty (String name)
+    throws SAXNotRecognizedException, SAXNotSupportedException
+  {
+    checkPropertyName (name);
+    String key = name.substring (PROPERTIES_PREFIX.length ());
+    if ("declaration-handler".equals (key))
+      {
+        return getDeclarationHandler ();
+      }
+    else if ("lexical-handler".equals (key))
+      {
+        return getLexicalHandler ();
+      }
+    else
+      {
+        throw new SAXNotSupportedException (name);
+      }
+  }
+
+  public void setProperty (String name, Object value)
+    throws SAXNotRecognizedException, SAXNotSupportedException
+  {
+    checkPropertyName (name);
+    String key = name.substring (PROPERTIES_PREFIX.length ());
+    if ("declaration-handler".equals (key))
+      {
+        setDeclarationHandler ((DeclHandler) value);
+      }
+    else if ("lexical-handler".equals (key))
+      {
+        setLexicalHandler ((LexicalHandler) value);
+      }
+  }
+
+  public DeclHandler getDeclarationHandler ()
+  {
+    return declarationHandler;
+  }
+
+  public void setDeclarationHandler (DeclHandler declarationHandler)
+  {
+    this.declarationHandler = declarationHandler;
+  }
+
+  public LexicalHandler getLexicalHandler ()
+  {
+    return lexicalHandler;
+  }
+
+  public void setLexicalHandler (LexicalHandler lexicalHandler)
+  {
+    this.lexicalHandler = lexicalHandler;
+  }
+
+  /**
+   * Check that the specified property name is recognized.
+   */
+  static void checkPropertyName (String name)
+    throws SAXNotRecognizedException
+  {
+    if (!name.startsWith (PROPERTIES_PREFIX))
+      {
+        throw new SAXNotRecognizedException (name);
+      }
+    String key = name.substring (PROPERTIES_PREFIX.length ());
+    if (!RECOGNIZED_PROPERTIES.contains (key))
+      {
+        throw new SAXNotRecognizedException (name);
+      }
+  }
+
+  // Parse
+
+  public void parse (String systemId)
+    throws IOException, SAXException
+  {
+    URL url = null;
+    try
+      {
+        url = new URL (systemId);
+      }
+    catch (MalformedURLException e)
+      {
+        File file = new File(systemId);
+        if (!file.exists ())
+          {
+            throw new FileNotFoundException (systemId);
+          }
+        String path  = file.getAbsolutePath();
+        if (File.separatorChar != '/')
+          {
+            path = path.replace (File.separatorChar, '/');
+          }
+        if (!path.startsWith ("/"))
+          {
+            path = "/" + path;
+          }
+        if (!path.endsWith ("/") && file.isDirectory ())
+          {
+            path = path + "/";
+          }
+        url = new URL ("file:" + path);
+      }
+    InputSource source = new InputSource(url.toString ());
+    source.setByteStream (url.openStream ());
+    parse (source);
+  }
+
+  public synchronized void parse (InputSource input)
+    throws IOException, SAXException
+  {
+    NamedInputStream in = XMLJ.getInputStream (input);
+    byte[] detectBuffer = in.getDetectBuffer ();
+    String publicId = input.getPublicId ();
+    String systemId = input.getSystemId ();
+    base = XMLJ.getBaseURI (systemId);
+    // Reset state
+    standalone = false;
+    seenFatalError = false;
+    seenStartDocument = false;
+    if (systemId != null)
+      {
+        int lsi = systemId.lastIndexOf ('/');
+        if (lsi != -1)
+          {
+            base = systemId.substring (0, lsi + 1);
+          }
+      }
+    // Handle zero-length document
+    if (detectBuffer == null)
+      {
+        startDocument (true);
+        fatalError ("No document element", 0, 0, publicId, systemId);
+        endDocument ();
+        return;
+      }
+    // Parse
+    parseStream(in,
+                detectBuffer,
+                publicId,
+                systemId,
+                base,
+                validation,
+                contentHandler != null,
+                dtdHandler != null,
+                entityResolver != null,
+                errorHandler != null,
+                declarationHandler != null,
+                lexicalHandler != null);
+    in.close ();
+  }
+
+  native void parseStream (InputStream in,
+                           byte[] detectBuffer,
+                           String publicId,
+                           String systemId,
+                           String base,
+                           boolean validate,
+                           boolean contentHandler,
+                           boolean dtdHandler,
+                           boolean entityResolver,
+                           boolean errorHandler,
+                           boolean declarationHandler,
+                           boolean lexicalHandler)
+    throws IOException, SAXException;
+
+  String getURI (String prefix)
+  {
+    if (!namespaces)
+      {
+        return null;
+      }
+    return ns.getURI (prefix);
+  }
+
+  // Callbacks from libxmlj
+
+  private void startDTD (String name, String publicId, String systemId)
+    throws SAXException
+  {
+    if (seenFatalError || lexicalHandler == null)
+      {
+        return;
+      }
+    try
+      {
+        systemId = XMLJ.getAbsoluteURI (base, systemId);
+        lexicalHandler.startDTD (name, publicId, systemId);
+      }
+    catch (Exception e)
+      {
+        if (e instanceof SAXException)
+          {
+            throw (SAXException) e;
+          }
+        else
+          {
+            throw new SAXException (e);
+          }
+      }
+  }
+
+  private void externalEntityDecl (String name, String publicId,
+                                   String systemId)
+    throws SAXException
+  {
+    if (seenFatalError || declarationHandler == null)
+      {
+        return;
+      }
+    try
+      {
+        systemId = XMLJ.getAbsoluteURI (base, systemId);
+        declarationHandler.externalEntityDecl (name, publicId, systemId);
+      }
+    catch (Exception e)
+      {
+        if (e instanceof SAXException)
+          {
+            throw (SAXException) e;
+          }
+        else
+          {
+            throw new SAXException (e);
+          }
+      }
+  }
+
+  private void internalEntityDecl (String name, String value)
+    throws SAXException
+  {
+    if (seenFatalError || declarationHandler == null)
+      {
+        return;
+      }
+    try
+      {
+        declarationHandler.internalEntityDecl (name, value);
+      }
+    catch (Exception e)
+      {
+        if (e instanceof SAXException)
+          {
+            throw (SAXException) e;
+          }
+        else
+          {
+            throw new SAXException (e);
+          }
+      }
+  }
+
+  private InputStream resolveEntity (String publicId, String systemId)
+    throws SAXException, IOException
+  {
+    if (entityResolver == null)
+      {
+        return null;
+      }
+    try
+      {
+        systemId = XMLJ.getAbsoluteURI (base, systemId);
+        InputSource source = entityResolver.resolveEntity (publicId, systemId);
+        return (source == null) ? null : XMLJ.getInputStream (source);
+      }
+    catch (Exception e)
+      {
+        if (e instanceof SAXException)
+          {
+            throw (SAXException) e;
+          }
+        else
+          {
+            throw new SAXException (e);
+          }
+      }
+  }
+
+  private void notationDecl (String name, String publicId, String systemId)
+    throws SAXException
+  {
+    if (seenFatalError || dtdHandler == null)
+      {
+        return;
+      }
+    try
+      {
+        systemId = XMLJ.getAbsoluteURI (base, systemId);
+        dtdHandler.notationDecl (name, publicId, systemId);
+      }
+    catch (Exception e)
+      {
+        if (e instanceof SAXException)
+          {
+            throw (SAXException) e;
+          }
+        else
+          {
+            throw new SAXException (e);
+          }
+      }
+  }
+
+  private void attributeDecl (String eName, String aName, String type,
+                              String mode, String value)
+    throws SAXException
+  {
+    if (seenFatalError || declarationHandler == null)
+      {
+        return;
+      }
+    try
+      {
+        declarationHandler.attributeDecl (eName, aName, type, mode, value);
+      }
+    catch (Exception e)
+      {
+        if (e instanceof SAXException)
+          {
+            throw (SAXException) e;
+          }
+        else
+          {
+            throw new SAXException (e);
+          }
+      }
+  }
+
+  private void elementDecl (String name, String model)
+    throws SAXException
+  {
+    if (seenFatalError || declarationHandler == null)
+      {
+        return;
+      }
+    try
+      {
+        declarationHandler.elementDecl (name, model);
+      }
+    catch (Exception e)
+      {
+        if (e instanceof SAXException)
+          {
+            throw (SAXException) e;
+          }
+        else
+          {
+            throw new SAXException (e);
+          }
+      }
+  }
+
+  private void unparsedEntityDecl (String name, String publicId,
+                                   String systemId, String notationName)
+    throws SAXException
+  {
+    if (seenFatalError || dtdHandler == null)
+      {
+        return;
+      }
+    try
+      {
+        systemId = XMLJ.getAbsoluteURI (base, systemId);
+        dtdHandler.unparsedEntityDecl (name, publicId, systemId,
+                                       notationName);
+      }
+    catch (Exception e)
+      {
+        if (e instanceof SAXException)
+          {
+            throw (SAXException) e;
+          }
+        else
+          {
+            throw new SAXException (e);
+          }
+      }
+  }
+
+  private void setDocumentLocator (Object ctx, Object loc)
+  {
+    locator = new GnomeLocator (ctx, loc);
+    if (seenFatalError || contentHandler == null)
+      {
+        return;
+      }
+    try
+      {
+        contentHandler.setDocumentLocator (locator);
+      }
+    catch (Exception e)
+      {
+      }
+  }
+  
+  private void startDocument (boolean standalone)
+    throws SAXException
+  {
+    this.standalone = standalone;
+    seenStartDocument = true;
+    if (contentHandler == null)
+      {
+        return;
+      }
+    try
+      {
+        contentHandler.startDocument ();
+      }
+    catch (Exception e)
+      {
+        if (e instanceof SAXException)
+          {
+            throw (SAXException) e;
+          }
+        else
+          {
+            throw new SAXException (e);
+          }
+      }
+  }
+
+  private void endDocument ()
+    throws SAXException
+  {
+    if (contentHandler == null)
+      {
+        return;
+      }
+    try
+      {
+        contentHandler.endDocument();
+      }
+    catch (Exception e)
+      {
+        if (e instanceof SAXException)
+          {
+            throw (SAXException) e;
+          }
+        else
+          {
+            throw new SAXException (e);
+          }
+      }
+  }
+
+  private void startElement(String name, String[] attrs)
+    throws SAXException
+  {
+    if (seenFatalError || contentHandler == null)
+      {
+        return;
+      }
+    try
+      {
+        XMLName xName = new XMLName (this, name);
+        if (namespaces)
+          {
+            // Handle defined namespaces
+            ns.push ();
+            int len = (attrs == null) ? 0 : attrs.length;
+            if (len > 0)
+              {
+                ArrayList filtered = new ArrayList (len);
+                for (int i = 0; i < len; i += 2)
+                  {
+                    String attName = attrs[i];
+                    String attValue = attrs[i + 1];
+                    if (attName.equals ("xmlns"))
+                      {
+                        startPrefixMapping ("", attValue);
+                      }
+                    else if (attName.startsWith ("xmlns:"))
+                      {
+                        startPrefixMapping (attName.substring (6), attValue);
+                      }
+                    else
+                      {
+                        filtered.add (attName);
+                        filtered.add (attValue);
+                      }
+                  }
+                // Remove xmlns attributes
+                attrs = new String[filtered.size ()];
+                filtered.toArray (attrs);
+              }
+          }
+        // Construct attributes
+        Attributes atts = new StringArrayAttributes (this, attrs);
+        contentHandler.startElement (xName.uri, xName.localName, xName.qName,
+                                     atts);
+      }
+    catch (Exception e)
+      {
+        if (e instanceof SAXException)
+          {
+            throw (SAXException) e;
+          }
+        else
+          {
+            throw new SAXException (e);
+          }
+      }
+  }
+
+  private void endElement (String name)
+    throws SAXException
+  {
+    if (seenFatalError || contentHandler == null)
+      {
+        return;
+      }
+    try
+      {
+        XMLName xName = new XMLName (this, name);
+        String uri = (xName.uri == null) ? "" : xName.uri;
+        contentHandler.endElement (uri, xName.localName, xName.qName);
+        // Handle undefining namespaces
+        if (namespaces)
+          {
+            for (Iterator i = ns.currentPrefixes (); i.hasNext (); )
+              {
+                endPrefixMapping ((String) i.next ());
+              }
+            ns.pop (); // releases current depth
+          }
+      }
+    catch (Exception e)
+      {
+        if (e instanceof SAXException)
+          {
+            throw (SAXException) e;
+          }
+        else
+          {
+            throw new SAXException (e);
+          }
+      }
+  }
+
+  private void startPrefixMapping (String prefix, String uri)
+    throws SAXException
+  {
+    if (seenFatalError || contentHandler == null)
+      {
+        return;
+      }
+    ns.define (prefix, uri);
+    contentHandler.startPrefixMapping (prefix, uri);
+  }
+
+  private void endPrefixMapping (String prefix)
+    throws SAXException
+  {
+    if (seenFatalError || contentHandler == null)
+      {
+        return;
+      }
+    contentHandler.endPrefixMapping (prefix);
+  }
+
+  private void characters (String text)
+    throws SAXException
+  {
+    if (seenFatalError || contentHandler == null || text == null)
+      {
+        return;
+      }
+    try
+      {
+        char[] ch = text.toCharArray ();
+        contentHandler.characters (ch, 0, ch.length);
+      }
+    catch (Exception e)
+      {
+        if (e instanceof SAXException)
+          {
+            throw (SAXException) e;
+          }
+        else
+          {
+            throw new SAXException (e);
+          }
+      }
+  }
+
+  private void ignorableWhitespace (String text)
+    throws SAXException
+  {
+    if (seenFatalError || contentHandler == null || text == null)
+      {
+        return;
+      }
+    try
+      {
+        char[] ch = text.toCharArray ();
+        contentHandler.ignorableWhitespace (ch, 0, ch.length);
+      }
+    catch (Exception e)
+      {
+        if (e instanceof SAXException)
+          {
+            throw (SAXException) e;
+          }
+        else
+          {
+            throw new SAXException (e);
+          }
+      }
+  }
+
+  private void processingInstruction (String target, String data)
+    throws SAXException
+  {
+    if (seenFatalError || contentHandler == null)
+      {
+        return;
+      }
+    try
+      {
+        if (data == null)
+          {
+            data = "";
+          }
+        contentHandler.processingInstruction (target, data);
+      }
+    catch (Exception e)
+      {
+        if (e instanceof SAXException)
+          {
+            throw (SAXException) e;
+          }
+        else
+          {
+            throw new SAXException (e);
+          }
+      }
+  }
+
+  private void comment (String text)
+    throws SAXException
+  {
+    if (seenFatalError || lexicalHandler == null || text == null)
+      {
+        return;
+      }
+    try
+      {
+        char[] ch = text.toCharArray ();
+        lexicalHandler.comment (ch, 0, ch.length);
+      }
+    catch (Exception e)
+      {
+        if (e instanceof SAXException)
+          {
+            throw (SAXException) e;
+          }
+        else
+          {
+            throw new SAXException (e);
+          }
+      }
+  }
+
+  private void cdataBlock (String text)
+    throws SAXException
+  {
+    if (seenFatalError || text == null)
+      {
+        return;
+      }
+    try
+      {
+        if (lexicalHandler == null)
+          {
+            characters(text);
+          }
+        else
+          {
+            lexicalHandler.startCDATA();
+            characters(text);
+            lexicalHandler.endCDATA();
+          }
+      }
+    catch (Exception e)
+      {
+        if (e instanceof SAXException)
+          {
+            throw (SAXException) e;
+          }
+        else
+          {
+            throw new SAXException (e);
+          }
+      }
+  }
+
+  private void warning (String message,
+                        int lineNumber, int columnNumber,
+                        String publicId, String systemId)
+    throws SAXException
+  {
+    if (seenFatalError || errorHandler == null)
+      {
+        return;
+      }
+    try
+      {
+        Locator l = new StandaloneLocator (lineNumber, columnNumber,
+                                           publicId, systemId);
+        errorHandler.warning (new SAXParseException (message, l));
+      }
+    catch (Exception e)
+      {
+        if (e instanceof SAXException)
+          {
+            throw (SAXException) e;
+          }
+        else
+          {
+            throw new SAXException (e);
+          }
+      }
+  }
+
+  private void error (String message,
+                      int lineNumber, int columnNumber,
+                      String publicId, String systemId)
+    throws SAXException
+  {
+    if (seenFatalError || errorHandler == null)
+      {
+        return;
+      }
+    try
+      {
+        Locator l = new StandaloneLocator (lineNumber, columnNumber,
+                                           publicId, systemId);
+        errorHandler.error (new SAXParseException (message, l));
+      }
+    catch (Exception e)
+      {
+        if (e instanceof SAXException)
+          {
+            throw (SAXException) e;
+          }
+        else
+          {
+            throw new SAXException (e);
+          }
+      }
+  }
+
+  private void fatalError (String message,
+                           int lineNumber, int columnNumber,
+                           String publicId, String systemId)
+    throws SAXException
+  {
+    if (seenFatalError || errorHandler == null)
+      {
+        return;
+      }
+    try
+      {
+        if (!seenStartDocument)
+          {
+            startDocument (false);
+          }
+        seenFatalError = true;
+        Locator l = new StandaloneLocator (lineNumber, columnNumber,
+                                           publicId, systemId);
+        errorHandler.fatalError (new SAXParseException (message, l));
+      }
+    catch (Exception e)
+      {
+        if (e instanceof SAXException)
+          {
+            throw (SAXException) e;
+          }
+        else
+          {
+            throw new SAXException (e);
+          }
+      }
+  }
+
+}
Index: libjava/gnu/xml/libxmlj/sax/Namespaces.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/sax/Namespaces.java
diff -N libjava/gnu/xml/libxmlj/sax/Namespaces.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/sax/Namespaces.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,122 @@
+/* Namespaces.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.sax;
+
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Iterator;
+
+/**
+ * Helper class for managing namespaces.
+ * 
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class Namespaces
+{
+
+  ArrayList stack = new ArrayList ();
+  
+  /**
+   * Increments the tree depth.
+   * This allocates a new potential namespace entry.
+   */
+  void push ()
+  {
+    stack.add (null);
+  }
+
+  /**
+   * Decrements the tree depth.
+   * This removes namespaces defined at the extremity.
+   */
+  void pop ()
+  {
+    stack.remove (stack.size() - 1);
+  }
+
+  /**
+   * Searches for the namespace URI corresponding to the specified prefix.
+   */
+  String getURI (String prefix)
+  {
+    for (int i = stack.size () - 1; i >= 0; i--)
+    {
+      HashMap ns = (HashMap) stack.get (i);
+      if (ns != null && ns.containsKey (prefix))
+      {
+        String ret = (String) ns.get (prefix);
+        return (ret == null) ? "" : ret;
+      }
+    }
+    return "";
+  }
+
+  /**
+   * Defines the specified prefix-URI mapping at the current depth in the
+   * tree.
+   */
+  void define (String prefix, String uri)
+  {
+    int index = stack.size () - 1;
+    HashMap ns = (HashMap) stack.get (index);
+    if (ns == null)
+    {
+      ns = new HashMap ();
+      stack.set (index, ns);
+    }
+    ns.put (prefix, uri);
+  }
+
+  /**
+   * Returns an iterator over the prefixes defined at the current depth.
+   */
+  Iterator currentPrefixes ()
+  {
+    HashMap ns = (HashMap) stack.get (stack.size () - 1);
+    if (ns == null)
+      {
+        return Collections.EMPTY_LIST.iterator ();
+      }
+    else
+      {
+        return ns.keySet ().iterator ();
+      }
+  }
+
+}
Index: libjava/gnu/xml/libxmlj/sax/StringArrayAttributes.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/sax/StringArrayAttributes.java
diff -N libjava/gnu/xml/libxmlj/sax/StringArrayAttributes.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/sax/StringArrayAttributes.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,171 @@
+/* StringArrayAttributes.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.sax;
+
+import org.xml.sax.Attributes;
+
+/**
+ * An implementation of Attributes that reads values from an array of
+ * strings, supplied by libxml2.
+ * Each pair of elements in the array represents a key followed by a value.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class StringArrayAttributes
+implements Attributes
+{
+
+  private int len;
+  private XMLName[] keys;
+  private String[] values;
+
+  StringArrayAttributes (GnomeXMLReader parser, String[] pairs)
+  {
+    len = (pairs == null) ? 0 : pairs.length / 2;
+    keys = new XMLName[len];
+    values = new String[len];
+    for (int i = 0; i < len; i++)
+    {
+      int pairIndex = i * 2;
+      keys[i] = new XMLName (parser, pairs[pairIndex]);
+      values[i] = pairs[pairIndex + 1];
+    }
+  }
+
+  public int getLength ()
+  {
+    return len;
+  }
+
+  public String getURI (int index)
+  {
+    if (index < 0 || index >= len)
+      {
+        return null;
+      }
+    return keys[index].uri;
+  }
+
+  public String getLocalName (int index)
+  {
+    if (index < 0 || index >= len)
+      {
+        return null;
+      }
+    return keys[index].localName;
+  }
+
+  public String getQName (int index)
+  {
+    if (index < 0 || index >= len)
+      {
+        return null;
+      }
+    return keys[index].qName;
+  }
+
+  public String getType (int index)
+  {
+    if (index < 0 || index >= len)
+      {
+        return null;
+      }
+    // TODO can we get this information from libxml2?
+    return "CDATA";
+  }
+
+  public String getValue (int index)
+  {
+    if (index < 0 || index >= len)
+      {
+        return null;
+      }
+    return values[index];
+  }
+
+  public int getIndex (String uri, String localName)
+  {
+    for (int i = 0; i < len; i++)
+    {
+      XMLName key = keys[i];
+      if (key.localName.equals (localName))
+      {
+        if ((key.uri == null && uri == null) ||
+            (key.uri != null && key.uri.equals(uri)))
+          {
+            return i;
+          }
+      }
+    }
+    return -1;
+  }
+
+  public int getIndex (String qName)
+  {
+    for (int i = 0; i < len; i++)
+    {
+      if (keys[i].qName.equals (qName))
+        {
+          return i;
+        }
+    }
+    return -1;
+  }
+
+  public String getType (String uri, String localName)
+  {
+    return getType (getIndex (uri, localName));
+  }
+
+  public String getType (String qName)
+  {
+    return getType (getIndex (qName));
+  }
+
+  public String getValue (String uri, String localName)
+  {
+    return getValue (getIndex (uri, localName));
+  }
+
+  public String getValue (String qName)
+  {
+    return getValue (getIndex (qName));
+  }
+
+}
+
Index: libjava/gnu/xml/libxmlj/sax/XMLName.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/sax/XMLName.java
diff -N libjava/gnu/xml/libxmlj/sax/XMLName.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/sax/XMLName.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,92 @@
+/* XMLName.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.sax;
+
+/**
+ * Structure containing the components of an XML element/attribute name.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class XMLName
+{
+
+  private static final String XML_URI = "http://www.w3.org/XML/1998/namespace";
+  
+  final String uri;
+  final String localName;
+  final String qName;
+  final String prefix;
+
+  XMLName (GnomeXMLReader parser, String qName)
+  {
+    this.qName = qName;
+    int ci = qName.lastIndexOf (':');
+    if (ci < 1)
+      {
+        localName = qName;
+        prefix = null;
+        uri = "";
+      }
+    else
+      {
+        localName = qName.substring (ci + 1);
+        prefix = qName.substring (0, ci);
+        if ("xml".equals (prefix))
+          {
+            if ("lang".equals (localName) || "space".equals (localName))
+              {
+                uri = XML_URI;
+              }
+            else
+              {
+                uri = parser.getURI (prefix);
+              }
+          }
+        else
+          {
+            uri = parser.getURI (prefix);
+          }
+      }
+  }
+
+  public String toString ()
+  {
+    return qName;
+  }
+
+}
Index: libjava/gnu/xml/libxmlj/transform/ErrorListenerErrorHandler.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/transform/ErrorListenerErrorHandler.java
diff -N libjava/gnu/xml/libxmlj/transform/ErrorListenerErrorHandler.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/transform/ErrorListenerErrorHandler.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,111 @@
+/* ErrorListenerErrorHandler.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.transform;
+
+import javax.xml.transform.ErrorListener;
+import javax.xml.transform.TransformerException;
+import org.xml.sax.ErrorHandler;
+import org.xml.sax.SAXException;
+import org.xml.sax.SAXParseException;
+
+/**
+ * Provides a SAX ErrorHandler interface to an ErrorListener.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class ErrorListenerErrorHandler
+implements ErrorHandler
+{
+
+  private ErrorListener listener;
+
+  ErrorListenerErrorHandler (ErrorListener listener)
+  {
+    this.listener = listener;
+  }
+
+  public void warning (SAXParseException e)
+    throws SAXException
+  {
+    try
+      {
+        listener.warning (new TransformerException (e));
+      }
+    catch (TransformerException te)
+      {
+        throw getSAXException (te);
+      }
+  }
+  
+  public void error (SAXParseException e)
+    throws SAXException
+  {
+    try
+      {
+        listener.error (new TransformerException (e));
+      }
+    catch (TransformerException te)
+      {
+        throw getSAXException (te);
+      }
+  }
+  
+  public void fatalError (SAXParseException e)
+    throws SAXException
+  {
+    try
+      {
+        listener.fatalError (new TransformerException (e));
+      }
+    catch (TransformerException te)
+      {
+        throw getSAXException (te);
+      }
+  }
+
+  private SAXException getSAXException (TransformerException e)
+  {
+    Throwable cause = e.getCause ();
+    if (cause instanceof SAXException)
+      {
+        return (SAXException) cause;
+      }
+    return new SAXException (e);
+  }
+  
+}
Index: libjava/gnu/xml/libxmlj/transform/GnomeTransformer.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/transform/GnomeTransformer.java
diff -N libjava/gnu/xml/libxmlj/transform/GnomeTransformer.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/transform/GnomeTransformer.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,572 @@
+/* GnomeTransformer.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.transform;
+
+import java.io.InputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+
+import java.net.URL;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Properties;
+
+import javax.xml.transform.ErrorListener;
+import javax.xml.transform.Source;
+import javax.xml.transform.SourceLocator;
+import javax.xml.transform.Result;
+import javax.xml.transform.Templates;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerConfigurationException;
+import javax.xml.transform.TransformerException;
+import javax.xml.transform.URIResolver;
+
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.dom.DOMResult;
+import javax.xml.transform.sax.SAXResult;
+import javax.xml.transform.stream.StreamSource;
+import javax.xml.transform.stream.StreamResult;
+
+import org.w3c.dom.Node;
+
+import org.xml.sax.EntityResolver;
+import org.xml.sax.ErrorHandler;
+
+import gnu.xml.libxmlj.dom.GnomeDocument;
+import gnu.xml.libxmlj.sax.GnomeXMLReader;
+import gnu.xml.libxmlj.util.NamedInputStream;
+import gnu.xml.libxmlj.util.StandaloneLocator;
+import gnu.xml.libxmlj.util.XMLJ;
+
+/**
+ * An implementation of {@link javax.xml.transform.Transformer} which
+ * performs XSLT transformation using <code>libxslt</code>.
+ *
+ * @author Julian Scheid
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class GnomeTransformer
+  extends Transformer
+  implements Templates
+{
+
+  /**
+   * The parameters added by the user via {@link setParameter()}.
+   */
+  private Map parameters;
+
+  /**
+   * The output properties set by the user.
+   */
+  private Properties outputProperties;
+
+  /**
+   * The URI resolver to use during transformation.
+   */
+  private URIResolver resolver;
+
+  /**
+   * The error listener for transformation errors.
+   */
+  private ErrorListener errorListener;
+
+  /**
+   * Handle to the source stylesheet.
+   * This is a native pointer of type xsltStylesheetPtr.
+   */
+  private Object stylesheet;
+
+  /**
+   * Constructor.
+   * @param source the XSLT stylesheet document source
+   * @param resolver the resolver to use during transformation
+   * @param errorListener the error listener for transformation errors
+   */
+  GnomeTransformer (Source source,
+                    URIResolver resolver, 
+                    ErrorListener errorListener) 
+    throws TransformerConfigurationException
+  {
+    this.resolver = resolver;
+    this.errorListener = errorListener;
+    parameters = new HashMap ();
+    outputProperties = new Properties ();
+   
+    if (source == null)
+      {
+        stylesheet = newStylesheet ();
+      } 
+    else if (source instanceof StreamSource)
+      {
+        try
+          {
+            StreamSource ss = (StreamSource) source;
+            NamedInputStream in = XMLJ.getInputStream (ss);
+            String systemId = ss.getSystemId ();
+            String publicId = ss.getPublicId ();
+            String base = XMLJ.getBaseURI (systemId);
+            byte[] detectBuffer = in.getDetectBuffer ();
+            if (detectBuffer == null)
+              {
+                String msg = "No document element";
+                throw new TransformerConfigurationException (msg);
+              }
+            stylesheet = newStylesheetFromStream (in, detectBuffer, publicId,
+                                                  systemId, base,
+                                                  (resolver != null),
+                                                  (errorListener != null));
+          }
+        catch (IOException e)
+          {
+            throw new TransformerConfigurationException (e);
+          }
+      }
+    else if (source instanceof DOMSource)
+      {
+        DOMSource ds = (DOMSource) source;
+        Node node = ds.getNode ();
+        if (!(node instanceof GnomeDocument))
+          {
+            String msg = "Node is not a GnomeDocument";
+            throw new TransformerConfigurationException (msg);
+          }
+        GnomeDocument doc = (GnomeDocument) node;
+        stylesheet = newStylesheetFromDoc (doc);
+      }
+    else
+      {
+        String msg = "Source type not supported (" + source + ")";
+        throw new TransformerConfigurationException (msg);
+      }
+  }
+  
+  /**
+   * Copy constructor.
+   */
+  private GnomeTransformer (Object stylesheet,
+                            URIResolver resolver, 
+                            ErrorListener errorListener,
+                            Map parameters,
+                            Properties outputProperties)
+  {
+    this.stylesheet = stylesheet;
+    this.resolver = resolver;
+    this.errorListener = errorListener;
+    this.parameters = parameters;
+    this.outputProperties = outputProperties;
+  }
+
+  private native Object newStylesheet ()
+    throws TransformerConfigurationException;
+
+  private native Object newStylesheetFromStream (InputStream in,
+                                                 byte[] detectBuffer,
+                                                 String publicId,
+                                                 String systemId,
+                                                 String base,
+                                                 boolean entityResolver,
+                                                 boolean errorHandler)
+    throws TransformerConfigurationException;
+
+  private native Object newStylesheetFromDoc (GnomeDocument doc)
+    throws TransformerConfigurationException;
+
+  //--- Implementation of javax.xml.transform.Transformer follows.
+
+  // Set, get and clear the parameters to use on transformation
+
+  public synchronized void setParameter (String parameter, Object value)
+  {
+    parameters.put (parameter, value);
+  } 
+
+  public synchronized Object getParameter (String name)
+  {
+    return parameters.get (name);
+  }
+
+  public synchronized void clearParameters ()
+  {
+    parameters.clear ();
+  }
+
+  // Set and get the ErrorListener to use on transformation
+
+  public void setErrorListener (ErrorListener listener)
+  {
+    this.errorListener = listener;
+  } 
+
+  public ErrorListener getErrorListener ()
+  {
+    return errorListener;
+  }
+
+  // Set and get the URIResolver to use on transformation
+
+  public void setURIResolver (URIResolver resolver)
+  {
+    this.resolver = resolver;
+  } 
+
+  public URIResolver getURIResolver ()
+  {
+    return resolver;
+  }
+
+  // Set the output properties to use on transformation; get default
+  // output properties and output properties specified in the
+  // stylesheet or by the user.
+
+  public void setOutputProperties (Properties outputProperties)
+  {
+    // Note: defensive copying
+    this.outputProperties = new Properties (outputProperties);
+  } 
+
+  public void setOutputProperty (String name, String value)
+  {
+    outputProperties.setProperty (name, value);
+  } 
+
+  public Properties getOutputProperties ()
+  {
+    // Note: defensive copying
+    return new Properties (this.outputProperties);
+  }
+
+  public String getOutputProperty (String name)
+  {
+    return outputProperties.getProperty (name);
+  }
+
+  // -- Templates --
+
+  public Transformer newTransformer ()
+  {
+    return new GnomeTransformer (stylesheet, resolver, errorListener,
+                                 new HashMap (parameters),
+                                 new Properties (outputProperties));
+  }
+
+  // -- transform --
+
+  /**
+   * Transforms the given source and writes the result to the
+   * given target.
+   */
+  public void transform (Source source, Result result)
+    throws TransformerException
+  {
+    if (source instanceof StreamSource)
+      {
+        try
+          {
+            StreamSource ss = (StreamSource) source;
+            NamedInputStream in = XMLJ.getInputStream (ss);
+            String publicId = ss.getPublicId ();
+            String systemId = ss.getSystemId ();
+            String base = XMLJ.getBaseURI (systemId);
+            byte[] detectBuffer = in.getDetectBuffer ();
+            if (detectBuffer == null)
+              {
+                throw new TransformerException ("No document element");
+              }
+            if (result instanceof StreamResult)
+              {
+                OutputStream out = XMLJ.getOutputStream ((StreamResult) result);
+                transformStreamToStream (in, detectBuffer, publicId, systemId,
+                                         base, (resolver != null),
+                                         (errorListener != null), out);
+              }
+            else if (result instanceof DOMResult)
+              {
+                DOMResult dr = (DOMResult) result;
+                GnomeDocument ret =
+                  transformStreamToDoc (in, detectBuffer, publicId, systemId,
+                                        base, (resolver != null),
+                                        (errorListener != null));
+                dr.setNode (ret);
+                dr.setSystemId (null);
+              }
+            else if (result instanceof SAXResult)
+              {
+                SAXResult sr = (SAXResult) result;
+                transformStreamToSAX (in, detectBuffer, publicId, systemId,
+                                      base, (resolver != null),
+                                      (errorListener != null),
+                                      getSAXContext (sr));
+              }
+            else
+              {
+                String msg = "Result type not supported (" + result + ")";
+                throw new TransformerConfigurationException (msg);
+              }
+          }
+        catch (IOException e)
+          {
+            throw new TransformerException (e);
+          }
+      }
+    else if (source instanceof DOMSource)
+      {
+        DOMSource ds = (DOMSource) source;
+        Node node = ds.getNode ();
+        if (!(node instanceof GnomeDocument))
+          {
+            String msg = "Node is not a GnomeDocument (" + node + ")";
+            throw new TransformerException (msg);
+          }
+        GnomeDocument doc = (GnomeDocument) node;
+        if (result instanceof StreamResult)
+          {
+            try
+              {
+                OutputStream out = XMLJ.getOutputStream ((StreamResult) result);
+                transformDocToStream (doc, out);
+              }
+            catch (IOException e)
+              {
+                throw new TransformerException (e);
+              }
+          }
+        else if (result instanceof DOMResult)
+          {
+            DOMResult dr = (DOMResult) result;
+            GnomeDocument ret = transformDocToDoc (doc);
+            dr.setNode (ret);
+            dr.setSystemId (null);
+          }
+        else if (result instanceof SAXResult)
+          {
+            SAXResult sr = (SAXResult) result;
+            transformDocToSAX (doc, getSAXContext (sr));
+          }
+        else
+          {
+            String msg = "Result type not supported";
+            throw new TransformerConfigurationException (msg);
+          }
+      }
+    else
+      {
+        String msg = "Source type not supported";
+        throw new TransformerConfigurationException (msg);
+      }
+  }
+
+  private GnomeXMLReader getSAXContext (SAXResult result)
+  {
+    GnomeXMLReader ctx = new GnomeXMLReader ();
+    ctx.setContentHandler (result.getHandler ());
+    ctx.setLexicalHandler (result.getLexicalHandler ());
+    if (errorListener != null)
+      {
+        ErrorHandler errorHandler =
+          new ErrorListenerErrorHandler (errorListener);
+        ctx.setErrorHandler (errorHandler);
+      }
+    if (resolver != null)
+      {
+        EntityResolver entityResolver =
+          new URIResolverEntityResolver (resolver);
+        ctx.setEntityResolver (entityResolver);
+      }
+    return ctx;
+  }
+
+  private native void transformStreamToStream (InputStream in,
+                                               byte[] detectBuffer,
+                                               String publicId,
+                                               String systemId,
+                                               String base,
+                                               boolean entityResolver,
+                                               boolean errorHandler,
+                                               OutputStream out)
+    throws TransformerException;
+
+  private native GnomeDocument transformStreamToDoc (InputStream in,
+                                                     byte[] detectBuffer,
+                                                     String publicId,
+                                                     String systemId,
+                                                     String base,
+                                                     boolean entityResolver,
+                                                     boolean errorHandler)
+    throws TransformerException;
+
+  private native void transformStreamToSAX (InputStream in,
+                                            byte[] detectBuffer,
+                                            String publicId,
+                                            String systemId,
+                                            String base,
+                                            boolean entityResolver,
+                                            boolean errorHandler,
+                                            GnomeXMLReader out)
+    throws TransformerException;
+
+  private native void transformDocToStream (GnomeDocument in,
+                                            OutputStream out)
+    throws TransformerException;
+
+  private native GnomeDocument transformDocToDoc (GnomeDocument in)
+    throws TransformerException;
+
+  private native void transformDocToSAX (GnomeDocument in,
+                                         GnomeXMLReader out)
+    throws TransformerException;
+
+  /*
+   * Retrieve parameters as a string array.
+   * This is a convenience method called from native code.
+   */
+  private String[] getParameterArray ()
+  {
+    String[] parameterArray = new String[parameters.size () * 2];
+    int index = 0;
+    for (Iterator it = parameters.keySet ().iterator ();
+         it.hasNext ();
+         ++index)
+      {
+        String parameterKey = (String) it.next ();
+        String parameterValue = (String) parameters.get (parameterKey);
+        parameterArray[index * 2 + 0] = parameterKey;
+        parameterArray[index * 2 + 1] =
+          "'" + ((parameterValue != null) ? parameterValue : "") + "'";
+        // FIXME encode parameter value correctly for XPath
+      }
+    return parameterArray;
+  }
+
+  // -- Free xsltStylesheet handle --
+
+  public void finalize ()
+  {
+    if (stylesheet != null)
+      {
+        free ();
+        stylesheet = null;
+      }
+  }
+
+  private native void free ();
+
+  // -- Callbacks --
+
+  private InputStream resolveEntity (String publicId, String systemId)
+    throws TransformerException
+  {
+    if (resolver != null)
+      {
+        systemId = resolver.resolve (null, systemId).getSystemId ();
+      }
+    if (systemId == null)
+      {
+        return null;
+      }
+    try
+      {
+        URL url = new URL (systemId);
+        return XMLJ.getInputStream (url);
+      }
+    catch (IOException e)
+      {
+        throw new TransformerException (e);
+      }
+  }
+  
+  private void setDocumentLocator (Object ctx, Object loc)
+  {
+  }
+
+  private void warning (String message,
+                        int lineNumber,
+                        int columnNumber,
+                        String publicId,
+                        String systemId)
+    throws TransformerException
+  {
+    if (errorListener == null)
+      {
+        return;
+      }
+    SourceLocator l = new StandaloneLocator (lineNumber,
+                                             columnNumber,
+                                             publicId,
+                                             systemId);
+    errorListener.warning (new TransformerException (message, l));
+  }
+
+  private void error (String message,
+                      int lineNumber,
+                      int columnNumber,
+                      String publicId,
+                      String systemId)
+    throws TransformerException
+  {
+    if (errorListener == null)
+      {
+        return;
+      }
+    SourceLocator l = new StandaloneLocator (lineNumber,
+                                             columnNumber,
+                                             publicId,
+                                             systemId);
+    errorListener.error (new TransformerException (message, l));
+  }
+  
+  private void fatalError (String message,
+                           int lineNumber,
+                           int columnNumber,
+                           String publicId,
+                           String systemId)
+    throws TransformerException
+  {
+    if (errorListener == null)
+      {
+        return;
+      }
+    SourceLocator l = new StandaloneLocator (lineNumber,
+                                             columnNumber,
+                                             publicId,
+                                             systemId);
+    errorListener.fatalError (new TransformerException (message, l));
+  }
+  
+}
Index: libjava/gnu/xml/libxmlj/transform/GnomeTransformerFactory.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/transform/GnomeTransformerFactory.java
diff -N libjava/gnu/xml/libxmlj/transform/GnomeTransformerFactory.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/transform/GnomeTransformerFactory.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,349 @@
+/* GnomeTransformerFactory.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.transform;
+
+import java.io.InputStream;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.xml.parsers.FactoryConfigurationError;
+import javax.xml.parsers.ParserConfigurationException;
+import javax.xml.parsers.SAXParser;
+import javax.xml.parsers.SAXParserFactory;
+
+import javax.xml.transform.ErrorListener;
+import javax.xml.transform.Source;
+import javax.xml.transform.Templates;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.TransformerConfigurationException;
+import javax.xml.transform.URIResolver;
+
+import javax.xml.transform.dom.DOMResult;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.sax.SAXSource;
+import javax.xml.transform.stream.StreamResult;
+import javax.xml.transform.stream.StreamSource;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.Node;
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
+import org.xml.sax.XMLReader;
+import org.xml.sax.helpers.DefaultHandler;
+
+import gnu.xml.libxmlj.util.XMLJ;
+
+/**
+ *  An implementation of <code>TransformerFactory</code> producing
+ *  <code>Transformer</code> objects which use <code>libxslt</code>
+ *  for transformation.
+ *
+ *  @author Julian Scheid
+ *  @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public class GnomeTransformerFactory
+  extends TransformerFactory
+{
+
+  static
+  {
+    XMLJ.init ();
+  }
+  
+  /**
+   *  URIResolver set by user, or default implementation.
+   */
+  private URIResolver uriResolver;
+
+  /**
+   *  ErrorListener set by user, or default implementation.
+   */
+  private ErrorListener errorListener;
+
+  /**
+   *  Attributes set by user.
+   */
+  private Map attributes = new HashMap ();
+
+  //--- Implementation of javax.xml.transform.TransformerFactory
+  //--- follows.
+  
+  // -- begin getAssociatedStylesheet implementation --
+
+  /**
+   * Returns the stylesheet associated with the specified XML source, or
+   * <code>null</code> if no associated stylesheet could be found.
+   */
+  public Source getAssociatedStylesheet(Source source, String media,
+                                        String title, String charset) 
+    throws TransformerConfigurationException
+  {
+    String href= null;
+    String base = source.getSystemId();
+    if (source instanceof DOMSource)
+      {
+        Node node = ((DOMSource) source).getNode();
+        Document doc = (node.getNodeType() == Node.DOCUMENT_NODE) ?
+          (Document) node : node.getOwnerDocument();
+        if (base == null)
+          {
+            base = doc.getDocumentURI();
+          }
+        for (node = doc.getFirstChild(); node != null;
+             node = node.getNextSibling())
+          {
+            if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE &&
+                "xml-stylesheet".equals(node.getNodeName()))
+              {
+                String data = node.getNodeValue();
+                if (media != null &&
+                    !media.equals(parseParameter(data, "type")))
+                  {
+                    continue;
+                  }
+                if (title != null &&
+                    !title.equals(parseParameter(data, "title")))
+                  {
+                    continue;
+                  }
+                href = parseParameter(data, "href");
+              }
+          }
+      }
+    else
+      {
+        InputSource input;
+        XMLReader parser = null;
+        try
+          {
+            if (source instanceof SAXSource)
+              {
+                SAXSource sax = (SAXSource) source;
+                input = sax.getInputSource();
+                parser = sax.getXMLReader();
+              }
+            else
+              {
+                StreamSource stream = (StreamSource) source;
+                InputStream in = stream.getInputStream();
+                input = new InputSource(in);
+              }
+            input.setSystemId(base);
+            if (parser == null)
+              {
+                parser = createXMLReader();
+              }
+            AssociatedStylesheetHandler ash =
+              new AssociatedStylesheetHandler();
+            ash.media = media;
+            ash.title = title;
+            parser.setContentHandler(ash);
+            parser.parse(input);
+            href = ash.href;
+          }
+        catch (SAXException e)
+          {
+            throw new TransformerConfigurationException(e);
+          }
+        catch (IOException e)
+          {
+            throw new TransformerConfigurationException(e);
+          }
+      }
+    if (href == null)
+      {
+        return null;
+      }
+    if (base != null)
+      {
+        base = XMLJ.getBaseURI(base);
+      }
+    href = XMLJ.getAbsoluteURI(base, href);
+    return new StreamSource(href);
+  }
+
+  private XMLReader createXMLReader()
+    throws TransformerConfigurationException
+  {
+    try
+      {
+        SAXParserFactory factory = SAXParserFactory.newInstance();
+        SAXParser parser = factory.newSAXParser();
+        return parser.getXMLReader();
+      }
+    catch (FactoryConfigurationError e)
+      {
+        throw new TransformerConfigurationException(e);
+      }
+    catch (ParserConfigurationException e)
+      {
+        throw new TransformerConfigurationException(e);
+      }
+    catch (SAXException e)
+      {
+        throw new TransformerConfigurationException(e);
+      }
+  }
+
+  class AssociatedStylesheetHandler
+    extends DefaultHandler
+  {
+    
+    String media;
+    String title;
+    String href;
+
+    public void processingInstruction(String target, String data)
+      throws SAXException
+    {
+      if ("xml-stylesheet".equals(target))
+        {
+          if (media != null && !media.equals(parseParameter(data, "type")))
+            {
+              return;
+            }
+          if (title != null && !title.equals(parseParameter(data, "title")))
+            {
+              return;
+            }
+          href = parseParameter(data, "href");
+        }
+    }
+    
+  }
+
+  String parseParameter(String data, String name)
+  {
+    int start = data.indexOf(name + "=");
+    if (start != -1)
+      {
+        start += name.length() + 2;
+        char delim = data.charAt(start - 1);
+        int end = data.indexOf(delim, start);
+        if (end != -1)
+          {
+            return data.substring(start, end);
+          }
+      }
+    return null;
+  }
+
+  // -- end getAssociatedStylesheet implementation --
+
+  public synchronized void setAttribute (String name, Object value)
+  {
+    this.attributes.put (name, value);
+  } 
+
+  public synchronized Object getAttribute (String name)
+  {
+    return attributes.get (name);
+  }
+  
+  public void setErrorListener (ErrorListener errorListener)
+  {
+    this.errorListener = errorListener;
+  } 
+
+  public ErrorListener getErrorListener ()
+  {
+    return errorListener;
+  }
+  
+  public void setURIResolver (URIResolver uriResolver)
+  {
+    this.uriResolver = uriResolver;
+  } 
+
+  public URIResolver getURIResolver ()
+  {
+    return uriResolver;
+  }
+  
+  public boolean getFeature (String name)
+  {
+    return (StreamSource.FEATURE.equals (name) ||
+            StreamResult.FEATURE.equals (name) ||
+            DOMSource.FEATURE.equals (name) ||
+            DOMResult.FEATURE.equals (name));
+  }
+
+  public void setFeature(String name, boolean value)
+    throws TransformerConfigurationException
+  {
+    throw new TransformerConfigurationException(name);
+  }
+
+  /**
+   *  Returns a new instance of class {@link Transformer} for a
+   *  null souce.
+   */
+  public Transformer newTransformer ()
+    throws TransformerConfigurationException
+  {
+    return newTransformer (null);
+  }
+
+  /**
+   *  Returns a new instance of class {@link Transformer} for
+   *  the given souce.
+   */
+  public Transformer newTransformer (Source source)
+    throws TransformerConfigurationException
+  {
+    return new GnomeTransformer (source, uriResolver, errorListener);
+  }
+
+  /**
+   *  Returns a new instance of class {@link Templates} for
+   *  the given souce.
+   */
+  public Templates newTemplates (Source source) 
+    throws TransformerConfigurationException
+  {
+    return new GnomeTransformer (source, uriResolver, errorListener);
+  }
+
+  /**
+   *  Perform native cleanup.
+   */
+  public static native void freeLibxsltGlobal ();
+
+}
Index: libjava/gnu/xml/libxmlj/transform/URIResolverEntityResolver.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/transform/URIResolverEntityResolver.java
diff -N libjava/gnu/xml/libxmlj/transform/URIResolverEntityResolver.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/transform/URIResolverEntityResolver.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,87 @@
+/* URIResolverEntityResolver.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.transform;
+
+import java.io.IOException;
+import javax.xml.transform.URIResolver;
+import javax.xml.transform.TransformerException;
+import javax.xml.transform.sax.SAXSource;
+import org.xml.sax.EntityResolver;
+import org.xml.sax.InputSource;
+import org.xml.sax.SAXException;
+
+/**
+ * Provides an EntityResolver interface to a URIResolver.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class URIResolverEntityResolver
+implements EntityResolver
+{
+
+  private URIResolver resolver;
+
+  URIResolverEntityResolver (URIResolver resolver)
+  {
+    this.resolver = resolver;
+  }
+
+  public InputSource resolveEntity (String publicId, String systemId)
+    throws SAXException, IOException
+  {
+    try
+      {
+        return SAXSource.sourceToInputSource (resolver.resolve (systemId,
+                                                                null));
+      }
+    catch (TransformerException e)
+      {
+        Throwable cause = e.getCause ();
+        if (cause instanceof SAXException)
+          {
+            throw (SAXException) cause;
+          }
+        else if (cause instanceof IOException)
+          {
+            throw (IOException) cause;
+          }
+        throw new SAXException (e);
+      }
+  }
+
+}
Index: libjava/gnu/xml/libxmlj/transform/package.html
===================================================================
RCS file: libjava/gnu/xml/libxmlj/transform/package.html
diff -N libjava/gnu/xml/libxmlj/transform/package.html
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/transform/package.html	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,14 @@
+<body>
+<p>
+  A JAXP-compliant wrapper for the XSLT C library for Gnome, also
+  known as libxslt. Allows to use libxslt via the Java API for XML
+  processing.
+</p>
+
+<p>
+  <b>Usage:</b>
+    <li>Set the system property <code>javax.xml.transform.TransformerFactory</code>
+        to <code>gnu.xml.libxmlj.GnomeTransformerFactory</code>.</li>
+  </ul>
+</p>
+</body>
Index: libjava/gnu/xml/libxmlj/util/EmptyNodeList.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/util/EmptyNodeList.java
diff -N libjava/gnu/xml/libxmlj/util/EmptyNodeList.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/util/EmptyNodeList.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,62 @@
+/* EmptyNodeList.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.util;
+
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+
+/**
+ * An empty node list.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+class EmptyNodeList
+implements NodeList
+{
+
+  public Node item (int index)
+  {
+    return null;
+  }
+
+  public int getLength ()
+  {
+    return 0;
+  }
+  
+}
Index: libjava/gnu/xml/libxmlj/util/NamedInputStream.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/util/NamedInputStream.java
diff -N libjava/gnu/xml/libxmlj/util/NamedInputStream.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/util/NamedInputStream.java	9 Jul 2005 22:09:44 -0000
@@ -0,0 +1,99 @@
+/* NamedInputStream.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.util;
+
+import java.io.FilterInputStream;
+import java.io.InputStream;
+import java.io.IOException;
+import java.io.PushbackInputStream;
+
+/**
+ * An input stream associated with an XML system ID.
+ * It can report the system ID and the first few bytes of the stream
+ * in order to detect the character encoding of the stream.
+ *
+ * @author <a href='dog@gnu.org'>Chris Burdess</a>
+ */
+public class NamedInputStream
+extends FilterInputStream
+{
+
+  private static int DETECT_BUFFER_SIZE = 50;
+  
+  private String name;
+
+  NamedInputStream (String name, InputStream in, int size)
+  {
+    super (new PushbackInputStream (in, size));
+    this.name = name;
+  }
+
+  /**
+   * Returns the name of the stream (the XML system ID).
+   */
+  public String getName ()
+  {
+    return name;
+  }
+
+  /**
+   * Returns the first few bytes of the stream for character encoding
+   * purposes. The entire stream can thereafter be read normally from the
+   * beginning. This method is only valid if no bytes have yet been read
+   * from the stream.
+   */
+  public byte[] getDetectBuffer ()
+    throws IOException
+  {
+    PushbackInputStream p = (PushbackInputStream) in;
+    byte[] buffer = new byte[DETECT_BUFFER_SIZE];
+    int len = p.read (buffer);
+    if (len < 0)
+      {
+        return null;
+      }
+    else
+      {
+        p.unread (buffer, 0, len);
+        byte[] ret = new byte[len];
+        System.arraycopy (buffer, 0, ret, 0, len);
+        return ret;
+      }
+  }
+  
+}
Index: libjava/gnu/xml/libxmlj/util/StandaloneDocumentType.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/util/StandaloneDocumentType.java
diff -N libjava/gnu/xml/libxmlj/util/StandaloneDocumentType.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/util/StandaloneDocumentType.java	9 Jul 2005 22:09:45 -0000
@@ -0,0 +1,294 @@
+/* StandaloneDocumentType.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.util;
+
+import org.w3c.dom.Document;
+import org.w3c.dom.DocumentType;
+import org.w3c.dom.DOMException;
+import org.w3c.dom.NamedNodeMap;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+import org.w3c.dom.UserDataHandler;
+
+/**
+ * A "standalone" document type, i.e. one that isn't attached to a document
+ * node.
+ * This can be used to create new documents.
+ */
+public final class StandaloneDocumentType
+implements DocumentType
+{
+
+  private final String name;
+  private final String publicId;
+  private final String systemId;
+
+  public StandaloneDocumentType (String name, String publicId, String systemId)
+  {
+    this.name = name;
+    this.publicId = publicId;
+    this.systemId = systemId;
+  }
+
+  public String getName ()
+  {
+    return name;
+  }
+
+  public NamedNodeMap getEntities ()
+  {
+    // TODO
+    return null;
+  }
+  
+  public NamedNodeMap getNotations ()
+  {
+    // TODO
+    return null;
+  }
+
+  public String getPublicId ()
+  {
+    return publicId;
+  }
+
+  public String getSystemId ()
+  {
+    return systemId;
+  }
+
+  public String getInternalSubset ()
+  {
+    return null;
+  }
+  
+  // -- Node --
+
+  public String getNodeName ()
+  {
+    return getName ();
+  }
+
+  public String getNodeValue ()
+    throws DOMException
+  {
+    return null;
+  }
+  
+  public void setNodeValue (String nodeValue)
+    throws DOMException
+  {
+  }
+
+  public short getNodeType ()
+  {
+    return DOCUMENT_TYPE_NODE;
+  }
+
+  public Node getParentNode ()
+  {
+    return null;
+  }
+
+  public NodeList getChildNodes ()
+  {
+    return new EmptyNodeList ();
+  }
+
+  public Node getFirstChild ()
+  {
+    return null;
+  }
+
+  public Node getLastChild ()
+  {
+    return null;
+  }
+
+  public Node getPreviousSibling ()
+  {
+    return null;
+  }
+
+  public Node getNextSibling ()
+  {
+    return null;
+  }
+
+  public NamedNodeMap getAttributes ()
+  {
+    return null;
+  }
+
+  public Document getOwnerDocument ()
+  {
+    return null;
+  }
+
+  public Node insertBefore (Node newChild, Node refChild)
+    throws DOMException
+  {
+    throw new DOMException (DOMException.NO_MODIFICATION_ALLOWED_ERR, null);
+  }
+
+  public Node replaceChild (Node newChild, Node oldChild)
+    throws DOMException
+  {
+    throw new DOMException (DOMException.NO_MODIFICATION_ALLOWED_ERR, null);
+  }
+
+  public Node removeChild (Node oldChild)
+    throws DOMException
+  {
+    throw new DOMException (DOMException.NO_MODIFICATION_ALLOWED_ERR, null);
+  }
+
+  public Node appendChild (Node oldChild)
+    throws DOMException
+  {
+    throw new DOMException (DOMException.NO_MODIFICATION_ALLOWED_ERR, null);
+  }
+
+  public boolean hasChildNodes ()
+  {
+    return false;
+  }
+
+  public Node cloneNode (boolean deep)
+  {
+    return new StandaloneDocumentType (name, publicId, systemId);
+  }
+
+  public void normalize ()
+  {
+  }
+
+  public boolean isSupported (String feature, String version)
+  {
+    return false;
+  }
+
+  public String getNamespaceURI ()
+  {
+    return null;
+  }
+
+  public String getPrefix ()
+  {
+    return null;
+  }
+
+  public void setPrefix (String prefix)
+  {
+    throw new DOMException (DOMException.NO_MODIFICATION_ALLOWED_ERR, null);
+  }
+
+  public String getLocalName ()
+  {
+    return getName ();
+  }
+
+  public boolean hasAttributes ()
+  {
+    return false;
+  }
+
+  // DOM Level 3
+
+  public String getBaseURI ()
+  {
+    return null;
+  }
+
+  public short compareDocumentPosition (Node node)
+  {
+    return -1;
+  }
+
+  public String getTextContent ()
+  {
+    return null;
+  }
+
+  public void setTextContent (String content)
+  {
+    throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR, null);
+  }
+
+  public boolean isSameNode (Node other)
+  {
+    return equals (other);
+  }
+  
+  public String lookupPrefix (String namespace)
+  {
+    return null;
+  }
+  
+  public boolean isDefaultNamespace (String namespace)
+  {
+    return false;
+  }
+
+  public String lookupNamespaceURI (String prefix)
+  {
+    return null;
+  }
+
+  public boolean isEqualNode (Node other)
+  {
+    return equals (other);
+  }
+
+  public Object getFeature (String feature, String version)
+  {
+    return null;
+  }
+
+  public Object setUserData (String name, Object value,
+                             UserDataHandler handler)
+  {
+    return null;
+  }
+
+  public Object getUserData (String name)
+  {
+    return null;
+  }
+
+}
Index: libjava/gnu/xml/libxmlj/util/StandaloneLocator.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/util/StandaloneLocator.java
diff -N libjava/gnu/xml/libxmlj/util/StandaloneLocator.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/util/StandaloneLocator.java	9 Jul 2005 22:09:45 -0000
@@ -0,0 +1,89 @@
+/* StandaloneLocator.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.util;
+
+import javax.xml.transform.SourceLocator;
+import org.xml.sax.Locator;
+
+/**
+ * SAX Locator implementation that uses the specified values.
+ *
+ * @author <a href='mailto:dog@gnu.org'>Chris Burdess</a>
+ */
+public final class StandaloneLocator
+implements Locator, SourceLocator
+{
+
+  private final int lineNumber;
+
+  private final int columnNumber;
+
+  private final String publicId;
+
+  private final String systemId;
+
+  public StandaloneLocator (int lineNumber, int columnNumber,
+                            String publicId, String systemId)
+  {
+    this.lineNumber = lineNumber;
+    this.columnNumber = columnNumber;
+    this.publicId = publicId;
+    this.systemId = systemId;
+  }
+  
+  public String getPublicId ()
+  {
+    return publicId;
+  }
+  
+  public String getSystemId ()
+  {
+    return systemId;
+  }
+
+  public int getLineNumber ()
+  {
+    return lineNumber;
+  }
+
+  public int getColumnNumber ()
+  {
+    return columnNumber;
+  }
+
+}
Index: libjava/gnu/xml/libxmlj/util/XMLJ.java
===================================================================
RCS file: libjava/gnu/xml/libxmlj/util/XMLJ.java
diff -N libjava/gnu/xml/libxmlj/util/XMLJ.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/gnu/xml/libxmlj/util/XMLJ.java	9 Jul 2005 22:09:45 -0000
@@ -0,0 +1,280 @@
+/* XMLJ.java - 
+   Copyright (C) 2004 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.xml.libxmlj.util;
+
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.InputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.io.Reader;
+import java.io.Writer;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLConnection;
+
+import javax.xml.transform.Result;
+import javax.xml.transform.Source;
+import javax.xml.transform.sax.SAXSource;
+import javax.xml.transform.stream.StreamResult;
+import javax.xml.transform.stream.StreamSource;
+
+import org.xml.sax.InputSource;
+
+import gnu.xml.libxmlj.transform.GnomeTransformerFactory;
+
+import gnu.xml.dom.ls.ReaderInputStream;
+import gnu.xml.dom.ls.WriterOutputStream;
+
+/**
+ * Utility functions for libxmlj.
+ */
+public final class XMLJ
+{
+
+  static class XMLJShutdownHook
+    implements Runnable
+  {
+    
+    public void run ()
+    {
+      // Make sure finalizers are run
+      System.gc ();
+      Runtime.getRuntime ().runFinalization ();
+      
+      // Perform global cleanup on the native level
+      GnomeTransformerFactory.freeLibxsltGlobal ();
+    }
+  
+  }
+
+  private static boolean initialised = false;
+  
+  public static void init ()
+  {
+    if (!initialised)
+      {
+        System.loadLibrary ("xmlj");
+        
+        XMLJShutdownHook hook = new XMLJShutdownHook ();  
+        Runtime.getRuntime ().addShutdownHook (new Thread (hook));
+      }
+    initialised = true;
+  }
+
+  private static final int LOOKAHEAD = 50;
+  
+  /**
+   * Returns an input stream for the specified input source.
+   * This returns a pushback stream that libxmlj can use to detect the
+   * character encoding of the stream.
+   */
+  public static NamedInputStream getInputStream (InputSource input)
+    throws IOException
+  {
+    InputStream in = input.getByteStream ();
+    String systemId = input.getSystemId ();
+    if (in == null)
+      {
+       Reader r = input.getCharacterStream();
+       if (r != null)
+         in = new ReaderInputStream(r);
+      }
+    if (in == null)
+      {
+        in = getInputStream(systemId);
+      }
+    return new NamedInputStream (systemId, in, LOOKAHEAD);
+  }
+
+  /**
+   * Returns an input stream for the specified transformer source.
+   * This returns a pushback stream that libxmlj can use to detect the
+   * character encoding of the stream.
+   */
+  public static NamedInputStream getInputStream (Source source)
+    throws IOException
+  {
+    if (source instanceof SAXSource)
+      {
+        return getInputStream (((SAXSource) source).getInputSource ());
+      }
+    InputStream in = null;
+    String systemId = source.getSystemId ();
+    if (source instanceof StreamSource)
+      {
+        in = ((StreamSource) source).getInputStream ();
+      }
+    if (in == null)
+      {
+        in = getInputStream(systemId);
+      }
+    return new NamedInputStream (systemId, in, LOOKAHEAD);
+  }
+
+  private static InputStream getInputStream(String systemId)
+    throws IOException
+  {
+    if (systemId == null)
+      {
+        throw new IOException("no system ID");
+      }
+    try
+      {
+        return new URL(systemId).openStream();
+      }
+    catch (MalformedURLException e)
+      {
+        return new FileInputStream(systemId);
+      }
+  }
+
+  /**
+   * Returns an input stream for the specified URL.
+   * This returns a pushback stream that libxmlj can use to detect the
+   * character encoding of the stream.
+   */
+  public static NamedInputStream getInputStream (URL url)
+    throws IOException
+  {
+    return new NamedInputStream (url.toString (), url.openStream(),
+                                 LOOKAHEAD);
+  }
+
+  /**
+   * Convenience method for xmljDocLoader
+   */
+  static NamedInputStream xmljGetInputStream(String base, String url)
+    throws IOException
+  {
+    try
+      {
+        if (base != null)
+          {
+            url = new URL(new URL(base), url).toString();
+          }
+      }
+    catch (MalformedURLException e)
+      {
+      }
+    InputStream in = getInputStream(url);
+    return new NamedInputStream(url, in, LOOKAHEAD);
+  }
+
+  /**
+   * Returns an output stream for the specified transformer result.
+   */
+  public static OutputStream getOutputStream (Result result)
+    throws IOException
+  {
+    OutputStream out = null;
+    if (result instanceof StreamResult)
+      {
+        out = ((StreamResult) result).getOutputStream ();
+      }
+    if (out == null)
+      {
+       Writer w = ((StreamResult) result).getWriter ();
+       if (w != null)
+         out = new WriterOutputStream (w);
+      }
+    if (out == null)
+      {
+        String systemId = result.getSystemId ();
+        if (systemId == null)
+          {
+            throw new IOException ("no system ID");
+          }
+        try
+          {
+            URL url = new URL (systemId);
+            URLConnection connection = url.openConnection ();
+            connection.setDoOutput (true);
+            out = connection.getOutputStream ();
+          }
+        catch (MalformedURLException e)
+          {
+            out = new FileOutputStream (systemId);
+          }
+      }
+
+    return out;
+  }
+
+  /**
+   * Returns the absolute form of the specified URI.
+   * If the URI is already absolute, returns it as-is.
+   * Otherwise returns a new URI relative to the given base URI.
+   */
+  public static String getAbsoluteURI (String base, String uri)
+  {
+    if (uri != null &&
+        base != null &&
+        (uri.length() > 0) &&
+        (uri.indexOf(':') == -1) &&
+        (uri.charAt(0) != '/'))
+      {
+        // URI is relative
+        if (base.charAt(base.length() - 1) != '/')
+          {
+            int i = base.lastIndexOf('/');
+            base = base.substring(0, i + 1);
+          }
+        return base + uri;
+      }
+    else
+      {
+        // URI is absolute or no base specified
+        return uri;
+      }
+  }
+
+  public static String getBaseURI(String uri)
+  {
+    if (uri != null)
+      {
+        int si = uri.lastIndexOf('/');
+        if (si != -1)
+          {
+            uri = uri.substring(0, si + 1);
+          }
+      }
+    return uri;
+  }
+  
+}
Index: libjava/gnu/xml/pipeline/CallFilter.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/pipeline/CallFilter.java,v
retrieving revision 1.2
diff -u -r1.2 CallFilter.java
--- libjava/gnu/xml/pipeline/CallFilter.java	17 Feb 2005 18:26:32 -0000	1.2
+++ libjava/gnu/xml/pipeline/CallFilter.java	9 Jul 2005 22:09:45 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/pipeline/DomConsumer.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/pipeline/DomConsumer.java,v
retrieving revision 1.2
diff -u -r1.2 DomConsumer.java
--- libjava/gnu/xml/pipeline/DomConsumer.java	17 Feb 2005 18:26:32 -0000	1.2
+++ libjava/gnu/xml/pipeline/DomConsumer.java	9 Jul 2005 22:09:45 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/pipeline/EventConsumer.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/pipeline/EventConsumer.java,v
retrieving revision 1.1
diff -u -r1.1 EventConsumer.java
--- libjava/gnu/xml/pipeline/EventConsumer.java	2 Feb 2005 00:42:09 -0000	1.1
+++ libjava/gnu/xml/pipeline/EventConsumer.java	9 Jul 2005 22:09:45 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/pipeline/EventFilter.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/pipeline/EventFilter.java,v
retrieving revision 1.1
diff -u -r1.1 EventFilter.java
--- libjava/gnu/xml/pipeline/EventFilter.java	2 Feb 2005 00:42:09 -0000	1.1
+++ libjava/gnu/xml/pipeline/EventFilter.java	9 Jul 2005 22:09:46 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/pipeline/LinkFilter.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/pipeline/LinkFilter.java,v
retrieving revision 1.2
diff -u -r1.2 LinkFilter.java
--- libjava/gnu/xml/pipeline/LinkFilter.java	17 Feb 2005 18:26:32 -0000	1.2
+++ libjava/gnu/xml/pipeline/LinkFilter.java	9 Jul 2005 22:09:46 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/pipeline/NSFilter.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/pipeline/NSFilter.java,v
retrieving revision 1.2
diff -u -r1.2 NSFilter.java
--- libjava/gnu/xml/pipeline/NSFilter.java	17 Feb 2005 18:26:32 -0000	1.2
+++ libjava/gnu/xml/pipeline/NSFilter.java	9 Jul 2005 22:09:46 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/pipeline/PipelineFactory.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/pipeline/PipelineFactory.java,v
retrieving revision 1.1
diff -u -r1.1 PipelineFactory.java
--- libjava/gnu/xml/pipeline/PipelineFactory.java	2 Feb 2005 00:42:09 -0000	1.1
+++ libjava/gnu/xml/pipeline/PipelineFactory.java	9 Jul 2005 22:09:46 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/pipeline/TeeConsumer.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/pipeline/TeeConsumer.java,v
retrieving revision 1.2
diff -u -r1.2 TeeConsumer.java
--- libjava/gnu/xml/pipeline/TeeConsumer.java	17 Feb 2005 18:26:32 -0000	1.2
+++ libjava/gnu/xml/pipeline/TeeConsumer.java	9 Jul 2005 22:09:46 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/pipeline/TextConsumer.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/pipeline/TextConsumer.java,v
retrieving revision 1.1
diff -u -r1.1 TextConsumer.java
--- libjava/gnu/xml/pipeline/TextConsumer.java	2 Feb 2005 00:42:09 -0000	1.1
+++ libjava/gnu/xml/pipeline/TextConsumer.java	9 Jul 2005 22:09:46 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/pipeline/ValidationConsumer.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/pipeline/ValidationConsumer.java,v
retrieving revision 1.2.2.1
diff -u -r1.2.2.1 ValidationConsumer.java
--- libjava/gnu/xml/pipeline/ValidationConsumer.java	17 Apr 2005 02:34:47 -0000	1.2.2.1
+++ libjava/gnu/xml/pipeline/ValidationConsumer.java	9 Jul 2005 22:09:46 -0000
@@ -1,5 +1,5 @@
 /* ValidationConsumer.java -- 
-   Copyright (C) 1999,2000,2001, 2005 Free Software Foundation, Inc.
+   Copyright (C) 1999,2000,2001 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -1323,8 +1323,7 @@
     // Content model validation
     //
 
-    // GCJ LOCAL: package private to work around gcj bug.
-    static final Recognizer	ANY = new Recognizer (null);
+    static private final Recognizer	ANY = new Recognizer (null);
 
 
     // Base class defines the calls used to validate content,
Index: libjava/gnu/xml/pipeline/WellFormednessFilter.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/pipeline/WellFormednessFilter.java,v
retrieving revision 1.2
diff -u -r1.2 WellFormednessFilter.java
--- libjava/gnu/xml/pipeline/WellFormednessFilter.java	17 Feb 2005 18:26:32 -0000	1.2
+++ libjava/gnu/xml/pipeline/WellFormednessFilter.java	9 Jul 2005 22:09:46 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/pipeline/XIncludeFilter.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/pipeline/XIncludeFilter.java,v
retrieving revision 1.2
diff -u -r1.2 XIncludeFilter.java
--- libjava/gnu/xml/pipeline/XIncludeFilter.java	17 Feb 2005 18:26:32 -0000	1.2
+++ libjava/gnu/xml/pipeline/XIncludeFilter.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/pipeline/XsltFilter.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/pipeline/XsltFilter.java,v
retrieving revision 1.2
diff -u -r1.2 XsltFilter.java
--- libjava/gnu/xml/pipeline/XsltFilter.java	17 Feb 2005 18:26:32 -0000	1.2
+++ libjava/gnu/xml/pipeline/XsltFilter.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/AbstractNumberNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/AbstractNumberNode.java,v
retrieving revision 1.1
diff -u -r1.1 AbstractNumberNode.java
--- libjava/gnu/xml/transform/AbstractNumberNode.java	2 Feb 2005 00:42:09 -0000	1.1
+++ libjava/gnu/xml/transform/AbstractNumberNode.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -66,12 +66,10 @@
   final String groupingSeparator;
   final int groupingSize;
 
-  AbstractNumberNode(TemplateNode children, TemplateNode next,
-                     TemplateNode format, String lang,
+  AbstractNumberNode(TemplateNode format, String lang,
                      int letterValue, String groupingSeparator,
                      int groupingSize)
   {
-    super(children, next);
     this.format = format;
     this.lang = lang;
     this.letterValue = letterValue;
Index: libjava/gnu/xml/transform/ApplyImportsNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/ApplyImportsNode.java,v
retrieving revision 1.2
diff -u -r1.2 ApplyImportsNode.java
--- libjava/gnu/xml/transform/ApplyImportsNode.java	17 Feb 2005 18:26:33 -0000	1.2
+++ libjava/gnu/xml/transform/ApplyImportsNode.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -50,17 +50,18 @@
   extends TemplateNode
 {
 
-  ApplyImportsNode(TemplateNode children, TemplateNode next)
-  {
-    super(children, next);
-  }
-
   TemplateNode clone(Stylesheet stylesheet)
   {
-    return new ApplyImportsNode((children == null) ? null :
-                                children.clone(stylesheet),
-                                (next == null) ? null :
-                                next.clone(stylesheet));
+    TemplateNode ret = new ApplyImportsNode();
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
   
   void doApply(Stylesheet stylesheet, QName mode,
Index: libjava/gnu/xml/transform/ApplyTemplatesNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/ApplyTemplatesNode.java,v
retrieving revision 1.1
diff -u -r1.1 ApplyTemplatesNode.java
--- libjava/gnu/xml/transform/ApplyTemplatesNode.java	2 Feb 2005 00:42:09 -0000	1.1
+++ libjava/gnu/xml/transform/ApplyTemplatesNode.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -63,11 +63,9 @@
   final List withParams;
   final boolean isDefault;
 
-  ApplyTemplatesNode(TemplateNode children, TemplateNode next,
-                     Expr select, QName mode,
+  ApplyTemplatesNode(Expr select, QName mode,
                      List sortKeys, List withParams, boolean isDefault)
   {
-    super(children, next);
     this.select = select;
     this.mode = mode;
     this.sortKeys = sortKeys;
@@ -89,12 +87,18 @@
       {
         withParams2.add(((WithParam) withParams.get(i)).clone(stylesheet));
       }
-    return new ApplyTemplatesNode((children == null) ? null :
-                                  children.clone(stylesheet),
-                                  (next == null) ? null :
-                                  next.clone(stylesheet),
-                                  select.clone(stylesheet),
-                                  mode, sortKeys2, withParams2, isDefault);
+    TemplateNode ret = new ApplyTemplatesNode(select.clone(stylesheet),
+                                              mode, sortKeys2, withParams2,
+                                              isDefault);
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
 
   void doApply(Stylesheet stylesheet, QName mode,
@@ -142,10 +146,6 @@
                                                     false);
             if (t != null)
               {
-                if (stylesheet.debug)
-                  {
-                    System.err.println("Applying " + t);
-                  }
                 stylesheet.current = node;
                 t.apply(stylesheet, effectiveMode, node, i + 1, l,
                         parent, nextSibling);
Index: libjava/gnu/xml/transform/AttributeNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/AttributeNode.java,v
retrieving revision 1.1
diff -u -r1.1 AttributeNode.java
--- libjava/gnu/xml/transform/AttributeNode.java	2 Feb 2005 00:42:09 -0000	1.1
+++ libjava/gnu/xml/transform/AttributeNode.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -60,10 +60,9 @@
   final TemplateNode namespace;
   final Node source;
   
-  AttributeNode(TemplateNode children, TemplateNode next, TemplateNode name,
+  AttributeNode(TemplateNode name,
                 TemplateNode namespace, Node source)
   {
-    super(children, next);
     this.name = name;
     this.namespace = namespace;
     this.source = source;
@@ -71,13 +70,19 @@
 
   TemplateNode clone(Stylesheet stylesheet)
   {
-    return new AttributeNode((children == null) ? null :
-                             children.clone(stylesheet),
-                             (next == null) ? null : next.clone(stylesheet),
-                             name.clone(stylesheet),
-                             (namespace == null) ? null : 
-                             namespace.clone(stylesheet),
-                             source);
+    TemplateNode ret = new AttributeNode(name.clone(stylesheet),
+                                         (namespace == null) ? null :
+                                         namespace.clone(stylesheet),
+                                         source);
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
 
   void doApply(Stylesheet stylesheet, QName mode,
Index: libjava/gnu/xml/transform/AttributeSet.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/AttributeSet.java,v
retrieving revision 1.1
diff -u -r1.1 AttributeSet.java
--- libjava/gnu/xml/transform/AttributeSet.java	2 Feb 2005 00:42:09 -0000	1.1
+++ libjava/gnu/xml/transform/AttributeSet.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/Bindings.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/Bindings.java,v
retrieving revision 1.2
diff -u -r1.2 Bindings.java
--- libjava/gnu/xml/transform/Bindings.java	17 Feb 2005 18:26:33 -0000	1.2
+++ libjava/gnu/xml/transform/Bindings.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/CallTemplateNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/CallTemplateNode.java,v
retrieving revision 1.1
diff -u -r1.1 CallTemplateNode.java
--- libjava/gnu/xml/transform/CallTemplateNode.java	2 Feb 2005 00:42:09 -0000	1.1
+++ libjava/gnu/xml/transform/CallTemplateNode.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -57,10 +57,8 @@
   final QName name;
   final List withParams;
 
-  CallTemplateNode(TemplateNode children, TemplateNode next,
-                   QName name, List withParams)
+  CallTemplateNode(QName name, List withParams)
   {
-    super(children, next);
     this.name = name;
     this.withParams = withParams;
   }
@@ -73,11 +71,16 @@
       {
         withParams2.add(((WithParam) withParams.get(i)).clone(stylesheet));
       }
-    return new CallTemplateNode((children == null) ? null :
-                                children.clone(stylesheet),
-                                (next == null) ? null :
-                                next.clone(stylesheet),
-                                name, withParams2);
+    TemplateNode ret = new CallTemplateNode(name, withParams2);
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
 
   void doApply(Stylesheet stylesheet, QName mode,
Index: libjava/gnu/xml/transform/ChooseNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/ChooseNode.java,v
retrieving revision 1.1
diff -u -r1.1 ChooseNode.java
--- libjava/gnu/xml/transform/ChooseNode.java	2 Feb 2005 00:42:09 -0000	1.1
+++ libjava/gnu/xml/transform/ChooseNode.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -50,17 +50,18 @@
   extends TemplateNode
 {
 
-  ChooseNode(TemplateNode children, TemplateNode next)
-  {
-    super(children, next);
-  }
-
   TemplateNode clone(Stylesheet stylesheet)
   {
-    return new ChooseNode((children == null) ? null :
-                          children.clone(stylesheet),
-                          (next == null) ? null :
-                          next.clone(stylesheet));
+    TemplateNode ret = new ChooseNode();
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
 
   void doApply(Stylesheet stylesheet, QName mode,
Index: libjava/gnu/xml/transform/CommentNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/CommentNode.java,v
retrieving revision 1.1
diff -u -r1.1 CommentNode.java
--- libjava/gnu/xml/transform/CommentNode.java	2 Feb 2005 00:42:09 -0000	1.1
+++ libjava/gnu/xml/transform/CommentNode.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -54,17 +54,18 @@
   extends TemplateNode
 {
 
-  CommentNode(TemplateNode children, TemplateNode next)
-  {
-    super(children, next);
-  }
-
   TemplateNode clone(Stylesheet stylesheet)
   {
-    return new CommentNode((children == null) ? null :
-                           children.clone(stylesheet),
-                           (next == null) ? null :
-                           next.clone(stylesheet));
+    TemplateNode ret = new CommentNode();
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
 
   void doApply(Stylesheet stylesheet, QName mode,
Index: libjava/gnu/xml/transform/CopyNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/CopyNode.java,v
retrieving revision 1.1
diff -u -r1.1 CopyNode.java
--- libjava/gnu/xml/transform/CopyNode.java	2 Feb 2005 00:42:09 -0000	1.1
+++ libjava/gnu/xml/transform/CopyNode.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -56,19 +56,23 @@
 
   final String uas;
 
-  CopyNode(TemplateNode children, TemplateNode next, String uas)
+  CopyNode(String uas)
   {
-    super(children, next);
     this.uas = uas;
   }
 
   TemplateNode clone(Stylesheet stylesheet)
   {
-    return new CopyNode((children == null) ? null :
-                        children.clone(stylesheet),
-                        (next == null) ? null :
-                        next.clone(stylesheet),
-                        uas);
+    TemplateNode ret = new CopyNode(uas);
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
 
   void doApply(Stylesheet stylesheet, QName mode,
Index: libjava/gnu/xml/transform/CopyOfNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/CopyOfNode.java,v
retrieving revision 1.1
diff -u -r1.1 CopyOfNode.java
--- libjava/gnu/xml/transform/CopyOfNode.java	2 Feb 2005 00:42:09 -0000	1.1
+++ libjava/gnu/xml/transform/CopyOfNode.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -61,19 +61,23 @@
 
   final Expr select;
 
-  CopyOfNode(TemplateNode children, TemplateNode next, Expr select)
+  CopyOfNode(Expr select)
   {
-    super(children, next);
     this.select = select;
   }
 
   TemplateNode clone(Stylesheet stylesheet)
   {
-    return new CopyOfNode((children == null) ? null :
-                          children.clone(stylesheet),
-                          (next == null) ? null :
-                          next.clone(stylesheet),
-                          select.clone(stylesheet));
+    TemplateNode ret = new CopyOfNode(select.clone(stylesheet));
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
 
   void doApply(Stylesheet stylesheet, QName mode,
Index: libjava/gnu/xml/transform/CurrentFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/CurrentFunction.java,v
retrieving revision 1.1
diff -u -r1.1 CurrentFunction.java
--- libjava/gnu/xml/transform/CurrentFunction.java	2 Feb 2005 00:42:09 -0000	1.1
+++ libjava/gnu/xml/transform/CurrentFunction.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/DOMSourceLocator.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/DOMSourceLocator.java,v
retrieving revision 1.1
diff -u -r1.1 DOMSourceLocator.java
--- libjava/gnu/xml/transform/DOMSourceLocator.java	2 Feb 2005 00:42:09 -0000	1.1
+++ libjava/gnu/xml/transform/DOMSourceLocator.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/DocumentFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/DocumentFunction.java,v
retrieving revision 1.2
diff -u -r1.2 DocumentFunction.java
--- libjava/gnu/xml/transform/DocumentFunction.java	17 Feb 2005 18:26:33 -0000	1.2
+++ libjava/gnu/xml/transform/DocumentFunction.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/ElementAvailableFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/ElementAvailableFunction.java,v
retrieving revision 1.1
diff -u -r1.1 ElementAvailableFunction.java
--- libjava/gnu/xml/transform/ElementAvailableFunction.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/ElementAvailableFunction.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/ElementNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/ElementNode.java,v
retrieving revision 1.1
diff -u -r1.1 ElementNode.java
--- libjava/gnu/xml/transform/ElementNode.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/ElementNode.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -67,10 +67,9 @@
   final Node source;
   final Collection elementExcludeResultPrefixes;
   
-  ElementNode(TemplateNode children, TemplateNode next, TemplateNode name,
+  ElementNode(TemplateNode name,
               TemplateNode namespace, String uas, Node source)
   {
-    super(children, next);
     this.name = name;
     this.namespace = namespace;
     this.uas = uas;
@@ -95,14 +94,19 @@
 
   TemplateNode clone(Stylesheet stylesheet)
   {
-    return new ElementNode((children == null) ? null :
-                           children.clone(stylesheet),
-                           (next == null) ? null :
-                           next.clone(stylesheet),
-                           name.clone(stylesheet),
-                           (namespace == null) ? null :
-                           namespace.clone(stylesheet),
-                           uas, source);
+    TemplateNode ret = new ElementNode(name.clone(stylesheet),
+                                       (namespace == null) ? null :
+                                       namespace.clone(stylesheet),
+                                       uas, source);
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
 
   void doApply(Stylesheet stylesheet, QName mode,
Index: libjava/gnu/xml/transform/ErrorListenerErrorHandler.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/ErrorListenerErrorHandler.java,v
retrieving revision 1.1
diff -u -r1.1 ErrorListenerErrorHandler.java
--- libjava/gnu/xml/transform/ErrorListenerErrorHandler.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/ErrorListenerErrorHandler.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/ForEachNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/ForEachNode.java,v
retrieving revision 1.1
diff -u -r1.1 ForEachNode.java
--- libjava/gnu/xml/transform/ForEachNode.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/ForEachNode.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -59,10 +59,8 @@
   final Expr select;
   final List sortKeys;
 
-  ForEachNode(TemplateNode children, TemplateNode next, Expr select,
-              List sortKeys)
+  ForEachNode(Expr select, List sortKeys)
   {
-    super(children, next);
     this.select = select;
     this.sortKeys = sortKeys;
   }
@@ -75,12 +73,17 @@
       {
         sortKeys2.add(((Key) sortKeys.get(i)).clone(stylesheet));
       }
-    return new ForEachNode((children == null) ? null :
-                           children.clone(stylesheet),
-                           (next == null) ? null :
-                           next.clone(stylesheet),
-                           select.clone(stylesheet),
-                           sortKeys2);
+    TemplateNode ret = new ForEachNode(select.clone(stylesheet),
+                                       sortKeys2);
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
 
   void doApply(Stylesheet stylesheet, QName mode,
Index: libjava/gnu/xml/transform/FormatNumberFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/FormatNumberFunction.java,v
retrieving revision 1.2
diff -u -r1.2 FormatNumberFunction.java
--- libjava/gnu/xml/transform/FormatNumberFunction.java	17 Feb 2005 18:26:33 -0000	1.2
+++ libjava/gnu/xml/transform/FormatNumberFunction.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/FunctionAvailableFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/FunctionAvailableFunction.java,v
retrieving revision 1.1
diff -u -r1.1 FunctionAvailableFunction.java
--- libjava/gnu/xml/transform/FunctionAvailableFunction.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/FunctionAvailableFunction.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/GenerateIdFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/GenerateIdFunction.java,v
retrieving revision 1.1
diff -u -r1.1 GenerateIdFunction.java
--- libjava/gnu/xml/transform/GenerateIdFunction.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/GenerateIdFunction.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/IfNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/IfNode.java,v
retrieving revision 1.1
diff -u -r1.1 IfNode.java
--- libjava/gnu/xml/transform/IfNode.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/IfNode.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -53,19 +53,23 @@
 
   final Expr test;
 
-  IfNode(TemplateNode children, TemplateNode next, Expr test)
+  IfNode(Expr test)
   {
-    super(children, next);
     this.test = test;
   }
 
   TemplateNode clone(Stylesheet stylesheet)
   {
-    return new IfNode((children == null) ? null :
-                      children.clone(stylesheet),
-                      (next == null) ? null :
-                      next.clone(stylesheet),
-                      test.clone(stylesheet));
+    TemplateNode ret = new IfNode(test.clone(stylesheet));
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
 
   void doApply(Stylesheet stylesheet, QName mode,
Index: libjava/gnu/xml/transform/Key.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/Key.java,v
retrieving revision 1.1
diff -u -r1.1 Key.java
--- libjava/gnu/xml/transform/Key.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/Key.java	9 Jul 2005 22:09:47 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/KeyFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/KeyFunction.java,v
retrieving revision 1.1
diff -u -r1.1 KeyFunction.java
--- libjava/gnu/xml/transform/KeyFunction.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/KeyFunction.java	9 Jul 2005 22:09:48 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/LiteralNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/LiteralNode.java,v
retrieving revision 1.1
diff -u -r1.1 LiteralNode.java
--- libjava/gnu/xml/transform/LiteralNode.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/LiteralNode.java	9 Jul 2005 22:09:48 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -64,9 +64,8 @@
 
   final Collection elementExcludeResultPrefixes;
 
-  LiteralNode(TemplateNode children, TemplateNode next, Node source)
+  LiteralNode(Node source)
   {
-    super(children, next);
     this.source = source;
     if (source.getNodeType() == Node.ELEMENT_NODE)
       {
@@ -95,11 +94,16 @@
 
   TemplateNode clone(Stylesheet stylesheet)
   {
-    return new LiteralNode((children == null) ? null :
-                           children.clone(stylesheet),
-                           (next == null) ? null :
-                           next.clone(stylesheet),
-                           source);
+    TemplateNode ret = new LiteralNode(source);
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
 
   void doApply(Stylesheet stylesheet, QName mode,
@@ -174,13 +178,15 @@
                       }
                   }
               }
-            result = doc.adoptNode(result);
-            if (result == null)
+            Node result2 = doc.adoptNode(result);
+            if (result2 == null)
               {
-                String msg = "Error adopting node to result tree";
+                String msg = "Error adopting node to result tree: " +
+                  result + " (" + result.getClass().getName() + ")";
                 DOMSourceLocator l = new DOMSourceLocator(context);
                 throw new TransformerException(msg, l);
               }
+            result = result2;
           }
         if (nextSibling != null)
           {
Index: libjava/gnu/xml/transform/MessageNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/MessageNode.java,v
retrieving revision 1.1
diff -u -r1.1 MessageNode.java
--- libjava/gnu/xml/transform/MessageNode.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/MessageNode.java	9 Jul 2005 22:09:48 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -55,19 +55,23 @@
 
   final boolean terminate;
 
-  MessageNode(TemplateNode children, TemplateNode next, boolean terminate)
+  MessageNode(boolean terminate)
   {
-    super(children, next);
     this.terminate = terminate;
   }
 
   TemplateNode clone(Stylesheet stylesheet)
   {
-    return new MessageNode((children == null) ? null :
-                           children.clone(stylesheet),
-                           (next == null) ? null :
-                           next.clone(stylesheet),
-                           terminate);
+    TemplateNode ret = new MessageNode(terminate);
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
 
   void doApply(Stylesheet stylesheet, QName mode,
Index: libjava/gnu/xml/transform/NodeNumberNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/NodeNumberNode.java,v
retrieving revision 1.2
diff -u -r1.2 NodeNumberNode.java
--- libjava/gnu/xml/transform/NodeNumberNode.java	17 Feb 2005 18:26:33 -0000	1.2
+++ libjava/gnu/xml/transform/NodeNumberNode.java	9 Jul 2005 22:09:48 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -68,13 +68,11 @@
   final Pattern count;
   final Pattern from;
 
-  NodeNumberNode(TemplateNode children, TemplateNode next,
-                 int level, Pattern count, Pattern from,
+  NodeNumberNode(int level, Pattern count, Pattern from,
                  TemplateNode format, String lang,
                  int letterValue, String groupingSeparator, int groupingSize)
   {
-    super(children, next, format, lang, letterValue, groupingSeparator,
-          groupingSize);
+    super(format, lang, letterValue, groupingSeparator, groupingSize);
     this.level = level;
     this.count = count;
     this.from = from;
@@ -82,17 +80,22 @@
 
   TemplateNode clone(Stylesheet stylesheet)
   {
-    return new NodeNumberNode((children == null) ? null :
-                              children.clone(stylesheet),
-                              (next == null) ? null :
-                              next.clone(stylesheet),
-                              level,
-                              (count == null) ? null :
-                              (Pattern) count.clone(stylesheet),
-                              (from == null) ? from :
-                              (Pattern) from.clone(stylesheet),
-                              format, lang, letterValue,
-                              groupingSeparator, groupingSize);
+    TemplateNode ret = new NodeNumberNode(level,
+                                          (count == null) ? null :
+                                          (Pattern) count.clone(stylesheet),
+                                          (from == null) ? from :
+                                          (Pattern) from.clone(stylesheet),
+                                          format, lang, letterValue,
+                                          groupingSeparator, groupingSize);
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
 
   int[] compute(Stylesheet stylesheet, Node context, int pos, int len)
@@ -212,7 +215,15 @@
                 return false;
               }
             String cn = current.getLocalName();
-            String nn = current.getLocalName();
+            if (cn == null)
+              {
+                cn = current.getNodeName();
+              }
+            String nn = node.getLocalName();
+            if (nn == null)
+              {
+                nn = node.getNodeName();
+              }
             if (!cn.equals(nn))
               {
                 return false;
Index: libjava/gnu/xml/transform/NumberNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/NumberNode.java,v
retrieving revision 1.2
diff -u -r1.2 NumberNode.java
--- libjava/gnu/xml/transform/NumberNode.java	17 Feb 2005 18:26:33 -0000	1.2
+++ libjava/gnu/xml/transform/NumberNode.java	9 Jul 2005 22:09:48 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -53,24 +53,27 @@
 
   final Expr value;
 
-  NumberNode(TemplateNode children, TemplateNode next,
-             Expr value, TemplateNode format, String lang,
+  NumberNode(Expr value, TemplateNode format, String lang,
              int letterValue, String groupingSeparator, int groupingSize)
   {
-    super(children, next, format, lang, letterValue, groupingSeparator,
-          groupingSize);
+    super(format, lang, letterValue, groupingSeparator, groupingSize);
     this.value = value;
   }
 
   TemplateNode clone(Stylesheet stylesheet)
   {
-    return new NumberNode((children == null) ? null :
-                          children.clone(stylesheet),
-                          (next == null) ? null :
-                          next.clone(stylesheet),
-                          value.clone(stylesheet),
-                          format, lang, letterValue,
-                          groupingSeparator, groupingSize);
+    TemplateNode ret = new NumberNode(value.clone(stylesheet),
+                                      format, lang, letterValue,
+                                      groupingSeparator, groupingSize);
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
 
   int[] compute(Stylesheet stylesheet, Node context, int pos, int len)
Index: libjava/gnu/xml/transform/OtherwiseNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/OtherwiseNode.java,v
retrieving revision 1.1
diff -u -r1.1 OtherwiseNode.java
--- libjava/gnu/xml/transform/OtherwiseNode.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/OtherwiseNode.java	9 Jul 2005 22:09:48 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -50,17 +50,18 @@
   extends TemplateNode
 {
 
-  OtherwiseNode(TemplateNode children, TemplateNode next)
-  {
-    super(children, next);
-  }
-
   TemplateNode clone(Stylesheet stylesheet)
   {
-    return new OtherwiseNode((children == null) ? null :
-                             children.clone(stylesheet),
-                             (next == null) ? null :
-                             next.clone(stylesheet));
+    TemplateNode ret = new OtherwiseNode();
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
 
   void doApply(Stylesheet stylesheet, QName mode,
Index: libjava/gnu/xml/transform/ParameterNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/ParameterNode.java,v
retrieving revision 1.1
diff -u -r1.1 ParameterNode.java
--- libjava/gnu/xml/transform/ParameterNode.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/ParameterNode.java	9 Jul 2005 22:09:48 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -59,10 +59,8 @@
   final Expr select;
   final boolean global;
 
-  ParameterNode(TemplateNode children, TemplateNode next,
-                String name, Expr select, boolean global)
+  ParameterNode(String name, Expr select, boolean global)
   {
-    super(children, next);
     this.name = name;
     this.select = select;
     this.global = global;
@@ -70,13 +68,18 @@
 
   TemplateNode clone(Stylesheet stylesheet)
   {
-    return new ParameterNode((children == null) ? null :
-                             children.clone(stylesheet),
-                             (next == null) ? null :
-                             next.clone(stylesheet),
-                             name,
-                             select.clone(stylesheet),
-                             global);
+    TemplateNode ret = new ParameterNode(name,
+                                         select.clone(stylesheet),
+                                         global);
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
 
   void doApply(Stylesheet stylesheet, QName mode,
Index: libjava/gnu/xml/transform/ProcessingInstructionNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/ProcessingInstructionNode.java,v
retrieving revision 1.1
diff -u -r1.1 ProcessingInstructionNode.java
--- libjava/gnu/xml/transform/ProcessingInstructionNode.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/ProcessingInstructionNode.java	9 Jul 2005 22:09:48 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -57,20 +57,23 @@
 
   final String name;
 
-  ProcessingInstructionNode(TemplateNode children, TemplateNode next,
-                            String name)
+  ProcessingInstructionNode(String name)
   {
-    super(children, next);
     this.name = name;
   }
 
   TemplateNode clone(Stylesheet stylesheet)
   {
-    return new ProcessingInstructionNode((children == null) ? null :
-                                         children.clone(stylesheet),
-                                         (next == null) ? null :
-                                         next.clone(stylesheet),
-                                         name);
+    TemplateNode ret = new ProcessingInstructionNode(name);
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
 
   void doApply(Stylesheet stylesheet, QName mode,
Index: libjava/gnu/xml/transform/SAXSerializer.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/SAXSerializer.java,v
retrieving revision 1.1
diff -u -r1.1 SAXSerializer.java
--- libjava/gnu/xml/transform/SAXSerializer.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/SAXSerializer.java	9 Jul 2005 22:09:48 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/SortKey.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/SortKey.java,v
retrieving revision 1.1
diff -u -r1.1 SortKey.java
--- libjava/gnu/xml/transform/SortKey.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/SortKey.java	9 Jul 2005 22:09:48 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/StreamSerializer.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/StreamSerializer.java,v
retrieving revision 1.1
diff -u -r1.1 StreamSerializer.java
--- libjava/gnu/xml/transform/StreamSerializer.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/StreamSerializer.java	9 Jul 2005 22:09:48 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -41,9 +41,14 @@
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
+import java.nio.ByteBuffer;
+import java.nio.CharBuffer;
+import java.nio.charset.Charset;
+import java.nio.charset.CharsetEncoder;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Map;
 import javax.xml.XMLConstants;
 import org.w3c.dom.Attr;
@@ -68,8 +73,85 @@
   static final int KET = 0x3e; // >
   static final int EQ = 0x3d; // =
 
-  protected String encoding;
-  boolean compatibilityMode;
+  /**
+   * HTML 4.01 boolean attributes
+   */
+  static final Map HTML_BOOLEAN_ATTRIBUTES = new HashMap();
+  static
+  {
+    HashSet set;
+    
+    set = new HashSet();
+    set.add("nohref");
+    HTML_BOOLEAN_ATTRIBUTES.put("area", set);
+
+    set = new HashSet();
+    set.add("ismap");
+    HTML_BOOLEAN_ATTRIBUTES.put("img", set);
+
+    set = new HashSet();
+    set.add("declare");
+    HTML_BOOLEAN_ATTRIBUTES.put("object", set);
+    
+    set = new HashSet();
+    set.add("noshade");
+    HTML_BOOLEAN_ATTRIBUTES.put("hr", set);
+    
+    set = new HashSet();
+    set.add("compact");
+    HTML_BOOLEAN_ATTRIBUTES.put("dl", set);
+    HTML_BOOLEAN_ATTRIBUTES.put("ol", set);
+    HTML_BOOLEAN_ATTRIBUTES.put("ul", set);
+    HTML_BOOLEAN_ATTRIBUTES.put("dir", set);
+    HTML_BOOLEAN_ATTRIBUTES.put("menu", set);
+    
+    set = new HashSet();
+    set.add("checked");
+    set.add("disabled");
+    set.add("readonly");
+    set.add("ismap");
+    HTML_BOOLEAN_ATTRIBUTES.put("input", set);
+    
+    set = new HashSet();
+    set.add("multiple");
+    set.add("disabled");
+    HTML_BOOLEAN_ATTRIBUTES.put("select", set);
+    
+    set = new HashSet();
+    set.add("disabled");
+    HTML_BOOLEAN_ATTRIBUTES.put("optgroup", set);
+    
+    set = new HashSet();
+    set.add("selected");
+    set.add("disabled");
+    HTML_BOOLEAN_ATTRIBUTES.put("option", set);
+    
+    set = new HashSet();
+    set.add("disabled");
+    set.add("readonly");
+    HTML_BOOLEAN_ATTRIBUTES.put("textarea", set);
+    
+    set = new HashSet();
+    set.add("disabled");
+    HTML_BOOLEAN_ATTRIBUTES.put("button", set);
+    
+    set = new HashSet();
+    set.add("nowrap");
+    HTML_BOOLEAN_ATTRIBUTES.put("th", set);
+    HTML_BOOLEAN_ATTRIBUTES.put("td", set);
+    
+    set = new HashSet();
+    set.add("noresize");
+    HTML_BOOLEAN_ATTRIBUTES.put("frame", set);
+    
+    set = new HashSet();
+    set.add("defer");
+    HTML_BOOLEAN_ATTRIBUTES.put("script", set);
+  }
+
+  protected final String encoding;
+  final Charset charset;
+  final CharsetEncoder encoder;
   final int mode;
   final Map namespaces;
   protected String eol;
@@ -96,16 +178,8 @@
         encoding = "UTF-8";
       }
     this.encoding = encoding.intern();
-    compatibilityMode = true;
-    if (encoding.length() > 3)
-      {
-        String p = encoding.substring(0, 3);
-        if (p.equalsIgnoreCase("UTF") ||
-            p.equalsIgnoreCase("UCS"))
-          {
-            compatibilityMode = false;
-          }
-      }
+    charset = Charset.forName(this.encoding);
+    encoder = charset.newEncoder();
     this.eol = (eol != null) ? eol : System.getProperty("line.separator");
     namespaces = new HashMap();
   }
@@ -121,17 +195,28 @@
     serialize(node, out, false);
   }
   
-  void serialize(final Node node, final OutputStream out,
+  void serialize(Node node, final OutputStream out,
                  boolean convertToCdata)
     throws IOException
   {
+    while (node != null)
+      {
+        Node next = node.getNextSibling();
+        doSerialize(node, out, convertToCdata);
+        node = next;
+      }
+  }
+
+  private void doSerialize(final Node node, final OutputStream out,
+                           boolean convertToCdata)
+    throws IOException
+  {
     if (out == null)
       {
         throw new NullPointerException("no output stream");
       }
     String value, prefix;
     Node children;
-    Node next = node.getNextSibling();
     String uri = node.getNamespaceURI();
     boolean defined = false;
     short nt = node.getNodeType();
@@ -152,7 +237,12 @@
               {
                 break;
               }
-            define(nsuri, node.getLocalName());
+            String name = node.getLocalName();
+            if (name == null)
+              {
+                name = node.getNodeName();
+              }
+            define(nsuri, name);
           }
         else if (uri != null && !isDefined(uri))
           {
@@ -170,7 +260,8 @@
         out.write(encodeText(a_nodeName));
         String a_nodeValue = node.getNodeValue();
         if (mode == Stylesheet.OUTPUT_HTML &&
-            a_nodeName.equals(a_nodeValue))
+            a_nodeName.equals(a_nodeValue) &&
+            isHTMLBoolean((Attr) node, a_nodeName))
           {
             break;
           }
@@ -327,11 +418,18 @@
             for (Node ctx = html.getFirstChild(); ctx != null;
                  ctx = ctx.getNextSibling())
               {
-                if (ctx.getNodeType() == Node.ELEMENT_NODE &&
-                    "head".equalsIgnoreCase(ctx.getLocalName()))
+                if (ctx.getNodeType() == Node.ELEMENT_NODE)
                   {
-                    head = ctx;
-                    break;
+                    String name = ctx.getLocalName();
+                    if (name == null)
+                      {
+                        name = ctx.getNodeName();
+                      }
+                    if ("head".equalsIgnoreCase(name))
+                      {
+                        head = ctx;
+                        break;
+                      }
                   }
               }
             if (head == null)
@@ -361,32 +459,39 @@
             for (Node ctx = head.getFirstChild(); ctx != null;
                  ctx = ctx.getNextSibling())
               {
-                if (ctx.getNodeType() == Node.ELEMENT_NODE &&
-                    "meta".equalsIgnoreCase(ctx.getLocalName()))
+                if (ctx.getNodeType() == Node.ELEMENT_NODE)
                   {
-                    NamedNodeMap metaAttrs = ctx.getAttributes();
-                    int len = metaAttrs.getLength();
-                    String httpEquiv = null;
-                    Node content = null;
-                    for (int i = 0; i < len; i++)
+                    String name = ctx.getLocalName();
+                    if (name == null)
+                      {
+                        name = ctx.getNodeName();
+                      }
+                    if ("meta".equalsIgnoreCase(name))
                       {
-                        Node attr = metaAttrs.item(i);
-                        String attrName = attr.getNodeName();
-                        if ("http-equiv".equalsIgnoreCase(attrName))
+                        NamedNodeMap metaAttrs = ctx.getAttributes();
+                        int len = metaAttrs.getLength();
+                        String httpEquiv = null;
+                        Node content = null;
+                        for (int i = 0; i < len; i++)
                           {
-                            httpEquiv = attr.getNodeValue();
+                            Node attr = metaAttrs.item(i);
+                            String attrName = attr.getNodeName();
+                            if ("http-equiv".equalsIgnoreCase(attrName))
+                              {
+                                httpEquiv = attr.getNodeValue();
+                              }
+                            else if ("content".equalsIgnoreCase(attrName))
+                              {
+                                content = attr;
+                              }
                           }
-                        else if ("content".equalsIgnoreCase(attrName))
+                        if ("Content-Type".equalsIgnoreCase(httpEquiv))
                           {
-                            content = attr;
+                            meta = ctx;
+                            metaContent = content;
+                            break;
                           }
                       }
-                    if ("Content-Type".equalsIgnoreCase(httpEquiv))
-                      {
-                        meta = ctx;
-                        metaContent = content;
-                        break;
-                      }
                   }
               }
             if (meta == null)
@@ -424,6 +529,7 @@
         DocumentType doctype = (DocumentType) node;
         out.write(BRA);
         out.write(BANG);
+	out.write(encodeText("DOCTYPE "));
         value = doctype.getNodeName();
         out.write(encodeText(value));
         String publicId = doctype.getPublicId();
@@ -468,10 +574,6 @@
       {
         undefine(uri);
       }
-    if (next != null)
-      {
-        serialize(next, out, convertToCdata);
-      }
   }
 
   boolean isDefined(String uri)
@@ -498,37 +600,42 @@
   }
 
   final byte[] encodeText(String text)
-    throws UnsupportedEncodingException
+    throws IOException
   {
-    if (compatibilityMode)
+    encoder.reset();
+    if (!encoder.canEncode(text))
       {
+        // Check each character
+        StringBuffer buf = new StringBuffer();
         int len = text.length();
-        StringBuffer buf = null;
         for (int i = 0; i < len; i++)
           {
             char c = text.charAt(i);
-            if (c >= 127)
+            if (encoder.canEncode(c))
               {
-                if (buf == null)
-                  {
-                    buf = new StringBuffer(text.substring(0, i));
-                  }
-                buf.append('&');
-                buf.append('#');
-                buf.append((int) c);
-                buf.append(';');
+                buf.append(c);
               }
-            else if (buf != null)
+            else
               {
-                buf.append(c);
+                // Replace with character entity reference
+                String hex = Integer.toHexString((int) c);
+                buf.append("&#x");
+                buf.append(hex);
+                buf.append(';');
               }
           }
-        if (buf != null)
-          {
-            text = buf.toString();
-          }
+        text = buf.toString();
+      }
+    ByteBuffer encoded = encoder.encode(CharBuffer.wrap(text));
+    if (encoded.hasArray())
+      {
+        return encoded.array();
       }
-    return text.getBytes(encoding);
+    encoded.flip();
+    int len = encoded.limit() - encoded.position();
+    byte[] ret = new byte[len];
+    encoded.get(ret, 0, len);
+    return ret;
   }
 
   String encode(String text, boolean encodeCtl, boolean inAttr)
@@ -628,5 +735,20 @@
         throw new RuntimeException(e.getMessage());
       }
   }
-  
+
+  boolean isHTMLBoolean(Attr attr, String attrName)
+  {
+    attrName = attrName.toLowerCase();
+    Node element = attr.getOwnerElement();
+    String elementName = element.getLocalName();
+    if (elementName == null)
+      {
+        elementName = element.getNodeName();
+      }
+    elementName = elementName.toLowerCase();
+    Collection attributes =
+      (Collection) HTML_BOOLEAN_ATTRIBUTES.get(elementName);
+    return (attributes != null && attributes.contains(attrName));
+  }
+
 }
Index: libjava/gnu/xml/transform/Stylesheet.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/Stylesheet.java,v
retrieving revision 1.2
diff -u -r1.2 Stylesheet.java
--- libjava/gnu/xml/transform/Stylesheet.java	17 Feb 2005 18:26:33 -0000	1.2
+++ libjava/gnu/xml/transform/Stylesheet.java	9 Jul 2005 22:09:48 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -123,6 +123,7 @@
   /**
    * Output options.
    */
+  Node output;
   int outputMethod;
   String outputVersion;
   String outputEncoding;
@@ -248,12 +249,10 @@
     Test anyNode = new NodeTypeTest((short) 0);
     List tests = Collections.singletonList(anyNode);
     builtInNodeTemplate =
-      new ApplyTemplatesNode(null, null,
-                             new Selector(Selector.CHILD, tests),
+      new ApplyTemplatesNode(new Selector(Selector.CHILD, tests),
                              null, null, null, true);
     builtInTextTemplate =
-      new ValueOfNode(null, null,
-                      new Selector(Selector.SELF, tests),
+      new ValueOfNode(new Selector(Selector.SELF, tests),
                       false);
     
     parse(doc.getDocumentElement(), true);
@@ -387,7 +386,10 @@
   TemplateNode getTemplate(QName mode, Node context, boolean applyImports)
     throws TransformerException
   {
-    //System.err.println("getTemplate: mode="+mode+" context="+context);
+    if (debug)
+      {
+        System.err.println("getTemplate: mode="+mode+" context="+context);
+      }
     Set candidates = new TreeSet();
     for (Iterator j = templates.iterator(); j.hasNext(); )
       {
@@ -417,7 +419,10 @@
       {
         // Apply built-in template
         // Current template is unchanged
-        //System.err.println("\tbuiltInTemplate context="+context);
+        if (debug)
+          {
+            System.err.println("\tbuiltInTemplate context="+context);
+          }
         switch (context.getNodeType())
           {
           case Node.ELEMENT_NODE:
@@ -438,7 +443,10 @@
         Template t = (Template) candidates.iterator().next();
         // Set current template
         currentTemplate = t;
-        //System.err.println("\ttemplate="+t+" context="+context);
+        if (debug)
+          {
+            System.err.println("\ttemplate="+t+" context="+context);
+          }
         return t.node;
       }
   }
@@ -495,7 +503,8 @@
     QName mode = (mm == null) ? null : getQName(mm);
     double priority = (p == null) ? Template.DEFAULT_PRIORITY :
       Double.parseDouble(p);
-    return new Template(this, name, match, parse(node.getFirstChild()),
+    Node children = node.getFirstChild();
+    return new Template(this, name, match, parse(children),
                         precedence, priority, mode);
   }
 
@@ -505,6 +514,7 @@
   final void parseOutput(Node node, NamedNodeMap attrs)
     throws TransformerConfigurationException
   {
+    output = node;
     String method = getAttribute(attrs, "method");
     if ("xml".equals(method) || method == null)
       {
@@ -654,11 +664,17 @@
   void parse(Node node, boolean root)
     throws TransformerConfigurationException
   {
-    if (node == null)
+    while (node != null)
       {
-        return;
+        current = node;
+        doParse(node, root);
+        node = node.getNextSibling();
       }
-    current = node;
+  }
+
+  void doParse(Node node, boolean root)
+    throws TransformerConfigurationException
+  {
     try
       {
         String namespaceUri = node.getNamespaceURI();
@@ -689,11 +705,10 @@
                       }
                   }
                 parse(node.getFirstChild(), false);
-                return;
               }
             else if ("template".equals(name))
               {
-                templates.addFirst(parseTemplate(node, attrs));
+                templates.add(parseTemplate(node, attrs));
               }
             else if ("param".equals(name) ||
                      "variable".equals(name))
@@ -702,6 +717,7 @@
                 TemplateNode content = parse(node.getFirstChild());
                 String paramName = getRequiredAttribute(attrs, "name", node);
                 String select = getAttribute(attrs, "select");
+                ParameterNode param;
                 if (select != null && select.length() > 0)
                   {
                     if (content != null)
@@ -712,16 +728,14 @@
                         throw new TransformerConfigurationException(msg, l);
                       }
                     Expr expr = (Expr) xpath.compile(select);
-                    variables.add(new ParameterNode(null, null,
-                                                    paramName,
-                                                    expr, global));
+                    param = new ParameterNode(paramName, expr, global);
                   }
                 else
                   {
-                    variables.add(new ParameterNode(content, null,
-                                                    paramName,
-                                                    null, global));
+                    param = new ParameterNode(paramName, null, global);
+                    param.children = content;
                   }
+                variables.add(param);
                 bindings.set(paramName, content, global);
               }
             else if ("include".equals(name) || "import".equals(name))
@@ -784,7 +798,6 @@
               {
                 parseAttributeSet(node, attrs);
               }
-            parse(node.getNextSibling(), false);
           }
         else if (root)
           {
@@ -810,7 +823,6 @@
         else
           {
             // Skip unknown elements, text, comments, etc
-            parse(node.getNextSibling(), false);
           }
       }
     catch (TransformerException e)
@@ -949,12 +961,16 @@
           {
             // Expression text
             Expr select = (Expr) xpath.compile(token);
-            ret = new ValueOfNode(null, ret, select, false);
+            TemplateNode ret2 = new ValueOfNode(select, false);
+            ret2.next = ret;
+            ret = ret2;
           }
         else
           {
             // Verbatim text
-            ret = new LiteralNode(null, ret, doc.createTextNode(token));
+            TemplateNode ret2 = new LiteralNode(doc.createTextNode(token));
+            ret2.next = ret;
+            ret = ret2;
           }
       }
     return ret;
@@ -1095,7 +1111,7 @@
   /**
    * apply-templates
    */
-  final TemplateNode parseApplyTemplates(Node node, Node children, Node next)
+  final TemplateNode parseApplyTemplates(Node node)
     throws TransformerConfigurationException, XPathExpressionException
   {
     NamedNodeMap attrs = node.getAttributes();
@@ -1106,32 +1122,32 @@
       {
         s = "child::node()";
       }
+    Node children = node.getFirstChild();
     List sortKeys = parseSortKeys(children);
     List withParams = parseWithParams(children);
     Expr select = (Expr) xpath.compile(s);
-    return new ApplyTemplatesNode(null, parse(next),
-                                  select, mode,
+    return new ApplyTemplatesNode(select, mode,
                                   sortKeys, withParams, false);
   }
 
   /**
    * call-template
    */
-  final TemplateNode parseCallTemplate(Node node, Node children, Node next)
+  final TemplateNode parseCallTemplate(Node node)
     throws TransformerConfigurationException, XPathExpressionException
   {
     NamedNodeMap attrs = node.getAttributes();
     String n = getRequiredAttribute(attrs, "name", node);
     QName name = getQName(n);
+    Node children = node.getFirstChild();
     List withParams = parseWithParams(children);
-    return new CallTemplateNode(null, parse(next), name,
-                                withParams);
+    return new CallTemplateNode(name, withParams);
   }
   
   /**
    * value-of
    */
-  final TemplateNode parseValueOf(Node node, Node children, Node next)
+  final TemplateNode parseValueOf(Node node)
     throws TransformerConfigurationException, XPathExpressionException
   {
     NamedNodeMap attrs = node.getAttributes();
@@ -1139,50 +1155,59 @@
     String doe = getAttribute(attrs, "disable-output-escaping");
     boolean d = "yes".equals(doe);
     Expr select = (Expr) xpath.compile(s);
-    return new ValueOfNode(null, parse(next), select, d);
+    return new ValueOfNode(select, d);
   }
   
   /**
    * for-each
    */
-  final TemplateNode parseForEach(Node node, Node children, Node next)
+  final TemplateNode parseForEach(Node node)
     throws TransformerConfigurationException, XPathExpressionException
   {
     NamedNodeMap attrs = node.getAttributes();
     String s = getRequiredAttribute(attrs, "select", node);
+    Node children = node.getFirstChild();
     List sortKeys = parseSortKeys(children);
     Expr select = (Expr) xpath.compile(s);
-    return new ForEachNode(parse(children), parse(next), select, sortKeys);
+    ForEachNode ret = new ForEachNode(select, sortKeys);
+    ret.children = parse(children);
+    return ret;
   }
   
   /**
    * if
    */
-  final TemplateNode parseIf(Node node, Node children, Node next)
+  final TemplateNode parseIf(Node node)
     throws TransformerConfigurationException, XPathExpressionException
   {
     NamedNodeMap attrs = node.getAttributes();
     String t = getRequiredAttribute(attrs, "test", node);
     Expr test = (Expr) xpath.compile(t);
-    return new IfNode(parse(children), parse(next), test);
+    Node children = node.getFirstChild();
+    IfNode ret = new IfNode(test);
+    ret.children = parse(children);
+    return ret;
   }
   
   /**
    * when
    */
-  final TemplateNode parseWhen(Node node, Node children, Node next)
+  final TemplateNode parseWhen(Node node)
     throws TransformerConfigurationException, XPathExpressionException
   {
     NamedNodeMap attrs = node.getAttributes();
     String t = getRequiredAttribute(attrs, "test", node);
     Expr test = (Expr) xpath.compile(t);
-    return new WhenNode(parse(children), parse(next), test);
+    Node children = node.getFirstChild();
+    WhenNode ret = new WhenNode(test);
+    ret.children = parse(children);
+    return ret;
   }
   
   /**
    * element
    */
-  final TemplateNode parseElement(Node node, Node children, Node next)
+  final TemplateNode parseElement(Node node)
     throws TransformerConfigurationException, XPathExpressionException
   {
     NamedNodeMap attrs = node.getAttributes();
@@ -1192,13 +1217,16 @@
     TemplateNode n = parseAttributeValueTemplate(name, node);
     TemplateNode ns = (namespace == null) ? null :
       parseAttributeValueTemplate(namespace, node);
-    return new ElementNode(parse(children), parse(next), n, ns, uas, node);
+    Node children = node.getFirstChild();
+    ElementNode ret = new ElementNode(n, ns, uas, node);
+    ret.children = parse(children);
+    return ret;
   }
 
   /**
    * attribute
    */
-  final TemplateNode parseAttribute(Node node, Node children, Node next)
+  final TemplateNode parseAttribute(Node node)
     throws TransformerConfigurationException, XPathExpressionException
   {
     NamedNodeMap attrs = node.getAttributes();
@@ -1207,49 +1235,59 @@
     TemplateNode n = parseAttributeValueTemplate(name, node);
     TemplateNode ns = (namespace == null) ? null :
       parseAttributeValueTemplate(namespace, node);
-    return new AttributeNode(parse(children), parse(next), n, ns, node);
+    Node children = node.getFirstChild();
+    AttributeNode ret = new AttributeNode(n, ns, node);
+    ret.children = parse(children);
+    return ret;
   }
   
   /**
    * text
    */
-  final TemplateNode parseText(Node node, Node children, Node next)
+  final TemplateNode parseText(Node node)
     throws TransformerConfigurationException, XPathExpressionException
   {
     NamedNodeMap attrs = node.getAttributes();
     String doe = getAttribute(attrs, "disable-output-escaping");
     boolean d = "yes".equals(doe);
-    return new TextNode(parse(children), parse(next), d);
+    Node children = node.getFirstChild();
+    TextNode ret = new TextNode(d);
+    ret.children = parse(children);
+    return ret;
   }
   
   /**
    * copy
    */
-  final TemplateNode parseCopy(Node node, Node children, Node next)
+  final TemplateNode parseCopy(Node node)
     throws TransformerConfigurationException, XPathExpressionException
   {
     NamedNodeMap attrs = node.getAttributes();
     String uas = getAttribute(attrs, "use-attribute-sets");
-    return new CopyNode(parse(children), parse(next), uas);
+    Node children = node.getFirstChild();
+    CopyNode ret = new CopyNode(uas);
+    ret.children = parse(children);
+    return ret;
   }
   
   /**
    * processing-instruction
    */
-  final TemplateNode parseProcessingInstruction(Node node, Node children,
-                                                Node next)
+  final TemplateNode parseProcessingInstruction(Node node)
     throws TransformerConfigurationException, XPathExpressionException
   {
     NamedNodeMap attrs = node.getAttributes();
     String name = getRequiredAttribute(attrs, "name", node);
-    return new ProcessingInstructionNode(parse(children),
-                                         parse(next), name);
+    Node children = node.getFirstChild();
+    ProcessingInstructionNode ret = new ProcessingInstructionNode(name);
+    ret.children = parse(children);
+    return ret;
   }
   
   /**
    * number
    */
-  final TemplateNode parseNumber(Node node, Node children, Node next)
+  final TemplateNode parseNumber(Node node)
     throws TransformerConfigurationException, XPathExpressionException
   {
     NamedNodeMap attrs = node.getAttributes();
@@ -1269,12 +1307,13 @@
     String gz = getAttribute(attrs, "grouping-size");
     int gz2 = (gz != null && gz.length() > 0) ?
       Integer.parseInt(gz) : 1;
+    Node children = node.getFirstChild();
+    TemplateNode ret;
     if (v != null && v.length() > 0)
       {
         Expr value = (Expr) xpath.compile(v);
-        return new NumberNode(parse(children), parse(next),
-                              value, format, lang,
-                              letterValue, gs, gz2);
+        ret = new NumberNode(value, format, lang,
+                             letterValue, gs, gz2);
       }
     else
       {
@@ -1311,35 +1350,42 @@
                 throw new TransformerConfigurationException(msg);
               }
           }
-        return new NodeNumberNode(parse(children), parse(next),
-                                  level, count, from,
-                                  format, lang,
-                                  letterValue, gs, gz2);
+        ret = new NodeNumberNode(level, count, from,
+                                 format, lang,
+                                 letterValue, gs, gz2);
       }
+    ret.children = parse(children);
+    return ret;
   }
   
   /**
    * copy-of
    */
-  final TemplateNode parseCopyOf(Node node, Node children, Node next)
+  final TemplateNode parseCopyOf(Node node)
     throws TransformerConfigurationException, XPathExpressionException
   {
     NamedNodeMap attrs = node.getAttributes();
     String s = getRequiredAttribute(attrs, "select", node);
     Expr select = (Expr) xpath.compile(s);
-    return new CopyOfNode(parse(children), parse(next), select);
+    Node children = node.getFirstChild();
+    CopyOfNode ret = new CopyOfNode(select);
+    ret.children = parse(children);
+    return ret;
   }
   
   /**
    * message
    */
-  final TemplateNode parseMessage(Node node, Node children, Node next)
+  final TemplateNode parseMessage(Node node)
     throws TransformerConfigurationException, XPathExpressionException
   {
     NamedNodeMap attrs = node.getAttributes();
     String t = getAttribute(attrs, "terminate");
     boolean terminate = "yes".equals(t);
-    return new MessageNode(parse(children), parse(next), terminate);
+    Node children = node.getFirstChild();
+    MessageNode ret = new MessageNode(terminate);
+    ret.children = parse(children);
+    return ret;
   }
   
   /**
@@ -1348,14 +1394,34 @@
   final TemplateNode parse(Node node)
     throws TransformerConfigurationException
   {
-    if (node == null)
+    TemplateNode first = null;
+    TemplateNode previous = null;
+    while (node != null)
       {
-        return null;
+        Node next = node.getNextSibling();
+        TemplateNode tnode = doParse(node);
+        if (tnode != null)
+          {
+            if (first == null)
+              {
+                first = tnode;
+              }
+            if (previous != null)
+              {
+                previous.next = tnode;
+              }
+            previous = tnode;
+          }
+        node = next;
       }
+    return first;
+  }
+
+  private final TemplateNode doParse(Node node)
+    throws TransformerConfigurationException
+  {
     // Hack to associate the document function with its declaring node
     current = node;
-    Node children = node.getFirstChild();
-    Node next = node.getNextSibling();
     try
       {
         String namespaceUri = node.getNamespaceURI();
@@ -1365,72 +1431,83 @@
             String name = node.getLocalName();
             if ("apply-templates".equals(name))
               {
-                return parseApplyTemplates(node, children, next);
+                return parseApplyTemplates(node);
               }
             else if ("call-template".equals(name))
               {
-                return parseCallTemplate(node, children, next);
+                return parseCallTemplate(node);
               }
             else if ("value-of".equals(name))
               {
-                return parseValueOf(node, children, next);
+                return parseValueOf(node);
               }
             else if ("for-each".equals(name))
               {
-                return parseForEach(node, children, next);
+                return parseForEach(node);
               }
             else if ("if".equals(name))
               {
-                return parseIf(node, children, next);
+                return parseIf(node);
               }
             else if ("choose".equals(name))
               {
-                return new ChooseNode(parse(children), parse(next));
+                Node children = node.getFirstChild();
+                ChooseNode ret = new ChooseNode();
+                ret.children = parse(children);
+                return ret;
               }
             else if ("when".equals(name))
               {
-                return parseWhen(node, children, next);
+                return parseWhen(node);
               }
             else if ("otherwise".equals(name))
               {
-                return new OtherwiseNode(parse(children), parse(next));
+                Node children = node.getFirstChild();
+                OtherwiseNode ret = new OtherwiseNode();
+                ret.children = parse(children);
+                return ret;
               }
             else if ("element".equals(name))
               {
-                return parseElement(node, children, next);
+                return parseElement(node);
               }
             else if ("attribute".equals(name))
               {
-                return parseAttribute(node, children, next);
+                return parseAttribute(node);
               }
             else if ("text".equals(name))
               {
-                return parseText(node, children, next);
+                return parseText(node);
               }
             else if ("copy".equals(name))
               {
-                return parseCopy(node, children, next);
+                return parseCopy(node);
               }
             else if ("processing-instruction".equals(name))
               {
-                return parseProcessingInstruction(node, children, next);
+                return parseProcessingInstruction(node);
               }
             else if ("comment".equals(name))
               {
-                return new CommentNode(parse(children), parse(next));
+                Node children = node.getFirstChild();
+                CommentNode ret = new CommentNode();
+                ret.children = parse(children);
+                return ret;
               }
             else if ("number".equals(name))
               {
-                return parseNumber(node, children, next);
+                return parseNumber(node);
               }
             else if ("param".equals(name) ||
                      "variable".equals(name))
               {
                 boolean global = "variable".equals(name);
                 NamedNodeMap attrs = node.getAttributes();
+                Node children = node.getFirstChild();
                 TemplateNode content = parse(children);
                 String paramName = getRequiredAttribute(attrs, "name", node);
                 String select = getAttribute(attrs, "select");
+                ParameterNode ret;
                 if (select != null)
                   {
                     if (content != null)
@@ -1441,39 +1518,42 @@
                         throw new TransformerConfigurationException(msg, l);
                       }
                     Expr expr = (Expr) xpath.compile(select);
-                    return new ParameterNode(null, parse(next),
-                                             paramName, expr, global);
+                    ret = new ParameterNode(paramName, expr, global);
                   }
                 else
                   {
-                    return new ParameterNode(content, parse(next),
-                                             paramName, null, global);
+                    ret = new ParameterNode(paramName, null, global);
+                    ret.children = content;
                   }
+                return ret;
               }
             else if ("copy-of".equals(name))
               {
-                return parseCopyOf(node, children, next);
+                return parseCopyOf(node);
               }
             else if ("message".equals(name))
               {
-                return parseMessage(node, children, next);
+                return parseMessage(node);
               }
             else if ("apply-imports".equals(name))
               {
-                return new ApplyImportsNode(parse(children), parse(next));
+                Node children = node.getFirstChild();
+                ApplyImportsNode ret = new ApplyImportsNode();
+                ret.children = parse(children);
+                return ret;
               }
             else
               {
                 // xsl:fallback
                 // Pass over any other XSLT nodes
-                return parse(next);
+                return null;
               }
           }
         String prefix = node.getPrefix();
         if (extensionElementPrefixes.contains(prefix))
           {
             // Pass over extension elements
-            return parse(next);
+            return null;
           }
         switch (node.getNodeType())
           {
@@ -1484,12 +1564,12 @@
               {
                 // Strip
                 text.getParentNode().removeChild(text);
-                return parse(next);
+                return null;
               }
             break;
           case Node.COMMENT_NODE:
             // Ignore comments
-            return parse(next);
+            return null;
           case Node.ELEMENT_NODE:
             // Check for attribute value templates and use-attribute-sets
             NamedNodeMap attrs = node.getAttributes();
@@ -1519,6 +1599,7 @@
               {
                 // Create an element-producing template node instead
                 // with appropriate attribute-producing child template nodes
+                Node children = node.getFirstChild();
                 TemplateNode child = parse(children);
                 for (int i = 0; i < len; i++)
                   {
@@ -1537,15 +1618,19 @@
                       parseAttributeValueTemplate(aname, node);
                     TemplateNode ns = (ans == null) ? null :
                       parseAttributeValueTemplate(ans, node);
-                    child = new AttributeNode(grandchild, child, n, ns, attr);
+                    TemplateNode newChild = new AttributeNode(n, ns, attr);
+                    newChild.children = grandchild;
+                    newChild.next = child;
+                    child = newChild;
                   }
                 String ename = node.getNodeName();
                 TemplateNode n = parseAttributeValueTemplate(ename, node);
                 TemplateNode ns = (namespaceUri == null) ? null :
                   parseAttributeValueTemplate(namespaceUri, node);
-                return new ElementNode(child, parse(next),
-                                       n, ns, useAttributeSets,
-                                       node);
+                ElementNode ret = new ElementNode(n, ns, useAttributeSets,
+                                                  node);
+                ret.children = child;
+                return ret;
               }
             // Otherwise fall through
             break;
@@ -1556,7 +1641,10 @@
         DOMSourceLocator l = new DOMSourceLocator(node);
         throw new TransformerConfigurationException(e.getMessage(), l, e);
       }
-    return new LiteralNode(parse(children), parse(next), node);
+    Node children = node.getFirstChild();
+    LiteralNode ret = new LiteralNode(node);
+    ret.children = parse(children);
+    return ret;
   }
 
   final List parseSortKeys(Node node)
Index: libjava/gnu/xml/transform/SystemPropertyFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/SystemPropertyFunction.java,v
retrieving revision 1.2
diff -u -r1.2 SystemPropertyFunction.java
--- libjava/gnu/xml/transform/SystemPropertyFunction.java	17 Feb 2005 18:26:33 -0000	1.2
+++ libjava/gnu/xml/transform/SystemPropertyFunction.java	9 Jul 2005 22:09:48 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/Template.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/Template.java,v
retrieving revision 1.2
diff -u -r1.2 Template.java
--- libjava/gnu/xml/transform/Template.java	17 Feb 2005 18:26:33 -0000	1.2
+++ libjava/gnu/xml/transform/Template.java	9 Jul 2005 22:09:48 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -206,7 +206,7 @@
              Node parent, Node nextSibling)
     throws TransformerException
   {
-    //System.err.println("...applying " + toString() + " to " + context);
+    System.err.println("...applying " + toString() + " to " + context);
     if (node != null)
       {
         node.apply(stylesheet, mode,
Index: libjava/gnu/xml/transform/TemplateNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/TemplateNode.java,v
retrieving revision 1.1
diff -u -r1.1 TemplateNode.java
--- libjava/gnu/xml/transform/TemplateNode.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/TemplateNode.java	9 Jul 2005 22:09:48 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -55,14 +55,8 @@
   static final Comparator documentOrderComparator =
     new DocumentOrderComparator();
 
-  final TemplateNode children;
-  final TemplateNode next;
-
-  TemplateNode(TemplateNode children, TemplateNode next)
-  {
-    this.children = children;
-    this.next = next;
-  }
+  TemplateNode children;
+  TemplateNode next;
 
   final void apply(Stylesheet stylesheet, QName mode,
                    Node context, int pos, int len,
@@ -81,6 +75,8 @@
     if (stylesheet.debug)
       {
         System.err.println("Applying " + toString());
+        System.err.println("\twith context=" + context + ", pos=" + pos +
+                           ", len=" + len);
       }
     doApply(stylesheet, mode, context, pos, len, parent, nextSibling);
   }
Index: libjava/gnu/xml/transform/TemplatesImpl.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/TemplatesImpl.java,v
retrieving revision 1.2
diff -u -r1.2 TemplatesImpl.java
--- libjava/gnu/xml/transform/TemplatesImpl.java	17 Feb 2005 18:26:33 -0000	1.2
+++ libjava/gnu/xml/transform/TemplatesImpl.java	9 Jul 2005 22:09:48 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/TextNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/TextNode.java,v
retrieving revision 1.1
diff -u -r1.1 TextNode.java
--- libjava/gnu/xml/transform/TextNode.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/TextNode.java	9 Jul 2005 22:09:48 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -56,20 +56,23 @@
 
   final boolean disableOutputEscaping;
 
-  TextNode(TemplateNode children, TemplateNode next,
-           boolean disableOutputEscaping)
+  TextNode(boolean disableOutputEscaping)
   {
-    super(children, next);
     this.disableOutputEscaping = disableOutputEscaping;
   }
 
   TemplateNode clone(Stylesheet stylesheet)
   {
-    return new TextNode((children == null) ? null :
-                        children.clone(stylesheet),
-                        (next == null) ? null :
-                        next.clone(stylesheet),
-                        disableOutputEscaping);
+    TemplateNode ret = new TextNode(disableOutputEscaping);
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
 
   void doApply(Stylesheet stylesheet, QName mode,
Index: libjava/gnu/xml/transform/TransformerFactoryImpl.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/TransformerFactoryImpl.java,v
retrieving revision 1.1
diff -u -r1.1 TransformerFactoryImpl.java
--- libjava/gnu/xml/transform/TransformerFactoryImpl.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/TransformerFactoryImpl.java	9 Jul 2005 22:09:48 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/TransformerImpl.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/TransformerImpl.java,v
retrieving revision 1.2
diff -u -r1.2 TransformerImpl.java
--- libjava/gnu/xml/transform/TransformerImpl.java	17 Feb 2005 18:26:33 -0000	1.2
+++ libjava/gnu/xml/transform/TransformerImpl.java	9 Jul 2005 22:09:49 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -48,7 +48,12 @@
 import java.net.URL;
 import java.net.URLConnection;
 import java.util.Collection;
+import java.util.Iterator;
+import java.util.LinkedList;
+import java.util.List;
 import java.util.Properties;
+import java.util.StringTokenizer;
+import javax.xml.namespace.QName;
 import javax.xml.transform.ErrorListener;
 import javax.xml.transform.OutputKeys;
 import javax.xml.transform.Result;
@@ -241,8 +246,10 @@
     boolean standalone = 
       "yes".equals(outputProperties.getProperty(OutputKeys.STANDALONE));
     String mediaType = outputProperties.getProperty(OutputKeys.MEDIA_TYPE);
-    // TODO cdata-section-elements
-    // TODO indent
+    String cdataSectionElements =
+      outputProperties.getProperty(OutputKeys.CDATA_SECTION_ELEMENTS);
+    boolean indent =
+      "yes".equals(outputProperties.getProperty(OutputKeys.INDENT));
     if (created)
       {
         // Discover document element
@@ -309,6 +316,44 @@
       {
         parent.setUserData("media-type", mediaType, stylesheet);
       }
+    if (cdataSectionElements != null)
+      {
+        List list = new LinkedList();
+        StringTokenizer st = new StringTokenizer(cdataSectionElements);
+        while (st.hasMoreTokens())
+          {
+            String name = st.nextToken();
+            String localName = name;
+            String uri = null;
+            String prefix = null;
+            int ci = name.indexOf(':');
+            if (ci != -1)
+              {
+                // Use namespaces defined on xsl:output node to resolve
+                // namespaces for QName
+                prefix = name.substring(0, ci);
+                localName = name.substring(ci + 1);
+                uri = stylesheet.output.lookupNamespaceURI(prefix);
+              }
+            list.add(new QName(uri, localName, prefix));
+          }
+        if (!list.isEmpty())
+          {
+            Document resultDoc = (parent instanceof Document) ?
+              (Document) parent :
+              parent.getOwnerDocument();
+            convertCdataSectionElements(resultDoc, parent, list);
+          }
+      }
+    if (indent)
+      {
+        parent.normalize();
+        strip(parent);
+        Document resultDoc = (parent instanceof Document) ?
+          (Document) parent :
+          parent.getOwnerDocument();
+        reindent(resultDoc, parent, 0);
+      }
     // Render result to the target device
     if (outputTarget instanceof DOMResult)
       {
@@ -407,12 +452,21 @@
           }
         parent.removeChild(node);
       }
-    if (nt == Node.TEXT_NODE) // CDATA sections ?
+    if (nt == Node.TEXT_NODE || nt == Node.CDATA_SECTION_NODE)
       {
         if (!stylesheet.isPreserved((Text) node))
           {
             node.getParentNode().removeChild(node);
           }
+        else
+          {
+            String text = node.getNodeValue();
+            String stripped = text.trim();
+            if (!text.equals(stripped))
+              {
+                node.setNodeValue(stripped);
+              }
+          }
       }
     else
       {
@@ -577,4 +631,139 @@
     return errorListener;
   }
 
+  static final String INDENT_WHITESPACE = "  ";
+
+  /*
+   * Apply indent formatting to the given tree.
+   */
+  void reindent(Document doc, Node node, int offset)
+  {
+    if (node.hasChildNodes())
+      {
+        boolean markupContent = false;
+        boolean textContent = false;
+        List children = new LinkedList();
+        Node ctx = node.getFirstChild();
+        while (ctx != null)
+          {
+            switch (ctx.getNodeType())
+              {
+              case Node.ELEMENT_NODE:
+              case Node.PROCESSING_INSTRUCTION_NODE:
+              case Node.DOCUMENT_TYPE_NODE:
+                markupContent = true;
+                break;
+              case Node.TEXT_NODE:
+              case Node.CDATA_SECTION_NODE:
+              case Node.ENTITY_REFERENCE_NODE:
+              case Node.COMMENT_NODE:
+                textContent = true;
+                break;
+              }
+            children.add(ctx);
+            ctx = ctx.getNextSibling();
+          }
+        if (markupContent)
+          {
+            if (textContent)
+              {
+                // XXX handle mixed content differently?
+              }
+            int nodeType = node.getNodeType();
+            if (nodeType == Node.DOCUMENT_NODE)
+              {
+                for (Iterator i = children.iterator(); i.hasNext(); )
+                  {
+                    ctx = (Node) i.next();
+                    reindent(doc, ctx, offset + 1);
+                  }
+              }
+            else
+              {
+                StringBuffer buf = new StringBuffer();
+                buf.append('\n');
+                for (int i = 0; i < offset + 1; i++)
+                  {
+                    buf.append(INDENT_WHITESPACE);
+                  }
+                String ws = buf.toString();
+                for (Iterator i = children.iterator(); i.hasNext(); )
+                  {
+                    ctx = (Node) i.next();
+                    node.insertBefore(doc.createTextNode(ws), ctx);
+                    reindent(doc, ctx, offset + 1);
+                  }
+                buf = new StringBuffer();
+                buf.append('\n');
+                ws = buf.toString();
+                for (int i = 0; i < offset; i++)
+                  {
+                    buf.append(INDENT_WHITESPACE);
+                  }
+                node.appendChild(doc.createTextNode(ws));
+              }
+          }
+      }
+  }
+
+  /**
+   * Converts the text node children of any cdata-section-elements in the
+   * tree to CDATA section nodes.
+   */
+  void convertCdataSectionElements(Document doc, Node node, List list)
+  {
+    if (node.getNodeType() == Node.ELEMENT_NODE)
+      {
+        boolean match = false;
+        for (Iterator i = list.iterator(); i.hasNext(); )
+          {
+            QName qname = (QName) i.next();
+            if (match(qname, node))
+              {
+                match = true;
+                break;
+              }
+          }
+        if (match)
+          {
+            Node ctx = node.getFirstChild();
+            while (ctx != null)
+              {
+                if (ctx.getNodeType() == Node.TEXT_NODE)
+                  {
+                    Node cdata = doc.createCDATASection(ctx.getNodeValue());
+                    node.replaceChild(cdata, ctx);
+                    ctx = cdata;
+                  }
+                ctx = ctx.getNextSibling();
+              }
+          }
+      }
+    Node ctx = node.getFirstChild();
+    while (ctx != null)
+      {
+        if (ctx.hasChildNodes())
+          {
+            convertCdataSectionElements(doc, ctx, list);
+          }
+        ctx = ctx.getNextSibling();
+      }
+  }
+
+  boolean match(QName qname, Node node)
+  {
+    String ln1 = qname.getLocalPart();
+    String ln2 = node.getLocalName();
+    if (ln2 == null)
+      {
+        return ln1.equals(node.getNodeName());
+      }
+    else
+      {
+        String uri1 = qname.getNamespaceURI();
+        String uri2 = node.getNamespaceURI();
+        return (uri1.equals(uri2) && ln1.equals(ln2));
+      }
+  }
+
 }
Index: libjava/gnu/xml/transform/TransformerOutputProperties.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/TransformerOutputProperties.java,v
retrieving revision 1.1
diff -u -r1.1 TransformerOutputProperties.java
--- libjava/gnu/xml/transform/TransformerOutputProperties.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/TransformerOutputProperties.java	9 Jul 2005 22:09:49 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/URIResolverEntityResolver.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/URIResolverEntityResolver.java,v
retrieving revision 1.1
diff -u -r1.1 URIResolverEntityResolver.java
--- libjava/gnu/xml/transform/URIResolverEntityResolver.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/URIResolverEntityResolver.java	9 Jul 2005 22:09:49 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/UnparsedEntityUriFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/UnparsedEntityUriFunction.java,v
retrieving revision 1.1
diff -u -r1.1 UnparsedEntityUriFunction.java
--- libjava/gnu/xml/transform/UnparsedEntityUriFunction.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/UnparsedEntityUriFunction.java	9 Jul 2005 22:09:49 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/ValueOfNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/ValueOfNode.java,v
retrieving revision 1.2
diff -u -r1.2 ValueOfNode.java
--- libjava/gnu/xml/transform/ValueOfNode.java	17 Feb 2005 18:26:33 -0000	1.2
+++ libjava/gnu/xml/transform/ValueOfNode.java	9 Jul 2005 22:09:49 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -37,6 +37,8 @@
 
 package gnu.xml.transform;
 
+import java.util.Collection;
+import java.util.Iterator;
 import javax.xml.namespace.QName;
 import javax.xml.transform.TransformerException;
 import org.w3c.dom.Document;
@@ -56,22 +58,25 @@
   final Expr select;
   final boolean disableOutputEscaping;
 
-  ValueOfNode(TemplateNode children, TemplateNode next, Expr select,
-              boolean disableOutputEscaping)
+  ValueOfNode(Expr select, boolean disableOutputEscaping)
   {
-    super(children, next);
     this.select = select;
     this.disableOutputEscaping = disableOutputEscaping;
   }
 
   TemplateNode clone(Stylesheet stylesheet)
   {
-    return new ValueOfNode((children == null) ? null :
-                           children.clone(stylesheet),
-                           (next == null) ? null :
-                           next.clone(stylesheet),
-                           select.clone(stylesheet),
-                           disableOutputEscaping);
+    TemplateNode ret = new ValueOfNode(select.clone(stylesheet),
+                                       disableOutputEscaping);
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
 
   void doApply(Stylesheet stylesheet, QName mode,
@@ -80,8 +85,25 @@
     throws TransformerException
   {
     Object ret = select.evaluate(context, pos, len);
-    String value = Expr._string(context, ret);
-    //System.err.println("value-of: "+context+" "+ select + " -> "+ value);
+    String value;
+    if (ret instanceof Collection)
+      {
+        StringBuffer buf = new StringBuffer();
+        for (Iterator i = ((Collection) ret).iterator(); i.hasNext(); )
+          {
+            Node node = (Node) i.next();
+            buf.append(Expr.stringValue(node));
+          }
+        value = buf.toString();
+      }
+    else
+      {
+        value = Expr._string(context, ret);
+      }
+    /*if (stylesheet.debug)
+      {
+        System.err.println("value-of: "+context+" "+ select + " -> "+ value);
+      }*/
     if (value != null && value.length() > 0)
       {
         Document doc = (parent instanceof Document) ?
Index: libjava/gnu/xml/transform/WhenNode.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/WhenNode.java,v
retrieving revision 1.1
diff -u -r1.1 WhenNode.java
--- libjava/gnu/xml/transform/WhenNode.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/WhenNode.java	9 Jul 2005 22:09:49 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -53,19 +53,23 @@
 
   final Expr test;
 
-  WhenNode(TemplateNode children, TemplateNode next, Expr test)
+  WhenNode(Expr test)
   {
-    super(children, next);
     this.test = test;
   }
 
   TemplateNode clone(Stylesheet stylesheet)
   {
-    return new WhenNode((children == null) ? null :
-                        children.clone(stylesheet),
-                        (next == null) ? null :
-                        next.clone(stylesheet),
-                        test.clone(stylesheet));
+    TemplateNode ret = new WhenNode(test.clone(stylesheet));
+    if (children != null)
+      {
+        ret.children = children.clone(stylesheet);
+      }
+    if (next != null)
+      {
+        ret.next = next.clone(stylesheet);
+      }
+    return ret;
   }
 
   void doApply(Stylesheet stylesheet, QName mode,
Index: libjava/gnu/xml/transform/WithParam.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/WithParam.java,v
retrieving revision 1.1
diff -u -r1.1 WithParam.java
--- libjava/gnu/xml/transform/WithParam.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/WithParam.java	9 Jul 2005 22:09:49 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/XSLComparator.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/XSLComparator.java,v
retrieving revision 1.1
diff -u -r1.1 XSLComparator.java
--- libjava/gnu/xml/transform/XSLComparator.java	2 Feb 2005 00:42:10 -0000	1.1
+++ libjava/gnu/xml/transform/XSLComparator.java	9 Jul 2005 22:09:49 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/transform/XSLURIResolver.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/transform/XSLURIResolver.java,v
retrieving revision 1.2
diff -u -r1.2 XSLURIResolver.java
--- libjava/gnu/xml/transform/XSLURIResolver.java	17 Feb 2005 18:26:33 -0000	1.2
+++ libjava/gnu/xml/transform/XSLURIResolver.java	9 Jul 2005 22:09:49 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -134,33 +134,41 @@
                   }
               }
           }
-        if (in == null && url != null)
+        if (in == null)
           {
-            systemId = url.toString();
-            node = (Node) nodeCache.get(systemId);
-            // Is the resource up to date?
-            URLConnection conn = url.openConnection();
-            Long llm = (Long) lastModifiedCache.get(systemId);
-            if (llm != null)
-              {
-                lastLastModified = llm.longValue();
-                conn.setIfModifiedSince(lastLastModified);
-              }
-            conn.connect();
-            lastModified = conn.getLastModified();
-            if (node != null && 
-                lastModified > 0L &&
-                lastModified <= lastLastModified)
+            if (url != null)
               {
-                // Resource unchanged
-                return new DOMSource(node, systemId);
+                systemId = url.toString();
+                node = (Node) nodeCache.get(systemId);
+                // Is the resource up to date?
+                URLConnection conn = url.openConnection();
+                Long llm = (Long) lastModifiedCache.get(systemId);
+                if (llm != null)
+                  {
+                    lastLastModified = llm.longValue();
+                    conn.setIfModifiedSince(lastLastModified);
+                  }
+                conn.connect();
+                lastModified = conn.getLastModified();
+                if (node != null && 
+                    lastModified > 0L &&
+                    lastModified <= lastLastModified)
+                  {
+                    // Resource unchanged
+                    return new DOMSource(node, systemId);
+                  }
+                else
+                  {
+                    // Resource new or modified
+                    in = conn.getInputStream();
+                    nodeCache.put(systemId, node);
+                    lastModifiedCache.put(systemId, new Long(lastModified));
+                  }
               }
             else
               {
-                // Resource new or modified
-                in = conn.getInputStream();
-                nodeCache.put(systemId, node);
-                lastModifiedCache.put(systemId, new Long(lastModified));
+                throw new TransformerException("can't resolve URL: " +
+                                               systemId);
               }
           }
         InputSource input = new InputSource(in);
@@ -207,6 +215,11 @@
               {
                 url = new URL(href);
               }
+            else
+              {
+                // See below
+                throw new MalformedURLException(systemId);
+              }
           }
         return url;
       }
Index: libjava/gnu/xml/util/DoParse.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/util/DoParse.java,v
retrieving revision 1.2
diff -u -r1.2 DoParse.java
--- libjava/gnu/xml/util/DoParse.java	17 Feb 2005 18:26:33 -0000	1.2
+++ libjava/gnu/xml/util/DoParse.java	9 Jul 2005 22:09:49 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/util/DomParser.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/util/DomParser.java,v
retrieving revision 1.1
diff -u -r1.1 DomParser.java
--- libjava/gnu/xml/util/DomParser.java	2 Feb 2005 00:42:11 -0000	1.1
+++ libjava/gnu/xml/util/DomParser.java	9 Jul 2005 22:09:49 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/util/Resolver.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/util/Resolver.java,v
retrieving revision 1.2
diff -u -r1.2 Resolver.java
--- libjava/gnu/xml/util/Resolver.java	17 Feb 2005 18:26:33 -0000	1.2
+++ libjava/gnu/xml/util/Resolver.java	9 Jul 2005 22:09:50 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/util/SAXNullTransformerFactory.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/util/SAXNullTransformerFactory.java,v
retrieving revision 1.2
diff -u -r1.2 SAXNullTransformerFactory.java
--- libjava/gnu/xml/util/SAXNullTransformerFactory.java	16 Feb 2005 19:25:05 -0000	1.2
+++ libjava/gnu/xml/util/SAXNullTransformerFactory.java	9 Jul 2005 22:09:50 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/util/XCat.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/util/XCat.java,v
retrieving revision 1.1
diff -u -r1.1 XCat.java
--- libjava/gnu/xml/util/XCat.java	2 Feb 2005 00:42:11 -0000	1.1
+++ libjava/gnu/xml/util/XCat.java	9 Jul 2005 22:09:50 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/util/XHTMLWriter.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/util/XHTMLWriter.java,v
retrieving revision 1.1
diff -u -r1.1 XHTMLWriter.java
--- libjava/gnu/xml/util/XHTMLWriter.java	2 Feb 2005 00:42:11 -0000	1.1
+++ libjava/gnu/xml/util/XHTMLWriter.java	9 Jul 2005 22:09:50 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/util/XMLWriter.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/util/XMLWriter.java,v
retrieving revision 1.1
diff -u -r1.1 XMLWriter.java
--- libjava/gnu/xml/util/XMLWriter.java	2 Feb 2005 00:42:11 -0000	1.1
+++ libjava/gnu/xml/util/XMLWriter.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/AndExpr.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/AndExpr.java,v
retrieving revision 1.1
diff -u -r1.1 AndExpr.java
--- libjava/gnu/xml/xpath/AndExpr.java	2 Feb 2005 00:42:11 -0000	1.1
+++ libjava/gnu/xml/xpath/AndExpr.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/ArithmeticExpr.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/ArithmeticExpr.java,v
retrieving revision 1.1
diff -u -r1.1 ArithmeticExpr.java
--- libjava/gnu/xml/xpath/ArithmeticExpr.java	2 Feb 2005 00:42:11 -0000	1.1
+++ libjava/gnu/xml/xpath/ArithmeticExpr.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/BooleanFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/BooleanFunction.java,v
retrieving revision 1.1
diff -u -r1.1 BooleanFunction.java
--- libjava/gnu/xml/xpath/BooleanFunction.java	2 Feb 2005 00:42:11 -0000	1.1
+++ libjava/gnu/xml/xpath/BooleanFunction.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/CeilingFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/CeilingFunction.java,v
retrieving revision 1.1
diff -u -r1.1 CeilingFunction.java
--- libjava/gnu/xml/xpath/CeilingFunction.java	2 Feb 2005 00:42:11 -0000	1.1
+++ libjava/gnu/xml/xpath/CeilingFunction.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/ConcatFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/ConcatFunction.java,v
retrieving revision 1.1
diff -u -r1.1 ConcatFunction.java
--- libjava/gnu/xml/xpath/ConcatFunction.java	2 Feb 2005 00:42:11 -0000	1.1
+++ libjava/gnu/xml/xpath/ConcatFunction.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/Constant.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/Constant.java,v
retrieving revision 1.1
diff -u -r1.1 Constant.java
--- libjava/gnu/xml/xpath/Constant.java	2 Feb 2005 00:42:11 -0000	1.1
+++ libjava/gnu/xml/xpath/Constant.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/ContainsFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/ContainsFunction.java,v
retrieving revision 1.1
diff -u -r1.1 ContainsFunction.java
--- libjava/gnu/xml/xpath/ContainsFunction.java	2 Feb 2005 00:42:11 -0000	1.1
+++ libjava/gnu/xml/xpath/ContainsFunction.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/CountFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/CountFunction.java,v
retrieving revision 1.1
diff -u -r1.1 CountFunction.java
--- libjava/gnu/xml/xpath/CountFunction.java	2 Feb 2005 00:42:11 -0000	1.1
+++ libjava/gnu/xml/xpath/CountFunction.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/DocumentOrderComparator.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/DocumentOrderComparator.java,v
retrieving revision 1.1
diff -u -r1.1 DocumentOrderComparator.java
--- libjava/gnu/xml/xpath/DocumentOrderComparator.java	2 Feb 2005 00:42:11 -0000	1.1
+++ libjava/gnu/xml/xpath/DocumentOrderComparator.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/EqualityExpr.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/EqualityExpr.java,v
retrieving revision 1.1
diff -u -r1.1 EqualityExpr.java
--- libjava/gnu/xml/xpath/EqualityExpr.java	2 Feb 2005 00:42:11 -0000	1.1
+++ libjava/gnu/xml/xpath/EqualityExpr.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/Expr.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/Expr.java,v
retrieving revision 1.2
diff -u -r1.2 Expr.java
--- libjava/gnu/xml/xpath/Expr.java	17 Feb 2005 18:26:34 -0000	1.2
+++ libjava/gnu/xml/xpath/Expr.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/FalseFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/FalseFunction.java,v
retrieving revision 1.1
diff -u -r1.1 FalseFunction.java
--- libjava/gnu/xml/xpath/FalseFunction.java	2 Feb 2005 00:42:11 -0000	1.1
+++ libjava/gnu/xml/xpath/FalseFunction.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/FloorFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/FloorFunction.java,v
retrieving revision 1.1
diff -u -r1.1 FloorFunction.java
--- libjava/gnu/xml/xpath/FloorFunction.java	2 Feb 2005 00:42:11 -0000	1.1
+++ libjava/gnu/xml/xpath/FloorFunction.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/Function.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/Function.java,v
retrieving revision 1.1
diff -u -r1.1 Function.java
--- libjava/gnu/xml/xpath/Function.java	2 Feb 2005 00:42:11 -0000	1.1
+++ libjava/gnu/xml/xpath/Function.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/FunctionCall.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/FunctionCall.java,v
retrieving revision 1.2
diff -u -r1.2 FunctionCall.java
--- libjava/gnu/xml/xpath/FunctionCall.java	17 Feb 2005 18:26:34 -0000	1.2
+++ libjava/gnu/xml/xpath/FunctionCall.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/IdFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/IdFunction.java,v
retrieving revision 1.1
diff -u -r1.1 IdFunction.java
--- libjava/gnu/xml/xpath/IdFunction.java	2 Feb 2005 00:42:11 -0000	1.1
+++ libjava/gnu/xml/xpath/IdFunction.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/LangFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/LangFunction.java,v
retrieving revision 1.1
diff -u -r1.1 LangFunction.java
--- libjava/gnu/xml/xpath/LangFunction.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/LangFunction.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/LastFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/LastFunction.java,v
retrieving revision 1.1
diff -u -r1.1 LastFunction.java
--- libjava/gnu/xml/xpath/LastFunction.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/LastFunction.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/LocalNameFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/LocalNameFunction.java,v
retrieving revision 1.1
diff -u -r1.1 LocalNameFunction.java
--- libjava/gnu/xml/xpath/LocalNameFunction.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/LocalNameFunction.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/NameFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/NameFunction.java,v
retrieving revision 1.1
diff -u -r1.1 NameFunction.java
--- libjava/gnu/xml/xpath/NameFunction.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/NameFunction.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/NameTest.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/NameTest.java,v
retrieving revision 1.1
diff -u -r1.1 NameTest.java
--- libjava/gnu/xml/xpath/NameTest.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/NameTest.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -95,7 +95,9 @@
         return true;
       }
     String uri = qName.getNamespaceURI();
-    if (!equal(uri, node.getNamespaceURI()))
+    String nodeUri = node.getNamespaceURI();
+    String nodeLocalName = node.getLocalName();
+    if (nodeLocalName != null && !equal(uri, nodeUri))
       {
         return false;
       }
@@ -104,7 +106,11 @@
         return true;
       }
     String localName = qName.getLocalPart();
-    return (localName.equals(node.getLocalName()));
+    if (nodeLocalName != null)
+      {
+        nodeLocalName = node.getNodeName();
+      }
+    return (localName.equals(nodeLocalName));
   }
 
   final boolean equal(String s1, String s2)
Index: libjava/gnu/xml/xpath/NamespaceTest.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/NamespaceTest.java,v
retrieving revision 1.1
diff -u -r1.1 NamespaceTest.java
--- libjava/gnu/xml/xpath/NamespaceTest.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/NamespaceTest.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -98,7 +98,12 @@
         return true;
       }
     String localName = qName.getLocalPart();
-    return (localName.equals(node.getLocalName()));
+    String nodeLocalName = node.getLocalName();
+    if (nodeLocalName == null)
+      {
+        nodeLocalName = node.getNodeName();
+      }
+    return (localName.equals(nodeLocalName));
   }
 
   public Test clone(Object context)
Index: libjava/gnu/xml/xpath/NamespaceUriFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/NamespaceUriFunction.java,v
retrieving revision 1.1
diff -u -r1.1 NamespaceUriFunction.java
--- libjava/gnu/xml/xpath/NamespaceUriFunction.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/NamespaceUriFunction.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/NegativeExpr.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/NegativeExpr.java,v
retrieving revision 1.1
diff -u -r1.1 NegativeExpr.java
--- libjava/gnu/xml/xpath/NegativeExpr.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/NegativeExpr.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/NodeTypeTest.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/NodeTypeTest.java,v
retrieving revision 1.1
diff -u -r1.1 NodeTypeTest.java
--- libjava/gnu/xml/xpath/NodeTypeTest.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/NodeTypeTest.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/NormalizeSpaceFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/NormalizeSpaceFunction.java,v
retrieving revision 1.1
diff -u -r1.1 NormalizeSpaceFunction.java
--- libjava/gnu/xml/xpath/NormalizeSpaceFunction.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/NormalizeSpaceFunction.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/NotFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/NotFunction.java,v
retrieving revision 1.1
diff -u -r1.1 NotFunction.java
--- libjava/gnu/xml/xpath/NotFunction.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/NotFunction.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/NumberFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/NumberFunction.java,v
retrieving revision 1.1
diff -u -r1.1 NumberFunction.java
--- libjava/gnu/xml/xpath/NumberFunction.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/NumberFunction.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/OrExpr.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/OrExpr.java,v
retrieving revision 1.1
diff -u -r1.1 OrExpr.java
--- libjava/gnu/xml/xpath/OrExpr.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/OrExpr.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/ParenthesizedExpr.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/ParenthesizedExpr.java,v
retrieving revision 1.1
diff -u -r1.1 ParenthesizedExpr.java
--- libjava/gnu/xml/xpath/ParenthesizedExpr.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/ParenthesizedExpr.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/Path.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/Path.java,v
retrieving revision 1.1
diff -u -r1.1 Path.java
--- libjava/gnu/xml/xpath/Path.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/Path.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/Pattern.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/Pattern.java,v
retrieving revision 1.1
diff -u -r1.1 Pattern.java
--- libjava/gnu/xml/xpath/Pattern.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/Pattern.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/PositionFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/PositionFunction.java,v
retrieving revision 1.1
diff -u -r1.1 PositionFunction.java
--- libjava/gnu/xml/xpath/PositionFunction.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/PositionFunction.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/Predicate.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/Predicate.java,v
retrieving revision 1.2
diff -u -r1.2 Predicate.java
--- libjava/gnu/xml/xpath/Predicate.java	16 Feb 2005 19:25:06 -0000	1.2
+++ libjava/gnu/xml/xpath/Predicate.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/RelationalExpr.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/RelationalExpr.java,v
retrieving revision 1.2
diff -u -r1.2 RelationalExpr.java
--- libjava/gnu/xml/xpath/RelationalExpr.java	17 Feb 2005 18:26:34 -0000	1.2
+++ libjava/gnu/xml/xpath/RelationalExpr.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/Root.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/Root.java,v
retrieving revision 1.1
diff -u -r1.1 Root.java
--- libjava/gnu/xml/xpath/Root.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/Root.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/RoundFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/RoundFunction.java,v
retrieving revision 1.1
diff -u -r1.1 RoundFunction.java
--- libjava/gnu/xml/xpath/RoundFunction.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/RoundFunction.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/Selector.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/Selector.java,v
retrieving revision 1.2
diff -u -r1.2 Selector.java
--- libjava/gnu/xml/xpath/Selector.java	17 Feb 2005 18:26:34 -0000	1.2
+++ libjava/gnu/xml/xpath/Selector.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/StartsWithFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/StartsWithFunction.java,v
retrieving revision 1.1
diff -u -r1.1 StartsWithFunction.java
--- libjava/gnu/xml/xpath/StartsWithFunction.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/StartsWithFunction.java	9 Jul 2005 22:09:51 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/Steps.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/Steps.java,v
retrieving revision 1.1
diff -u -r1.1 Steps.java
--- libjava/gnu/xml/xpath/Steps.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/Steps.java	9 Jul 2005 22:09:52 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/StringFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/StringFunction.java,v
retrieving revision 1.1
diff -u -r1.1 StringFunction.java
--- libjava/gnu/xml/xpath/StringFunction.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/StringFunction.java	9 Jul 2005 22:09:52 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/StringLengthFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/StringLengthFunction.java,v
retrieving revision 1.1
diff -u -r1.1 StringLengthFunction.java
--- libjava/gnu/xml/xpath/StringLengthFunction.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/StringLengthFunction.java	9 Jul 2005 22:09:52 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/SubstringAfterFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/SubstringAfterFunction.java,v
retrieving revision 1.1
diff -u -r1.1 SubstringAfterFunction.java
--- libjava/gnu/xml/xpath/SubstringAfterFunction.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/SubstringAfterFunction.java	9 Jul 2005 22:09:52 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/SubstringBeforeFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/SubstringBeforeFunction.java,v
retrieving revision 1.1
diff -u -r1.1 SubstringBeforeFunction.java
--- libjava/gnu/xml/xpath/SubstringBeforeFunction.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/SubstringBeforeFunction.java	9 Jul 2005 22:09:52 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/SubstringFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/SubstringFunction.java,v
retrieving revision 1.1
diff -u -r1.1 SubstringFunction.java
--- libjava/gnu/xml/xpath/SubstringFunction.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/SubstringFunction.java	9 Jul 2005 22:09:52 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/SumFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/SumFunction.java,v
retrieving revision 1.1
diff -u -r1.1 SumFunction.java
--- libjava/gnu/xml/xpath/SumFunction.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/SumFunction.java	9 Jul 2005 22:09:52 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/Test.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/Test.java,v
retrieving revision 1.1
diff -u -r1.1 Test.java
--- libjava/gnu/xml/xpath/Test.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/Test.java	9 Jul 2005 22:09:52 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/TranslateFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/TranslateFunction.java,v
retrieving revision 1.1
diff -u -r1.1 TranslateFunction.java
--- libjava/gnu/xml/xpath/TranslateFunction.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/TranslateFunction.java	9 Jul 2005 22:09:52 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/TrueFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/TrueFunction.java,v
retrieving revision 1.1
diff -u -r1.1 TrueFunction.java
--- libjava/gnu/xml/xpath/TrueFunction.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/TrueFunction.java	9 Jul 2005 22:09:52 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/UnionExpr.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/UnionExpr.java,v
retrieving revision 1.1
diff -u -r1.1 UnionExpr.java
--- libjava/gnu/xml/xpath/UnionExpr.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/UnionExpr.java	9 Jul 2005 22:09:52 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/VariableReference.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/VariableReference.java,v
retrieving revision 1.1
diff -u -r1.1 VariableReference.java
--- libjava/gnu/xml/xpath/VariableReference.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/VariableReference.java	9 Jul 2005 22:09:52 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/XPathFactoryImpl.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/XPathFactoryImpl.java,v
retrieving revision 1.1
diff -u -r1.1 XPathFactoryImpl.java
--- libjava/gnu/xml/xpath/XPathFactoryImpl.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/XPathFactoryImpl.java	9 Jul 2005 22:09:52 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/XPathImpl.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/XPathImpl.java,v
retrieving revision 1.1
diff -u -r1.1 XPathImpl.java
--- libjava/gnu/xml/xpath/XPathImpl.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/XPathImpl.java	9 Jul 2005 22:09:52 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/XPathParser.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/XPathParser.java,v
retrieving revision 1.2
diff -u -r1.2 XPathParser.java
--- libjava/gnu/xml/xpath/XPathParser.java	17 Feb 2005 18:26:34 -0000	1.2
+++ libjava/gnu/xml/xpath/XPathParser.java	9 Jul 2005 22:09:52 -0000
@@ -18,8 +18,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/XPathParser.y
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/XPathParser.y,v
retrieving revision 1.1
diff -u -r1.1 XPathParser.y
--- libjava/gnu/xml/xpath/XPathParser.y	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/XPathParser.y	9 Jul 2005 22:09:52 -0000
@@ -16,8 +16,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/gnu/xml/xpath/XPathTokenizer.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/gnu/xml/xpath/XPathTokenizer.java,v
retrieving revision 1.1
diff -u -r1.1 XPathTokenizer.java
--- libjava/gnu/xml/xpath/XPathTokenizer.java	2 Feb 2005 00:42:12 -0000	1.1
+++ libjava/gnu/xml/xpath/XPathTokenizer.java	9 Jul 2005 22:09:52 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/java/awt/AWTEvent.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/AWTEvent.java,v
retrieving revision 1.12
diff -u -r1.12 AWTEvent.java
--- libjava/java/awt/AWTEvent.java	17 Feb 2005 07:48:23 -0000	1.12
+++ libjava/java/awt/AWTEvent.java	9 Jul 2005 22:09:53 -0000
@@ -1,5 +1,5 @@
 /* AWTEvent.java -- the root event in AWT
-   Copyright (C) 1999, 2000, 2002 Free Software Foundation
+   Copyright (C) 1999, 2000, 2002, 2005 Free Software Foundation
 
 This file is part of GNU Classpath.
 
@@ -246,6 +246,9 @@
     else if (source instanceof MenuComponent)
       string = getClass ().getName () + "[" + paramString () + "] on "
         + ((MenuComponent) source).getName ();
+    else 
+      string = getClass ().getName () + "[" + paramString () + "] on "
+    + source;
 
     return string;
   }
Index: libjava/java/awt/AWTKeyStroke.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/AWTKeyStroke.java,v
retrieving revision 1.5
diff -u -r1.5 AWTKeyStroke.java
--- libjava/java/awt/AWTKeyStroke.java	17 Feb 2005 07:48:23 -0000	1.5
+++ libjava/java/awt/AWTKeyStroke.java	9 Jul 2005 22:09:53 -0000
@@ -108,11 +108,12 @@
   private static Constructor ctor;
 
   /**
-   * A table of keyCode names to values.
+   * A table of keyCode names to values.  This is package-private to
+   * avoid an accessor method.
    *
    * @see #getAWTKeyStroke(String)
    */
-  private static final HashMap vktable = new HashMap();
+  static final HashMap vktable = new HashMap();
   static
   {
     // Using reflection saves the hassle of keeping this in sync with KeyEvent,
Index: libjava/java/awt/BorderLayout.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/BorderLayout.java,v
retrieving revision 1.15
diff -u -r1.15 BorderLayout.java
--- libjava/java/awt/BorderLayout.java	17 Feb 2005 07:48:23 -0000	1.15
+++ libjava/java/awt/BorderLayout.java	9 Jul 2005 22:09:53 -0000
@@ -700,6 +700,10 @@
       Dimension cdim = calcCompSize(center, what);
 
       int width = edim.width + cdim.width + wdim.width + (hgap * 2);
+      // check for overflow
+      if (width < edim.width || width < cdim.width || width < cdim.width)
+          width = Integer.MAX_VALUE;
+
       if (ndim.width > width)
 	width = ndim.width;
       if (sdim.width > width)
@@ -713,7 +717,13 @@
       if (wdim.height > height)
 	height = wdim.height;
 
-      height += (ndim.height + sdim.height + (vgap * 2) + ins.top + ins.bottom);
+      int addedHeight = height + (ndim.height + sdim.height + (vgap * 2)
+                                  + ins.top + ins.bottom);
+      // check for overflow
+      if (addedHeight < height)
+          height = Integer.MAX_VALUE;
+      else
+          height = addedHeight;
 
       return(new Dimension(width, height));
     }
Index: libjava/java/awt/BufferCapabilities.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/BufferCapabilities.java,v
retrieving revision 1.3
diff -u -r1.3 BufferCapabilities.java
--- libjava/java/awt/BufferCapabilities.java	17 Feb 2005 07:48:23 -0000	1.3
+++ libjava/java/awt/BufferCapabilities.java	9 Jul 2005 22:09:53 -0000
@@ -1,4 +1,4 @@
-/* BufferCapabilities.java -- 
+/* BufferCapabilities.java -- double-buffering capabilities descriptor
    Copyright (C) 2002, 2005  Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
@@ -39,79 +39,204 @@
 package java.awt;
 
 /**
- * Needs documentation...
+ * A double-buffering capability descriptor.  This class exposes
+ * details about the double-buffering algorithms used by image
+ * buffers.
+ *
+ * BufferCapabilities represents algorithms that involve at least two
+ * buffers but it can also specify so-called "multi-buffer" schemes
+ * involving more than two buffers.  This class describes the
+ * capabilities of the front and back buffers as well as the results
+ * of "flipping" -- that is, what happens when an image is transferred
+ * from the back buffer to the front buffer.
+ *
+ * Flipping may or may not be supported or may be supported only in
+ * fullscreen mode.  If it is not supported then "blitting" is implied
+ * -- that is, the contents of the back buffer are copied using a fast
+ * block transfer operation from the back buffer to the front buffer.
+ *
+ * The front buffer is the one that is displayed.
  *
  * @author Eric Blake (ebb9@email.byu.edu)
+ *
  * @see BufferStrategy#getCapabilities()
  * @see GraphicsConfiguration#getCapabilities()
+ *
  * @since 1.4
- * @status updated to 1.4, lacks documentation
  */
 public class BufferCapabilities implements Cloneable
 {
+  /**
+   * A type-safe enumeration of buffer flipping results.
+   *
+   * @see AttributeValue
+   */
   public static final class FlipContents extends AttributeValue
   {
+    /**
+     * The names of the different flipping results.
+     */
     private static final String[] NAMES
       = { "undefined", "background", "prior", "copied" };
+
+    /**
+     * The contents of the back buffer are undefined after flipping.
+     */
     public static final FlipContents UNDEFINED = new FlipContents(0);
+
+    /**
+     * The back buffer is cleared with the background color after
+     * flipping.
+     */
     public static final FlipContents BACKGROUND = new FlipContents(1);
+
+    /**
+     * The back buffer contains the pre-flipping contents of the front
+     * buffer after flipping.  In other words a true "flip" has been
+     * performed.
+     */
     public static final FlipContents PRIOR = new FlipContents(2);
+
+    /**
+     * The back buffer has the same contents as the front buffer after
+     * flipping.
+     */
     public static final FlipContents COPIED = new FlipContents(3);
+
+    /**
+     * Create a new flipping result descriptor.
+     *
+     * @param value the enumeration value
+     */
     private FlipContents(int value)
     {
       super(value, NAMES);
     }
-  } // class FlipContents
+  }
 
+  /**
+   * Front buffer capabilities descriptor.
+   */
   private final ImageCapabilities front;
+
+  /**
+   * Back buffer capabilities descriptor.
+   */
   private final ImageCapabilities back;
+
+  /**
+   * Describes the results of a "flip" operation.
+   */
   private final FlipContents flip;
 
   /**
    * Creates a buffer capabilities object.
    *
-   * @exception IllegalArgumentException If frontCaps or backCaps are null.
+   * @param frontCaps front buffer capabilities descriptor
+   * @param backCaps back buffer capabilities descriptor
+   * @param flip the results of a flip operation or null if
+   * flipping is not supported
+   *
+   * @exception IllegalArgumentException if frontCaps or backCaps is
+   * null
    */
-  public BufferCapabilities(ImageCapabilities front, ImageCapabilities back,
+  public BufferCapabilities(ImageCapabilities frontCaps,
+			    ImageCapabilities backCaps,
                             FlipContents flip)
   {
-    this.front = front;
-    this.back = back;
-    this.flip = flip;
-    if (front ==  null || back == null)
+    if (frontCaps ==  null || backCaps == null)
       throw new IllegalArgumentException();
+    this.front = frontCaps;
+    this.back = backCaps;
+    this.flip = flip;
   }
 
+  /**
+   * Retrieve the front buffer's image capabilities.
+   *
+   * @return the front buffer's image capabilities
+   */
   public ImageCapabilities getFrontBufferCapabilities()
   {
     return front;
   }
 
+  /**
+   * Retrieve the back buffer's image capabilities.
+   *
+   * @return the back buffer's image capabilities
+   */
   public ImageCapabilities getBackBufferCapabilities()
   {
     return back;
   }
 
+  /**
+   * Return whether or not flipping is supported.
+   *
+   * @return true if flipping is supported, false otherwise
+   */
   public boolean isPageFlipping()
   {
     return flip != null;
   }
 
+  /**
+   * Retrieve the result of a flipping operation.  If this method
+   * returns null then flipping is not supported.  This implies that
+   * "blitting", a fast block transfer, is used to copy the contents
+   * of the back buffer to the front buffer.  Other possible return
+   * values are:
+   * <ul>
+   *   <li><code>FlipContents.UNDEFINED</code> the contents of the
+   *   back buffer are undefined after flipping.</li>
+   *   <li><code>FlipContents.BACKGROUND</code> the contents of the
+   *   back buffer are cleared to the background color after
+   *   flipping.</li>
+   *   <li><code>FlipContents.PRIOR</code> the back buffer contains
+   *   the pre-flipping contents of the front * buffer after
+   *   flipping.</li>
+   *   <li><code>FlipContents.COPIED</code> the back buffer has the
+   *   same contents as the front buffer after flipping.</li>
+   * </ul>
+   *
+   * @return the result of a flipping operation or null if flipping is
+   * not supported
+   */
   public FlipContents getFlipContents()
   {
     return flip;
   }
 
+  /**
+   * Returns true if flipping is only supported in fullscreen mode.
+   *
+   * @return true if flipping is only supported in fullscreen mode,
+   * false otherwise
+   */
   public boolean isFullScreenRequired()
   {
     return true;
   }
 
+  /**
+   * Returns true if flipping can involve more than two buffers.  One
+   * or more intermediate buffers may be available in addition to the
+   * front and back buffers.
+   *
+   * @return true if there are more than two buffers available for
+   * flipping, false otherwise
+   */
   public boolean isMultiBufferAvailable()
   {
     return false;
   }
 
+  /**
+   * Clone this buffering capability descriptor.
+   *
+   * @return a clone of this buffer capability descriptor
+   */
   public Object clone()
   {
     try
@@ -120,7 +245,7 @@
       }
     catch (CloneNotSupportedException e)
       {
-        throw (Error) new InternalError().initCause(e); // Impossible
+        throw (Error) new InternalError().initCause(e);
       }
   }
-} // class BufferCapabilities
+}
Index: libjava/java/awt/Button.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/Button.java,v
retrieving revision 1.18
diff -u -r1.18 Button.java
--- libjava/java/awt/Button.java	21 Feb 2005 16:12:10 -0000	1.18
+++ libjava/java/awt/Button.java	9 Jul 2005 22:09:53 -0000
@@ -77,13 +77,15 @@
 
 /**
   * @serial The action command name for this button.
+  * This is package-private to avoid an accessor method.
   */
-private String actionCommand;
+String actionCommand;
 
 /**
   * @serial The label for this button.
+  * This is package-private to avoid an accessor method.
   */
-private String label;
+String label;
 
 // List of ActionListeners for this class.
 private transient ActionListener action_listeners;
Index: libjava/java/awt/Canvas.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/Canvas.java,v
retrieving revision 1.7
diff -u -r1.7 Canvas.java
--- libjava/java/awt/Canvas.java	17 Feb 2005 07:48:23 -0000	1.7
+++ libjava/java/awt/Canvas.java	9 Jul 2005 22:09:53 -0000
@@ -179,6 +179,146 @@
   }
 
   /**
+   * A BltBufferStrategy for canvases.
+   */
+  private class CanvasBltBufferStrategy extends BltBufferStrategy
+  {
+    /**
+     * Creates a block transfer strategy for this canvas.
+     *
+     * @param numBuffers the number of buffers in this strategy
+     * @param accelerated true if the buffer should be accelerated,
+     * false otherwise
+     */
+    CanvasBltBufferStrategy(int numBuffers, boolean accelerated)
+    {
+      super(numBuffers,
+	    new BufferCapabilities(new ImageCapabilities(accelerated),
+				   new ImageCapabilities(accelerated),
+				   BufferCapabilities.FlipContents.COPIED));
+    }
+  }
+
+  /**
+   * A FlipBufferStrategy for canvases.
+   */
+  private class CanvasFlipBufferStrategy extends FlipBufferStrategy
+  {
+    /**
+     * Creates a flip buffer strategy for this canvas.
+     *
+     * @param numBuffers the number of buffers in this strategy
+     *
+     * @throws AWTException if the requested number of buffers is not
+     * supported
+     */
+    CanvasFlipBufferStrategy(int numBuffers)
+      throws AWTException
+    {
+      super(numBuffers,
+	    new BufferCapabilities(new ImageCapabilities(true),
+				   new ImageCapabilities(true),
+				   BufferCapabilities.FlipContents.COPIED));
+    }
+  }
+
+  /**
+   * Creates a buffering strategy that manages how this canvas is
+   * repainted.  This method attempts to create the optimum strategy
+   * based on the desired number of buffers.  Hardware or software
+   * acceleration may be used.
+   *
+   * createBufferStrategy attempts different levels of optimization,
+   * but guarantees that some strategy with the requested number of
+   * buffers will be created even if it is not optimal.  First it
+   * attempts to create a page flipping strategy, then an accelerated
+   * blitting strategy, then an unaccelerated blitting strategy.
+   *
+   * Calling this method causes any existing buffer strategy to be
+   * destroyed.
+   *
+   * @param numBuffers the number of buffers in this strategy
+   *
+   * @throws IllegalArgumentException if requested number of buffers
+   * is less than one
+   * @throws IllegalStateException if this canvas is not displayable
+   *
+   * @since 1.4
+   */
+  public void createBufferStrategy(int numBuffers)
+  {
+    if (numBuffers < 1)
+      throw new IllegalArgumentException("Canvas.createBufferStrategy: number"
+					 + " of buffers is less than one");
+
+    if (!isDisplayable())
+      throw new IllegalStateException("Canvas.createBufferStrategy: canvas is"
+				      + " not displayable");
+
+    BufferStrategy newStrategy = null;
+
+    // try a flipping strategy
+    try
+      {
+	newStrategy = new CanvasFlipBufferStrategy(numBuffers);
+      }
+    catch (AWTException e)
+      {
+      }
+
+    // fall back to an accelerated blitting strategy
+    if (newStrategy == null)
+      newStrategy = new CanvasBltBufferStrategy(numBuffers, true);
+
+    bufferStrategy = newStrategy;
+  }
+
+  /**
+   * Creates a buffering strategy that manages how this canvas is
+   * repainted.  This method attempts to create a strategy based on
+   * the specified capabilities and throws an exception if the
+   * requested strategy is not supported.
+   *
+   * Calling this method causes any existing buffer strategy to be
+   * destroyed.
+   *
+   * @param numBuffers the number of buffers in this strategy
+   * @param caps the requested buffering capabilities
+   *
+   * @throws AWTException if the requested capabilities are not
+   * supported
+   * @throws IllegalArgumentException if requested number of buffers
+   * is less than one or if caps is null
+   *
+   * @since 1.4
+   */
+  public void createBufferStrategy(int numBuffers,
+				   BufferCapabilities caps)
+  {
+    if (numBuffers < 1)
+      throw new IllegalArgumentException("Canvas.createBufferStrategy: number"
+					 + " of buffers is less than one");
+
+    if (caps == null)
+      throw new IllegalArgumentException("Canvas.createBufferStrategy:"
+					 + " capabilities object is null");
+
+    // a flipping strategy was requested
+    if (caps.isPageFlipping())
+      {
+	try
+	  {
+	    bufferStrategy = new CanvasFlipBufferStrategy(numBuffers);
+	  }
+	catch (AWTException e)
+	  {
+	  }
+      }
+    else
+      bufferStrategy = new CanvasBltBufferStrategy(numBuffers, true);
+  }
+
+  /**
    * Returns the buffer strategy used by the canvas.
    *
    * @return the buffer strategy.
@@ -211,5 +351,4 @@
     /* Call the paint method */
     paint(graphics);
   }
-
 }
Index: libjava/java/awt/Checkbox.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/Checkbox.java,v
retrieving revision 1.12
diff -u -r1.12 Checkbox.java
--- libjava/java/awt/Checkbox.java	21 Feb 2005 21:41:28 -0000	1.12
+++ libjava/java/awt/Checkbox.java	9 Jul 2005 22:09:54 -0000
@@ -89,8 +89,9 @@
 
 /**
   * @serial The state of this checkbox.
+  * This is package-private to avoid an accessor method.
   */
-private boolean state;
+boolean state;
 
 // The list of listeners for this object.
 private transient ItemListener item_listeners;
Index: libjava/java/awt/Choice.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/Choice.java,v
retrieving revision 1.16
diff -u -r1.16 Choice.java
--- libjava/java/awt/Choice.java	16 Feb 2005 20:01:47 -0000	1.16
+++ libjava/java/awt/Choice.java	9 Jul 2005 22:09:54 -0000
@@ -74,8 +74,9 @@
 
 /**
   * @serial A list of items for the choice box, which can be <code>null</code>.
+  * This is package-private to avoid an accessor method.
   */
-private Vector pItems = new Vector();
+Vector pItems = new Vector();
 
 /**
   * @serial The index of the selected item in the choice box.
Index: libjava/java/awt/Component.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/Component.java,v
retrieving revision 1.47
diff -u -r1.47 Component.java
--- libjava/java/awt/Component.java	17 Feb 2005 07:48:23 -0000	1.47
+++ libjava/java/awt/Component.java	9 Jul 2005 22:09:55 -0000
@@ -858,8 +858,10 @@
    */
   public void enableInputMethods(boolean enable)
   {
-    // XXX Implement.
-    throw new Error("not implemented");
+    if (enable)
+      eventMask |= AWTEvent.INPUT_ENABLED_EVENT_MASK;
+    else
+      eventMask &= ~AWTEvent.INPUT_ENABLED_EVENT_MASK;
   }
 
   /**
@@ -1003,6 +1005,10 @@
    */
   public void setBackground(Color c)
   {
+    // return if the background is already set to that color.
+    if (background != null && c != null)
+      if (background.equals(c))
+	return;
     // If c is null, inherit from closest ancestor whose bg is set.
     if (c == null && parent != null)
       c = parent.getBackground();
@@ -1149,7 +1155,9 @@
   public Point getLocationOnScreen()
   {
     if (! isShowing())
-      throw new IllegalComponentStateException("component not showing");
+      throw new IllegalComponentStateException("component "
+                                               + getClass().getName()
+                                               + " not showing");
     // We know peer != null here.
     return peer.getLocationOnScreen();
   }
@@ -4441,7 +4449,9 @@
   {
     if (o == null)
       throw new NullPointerException();
+    ComponentOrientation oldOrientation = orientation;
     orientation = o;
+    firePropertyChange("componentOrientation", oldOrientation, o);
   }
 
   /**
@@ -4760,6 +4770,10 @@
                     .getCurrentKeyboardFocusManager()
                     .dispatchEvent(e))
                     return;
+              case MouseEvent.MOUSE_PRESSED:
+                if (isLightweight())
+                  requestFocus();
+                break;
               }
           }
         processEvent (e);
@@ -5572,78 +5586,432 @@
   } // class AccessibleAWTComponent
 
   /**
-   * This class provides support for blitting offscreen surfaces.
+   * This class provides support for blitting offscreen surfaces to a
+   * component.
+   *
+   * @see BufferStrategy
    *
-   * @author Eric Blake (ebb9@email.byu.edu)
    * @since 1.4
-   * @XXX Shell class, to allow compilation. This needs documentation and
-   * correct implementation.
    */
   protected class BltBufferStrategy extends BufferStrategy
   {
+    /**
+     * The capabilities of the image buffer.
+     */
     protected BufferCapabilities caps;
+
+    /**
+     * The back buffers used in this strategy.
+     */
     protected VolatileImage[] backBuffers;
+
+    /**
+     * Whether or not the image buffer resources are allocated and
+     * ready to be drawn into.
+     */
     protected boolean validatedContents;
+
+    /**
+     * The width of the back buffers.
+     */
     protected int width;
+
+    /**
+     * The height of the back buffers.
+     */
     protected int height;
-    protected BltBufferStrategy(int num, BufferCapabilities caps)
+
+    /**
+     * The front buffer.
+     */
+    private VolatileImage frontBuffer;
+
+    /**
+     * Creates a blitting buffer strategy.
+     *
+     * @param numBuffers the number of buffers, including the front
+     * buffer
+     * @param caps the capabilities of this strategy
+     */
+    protected BltBufferStrategy(int numBuffers, BufferCapabilities caps)
     {
       this.caps = caps;
-      createBackBuffers(num);
+      createBackBuffers(numBuffers - 1);
+      width = getWidth();
+      height = getHeight();
     }
-    protected void createBackBuffers(int num)
+
+    /**
+     * Initializes the backBuffers field with an array of numBuffers
+     * VolatileImages.
+     *
+     * @param numBuffers the number of backbuffers to create
+     */
+    protected void createBackBuffers(int numBuffers)
     {
-      backBuffers = new VolatileImage[num];
+      GraphicsConfiguration c =
+	GraphicsEnvironment.getLocalGraphicsEnvironment()
+	.getDefaultScreenDevice().getDefaultConfiguration();
+
+      backBuffers = new VolatileImage[numBuffers];
+
+      for (int i = 0; i < numBuffers; i++)
+	backBuffers[i] = c.createCompatibleVolatileImage(width, height);
     }
+
+    /**
+     * Retrieves the capabilities of this buffer strategy.
+     *
+     * @return the capabilities of this buffer strategy
+     */
     public BufferCapabilities getCapabilities()
     {
       return caps;
     }
-    public Graphics getDrawGraphics() { return null; }
-    public void show() {}
-    protected void revalidate() {}
-    public boolean contentsLost() { return false; }
-    public boolean contentsRestored() { return false; }
-  } // class BltBufferStrategy
+
+    /**
+     * Retrieves a graphics object that can be used to draw into this
+     * strategy's image buffer.
+     *
+     * @return a graphics object
+     */
+    public Graphics getDrawGraphics()
+    {
+      // Return the backmost buffer's graphics.
+      return backBuffers[0].getGraphics();
+    }
+
+    /**
+     * Bring the contents of the back buffer to the front buffer.
+     */
+    public void show()
+    {
+      GraphicsConfiguration c =
+	GraphicsEnvironment.getLocalGraphicsEnvironment()
+	.getDefaultScreenDevice().getDefaultConfiguration();
+
+      // draw the front buffer.
+      getGraphics().drawImage(backBuffers[backBuffers.length - 1],
+			      width, height, null);
+
+      BufferCapabilities.FlipContents f = getCapabilities().getFlipContents();
+
+      // blit the back buffers.
+      for (int i = backBuffers.length - 1; i > 0 ; i--)
+	backBuffers[i] = backBuffers[i - 1];
+
+      // create new backmost buffer.
+      if (f == BufferCapabilities.FlipContents.UNDEFINED)
+	backBuffers[0] = c.createCompatibleVolatileImage(width, height);
+
+      // create new backmost buffer and clear it to the background
+      // color.
+      if (f == BufferCapabilities.FlipContents.BACKGROUND)
+	{
+	  backBuffers[0] = c.createCompatibleVolatileImage(width, height);
+	  backBuffers[0].getGraphics().clearRect(0, 0, width, height);
+	}
+
+      // FIXME: set the backmost buffer to the prior contents of the
+      // front buffer.  How do we retrieve the contents of the front
+      // buffer?
+      //
+      //      if (f == BufferCapabilities.FlipContents.PRIOR)
+
+      // set the backmost buffer to a copy of the new front buffer.
+      if (f == BufferCapabilities.FlipContents.COPIED)
+	backBuffers[0] = backBuffers[backBuffers.length - 1];
+    }
+
+    /**
+     * Re-create the image buffer resources if they've been lost.
+     */
+    protected void revalidate()
+    {
+      GraphicsConfiguration c =
+	GraphicsEnvironment.getLocalGraphicsEnvironment()
+	.getDefaultScreenDevice().getDefaultConfiguration();
+
+      for (int i = 0; i < backBuffers.length; i++)
+	{
+	  int result = backBuffers[i].validate(c);
+	  if (result == VolatileImage.IMAGE_INCOMPATIBLE)
+	    backBuffers[i] = c.createCompatibleVolatileImage(width, height);
+	}
+      validatedContents = true;
+    }
+
+    /**
+     * Returns whether or not the image buffer resources have been
+     * lost.
+     *
+     * @return true if the resources have been lost, false otherwise
+     */
+    public boolean contentsLost()
+    {
+      for (int i = 0; i < backBuffers.length; i++)
+	{
+	  if (backBuffers[i].contentsLost())
+	    {
+	      validatedContents = false;
+	      return true;
+	    }
+	}
+      // we know that the buffer resources are valid now because we
+      // just checked them
+      validatedContents = true;
+      return false;
+    }
+
+    /**
+     * Returns whether or not the image buffer resources have been
+     * restored.
+     *
+     * @return true if the resources have been restored, false
+     * otherwise
+     */
+    public boolean contentsRestored()
+    {
+      GraphicsConfiguration c =
+	GraphicsEnvironment.getLocalGraphicsEnvironment()
+	.getDefaultScreenDevice().getDefaultConfiguration();
+
+      boolean imageRestored = false;
+
+      for (int i = 0; i < backBuffers.length; i++)
+	{
+	  int result = backBuffers[i].validate(c);
+	  if (result == VolatileImage.IMAGE_RESTORED)
+	    imageRestored = true;
+	  else if (result == VolatileImage.IMAGE_INCOMPATIBLE)
+	    return false;
+	}
+      // we know that the buffer resources are valid now because we
+      // just checked them
+      validatedContents = true;
+      return imageRestored;
+    }
+  }
 
   /**
-   * This class provides support for flipping component buffers. It is only
-   * designed for use by Canvas and Window.
+   * This class provides support for flipping component buffers. It
+   * can only be used on Canvases and Windows.
    *
-   * @author Eric Blake (ebb9@email.byu.edu)
    * @since 1.4
-   * @XXX Shell class, to allow compilation. This needs documentation and
-   * correct implementation.
    */
   protected class FlipBufferStrategy extends BufferStrategy
   {
+    /**
+     * The number of buffers.
+     */
     protected int numBuffers;
+
+    /**
+     * The capabilities of this buffering strategy.
+     */
     protected BufferCapabilities caps;
+
+    /**
+     * An Image reference to the drawing buffer.
+     */
     protected Image drawBuffer;
+
+    /**
+     * A VolatileImage reference to the drawing buffer.
+     */
     protected VolatileImage drawVBuffer;
+
+    /**
+     * Whether or not the image buffer resources are allocated and
+     * ready to be drawn into.
+     */
     protected boolean validatedContents;
-    protected FlipBufferStrategy(int num, BufferCapabilities caps)
+
+    /**
+     * The width of the back buffer.
+     */
+    private int width;
+
+    /**
+     * The height of the back buffer.
+     */
+    private int height;
+
+    /**
+     * Creates a flipping buffer strategy.  The only supported
+     * strategy for FlipBufferStrategy itself is a double-buffer page
+     * flipping strategy.  It forms the basis for more complex derived
+     * strategies.
+     *
+     * @param numBuffers the number of buffers
+     * @param caps the capabilities of this buffering strategy
+     *
+     * @throws AWTException if the requested
+     * number-of-buffers/capabilities combination is not supported
+     */
+    protected FlipBufferStrategy(int numBuffers, BufferCapabilities caps)
       throws AWTException
     {
       this.caps = caps;
-      createBuffers(num, caps);
+      width = getWidth();
+      height = getHeight();
+
+      if (numBuffers > 1)
+	createBuffers(numBuffers, caps);
+      else
+	{
+	  drawVBuffer = peer.createVolatileImage(width, height);
+	  drawBuffer = drawVBuffer;
+	}
+    }
+
+    /**
+     * Creates a multi-buffer flipping strategy.  The number of
+     * buffers must be greater than one and the buffer capabilities
+     * must specify page flipping.
+     *
+     * @param numBuffers the number of flipping buffers; must be
+     * greater than one
+     * @param caps the buffering capabilities; caps.isPageFlipping()
+     * must return true
+     *
+     * @throws IllegalArgumentException if numBuffers is not greater
+     * than one or if the page flipping capability is not requested
+     *
+     * @throws AWTException if the requested flipping strategy is not
+     * supported
+     */
+    protected void createBuffers(int numBuffers, BufferCapabilities caps)
+      throws AWTException
+    {
+      if (numBuffers <= 1)
+	throw new IllegalArgumentException("FlipBufferStrategy.createBuffers:"
+					   + " numBuffers must be greater than"
+					   + " one.");
+
+      if (!caps.isPageFlipping())
+	throw new IllegalArgumentException("FlipBufferStrategy.createBuffers:"
+					   + " flipping must be a specified"
+					   + " capability.");
+
+      peer.createBuffers(numBuffers, caps);
     }
-    protected void createBuffers(int num, BufferCapabilities caps)
-      throws AWTException {}
+
+    /**
+     * Return a direct reference to the back buffer image.
+     *
+     * @return a direct reference to the back buffer image.
+     */
     protected Image getBackBuffer()
     {
-      return drawBuffer;
+      return peer.getBackBuffer();
+    }
+
+    /**
+     * Perform a flip operation to transfer the contents of the back
+     * buffer to the front buffer.
+     */
+    protected void flip(BufferCapabilities.FlipContents flipAction)
+    {
+      peer.flip(flipAction);
     }
-    protected void flip(BufferCapabilities.FlipContents flipAction) {}
-    protected void destroyBuffers() {}
+
+    /**
+     * Release the back buffer's resources.
+     */
+    protected void destroyBuffers()
+    {
+      peer.destroyBuffers();
+    }
+
+    /**
+     * Retrieves the capabilities of this buffer strategy.
+     *
+     * @return the capabilities of this buffer strategy
+     */
     public BufferCapabilities getCapabilities()
     {
       return caps;
     }
-    public Graphics getDrawGraphics() { return null; }
-    protected void revalidate() {}
-    public boolean contentsLost() { return false; }
-    public boolean contentsRestored() { return false; }
-    public void show() {}
-  } // class FlipBufferStrategy
-} // class Component
+
+    /**
+     * Retrieves a graphics object that can be used to draw into this
+     * strategy's image buffer.
+     *
+     * @return a graphics object
+     */
+    public Graphics getDrawGraphics()
+    {
+      return drawVBuffer.getGraphics();
+    }
+
+    /**
+     * Re-create the image buffer resources if they've been lost.
+     */
+    protected void revalidate()
+    {
+      GraphicsConfiguration c =
+	GraphicsEnvironment.getLocalGraphicsEnvironment()
+	.getDefaultScreenDevice().getDefaultConfiguration();
+
+      if (drawVBuffer.validate(c) == VolatileImage.IMAGE_INCOMPATIBLE)
+	drawVBuffer = peer.createVolatileImage(width, height);
+      validatedContents = true;
+    }
+
+    /**
+     * Returns whether or not the image buffer resources have been
+     * lost.
+     *
+     * @return true if the resources have been lost, false otherwise
+     */
+    public boolean contentsLost()
+    {
+      if (drawVBuffer.contentsLost())
+	{
+	  validatedContents = false;
+	  return true;
+	}
+      // we know that the buffer resources are valid now because we
+      // just checked them
+      validatedContents = true;
+      return false;
+    }
+
+    /**
+     * Returns whether or not the image buffer resources have been
+     * restored.
+     *
+     * @return true if the resources have been restored, false
+     * otherwise
+     */
+    public boolean contentsRestored()
+    {
+      GraphicsConfiguration c =
+	GraphicsEnvironment.getLocalGraphicsEnvironment()
+	.getDefaultScreenDevice().getDefaultConfiguration();
+
+      int result = drawVBuffer.validate(c);
+
+      boolean imageRestored = false;
+
+      if (result == VolatileImage.IMAGE_RESTORED)
+	imageRestored = true;
+      else if (result == VolatileImage.IMAGE_INCOMPATIBLE)
+	return false;
+
+      // we know that the buffer resources are valid now because we
+      // just checked them
+      validatedContents = true;
+      return imageRestored;
+    }
+
+    /**
+     * Bring the contents of the back buffer to the front buffer.
+     */
+    public void show()
+    {
+      flip(caps.getFlipContents());
+    }
+  }
+}
Index: libjava/java/awt/DefaultKeyboardFocusManager.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/DefaultKeyboardFocusManager.java,v
retrieving revision 1.7
diff -u -r1.7 DefaultKeyboardFocusManager.java
--- libjava/java/awt/DefaultKeyboardFocusManager.java	16 Feb 2005 20:01:50 -0000	1.7
+++ libjava/java/awt/DefaultKeyboardFocusManager.java	9 Jul 2005 22:09:55 -0000
@@ -140,6 +140,12 @@
     }
   }
 
+  /**
+   * This flag indicates for which focus traversal key release event we
+   * possibly wait, before letting any more KEY_TYPED events through.
+   */
+  private AWTKeyStroke waitForKeyStroke = null;
+
   /** The {@link java.util.SortedSet} of current {@link
       #EventDelayRequest}s. */
   private SortedSet delayRequests = new TreeSet ();
@@ -357,10 +363,33 @@
     // the other two key event types for the same key (e.g. if
     // KEY_PRESSED TAB is a focus traversal keystroke, we also need to
     // consume KEY_RELEASED and KEY_TYPED TAB key events).
+    // consuming KEY_RELEASED is easy, because their keyCodes matches
+    // the KEY_PRESSED event. Consuming the intermediate KEY_TYPED is
+    // very difficult because their is no clean way that we can know
+    // which KEY_TYPED belongs to a focusTraversalKey and which not.
+    // To address this problem we swallow every KEY_TYPE between the
+    // KEY_PRESSED event that matches a focusTraversalKey and the
+    // corresponding KEY_RELEASED.
     AWTKeyStroke oppositeKeystroke = AWTKeyStroke.getAWTKeyStroke (e.getKeyCode (),
                                                                    e.getModifiersEx (),
                                                                    !(e.id == KeyEvent.KEY_RELEASED));
 
+    // Here we check if we are currently waiting for a KEY_RELEASED and
+    // swallow all KeyEvents that are to be delivered in between. This
+    // should only be the KEY_TYPED events that correspond to the
+    // focusTraversalKey's KEY_PRESSED event
+    if (waitForKeyStroke != null)
+      {
+        if (eventKeystroke.equals(waitForKeyStroke))
+          // release this lock
+          waitForKeyStroke = null;
+
+        // as long as we are waiting for the KEY_RELEASED, we swallow every
+        // KeyEvent, including the KEY_RELEASED
+        e.consume();
+        return;
+      }
+
     Set forwardKeystrokes = comp.getFocusTraversalKeys (KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS);
     Set backwardKeystrokes = comp.getFocusTraversalKeys (KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS);
     Set upKeystrokes = comp.getFocusTraversalKeys (KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS);
@@ -370,31 +399,29 @@
 
     if (forwardKeystrokes.contains (eventKeystroke))
       {
+        waitForKeyStroke = oppositeKeystroke;        
         focusNextComponent (comp);
         e.consume ();
       }
     else if (backwardKeystrokes.contains (eventKeystroke))
       {
+        waitForKeyStroke = oppositeKeystroke;        
         focusPreviousComponent (comp);
         e.consume ();
       }
     else if (upKeystrokes.contains (eventKeystroke))
       {
+        waitForKeyStroke = oppositeKeystroke;        
         upFocusCycle (comp);
         e.consume ();
       }
     else if (comp instanceof Container
              && downKeystrokes.contains (eventKeystroke))
       {
+        waitForKeyStroke = oppositeKeystroke;        
         downFocusCycle ((Container) comp);
         e.consume ();
       }
-    else if (forwardKeystrokes.contains (oppositeKeystroke)
-             || backwardKeystrokes.contains (oppositeKeystroke)
-             || upKeystrokes.contains (oppositeKeystroke)
-             || (comp instanceof Container &&
-                 downKeystrokes.contains (oppositeKeystroke)))
-      e.consume ();
   }
 
   protected void enqueueKeyEvents (long after, Component untilFocused)
Index: libjava/java/awt/Font.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/Font.java,v
retrieving revision 1.22
diff -u -r1.22 Font.java
--- libjava/java/awt/Font.java	21 Feb 2005 16:12:12 -0000	1.22
+++ libjava/java/awt/Font.java	9 Jul 2005 22:09:55 -0000
@@ -209,14 +209,21 @@
   * The style should be one of BOLD, ITALIC, or BOLDITALIC.  The default
   * style if none is specified is PLAIN.  The default size if none
   * is specified is 12.
+  * 
+  * @param fontspec  a string specifying the required font (<code>null</code> 
+  *                  permitted, interpreted as 'Dialog-PLAIN-12').
+  * 
+  * @return A font.
   */
   public static Font decode (String fontspec)
 {
+  if (fontspec == null) 
+    fontspec = "Dialog-PLAIN-12";
   String name = null;
   int style = PLAIN;
   int size = 12;
 
-  StringTokenizer st = new StringTokenizer(fontspec, "-");
+  StringTokenizer st = new StringTokenizer(fontspec, "- ");
   while (st.hasMoreTokens())
     {
       String token = st.nextToken();
Index: libjava/java/awt/FontMetrics.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/FontMetrics.java,v
retrieving revision 1.8
diff -u -r1.8 FontMetrics.java
--- libjava/java/awt/FontMetrics.java	30 Nov 2004 23:58:38 -0000	1.8
+++ libjava/java/awt/FontMetrics.java	9 Jul 2005 22:09:55 -0000
@@ -1,5 +1,5 @@
 /* FontMetrics.java -- Information about about a fonts display characteristics
-   Copyright (C) 1999, 2002 Free Software Foundation, Inc.
+   Copyright (C) 1999, 2002, 2005  Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -40,6 +40,7 @@
 
 import java.awt.font.FontRenderContext;
 import java.awt.font.LineMetrics;
+import java.awt.geom.Rectangle2D;
 import java.text.CharacterIterator;
 
 // FIXME: I leave many methods basically unimplemented.  This
@@ -49,7 +50,7 @@
   * This class returns information about the display characteristics of
   * a font.  It is abstract, and concrete subclasses should implement at
   * least the following methods:
-  * <p>
+  *
   * <ul>
   * <li>getAscent()</li>
   * <li>getDescent()</li>
@@ -63,401 +64,362 @@
   */
 public abstract class FontMetrics implements java.io.Serializable
 {
+  // Serialization constant.
+  private static final long serialVersionUID = 1681126225205050147L;
 
-/*
- * Static Variables
- */
-
-// Serialization constant
-private static final long serialVersionUID = 1681126225205050147L;
-
-/*************************************************************************/
-
-/*
- * Instance Variables
- */
-
-/**
-  * This is the font for which metrics will be returned.
-  */
-protected Font font;
-
-/*************************************************************************/
-
-/*
- * Constructors
- */
-
-/**
-  * Initializes a new instance of <code>FontMetrics</code> for the
-  * specified font.
-  *
-  * @param font The font to return metric information for.
-  */
-protected
-FontMetrics(Font font)
-{
-  this.font = font;
-}
-
-/*************************************************************************/
-
-/*
- * Instance Methods
- */
-
-/**
-  * Returns the font that this object is creating metric information fo.
-  *
-  * @return The font for this object.
-  */
-public Font
-getFont()
-{
-  return(font);
-}
-
-/*************************************************************************/
-
-/**
-  * Returns the leading, or spacing between lines, for this font.
-  *
-  * @return The font leading.
-  */
-public int
-getLeading()
-{
-  return(0);
-}
-
-/*************************************************************************/
-
-/**
-  * Returns the ascent of the font, which is the distance from the base
-  * to the top of the majority of characters in the set.  Some characters
-  * can exceed this value however.
-  *
-  * @return The font ascent.
-  */
-public int
-getAscent()
-{
-  return(1);
-}
-
-/*************************************************************************/
-
-/**
-  * Returns the descent of the font, which is the distance from the base
-  * to the bottom of the majority of characters in the set.  Some characters
-  * can exceed this value however.
-  *
-  * @return The font descent.
-  */
-public int
-getDescent()
-{
-  return(1);
-}
-
-/*************************************************************************/
-
-/**
-  * Returns the height of a line in this font.  This will be the sum
-  * of the leading, the ascent, and the descent.
-  *
-  * @return The height of the font.
-  */
-public int
-getHeight()
-{
-  return(getAscent() + getDescent() + getLeading());
-}
-
-/*************************************************************************/
-
-/**
-  * Returns the maximum ascent value.  This is the maximum distance any
-  * character in the font rised above the baseline.
-  *
-  * @return The maximum ascent for this font.
-  */
-public int
-getMaxAscent()
-{
-  return(getAscent());
-}
+  /**
+   * This is the font for which metrics will be returned.
+   */
+  protected Font font;
+
+  /**
+   * Initializes a new instance of <code>FontMetrics</code> for the
+   * specified font.
+   *
+   * @param font The font to return metric information for.
+   */
+  protected FontMetrics(Font font)
+  {
+    this.font = font;
+  }
 
-/*************************************************************************/
+  /**
+   * Returns the font that this object is creating metric information fo.
+   *
+   * @return The font for this object.
+   */
+  public Font getFont()
+  {
+    return font;
+  }
 
-/**
-  * Returns the maximum descent value.  This is the maximum distance any
-  * character in the font extends below the baseline.
-  *
-  * @return The maximum descent for this font.
-  */
-public int
-getMaxDescent()
-{
-  return getMaxDecent ();
-}
+  /**
+   * Returns the leading, or spacing between lines, for this font.
+   *
+   * @return The font leading.
+   */
+  public int getLeading()
+  {
+    return 0;
+  }
 
-/*************************************************************************/
+  /**
+   * Returns the ascent of the font, which is the distance from the base
+   * to the top of the majority of characters in the set.  Some characters
+   * can exceed this value however.
+   *
+   * @return The font ascent.
+   */
+  public int getAscent()
+  {
+    return 1;
+  }
 
-/**
-  * Returns the maximum descent value.  This is the maximum distance any
-  * character in the font extends below the baseline.
-  *
-  * @return The maximum descent for this font.
-  *
-  * @deprecated This method is deprecated in favor of
-  * <code>getMaxDescent()</code>.
-  */
-public int
-getMaxDecent()
-{
-  return getDescent ();
-}
+  /**
+   * Returns the descent of the font, which is the distance from the base
+   * to the bottom of the majority of characters in the set.  Some characters
+   * can exceed this value however.
+   *
+   * @return The font descent.
+   */
+  public int getDescent()
+  {
+    return 1;
+  }
 
-/*************************************************************************/
+  /**
+   * Returns the height of a line in this font.  This will be the sum
+   * of the leading, the ascent, and the descent.
+   *
+   * @return The height of the font.
+   */
+  public int getHeight()
+  {
+    return getAscent() + getDescent() + getLeading();
+  }
 
-/**
-  * Returns the width of the widest character in the font.
-  *
-  * @return The width of the widest character in the font.
-  */
-public int
-getMaxAdvance()
-{
-  return(-1);
-}
+  /**
+   * Returns the maximum ascent value.  This is the maximum distance any
+   * character in the font rised above the baseline.
+   *
+   * @return The maximum ascent for this font.
+   */
+  public int getMaxAscent()
+  {
+    return getAscent();
+  }
 
-/*************************************************************************/
+  /**
+   * Returns the maximum descent value.  This is the maximum distance any
+   * character in the font extends below the baseline.
+   *
+   * @return The maximum descent for this font.
+   */
+  public int getMaxDescent()
+  {
+    return getMaxDecent();
+  }
 
-/**
-  * Returns the width of the specified character.
-  *
-  * @param ch The character to return the width of.
-  *
-  * @return The width of the specified character.
-  */
-public int
-charWidth(int ch)
-{
-  return(charWidth((char)ch));
-}
+  /**
+   * Returns the maximum descent value.  This is the maximum distance any
+   * character in the font extends below the baseline.
+   *
+   * @return The maximum descent for this font.
+   *
+   * @deprecated This method is deprecated in favor of
+   * <code>getMaxDescent()</code>.
+   */
+  public int getMaxDecent()
+  {
+    return getDescent();
+  }
 
-/*************************************************************************/
+  /**
+   * Returns the width of the widest character in the font.
+   *
+   * @return The width of the widest character in the font.
+   */
+  public int getMaxAdvance()
+  {
+    return -1;
+  }
 
-/**
-  * Returns the width of the specified character.
-  *
-  * @param ch The character to return the width of.
-  *
-  * @return The width of the specified character.
-  */
-public int
-charWidth(char ch)
-{
-  return(1);
-}
+  /**
+   * Returns the width of the specified character.
+   *
+   * @param ch The character to return the width of.
+   *
+   * @return The width of the specified character.
+   */
+  public int charWidth(int ch)
+  {
+    return charWidth((char) ch);
+  }
 
-/*************************************************************************/
+  /**
+   * Returns the width of the specified character.
+   *
+   * @param ch The character to return the width of.
+   *
+   * @return The width of the specified character.
+   */
+  public int charWidth(char ch)
+  {
+    return 1;
+  }
 
-/**
-  * Returns the total width of the specified string
-  *
-  * @param str The string to return the width of.
-  *
-  * @return The width of the string.
-  */
-public int
-stringWidth(String str)
-{
-  char[] buf = new char[str.length()];
-  str.getChars(0, str.length(), buf, 0);
+  /**
+   * Returns the total width of the specified string
+   *
+   * @param str The string to return the width of.
+   *
+   * @return The width of the string.
+   */
+  public int stringWidth(String str)
+  {
+    char[] buf = new char[str.length()];
+    str.getChars(0, str.length(), buf, 0);
 
-  return(charsWidth(buf, 0, buf.length));
-}
+    return charsWidth(buf, 0, buf.length);
+  }
 
-/*************************************************************************/
+  /**
+   * Returns the total width of the specified character array.
+   *
+   * @param buf The character array containing the data.
+   * @param offset The offset into the array to start calculating from.
+   * @param len The total number of bytes to process.
+   *
+   * @return The width of the requested characters.
+   */
+  public int charsWidth(char[] buf, int offset, int len)
+  {
+    int total_width = 0;
+    for (int i = offset; i < len; i++)
+      total_width += charWidth(buf[i]);
+    return total_width;
+  }
 
-/**
-  * Returns the total width of the specified character array.
-  *
-  * @param buf The character array containing the data.
-  * @param offset The offset into the array to start calculating from.
-  * @param len The total number of bytes to process.
-  *
-  * @return The width of the requested characters.
-  */
-public int
-charsWidth(char buf[], int offset, int len)
-{
-  int total_width = 0;
-  for (int i = offset; i < len; i++)
-    total_width += charWidth(buf[i]);
-  return(total_width);
-}
+  /**
+   * Returns the total width of the specified byte array.
+   *
+   * @param buf The byte array containing the data.
+   * @param offset The offset into the array to start calculating from.
+   * @param len The total number of bytes to process.
+   *
+   * @return The width of the requested characters.
+   */
+  public int bytesWidth(byte[] buf, int offset, int len)
+  {
+    int total_width = 0;
+    for (int i = offset; i < len; i++)
+      total_width = charWidth((char) buf[i]);
 
-/*************************************************************************/
+    return total_width;
+  }
 
-/**
-  * Returns the total width of the specified byte array.
-  *
-  * @param buf The byte array containing the data.
-  * @param offset The offset into the array to start calculating from.
-  * @param len The total number of bytes to process.
-  *
-  * @return The width of the requested characters.
-  */
-public int
-bytesWidth(byte buf[], int offset, int len)
-{
-  int total_width = 0;
-  for (int i = offset; i < len; i++)
-    total_width = charWidth((char)buf[i]);
+  /**
+   * Returns the widths of the first 256 characters in the font.
+   *
+   * @return The widths of the first 256 characters in the font.
+   */
+  public int[] getWidths()
+  {
+    int[] result = new int[256];
+    for (char i = 0; i < 256; i++)
+      result[i] = charWidth(i);
+    return result;
+  }
 
-  return(total_width);
-}
+  /**
+   * Returns a string representation of this object.
+   *
+   * @return A string representation of this object.
+   */
+  public String toString()
+  {
+    return (this.getClass() + "[font=" + font + ",ascent=" + getAscent()
+            + ",descent=" + getDescent() + ",height=" + getHeight() + "]");
+  }
 
-/*************************************************************************/
+  // Generic FontRenderContext used when getLineMetrics is called with a
+  // plain Graphics object.
+  private static final FontRenderContext gRC = new FontRenderContext(null,
+                                                                     false,
+                                                                     false);
+
+  /**
+   * Returns a {@link LineMetrics} object constructed with the
+   * specified text and the {@link FontRenderContext} of the Graphics
+   * object when it is an instance of Graphics2D or a generic
+   * FontRenderContext with a null transform, not anti-aliased and not
+   * using fractional metrics.
+   *
+   * @param text The string to calculate metrics from.
+   * @param g The Graphics object that will be used.
+   *
+   * @return A new {@link LineMetrics} object.
+   */
+  public LineMetrics getLineMetrics(String text, Graphics g)
+  {
+    return getLineMetrics(text, 0, text.length(), g);
+  }
 
-/**
-  * Returns the widths of the first 256 characters in the font.
-  *
-  * @return The widths of the first 256 characters in the font.
-  */
-public int[]
-getWidths()
-{
-  int [] result = new int[256];
-  for(char i = 0; i < 256; i++)
+  /**
+   * Returns a {@link LineMetrics} object constructed with the
+   * specified text and the {@link FontRenderContext} of the Graphics
+   * object when it is an instance of Graphics2D or a generic
+   * FontRenderContext with a null transform, not anti-aliased and not
+   * using fractional metrics.
+   *
+   * @param text The string to calculate metrics from.
+   * @param begin Index of first character in <code>text</code> to measure.
+   * @param limit Index of last character in <code>text</code> to measure.
+   * @param g The Graphics object that will be used.
+   *
+   * @return A new {@link LineMetrics} object.
+   *
+   * @throws IndexOutOfBoundsException if the range [begin, limit] is
+   * invalid in <code>text</code>.
+   */
+  public LineMetrics getLineMetrics(String text, int begin, int limit,
+                                    Graphics g)
   {
-    result[i]= charWidth(i);
+    FontRenderContext rc;
+    if (g instanceof Graphics2D)
+      rc = ((Graphics2D) g).getFontRenderContext();
+    else
+      rc = gRC;
+    return font.getLineMetrics(text, begin, limit, rc);
   }
-  return(result);
-}
 
-/*************************************************************************/
+  /**
+   * Returns a {@link LineMetrics} object constructed with the
+   * specified text and the {@link FontRenderContext} of the Graphics
+   * object when it is an instance of Graphics2D or a generic
+   * FontRenderContext with a null transform, not anti-aliased and not
+   * using fractional metrics.
+   *
+   * @param chars The string to calculate metrics from.
+   * @param begin Index of first character in <code>text</code> to measure.
+   * @param limit Index of last character in <code>text</code> to measure.
+   * @param g The Graphics object that will be used.
+   *
+   * @return A new {@link LineMetrics} object.
+   *
+   * @throws IndexOutOfBoundsException if the range [begin, limit] is
+   * invalid in <code>text</code>.
+   */
+  public LineMetrics getLineMetrics(char[] chars, int begin, int limit,
+                                    Graphics g)
+  {
+    FontRenderContext rc;
+    if (g instanceof Graphics2D)
+      rc = ((Graphics2D) g).getFontRenderContext();
+    else
+      rc = gRC;
+    return font.getLineMetrics(chars, begin, limit, rc);
+  }
 
-/**
-  * Returns a string representation of this object.
-  *
-  * @return A string representation of this object.
-  */
-public String
-toString()
-{
-  return (this.getClass() + "[font=" + font + ",ascent=" + getAscent() 
-	  + ",descent=" + getDescent() + ",height=" + getHeight() + "]");
-}
+  /**
+   * Returns a {@link LineMetrics} object constructed with the
+   * specified text and the {@link FontRenderContext} of the Graphics
+   * object when it is an instance of Graphics2D or a generic
+   * FontRenderContext with a null transform, not anti-aliased and not
+   * using fractional metrics.
+   *
+   * @param ci An iterator over the string to calculate metrics from.
+   * @param begin Index of first character in <code>text</code> to measure.
+   * @param limit Index of last character in <code>text</code> to measure.
+   * @param g The Graphics object that will be used.
+   *
+   * @return A new {@link LineMetrics} object.
+   *
+   * @throws IndexOutOfBoundsException if the range [begin, limit] is
+   * invalid in <code>text</code>.
+   */
+  public LineMetrics getLineMetrics(CharacterIterator ci, int begin,
+                                    int limit, Graphics g)
+  {
+    FontRenderContext rc;
+    if (g instanceof Graphics2D)
+      rc = ((Graphics2D) g).getFontRenderContext();
+    else
+      rc = gRC;
+    return font.getLineMetrics(ci, begin, limit, rc);
+  }
 
+  public Rectangle2D getStringBounds(String str, Graphics context)
+  {
+    return font.getStringBounds(str, getFontRenderContext(context));
+  }
 
-// Generic FontRenderContext used when getLineMetrics is called with a
-// plain Graphics object.
-private static final FontRenderContext gRC = new FontRenderContext(null,
-								   false,
-								   false);
+  public Rectangle2D getStringBounds(String str, int beginIndex, int limit,
+                                     Graphics context)
+  {
+    return font.getStringBounds(str, beginIndex, limit,
+                                getFontRenderContext(context));
+  }
 
-/**
-  * Returns a {@link LineMetrics} object constructed with the
-  * specified text and the {@link FontRenderContext} of the Graphics
-  * object when it is an instance of Graphics2D or a generic
-  * FontRenderContext with a null transform, not anti-aliased and not
-  * using fractional metrics.
-  *
-  * @param text The string to calculate metrics from.
-  * @param g The Graphics object that will be used.
-  *
-  * @return A new {@link LineMetrics} object.
-  */
-public LineMetrics getLineMetrics(String text, Graphics g)
-{
-  return getLineMetrics(text, 0, text.length(), g);
-}
+  public Rectangle2D getStringBounds(char[] chars, int beginIndex, int limit,
+                                     Graphics context)
+  {
+    return font.getStringBounds(chars, beginIndex, limit,
+                                getFontRenderContext(context));
+  }
 
-/**
- * Returns a {@link LineMetrics} object constructed with the
- * specified text and the {@link FontRenderContext} of the Graphics
- * object when it is an instance of Graphics2D or a generic
- * FontRenderContext with a null transform, not anti-aliased and not
- * using fractional metrics.
- *
- * @param text The string to calculate metrics from.
- * @param begin Index of first character in <code>text</code> to measure.
- * @param limit Index of last character in <code>text</code> to measure.
- * @param g The Graphics object that will be used.
- *
- * @return A new {@link LineMetrics} object.
- *
- * @throws IndexOutOfBoundsException if the range [begin, limit] is
- * invalid in <code>text</code>.
- */
-public LineMetrics getLineMetrics(String text, int begin, 
-				  int limit, Graphics g)
-{
-  FontRenderContext rc;
-  if (g instanceof Graphics2D)
-    rc = ((Graphics2D) g).getFontRenderContext();
-  else
-    rc = gRC;
-  return font.getLineMetrics(text, begin, limit, rc);
-}
+  public Rectangle2D getStringBounds(CharacterIterator ci, int beginIndex,
+                                     int limit, Graphics context)
+  {
+    return font.getStringBounds(ci, beginIndex, limit,
+                                getFontRenderContext(context));
+  }
 
-/**
- * Returns a {@link LineMetrics} object constructed with the
- * specified text and the {@link FontRenderContext} of the Graphics
- * object when it is an instance of Graphics2D or a generic
- * FontRenderContext with a null transform, not anti-aliased and not
- * using fractional metrics.
- *
- * @param chars The string to calculate metrics from.
- * @param begin Index of first character in <code>text</code> to measure.
- * @param limit Index of last character in <code>text</code> to measure.
- * @param g The Graphics object that will be used.
- *
- * @return A new {@link LineMetrics} object.
- *
- * @throws IndexOutOfBoundsException if the range [begin, limit] is
- * invalid in <code>text</code>.
- */
-public LineMetrics getLineMetrics(char[] chars, int begin, 
-				  int limit, Graphics g)
-{
-  FontRenderContext rc;
-  if (g instanceof Graphics2D)
-    rc = ((Graphics2D) g).getFontRenderContext();
-  else
-    rc = gRC;
-  return font.getLineMetrics(chars, begin, limit, rc);
-}
+  private FontRenderContext getFontRenderContext(Graphics context)
+  {
+    if (context instanceof Graphics2D)
+      return ((Graphics2D) context).getFontRenderContext();
 
-/**
- * Returns a {@link LineMetrics} object constructed with the
- * specified text and the {@link FontRenderContext} of the Graphics
- * object when it is an instance of Graphics2D or a generic
- * FontRenderContext with a null transform, not anti-aliased and not
- * using fractional metrics.
- *
- * @param ci An iterator over the string to calculate metrics from.
- * @param begin Index of first character in <code>text</code> to measure.
- * @param limit Index of last character in <code>text</code> to measure.
- * @param g The Graphics object that will be used.
- *
- * @return A new {@link LineMetrics} object.
- *
- * @throws IndexOutOfBoundsException if the range [begin, limit] is
- * invalid in <code>text</code>.
- */
-public LineMetrics getLineMetrics(CharacterIterator ci, int begin, 
-				  int limit, Graphics g)
-{
-  FontRenderContext rc;
-  if (g instanceof Graphics2D)
-    rc = ((Graphics2D) g).getFontRenderContext();
-  else
-    rc = gRC;
-  return font.getLineMetrics(ci, begin, limit, rc);
-}
+    return gRC;
+  }
 }
Index: libjava/java/awt/Frame.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/Frame.java,v
retrieving revision 1.24
diff -u -r1.24 Frame.java
--- libjava/java/awt/Frame.java	21 Feb 2005 16:12:13 -0000	1.24
+++ libjava/java/awt/Frame.java	9 Jul 2005 22:09:55 -0000
@@ -186,8 +186,9 @@
 /**
   * @serial The state of this frame.
   * // FIXME: What are the values here?
+  * This is package-private to avoid an accessor method.
   */
-private int state;
+int state;
 
 /**
   * @serial The title of the frame.
@@ -592,7 +593,7 @@
    */
   public void setUndecorated (boolean undecorated)
   {
-    if (!isDisplayable ())
+    if (isDisplayable ())
       throw new IllegalComponentStateException ();
 
     this.undecorated = undecorated;
Index: libjava/java/awt/GradientPaint.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/GradientPaint.java,v
retrieving revision 1.1
diff -u -r1.1 GradientPaint.java
--- libjava/java/awt/GradientPaint.java	9 Aug 2002 04:26:14 -0000	1.1
+++ libjava/java/awt/GradientPaint.java	9 Jul 2005 22:09:56 -0000
@@ -1,5 +1,5 @@
 /* GradientPaint.java -- 
-   Copyright (C) 2002 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2005, Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -42,9 +42,11 @@
 import java.awt.geom.Point2D;
 import java.awt.geom.Rectangle2D;
 import java.awt.image.ColorModel;
+import gnu.java.awt.GradientPaintContext;
 
 /**
- * STUB CLASS ONLY
+ * A paint object that can be used to color a region by blending two colors. 
+ * Instances of this class are immutable.
  */
 public class GradientPaint implements Paint
 {
@@ -56,18 +58,48 @@
   private final Color c2;
   private final boolean cyclic;
 
+  /**
+   * Creates a new acyclic <code>GradientPaint</code>.
+   * 
+   * @param x1  the x-coordinate of the anchor point for color 1.
+   * @param y1  the y-coordinate of the anchor point for color 1.
+   * @param c1  color 1 (<code>null</code> not permitted).
+   * @param x2  the x-coordinate of the anchor point for color 2.
+   * @param y2  the y-coordinate of the anchor point for color 2.
+   * @param c2  the second color (<code>null</code> not permitted).
+   */
   public GradientPaint(float x1, float y1, Color c1,
                        float x2, float y2, Color c2)
   {
     this(x1, y1, c1, x2, y2, c2, false);
   }
 
+  /**
+   * Creates a new acyclic <code>GradientPaint</code>.
+   * 
+   * @param p1  anchor point 1 (<code>null</code> not permitted).
+   * @param c1  color 1 (<code>null</code> not permitted).
+   * @param p2  anchor point 2 (<code>null</code> not permitted).
+   * @param c2  color 2 (<code>null</code> not permitted).
+   */
   public GradientPaint(Point2D p1, Color c1, Point2D p2, Color c2)
   {
     this((float) p1.getX(), (float) p1.getY(), c1,
          (float) p2.getX(), (float) p2.getY(), c2, false);
   }
 
+  /**
+   * Creates a new cyclic or acyclic <code>GradientPaint</code>.
+   * 
+   * @param x1  the x-coordinate of the anchor point for color 1.
+   * @param y1  the y-coordinate of the anchor point for color 1.
+   * @param c1  color 1 (<code>null</code> not permitted).
+   * @param x2  the x-coordinate of the anchor point for color 2.
+   * @param y2  the y-coordinate of the anchor point for color 2.
+   * @param c2  the second color (<code>null</code> not permitted).
+   * @param cyclic  a flag that controls whether the gradient is cyclic or
+   *                acyclic.
+   */
   public GradientPaint(float x1, float y1, Color c1,
                        float x2, float y2, Color c2, boolean cyclic)
   {
@@ -82,6 +114,16 @@
     this.cyclic = cyclic;
   }
 
+  /**
+   * Creates a new cyclic or acyclic <code>GradientPaint</code>.
+   * 
+   * @param p1  anchor point 1 (<code>null</code> not permitted).
+   * @param c1  color 1 (<code>null</code> not permitted).
+   * @param p2  anchor point 2 (<code>null</code> not permitted).
+   * @param c2  color 2 (<code>null</code> not permitted).
+   * @param cyclic  a flag that controls whether the gradient is cyclic or
+   *                acyclic.
+   */
   public GradientPaint(Point2D p1, Color c1, Point2D p2, Color c2,
                        boolean cyclic)
   {
@@ -89,41 +131,99 @@
          (float) p2.getX(), (float) p2.getY(), c2, cyclic);
   }
 
+  /**
+   * Returns a point with the same coordinates as the anchor point for color 1.
+   * Note that if you modify this point, the <code>GradientPaint</code> remains
+   * unchanged.
+   * 
+   * @return A point with the same coordinates as the anchor point for color 1.
+   */
   public Point2D getPoint1()
   {
     return new Point2D.Float(x1, y1);
   }
 
+  /**
+   * Returns the first color.
+   * 
+   * @return The color (never <code>null</code>).
+   */
   public Color getColor1()
   {
     return c1;
   }
 
+  /**
+   * Returns a point with the same coordinates as the anchor point for color 2.
+   * Note that if you modify this point, the <code>GradientPaint</code> remains
+   * unchanged.
+   * 
+   * @return A point with the same coordinates as the anchor point for color 2.
+   */
   public Point2D getPoint2()
   {
     return new Point2D.Float(x2, y2);
   }
 
+  /**
+   * Returns the second color.
+   * 
+   * @return The color (never <code>null</code>).
+   */
   public Color getColor2()
   {
     return c2;
   }
 
+  /**
+   * Returns <code>true</code> if this <code>GradientPaint</code> instance is
+   * cyclic, and <code>false</code> otherwise.
+   * 
+   * @return A boolean.
+   */
   public boolean isCyclic()
   {
     return cyclic;
   }
 
+  /**
+   * Returns the {@link PaintContext} used to generate the color pattern.
+   * 
+   * @param cm  the color model, used as a hint (ignored in this 
+   *            implementation).
+   * @param deviceBounds  the device space bounding box of the painted area.
+   * @param userBounds  the user space bounding box of the painted area.
+   * @param xform  the transformation from user space to device space.
+   * @param hints  any hints for choosing between rendering alternatives.
+   * 
+   * @return The context for performing the paint
+   */
   public PaintContext createContext(ColorModel cm, Rectangle deviceBounds,
                                     Rectangle2D userBounds,
                                     AffineTransform xform,
                                     RenderingHints hints)
   {
-    throw new Error("not implemented");
+    Point2D xp1 = xform.transform(getPoint1(), null);
+    Point2D xp2 = xform.transform(getPoint2(), null);
+    return new GradientPaintContext((float) xp1.getX(), (float) xp1.getY(), c1, 
+            (float) xp2.getX(), (float) xp2.getY(), c2, cyclic);
   }
 
+  /**
+   * Returns the transparency code for this <code>GradientPaint</code> instance.
+   * This is derived from the two {@link Color} objects used in creating this
+   * object:  if both colors are opaque, this method returns 
+   * {@link Transparency#OPAQUE}, otherwise it returns 
+   * {@link Transparency#TRANSLUCENT}.
+   * 
+   * @return {@link Transparency#OPAQUE} or {@link Transparency#TRANSLUCENT}.
+   */
   public int getTransparency()
   {
-    throw new Error("not implemented");
+    if (c1.getAlpha() == 255 && c2.getAlpha() == 255)
+      return Transparency.OPAQUE;
+    else
+      return Transparency.TRANSLUCENT;   
   }
+  
 } // class GradientPaint
Index: libjava/java/awt/GraphicsDevice.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/GraphicsDevice.java,v
retrieving revision 1.2
diff -u -r1.2 GraphicsDevice.java
--- libjava/java/awt/GraphicsDevice.java	17 Feb 2005 07:48:24 -0000	1.2
+++ libjava/java/awt/GraphicsDevice.java	9 Jul 2005 22:09:56 -0000
@@ -64,6 +64,12 @@
   /** The current full-screen window, or null if there is none. */
   private Window full_screen;
 
+  /**
+   * The bounds of the fullscreen window before it has been switched to full
+   * screen.
+   */
+  private Rectangle fullScreenOldBounds;
+
   /** The current display mode, or null if unknown. */
   private DisplayMode mode;
 
@@ -151,9 +157,9 @@
    * </ul><br>
    * If <code>isFullScreenSupported()</code> returns false, full-screen
    * exclusive mode is simulated by resizing the window to the size of the
-   * screen and positioning it at (0,0).
-   *
-   * XXX Not yet implemented in Classpath.
+   * screen and positioning it at (0,0). This is also what this method does.
+   * If a device supports real fullscreen mode then it should override this
+   * method as well as #isFullScreenSupported and #getFullScreenWindow.
    *
    * @param w the window to toggle
    * @see #isFullScreenSupported()
@@ -164,11 +170,24 @@
    */
   public synchronized void setFullScreenWindow(Window w)
   {
+    // Restore the previous window to normal mode and release the reference.
     if (full_screen != null)
-      ; // XXX Restore the previous window to normal mode.
-    full_screen = w;
-    // XXX If w != null, make it full-screen.
-    throw new Error("not implemented");
+      {
+	full_screen.setBounds(fullScreenOldBounds);
+      }
+
+    full_screen = null;
+
+    // If w != null, make it full-screen.
+    if (w != null)
+      {
+	fullScreenOldBounds = w.getBounds();
+	full_screen = w;
+	DisplayMode dMode = getDisplayMode();
+	full_screen.setBounds(0, 0, dMode.getWidth(), dMode.getHeight());
+	full_screen.requestFocus();
+	full_screen.setLocationRelativeTo(null);
+      }
   }
 
   /**
Index: libjava/java/awt/ImageCapabilities.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/ImageCapabilities.java,v
retrieving revision 1.1
diff -u -r1.1 ImageCapabilities.java
--- libjava/java/awt/ImageCapabilities.java	9 Aug 2002 04:26:14 -0000	1.1
+++ libjava/java/awt/ImageCapabilities.java	9 Jul 2005 22:09:56 -0000
@@ -1,5 +1,5 @@
-/* ImageCapabilities.java -- 
-   Copyright (C) 2002 Free Software Foundation, Inc.
+/* ImageCapabilities.java -- the capabilities of an image buffer
+   Copyright (C) 2002, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -39,23 +39,60 @@
 package java.awt;
 
 /**
- * STUBS ONLY
+ * This class represents the capabilities of an image buffer.  An
+ * image buffer may be backed by accelerated graphics resources.
+ * Those resources may or may not be volatile.  This class is used to
+ * describe these image buffer characteristics.
  */
 public class ImageCapabilities implements Cloneable
 {
+  /**
+   * Whether or not this the image buffer uses accelerated graphics
+   * resources.
+   */
   private final boolean accelerated;
+
+  /**
+   * Create a new image capability descriptor.
+   *
+   * @param accelerated true if the image buffer uses accelerated
+   * graphics resources
+   */
   public ImageCapabilities(boolean accelerated)
   {
     this.accelerated = accelerated;
   }
+
+  /**
+   * Returns whether or not the image buffer uses accelerated graphics
+   * resources.
+   *
+   * @return true if the image buffer uses accelerated graphics
+   * resources; false otherwise
+   */
   public boolean isAccelerated()
   {
     return accelerated;
   }
+
+  /**
+   * Returns whether or not the image buffer's resources are volatile,
+   * meaning that they can be reclaimed by the graphics system at any
+   * time.
+   *
+   * @return true if the image buffer's resources are volatile; false
+   * otherwise
+   */
   public boolean isTrueVolatile()
   {
     return true;
   }
+
+  /**
+   * Clone this image capability descriptor.
+   *
+   * @return a clone of this image capability descriptor
+   */
   public Object clone()
   {
     try
@@ -64,7 +101,7 @@
       }
     catch (CloneNotSupportedException e)
       {
-        throw (Error) new InternalError().initCause(e); // Impossible
+        throw (Error) new InternalError().initCause(e);
       }
   }
-} // class ImageCapabilities
+}
Index: libjava/java/awt/MediaTracker.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/MediaTracker.java,v
retrieving revision 1.7
diff -u -r1.7 MediaTracker.java
--- libjava/java/awt/MediaTracker.java	30 Nov 2004 23:58:41 -0000	1.7
+++ libjava/java/awt/MediaTracker.java	9 Jul 2005 22:09:56 -0000
@@ -1,5 +1,5 @@
 /* MediaTracker.java -- Class used for keeping track of images
-   Copyright (C) 1999, 2002i, 2004  Free Software Foundation, Inc.
+   Copyright (C) 1999, 2002, 2004, 2005  Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -45,95 +45,191 @@
   * This class is used for keeping track of the status of various media
   * objects.
   *
+  * Media objects are tracked by assigning them an ID. It is possible
+  * to assign the same ID to mutliple objects, effectivly grouping them
+  * together. In this case the status flags ({@link #statusID}) and error flag
+  * (@link #isErrorID} and {@link #getErrorId}) are ORed together. This
+  * means that you cannot say exactly which media object has which status,
+  * at most you can say that there <em>are</em> certain media objects with
+  * some certain status.
+  * 
+  * At the moment only images are supported by this class.
+  *
   * @author Aaron M. Renn (arenn@urbanophile.com)
   * @author Bryce McKinlay
   */
 public class MediaTracker implements java.io.Serializable
 {
+  /** Indicates that the media is still loading. */
   public static final int LOADING = 1 << 0;
+
+  /** Indicates that the loading operation has been aborted. */
   public static final int ABORTED = 1 << 1;
+
+  /** Indicates that an error has occured during loading of the media. */
   public static final int ERRORED = 1 << 2;
+
+  /** Indicates that the media has been successfully and completely loaded. */
   public static final int COMPLETE = 1 << 3;
-  
+
+  /** The component on which the media is eventually been drawn. */
   Component target;
+
+  /** The head of the linked list of tracked media objects. */
   MediaEntry head;
 
+  /** Our serialVersionUID for serialization. */
   static final long serialVersionUID = -483174189758638095L;
 
+  /**
+   * This represents a media object that is tracked by a MediaTracker.
+   * It also implements a simple linked list.
+   */
   // FIXME: The serialized form documentation says MediaEntry is a 
   // serializable field, but the serialized form of MediaEntry itself
   // doesn't appear to be documented.
   class MediaEntry implements ImageObserver
   {
+    /** The ID of the media object. */
     int id;
+
+    /** The media object. (only images are supported ATM). */
     Image image;
+
+    /** The link to the next entry in the list. */
     MediaEntry next;
+
+    /** The tracking status. */
     int status;
+
+    /** The width of the image. */
     int width;
+
+    /** The height of the image. */
     int height;
     
+    /**
+     * Receives notification from an {@link java.awt.image.ImageProducer}
+     * that more data of the image is available.
+     *
+     * @param img the image that is updated
+     * @param flags flags from the ImageProducer that indicate the status
+     *        of the loading process
+     * @param x the X coordinate of the upper left corner of the image
+     * @param y the Y coordinate of the upper left corner of the image
+     * @param width the width of the image
+     * @param height the height of the image
+     *
+     * @return <code>true</code> if more data is needed, <code>false</code>
+     *         otherwise
+     *
+     * @see {@link java.awt.image.ImageObserver}
+     */
     public boolean imageUpdate(Image img, int flags, int x, int y, 
-			       int width, int height)
+                               int width, int height)
     {
       if ((flags & ABORT) != 0)
-        status = ABORTED | COMPLETE;
+        status = ABORTED;
       else if ((flags & ERROR) != 0)
-        status = ERRORED | COMPLETE;
+        status = ERRORED;
       else if ((flags & ALLBITS) != 0)
         status = COMPLETE;
-      else if ((flags & SOMEBITS) != 0)
-        status = LOADING;
       else
         status = 0;
 
-      if ((status & COMPLETE) == COMPLETE)
-      {
-        synchronized (MediaTracker.this)
+      synchronized (MediaTracker.this)
         {
           MediaTracker.this.notifyAll();
         }
-      }
+
       // If status is not COMPLETE then we need more updates.
-      return (status & COMPLETE) == 0;
+      return ((status & (COMPLETE | ERRORED | ABORTED)) == 0);
     }
   }
 
+  /**
+   * Constructs a new MediaTracker for the component <code>c</code>. The
+   * component should be the component that uses the media (i.e. draws it).
+   *
+   * @param c the Component that wants to use the media
+   */
   public MediaTracker(Component c)
   {
     target = c;
   }
 
+  /**
+   * Adds an image to the tracker with the specified <code>ID</code>.
+   *
+   * @param image the image to be added
+   * @param id the ID of the tracker list to which the image is added
+   */
   public void addImage(Image image, int id)
   {
     MediaEntry e = new MediaEntry();
     e.id = id;
     e.image = image;
-    e.next = head;
-    head = e;
-    // Start tracking image status.
-    int flags = target.checkImage(image, e);
-    e.imageUpdate(image, flags, -1, -1, -1, -1);
+    synchronized(this)
+      {
+        e.next = head;
+        head = e;
+      }
   }
 
+  /**
+   * Adds an image to the tracker with the specified <code>ID</code>.
+   * The image is expected to be rendered with the specified width and
+   * height.
+   *
+   * @param image the image to be added
+   * @param id the ID of the tracker list to which the image is added
+   * @param width the width of the image
+   * @param height the height of the image
+   */
   public void addImage(Image image, int id, int width, int height)
   {
     MediaEntry e = new MediaEntry();
     e.id = id;
     e.image = image;
-    e.next = head;
     e.width = width;
     e.height = height;
-    head = e;
-    // Start tracking image status.
-    int flags = target.checkImage(image, width, height, e);
-    e.imageUpdate(image, flags, -1, -1, width, height);
+    synchronized(this)
+      {
+        e.next = head;
+        head = e;
+      }
   }
 
+  /**
+   * Checks if all media objects have finished loading, i.e. are
+   * {@link #COMPLETE}, {@link #ABORTED} or {@link #ERRORED}.
+   *
+   * If the media objects are not already loading, a call to this
+   * method does <em>not</em> start loading. This is equivalent to
+   * a call to <code>checkAll(false)</code>.
+   *
+   * @return if all media objects have finished loading either by beeing
+   *         complete, have been aborted or errored.
+   */
   public boolean checkAll()
   {
     return checkAll(false);
   }
 
+  /**
+   * Checks if all media objects have finished loading, i.e. are
+   * {@link #COMPLETE}, {@link #ABORTED} or {@link #ERRORED}.
+   *
+   * If the media objects are not already loading, and <code>load</code>
+   * is <code>true</code> then a call to this
+   * method starts loading the media objects.
+   *
+   * @param load if <code>true</code> this method starts loading objects
+   *        that are not already loading
+   *
+   * @return if all media objects have finished loading either by beeing
+   *         complete, have been aborted or errored.
+   */
   public boolean checkAll(boolean load)
   {
     MediaEntry e = head;
@@ -141,37 +237,53 @@
     
     while (e != null)
       {
-	if ((e.status & COMPLETE) == 0)
-	  {
-	    if (load)
-	      {
-		result = false;
-	        if (e.status == 0)
-		  {
-		    target.prepareImage(e.image, e);
-		    e.status = LOADING;
-		  }
-	      }
-	    else
-	      return false;
-	  }
-	e = e.next;
+        if ((e.status & (COMPLETE | ERRORED | ABORTED)) == 0)
+          {
+            if (load && ((e.status & LOADING) == 0))
+              {
+                e.status = LOADING;
+                result = false;
+                boolean complete = target.prepareImage(e.image, e);
+                if (complete)
+                  {
+                    e.status = COMPLETE;
+                    result = true;
+                  }
+              }
+            else
+              result = false;
+          }
+        e = e.next;
       }
     return result;
   }
 
+  /**
+   * Checks if any of the registered media objects has encountered an error
+   * during loading.
+   *
+   * @return <code>true</code> if at least one media object has encountered
+   *         an error during loading, <code>false</code> otherwise
+   *
+   */
   public boolean isErrorAny()
   {
     MediaEntry e = head;    
     while (e != null)
       {
         if ((e.status & ERRORED) != 0)
-	  return true;
+          return true;
         e = e.next;
       }
     return false;
   }
 
+  /**
+   * Returns all media objects that have encountered errors during loading.
+   *
+   * @return an array of all media objects that have encountered errors
+   *         or <code>null</code> if there were no errors at all
+   */
   public Object[] getErrorsAny()
   {
     MediaEntry e = head;
@@ -179,11 +291,11 @@
     while (e != null)
       {
         if ((e.status & ERRORED) != 0)
-	  {
-	    if (result == null)
-	      result = new ArrayList();
-	    result.add(e.image);
-	  }
+          {
+            if (result == null)
+              result = new ArrayList();
+            result.add(e.image);
+          }
         e = e.next;
       }
     if (result == null)
@@ -192,6 +304,13 @@
       return result.toArray();
   }
 
+  /**
+   * Waits for all media objects to finish loading, either by completing
+   * successfully or by aborting or encountering an error.
+   *
+   * @throws InterruptedException if another thread interrupted the
+   *         current thread while waiting
+   */
   public void waitForAll() throws InterruptedException
   {
     synchronized (this)
@@ -201,20 +320,51 @@
     }
   }
 
+  /**
+   * Waits for all media objects to finish loading, either by completing
+   * successfully or by aborting or encountering an error.
+   *
+   * This method waits at most <code>ms</code> milliseconds. If the
+   * media objects have not completed loading within this timeframe, this
+   * method returns <code>false</code>, otherwise <code>true</code>.
+   *
+   * @param ms timeframe in milliseconds to wait for the media objects to
+   *        finish
+   *
+   * @return <code>true</code> if all media objects have successfully loaded
+   *         within the timeframe, <code>false</code> otherwise
+   *
+   * @throws InterruptedException if another thread interrupted the
+   *         current thread while waiting
+   */
   public boolean waitForAll(long ms) throws InterruptedException
   {
     long start = System.currentTimeMillis();
+    boolean result = checkAll(true);
     synchronized (this)
     {
-      while (!checkAll(true))
-        wait(ms);
+      while (result == false)
+        {
+          wait(ms);
+          result = checkAll(true);
+          if ((System.currentTimeMillis() - start) > ms)
+            break;
+        }
     }
-    if ((System.currentTimeMillis() - start) < ms)
-      return true;
-    else
-      return false;
+
+    return result;
   }
 
+  /**
+   * Returns the status flags of all registered media objects ORed together.
+   * If <code>load</code> is <code>true</code> then media objects that
+   * are not already loading will be started to load.
+   *
+   * @param load if set to <code>true</code> then media objects that are
+   *        not already loading are started
+   *
+   * @return the status flags of all tracked media objects ORed together
+   */
   public int statusAll(boolean load)
   {
     int result = 0;
@@ -222,21 +372,44 @@
     while (e != null)
       {
         if (load && e.status == 0)
-	  {
-	    target.prepareImage(e.image, e);
-	    e.status = LOADING;
-	  }
+          {
+            boolean complete = target.prepareImage(e.image, e);
+            if (complete)
+              e.status = COMPLETE;
+            else
+              e.status = LOADING;
+          }
         result |= e.status;
-	e = e.next;
+        e = e.next;
       }
     return result;
   }
 
+  /**
+   * Checks if the media objects with <code>ID</code> have completed loading.
+   *
+   * @param id the ID of the media objects to check
+   *
+   * @return <code>true</code> if all media objects with <code>ID</code>
+   *         have successfully finished
+   */
   public boolean checkID(int id)
   {
     return checkID(id, false);
   }
 
+  /**
+   * Checks if the media objects with <code>ID</code> have completed loading.
+   * If <code>load</code> is <code>true</code> then media objects that
+   * are not already loading will be started to load.
+   *
+   * @param id the ID of the media objects to check
+   * @param load if set to <code>true</code> then media objects that are
+   *        not already loading are started
+   *
+   * @return <code>true</code> if all media objects with <code>ID</code>
+   *         have successfully finished
+   */
   public boolean checkID(int id, boolean load)
   {
     MediaEntry e = head;
@@ -244,37 +417,57 @@
     
     while (e != null)
       {
-	if (e.id == id && ((e.status & COMPLETE) == 0))
-	  {
-	    if (load)
-	      {
-		result = false;
-	        if (e.status == 0)
-		  {
-		    target.prepareImage(e.image, e);
-		    e.status = LOADING;
-		  }
-	      }
-	    else
-	      return false;
-	  }
-	e = e.next;
+        if (e.id == id && ((e.status & (COMPLETE | ABORTED | ERRORED)) == 0))
+          {
+            if (load && ((e.status & LOADING) == 0))
+              {
+                e.status = LOADING;
+                result = false;
+                boolean complete = target.prepareImage(e.image, e);
+                if (complete)
+                  {
+                    e.status = COMPLETE;
+                    result = true;
+                  }
+              }
+            else
+              result = false;
+          }
+        e = e.next;
       }
     return result;
   }
 
+  /**
+   * Returns <code>true</code> if any of the media objects with <code>ID</code>
+   * have encountered errors during loading, false otherwise.
+   *
+   * @param id the ID of the media objects to check
+   *
+   * @return <code>true</code> if any of the media objects with <code>ID</code>
+   *         have encountered errors during loading, false otherwise
+   */
   public boolean isErrorID(int id)
   {
     MediaEntry e = head;    
     while (e != null)
       {
         if (e.id == id && ((e.status & ERRORED) != 0))
-	  return true;
+          return true;
         e = e.next;
       }
     return false;
   }
 
+  /**
+   * Returns all media objects with the specified ID that have encountered
+   * an error.
+   *
+   * @param id the ID of the media objects to check
+   *
+   * @return an array of all media objects  with the specified ID that
+   *         have encountered an error
+   */
   public Object[] getErrorsID(int id)
   {
     MediaEntry e = head;
@@ -282,11 +475,11 @@
     while (e != null)
       {
         if (e.id == id && ((e.status & ERRORED) != 0))
-	  {
-	    if (result == null)
-	      result = new ArrayList();
-	    result.add(e.image);
-	  }
+          {
+            if (result == null)
+              result = new ArrayList();
+            result.add(e.image);
+          }
         e = e.next;
       }
     if (result == null)
@@ -295,6 +488,15 @@
       return result.toArray();
   }
 
+  /**
+   * Waits for all media objects with the specified ID to finish loading,
+   * either by completing successfully or by aborting or encountering an error.
+   *
+   * @param id the ID of the media objects to wait for
+   *
+   * @throws InterruptedException if another thread interrupted the
+   *         current thread while waiting
+   */
   public void waitForID(int id) throws InterruptedException
   {
     MediaEntry e = head;
@@ -305,21 +507,56 @@
     }
   }
 
+  /**
+   * Waits for all media objects with the specified ID to finish loading,
+   * either by completing successfully or by aborting or encountering an error.
+   *
+   * This method waits at most <code>ms</code> milliseconds. If the
+   * media objects have not completed loading within this timeframe, this
+   * method returns <code>false</code>, otherwise <code>true</code>.
+   *
+   * @param id the ID of the media objects to wait for
+   * @param ms timeframe in milliseconds to wait for the media objects to
+   *        finish
+   *
+   * @return <code>true</code> if all media objects have successfully loaded
+   *         within the timeframe, <code>false</code> otherwise
+   *
+   * @throws InterruptedException if another thread interrupted the
+   *         current thread while waiting
+   */
   public boolean waitForID(int id, long ms) throws InterruptedException
   {
     MediaEntry e = head;
     long start = System.currentTimeMillis();
+    boolean result = checkID(id, true);
+
     synchronized (this)
     {
-      while (checkID (id, true) == false)
-        wait(ms);
-    }  
-    if ((System.currentTimeMillis() - start) < ms)
-      return true;
-    else
-      return false;
+      while (result == false)
+        {
+          wait(ms);
+          result = checkID(id, true);
+          if ((System.currentTimeMillis() - start) > ms)
+            break;
+        }
+    }
+
+    return result;
   }
 
+  /**
+   * Returns the status flags of the media objects with the specified ID
+   * ORed together.
+   *
+   * If <code>load</code> is <code>true</code> then media objects that
+   * are not already loading will be started to load.
+   *
+   * @param load if set to <code>true</code> then media objects that are
+   *        not already loading are started
+   *
+   * @return the status flags of all tracked media objects ORed together
+   */
   public int statusID(int id, boolean load)
   {
     int result = 0;
@@ -327,73 +564,100 @@
     while (e != null)
       {
         if (e.id == id)
-	  {
+          {
             if (load && e.status == 0)
-	      {
-		target.prepareImage(e.image, e);
-		e.status = LOADING;
-	      }
+              {
+                boolean complete = target.prepareImage(e.image, e);
+                if (complete)
+                  e.status = COMPLETE;
+                else
+                  e.status = LOADING;
+              }
             result |= e.status;
-	  }
-	e = e.next;
+          }
+        e = e.next;
       }
     return result;
   }
 
+  /**
+   * Removes an image from this MediaTracker.
+   *
+   * @param image the image to be removed
+   */
   public void removeImage(Image image)
   {
-    MediaEntry e = head;
-    MediaEntry prev = null;
-    while (e != null)
+    synchronized (this)
       {
-        if (e.image == image)
-	  {
-	    if (prev == null)
-	      head = e.next;
-	    else
-	      prev.next = e.next;
-	  }
-	prev = e;
-	e = e.next;
+        MediaEntry e = head;
+        MediaEntry prev = null;
+        while (e != null)
+          {
+            if (e.image == image)
+              {
+                if (prev == null)
+                  head = e.next;
+                else
+                  prev.next = e.next;
+              }
+            prev = e;
+            e = e.next;
+          }
       }
   }
 
+  /**
+   * Removes an image with the specified ID from this MediaTracker.
+   *
+   * @param image the image to be removed
+   */
   public void removeImage(Image image, int id)
   {
-    MediaEntry e = head;
-    MediaEntry prev = null;
-    while (e != null)
+    synchronized (this)
       {
-        if (e.id == id && e.image == image)
-	  {
-	    if (prev == null)
-	      head = e.next;
-	    else
-	      prev.next = e.next;
-	  }
-	else
-	  prev = e;
-	e = e.next;
-      }  
+        MediaEntry e = head;
+        MediaEntry prev = null;
+        while (e != null)
+          {
+            if (e.id == id && e.image == image)
+              {
+                if (prev == null)
+                  head = e.next;
+                else
+                  prev.next = e.next;
+              }
+            else
+              prev = e;
+            e = e.next;
+          }
+      }
   }
 
+  /**
+   * Removes an image with the specified ID and scale from this MediaTracker.
+   *
+   * @param image the image to be removed
+   */
   public void removeImage(Image image, int id, int width, int height)
   {
-    MediaEntry e = head;
-    MediaEntry prev = null;
-    while (e != null)
+    synchronized (this)
       {
-        if (e.id == id && e.image == image
-	    && e.width == width && e.height == height)
-	  {
-	    if (prev == null)
-	      head = e.next;
-	    else
-	      prev.next = e.next;
-	  }
-	else
-	  prev = e;
-	e = e.next;
+        MediaEntry e = head;
+        MediaEntry prev = null;
+        while (e != null)
+          {
+            if (e.id == id && e.image == image
+                && e.width == width && e.height == height)
+              {
+                if (prev == null)
+                  head = e.next;
+                else
+                  prev.next = e.next;
+              }
+            else
+              prev = e;
+            e = e.next;
+          }
       }
   }
 }
Index: libjava/java/awt/MenuComponent.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/MenuComponent.java,v
retrieving revision 1.16
diff -u -r1.16 MenuComponent.java
--- libjava/java/awt/MenuComponent.java	17 Feb 2005 07:48:24 -0000	1.16
+++ libjava/java/awt/MenuComponent.java	9 Jul 2005 22:09:56 -0000
@@ -161,8 +161,9 @@
    *
    * @see AccessibleAWTMenuComponent#addFocusListener(java.awt.event.FocusListener)
    * @serial ignored.
+   * This is package-private to avoid an accessor method.
    */
-  private transient FocusListener focusListener;
+  transient FocusListener focusListener;
 
 /*************************************************************************/
 
Index: libjava/java/awt/MenuItem.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/MenuItem.java,v
retrieving revision 1.21
diff -u -r1.21 MenuItem.java
--- libjava/java/awt/MenuItem.java	16 Feb 2005 20:01:53 -0000	1.21
+++ libjava/java/awt/MenuItem.java	9 Jul 2005 22:09:56 -0000
@@ -75,13 +75,15 @@
 
 /**
   * @serial The name of the action command generated by this item.
+  * This is package-private to avoid an accessor method.
   */
-private String actionCommand;
+String actionCommand;
 
 /**
   * @serial Indicates whether or not this menu item is enabled.
+  * This is package-private to avoid an accessor method.
   */
-private boolean enabled = true;
+boolean enabled = true;
 
 /**
   * @serial The mask of events that are enabled for this menu item.
@@ -90,8 +92,9 @@
 
 /**
   * @serial This menu item's label
+  * This is package-private to avoid an accessor method.
   */
-private String label;
+String label = "";
 
 /**
   * @serial The shortcut for this menu item, if any
Index: libjava/java/awt/Robot.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/Robot.java,v
retrieving revision 1.5
diff -u -r1.5 Robot.java
--- libjava/java/awt/Robot.java	22 Feb 2005 06:18:59 -0000	1.5
+++ libjava/java/awt/Robot.java	9 Jul 2005 22:09:57 -0000
@@ -394,10 +394,9 @@
       throw new IllegalThreadStateException ("Robot: waitForIdle called from "
 					     + "the event dispatch thread");
 
-    EventQueue q = Toolkit.getDefaultToolkit ().getSystemEventQueue ();
     try
       {
-	q.invokeAndWait (new Runnable () { public void run () { } });
+	EventQueue.invokeAndWait (new Runnable () { public void run () { } });
       }
     catch (InterruptedException e)
       {
Index: libjava/java/awt/TextComponent.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/TextComponent.java,v
retrieving revision 1.16
diff -u -r1.16 TextComponent.java
--- libjava/java/awt/TextComponent.java	16 Feb 2005 20:01:54 -0000	1.16
+++ libjava/java/awt/TextComponent.java	9 Jul 2005 22:09:57 -0000
@@ -76,23 +76,27 @@
 
 /**
   * @serial Indicates whether or not this component is editable.
+  * This is package-private to avoid an accessor method.
   */
-private boolean editable;
+boolean editable;
 
 /**
   * @serial The starting position of the selected text region.
+  * This is package-private to avoid an accessor method.
   */
-private int selectionStart;
+int selectionStart;
 
 /**
   * @serial The ending position of the selected text region.
+  * This is package-private to avoid an accessor method.
   */
-private int selectionEnd;
+int selectionEnd;
 
 /**
   * @serial The text in the component
+  * This is package-private to avoid an accessor method.
   */
-private String text;
+String text;
 
 /**
   * A list of listeners that will receive events from this object.
@@ -708,8 +712,9 @@
   
   /*******************************/
   // Provide AccessibleAWTTextComponent access to several peer functions that
-  // aren't publicly exposed.
-  private synchronized int
+  // aren't publicly exposed.  This is package-private to avoid an accessor
+  // method.
+  synchronized int
   getIndexAtPoint(Point p)
   {
     TextComponentPeer tcp = (TextComponentPeer)getPeer();
@@ -718,7 +723,7 @@
     return -1;
   }
   
-  private synchronized Rectangle
+  synchronized Rectangle
   getCharacterBounds(int i)
   {
     TextComponentPeer tcp = (TextComponentPeer)getPeer();
Index: libjava/java/awt/Transparency.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/Transparency.java,v
retrieving revision 1.5
diff -u -r1.5 Transparency.java
--- libjava/java/awt/Transparency.java	17 Feb 2005 07:48:24 -0000	1.5
+++ libjava/java/awt/Transparency.java	9 Jul 2005 22:09:57 -0000
@@ -1,5 +1,5 @@
 /* Transparency.java -- common transparency modes in graphics
-   Copyright (C) 2000, 2002 Free Software Foundation
+   Copyright (C) 2000, 2002, 2005 Free Software Foundation
 
 This file is part of GNU Classpath.
 
@@ -61,7 +61,7 @@
   /**
    * Return the transparency type.
    *
-   * @return One of {@see #OPAQUE}, {@see #BITMASK}, or {@see #TRANSLUCENT}.
+   * @return One of {@link #OPAQUE}, {@link #BITMASK}, or {@link #TRANSLUCENT}.
    */
   int getTransparency();
 } // interface Transparency
Index: libjava/java/awt/Window.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/Window.java,v
retrieving revision 1.41
diff -u -r1.41 Window.java
--- libjava/java/awt/Window.java	21 Feb 2005 21:41:28 -0000	1.41
+++ libjava/java/awt/Window.java	9 Jul 2005 22:09:57 -0000
@@ -45,6 +45,7 @@
 import java.awt.event.WindowFocusListener;
 import java.awt.event.WindowListener;
 import java.awt.event.WindowStateListener;
+import java.awt.image.BufferStrategy;
 import java.awt.peer.WindowPeer;
 import java.lang.ref.Reference;
 import java.lang.ref.WeakReference;
@@ -90,7 +91,8 @@
 
   private transient boolean shown;
 
-  private transient Component windowFocusOwner;
+  // This is package-private to avoid an accessor method.
+  transient Component windowFocusOwner;
   
   /*
    * The number used to generate the name returned by getName.
@@ -771,12 +773,16 @@
   /**
    * Tests whether or not this window is visible on the screen.
    *
+   * In contrast to the normal behaviour of Container, which is that
+   * a container is showing if its parent is visible and showing, a Window
+   * is even showing, if its parent (i.e. an invisible Frame) is not showing.
+   *
    * @return <code>true</code> if this window is visible, <code>false</code>
    * otherwise.
    */
   public boolean isShowing()
   {
-    return super.isShowing();
+    return isVisible();
   }
 
   public void setLocationRelativeTo (Component c)
@@ -796,6 +802,157 @@
   }
 
   /**
+   * A BltBufferStrategy for windows.
+   */
+  private class WindowBltBufferStrategy extends BltBufferStrategy
+  {
+    /**
+     * Creates a block transfer strategy for this window.
+     *
+     * @param numBuffers the number of buffers in this strategy
+     * @param accelerated true if the buffer should be accelerated,
+     * false otherwise
+     */
+    WindowBltBufferStrategy(int numBuffers, boolean accelerated)
+    {
+      super(numBuffers,
+	    new BufferCapabilities(new ImageCapabilities(accelerated),
+				   new ImageCapabilities(accelerated),
+				   BufferCapabilities.FlipContents.COPIED));
+    }
+  }
+
+  /**
+   * A FlipBufferStrategy for windows.
+   */
+  private class WindowFlipBufferStrategy extends FlipBufferStrategy
+  {
+    /**
+     * Creates a flip buffer strategy for this window.
+     *
+     * @param numBuffers the number of buffers in this strategy
+     *
+     * @throws AWTException if the requested number of buffers is not
+     * supported
+     */
+    WindowFlipBufferStrategy(int numBuffers)
+      throws AWTException
+    {
+      super(numBuffers,
+	    new BufferCapabilities(new ImageCapabilities(true),
+				   new ImageCapabilities(true),
+				   BufferCapabilities.FlipContents.COPIED));
+    }
+  }
+
+  /**
+   * Creates a buffering strategy that manages how this window is
+   * repainted.  This method attempts to create the optimum strategy
+   * based on the desired number of buffers.  Hardware or software
+   * acceleration may be used.
+   *
+   * createBufferStrategy attempts different levels of optimization,
+   * but guarantees that some strategy with the requested number of
+   * buffers will be created even if it is not optimal.  First it
+   * attempts to create a page flipping strategy, then an accelerated
+   * blitting strategy, then an unaccelerated blitting strategy.
+   *
+   * Calling this method causes any existing buffer strategy to be
+   * destroyed.
+   *
+   * @param numBuffers the number of buffers in this strategy
+   *
+   * @throws IllegalArgumentException if requested number of buffers
+   * is less than one
+   * @throws IllegalStateException if this window is not displayable
+   *
+   * @since 1.4
+   */
+  public void createBufferStrategy(int numBuffers)
+  {
+    if (numBuffers < 1)
+      throw new IllegalArgumentException("Window.createBufferStrategy: number"
+					 + " of buffers is less than one");
+
+    if (!isDisplayable())
+      throw new IllegalStateException("Window.createBufferStrategy: window is"
+				      + " not displayable");
+
+    BufferStrategy newStrategy = null;
+
+    // try a flipping strategy
+    try
+      {
+	newStrategy = new WindowFlipBufferStrategy(numBuffers);
+      }
+    catch (AWTException e)
+      {
+      }
+
+    // fall back to an accelerated blitting strategy
+    if (newStrategy == null)
+      newStrategy = new WindowBltBufferStrategy(numBuffers, true);
+
+    bufferStrategy = newStrategy;
+  }
+
+  /**
+   * Creates a buffering strategy that manages how this window is
+   * repainted.  This method attempts to create a strategy based on
+   * the specified capabilities and throws an exception if the
+   * requested strategy is not supported.
+   *
+   * Calling this method causes any existing buffer strategy to be
+   * destroyed.
+   *
+   * @param numBuffers the number of buffers in this strategy
+   * @param caps the requested buffering capabilities
+   *
+   * @throws AWTException if the requested capabilities are not
+   * supported
+   * @throws IllegalArgumentException if requested number of buffers
+   * is less than one or if caps is null
+   *
+   * @since 1.4
+   */
+  public void createBufferStrategy(int numBuffers,
+				   BufferCapabilities caps)
+  {
+    if (numBuffers < 1)
+      throw new IllegalArgumentException("Window.createBufferStrategy: number"
+					 + " of buffers is less than one");
+
+    if (caps == null)
+      throw new IllegalArgumentException("Window.createBufferStrategy:"
+					 + " capabilities object is null");
+
+    // a flipping strategy was requested
+    if (caps.isPageFlipping())
+      {
+	try
+	  {
+	    bufferStrategy = new WindowFlipBufferStrategy(numBuffers);
+	  }
+	catch (AWTException e)
+	  {
+	  }
+      }
+    else
+      bufferStrategy = new WindowBltBufferStrategy(numBuffers, true);
+  }
+
+  /**
+   * Returns the buffer strategy used by the window.
+   *
+   * @return the buffer strategy.
+   * @since 1.4
+   */
+  public BufferStrategy getBufferStrategy()
+  {
+    return bufferStrategy;
+  }
+
+  /**
    * @since 1.2
    *
    * @deprecated
Index: libjava/java/awt/geom/Arc2D.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/geom/Arc2D.java,v
retrieving revision 1.5
diff -u -r1.5 Arc2D.java
--- libjava/java/awt/geom/Arc2D.java	30 Nov 2004 23:58:46 -0000	1.5
+++ libjava/java/awt/geom/Arc2D.java	9 Jul 2005 22:09:57 -0000
@@ -73,8 +73,9 @@
    */
   public static final int PIE = 2;
 
-  /** The closure type of this arc. */
-  private int type;
+  /** The closure type of this arc.  This is package-private to avoid an
+   * accessor method.  */
+  int type;
 
   /**
    * Create a new arc, with the specified closure type.
Index: libjava/java/awt/geom/Area.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/geom/Area.java,v
retrieving revision 1.3
diff -u -r1.3 Area.java
--- libjava/java/awt/geom/Area.java	16 Feb 2005 20:02:03 -0000	1.3
+++ libjava/java/awt/geom/Area.java	9 Jul 2005 22:09:58 -0000
@@ -89,13 +89,15 @@
 
   /**
    * Segment vectors containing solid areas and holes
+   * This is package-private to avoid an accessor method.
    */
-  private Vector solids;
+  Vector solids;
 
   /**
    * Segment vectors containing solid areas and holes
+   * This is package-private to avoid an accessor method.
    */
-  private Vector holes;
+  Vector holes;
 
   /**
    * Vector (temporary) storing curve-curve intersections
@@ -1315,9 +1317,10 @@
    * This is a reasonably accurate method, although the recursion depth
    * is typically around 20, the bounding-box tests allow for significant
    * pruning of the subdivision tree.
+   * 
+   * This is package-private to avoid an accessor method.
    */
-  private Intersection[] cubicCubicIntersect(CubicSegment curve1,
-                                             CubicSegment curve2)
+  Intersection[] cubicCubicIntersect(CubicSegment curve1, CubicSegment curve2)
   {
     Rectangle2D r1 = curve1.getBounds();
     Rectangle2D r2 = curve2.getBounds();
@@ -1349,8 +1352,9 @@
    * Or null if no intersections are found1
    * This is done through combining the line's equation with the
    * parametric form of the Bezier and solving the resulting quadratic.
+   * This is package-private to avoid an accessor method.
    */
-  private Intersection[] lineQuadIntersect(LineSegment l, QuadSegment c)
+  Intersection[] lineQuadIntersect(LineSegment l, QuadSegment c)
   {
     double[] y = new double[3];
     double[] x = new double[3];
@@ -1453,8 +1457,9 @@
    * Returns the intersections between a line and a cubic segment
    * This is done through combining the line's equation with the
    * parametric form of the Bezier and solving the resulting quadratic.
+   * This is package-private to avoid an accessor method. 
    */
-  private Intersection[] lineCubicIntersect(LineSegment l, CubicSegment c)
+  Intersection[] lineCubicIntersect(LineSegment l, CubicSegment c)
   {
     double[] y = new double[4];
     double[] x = new double[4];
@@ -1560,8 +1565,9 @@
   /**
    * Returns the intersection between two lines, or null if there is no
    * intersection.
+   * This is package-private to avoid an accessor method.
    */
-  private Intersection linesIntersect(LineSegment a, LineSegment b)
+  Intersection linesIntersect(LineSegment a, LineSegment b)
   {
     Point2D P1 = a.P1;
     Point2D P2 = a.P2;
@@ -1605,8 +1611,9 @@
   /**
    * Determines if two points are equal, within an error margin
    * 'snap distance'
+   * This is package-private to avoid an accessor method.
    */
-  private boolean pointEquals(Point2D a, Point2D b)
+  boolean pointEquals(Point2D a, Point2D b)
   {
     return (a.equals(b) || a.distance(b) < PE_EPSILON);
   }
Index: libjava/java/awt/geom/CubicCurve2D.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/geom/CubicCurve2D.java,v
retrieving revision 1.7
diff -u -r1.7 CubicCurve2D.java
--- libjava/java/awt/geom/CubicCurve2D.java	17 Feb 2005 07:48:29 -0000	1.7
+++ libjava/java/awt/geom/CubicCurve2D.java	9 Jul 2005 22:09:58 -0000
@@ -689,7 +689,7 @@
    * result of -1 indicates that the equation is constant (i.e.,
    * always or never zero).
    *
-   * @author Brain Gouph (bjg@network-theory.com)
+   * @author Brian Gough (bjg@network-theory.com)
    * (original C implementation in the <a href=
    * "http://www.gnu.org/software/gsl/">GNU Scientific Library</a>)
    *
Index: libjava/java/awt/geom/GeneralPath.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/geom/GeneralPath.java,v
retrieving revision 1.5
diff -u -r1.5 GeneralPath.java
--- libjava/java/awt/geom/GeneralPath.java	30 Nov 2004 23:58:47 -0000	1.5
+++ libjava/java/awt/geom/GeneralPath.java	9 Jul 2005 22:09:59 -0000
@@ -88,15 +88,18 @@
   /** A big number, but not so big it can't survive a few float operations */
   private static final double BIG_VALUE = java.lang.Double.MAX_VALUE / 10.0;
 
-  /** The winding rule. */
-  private int rule;
+  /** The winding rule.
+   * This is package-private to avoid an accessor method.
+   */
+  int rule;
 
   /**
    * The path type in points. Note that xpoints[index] and ypoints[index] maps
    * to types[index]; the control points of quad and cubic paths map as
    * well but are ignored.
+   * This is package-private to avoid an accessor method.
    */
-  private byte[] types;
+  byte[] types;
 
   /**
    * The list of all points seen. Since you can only append floats, it makes
@@ -104,15 +107,18 @@
    * allow a general path of double precision points.
    * Note: Storing x and y coords seperately makes for a slower transforms,
    * But it speeds up and simplifies box-intersection checking a lot.
+   * These are package-private to avoid accessor methods.
    */
-  private float[] xpoints;
-  private float[] ypoints;
+  float[] xpoints;
+  float[] ypoints;
 
   /** The index of the most recent moveto point, or null. */
   private int subpath = -1;
 
-  /** The next available index into points. */
-  private int index;
+  /** The next available index into points.
+   * This is package-private to avoid an accessor method.
+   */
+  int index;
 
   /**
    * Constructs a GeneralPath with the default (NON_ZERO)
@@ -534,8 +540,9 @@
 
     /**
      * The GeneralPath whose segments are being iterated.
+     * This is package-private to avoid an accessor method.
      */
-    private final GeneralPath path;
+    final GeneralPath path;
 
     /**
      * The affine transformation used to transform coordinates.
Index: libjava/java/awt/geom/QuadCurve2D.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/geom/QuadCurve2D.java,v
retrieving revision 1.9
diff -u -r1.9 QuadCurve2D.java
--- libjava/java/awt/geom/QuadCurve2D.java	17 Feb 2005 07:48:29 -0000	1.9
+++ libjava/java/awt/geom/QuadCurve2D.java	9 Jul 2005 22:09:59 -0000
@@ -562,7 +562,7 @@
    * result of -1 indicates that the equation is constant (i.e.,
    * always or never zero).
    *
-   * @author Brain Gouph (bjg@network-theory.com)
+   * @author Brian Gough (bjg@network-theory.com)
    * (original C implementation in the <a href=
    * "http://www.gnu.org/software/gsl/">GNU Scientific Library</a>)
    *
@@ -607,7 +607,7 @@
    * result of -1 indicates that the equation is constant (i.e.,
    * always or never zero).
    *
-   * @author Brian Gouph (bjg@network-theory.com)
+   * @author Brian Gough (bjg@network-theory.com)
    * (original C implementation in the <a href=
    * "http://www.gnu.org/software/gsl/">GNU Scientific Library</a>)
    *
Index: libjava/java/awt/image/BandedSampleModel.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/image/BandedSampleModel.java,v
retrieving revision 1.3
diff -u -r1.3 BandedSampleModel.java
--- libjava/java/awt/image/BandedSampleModel.java	17 Feb 2005 07:48:30 -0000	1.3
+++ libjava/java/awt/image/BandedSampleModel.java	9 Jul 2005 22:09:59 -0000
@@ -1,4 +1,4 @@
-/* Copyright (C) 2004  Free Software Foundation
+/* Copyright (C) 2004, 2005, Free Software Foundation
 
 This file is part of GNU Classpath.
 
@@ -53,9 +53,17 @@
   private int numberOfBits;
   private int numElems;
 
+  private static int[] createBankArray(int size) 
+  {
+    int[] result = new int[size];
+    for (int i = 0; i < size; i++)
+      result[i] = i;
+    return result;
+  }
+
   public BandedSampleModel(int dataType, int w, int h, int numBands)
   {
-    super(dataType, w, h, 1, w, new int[numBands]);
+    this(dataType, w, h, w, createBankArray(numBands), new int[numBands]);
   }
 
   public BandedSampleModel(int dataType, int w, int h, int scanlineStride,
@@ -103,6 +111,10 @@
 
   public SampleModel createSubsetSampleModel(int[] bands)
   {
+    if (bands.length > bankIndices.length)
+      throw new
+	RasterFormatException("BandedSampleModel createSubsetSampleModel too"
+			      +" many bands");
     int[] newoff = new int[bands.length];
     int[] newbanks = new int[bands.length];
     for (int i=0; i < bands.length; i++)
@@ -112,11 +124,6 @@
 	newbanks[i] = bankIndices[b];
       }
 
-    if (bands.length > bankIndices.length)
-      throw new
-	RasterFormatException("BandedSampleModel createSubsetSampleModel too"
-			      +" many bands");
-    
     return new BandedSampleModel(dataType, width, height, scanlineStride,
 				 newbanks, newoff);
   }
@@ -192,7 +199,7 @@
   {
     if (iArray == null) iArray = new int[numBands];
     for (int i=0; i < numBands; i++)
-      iArray[i] = getSample(x, y, 0, data);
+      iArray[i] = getSample(x, y, i, data);
 	
     return iArray;
   }
@@ -223,13 +230,15 @@
   {
     if (iArray == null) iArray = new int[w*h*numBands];
     int outOffset = 0;
-    for (y=0; y<h; y++)
+    int maxX = x + w;
+    int maxY = y + h;
+    for (int yy = x; yy < maxY; yy++)
       {
-	for (x=0; x<w;)
+	for (int xx = x; xx < maxX; xx++)
 	  {
-	    for (int b=0; b < numBands; b++)
+	    for (int b = 0; b < numBands; b++)
 	      {
-		int offset = bandOffsets[b] + y * scanlineStride + x;
+		int offset = bandOffsets[b] + yy * scanlineStride + xx;
 		iArray[outOffset++] =
 		  data.getElem(bankIndices[b], offset);
 	      }
@@ -281,11 +290,13 @@
   {
     if (iArray == null) iArray = new int[w*h];
     int outOffset = 0;
-    for (y=0; y<h; y++)
+    int maxX = x + w;
+    int maxY = y + h;
+    for (int yy = y; yy < maxY; yy++)
       {
-	for (x=0; x<w;)
+	for (int xx = x; xx < maxX; xx++)
 	  {
-	    int offset = bandOffsets[b] + y * scanlineStride + x;
+	    int offset = bandOffsets[b] + yy * scanlineStride + xx;
 	    iArray[outOffset++] =
 	      data.getElem(bankIndices[b], offset);
 	  }
@@ -328,7 +339,7 @@
 	      DataBufferByte out = (DataBufferByte) data;
 	      byte[] in = (byte[]) obj;
 	      for (int i=0; i < numBands; i++)
-		out.getData(bankIndices[i])[offset + bandOffsets[i]] = in[0];
+		out.getData(bankIndices[i])[offset + bandOffsets[i]] = in[i];
 	      return;
 	    }
 	  case DataBuffer.TYPE_SHORT:
@@ -336,7 +347,7 @@
 	      DataBufferShort out = (DataBufferShort) data;
 	      short[] in = (short[]) obj;
 	      for (int i=0; i < numBands; i++)
-		out.getData(bankIndices[i])[offset + bandOffsets[i]] = in[0];
+		out.getData(bankIndices[i])[offset + bandOffsets[i]] = in[i];
 	      return;
 	    }
 	  case DataBuffer.TYPE_USHORT:
@@ -344,7 +355,7 @@
 	      DataBufferUShort out = (DataBufferUShort) data;
 	      short[] in = (short[]) obj;
 	      for (int i=0; i < numBands; i++)
-		out.getData(bankIndices[i])[offset + bandOffsets[i]] = in[0];
+		out.getData(bankIndices[i])[offset + bandOffsets[i]] = in[i];
 	      return;
 	    }
 	  case DataBuffer.TYPE_INT:
@@ -352,7 +363,7 @@
 	      DataBufferInt out = (DataBufferInt) data;
 	      int[] in = (int[]) obj;
 	      for (int i=0; i < numBands; i++)
-		out.getData(bankIndices[i])[offset + bandOffsets[i]] = in[0];
+		out.getData(bankIndices[i])[offset + bandOffsets[i]] = in[i];
 	      return;
 	    }
 	  case DataBuffer.TYPE_FLOAT:
@@ -360,7 +371,7 @@
 	      DataBufferFloat out = (DataBufferFloat) data;
 	      float[] in = (float[]) obj;
 	      for (int i=0; i < numBands; i++)
-		out.getData(bankIndices[i])[offset + bandOffsets[i]] = in[0];
+		out.getData(bankIndices[i])[offset + bandOffsets[i]] = in[i];
 	      return;
 	    }
 	  case DataBuffer.TYPE_DOUBLE:
@@ -368,7 +379,7 @@
 	      DataBufferDouble out = (DataBufferDouble) data;
 	      double[] in = (double[]) obj;
 	      for (int i=0; i < numBands; i++)
-		out.getData(bankIndices[i])[offset + bandOffsets[i]] = in[0];
+		out.getData(bankIndices[i])[offset + bandOffsets[i]] = in[i];
 	      return;
 	    }
 	  default:
Index: libjava/java/awt/image/BufferStrategy.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/image/BufferStrategy.java,v
retrieving revision 1.1
diff -u -r1.1 BufferStrategy.java
--- libjava/java/awt/image/BufferStrategy.java	9 Aug 2002 04:26:16 -0000	1.1
+++ libjava/java/awt/image/BufferStrategy.java	9 Jul 2005 22:09:59 -0000
@@ -1,5 +1,5 @@
-/* BufferStrategy.java -- 
-   Copyright (C) 2002 Free Software Foundation, Inc.
+/* BufferStrategy.java -- describes image buffering resources
+   Copyright (C) 2002, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -41,15 +41,84 @@
 import java.awt.BufferCapabilities;
 import java.awt.Graphics;
 
-/** STUBS ONLY */
+/**
+ * This class describes a strategy for managing image buffering
+ * resources on a Canvas or Window.  A given buffer strategy may make
+ * use of hardware acceleration or take advantage of features of the
+ * native graphics system.  Examples of buffering strategies are
+ * double or triple buffering using either flipping or blitting.  For
+ * the details of these algorithms see BufferCapabilities.
+ *
+ * To use a buffer strategy, you retrieve it from either the current
+ * GraphicsConfiguration or from the Component on which you'd like to
+ * draw.  Then you can query the strategy's capabilities to make sure
+ * they're suitable.
+ *
+ * If the strategy's capabilities are suitable, you can obtain a
+ * graphics object and use it to draw with this strategy.  Drawing
+ * with a buffer strategy requires extra care, however.  You'll need
+ * to manually cause the next buffer to be shown on the output device.
+ * And since buffer strategies are usually implemented with a
+ * VolatileImage, you must frequently check that the contents of the
+ * buffer are valid and that the buffer still exists.
+ *
+ * A buffer strategy is usually implemented using a VolatileImage.
+ *
+ * @see VolatileImage
+ * @since 1.4
+ */
 public abstract class BufferStrategy
 {
+  /**
+   * Creates a new buffer strategy.
+   */
   public BufferStrategy()
   {
   }
+
+  /**
+   * Retrieves the capabilities of this buffer strategy.
+   *
+   * @return this buffer strategy's capabilities
+   */
   public abstract BufferCapabilities getCapabilities();
+
+  /**
+   * Retrieves a graphics object that can be used to draw using this
+   * buffer strategy.  This method may not be synchronized so be
+   * careful when calling it from multiple threads.  You also must
+   * manually dispose of this graphics object.
+   *
+   * @return a graphics object that can be used to draw using this
+   * buffer strategy
+   */
   public abstract Graphics getDrawGraphics();
+
+  /**
+   * Returns whether or not the buffer's resources have been reclaimed
+   * by the native graphics system.  If the buffer resources have been
+   * lost then you'll need to obtain new resources before drawing
+   * again.  For details, see the documentation for VolatileImage.
+   *
+   * @return true if the contents were lost, false otherwise
+   */
   public abstract boolean contentsLost();
+
+  /**
+   * Returns whether or not the buffer's resources were re-created and
+   * cleared to the default background color.  If the buffer's
+   * resources have recently been re-created and initialized then the
+   * buffer's image may need to be re-rendered.  For details, see the
+   * documentation for VolatileImage.
+   *
+   * @return true if the contents were restored, false otherwise
+   */
   public abstract boolean contentsRestored();
+
+  /**
+   * Applies this buffer strategy.  In other words, this method brings
+   * the contents of the back or intermediate buffers to the front
+   * buffer.
+   */
   public abstract void show();
-} // class BufferStrategy
+}
Index: libjava/java/awt/image/BufferedImage.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/image/BufferedImage.java,v
retrieving revision 1.12
diff -u -r1.12 BufferedImage.java
--- libjava/java/awt/image/BufferedImage.java	30 Nov 2004 23:58:49 -0000	1.12
+++ libjava/java/awt/image/BufferedImage.java	9 Jul 2005 22:09:59 -0000
@@ -448,11 +448,12 @@
   {
     return new ImageProducer() {
         
-        HashSet consumers = new HashSet();
+	Vector consumers = new Vector();
 
         public void addConsumer(ImageConsumer ic)
         {
-          consumers.add(ic);
+	  if(!consumers.contains(ic))
+	    consumers.add(ic);
         }
 
         public boolean isConsumer(ImageConsumer ic)
@@ -462,7 +463,7 @@
 
         public void removeConsumer(ImageConsumer ic)
         {
-          consumers.remove(ic);
+	  consumers.remove(ic);
         }
 
         public void startProduction(ImageConsumer ic)
@@ -480,10 +481,9 @@
 
           consumers.add(ic);
 
-          Iterator i = consumers.iterator();
-          while(i.hasNext())
+	  for(int i=0;i<consumers.size();i++)
             {
-              ImageConsumer c = (ImageConsumer) i.next();
+              ImageConsumer c = (ImageConsumer) consumers.elementAt(i);
               c.setHints(ImageConsumer.SINGLEPASS);
               c.setDimensions(getWidth(), getHeight());
               c.setPixels(x, y, width, height, model, pixels, offset, stride);
Index: libjava/java/awt/image/ConvolveOp.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/image/ConvolveOp.java,v
retrieving revision 1.2
diff -u -r1.2 ConvolveOp.java
--- libjava/java/awt/image/ConvolveOp.java	30 Nov 2004 23:58:50 -0000	1.2
+++ libjava/java/awt/image/ConvolveOp.java	9 Jul 2005 22:10:00 -0000
@@ -1,4 +1,5 @@
-/* Copyright (C) 2004 Free Software Foundation -- ConvolveOp
+/* ConvolveOp.java --
+   Copyright (C) 2004 Free Software Foundation -- ConvolveOp
 
 This file is part of GNU Classpath.
 
@@ -34,12 +35,7 @@
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
 
-/*
- * Created on Nov 1, 2004
- *
- * TODO To change the template for this generated file go to
- * Window - Preferences - Java - Code Style - Code Templates
- */
+
 package java.awt.image;
 
 import java.awt.Graphics2D;
Index: libjava/java/awt/image/DirectColorModel.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/image/DirectColorModel.java,v
retrieving revision 1.7
diff -u -r1.7 DirectColorModel.java
--- libjava/java/awt/image/DirectColorModel.java	30 Nov 2004 23:58:50 -0000	1.7
+++ libjava/java/awt/image/DirectColorModel.java	9 Jul 2005 22:10:00 -0000
@@ -160,7 +160,7 @@
   public final int getAlpha(int pixel)
   {
     if (!hasAlpha())
-      return 0;
+      return 255;
     return extractAndScaleSample(pixel, 3);
   }
 
Index: libjava/java/awt/image/IndexColorModel.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/image/IndexColorModel.java,v
retrieving revision 1.8
diff -u -r1.8 IndexColorModel.java
--- libjava/java/awt/image/IndexColorModel.java	16 Feb 2005 20:02:06 -0000	1.8
+++ libjava/java/awt/image/IndexColorModel.java	9 Jul 2005 22:10:00 -0000
@@ -1,5 +1,5 @@
 /* IndexColorModel.java -- Java class for interpreting Pixel objects
-   Copyright (C) 1999 Free Software Foundation, Inc.
+   Copyright (C) 1999, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -35,99 +35,156 @@
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
 
-
 package java.awt.image;
 
+import gnu.java.awt.Buffers;
+
 import java.awt.color.ColorSpace;
 import java.math.BigInteger;
 
 /**
  * Color model similar to pseudo visual in X11.
- *
+ * <br><br>
  * This color model maps linear pixel values to actual RGB and alpha colors.
  * Thus, pixel values are indexes into the color map.  Each color component is
  * an 8-bit unsigned value.
- *
- * The IndexColorModel supports a map of valid pixels, allowing the
- * representation of holes in the the color map.  The valid map is represented
- * as a BigInteger where each bit indicates the validity of the map entry with
- * the same index.
- * 
+ * <br><br>
+ * The <code>IndexColorModel</code> supports a map of valid pixels, allowing 
+ * the representation of holes in the the color map.  The valid map is 
+ * represented as a {@link BigInteger} where each bit indicates the validity 
+ * of the map entry with the same index.
+ * <br><br>
  * Colors can have alpha components for transparency support.  If alpha
  * component values aren't given, color values are opaque.  The model also
  * supports a reserved pixel value to represent completely transparent colors,
  * no matter what the actual color component values are.
- *
- * IndexColorModel supports anywhere from 1 to 16 bit index values.  The
- * allowed transfer types are DataBuffer.TYPE_BYTE and DataBuffer.TYPE_USHORT.
+ * <br><br>
+ * <code>IndexColorModel</code> supports anywhere from 1 to 16 bit index 
+ * values.  The allowed transfer types are {@link DataBuffer#TYPE_BYTE} and 
+ * {@link DataBuffer#TYPE_USHORT}.
  *
  * @author C. Brian Jones (cbj@gnu.org) 
  */
 public class IndexColorModel extends ColorModel
 {
   private int map_size;
-  private boolean opaque;
+  private boolean opaque;  // no alpha, but doesn't account for trans
   private int trans = -1;
   private int[] rgb;
   private BigInteger validBits = BigInteger.ZERO;
 
   /**
-   * Each array much contain <code>size</code> elements.  For each 
-   * array, the i-th color is described by reds[i], greens[i], 
-   * blues[i], alphas[i], unless alphas is not specified, then all the 
-   * colors are opaque except for the transparent color. 
+   * Creates a new indexed color model for <code>size</code> color elements 
+   * with no alpha component.  Each array must contain at least 
+   * <code>size</code> elements.  For each array, the i-th color is described 
+   * by reds[i], greens[i] and blues[i]. 
    *
-   * @param bits the number of bits needed to represent <code>size</code> colors
-   * @param size the number of colors in the color map
-   * @param reds the red component of all colors
-   * @param greens the green component of all colors
-   * @param blues the blue component of all colors
+   * @param bits the number of bits needed to represent <code>size</code> 
+   *             colors.
+   * @param size the number of colors in the color map.
+   * @param reds the red component of all colors.
+   * @param greens the green component of all colors.
+   * @param blues the blue component of all colors.
+   *
+   * @throws IllegalArgumentException if <code>bits</code> &lt; 1 or 
+   *         <code>bits</code> &gt; 16.
+   * @throws NullPointerException if any of the arrays is <code>null</code>.
+   * @throws ArrayIndexOutOfBoundsException if <code>size</code> is greater 
+   *         than the length of the component arrays.
    */
   public IndexColorModel(int bits, int size, byte[] reds, byte[] greens,
                          byte[] blues)
   {
-    this (bits, size, reds, greens, blues, (byte[]) null);
+    this(bits, size, reds, greens, blues, (byte[]) null);
   }
 
   /**
-   * Each array much contain <code>size</code> elements.  For each 
-   * array, the i-th color is described by reds[i], greens[i], 
-   * blues[i], alphas[i], unless alphas is not specified, then all the 
-   * colors are opaque except for the transparent color. 
+   * Creates a new indexed color model for <code>size</code> color elements.
+   * Each array must contain at least <code>size</code> elements.  For each 
+   * array, the i-th color is described by reds[i], greens[i] and blues[i]. 
+   * All the colors are opaque except for the transparent color. 
    *
-   * @param bits the number of bits needed to represent <code>size</code> colors
+   * @param bits the number of bits needed to represent <code>size</code> 
+   *             colors
    * @param size the number of colors in the color map
    * @param reds the red component of all colors
    * @param greens the green component of all colors
    * @param blues the blue component of all colors
-   * @param trans the index of the transparent color
+   * @param trans the index of the transparent color (use -1 for no 
+   *              transparent color).
+   * 
+   * @throws IllegalArgumentException if <code>bits</code> &lt; 1 or 
+   *         <code>bits</code> &gt; 16.
+   * @throws NullPointerException if any of the arrays is <code>null</code>.
+   * @throws ArrayIndexOutOfBoundsException if <code>size</code> is greater 
+   *         than the length of the component arrays.
    */
   public IndexColorModel(int bits, int size, byte[] reds, byte[] greens,
                          byte[] blues, int trans)
   {
-    this (bits, size, reds, greens, blues, (byte[]) null);
-    this.trans = trans;
+    super(bits, nArray(8, (0 <= trans && trans < size) ? 4 : 3), 
+        ColorSpace.getInstance(ColorSpace.CS_sRGB), 
+        (0 <= trans && trans < size),  // hasAlpha 
+        false, OPAQUE, 
+        Buffers.smallestAppropriateTransferType(bits)); 
+    if (bits < 1) 
+      throw new IllegalArgumentException("bits < 1");
+    if (bits > 16)
+      throw new IllegalArgumentException("bits > 16");
+    if (size < 1)
+      throw new IllegalArgumentException("size < 1");
+    map_size = size;
+    if (0 <= trans && trans < size) {
+      this.trans = trans;
+      transparency = BITMASK;
+    }
+    rgb = new int[size];
+    for (int i = 0; i < size; i++)
+      {
+        rgb[i] = (0xff000000
+                  | ((reds[i] & 0xff) << 16)
+                  | ((greens[i] & 0xff) << 8)
+                  | (blues[i] & 0xff));
+      }
+    // Generate a bigint with 1's for every pixel
+    validBits = validBits.setBit(size).subtract(BigInteger.ONE);
   }
 
   /**
-   * Each array much contain <code>size</code> elements.  For each 
-   * array, the i-th color is described by reds[i], greens[i], 
-   * blues[i], alphas[i], unless alphas is not specified, then all the 
-   * colors are opaque except for the transparent color. 
+   * Creates a new indexed color model for <code>size</code> color elements 
+   * including alpha.  Each array must contain at least <code>size</code> 
+   * elements.  For each array, the i-th color is described 
+   * by reds[i], greens[i], blues[i] and alphas[i]. 
    *
-   * @param bits the number of bits needed to represent <code>size</code> colors
-   * @param size the number of colors in the color map
-   * @param reds the red component of all colors
-   * @param greens the green component of all colors
-   * @param blues the blue component of all colors
-   * @param alphas the alpha component of all colors
+   * @param bits the number of bits needed to represent <code>size</code> 
+   *             colors.
+   * @param size the number of colors in the color map.
+   * @param reds the red component of all colors.
+   * @param greens the green component of all colors.
+   * @param blues the blue component of all colors.
+   * @param alphas the alpha component of all colors (<code>null</code> 
+   *               permitted).
+   *
+   * @throws IllegalArgumentException if <code>bits</code> &lt; 1 or 
+   *           <code>bits</code> &gt; 16.
+   * @throws NullPointerException if <code>reds</code>, <code>greens</code> or
+   *         <code>blues</code> is <code>null</code>.
+   * @throws ArrayIndexOutOfBoundsException if <code>size</code> is greater 
+   *         than the length of the component arrays.
    */
   public IndexColorModel(int bits, int size, byte[] reds, byte[] greens,
                          byte[] blues, byte[] alphas)
   {
-    // FIXME: This super() constructor should not be used since it can give
-    // the wrong value for hasAlpha() which is final and cannot be overloaded
-    super(bits); 
+    super(bits, nArray(8, (alphas == null ? 3 : 4)), 
+        ColorSpace.getInstance(ColorSpace.CS_sRGB), 
+        (alphas != null), false, TRANSLUCENT, 
+        Buffers.smallestAppropriateTransferType(bits)); 
+    if (bits < 1) 
+      throw new IllegalArgumentException("bits < 1");
+    if (bits > 16)
+      throw new IllegalArgumentException("bits > 16");
+    if (size < 1)
+      throw new IllegalArgumentException("size < 1");
     map_size = size;
     opaque = (alphas == null);
 
@@ -141,16 +198,25 @@
                       | ((greens[i] & 0xff) << 8)
                       | (blues[i] & 0xff));
           }
+        transparency = OPAQUE;
       }
     else
       {
+	byte alphaZero = (byte) 0x00;
+        byte alphaOne = (byte) 0xFF;
         for (int i = 0; i < size; i++)
           {
+	    alphaZero = (byte) (alphaZero | alphas[i]);
+            alphaOne = (byte) (alphaOne & alphas[i]);
             rgb[i] = ((alphas[i] & 0xff) << 24
                       | ((reds[i] & 0xff) << 16)
                       | ((greens[i] & 0xff) << 8)
                       | (blues[i] & 0xff));
           }
+        if ((alphaZero == (byte) 0x00) || (alphaOne == (byte) 0xFF))
+	  transparency = BITMASK;
+	else
+	  transparency = TRANSLUCENT;
       }
 
     // Generate a bigint with 1's for every pixel
@@ -158,61 +224,85 @@
   }
 
   /**
-   * Each array much contain <code>size</code> elements.  For each 
-   * array, the i-th color is described by reds[i], greens[i], 
-   * blues[i], alphas[i], unless alphas is not specified, then all the 
-   * colors are opaque except for the transparent color. 
+   * Creates a new indexed color model using the color components in 
+   * <code>cmap</code>. If <code>hasAlpha</code> is <code>true</code> then
+   * <code>cmap</code> contains an alpha component after each of the red, green
+   * and blue components.
    *
-   * @param bits the number of bits needed to represent <code>size</code> colors
+   * @param bits the number of bits needed to represent <code>size</code> 
+   *             colors
    * @param size the number of colors in the color map
    * @param cmap packed color components
    * @param start the offset of the first color component in <code>cmap</code>
    * @param hasAlpha <code>cmap</code> has alpha values
-   * @throws IllegalArgumentException if bits < 1, bits > 16, or size < 1.
+   * @throws IllegalArgumentException if bits &lt; 1, bits &gt; 16, or size 
+   *         &lt; 1.
+   * @throws NullPointerException if <code>cmap</code> is <code>null</code>.
    */
-  public IndexColorModel (int bits, int size, byte[] cmap, int start, 
-                          boolean hasAlpha)
+  public IndexColorModel(int bits, int size, byte[] cmap, int start, 
+                         boolean hasAlpha)
   {
-    this (bits, size, cmap, start, hasAlpha, -1);
+    this(bits, size, cmap, start, hasAlpha, -1);
   }
 
   /**
    * Construct an IndexColorModel from an array of red, green, blue, and
-   * optional alpha components.  The component values are interleaved as RGB(A).
+   * optional alpha components. The component values are interleaved as RGB(A).
    * 
-   * @param bits the number of bits needed to represent <code>size</code> colors
+   * @param bits the number of bits needed to represent <code>size</code> 
+   *             colors
    * @param size the number of colors in the color map
    * @param cmap interleaved color components
    * @param start the offset of the first color component in <code>cmap</code>
    * @param hasAlpha <code>cmap</code> has alpha values
    * @param trans the index of the transparent color
-   * @throws IllegalArgumentException if bits < 1, bits > 16, or size < 1.
-   */
-  public IndexColorModel (int bits, int size, byte[] cmap, int start, 
-                          boolean hasAlpha, int trans)
-  {
-    super (bits);
+   * @throws IllegalArgumentException if bits &lt; 1, bits &gt; 16, or size
+   *         &lt; 1.
+   * @throws NullPointerException if <code>cmap</code> is <code>null</code>.
+   */
+  public IndexColorModel(int bits, int size, byte[] cmap, int start, 
+                         boolean hasAlpha, int trans)
+  {
+    super(bits, nArray(8, hasAlpha || (0 <= trans && trans < size) ? 4 : 3), 
+        ColorSpace.getInstance(ColorSpace.CS_sRGB),
+        hasAlpha || (0 <= trans && trans < size), false, OPAQUE, 
+        Buffers.smallestAppropriateTransferType(bits));
+    if (bits < 1)
+      throw new IllegalArgumentException("bits < 1");
     if (bits > 16)
       throw new IllegalArgumentException("bits > 16");
     if (size < 1)
       throw new IllegalArgumentException("size < 1");
     map_size = size;
     opaque = !hasAlpha;
-    this.trans = trans;
+    if (0 <= trans && trans < size)
+      this.trans = trans;
 
     rgb = new int[size];
     if (hasAlpha)
     {
-      for (int i = 0; i < size; i++)
+      int alpha;
+      int alphaZero = 0x00;  // use to detect all zeros
+      int alphaOne = 0xff;   // use to detect all ones
+      for (int i = 0; i < size; i++) {
+	alpha = cmap[4 * i + 3 + start] & 0xff;  
+        alphaZero = alphaZero | alpha;
+        alphaOne = alphaOne & alpha;
         rgb[i] =
-	  // alpha
-	  ((cmap[4 * i + 3 + start] & 0xff) << 24
+	  ( alpha << 24
 	   // red
 	   | ((cmap[4 * i + start] & 0xff) << 16)
 	   // green
 	   | ((cmap[4 * i + 1 + start] & 0xff) << 8)
 	   // blue
 	   | (cmap[4 * i + 2 + start] & 0xff));
+      }
+      if (alphaZero == 0) 
+	transparency = BITMASK;
+      else if (alphaOne == 255) 
+        transparency = (trans != -1 ? BITMASK : OPAQUE);
+      else
+	transparency = TRANSLUCENT;
     }
     else
     {
@@ -224,6 +314,8 @@
 		  | ((cmap[3 * i + 1 + start] & 0xff) << 8)
 		  // blue
 		  | (cmap[3 * i + 2 + start] & 0xff));
+      if (trans != -1)
+	transparency = BITMASK;
     }
 
     // Generate a bigint with 1's for every pixel
@@ -236,22 +328,26 @@
    * alpha values packed in order.  If hasAlpha is false, then all the colors
    * are opaque except for the transparent color.
    *
-   * @param bits the number of bits needed to represent <code>size</code> colors
+   * @param bits the number of bits needed to represent <code>size</code> 
+   *             colors
    * @param size the number of colors in the color map
    * @param cmap packed color components
    * @param start the offset of the first color component in <code>cmap</code>
    * @param hasAlpha <code>cmap</code> has alpha values
    * @param trans the index of the transparent color
-   * @param transferType DataBuffer.TYPE_BYTE or DataBuffer.TYPE_USHORT
-   * @throws IllegalArgumentException if bits < 1, bits > 16, or size < 1.
-   * @throws IllegalArgumentException if transferType is something other than
-   * TYPE_BYTE or TYPE_USHORT.
+   * @param transferType {@link DataBuffer#TYPE_BYTE} or 
+            {@link DataBuffer#TYPE_USHORT}.
+   * @throws IllegalArgumentException if bits &lt; 1, bits &gt; 16, or size
+   *         &lt; 1.
+   * @throws IllegalArgumentException if <code>transferType</code> is something
+   *         other than {@link DataBuffer#TYPE_BYTE} or 
+   *         {@link DataBuffer#TYPE_USHORT}.
    */
-  public IndexColorModel (int bits, int size, int[] cmap, int start, 
-                          boolean hasAlpha, int trans, int transferType)
+  public IndexColorModel(int bits, int size, int[] cmap, int start, 
+                         boolean hasAlpha, int trans, int transferType)
   {
-    super(bits * 4, // total bits, sRGB, four channels
-	  nArray(bits, 4), // bits for each channel
+    super(bits, 
+	  nArray(8, 4), // bits for each channel
 	  ColorSpace.getInstance(ColorSpace.CS_sRGB), // sRGB
 	  true, // has alpha
 	  false, // not premultiplied
@@ -265,7 +361,8 @@
       throw new IllegalArgumentException("size < 1");
     map_size = size;
     opaque = !hasAlpha;
-    this.trans = trans;
+    if (0 <= trans && trans < size)
+      this.trans = trans;
 
     rgb = new int[size];
     if (!hasAlpha)
@@ -280,30 +377,34 @@
 
   /**
    * Construct an IndexColorModel using a colormap with holes.
-   * 
+   * <br><br>
    * The IndexColorModel is built from the array of ints defining the
    * colormap.  Each element contains red, green, blue, and alpha
    * components.    The ColorSpace is sRGB.  The transparency value is
    * automatically determined.
-   * 
+   * <br><br>
    * This constructor permits indicating which colormap entries are valid,
    * using the validBits argument.  Each entry in cmap is valid if the
    * corresponding bit in validBits is set.  
    * 
-   * @param bits the number of bits needed to represent <code>size</code> colors
-   * @param size the number of colors in the color map
-   * @param cmap packed color components
-   * @param start the offset of the first color component in <code>cmap</code>
-   * @param transferType DataBuffer.TYPE_BYTE or DataBuffer.TYPE_USHORT
-   * @throws IllegalArgumentException if bits < 1, bits > 16, or size < 1.
+   * @param bits the number of bits needed to represent <code>size</code> 
+   *             colors.
+   * @param size the number of colors in the color map.
+   * @param cmap packed color components.
+   * @param start the offset of the first color component in <code>cmap</code>.
+   * @param transferType {@link DataBuffer#TYPE_BYTE} or 
+   *                     {@link DataBuffer#TYPE_USHORT}.
+   * @param validBits a map of the valid entries in <code>cmap</code>.
+   * @throws IllegalArgumentException if bits &lt; 1, bits &gt; 16, or size
+   *         &lt; 1.
    * @throws IllegalArgumentException if transferType is something other than
-   * TYPE_BYTE or TYPE_USHORT.
+   *         {@link DataBuffer#TYPE_BYTE} or {@link DataBuffer#TYPE_USHORT}.
    */
-  public IndexColorModel (int bits, int size, int[] cmap, int start, 
-                          int transferType, BigInteger validBits)
+  public IndexColorModel(int bits, int size, int[] cmap, int start, 
+                         int transferType, BigInteger validBits)
   {
-    super(bits * 4, // total bits, sRGB, four channels
-	  nArray(bits, 4), // bits for each channel
+    super(bits, // total bits, sRGB, four channels
+	  nArray(8, 4), // bits for each channel
 	  ColorSpace.getInstance(ColorSpace.CS_sRGB), // sRGB
 	  true, // has alpha
 	  false, // not premultiplied
@@ -328,112 +429,181 @@
       System.arraycopy(cmap, start, rgb, 0, size);
   }
 
-  public final int getMapSize ()
+  /**
+   * Returns the size of the color lookup table.
+   *
+   * @return The size of the color lookup table.
+   */
+  public final int getMapSize()
   {
     return map_size;
   }
 
   /**
-   * Get the index of the transparent color in this color model
+   * Get the index of the transparent color in this color model.
+   *
+   * @return The index of the color that is considered transparent, or -1 if 
+   *         there is no transparent color.
    */
-  public final int getTransparentPixel ()
+  public final int getTransparentPixel()
   {
     return trans;
   }
 
   /**
-   * <br>
+   * Fills the supplied array with the red component of each color in the 
+   * lookup table.
+   *
+   * @param r an array that is at least as large as {@link #getMapSize()}.
+   * @throws NullPointerException if <code>r</code> is <code>null</code>.
+   * @throws ArrayIndexOutOfBoundsException if <code>r</code> has less 
+   *         than {@link #getMapSize()} elements. 
    */
-  public final void getReds (byte[] r)
+  public final void getReds(byte[] r)
   {
-    getComponents (r, 2);
+    int i;
+    for (i = 0; i < map_size; i++)
+      r[i] = (byte) ((0x00FF0000  & rgb[i]) >> 16);
   }
 
   /**
-   * <br>
+   * Fills the supplied array with the green component of each color in the 
+   * lookup table.
+   *
+   * @param g an array that is at least as large as {@link #getMapSize()}.
+   * @throws NullPointerException if <code>g</code> is <code>null</code>.
+   * @throws ArrayIndexOutOfBoundsException if <code>g</code> has less 
+   *         than {@link #getMapSize()} elements. 
    */
-  public final void getGreens (byte[] g)
+  public final void getGreens(byte[] g)
   {
-    getComponents (g, 1);
+    int i;
+    for (i = 0; i < map_size; i++)
+      g[i] = (byte) ((0x0000FF00  & rgb[i]) >> 8);
   }
 
   /**
-   * <br>
+   * Fills the supplied array with the blue component of each color in the 
+   * lookup table.
+   *
+   * @param b an array that is at least as large as {@link #getMapSize()}.
+   * @throws NullPointerException if <code>b</code> is <code>null</code>.
+   * @throws ArrayIndexOutOfBoundsException if <code>b</code> has less 
+   *         than {@link #getMapSize()} elements. 
    */
-  public final void getBlues (byte[] b)
+  public final void getBlues(byte[] b)
   {
-    getComponents (b, 0);
+    int i;
+    for (i = 0; i < map_size; i++)
+      b[i] = (byte) (0x000000FF & rgb[i]);
   }
 
   /**
-   * <br>
+   * Fills the supplied array with the alpha component of each color in the 
+   * lookup table.  If the model has a transparent pixel specified, the alpha
+   * for that pixel will be 0.
+   *
+   * @param a an array that is at least as large as {@link #getMapSize()}.
+   * @throws NullPointerException if <code>a</code> is <code>null</code>.
+   * @throws ArrayIndexOutOfBoundsException if <code>a</code> has less 
+   *         than {@link #getMapSize()} elements. 
    */
-  public final void getAlphas (byte[] a)
+  public final void getAlphas(byte[] a)
   {
-    getComponents (a, 3);
+    int i;
+    for (i = 0; i < map_size; i++)
+      if (i == trans) 
+	a[i] = (byte) 0;
+      else 
+        a[i] = (byte) ((0xFF000000  & rgb[i]) >> 24);
   }
 
-  private void getComponents (byte[] c, int ci)
-  {
-    int i, max = (map_size < c.length) ? map_size : c.length;
-    for (i = 0; i < max; i++)
-	    c[i] = (byte) ((generateMask (ci)  & rgb[i]) >> (ci * pixel_bits));
-  } 
-
   /**
-   * Get the red component of the given pixel.
+   * Returns the red component of the color in the lookup table for the 
+   * given pixel value.
+   *
+   * @param pixel  the pixel lookup value.
+   *
+   * @return The red component of the color in the lookup table.
+   * @throws ArrayIndexOutOfBoundsException if <code>pixel</code> is negative.
    */
-  public final int getRed (int pixel)
+  public final int getRed(int pixel)
   {
     if (pixel < map_size)
-	    return (int) ((generateMask (2) & rgb[pixel]) >> (2 * pixel_bits));
+      return (0x00FF0000 & rgb[pixel]) >> 16;
     
     return 0;
   }
 
   /**
-   * Get the green component of the given pixel.
+   * Returns the green component of the color in the lookup table for the 
+   * given pixel value.
+   *
+   * @param pixel  the pixel lookup value.
+   *
+   * @return The green component of the color in the lookup table.
+   * @throws ArrayIndexOutOfBoundsException if <code>pixel</code> is negative.
    */
-  public final int getGreen (int pixel)
+  public final int getGreen(int pixel)
   {
     if (pixel < map_size)
-	    return (int) ((generateMask (1) & rgb[pixel]) >> (1 * pixel_bits));
+      return (0x0000FF00 & rgb[pixel]) >> 8;
     
     return 0;
   }
 
   /**
-   * Get the blue component of the given pixel.
+   * Returns the blue component of the color in the lookup table for the 
+   * given pixel value.
+   *
+   * @param pixel  the pixel lookup value.
+   *
+   * @return The blue component of the color in the lookup table.
+   * @throws ArrayIndexOutOfBoundsException if <code>pixel</code> is negative.
    */
-  public final int getBlue (int pixel)
+  public final int getBlue(int pixel)
   {
-    if (pixel < map_size) 
-	    return (int) (generateMask (0) & rgb[pixel]);
+    if (pixel < map_size)
+      return 0x000000FF & rgb[pixel];
     
     return 0;
   }
 
   /**
-   * Get the alpha component of the given pixel.
+   * Returns the alpha component of the color in the lookup table for the 
+   * given pixel value. If no alpha channel was specified when the color model
+   * was created, then 255 is returned for all pixels except the transparent
+   * pixel (if one is defined - see {@link #getTransparentPixel()}) which
+   * returns an alpha of 0.
+   *
+   * @param pixel  the pixel lookup value.
+   *
+   * @return The alpha component of the color in the lookup table (in the 
+   *         range 0 to 255).
+   * @throws ArrayIndexOutOfBoundsException if <code>pixel</code> is negative.
    */
-  public final int getAlpha (int pixel)
+  public final int getAlpha(int pixel)
   {
-    if (opaque || pixel >= map_size)
+    if (opaque && pixel != trans) 
       return 255;
+    if ((pixel == trans && trans != -1) || pixel >= map_size)
+      return 0;
 
-    return (int) ((generateMask (3) & rgb[pixel]) >> (3 * pixel_bits));
+    return (0xFF000000 & rgb[pixel]) >> 24;
   }
 
   /**
    * Get the RGB color value of the given pixel using the default
    * RGB color model. 
    *
-   * @param pixel a pixel value
+   * @param pixel the pixel lookup value.
+   * @return The RGB color value.
+   * @throws ArrayIndexOutOfBoundsException if <code>pixel</code> is negative.
    */
-  public final int getRGB (int pixel)
+  public final int getRGB(int pixel)
   {
-    if (pixel < map_size)
-	    return rgb[pixel];
+    if (pixel >= 0 && pixel < map_size)
+      return rgb[pixel];
     
     return 0;
   }
@@ -444,36 +614,47 @@
    *
    * @param rgb The destination array.
    */
-  public final void getRGBs (int[] rgb)
+  public final void getRGBs(int[] rgb)
   {
     System.arraycopy(this.rgb, 0, rgb, 0, map_size);
   }
     
-   //pixel_bits is number of bits to be in generated mask
-  private int generateMask (int offset)
-  {
-    return (((2 << pixel_bits ) - 1) << (pixel_bits * offset));
-  }
-
-  /** Return true if pixel is valid, false otherwise. */
+  /** 
+   * Return <code>true</code> if the lookup table contains valid data for 
+   * <code>pixel</code>, and <code>false</code> otherwise.
+   *
+   * @param pixel  the pixel value used to index the color lookup table.
+   * @return <code>true</code> if <code>pixel</code> is valid, 
+   *         <code>false</code> otherwise.
+   */
   public boolean isValid(int pixel)
   {
-    return validBits.testBit(pixel);
+    if (pixel >= 0)
+      return validBits.testBit(pixel);
+    return false;
   }
   
-  /** Return true if all pixels are valid, false otherwise. */
+  /** 
+   * Return <code>true</code> if all pixels are valid, <code>false</code> 
+   * otherwise.
+   *
+   * @return <code>true</code> if all pixels are valid, <code>false</code> 
+   * otherwise.
+   */
   public boolean isValid()
   {
     // Generate a bigint with 1's for every pixel
     BigInteger allbits = new BigInteger("0");
-    allbits.setBit(map_size);
-    allbits.subtract(new BigInteger("1"));
+    allbits = allbits.setBit(map_size);
+    allbits = allbits.subtract(new BigInteger("1"));
     return allbits.equals(validBits);
   }
   
   /** 
-   * Returns a BigInteger where each bit represents an entry in the color
-   * model.  If the bit is on, the entry is valid.
+   * Returns a binary value ({@link BigInteger}) where each bit represents an 
+   * entry in the color lookup table.  If the bit is on, the entry is valid.
+   * 
+   * @return The binary value.
    */
   public BigInteger getValidPixels()
   {
@@ -481,7 +662,8 @@
   }
   
   /**
-   * Construct a BufferedImage with rgb pixel values from a Raster.
+   * Construct a {@link BufferedImage} with rgb pixel values from a 
+   * {@link Raster}.
    * 
    * Constructs a new BufferedImage in which each pixel is an RGBA int from
    * a Raster with index-valued pixels.  If this model has no alpha component
@@ -513,4 +695,3 @@
     return im;
   }
 }
-
Index: libjava/java/awt/image/PixelGrabber.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/image/PixelGrabber.java,v
retrieving revision 1.6
diff -u -r1.6 PixelGrabber.java
--- libjava/java/awt/image/PixelGrabber.java	30 Nov 2004 23:58:50 -0000	1.6
+++ libjava/java/awt/image/PixelGrabber.java	9 Jul 2005 22:10:00 -0000
@@ -520,16 +520,12 @@
 		  {
 		    ints_delivered = true;
 
-		    assert (i >= 0 && i < int_pixel_buffer.length);
-		    assert (p >= 0 && p < pixels.length);
-		    int_pixel_buffer[i] = currentModel.getRGB (pixels[p]);
+		    int_pixel_buffer[i] = currentModel.getRGB (pixels[p] & 0xFF);
 		  }
 		else
 		  {
 		    bytes_delivered = true;
 
-		    assert (i >= 0 && i < byte_pixel_buffer.length);
-		    assert (p >= 0 && p < pixels.length);
 		    byte_pixel_buffer[i] = pixels[p];
 		  }
 	      }
@@ -582,8 +578,6 @@
 	      {
 		int i = (yp - this.y) * this.scansize + (xp - this.x) + this.offset;
 		int p = (yp - y) * scansize + (xp - x) + offset;
-		assert (i >= 0 && i < int_pixel_buffer.length);
-		assert (p >= 0 && p < pixels.length);
 		if (forceRGB)
 		  int_pixel_buffer[i] = currentModel.getRGB (pixels[p]);
 		else
Index: libjava/java/awt/image/RGBImageFilter.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/image/RGBImageFilter.java,v
retrieving revision 1.7
diff -u -r1.7 RGBImageFilter.java
--- libjava/java/awt/image/RGBImageFilter.java	17 Feb 2005 07:48:31 -0000	1.7
+++ libjava/java/awt/image/RGBImageFilter.java	9 Jul 2005 22:10:00 -0000
@@ -147,12 +147,14 @@
     public void filterRGBPixels(int x, int y, int w, int h, int[] pixels,
 				int offset, int scansize)
     {
-      for (int xp = x; xp < (x + w); xp++)
-	for (int yp = y; yp < (y + h); yp++)
-	  {
-	    pixels[offset] = filterRGB(xp, yp, pixels[offset]);
-	    offset++;
-	  }
+      for (int yp = 0; yp < h; yp++)
+	{
+	  for (int xp = 0; xp < w; xp++)
+	    {
+	      pixels[offset + xp] = filterRGB(xp + x, yp + y, pixels[offset + xp]);
+	    }
+	  offset += scansize;
+	}
     }
 
 
@@ -212,9 +214,9 @@
 	else
 	{
 	    //FIXME: Store the filtered pixels in a separate temporary buffer?
-	    convertColorModelToDefault( x, y, w, h, model, pixels, offset, scansize );
-	    filterRGBPixels( x, y, w, h, pixels, offset, scansize );
-	    consumer.setPixels(x, y, w, h, ColorModel.getRGBdefault(), pixels, offset, scansize);
+	  convertColorModelToDefault( x, y, w, h, model, pixels, offset, scansize );
+	  filterRGBPixels( x, y, w, h, pixels, offset, scansize );
+	  consumer.setPixels(x, y, w, h, ColorModel.getRGBdefault(), pixels, offset, scansize);
 	}
     }
 
Index: libjava/java/awt/image/RasterOp.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/image/RasterOp.java,v
retrieving revision 1.6
diff -u -r1.6 RasterOp.java
--- libjava/java/awt/image/RasterOp.java	30 Nov 2004 23:58:50 -0000	1.6
+++ libjava/java/awt/image/RasterOp.java	9 Jul 2005 22:10:00 -0000
@@ -1,4 +1,5 @@
-/* Copyright (C) 2000, 2002, 2004  Free Software Foundation
+/* RasterOp.java --
+   Copyright (C) 2000, 2002, 2004, 2005  Free Software Foundation
 
 This file is part of GNU Classpath.
 
@@ -41,8 +42,8 @@
 import java.awt.geom.Point2D;
 import java.awt.geom.Rectangle2D;
 
-public interface RasterOp {
-
+public interface RasterOp
+{
   WritableRaster filter(Raster src, WritableRaster dest);
 
   Rectangle2D getBounds2D(Raster src);
Index: libjava/java/awt/image/VolatileImage.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/image/VolatileImage.java,v
retrieving revision 1.2
diff -u -r1.2 VolatileImage.java
--- libjava/java/awt/image/VolatileImage.java	7 Nov 2002 08:45:18 -0000	1.2
+++ libjava/java/awt/image/VolatileImage.java	9 Jul 2005 22:10:00 -0000
@@ -1,5 +1,5 @@
-/* VolatileImage.java -- 
-   Copyright (C) 2002 Free Software Foundation, Inc.
+/* VolatileImage.java -- a hardware-accelerated image buffer
+   Copyright (C) 2002, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -42,33 +42,212 @@
 import java.awt.Graphics2D;
 import java.awt.GraphicsConfiguration;
 import java.awt.Image;
+import java.awt.Transparency;
 import java.awt.ImageCapabilities;
 
-/** STUBS ONLY */
+/**
+ * VolatileImage represents a hardware-accelerated graphics buffer.
+ * The native graphics system may free or damage the resources
+ * occupied by a VolatileImage at any time.  As such, one must
+ * frequently check the "validity" of the image buffer's resources.
+ *
+ * A volatile image's "validity" depends on multiple factors.  Its
+ * resources may have become unavailble in which case you must
+ * reallocate them.  If you move the image from one output device to
+ * another, you may need to recreate the image's resources if the new
+ * output device's capabilities don't match the old one's.  Finally,
+ * if the contents of the image's buffer have been damaged you must
+ * re-render the image.
+ *
+ * VolatileImages should always be created using either
+ * Component.createVolatileImage or
+ * GraphicsConfiguration.createCompatibleVolatileImage.
+ */
 public abstract class VolatileImage extends Image
+  implements Transparency
 {
+  /**
+   * One of validate's possible return values.  Indicates that the
+   * image buffer matches its graphics configuration's capabilities
+   * and that its resources are initialized and ready to be drawn
+   * into.  Also implies that any existing image rendered to the
+   * buffer is intact and need not be re-rendered.
+   */
   public static final int IMAGE_OK = 0;
+
+  /**
+   * One of validate's possible return values.  Indicates that the
+   * image buffer has been restored, meaning that it is valid and
+   * ready-to-use but that its previous contents have been lost.  This
+   * return value implies that the image needs to be re-rendered.
+   */
   public static final int IMAGE_RESTORED = 1;
+
+  /**
+   * One of validate's possible return values.  Indicates that the
+   * image buffer type is unsupported by the current graphics
+   * configuration.  The graphics configuration may have changed, for
+   * example if the image moved from one output device to another.
+   * This return value implies that the image buffer's resources
+   * should be re-acquired.
+   */
   public static final int IMAGE_INCOMPATIBLE = 2;
+
+  /**
+   * This image's transparency type.  One of Transparency.BITMASK,
+   * Transparency.OPAQUE or Transparency.TRANSLUCENT.
+   *
+   * @since 1.5
+   */
+  protected int transparency;
+
+  /**
+   * Default constructor.  VolatileImages should not be created
+   * directly.  Rather, you should use Component.createVolatileImage
+   * or GraphicsConfiguration.createCompatibleVolatileImage.
+   */
   public VolatileImage()
   {
   }
+
+  /**
+   * Returns an image representing the current state of the volatile
+   * image buffer.  The returned image is static meaning that it is
+   * not updated after being created.  It is a snapshot of the
+   * volatile image buffer at the time getSnapshot is called.
+   *
+   * This method, which reads pixels from the volatile image buffer,
+   * may be less-performant than methods that write pixels since
+   * VolatileImages are typically optimized for writing.
+   *
+   * @return a BufferedImage representing this VolatileImage
+   */
   public abstract BufferedImage getSnapshot();
+
+  /**
+   * Returns the width of this image buffer.
+   *
+   * @return the width of this VolatileImage
+   */
   public abstract int getWidth();
+
+  /**
+   * Returns the height of this image buffer.
+   *
+   * @return the height of this VolatileImage
+   */
   public abstract int getHeight();
+
+  /**
+   * Calling this method is equivalent to calling
+   * getSnapshot().getSource().  The ImageProducer produces pixels
+   * from the BufferedImage snapshot and not from the VolatileImage
+   * itself.  Thus, changes to the VolatileImage that occur after this
+   * ImageProducer has been retrieved will not be reflected in the
+   * produced pixels.
+   *
+   * This method, which reads pixels from the volatile image buffer,
+   * may be less-performant than methods that write pixels since
+   * VolatileImages are typically optimized for writing.
+   *
+   * @return an ImageProducer for a static BufferedImage snapshot of
+   * this image buffer
+   */
   public ImageProducer getSource()
   {
     return getSnapshot().getSource();
   }
+
+  /**
+   * Releases the system resources taken by this image.
+   */
   public void flush()
   {
   }
+
+  /**
+   * Returns a Graphics2D object that can be used to draw onto this
+   * image.  This method is present for backwards-compatibility.  It
+   * simply returns the result of createGraphics.
+   *
+   * @return a Graphics2D object that can be used to draw onto this
+   * image
+   */
   public Graphics getGraphics()
   {
     return createGraphics();
   }
+
+  /**
+   * Returns a Graphics2D object that can be used to draw onto this
+   * image.
+   *
+   * @return a Graphics2D object that can be used to draw onto this
+   * image
+   */
   public abstract Graphics2D createGraphics();
+
+  /**
+   * Validates and restores this image.  If the image buffer has
+   * become unavailable for further use since the last call to
+   * validate, validate will allocate a new image buffer.  The image
+   * is also "validated" against the GraphicsConfiguration parameter.
+   *
+   * "Validating" the image means checking that the capabilities it
+   * requires of the output device are indeed supported by the given
+   * output device.  If the image's characteristics, which can be
+   * highly output device-specific, are not supported by the graphics
+   * configuration, then IMAGE_INCOMPATIBLE will be returned.  This
+   * can happen, for example, if this image was created on one output
+   * device, then validated against a different output device with
+   * different capabilities.  Calling validate with a NULL gc argument
+   * causes validate to skip the validation test.
+   *
+   * @param gc graphics configuration against which to validate or
+   * NULL
+   *
+   * @return a code indicating the result of validation. One of:
+   * <ul>
+   *   <li><code>IMAGE_OK</code> if the image did not need to be
+   *   validated and didn't need to be restored</li>
+   *   <li><code>IMAGE_RESTORED</code> if the image may need to be
+   *   re-rendered.</li>
+   *   <li><code>IMAGE_INCOMPATIBLE</code> if this image's
+   *   requirements are not fulfilled by the graphics configuration
+   *   parameter.  This implies that you need to create a new
+   *   VolatileImage for the different GraphicsConfiguration or
+   *   Component. This return value implies nothing about whether the
+   *   image is valid or needs to be re-rendered.</li>
+   * </ul>
+   */
   public abstract int validate(GraphicsConfiguration gc);
+
+  /**
+   * Returns true if the contents of the image buffer have been
+   * damaged or if the image buffer's resources have been reclaimed by
+   * the graphics system.  You should call this method after a series
+   * of rendering operations to or from the image, to see if the image
+   * buffer needs to be revalidated or the image re-rendered.
+   *
+   * @return true if the validate should be called, false otherwise
+   */
   public abstract boolean contentsLost();
+
+  /**
+   * Returns the capabilities of this image buffer.
+   *
+   * @return the capabilities of this image buffer
+   */
   public abstract ImageCapabilities getCapabilities();
-} // class VolatileImage
+
+  /**
+   * Returns the transparency type of this image.
+   *
+   * @return Transparency.OPAQUE, Transparency.BITMASK or
+   * Transparency.TRANSLUCENT
+   */
+  public int getTransparency()
+  {
+    return transparency;
+  }
+}
Index: libjava/java/awt/peer/ComponentPeer.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/java/awt/peer/ComponentPeer.java,v
retrieving revision 1.12
diff -u -r1.12 ComponentPeer.java
--- libjava/java/awt/peer/ComponentPeer.java	11 Oct 2003 18:11:03 -0000	1.12
+++ libjava/java/awt/peer/ComponentPeer.java	9 Jul 2005 22:10:00 -0000
@@ -128,11 +128,60 @@
   boolean canDetermineObscurity();
   void coalescePaintEvent(PaintEvent e);
   void updateCursorImmediately();
-  VolatileImage createVolatileImage(int width, int height);
   boolean handlesWheelScrolling();
-  void createBuffers(int x, BufferCapabilities capabilities) throws AWTException;
+
+  /**
+   * A convenience method that creates a volatile image.  The volatile
+   * image is created on the screen device on which this component is
+   * displayed, in the device's current graphics configuration.
+   *
+   * @param width width of the image
+   * @param height height of the image
+   *
+   * @see VolatileImage
+   *
+   * @since 1.2
+   */
+  VolatileImage createVolatileImage(int width, int height);
+
+  /**
+   * Create a number of image buffers that implement a buffering
+   * strategy according to the given capabilities.
+   *
+   * @param numBuffers the number of buffers
+   * @param caps the buffering capabilities
+   *
+   * @throws AWTException if the specified buffering strategy is not
+   * implemented
+   *
+   * @since 1.2
+   */
+  void createBuffers(int numBuffers, BufferCapabilities caps)
+    throws AWTException;
+
+  /**
+   * Return the back buffer of this component.
+   *
+   * @return the back buffer of this component.
+   *
+   * @since 1.2
+   */
   Image getBackBuffer();
+
+  /**
+   * Perform a page flip, leaving the contents of the back buffer in
+   * the specified state.
+   *
+   * @param contents the state in which to leave the back buffer
+   *
+   * @since 1.2
+   */
   void flip(BufferCapabilities.FlipContents contents);
+
+  /**
+   * Destroy the resources created by createBuffers.
+   *
+   * @since 1.2
+   */
   void destroyBuffers();
-  
 }
Index: libjava/javax/swing/AbstractButton.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/AbstractButton.java,v
retrieving revision 1.13
diff -u -r1.13 AbstractButton.java
--- libjava/javax/swing/AbstractButton.java	16 Feb 2005 20:02:17 -0000	1.13
+++ libjava/javax/swing/AbstractButton.java	9 Jul 2005 22:10:02 -0000
@@ -47,6 +47,7 @@
 import java.awt.event.ActionListener;
 import java.awt.event.ItemEvent;
 import java.awt.event.ItemListener;
+import java.io.Serializable;
 import java.beans.PropertyChangeEvent;
 import java.beans.PropertyChangeListener;
 
@@ -152,7 +153,25 @@
   implements ItemSelectable, SwingConstants
 {
   private static final long serialVersionUID = -937921345538462020L;
-  
+
+  /**
+   * An extension of ChangeListener to be serializable.
+   */
+  protected class ButtonChangeListener
+    implements ChangeListener, Serializable
+  {
+    private static final long serialVersionUID = 1471056094226600578L;
+
+    /**
+     * Notified when the target of the listener changes its state.
+     *
+     * @param ev the ChangeEvent describing the change
+     */
+    public void stateChanged(ChangeEvent ev)
+    {
+    }
+  }
+
   /** The icon displayed by default. */
   Icon default_icon;
 
@@ -506,15 +525,10 @@
  {
     this.text = text;
     default_icon = icon;
-    model = new DefaultButtonModel();
     actionListener = createActionListener();
     changeListener = createChangeListener();
     itemListener = createItemListener();
 
-    model.addActionListener(actionListener);
-    model.addChangeListener(changeListener);
-    model.addItemListener(itemListener);
-
     horizontalAlignment = CENTER;
     horizontalTextPosition = TRAILING;
     verticalAlignment = CENTER;
@@ -1329,18 +1343,6 @@
   }
 
   /**
-   * Return the button's "focusTraversable" property. This property controls
-   * whether or not the button can receive focus when the user attempts to
-   * traverse the focus hierarchy.
-   *
-   * @return The current "focusTraversable" property
-   */
-  public boolean isFocusTraversable()
-  {
-    return true;
-  }
-
-  /**
    * Verifies that a particular key is one of the valid constants used for
    * describing horizontal alignment and positioning. The valid constants
    * are the following members of {@link SwingConstants}:
Index: libjava/javax/swing/AbstractCellEditor.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/AbstractCellEditor.java,v
retrieving revision 1.8
diff -u -r1.8 AbstractCellEditor.java
--- libjava/javax/swing/AbstractCellEditor.java	16 Feb 2005 20:02:18 -0000	1.8
+++ libjava/javax/swing/AbstractCellEditor.java	9 Jul 2005 22:10:02 -0000
@@ -1,5 +1,5 @@
 /* AbstractCellEditor.java --
-   Copyright (C) 2002, 2004 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -46,7 +46,9 @@
 import javax.swing.event.EventListenerList;
 
 /**
- * AbstractCellEditor
+ * The abstract superclass for table and tree cells. This provides some
+ * common shared functionality.
+ *
  * @author	Andrew Selkirk
  * @version	1.0
  */
@@ -56,59 +58,77 @@
   private static final long serialVersionUID = -1048006551406220959L;
 
   /**
-   * listenerList
+   * Our Swing event listeners.
    */
   protected EventListenerList listenerList;
 
   /**
-   * changeEvent
+   * The cached ChangeEvent.
    */
   protected transient ChangeEvent changeEvent;
 
-	/**
-	 * Constructor AbstractCellEditor
-	 */
-	public AbstractCellEditor() {
-		// TODO
-	} // AbstractCellEditor()
-
-	/**
-	 * isCellEditable
-	 * @param event TODO
-	 * @returns boolean
-	 */
-	public boolean isCellEditable(EventObject event) {
-		return false; // TODO
-	} // isCellEditable()
-
-	/**
-	 * shouldSelectCell
-	 * @param event TODO
-	 * @returns boolean
-	 */
-	public boolean shouldSelectCell(EventObject event) {
-		return false; // TODO
-	} // shouldSelectCell()
-
-	/**
-	 * stopCellEditing
-	 * @returns boolean
-	 */
-	public boolean stopCellEditing() {
-		return false; // TODO
-	} // stopCellEditing()
-
-	/**
-	 * cancelCellEditing
-	 */
-	public void cancelCellEditing() {
-		// TODO
-	} // cancelCellEditing()
+  /**
+   * Creates a new instance of AbstractCellEditor.
+   */
+  public AbstractCellEditor() {
+    listenerList = new EventListenerList();
+    changeEvent = new ChangeEvent(this);
+  } // AbstractCellEditor()
+
+  /**
+   * Returns <code>true</code> if the cell is editable using
+   * <code>event</code>, <code>false</code>
+   * if it's not. The default behaviour is to return <code>true</code>.
+   *
+   * @param event an event
+   *
+   * @return <code>true</code> if the cell is editable using
+   *     <code>event</code>, <code>false</code> if it's not
+   */
+  public boolean isCellEditable(EventObject event) {
+    return true;
+  } // isCellEditable()
+
+  /**
+   * Returns <code>true</code> if the editing cell should be selected,
+   * <code>false</code> otherwise. This is usually returning <code>true</code>,
+   * but in some special cases it might be useful not to switch cell selection
+   * when editing one cell.
+   *
+   * @param event an event
+   *
+   * @return <code>true</code> if the editing cell should be selected,
+   *     <code>false</code> otherwise
+   */
+  public boolean shouldSelectCell(EventObject event) {
+    return true;
+  } // shouldSelectCell()
+
+  /**
+   * Stop editing the cell and accept any partial value that has been entered
+   * into the cell.
+   *
+   * @returns <code>true</code> if editing has been stopped successfully,
+   *     <code>false</code>otherwise
+   */
+  public boolean stopCellEditing() {
+    fireEditingStopped();
+    return true;
+  } // stopCellEditing()
 
   /**
-   * addCellEditorListener
+   * Stop editing the cell and do not accept any partial value that has
+   * been entered into the cell.
+   */
+  public void cancelCellEditing() {
+    fireEditingCanceled();
+  } // cancelCellEditing()
+
+  /**
+   * Adds a CellEditorListener to the list of CellEditorListeners of this
+   * CellEditor.
    *
-   * @param listener The listener to add
+   * @param listener the CellEditorListener to add
    */
   public void addCellEditorListener (CellEditorListener listener)
   {
@@ -116,9 +136,10 @@
   }
 
   /**
-   * removeCellEditorListener
+   * Removes the specified CellEditorListener from the list of the
+   * CellEditorListeners of this CellEditor.
    *
-   * @param listener The listener to remove
+   * @param listener the CellEditorListener to remove
    */
   public void removeCellEditorListener (CellEditorListener listener)
   {
@@ -126,17 +147,23 @@
   }
 	
   /**
-   * getCellEditorListeners
+   * Returns the list of CellEditorListeners that have been registered
+   * in this CellEditor.
+   *
+   * @return the list of CellEditorListeners that have been registered
+   *     in this CellEditor
    *
    * @since 1.4
    */
   public CellEditorListener[] getCellEditorListeners()
   {
-    return (CellEditorListener[]) listenerList.getListeners (CellEditorListener.class);
+    return (CellEditorListener[]) listenerList.getListeners
+      (CellEditorListener.class);
   }
 
   /**
-   * fireEditingStopped
+   * Notifies all registered listeners that the editing of the cell has
+   * has been stopped.
    */
   protected void fireEditingStopped()
   {
@@ -149,7 +176,8 @@
   }
 
   /**
-   * fireEditingCanceled
+   * Notifies all registered listeners that the editing of the cell has
+   * has been canceled.
    */
   protected void fireEditingCanceled()
   {
Index: libjava/javax/swing/ActionMap.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/ActionMap.java,v
retrieving revision 1.8
diff -u -r1.8 ActionMap.java
--- libjava/javax/swing/ActionMap.java	16 Feb 2005 20:02:18 -0000	1.8
+++ libjava/javax/swing/ActionMap.java	9 Jul 2005 22:10:02 -0000
@@ -133,7 +133,8 @@
    */
   public void setParent(ActionMap parentMap)
   {
-    parent = parentMap;
+    if (parentMap != this)
+      parent = parentMap;
   }
 
   /**
Index: libjava/javax/swing/BoxLayout.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/BoxLayout.java,v
retrieving revision 1.4
diff -u -r1.4 BoxLayout.java
--- libjava/javax/swing/BoxLayout.java	2 Sep 2004 05:10:18 -0000	1.4
+++ libjava/javax/swing/BoxLayout.java	9 Jul 2005 22:10:02 -0000
@@ -1,5 +1,5 @@
 /* BoxLayout.java -- A layout for swing components.
-   Copyright (C) 2002, 2003 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2003, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -42,6 +42,7 @@
 import java.awt.ComponentOrientation;
 import java.awt.Container;
 import java.awt.Dimension;
+import java.awt.Insets;
 import java.awt.LayoutManager2;
 import java.io.Serializable;
 
@@ -146,6 +147,7 @@
     if (parent != container)
       throw new AWTError("invalid parent");
 
+    Insets insets = parent.getInsets();
     int x = 0;
     int y = 0;
 
@@ -153,6 +155,7 @@
 
     if (isHorizontalIn(parent))
       {        
+        x = insets.left + insets.right;
         // sum up preferred widths of components, find maximum of preferred
         // heights
         for (int index = 0; index < children.length; index++)
@@ -162,9 +165,11 @@
             x += sz.width;
             y = Math.max(y, sz.height);
           }
+        y += insets.bottom + insets.top;
       } 
     else 
       {        
+        y = insets.top + insets.bottom;
         // sum up preferred heights of components, find maximum of
         //  preferred widths
         for (int index = 0; index < children.length; index++)
@@ -174,8 +179,9 @@
             y += sz.height;
             x = Math.max(x, sz.width);
           }
+        x += insets.left + insets.right;
       }
-    
+
     return new Dimension(x, y);
   }
 
@@ -191,8 +197,9 @@
     if (parent != container)
       throw new AWTError("invalid parent");
 
-    int x = 0;
-    int y = 0;
+    Insets insets = parent.getInsets();
+    int x = insets.left + insets.right;
+    int y = insets.bottom + insets.top;
 
     Component[] children = parent.getComponents();
 
@@ -235,53 +242,155 @@
       throw new AWTError("invalid parent");
 
     Dimension size = parent.getSize();
-
+    Insets insets = parent.getInsets();
+    Dimension innerSize = new Dimension(size.width - insets.left
+                                        - insets.right, size.height
+                                        - insets.bottom - insets.top);
     Component[] children = parent.getComponents();
+    boolean[] laidOut = new boolean[children.length];
+    for (int index = 0; index < laidOut.length; index++)
+      laidOut[index] = false;
 
     if (isHorizontalIn(parent))
       {
-        int x = 0;
+        // compute overall preferred width
+        int preferredWidthAll = 0;
+        for (int index = 0; index < children.length; index++)
+          {
+            preferredWidthAll += children[index].getPreferredSize().width;
+          }
+        double widthFactor = (double) innerSize.width /
+          (double) preferredWidthAll;
+
+        // sort out components that are constrained by minimum or maximum size
+        int widthRemain = innerSize.width;
         for (int index = 0; index < children.length; index++)
           {
             Component comp = children[index];
             Dimension sz = comp.getPreferredSize();
-            int width = sz.width;
-            int height = sz.height;
-            int cy = 0;
-            if (height > size.height)
+            Dimension minSize = comp.getMinimumSize();
+            Dimension maxSize = comp.getMaximumSize();
+            int width = (int) (sz.width * widthFactor);
+            int height = Math.min(innerSize.height, maxSize.height);
+            // check min size
+            if (width < minSize.width)
               {
-                height = size.height;
+                width = minSize.width;
+                comp.setSize(width, height);
+                laidOut[index] = true;
+                preferredWidthAll -= sz.width;
+                widthRemain -= width;
+                continue;
               }
-            else
+            // check max size
+            if (width > maxSize.width)
+              {
+                width = maxSize.width;
+                comp.setSize(width, height);
+                laidOut[index] = true;
+                preferredWidthAll -= sz.width;
+                widthRemain -= width;
+                continue;
+              }
+
+          }
+
+        // recompute widthFactor for remaining components
+        widthFactor = (double) widthRemain / (double) preferredWidthAll;
+
+        int x = insets.left;
+
+        // lay out remaining comonents
+        for (int index = 0; index < children.length; index++)
+          {
+            Component comp = children[index];
+            int width = 0;
+
+            if (!laidOut[index])
               {
-                cy = (int) ((size.height - height) * comp.getAlignmentY());
+                Dimension sz = comp.getPreferredSize();
+                Dimension maxSize = comp.getMaximumSize();
+                width = (int) (sz.width * widthFactor);
+                int height = Math.min(innerSize.height, maxSize.height);
+                comp.setSize(width, height);
               }
-            
-            comp.setSize(width, height);
+            else
+                width = comp.getWidth();
+
+            int cy = (int) ((innerSize.height - comp.getHeight())
+              * comp.getAlignmentY() + insets.top);
             comp.setLocation(x, cy);
             x = x + width;            
           }
       }
     else
       {
-        int y = 0;        
+        // compute overall preferred height
+        int preferredHeightAll = 0;
+        for (int index = 0; index < children.length; index++)
+          {
+            preferredHeightAll += children[index].getPreferredSize().height;
+          }
+        double heightFactor = (double) innerSize.height /
+          (double) preferredHeightAll;
+
+        // sort out components that are constrained by minimum or maximum size
+        int heightRemain = innerSize.height;
         for (int index = 0; index < children.length; index++)
           {
             Component comp = children[index];
             Dimension sz = comp.getPreferredSize();
-            int width = sz.width;
-            int height = sz.height;
-            int cx = 0;
-            if (width > size.width)
+            Dimension minSize = comp.getMinimumSize();
+            Dimension maxSize = comp.getMaximumSize();
+            int height = (int) (sz.height * heightFactor);
+            int width = Math.min(innerSize.width, maxSize.width);
+            // check min size
+            if (height < minSize.height)
               {
-                width = size.width;
+                height = minSize.height;
+                comp.setSize(width, height);
+                laidOut[index] = true;
+                preferredHeightAll -= sz.height;
+                heightRemain -= height;
+                continue;
               }
-            else
+            // check max size
+            if (height > maxSize.height)
               {
-                cx = (int) ((size.width - width) * comp.getAlignmentX());
+                height = maxSize.height;
+                comp.setSize(width, height);
+                laidOut[index] = true;
+                preferredHeightAll -= sz.height;
+                heightRemain -= height;
+                continue;
               }
-            
-            comp.setSize(width, height);
+
+          }
+
+        // recompute heightFactor for remaining components
+        heightFactor = (double) heightRemain / (double) preferredHeightAll;
+
+        int y = insets.top;
+
+        // lay out remaining comonents
+        for (int index = 0; index < children.length; index++)
+          {
+            Component comp = children[index];
+            int height = 0;
+
+            if (!laidOut[index])
+              {
+                Dimension sz = comp.getPreferredSize();
+                Dimension maxSize = comp.getMaximumSize();
+                height = (int) (sz.height * heightFactor);
+                int width = Math.min(innerSize.width, maxSize.width);
+                comp.setSize(width, height);
+              }
+            else
+              height = comp.getHeight();
+
+            int cx = (int) ((innerSize.width - comp.getWidth())
+              * comp.getAlignmentX() + insets.left);
             comp.setLocation(cx, y);
             y = y + height;            
           }
@@ -352,8 +461,9 @@
     if (parent != container)
       throw new AWTError("invalid parent");
 
-    int x = 0;
-    int y = 0;
+    Insets insets = parent.getInsets();
+    int x = insets.left + insets.right;
+    int y = insets.top + insets.bottom;
 
     Component[] children = parent.getComponents();
 
@@ -367,6 +477,9 @@
             Component comp = children[index];
             Dimension sz = comp.getMaximumSize();
             x += sz.width;
+            // Check for overflow.
+            if (x < 0)
+              x = Integer.MAX_VALUE;
             y = Math.max(y, sz.height);
           }
       }
@@ -379,6 +492,9 @@
             Component comp = children[index];
             Dimension sz = comp.getMaximumSize();
             y += sz.height;
+            // Check for overflow
+            if (y < 0)
+              y = Integer.MAX_VALUE;
             x = Math.max(x, sz.width);
           }
       } 
Index: libjava/javax/swing/CellRendererPane.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/CellRendererPane.java,v
retrieving revision 1.5
diff -u -r1.5 CellRendererPane.java
--- libjava/javax/swing/CellRendererPane.java	30 Nov 2004 23:58:52 -0000	1.5
+++ libjava/javax/swing/CellRendererPane.java	9 Jul 2005 22:10:02 -0000
@@ -50,11 +50,16 @@
 import javax.accessibility.AccessibleRole;
 
 /**
- * CellRendererPane
+ * The CellRendererPane's purpose is to paint the cells of JList, JTable and
+ * JTree. It intercepts the usual paint tree, so that we don't walk up and
+ * repaint everything.
+ *
  * @author	Andrew Selkirk
  * @version	1.0
  */
-public class CellRendererPane extends Container implements Accessible
+public class CellRendererPane
+  extends Container
+  implements Accessible
 {
   private static final long serialVersionUID = -7642183829532984273L;
 
@@ -83,116 +88,162 @@
     }
   }
 
-	/**
-	 * accessibleContext
-	 */
-	protected AccessibleContext accessibleContext = null;
-
-
-	//-------------------------------------------------------------
-	// Initialization ---------------------------------------------
-	//-------------------------------------------------------------
-
-	/**
-	 * Constructor CellRendererPane
-	 */
-	public CellRendererPane() {
-		// TODO
-	} // CellRendererPane()
-
-
-	//-------------------------------------------------------------
-	// Methods ----------------------------------------------------
-	//-------------------------------------------------------------
-
-	/**
-	 * writeObject
-	 * @param stream TODO
-	 * @exception IOException TODO
-	 */
-	private void writeObject(ObjectOutputStream stream) throws IOException {
-		// TODO
-	} // writeObject()
-
-	/**
-	 * update
-	 * @param graphics TODO
-	 */
-	public void update(Graphics graphics) {
-		// TODO
-	} // update()
-
-	/**
-	 * invalidate
-	 */
-	public void invalidate() {
-		// TODO
-	} // invalidate()
-
-	/**
-	 * paint
-	 * @param graphics TODO
-	 */
-	public void paint(Graphics graphics) {
-		// TODO
-	} // paint()
-
-	/**
-	 * addImpl
-	 * @param c TODO
-	 * @param constraints TODO
-	 * @param index TODO
-	 */
-	protected void addImpl(Component c, Object constraints, int index) {
-		// TODO
-	} // addImpl()
-
-	/**
-	 * paintComponent
-	 * @param graphics TODO
-	 * @param c TODO
-	 * @param p TODO
-	 * @param x TODO
-	 * @param y TODO
-	 * @param w TODO
-	 * @param h TODO
-	 * @param shouldValidate TODO
-	 */
-	public void paintComponent(Graphics graphics, Component c,
-			Container p, int x, int y, int w, int h, 
-			boolean shouldValidate) {
-		// TODO
-	} // paintComponent()
-
-	/**
-	 * paintComponent
-	 * @param graphics TODO
-	 * @param c TODO
-	 * @param p TODO
-	 * @param x TODO
-	 * @param y TODO
-	 * @param w TODO
-	 * @param h TODO
-	 */
-	public void paintComponent(Graphics graphics, Component c,
-			Container p, int x, int y, int w, int h) {
-		// TODO
-	} // paintComponent()
-
-	/**
-	 * paintComponent
-	 * @param graphics TODO
-	 * @param c TODO
-	 * @param p TODO
-	 * @param r TODO
-	 */
-	public void paintComponent(Graphics graphics, Component c,
-			Container p, Rectangle r) {
-		// TODO
-	} // paintComponent()
+  /**
+   * accessibleContext
+   */
+  protected AccessibleContext accessibleContext = null;
+
+
+  //-------------------------------------------------------------
+  // Initialization ---------------------------------------------
+  //-------------------------------------------------------------
+
+  /**
+   * Constructs a new CellRendererPane.
+   */
+  public CellRendererPane()
+  {
+  } // CellRendererPane()
+
+
+  //-------------------------------------------------------------
+  // Methods ----------------------------------------------------
+  //-------------------------------------------------------------
+
+  /**
+   * Should not be called.
+   *
+   * @param graphics not used here
+   */
+  public void update(Graphics graphics)
+  {
+  } // update()
+
+  /**
+   * Despite normal behaviour this does <em>not</em> cause the container
+   * to be invalidated. This prevents propagating up the paint tree.
+   */
+  public void invalidate()
+  {
+  } // invalidate()
+
+  /**
+   * Should not be called.
+   *
+   * @param graphics not used here
+   */
+  public void paint(Graphics graphics)
+  {
+  }
+
+  /**
+   * Overridden to check if a component is already a child of this Container.
+   * If it's already a child, nothing is done. Otherwise we pass this to
+   * <code>super.addImpl()</code>.
+   *
+   * @param c the component to add
+   * @param constraints not used here
+   * @param index not used here
+   */
+  protected void addImpl(Component c, Object constraints, int index)
+  {
+    if (!isAncestorOf(c))
+      {
+        super.addImpl(c, constraints, index);
+      }
+  } // addImpl()
+
+  /**
+   * Paints the specified component <code>c</code> on the {@link Graphics}
+   * context <code>graphics</code>. The Graphics context is tranlated to
+   * (x,y) and the components bounds are set to (w,h). If
+   * <code>shouldValidate</code>
+   * is set to true, then the component is validated before painting.
+   *
+   * @param graphics the graphics context to paint on
+   * @param c the component to be painted
+   * @param p the parent of the component
+   * @param x the X coordinate of the upper left corner where c should
+            be painted
+   * @param y the Y coordinate of the upper left corner where c should
+            be painted
+   * @param w the width of the components drawing area
+   * @param h the height of the components drawing area
+   * @param shouldValidate if <code>c</code> should be validated before
+   *        painting
+   */
+  public void paintComponent(Graphics graphics, Component c,
+                             Container p, int x, int y, int w, int h, 
+                             boolean shouldValidate)
+  {
+    // reparent c
+    addImpl(c, null, 0);
+
+    // translate to (x,y)
+    graphics.translate(x, y);
+
+    // set bounds of c
+    c.setBounds(0, 0, w, h);
+
+    // validate if necessary
+    if (shouldValidate)
+      {
+        c.validate();
+      }
+
+    // paint component
+    c.paint(graphics);
+
+    // untranslate g
+    graphics.translate(-x, -y);
+
+  } // paintComponent()
+
+  /**
+   * Paints the specified component <code>c</code> on the {@link Graphics}
+   * context <code>graphics</code>. The Graphics context is tranlated to (x,y)
+   * and the components bounds are set to (w,h). The component is <em>not</em>
+   * validated before painting.
+   *
+   * @param graphics the graphics context to paint on
+   * @param c the component to be painted
+   * @param p the parent of the component
+   * @param x the X coordinate of the upper left corner where c should
+            be painted
+   * @param y the Y coordinate of the upper left corner where c should
+            be painted
+   * @param w the width of the components drawing area
+   * @param h the height of the components drawing area
+   */
+  public void paintComponent(Graphics graphics, Component c,
+                             Container p, int x, int y, int w, int h) {
+
+    paintComponent(graphics, c, p, x, y, w, h, false);
+
+  } // paintComponent()
+
+  /**
+   * Paints the specified component <code>c</code> on the {@link Graphics}
+   * context <code>g</code>. The Graphics context is tranlated to (r.x,r.y) and
+   * the components bounds are set to (r.width,r.height).
+   * The component is <em>not</em>
+   * validated before painting.
+   *
+   * @param graphics the graphics context to paint on
+   * @param c the component to be painted
+   * @param p the component on which we paint
+   * @param r the bounding rectangle of c
+   */
+  public void paintComponent(Graphics graphics, Component c,
+                             Container p, Rectangle r)
+  {
+
+    paintComponent(graphics, c, p, r.x, r.y, r.width, r.height);
+
+  } // paintComponent()
 
   /**
-   * getAccessibleContext
+   * getAccessibleContext <em>TODO</em>
    * @return AccessibleContext
    */
   public AccessibleContext getAccessibleContext()
Index: libjava/javax/swing/DefaultButtonModel.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/DefaultButtonModel.java,v
retrieving revision 1.11
diff -u -r1.11 DefaultButtonModel.java
--- libjava/javax/swing/DefaultButtonModel.java	16 Feb 2005 20:02:19 -0000	1.11
+++ libjava/javax/swing/DefaultButtonModel.java	9 Jul 2005 22:10:02 -0000
@@ -116,7 +116,6 @@
    * this model.
    */
   protected EventListenerList listenerList = new EventListenerList();
-  ;
 
   /** The single ChangeEvent this model (re)uses to call its ChangeListeners. */
   protected ChangeEvent changeEvent = new ChangeEvent(this);
Index: libjava/javax/swing/DefaultComboBoxModel.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/DefaultComboBoxModel.java,v
retrieving revision 1.5
diff -u -r1.5 DefaultComboBoxModel.java
--- libjava/javax/swing/DefaultComboBoxModel.java	16 Feb 2005 20:02:21 -0000	1.5
+++ libjava/javax/swing/DefaultComboBoxModel.java	9 Jul 2005 22:10:02 -0000
@@ -108,7 +108,7 @@
   public void addElement(Object object)
   {
     list.add(object);
-    fireIntervalAdded(this, list.size(), list.size());
+    fireIntervalAdded(this, list.size() - 1, list.size());
   }
 
   /**
@@ -163,9 +163,9 @@
    */
   public void removeAllElements()
   {
-    int listSize = getSize();
     list.clear();
-    fireIntervalAdded(this, 0, listSize - 1);
+    int listSize = getSize();
+    fireIntervalAdded(this, 0, listSize);
   }
 
   /**
Index: libjava/javax/swing/DefaultListSelectionModel.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/DefaultListSelectionModel.java,v
retrieving revision 1.9
diff -u -r1.9 DefaultListSelectionModel.java
--- libjava/javax/swing/DefaultListSelectionModel.java	16 Feb 2005 20:02:22 -0000	1.9
+++ libjava/javax/swing/DefaultListSelectionModel.java	9 Jul 2005 22:10:02 -0000
@@ -516,6 +516,24 @@
 
   /**
    * Fires a {@link ListSelectionEvent} to all the listeners of type {@link
+   * ListSelectionListener} registered with this selection model to
+   * indicate that a series of adjustment has just ended.
+   *
+   * The values of {@link #getMinSelectionIndex} and
+   * {@link getMaxSelectionIndex} are used in the {@link ListSelectionEvent}
+   * that gets fired.
+   *
+   * @param isAdjusting <code>true</code> if this is the final change
+   *     in a series of adjustments, <code>false/code> otherwise
+   */
+  protected void fireValueChanged(boolean isAdjusting)
+  {
+    fireValueChanged(getMinSelectionIndex(), getMaxSelectionIndex(),
+                     isAdjusting);
+  }
+
+  /**
+   * Fires a {@link ListSelectionEvent} to all the listeners of type {@link
    * ListSelectionListener} registered with this selection model.
    *
    * @param firstIndex The low index of the changed range
Index: libjava/javax/swing/FocusManager.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/FocusManager.java,v
retrieving revision 1.3
diff -u -r1.3 FocusManager.java
--- libjava/javax/swing/FocusManager.java	30 Nov 2004 23:58:52 -0000	1.3
+++ libjava/javax/swing/FocusManager.java	9 Jul 2005 22:10:02 -0000
@@ -47,140 +47,123 @@
  * @author	Andrew Selkirk
  * @version	1.0
  */
-public abstract class FocusManager extends DefaultKeyboardFocusManager
+public abstract class FocusManager
+  extends DefaultKeyboardFocusManager
 {
 
-	//-------------------------------------------------------------
-	// Classes ----------------------------------------------------
-	//-------------------------------------------------------------
-
-	/**
-	 * DisabledFocusManager
-	 */
-	static class DisabledFocusManager extends FocusManager {
-
-		//-------------------------------------------------------------
-		// Initialization ---------------------------------------------
-		//-------------------------------------------------------------
-
-		/**
-		 * Constructor DisabledFocusManager
-		 */
-		DisabledFocusManager() {
-			// TODO
-		} // DisabledFocusManager()
-
-
-		//-------------------------------------------------------------
-		// Methods ----------------------------------------------------
-		//-------------------------------------------------------------
-
-		/**
-		 * processKeyEvent
-		 * @param component TODO
-		 * @param event TODO
-		 */
-		public void processKeyEvent(Component component, KeyEvent event) {
-			// TODO
-		} // processKeyEvent()
-
-		/**
-		 * focusNextComponent
-		 * @param component TODO
-		 */
-		public void focusNextComponent(Component component) {
-			// TODO
-		} // focusNextComponent()
-
-		/**
-		 * focusPreviousComponent
-		 * @param value0 TODO
-		 */
-		public void focusPreviousComponent(Component value0) {
-			// TODO
-		} // focusPreviousComponent()
-
-
-	} // DisabledFocusManager
-
-
-	//-------------------------------------------------------------
-	// Variables --------------------------------------------------
-	//-------------------------------------------------------------
-
-	/**
-	 * FOCUS_MANAGER_CLASS_PROPERTY
-	 */
-	public static final String FOCUS_MANAGER_CLASS_PROPERTY = "FocusManagerClassName";
-
-
-	//-------------------------------------------------------------
-	// Initialization ---------------------------------------------
-	//-------------------------------------------------------------
-
-	/**
-	 * Constructor FocusManager
-	 */
-	public FocusManager() {
-		// TODO
-	} // FocusManager()
-
-
-	//-------------------------------------------------------------
-	// Methods ----------------------------------------------------
-	//-------------------------------------------------------------
-
-	/**
-	 * getCurrentManager
-	 * @returns FocusManager
-	 */
-	public static FocusManager getCurrentManager() {
-		return null; // TODO
-	} // getCurrentManager()
-
-	/**
-	 * setCurrentManager
-	 * @param manager TODO
-	 */
-	public static void setCurrentManager(FocusManager manager) {
-		// TODO
-	} // setCurrentManager()
-
-	/**
-	 * disableSwingFocusManager
-	 * @deprecated 1.4
-	 */
-	public static void disableSwingFocusManager() {
-		// TODO
-	} // disableSwingFocusManager()
-
-	/**
-	 * isFocusManagerEnabled
-	 * @return boolean
-	 * @deprecated 1.4
-	 */
-	public static boolean isFocusManagerEnabled() {
-		return false; // TODO
-	} // isFocusManagerEnabled()
-
-	/**
-	 * processKeyEvent
-	 * @param component TODO
-	 * @param event TODO
-	 */
-	public abstract void processKeyEvent(Component component, KeyEvent event);
-
-	/**
-	 * focusNextComponent
-	 * @param component TODO
-	 */
-	public abstract void focusNextComponent(Component component);
-
-	/**
-	 * focusPreviousComponent
-	 * @param component TODO
-	 */
-	public abstract void focusPreviousComponent(Component component);
+  /**
+   * DisabledFocusManager
+   */
+  static class DisabledFocusManager
+    extends FocusManager
+  {
+
+    /**
+     * Constructor DisabledFocusManager
+     */
+    DisabledFocusManager()
+    {
+      // TODO
+    }
+
+    /**
+     * processKeyEvent
+     * @param component TODO
+     * @param event TODO
+     */
+    public void processKeyEvent(Component component, KeyEvent event)
+    {
+      // TODO
+    }
+
+    /**
+     * focusNextComponent
+     * @param component TODO
+     */
+    public void focusNextComponent(Component component)
+    {
+      // TODO
+    }
+
+    /**
+     * focusPreviousComponent
+     * @param value0 TODO
+     */
+    public void focusPreviousComponent(Component value0)
+    {
+      // TODO
+    }
+  }
+
+
+  /**
+   * FOCUS_MANAGER_CLASS_PROPERTY
+   */
+  public static final String FOCUS_MANAGER_CLASS_PROPERTY =
+    "FocusManagerClassName";
+
+  /**
+   * Constructor FocusManager
+   */
+  public FocusManager()
+  {
+    // TODO
+  }
+
+  /**
+   * getCurrentManager
+   * @returns FocusManager
+   */
+  public static FocusManager getCurrentManager()
+  {
+    return null; // TODO
+  }
+
+  /**
+   * setCurrentManager
+   * @param manager TODO
+   */
+  public static void setCurrentManager(FocusManager manager)
+  {
+    // TODO
+  }
+
+  /**
+   * disableSwingFocusManager
+   * @deprecated 1.4
+   */
+  public static void disableSwingFocusManager()
+  {
+    // TODO
+  }
+
+  /**
+   * isFocusManagerEnabled
+   * @return boolean
+   * @deprecated 1.4
+   */
+  public static boolean isFocusManagerEnabled()
+  {
+    return false; // TODO
+  }
+
+  /**
+   * processKeyEvent
+   * @param component TODO
+   * @param event TODO
+   */
+  public abstract void processKeyEvent(Component component, KeyEvent event);
+
+  /**
+   * focusNextComponent
+   * @param component TODO
+   */
+  public abstract void focusNextComponent(Component component);
+
+  /**
+   * focusPreviousComponent
+   * @param component TODO
+   */
+  public abstract void focusPreviousComponent(Component component);
 
-
-} // FocusManager
+}
Index: libjava/javax/swing/ImageIcon.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/ImageIcon.java,v
retrieving revision 1.7
diff -u -r1.7 ImageIcon.java
--- libjava/javax/swing/ImageIcon.java	16 Feb 2005 20:02:23 -0000	1.7
+++ libjava/javax/swing/ImageIcon.java	9 Jul 2005 22:10:02 -0000
@@ -1,5 +1,5 @@
 /* ImageIcon.java --
-   Copyright (C) 2002, 2004  Free Software Foundation, Inc.
+   Copyright (C) 2002, 2004, 2005  Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -40,20 +40,185 @@
 import java.awt.Component;
 import java.awt.Graphics;
 import java.awt.Image;
+import java.awt.MediaTracker;
 import java.awt.Toolkit;
 import java.awt.image.ImageObserver;
 import java.io.Serializable;
 import java.net.URL;
+import java.util.Locale;
 
+import javax.accessibility.Accessible;
+import javax.accessibility.AccessibleContext;
+import javax.accessibility.AccessibleIcon;
+import javax.accessibility.AccessibleRole;
+import javax.accessibility.AccessibleStateSet;
 
 public class ImageIcon
-  implements Icon, Serializable
+  implements Icon, Serializable, Accessible
 {
+  /**
+   * Accessibility support for ImageIcon.
+   */
+  protected class AccessibleImageIcon
+    extends AccessibleContext
+    implements AccessibleIcon, Serializable
+  {
+    private static final long serialVersionUID = 2113430526551336564L;
+
+    /**
+     * Creates a new instance of AccessibleImageIcon.
+     */
+    protected AccessibleImageIcon()
+    {
+    }
+
+    /**
+     * Returns the AccessibleRole of ImageIcon, which is
+     * {@link AccessibleRole#ICON}.
+     *
+     * @return {@link AccessibleRole#ICON}
+     */
+    public AccessibleRole getAccessibleRole()
+    {
+      return AccessibleRole.ICON;
+    }
+
+    /**
+     * Returns the accessible state of this ImageIcon.
+     *
+     * @return the accessible state of this ImageIcon
+     */
+    public AccessibleStateSet getAccessibleStateSet()
+    {
+      // TODO: which state information from ImageIcon is returned here??
+      return new AccessibleStateSet();
+    }
+
+    /**
+     * Returns the accessible parent of this object, which is <code>null</code>
+     * in this case, because ImageIcons have no parent.
+     *
+     * @return <code>null</code>, because ImageIcons have no parent
+     */
+    public Accessible getAccessibleParent()
+    {
+      // TODO: ImageIcons have no parent, have they ??
+      return null;
+    }
+
+    /**
+     * Returns the index of this object in its accessible parent, which is
+     * -1 here, because ImageIcons have no accessible parent.
+     *
+     * @return -1 because ImageIcons have no parent
+     */
+    public int getAccessibleIndexInParent()
+    {
+      // TODO: do ImageIcons have parents??
+      return -1;
+    }
+
+    /**
+     * Returns the number of accessible children of this component,
+     * which is 0, because ImageIcons have no children.
+     *
+     * @return 0 because ImageIcons have no children
+     */
+    public int getAccessibleChildrenCount()
+    {
+      return 0;
+    }
+
+    /**
+     * Returns the accessible child at index <code>i</code>, which is
+     * <code>null</code> in this case because ImageIcons have no children.
+     *
+     * @param i the index of the child to be fetched
+     *
+     * @return <code>null</code> because ImageIcons have no children
+     */
+    public Accessible getAccessibleChild(int i)
+    {
+      return null;
+    }
+
+    /**
+     * Returns the locale of this object. This returns the default locale
+     * that is set for the current VM.
+     *
+     * @return the locale of this object
+     */
+    public Locale getLocale()
+    {
+      return Locale.getDefault();
+    }
+
+    /**
+     * Returns the accessible Icon description. This returns the
+     * actual 'description' property of the ImageIcon.
+     *
+     * @return the accessible Icon description
+     */
+    public String getAccessibleIconDescription()
+    {
+      return getDescription();
+    }
+
+    /**
+     * Sets the accessible Icon description. This sets the
+     * actual 'description' property of the ImageIcon.
+     *
+     * @param newDescr the description to be set
+     */
+    public void setAccessibleIconDescription(String newDescr)
+    {
+      setDescription(newDescr);
+    }
+
+    /**
+     * Returns the icon height. This returns the iconHeight property of
+     * the underlying Icon.
+     *
+     * @return the icon height
+     */
+    public int getAccessibleIconHeight()
+    {
+      return getIconHeight();
+    }
+    
+    /**
+     * Returns the icon width. This returns the iconWidth property of
+     * the underlying Icon.
+     *
+     * @return the icon width
+     */
+    public int getAccessibleIconWidth()
+    {
+      return getIconWidth();
+    }
+  } // AccessibleIcon
+
   private static final long serialVersionUID = 532615968316031794L;
+
+  /** A dummy Component that is used in the MediaTracker. */
+  protected static Component component = new Component(){};
+
+  /** The MediaTracker used to monitor the loading of images. */
+  protected static MediaTracker tracker = new MediaTracker(component);
+
+  /** The ID that is used in the tracker. */
+  private static int id;
+
   Image image;
   String description;
   ImageObserver observer;
 
+  /** The image loading status. */
+  private int loadStatus;
+
+  /** The AccessibleContext of this ImageIcon. */
+  private AccessibleContext accessibleContext;
+
   public ImageIcon()
   {
   }
@@ -95,8 +260,8 @@
 
   public ImageIcon(Image image, String description)
   {
-    this.image = Toolkit.getDefaultToolkit().createImage(image.getSource());
-    this.description = description;
+    setImage(image);
+    setDescription(description);
   }
     
   public ImageObserver getImageObserver()
@@ -116,7 +281,8 @@
 
   public void setImage(Image image)
   {
-    this.image = Toolkit.getDefaultToolkit().createImage(image.getSource());
+    loadImage(image);
+    this.image = image;
   }
 
   public String getDescription()
@@ -143,4 +309,53 @@
   {
     g.drawImage(image, x, y, observer != null ? observer : c);
   }
+
+  /**
+   * Loads the image and blocks until the loading operation is finished.
+   *
+   * @param image the image to be loaded
+   */
+  protected void loadImage(Image image)
+  {
+    try
+      {
+	tracker.addImage(image, id);
+	id++;
+	tracker.waitForID(id - 1);
+      }
+    catch (InterruptedException ex)
+      {
+	; // ignore this for now
+      }
+    finally
+      {
+	loadStatus = tracker.statusID(id - 1, false);
+      }
+  }
+
+  /**
+   * Returns the load status of the icon image.
+   *
+   * @return the load status of the icon image
+   *
+   * @see {@link MediaTracker.COMPLETE}
+   * @see {@link MediaTracker.ABORTED}
+   * @see {@link MediaTracker.ERRORED}
+   */
+  public int getImageLoadStatus()
+  {
+    return loadStatus;
+  }
+
+  /**
+   * Returns the AccessibleContext for this ImageIcon.
+   *
+   * @return the AccessibleContext for this ImageIcon
+   */
+  public AccessibleContext getAccessibleContext()
+  {
+    if (accessibleContext == null)
+      accessibleContext = new AccessibleImageIcon();
+    return accessibleContext;
+  }
 }
Index: libjava/javax/swing/JButton.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JButton.java,v
retrieving revision 1.8
diff -u -r1.8 JButton.java
--- libjava/javax/swing/JButton.java	16 Feb 2005 20:02:23 -0000	1.8
+++ libjava/javax/swing/JButton.java	9 Jul 2005 22:10:02 -0000
@@ -78,6 +78,8 @@
   public JButton(String text, Icon icon)
   {
     super(text, icon);
+    setModel(new DefaultButtonModel());
+    setActionCommand(text);
   }
 
   public Object[] getSelectedObjects()
Index: libjava/javax/swing/JColorChooser.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JColorChooser.java,v
retrieving revision 1.5
diff -u -r1.5 JColorChooser.java
--- libjava/javax/swing/JColorChooser.java	30 Nov 2004 23:58:52 -0000	1.5
+++ libjava/javax/swing/JColorChooser.java	9 Jul 2005 22:10:02 -0000
@@ -229,11 +229,11 @@
 
   /**
    * This is a helper method to make the given JDialog block until it is
-   * hidden.
+   * hidden.  This is package-private to avoid an accessor method.
    *
    * @param dialog The JDialog to block.
    */
-  private static void makeModal(JDialog dialog)
+  static void makeModal(JDialog dialog)
   {
     try
       {
Index: libjava/javax/swing/JComboBox.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JComboBox.java,v
retrieving revision 1.10
diff -u -r1.10 JComboBox.java
--- libjava/javax/swing/JComboBox.java	16 Feb 2005 20:02:24 -0000	1.10
+++ libjava/javax/swing/JComboBox.java	9 Jul 2005 22:10:03 -0000
@@ -185,6 +185,9 @@
   public JComboBox(Object[] itemArray)
   {
     this(new DefaultComboBoxModel(itemArray));
+    
+    if (itemArray.length > 0) 
+      setSelectedIndex(0);
   }
 
   /**
@@ -195,6 +198,9 @@
   public JComboBox(Vector itemVector)
   {
     this(new DefaultComboBoxModel(itemVector));
+
+    if (itemVector.size() > 0)
+      setSelectedIndex(0);
   }
 
   /**
Index: libjava/javax/swing/JComponent.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JComponent.java,v
retrieving revision 1.19
diff -u -r1.19 JComponent.java
--- libjava/javax/swing/JComponent.java	17 Feb 2005 07:48:51 -0000	1.19
+++ libjava/javax/swing/JComponent.java	9 Jul 2005 22:10:04 -0000
@@ -73,10 +73,12 @@
 
 import javax.accessibility.Accessible;
 import javax.accessibility.AccessibleContext;
+import javax.accessibility.AccessibleExtendedComponent;
 import javax.accessibility.AccessibleKeyBinding;
 import javax.accessibility.AccessibleRole;
 import javax.accessibility.AccessibleStateSet;
 import javax.swing.border.Border;
+import javax.swing.event.AncestorEvent;
 import javax.swing.event.AncestorListener;
 import javax.swing.event.EventListenerList;
 import javax.swing.event.SwingPropertyChangeSupport;
@@ -103,6 +105,7 @@
 
   public abstract class AccessibleJComponent 
     extends AccessibleAWTContainer
+    implements AccessibleExtendedComponent
   {
     protected class AccessibleFocusHandler 
       implements FocusListener
@@ -175,7 +178,7 @@
    * @see javax.swing.OverlayLayout
    * @see javax.swing.BoxLayout
    */
-  float alignmentX = 0.0f;
+  float alignmentX = 0.5f;
 
   /**
    * A value between 0.0 and 1.0 indicating the preferred vertical
@@ -190,7 +193,7 @@
    * @see javax.swing.OverlayLayout
    * @see javax.swing.BoxLayout
    */
-  float alignmentY = 0.0f;
+  float alignmentY = 0.5f;
 
   /** 
    * The border painted around this component.
@@ -399,6 +402,7 @@
     setDropTarget(new DropTarget());
     defaultLocale = Locale.getDefault();
     debugGraphicsOptions = DebugGraphics.NONE_OPTION;
+    setRequestFocusEnabled(true);
   }
 
   /**
@@ -1137,9 +1141,9 @@
    */
   public JToolTip createToolTip()
   {
-	JToolTip toolTip = new JToolTip();
-	toolTip.setComponent(this);
-	toolTip.setTipText(toolTipText);
+        JToolTip toolTip = new JToolTip();
+        toolTip.setComponent(this);
+        toolTip.setTipText(toolTipText);
     
     return toolTip;
   }
@@ -1173,14 +1177,14 @@
       toolTipText = null;
       return;
     }
-		
+                
     // XXX: The tip text doesn't get updated unless you set it to null
     // and then to something not-null. This is consistent with the behaviour
     // of Sun's ToolTipManager.
-			
+                        
     String oldText = toolTipText;
     toolTipText = text;
-		
+                
     if (oldText == null)
       ToolTipManager.sharedInstance().registerComponent(this);
   }
@@ -1428,7 +1432,7 @@
             g2 = doubleBuffer.getGraphics();
             g2.setClip(g.getClipBounds());
           }
-	  
+          
         g2 = getComponentGraphics(g2);
         paintComponent(g2);
         paintBorder(g2);
@@ -1784,6 +1788,8 @@
    */
   protected void processKeyEvent(KeyEvent e)
   {
+    // let the AWT event processing send KeyEvents to registered listeners
+    super.processKeyEvent(e);
     processComponentKeyEvent(e);
 
     // FIXME: this needs to be elaborated significantly, to do all the
@@ -2057,6 +2063,16 @@
     firePropertyChange("minimumSize", oldMinimumSize, minimumSize);
     revalidate();
     repaint();
+
+    // adjust preferred and maximum size accordingly
+    Dimension prefSize = getPreferredSize();
+    prefSize.width = Math.max(prefSize.width, minimumSize.width);
+    prefSize.height = Math.max(prefSize.height, minimumSize.height);
+    setPreferredSize(prefSize);
+    Dimension maxSize = getMaximumSize();
+    maxSize.width = Math.max(maxSize.width, minimumSize.width);
+    maxSize.height = Math.max(maxSize.height, minimumSize.height);
+    setMaximumSize(maxSize);
   }
 
   /**
@@ -2273,7 +2289,425 @@
 
     this.verifyInputWhenFocusTarget = verifyInputWhenFocusTarget;
     firePropertyChange("verifyInputWhenFocusTarget",
-		       ! verifyInputWhenFocusTarget,
-		       verifyInputWhenFocusTarget);
+                       ! verifyInputWhenFocusTarget,
+                       verifyInputWhenFocusTarget);
+  }
+
+  /**
+   * Requests that this component gets the input focus if the
+   * requestFocusEnabled property is set to <code>true</code>.
+   * This also means that this component's top-level window becomes
+   * the focused window, if that is not already the case.
+   *
+   * The preconditions that have to be met to become a focus owner is that
+   * the component must be displayable, visible and focusable.
+   *
+   * Note that this signals only a request for becoming focused. There are
+   * situations in which it is not possible to get the focus. So developers
+   * should not assume that the component has the focus until it receives
+   * a {@link java.awt.event.FocusEvent} with a value of
+   * {@link java.awt.event.FocusEvent.FOCUS_GAINED}.
+   *
+   * @see {@link Component#requestFocus()}
+   */
+  public void requestFocus()
+  {
+    if (isRequestFocusEnabled())
+      super.requestFocus();
+  }
+
+  /**
+   * This method is overridden to make it public so that it can be used
+   * by look and feel implementations.
+   *
+   * You should not use this method directly. Instead you are strongly
+   * encouraged to call {@link #requestFocus} or {@link #requestFocusInWindow}
+   * instead.
+   *
+   * @param temporary if the focus change is temporary
+   *
+   * @return <code>false</code> if the focus change request will definitly
+   *     fail, <code>true</code> if it will likely succeed
+   *
+   * @see {@link Component#requestFocus(boolean)}
+   *
+   * @since 1.4
+   */
+  public boolean requestFocus(boolean temporary)
+  {
+    return super.requestFocus(temporary);
+  }
+
+  /**
+   * Requests that this component gets the input focus if the top level
+   * window that contains this component has the focus and the
+   * requestFocusEnabled property is set to <code>true</code>.
+   *
+   * The preconditions that have to be met to become a focus owner is that
+   * the component must be displayable, visible and focusable.
+   *
+   * Note that this signals only a request for becoming focused. There are
+   * situations in which it is not possible to get the focus. So developers
+   * should not assume that the component has the focus until it receives
+   * a {@link java.awt.event.FocusEvent} with a value of
+   * {@link java.awt.event.FocusEvent.FOCUS_GAINED}.
+   *
+   * @return <code>false</code> if the focus change request will definitly
+   *     fail, <code>true</code> if it will likely succeed
+   *
+   * @see {@link Component#requestFocusInWindow()}
+   */
+  public boolean requestFocusInWindow()
+  {
+    if (isRequestFocusEnabled())
+      return super.requestFocusInWindow();
+    else
+      return false;
+  }
+
+  /**
+   * This method is overridden to make it public so that it can be used
+   * by look and feel implementations.
+   *
+   * You should not use this method directly. Instead you are strongly
+   * encouraged to call {@link #requestFocus} or {@link #requestFocusInWindow}
+   * instead.
+   *
+   * @param temporary if the focus change is temporary
+   *
+   * @return <code>false</code> if the focus change request will definitly
+   *     fail, <code>true</code> if it will likely succeed
+   *
+   * @see {@link Component#requestFocus(boolean)}
+   *
+   * @since 1.4
+   */
+  public boolean requestFocusInWindow(boolean temporary)
+  {
+    return super.requestFocusInWindow(temporary);
+  }
+
+  /**
+   * Receives notification if this component is added to a parent component.
+   *
+   * Notification is sent to all registered AncestorListeners about the
+   * new parent.
+   *
+   * This method sets up ActionListeners for all registered KeyStrokes of
+   * this component in the chain of parent components.
+   *
+   * A PropertyChange event is fired to indicate that the ancestor property
+   * has changed.
+   *
+   * This method is used internally and should not be used in applications.
+   */
+  public void addNotify()
+  {
+    super.addNotify();
+
+    // let parents inherit the keybord mapping
+    InputMap input = getInputMap();
+    ActionMap actions = getActionMap();
+
+    Container parent = getParent();
+    while ((parent != null) && (parent instanceof JComponent))
+      {
+        JComponent jParent = (JComponent) parent;
+        InputMap parentInput = jParent.getInputMap();
+        ActionMap parentAction = jParent.getActionMap();
+
+        KeyStroke[] ikeys = input.keys();
+        for (int i = 0; i < ikeys.length; i++)
+          {
+            Object o = input.get(ikeys[i]);
+            parentInput.put(ikeys[i], o);
+          }
+
+        Object[] akeys = actions.keys();
+        for (int i = 0; i < akeys.length; i++)
+          {
+            Action a = actions.get(akeys[i]);
+            parentAction.put(akeys[i], a);
+          }
+
+        parent = jParent.getParent();
+      }
+
+    // notify ancestor listeners
+    AncestorListener[] ls = getAncestorListeners();
+    AncestorEvent ev = new AncestorEvent(this, AncestorEvent.ANCESTOR_ADDED,
+                                         this, parent);
+    for (int i = 0; i < ls.length; i++)
+      {
+        ls[i].ancestorAdded(ev);
+      }
+
+    // fire property change event for 'ancestor'
+    firePropertyChange("ancestor", null, parent);
+  }
+
+  /**
+   * Receives notification that this component no longer has a parent.
+   *
+   * This method sends an AncestorEvent to all registered AncestorListeners,
+   * notifying them that the parent is gone.
+   *
+   * The keybord actions of this component are removed from the parent and
+   * its ancestors.
+   *
+   * A PropertyChangeEvent is fired to indicate that the 'ancestor' property
+   * has changed.
+   *
+   * This method is called before the component is actually removed from
+   * its parent, so the parent is still visible through {@link #getParent}.
+   */
+  public void removeNotify()
+  {
+    super.removeNotify();
+
+    // let parents inherit the keybord mapping
+    InputMap input = getInputMap();
+    ActionMap actions = getActionMap();
+
+    Container parent = getParent();
+    while ((parent != null) && (parent instanceof JComponent))
+      {
+        JComponent jParent = (JComponent) parent;
+        InputMap parentInput = jParent.getInputMap();
+        ActionMap parentAction = jParent.getActionMap();
+
+        KeyStroke[] ikeys = input.allKeys();
+        for (int i = 0; i < ikeys.length; i++)
+          {
+            parentInput.remove(ikeys[i]);
+          }
+
+        Object[] akeys = actions.allKeys();
+        for (int i = 0; i < akeys.length; i++)
+          {
+            parentAction.remove(akeys[i]);
+          }
+
+        parent = jParent.getParent();
+      }
+
+    // notify ancestor listeners
+    AncestorListener[] ls = getAncestorListeners();
+    AncestorEvent ev = new AncestorEvent(this, AncestorEvent.ANCESTOR_ADDED,
+                                         this, parent);
+    for (int i = 0; i < ls.length; i++)
+      {
+        ls[i].ancestorAdded(ev);
+      }
+
+    // fire property change event for 'ancestor'
+    firePropertyChange("ancestor", parent, null);
+  }
+
+  /**
+   * Returns <code>true</code> if the coordinates (x, y) lie within
+   * the bounds of this component and <code>false</code> otherwise.
+   * x and y are relative to the coordinate space of the component.
+   *
+   * @param x the X coordinate of the point to check
+   * @param y the Y coordinate of the point to check
+   *
+   * @return <code>true</code> if the specified point lies within the bounds
+   *     of this component, <code>false</code> otherwise
+   */
+  public boolean contains(int x, int y)
+  {
+    if (ui == null)
+      return super.contains(x, y);
+    else
+      return ui.contains(this, x, y);
+  }
+
+  /**
+   * Disables this component.
+   *
+   * @deprecated replaced by {@link #setEnabled(boolean)}
+   */
+  public void disable()
+  {
+    super.disable();
+  }
+
+  /**
+   * Enables this component.
+   *
+   * @deprecated replaced by {@link #setEnabled(boolean)}
+   */
+  public void enable()
+  {
+    super.enable();
+  }
+
+  /**
+   * Returns the Graphics context for this component. This can be used
+   * to draw on a component.
+   *
+   * @return the Graphics context for this component
+   */
+  public Graphics getGraphics()
+  {
+    return super.getGraphics();
+  }
+
+  /**
+   * Returns the X coordinate of the upper left corner of this component.
+   * Prefer this method over {@link #getBounds} or {@link #getLocation}
+   * because it does not cause any heap allocation.
+   *
+   * @return the X coordinate of the upper left corner of the component
+   */
+  public int getX()
+  {
+    return super.getX();
+  }
+
+  /**
+   * Returns the Y coordinate of the upper left corner of this component.
+   * Prefer this method over {@link #getBounds} or {@link #getLocation}
+   * because it does not cause any heap allocation.
+   *
+   * @return the Y coordinate of the upper left corner of the component
+   */
+  public int getY()
+  {
+    return super.getY();
+  }
+
+  /**
+   * Returns the height of this component. Prefer this method over
+   * {@link #getBounds} or {@link #getSize} because it does not cause
+   * any heap allocation.
+   *
+   * @return the height of the component
+   */
+  public int getHeight()
+  {
+    return super.getHeight();
+  }
+
+  /**
+   * Returns the width of this component. Prefer this method over
+   * {@link #getBounds} or {@link #getSize} because it does not cause
+   * any heap allocation.
+   *
+   * @return the width of the component
+   */
+  public int getWidth()
+  {
+    return super.getWidth();
+  }
+
+  /**
+   * Return all <code>PropertyChangeListener</code> objects registered.
+   *
+   * @return The set of <code>PropertyChangeListener</code> objects
+   */
+  public PropertyChangeListener[] getPropertyChangeListeners()
+  {
+    if (changeSupport == null)
+      return new PropertyChangeListener[0];
+    else
+      return changeSupport.getPropertyChangeListeners();
+  }
+
+  /**
+   * Prints this component to the given Graphics context. A call to this
+   * method results in calls to the methods {@link #printComponent},
+   * {@link #printBorder} and {@link printChildren} in this order.
+   *
+   * Double buffering is temporarily turned off so the painting goes directly
+   * to the supplied Graphics context.
+   *
+   * @param g the Graphics context to print onto
+   */
+  public void print(Graphics g)
+  {
+    boolean doubleBufferState = isDoubleBuffered();
+    setDoubleBuffered(false);
+    printComponent(g);
+    printBorder(g);
+    printChildren(g);
+    setDoubleBuffered(doubleBufferState);
+  }
+
+  /**
+   * Prints this component to the given Graphics context. This invokes
+   * {@link #print}.
+   *
+   * @param g the Graphics context to print onto
+   */
+  public void printAll(Graphics g)
+  {
+    print(g);
+  }
+
+  /**
+   * Prints this component to the specified Graphics context. The default
+   * behaviour is to invoke {@link #paintComponent}. Override this
+   * if you want special behaviour for printing.
+   *
+   * @param g the Graphics context to print onto
+   *
+   * @since 1.3
+   */
+  public void printComponent(Graphics g)
+  {
+    paintComponent(g);
+  }
+
+  /**
+   * Print this component's children to the specified Graphics context.
+   * The default behaviour is to invoke {@link #paintChildren}. Override this
+   * if you want special behaviour for printing.
+   *
+   * @param g the Graphics context to print onto
+   *
+   * @since 1.3
+   */
+  public void printChildren(Graphics g)
+  {
+    paintChildren(g);
+  }
+
+  /**
+   * Print this component's border to the specified Graphics context.
+   * The default behaviour is to invoke {@link #paintBorder}. Override this
+   * if you want special behaviour for printing.
+   *
+   * @param g the Graphics context to print onto
+   *
+   * @since 1.3
+   */
+  public void printBorder(Graphics g)
+  {
+    paintBorder(g);
+  }
+
+  /**
+   * Processes mouse motion event, like dragging and moving.
+   *
+   * @param ev the MouseEvent describing the mouse motion
+   */
+  protected void processMouseMotionEvent(MouseEvent ev)
+  {
+    super.processMouseMotionEvent(ev);
+  }
+
+  /**
+   * Moves and resizes the component.
+   *
+   * @param x the new horizontal location
+   * @param y the new vertial location
+   * @param w the new width
+   * @param h the new height
+   */
+  public void reshape(int x, int y, int w, int h)
+  {
+    super.reshape(x, y, w, h);
   }
 }
Index: libjava/javax/swing/JDialog.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JDialog.java,v
retrieving revision 1.7
diff -u -r1.7 JDialog.java
--- libjava/javax/swing/JDialog.java	30 Nov 2004 23:58:53 -0000	1.7
+++ libjava/javax/swing/JDialog.java	9 Jul 2005 22:10:04 -0000
@@ -525,7 +525,9 @@
 	operation == DISPOSE_ON_CLOSE)
       close_action = operation;
     else
-      throw new IllegalArgumentException("Default close operation must be one of DO_NOTHING_ON_CLOSE, HIDE_ON_CLOSE, or DISPOSE_ON_CLOSE");
+      // accept illegal value and set the property to the default value,
+      // that's what the reference implementation does
+      close_action = DO_NOTHING_ON_CLOSE;
   }
 
   /**
Index: libjava/javax/swing/JEditorPane.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JEditorPane.java,v
retrieving revision 1.9
diff -u -r1.9 JEditorPane.java
--- libjava/javax/swing/JEditorPane.java	16 Feb 2005 20:02:24 -0000	1.9
+++ libjava/javax/swing/JEditorPane.java	9 Jul 2005 22:10:04 -0000
@@ -61,7 +61,6 @@
   private EditorKit editorKit;
   
   boolean focus_root;
-  boolean manages_focus;
 
   public JEditorPane()
   {
@@ -177,32 +176,12 @@
     return focus_root;
   }
 
-  public boolean isManagingFocus()
-  {
-    return manages_focus;
-  }
-
   protected String paramString()
   {
     return "JEditorPane";
   }
 
   /**
-   * Overridden to handle processing of tab/shift tab. 
-   */
-  protected void processComponentKeyEvent(KeyEvent e)
-  {
-  }
-
-  /**
-   * Make sure that TAB and Shift-TAB events get consumed,
-   * so that awt doesn't attempt focus traversal.  
-   */
-  protected void processKeyEvent(KeyEvent e)
-  {
-  }
-
-  /**
    * This method initializes from a stream. 
    */
   public void read(InputStream in, Object desc)
Index: libjava/javax/swing/JFileChooser.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JFileChooser.java,v
retrieving revision 1.6
diff -u -r1.6 JFileChooser.java
--- libjava/javax/swing/JFileChooser.java	16 Feb 2005 20:02:24 -0000	1.6
+++ libjava/javax/swing/JFileChooser.java	9 Jul 2005 22:10:04 -0000
@@ -1,5 +1,5 @@
 /* JFileChooser.java --
-   Copyright (C) 2002, 2004  Free Software Foundation, Inc.
+   Copyright (C) 2002, 2004, 2005  Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -35,925 +35,1152 @@
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
 
-
 package javax.swing;
 
 import java.awt.Component;
+import java.awt.Frame;
+import java.awt.HeadlessException;
+import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 import java.io.File;
-import java.io.IOException;
-import java.io.ObjectOutputStream;
-import java.util.Vector;
-
+import java.util.ArrayList;
 import javax.accessibility.Accessible;
 import javax.accessibility.AccessibleContext;
-import javax.accessibility.AccessibleRole;
+import javax.swing.JDialog;
 import javax.swing.filechooser.FileFilter;
 import javax.swing.filechooser.FileSystemView;
 import javax.swing.filechooser.FileView;
 import javax.swing.plaf.FileChooserUI;
 
+
 /**
- * JFileChooser
- * @author	Andrew Selkirk
- * @version	1.0
+ * DOCUMENT ME!
  */
-public class JFileChooser extends JComponent implements Accessible {
-
+public class JFileChooser extends JComponent implements Accessible
+{
   private static final long serialVersionUID = 3162921138695327837L;
 
+  /** DOCUMENT ME! */
+  public static final int OPEN_DIALOG = 0;
+
+  /** DOCUMENT ME! */
+  public static final int SAVE_DIALOG = 1;
+
+  /** DOCUMENT ME! */
+  public static final int CUSTOM_DIALOG = 2;
+
+  /** DOCUMENT ME! */
+  public static final int CANCEL_OPTION = 1;
+
+  /** DOCUMENT ME! */
+  public static final int APPROVE_OPTION = 0;
+
+  /** DOCUMENT ME! */
+  public static final int ERROR_OPTION = -1;
+
+  /** DOCUMENT ME! */
+  public static final int FILES_ONLY = 0;
+
+  /** DOCUMENT ME! */
+  public static final int DIRECTORIES_ONLY = 1;
+
+  /** DOCUMENT ME! */
+  public static final int FILES_AND_DIRECTORIES = 2;
+
+  /** DOCUMENT ME! */
+  public static final String CANCEL_SELECTION = "CancelSelection";
+
+  /** DOCUMENT ME! */
+  public static final String APPROVE_SELECTION = "ApproveSelection";
+
+  /** DOCUMENT ME! */
+  public static final String APPROVE_BUTTON_TEXT_CHANGED_PROPERTY =
+    "ApproveButtonTextChangedProperty";
+
+  /** DOCUMENT ME! */
+  public static final String APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY =
+    "ApproveButtonToolTipTextChangedProperty";
+
+  /** DOCUMENT ME! */
+  public static final String APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY =
+    "ApproveButtonMnemonicChangedProperty";
+
+  /** DOCUMENT ME! */
+  public static final String CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY =
+    "ControlButtonsAreShownChangedProperty";
+
+  /** DOCUMENT ME! */
+  public static final String DIRECTORY_CHANGED_PROPERTY = "directoryChanged";
+
+  /** DOCUMENT ME! */
+  public static final String SELECTED_FILE_CHANGED_PROPERTY =
+    "SelectedFileChangedProperty";
+
+  /** DOCUMENT ME! */
+  public static final String SELECTED_FILES_CHANGED_PROPERTY =
+    "SelectedFilesChangedProperty";
+
+  /** DOCUMENT ME! */
+  public static final String MULTI_SELECTION_ENABLED_CHANGED_PROPERTY =
+    "MultiSelectionEnabledChangedProperty";
+
+  /** DOCUMENT ME! */
+  public static final String FILE_SYSTEM_VIEW_CHANGED_PROPERTY =
+    "FileSystemViewChanged";
+
+  /** DOCUMENT ME! */
+  public static final String FILE_VIEW_CHANGED_PROPERTY = "fileViewChanged";
+
+  /** DOCUMENT ME! */
+  public static final String FILE_HIDING_CHANGED_PROPERTY =
+    "FileHidingChanged";
+
+  /** DOCUMENT ME! */
+  public static final String FILE_FILTER_CHANGED_PROPERTY =
+    "fileFilterChanged";
+
+  /** DOCUMENT ME! */
+  public static final String FILE_SELECTION_MODE_CHANGED_PROPERTY =
+    "fileSelectionChanged";
+
+  /** DOCUMENT ME! */
+  public static final String ACCESSORY_CHANGED_PROPERTY =
+    "AccessoryChangedProperty";
+
+  /** DOCUMENT ME! */
+  public static final String ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY =
+    "acceptAllFileFilterUsedChanged";
+
+  /** DOCUMENT ME! */
+  public static final String DIALOG_TITLE_CHANGED_PROPERTY =
+    "DialogTitleChangedProperty";
+
+  /** DOCUMENT ME! */
+  public static final String DIALOG_TYPE_CHANGED_PROPERTY =
+    "DialogTypeChangedProperty";
+
+  /** DOCUMENT ME! */
+  public static final String CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY =
+    "ChoosableFileFilterChangedProperty";
+
+  /** DOCUMENT ME! */
+  protected AccessibleContext accessibleContext;
+
+  /** DOCUMENT ME! */
+  private FileSystemView fsv;
+
+  /** DOCUMENT ME! */
+  private JComponent accessory;
+
+  /** DOCUMENT ME! */
+  private int approveButtonMnemonic = 0;
+
+  /** DOCUMENT ME! */
+  private String approveButtonText;
+
+  /** DOCUMENT ME! */
+  private String approveButtonToolTipText;
+
+  /** DOCUMENT ME! */
+  private ArrayList choosableFilters = new ArrayList();
+
+  /** DOCUMENT ME! */
+  private boolean isAcceptAll = true;
+
+  /** DOCUMENT ME! */
+  private String dialogTitle;
+
+  /** DOCUMENT ME! */
+  private int dialogType = OPEN_DIALOG;
+
+  /** DOCUMENT ME! */
+  private int retval = ERROR_OPTION;
+
+  /** DOCUMENT ME! */
+  private boolean multiSelection = false;
+
+  /** DOCUMENT ME! */
+  private boolean fileHiding = true;
+
+  /** DOCUMENT ME! */
+  private int fileSelectionMode = FILES_AND_DIRECTORIES;
+
+  /** DOCUMENT ME! */
+  private FileView fv = null;
+
+  /** DOCUMENT ME! */
+  private boolean controlButtonsShown = true;
+
+  /** DOCUMENT ME! */
+  private File currentDir = null;
+
+  /** DOCUMENT ME! */
+  private FileFilter currentFilter = null;
+
+  /** DOCUMENT ME! */
+  private File[] selectedFiles;
+
+  /** DOCUMENT ME! */
+  private File selectedFile;
+
+  /**
+   * Creates a new JFileChooser object.
+   */
+  public JFileChooser()
+  {
+    setup(null);
+    setCurrentDirectory(null);
+  }
+
   /**
-   * AccessibleJFileChooser
+   * Creates a new JFileChooser object.
+   *
+   * @param currentDirectoryPath DOCUMENT ME!
    */
-  protected class AccessibleJFileChooser extends AccessibleJComponent
+  public JFileChooser(String currentDirectoryPath)
   {
-    private static final long serialVersionUID = 8205148454060169244L;
+    setup(null);
+    setCurrentDirectory(fsv.createFileObject(currentDirectoryPath));
+  }
 
-    /**
-     * Constructor AccessibleJFileChooser
-     * @param component TODO
-     */
-    protected AccessibleJFileChooser()
-    {
-    }
-
-    /**
-     * getAccessibleRole
-     * @return AccessibleRole
-     */
-    public AccessibleRole getAccessibleRole()
-    {
-      return AccessibleRole.FILE_CHOOSER;
-    }
-  }
-
-	/**
-	 * uiClassID
-	 */
-	private static final String uiClassID = "FileChooserUI";
-
-	/**
-	 * OPEN_DIALOG
-	 */
-	public static final int OPEN_DIALOG = 0;
-
-	/**
-	 * SAVE_DIALOG
-	 */
-	public static final int SAVE_DIALOG = 1;
-
-	/**
-	 * CUSTOM_DIALOG
-	 */
-	public static final int CUSTOM_DIALOG = 2;
-
-	/**
-	 * CANCEL_OPTION
-	 */
-	public static final int CANCEL_OPTION = 1;
-
-	/**
-	 * APPROVE_OPTION
-	 */
-	public static final int APPROVE_OPTION = 0;
-
-	/**
-	 * ERROR_OPTION
-	 */
-	public static final int ERROR_OPTION = -1;
-
-	/**
-	 * FILES_ONLY
-	 */
-	public static final int FILES_ONLY = 0;
-
-	/**
-	 * DIRECTORIES_ONLY
-	 */
-	public static final int DIRECTORIES_ONLY = 1;
-
-	/**
-	 * FILES_AND_DIRECTORIES
-	 */
-	public static final int FILES_AND_DIRECTORIES = 2;
-
-	/**
-	 * CANCEL_SELECTION
-	 */
-	public static final String CANCEL_SELECTION = "CancelSelection";
-
-	/**
-	 * APPROVE_SELECTION
-	 */
-	public static final String APPROVE_SELECTION = "ApproveSelection";
-
-	/**
-	 * APPROVE_BUTTON_TEXT_CHANGED_PROPERTY
-	 */
-	public static final String APPROVE_BUTTON_TEXT_CHANGED_PROPERTY = "ApproveButtonTextChangedProperty";
-
-	/**
-	 * APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY
-	 */
-	public static final String APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY = "ApproveButtonToolTipTextChangedProperty";
-
-	/**
-	 * APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY
-	 */
-	public static final String APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY = "ApproveButtonMnemonicChangedProperty";
-
-	/**
-	 * CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY
-	 */
-	public static final String CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY = "ControlButtonsAreShownChangedProperty";
-
-	/**
-	 * DIRECTORY_CHANGED_PROPERTY
-	 */
-	public static final String DIRECTORY_CHANGED_PROPERTY = "directoryChanged";
-
-	/**
-	 * SELECTED_FILE_CHANGED_PROPERTY
-	 */
-	public static final String SELECTED_FILE_CHANGED_PROPERTY = "SelectedFileChangedProperty";
-
-	/**
-	 * SELECTED_FILES_CHANGED_PROPERTY
-	 */
-	public static final String SELECTED_FILES_CHANGED_PROPERTY = "SelectedFilesChangedProperty";
-
-	/**
-	 * MULTI_SELECTION_ENABLED_CHANGED_PROPERTY
-	 */
-	public static final String MULTI_SELECTION_ENABLED_CHANGED_PROPERTY = "MultiSelectionEnabledChangedProperty";
-
-	/**
-	 * FILE_SYSTEM_VIEW_CHANGED_PROPERTY
-	 */
-	public static final String FILE_SYSTEM_VIEW_CHANGED_PROPERTY = "FileSystemViewChanged";
-
-	/**
-	 * FILE_VIEW_CHANGED_PROPERTY
-	 */
-	public static final String FILE_VIEW_CHANGED_PROPERTY = "fileViewChanged";
-
-	/**
-	 * FILE_HIDING_CHANGED_PROPERTY
-	 */
-	public static final String FILE_HIDING_CHANGED_PROPERTY = "FileHidingChanged";
-
-	/**
-	 * FILE_FILTER_CHANGED_PROPERTY
-	 */
-	public static final String FILE_FILTER_CHANGED_PROPERTY = "fileFilterChanged";
-
-	/**
-	 * FILE_SELECTION_MODE_CHANGED_PROPERTY
-	 */
-	public static final String FILE_SELECTION_MODE_CHANGED_PROPERTY = "fileSelectionChanged";
-
-	/**
-	 * ACCESSORY_CHANGED_PROPERTY
-	 */
-	public static final String ACCESSORY_CHANGED_PROPERTY = "AccessoryChangedProperty";
-
-	/**
-	 * ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY
-	 */
-	public static final String ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY = "acceptAllFileFilterUsedChanged";
-
-	/**
-	 * DIALOG_TITLE_CHANGED_PROPERTY
-	 */
-	public static final String DIALOG_TITLE_CHANGED_PROPERTY = "DialogTitleChangedProperty";
-
-	/**
-	 * DIALOG_TYPE_CHANGED_PROPERTY
-	 */
-	public static final String DIALOG_TYPE_CHANGED_PROPERTY = "DialogTypeChangedProperty";
-
-	/**
-	 * CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY
-	 */
-	public static final String CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY = "ChoosableFileFilterChangedProperty";
-
-	/**
-	 * dialogTitle
-	 */
-	private String dialogTitle;
-
-	/**
-	 * approveButtonText
-	 */
-	private String approveButtonText;
-
-	/**
-	 * approveButtonToolTipText
-	 */
-	private String approveButtonToolTipText;
-
-	/**
-	 * approveButtonMnemonic
-	 */
-	private int approveButtonMnemonic;
-
-	/**
-	 * actionListener
-	 */
-	private ActionListener actionListener;
-
-	/**
-	 * filters
-	 */
-	private Vector filters;
-
-	/**
-	 * dialog
-	 */
-	private JDialog dialog;
-
-	/**
-	 * dialogType
-	 */
-	private int dialogType;
-
-	/**
-	 * returnValue
-	 */
-	private int returnValue;
-
-	/**
-	 * accessory
-	 */
-	private JComponent accessory;
-
-	/**
-	 * fileView
-	 */
-	private FileView fileView;
-
-	/**
-	 * uiFileView
-	 */
-	private FileView uiFileView;
-
-	/**
-	 * controlsShown
-	 */
-	private boolean controlsShown;
-
-	/**
-	 * useFileHiding
-	 */
-	private boolean useFileHiding;
-
-	/**
-	 * fileSelectionMode
-	 */
-	private int fileSelectionMode;
-
-	/**
-	 * multiSelectionEnabled
-	 */
-	private boolean multiSelectionEnabled;
-
-	/**
-	 * useAcceptAllFileFilter
-	 */
-	private boolean useAcceptAllFileFilter;
-
-	/**
-	 * fileFilter
-	 */
-	private FileFilter fileFilter;
-
-	/**
-	 * fileSystemView
-	 */
-	private FileSystemView fileSystemView;
-
-	/**
-	 * currentDirectory
-	 */
-	private File currentDirectory;
-
-	/**
-	 * selectedFile
-	 */
-	private File selectedFile;
-
-	/**
-	 * selectedFiles
-	 */
-	private File[] selectedFiles;
-
-	/**
-	 * accessibleContext
-	 */
-	protected AccessibleContext accessibleContext;
-
-
-	//-------------------------------------------------------------
-	// Initialization ---------------------------------------------
-	//-------------------------------------------------------------
-
-	/**
-	 * Constructor JFileChooser
-	 */
-	public JFileChooser() {
-		// TODO
-	} // JFileChooser()
-
-	/**
-	 * Constructor JFileChooser
-	 * @param currentDirectoryPath TODO
-	 */
-	public JFileChooser(String currentDirectoryPath) {
-		// TODO
-	} // JFileChooser()
-
-	/**
-	 * Constructor JFileChooser
-	 * @param currentDirectory TODO
-	 */
-	public JFileChooser(File currentDirectory) {
-		// TODO
-	} // JFileChooser()
-
-	/**
-	 * Constructor JFileChooser
-	 * @param value0 TODO
-	 */
-	public JFileChooser(FileSystemView fsv) {
-		// TODO
-	} // JFileChooser()
-
-	/**
-	 * Constructor JFileChooser
-	 * @param currentDirectory TODO
-	 * @param fsv TODO
-	 */
-	public JFileChooser(File currentDirectory, FileSystemView fsv) {
-		// TODO
-	} // JFileChooser()
-
-	/**
-	 * Constructor JFileChooser
-	 * @param currentDirectoryPath TODO
-	 * @param fsv TODO
-	 */
-	public JFileChooser(String currentDirectoryPath, FileSystemView fsv) {
-		// TODO
-	} // JFileChooser()
-
-
-	//-------------------------------------------------------------
-	// Methods ----------------------------------------------------
-	//-------------------------------------------------------------
-
-	/**
-	 * writeObject
-	 * @param stream TODO
-	 * @exception IOException TODO
-	 */
-	private void writeObject(ObjectOutputStream stream) throws IOException {
-		// TODO
-	} // writeObject()
-
-	/**
-	 * getName
-	 * @param file TODO
-	 * @returns String
-	 */
-	public String getName(File file) {
-		return null; // TODO
-	} // getName()
-
-	/**
-	 * setup
-	 * @param view TODO
-	 */
-	protected void setup(FileSystemView view) {
-		// TODO
-	} // setup()
-
-	/**
-	 * accept
-	 * @param file TODO
-	 * @returns boolean
-	 */
-	public boolean accept(File file) {
-		return false; // TODO
-	} // accept()
-
-	/**
-	 * getSelectedFile
-	 * @returns File
-	 */
-	public File getSelectedFile() {
-		return null; // TODO
-	} // getSelectedFile()
-
-	/**
-	 * setSelectedFile
-	 * @param file TODO
-	 */
-	public void setSelectedFile(File file) {
-		// TODO
-	} // setSelectedFile()
-
-	/**
-	 * getSelectedFiles
-	 * @returns File[]
-	 */
-	public File[] getSelectedFiles() {
-		return null; // TODO
-	} // getSelectedFiles()
-
-	/**
-	 * setSelectedFiles
-	 * @param files TODO
-	 */
-	public void setSelectedFiles(File[] files) {
-		// TODO
-	} // setSelectedFiles()
-
-	/**
-	 * getCurrentDirectory
-	 * @returns File
-	 */
-	public File getCurrentDirectory() {
-		return null; // TODO
-	} // getCurrentDirectory()
-
-	/**
-	 * setCurrentDirectory
-	 * @param directory TODO
-	 */
-	public void setCurrentDirectory(File directory) {
-		// TODO
-	} // setCurrentDirectory()
-
-	/**
-	 * changeToParentDirectory
-	 */
-	public void changeToParentDirectory() {
-		// TODO
-	} // changeToParentDirectory()
-
-	/**
-	 * rescanCurrentDirectory
-	 */
-	public void rescanCurrentDirectory() {
-		// TODO
-	} // rescanCurrentDirectory()
-
-	/**
-	 * ensureFileIsVisible
-	 * @param file TODO
-	 */
-	public void ensureFileIsVisible(File file) {
-		// TODO
-	} // ensureFileIsVisible()
-
-	/**
-	 * showOpenDialog
-	 * @param parent TODO
-	 * @returns int
-	 */
-	public int showOpenDialog(Component parent) {
-		return CANCEL_OPTION; // TODO
-	} // showOpenDialog()
-
-	/**
-	 * showSaveDialog
-	 * @param parent TODO
-	 * @returns int
-	 */
-	public int showSaveDialog(Component parent) {
-		return CANCEL_OPTION; // TODO
-	} // showSaveDialog()
-
-	/**
-	 * showDialog
-	 * @param parent TODO
-	 * @param approveButtonText TODO
-	 * @returns int
-	 */
-	public int showDialog(Component parent, String approveButtonText) {
-		return CANCEL_OPTION; // TODO
-	} // showDialog()
-
-	/**
-	 * getControlButtonsAreShown
-	 * @returns boolean
-	 */
-	public boolean getControlButtonsAreShown() {
-		return false; // TODO
-	} // getControlButtonsAreShown()
-
-	/**
-	 * setControlButtonsAreShown
-	 * @param value TODO
-	 */
-	public void setControlButtonsAreShown(boolean value) {
-		// TODO
-	} // setControlButtonsAreShown()
-
-	/**
-	 * getDialogType
-	 * @returns int
-	 */
-	public int getDialogType() {
-		return 0; // TODO
-	} // getDialogType()
-
-	/**
-	 * setDialogType
-	 * @param type TODO
-	 */
-	public void setDialogType(int type) {
-		// TODO
-	} // setDialogType()
-
-	/**
-	 * setDialogTitle
-	 * @param title TODO
-	 */
-	public void setDialogTitle(String title) {
-		// TODO
-	} // setDialogTitle()
-
-	/**
-	 * getDialogTitle
-	 * @returns String
-	 */
-	public String getDialogTitle() {
-		return null; // TODO
-	} // getDialogTitle()
-
-	/**
-	 * setApproveButtonToolTipText
-	 * @param text TODO
-	 */
-	public void setApproveButtonToolTipText(String text) {
-		// TODO
-	} // setApproveButtonToolTipText()
-
-	/**
-	 * getApproveButtonToolTipText
-	 * @returns String
-	 */
-	public String getApproveButtonToolTipText() {
-		return null; // TODO
-	} // getApproveButtonToolTipText()
-
-	/**
-	 * getApproveButtonMnemonic
-	 * @returns int
-	 */
-	public int getApproveButtonMnemonic() {
-		return 0; // TODO
-	} // getApproveButtonMnemonic()
-
-	/**
-	 * setApproveButtonMnemonic
-	 * @param mnemonic TODO
-	 */
-	public void setApproveButtonMnemonic(int mnemonic) {
-		// TODO
-	} // setApproveButtonMnemonic()
-
-	/**
-	 * setApproveButtonMnemonic
-	 * @param mnemonic TODO
-	 */
-	public void setApproveButtonMnemonic(char mnemonic) {
-		// TODO
-	} // setApproveButtonMnemonic()
-
-	/**
-	 * setApproveButtonText
-	 * @param text TODO
-	 */
-	public void setApproveButtonText(String text) {
-		// TODO
-	} // setApproveButtonText()
-
-	/**
-	 * getApproveButtonText
-	 * @returns String
-	 */
-	public String getApproveButtonText() {
-		return null; // TODO
-	} // getApproveButtonText()
-
-	/**
-	 * getChoosableFileFilters
-	 * @returns FileFilter[]
-	 */
-	public FileFilter[] getChoosableFileFilters() {
-		return null; // TODO
-	} // getChoosableFileFilters()
-
-	/**
-	 * addChoosableFileFilter
-	 * @param filter TODO
-	 */
-	public void addChoosableFileFilter(FileFilter filter) {
-		// TODO
-	} // addChoosableFileFilter()
-
-	/**
-	 * removeChoosableFileFilter
-	 * @param filter TODO
-	 * @returns boolean
-	 */
-	public boolean removeChoosableFileFilter(FileFilter filter) {
-		return false; // TODO
-	} // removeChoosableFileFilter()
-
-	/**
-	 * resetChoosableFileFilters
-	 */
-	public void resetChoosableFileFilters() {
-		// TODO
-	} // resetChoosableFileFilters()
-
-	/**
-	 * getAcceptAllFileFilter
-	 * @returns FileFilter
-	 */
-	public FileFilter getAcceptAllFileFilter() {
-		return null; // TODO
-	} // getAcceptAllFileFilter()
-
-	/**
-	 * isAcceptAllFileFilterUsed
-	 * @returns boolean
-	 */
-	public boolean isAcceptAllFileFilterUsed() {
-		return false; // TODO
-	} // isAcceptAllFileFilterUsed()
-
-	/**
-	 * setAcceptAllFileFilterUsed
-	 * @param value TODO
-	 */
-	public void setAcceptAllFileFilterUsed(boolean value) {
-		// TODO
-	} // setAcceptAllFileFilterUsed()
-
-	/**
-	 * getAccessory
-	 * @returns JComponent
-	 */
-	public JComponent getAccessory() {
-		return null; // TODO
-	} // getAccessory()
-
-	/**
-	 * setAccessory
-	 * @param accessory TODO
-	 */
-	public void setAccessory(JComponent accessory) {
-		// TODO
-	} // setAccessory()
-
-	/**
-	 * setFileSelectionMode
-	 * @param mode TODO
-	 */
-	public void setFileSelectionMode(int mode) {
-		// TODO
-	} // setFileSelectionMode()
-
-	/**
-	 * getFileSelectionMode
-	 * @returns int
-	 */
-	public int getFileSelectionMode() {
-		return 0; // TODO
-	} // getFileSelectionMode()
-
-	/**
-	 * isFileSelectionEnabled
-	 * @returns boolean
-	 */
-	public boolean isFileSelectionEnabled() {
-		return false; // TODO
-	} // isFileSelectionEnabled()
-
-	/**
-	 * isDirectorySelectionEnabled
-	 * @returns boolean
-	 */
-	public boolean isDirectorySelectionEnabled() {
-		return false; // TODO
-	} // isDirectorySelectionEnabled()
-
-	/**
-	 * isMultiSelectionEnabled
-	 * @returns boolean
-	 */
-	public boolean isMultiSelectionEnabled() {
-		return false; // TODO
-	} // isMultiSelectionEnabled()
-
-	/**
-	 * setMultiSelectionEnabled
-	 * @param enabled TODO
-	 */
-	public void setMultiSelectionEnabled(boolean enabled) {
-		// TODO
-	} // setMultiSelectionEnabled()
-
-	/**
-	 * isFileHidingEnabled
-	 * @returns boolean
-	 */
-	public boolean isFileHidingEnabled() {
-		return false; // TODO
-	} // isFileHidingEnabled()
-
-	/**
-	 * setFileHidingEnabled
-	 * @param enabled TODO
-	 */
-	public void setFileHidingEnabled(boolean enabled) {
-		// TODO
-	} // setFileHidingEnabled()
-
-	/**
-	 * getFileFilter
-	 * @returns FileFilter
-	 */
-	public FileFilter getFileFilter() {
-		return null; // TODO
-	} // getFileFilter()
-
-	/**
-	 * setFileFilter
-	 * @param filter TODO
-	 */
-	public void setFileFilter(FileFilter filter) {
-		// TODO
-	} // setFileFilter()
-
-	/**
-	 * getFileView
-	 * @returns FileView
-	 */
-	public FileView getFileView() {
-		return null; // TODO
-	} // getFileView()
-
-	/**
-	 * setFileView
-	 * @param view TODO
-	 */
-	public void setFileView(FileView view) {
-		// TODO
-	} // setFileView()
-
-	/**
-	 * getDescription
-	 * @param file TODO
-	 * @returns String
-	 */
-	public String getDescription(File file) {
-		return null; // TODO
-	} // getDescription()
-
-	/**
-	 * getTypeDescription
-	 * @param file TODO
-	 * @returns String
-	 */
-	public String getTypeDescription(File file) {
-		return null; // TODO
-	} // getTypeDescription()
-
-	/**
-	 * getIcon
-	 * @param file TODO
-	 * @returns Icon
-	 */
-	public Icon getIcon(File file) {
-		return null; // TODO
-	} // getIcon()
-
-	/**
-	 * isTraversable
-	 * @param file TODO
-	 * @returns boolean
-	 */
-	public boolean isTraversable(File file) {
-		return false; // TODO
-	} // isTraversable()
-
-	/**
-	 * getFileSystemView
-	 * @returns FileSystemView
-	 */
-	public FileSystemView getFileSystemView() {
-		return null; // TODO
-	} // getFileSystemView()
-
-	/**
-	 * setFileSystemView
-	 * @param fsv TODO
-	 */
-	public void setFileSystemView(FileSystemView fsv) {
-		// TODO
-	} // setFileSystemView()
-
-	/**
-	 * approveSelection
-	 */
-	public void approveSelection() {
-		// TODO
-	} // approveSelection()
-
-	/**
-	 * cancelSelection
-	 */
-	public void cancelSelection() {
-		// TODO
-	} // cancelSelection()
-
-	/**
-	 * addActionListener
-	 * @param listener TODO
-	 */
-	public void addActionListener(ActionListener listener)
-	{
-		listenerList.add (ActionListener.class, listener);
-	}
-
-	/**
-	 * removeActionListener
-	 * @param listener TODO
-	 */
-	public void removeActionListener(ActionListener listener)
-	{
-		listenerList.remove (ActionListener.class, listener);
-	}
-
-	public ActionListener[] getActionListeners()
-	{
-		return (ActionListener[]) listenerList.getListeners (ActionListener.class);
-	}
-
-	/**
-	 * fireActionPerformed
-	 * @param command TODO
-	 */
-	protected void fireActionPerformed(String command) {
-		// TODO
-	} // fireActionPerformed()
-
-	/**
-	 * updateUI
-	 */
-	public void updateUI() {
-		setUI((FileChooserUI) UIManager.get(this));
-		invalidate();
-	} // updateUI()
-
-	/**
-	 * getUIClassID
-	 * @returns String
-	 */
-	public String getUIClassID() {
-		return uiClassID;
-	} // getUIClassID()
-
-	/**
-	 * getUI
-	 * @returns FileChooserUI
-	 */
-	public FileChooserUI getUI() {
-		return (FileChooserUI) ui;
-	} // getUI()
-
-	/**
-	 * paramString
-	 * @returns String
-	 */
-	protected String paramString() {
-		return null; // TODO
-	} // paramString()
+  /**
+   * Creates a new JFileChooser object with the specified directory and
+   * FileSystemView.
+   *
+   * @param currentDirectoryPath the directory that should initially be
+   *     shown the filechooser
+   * @param fsv the FileSystemView object to use
+   */
+  public JFileChooser(String currentDirectoryPath, FileSystemView fsv)
+  {
+    setup(fsv);
+    setCurrentDirectory(fsv.createFileObject(currentDirectoryPath));
+  }
 
   /**
-   * getAccessibleContext
-   * @returns AccessibleContext
+   * Creates a new JFileChooser object.
+   *
+   * @param currentDirectory DOCUMENT ME!
    */
-  public AccessibleContext getAccessibleContext()
+  public JFileChooser(File currentDirectory)
+  {
+    setup(null);
+    setCurrentDirectory(currentDirectory);
+  }
+
+  /**
+   * Creates a new JFileChooser object.
+   *
+   * @param fsv DOCUMENT ME!
+   */
+  public JFileChooser(FileSystemView fsv)
+  {
+    setup(fsv);
+    setCurrentDirectory(null);
+  }
+
+  /**
+   * Creates a new JFileChooser object.
+   *
+   * @param currentDirectory DOCUMENT ME!
+   * @param fsv DOCUMENT ME!
+   */
+  public JFileChooser(File currentDirectory, FileSystemView fsv)
+  {
+    setup(fsv);
+    setCurrentDirectory(currentDirectory);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param view DOCUMENT ME!
+   */
+  protected void setup(FileSystemView view)
+  {
+    if (view == null)
+      view = FileSystemView.getFileSystemView();
+    setFileSystemView(view);
+    updateUI();
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param b DOCUMENT ME!
+   */
+  public void setDragEnabled(boolean b)
+  {
+    // FIXME: Implement
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean getDragEnabled()
+  {
+    // FIXME: Implement
+    return false;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public File getSelectedFile()
+  {
+    return selectedFile;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param file DOCUMENT ME!
+   */
+  public void setSelectedFile(File file)
+  {
+    if (selectedFile != file)
+      {
+	File old = selectedFile;
+	selectedFile = file;
+	firePropertyChange(SELECTED_FILE_CHANGED_PROPERTY, old, selectedFile);
+      }
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public File[] getSelectedFiles()
+  {
+    return selectedFiles;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param selectedFiles DOCUMENT ME!
+   */
+  public void setSelectedFiles(File[] selectedFiles)
+  {
+    if (this.selectedFiles != selectedFiles)
+      {
+	File[] old = this.selectedFiles;
+	this.selectedFiles = selectedFiles;
+	firePropertyChange(SELECTED_FILES_CHANGED_PROPERTY, old, selectedFiles);
+      }
+
+    if (selectedFiles != null)
+      setSelectedFile(selectedFiles[0]);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public File getCurrentDirectory()
+  {
+    return currentDir;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param dir DOCUMENT ME!
+   */
+  public void setCurrentDirectory(File dir)
+  {
+    if (currentDir != dir || dir == null)
+      {
+	if (dir == null)
+	  dir = fsv.getDefaultDirectory();
+
+	File old = currentDir;
+	currentDir = dir;
+	firePropertyChange(DIRECTORY_CHANGED_PROPERTY, old, currentDir);
+      }
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  public void changeToParentDirectory()
+  {
+    setCurrentDirectory(fsv.getParentDirectory(currentDir));
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  public void rescanCurrentDirectory()
+  {
+    getUI().rescanCurrentDirectory(this);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   */
+  public void ensureFileIsVisible(File f)
+  {
+    getUI().ensureFileIsVisible(this, f);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param parent DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   *
+   * @throws HeadlessException DOCUMENT ME!
+   */
+  public int showOpenDialog(Component parent) throws HeadlessException
+  {
+    JDialog d = createDialog(parent);
+
+    // FIXME: Remove when we get ancestor property
+    d.setTitle("Open");
+    setDialogType(OPEN_DIALOG);
+
+    retval = ERROR_OPTION;
+
+    d.pack();
+    d.show();
+    return retval;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param parent DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   *
+   * @throws HeadlessException DOCUMENT ME!
+   */
+  public int showSaveDialog(Component parent) throws HeadlessException
+  {
+    JDialog d = createDialog(parent);
+    setDialogType(SAVE_DIALOG);
+
+    retval = ERROR_OPTION;
+
+    d.pack();
+    d.show();
+    return retval;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param parent DOCUMENT ME!
+   * @param approveButtonText DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   *
+   * @throws HeadlessException DOCUMENT ME!
+   */
+  public int showDialog(Component parent, String approveButtonText)
+                 throws HeadlessException
+  {
+    JDialog d = createDialog(parent);
+    setApproveButtonText(approveButtonText);
+    setDialogType(CUSTOM_DIALOG);
+
+    retval = ERROR_OPTION;
+
+    d.pack();
+    d.show();
+    return retval;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param parent DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   *
+   * @throws HeadlessException DOCUMENT ME!
+   */
+  protected JDialog createDialog(Component parent) throws HeadlessException
+  {
+    Frame toUse = (Frame) SwingUtilities.getAncestorOfClass(Frame.class, parent);
+    if (toUse == null)
+      toUse = SwingUtilities.getOwnerFrame();
+
+    JDialog dialog = new JDialog(toUse);
+    setSelectedFile(null);
+    dialog.getContentPane().add(this);
+    dialog.setModal(true);
+    dialog.invalidate();
+    dialog.repaint();
+
+    return dialog;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean getControlButtonsAreShown()
+  {
+    return controlButtonsShown;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param b DOCUMENT ME!
+   */
+  public void setControlButtonsAreShown(boolean b)
+  {
+    if (controlButtonsShown != b)
+      {
+	controlButtonsShown = b;
+	firePropertyChange(CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY,
+	                   ! controlButtonsShown, controlButtonsShown);
+      }
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public int getDialogType()
+  {
+    return dialogType;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param dialogType DOCUMENT ME!
+   */
+  public void setDialogType(int dialogType)
+  {
+    if (dialogType != OPEN_DIALOG && dialogType != SAVE_DIALOG
+        && dialogType != CUSTOM_DIALOG)
+      throw new IllegalArgumentException("Choose allowable dialogType.");
+
+    if (this.dialogType != dialogType)
+      {
+	int old = this.dialogType;
+	this.dialogType = dialogType;
+	firePropertyChange(DIALOG_TYPE_CHANGED_PROPERTY, old, this.dialogType);
+      }
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param dialogTitle DOCUMENT ME!
+   */
+  public void setDialogTitle(String dialogTitle)
+  {
+    if (this.dialogTitle != dialogTitle)
+      {
+	String old = this.dialogTitle;
+	this.dialogTitle = dialogTitle;
+	firePropertyChange(DIALOG_TITLE_CHANGED_PROPERTY, old, this.dialogTitle);
+      }
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public String getDialogTitle()
+  {
+    return dialogTitle;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param toolTipText DOCUMENT ME!
+   */
+  public void setApproveButtonToolTipText(String toolTipText)
+  {
+    if (approveButtonToolTipText != toolTipText)
+      {
+	String oldText = approveButtonToolTipText;
+	approveButtonToolTipText = toolTipText;
+	firePropertyChange(APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY,
+	                   oldText, approveButtonToolTipText);
+      }
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public String getApproveButtonToolTipText()
+  {
+    return approveButtonToolTipText;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public int getApproveButtonMnemonic()
+  {
+    return approveButtonMnemonic;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param mnemonic DOCUMENT ME!
+   */
+  public void setApproveButtonMnemonic(int mnemonic)
+  {
+    if (approveButtonMnemonic != mnemonic)
+      {
+	int oldMnemonic = approveButtonMnemonic;
+	approveButtonMnemonic = mnemonic;
+	firePropertyChange(APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY,
+	                   oldMnemonic, approveButtonMnemonic);
+      }
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param mnemonic DOCUMENT ME!
+   */
+  public void setApproveButtonMnemonic(char mnemonic)
   {
-    if (accessibleContext == null)
-      accessibleContext = new AccessibleJFileChooser();
+    setApproveButtonMnemonic((int) Character.toUpperCase(mnemonic));
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param approveButtonText DOCUMENT ME!
+   */
+  public void setApproveButtonText(String approveButtonText)
+  {
+    if (this.approveButtonText != approveButtonText)
+      {
+	String oldText = this.approveButtonText;
+	this.approveButtonText = approveButtonText;
+	firePropertyChange(APPROVE_BUTTON_TEXT_CHANGED_PROPERTY, oldText,
+	                   this.approveButtonText);
+      }
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public String getApproveButtonText()
+  {
+    return approveButtonText;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public FileFilter[] getChoosableFileFilters()
+  {
+    return (FileFilter[]) choosableFilters.toArray(new FileFilter[0]);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param filter DOCUMENT ME!
+   */
+  public void addChoosableFileFilter(FileFilter filter)
+  {
+    FileFilter[] old = getChoosableFileFilters();
+    choosableFilters.add(filter);
+    FileFilter[] newFilters = getChoosableFileFilters();
+    firePropertyChange(CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY, old, newFilters);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean removeChoosableFileFilter(FileFilter f)
+  {
+    FileFilter[] old = getChoosableFileFilters();
+    if (! choosableFilters.remove(f))
+      return false;
+    FileFilter[] newFilters = getChoosableFileFilters();
+    firePropertyChange(CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY, old, newFilters);
+    return true;
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  public void resetChoosableFileFilters()
+  {
+    choosableFilters.clear();
+    choosableFilters.add(getUI().getAcceptAllFileFilter(this));
+    setFileFilter((FileFilter) choosableFilters.get(0));
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public FileFilter getAcceptAllFileFilter()
+  {
+    return getUI().getAcceptAllFileFilter(this);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean isAcceptAllFileFilterUsed()
+  {
+    return isAcceptAll;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param b DOCUMENT ME!
+   */
+  public void setAcceptAllFileFilterUsed(boolean b)
+  {
+    if (isAcceptAll != b)
+      {
+	isAcceptAll = b;
+	firePropertyChange(ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY,
+	                   ! isAcceptAll, isAcceptAll);
+      }
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public JComponent getAccessory()
+  {
+    return accessory;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param newAccessory DOCUMENT ME!
+   */
+  public void setAccessory(JComponent newAccessory)
+  {
+    if (accessory != newAccessory)
+      {
+	JComponent old = accessory;
+	accessory = newAccessory;
+	firePropertyChange(ACCESSORY_CHANGED_PROPERTY, old, accessory);
+      }
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param mode DOCUMENT ME!
+   */
+  public void setFileSelectionMode(int mode)
+  {
+    if (mode != FILES_ONLY && mode != DIRECTORIES_ONLY
+        && mode != FILES_AND_DIRECTORIES)
+      throw new IllegalArgumentException("Choose a correct file selection mode.");
+    if (fileSelectionMode != mode)
+      {
+	int old = fileSelectionMode;
+	fileSelectionMode = mode;
+	firePropertyChange(FILE_SELECTION_MODE_CHANGED_PROPERTY, old,
+	                   fileSelectionMode);
+      }
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public int getFileSelectionMode()
+  {
+    return fileSelectionMode;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean isFileSelectionEnabled()
+  {
+    return (fileSelectionMode == FILES_ONLY
+           || fileSelectionMode == FILES_AND_DIRECTORIES);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean isDirectorySelectionEnabled()
+  {
+    return (fileSelectionMode == DIRECTORIES_ONLY
+           || fileSelectionMode == FILES_AND_DIRECTORIES);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param b DOCUMENT ME!
+   */
+  public void setMultiSelectionEnabled(boolean b)
+  {
+    if (multiSelection != b)
+      {
+	multiSelection = b;
+	firePropertyChange(MULTI_SELECTION_ENABLED_CHANGED_PROPERTY,
+	                   ! multiSelection, multiSelection);
+      }
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean isMultiSelectionEnabled()
+  {
+    return multiSelection;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean isFileHidingEnabled()
+  {
+    return fileHiding;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param b DOCUMENT ME!
+   */
+  public void setFileHidingEnabled(boolean b)
+  {
+    if (fileHiding != b)
+      {
+	fileHiding = b;
+	firePropertyChange(FILE_HIDING_CHANGED_PROPERTY, ! fileHiding,
+	                   fileHiding);
+      }
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param filter DOCUMENT ME!
+   */
+  public void setFileFilter(FileFilter filter)
+  {
+    if (currentFilter != filter)
+      {
+	FileFilter old = currentFilter;
+	currentFilter = filter;
+	firePropertyChange(FILE_FILTER_CHANGED_PROPERTY, old, currentFilter);
+      }
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public FileFilter getFileFilter()
+  {
+    return currentFilter;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fileView DOCUMENT ME!
+   */
+  public void setFileView(FileView fileView)
+  {
+    if (fv != fileView)
+      {
+	FileView old = fv;
+	fv = fileView;
+	firePropertyChange(FILE_VIEW_CHANGED_PROPERTY, old, fv);
+      }
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public FileView getFileView()
+  {
+    return fv;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  private FileView getInternalFileView()
+  {
+    if (fv == null)
+      return getUI().getFileView(this);
+    return fv;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public String getName(File f)
+  {
+    return getInternalFileView().getName(f);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public String getDescription(File f)
+  {
+    return getInternalFileView().getDescription(f);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public String getTypeDescription(File f)
+  {
+    return getInternalFileView().getTypeDescription(f);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public Icon getIcon(File f)
+  {
+    return getInternalFileView().getIcon(f);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean isTraversable(File f)
+  {
+    return getFileSystemView().isTraversable(f).booleanValue();
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean accept(File f)
+  {
+    if (f == null)
+      return false;
+    return getFileFilter().accept(f);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fsv DOCUMENT ME!
+   */
+  public void setFileSystemView(FileSystemView fsv)
+  {
+    if (this.fsv != fsv)
+      {
+	FileSystemView old = this.fsv;
+	this.fsv = fsv;
+	firePropertyChange(FILE_SYSTEM_VIEW_CHANGED_PROPERTY, old, this.fsv);
+      }
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public FileSystemView getFileSystemView()
+  {
+    return fsv;
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  public void approveSelection()
+  {
+    retval = APPROVE_OPTION;
+    fireActionPerformed(APPROVE_SELECTION);
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  public void cancelSelection()
+  {
+    retval = CANCEL_OPTION;
+    fireActionPerformed(CANCEL_SELECTION);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param l DOCUMENT ME!
+   */
+  public void addActionListener(ActionListener l)
+  {
+    listenerList.add(ActionListener.class, l);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param l DOCUMENT ME!
+   */
+  public void removeActionListener(ActionListener l)
+  {
+    try
+      {
+	listenerList.remove(ActionListener.class, l);
+      }
+    catch (IllegalArgumentException e)
+      {
+	e.printStackTrace();
+      }
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public ActionListener[] getActionListeners()
+  {
+    return (ActionListener[]) getListeners(ActionListener.class);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param command DOCUMENT ME!
+   */
+  protected void fireActionPerformed(String command)
+  {
+    ActionListener[] list = getActionListeners();
+    ActionEvent event = new ActionEvent(this, ActionEvent.ACTION_PERFORMED,
+                                        command);
+
+    for (int i = 0; i < list.length; i++)
+      list[i].actionPerformed(event);
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  public void updateUI()
+  {
+    setUI((FileChooserUI) UIManager.getUI(this));
+    revalidate();
+  }
 
-    return accessibleContext;
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public String getUIClassID()
+  {
+    return "FileChooserUI";
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public FileChooserUI getUI()
+  {
+    return (FileChooserUI) ui;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  protected String paramString()
+  {
+    return "JFileChooser";
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public AccessibleContext getAccessibleContext()
+  {
+    return null;
   }
 }
Index: libjava/javax/swing/JFormattedTextField.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JFormattedTextField.java,v
retrieving revision 1.8
diff -u -r1.8 JFormattedTextField.java
--- libjava/javax/swing/JFormattedTextField.java	16 Feb 2005 20:02:25 -0000	1.8
+++ libjava/javax/swing/JFormattedTextField.java	9 Jul 2005 22:10:04 -0000
@@ -155,7 +155,8 @@
   private Object value;
   private int focusLostBehavior = COMMIT_OR_REVERT;
   private AbstractFormatterFactory formatterFactory;
-  private boolean editValid = true;
+  // Package-private to avoid an accessor method.
+  boolean editValid = true;
   
   public JFormattedTextField ()
   {
@@ -196,7 +197,8 @@
 
   public Action[] getActions ()
   {
-    throw new InternalError ("not implemented");
+    // FIXME: Add JFormattedTextField specific actions
+    return super.getActions();
   }
 
   public int getFocusLostBehavior()
@@ -239,7 +241,10 @@
 
   protected void processFocusEvent (FocusEvent evt)
   {
-    throw new InternalError ("not implemented");
+    // it's safe to simply call super for now, until it gets clear
+    // what this method is supposed to do
+    // throw new InternalError ("not implemented");
+    super.processFocusEvent(evt);
   }
 
   public void setDocument(Document newDocument)
Index: libjava/javax/swing/JFrame.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JFrame.java,v
retrieving revision 1.10
diff -u -r1.10 JFrame.java
--- libjava/javax/swing/JFrame.java	16 Feb 2005 20:02:25 -0000	1.10
+++ libjava/javax/swing/JFrame.java	9 Jul 2005 22:10:04 -0000
@@ -45,6 +45,7 @@
 import java.awt.Dimension;
 import java.awt.Frame;
 import java.awt.Graphics;
+import java.awt.GraphicsConfiguration;
 import java.awt.LayoutManager;
 import java.awt.event.KeyEvent;
 import java.awt.event.WindowEvent;
@@ -79,6 +80,37 @@
     frameInit();
   }
 
+  /**
+   * Creates a new JFrame in the specified {@link GraphicsConfiguration}
+   * and with an empty title.
+   *
+   * @param gc the <code>GraphicsConfiguration</code> that is used for
+   *     the new <code>JFrame</code>
+   *
+   * @see Frame(GraphicsConfiguration)
+   */
+  public JFrame(GraphicsConfiguration gc)
+  {
+    super(gc);
+    frameInit();
+  }
+
+  /**
+   * Creates a new JFrame in the specified {@link GraphicsConfiguration}
+   * and with the specified title.
+   *
+   * @param title the title for the new <code>JFrame</code>
+   * @param gc the <code>GraphicsConfiguration</code> that is used for
+   *     the new <code>JFrame</code>
+   *
+   * @see Frame(String, GraphicsConfiguration)
+   */
+  public JFrame(String title, GraphicsConfiguration gc)
+  {
+    super(title, gc);
+    frameInit();
+  }
+
   protected void frameInit()
   {
     super.setLayout(new BorderLayout(1, 1));
Index: libjava/javax/swing/JInternalFrame.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JInternalFrame.java,v
retrieving revision 1.6
diff -u -r1.6 JInternalFrame.java
--- libjava/javax/swing/JInternalFrame.java	16 Feb 2005 20:02:27 -0000	1.6
+++ libjava/javax/swing/JInternalFrame.java	9 Jul 2005 22:10:05 -0000
@@ -76,6 +76,8 @@
   protected class AccessibleJInternalFrame extends AccessibleJComponent
     implements AccessibleValue
   {
+    private static final long serialVersionUID = 5931936924175476797L;
+
     /**
      * Creates a new AccessibleJInternalFrame object.
      */
@@ -168,6 +170,8 @@
     protected class AccessibleJDesktopIcon extends AccessibleJComponent
       implements AccessibleValue
     {
+      private static final long serialVersionUID = 5035560458941637802L;
+
       /**
        * Creates a new AccessibleJDesktopIcon object.
        */
@@ -239,6 +243,8 @@
       }
     }
 
+    private static final long serialVersionUID = 4672973344731387687L;
+
     /** The JInternalFrame this DesktopIcon represents. */
     JInternalFrame frame;
 
@@ -862,7 +868,10 @@
   {
     JDesktopPane pane = getDesktopPane();
     if (pane != null)
-      return pane.getLayer(this);
+      // The cast here forces the call to the instance method getLayer()
+      // instead of the static method (this would lead to infinite
+      // recursion).
+      return pane.getLayer((Component) this);
     return -1;
   }
 
Index: libjava/javax/swing/JLabel.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JLabel.java,v
retrieving revision 1.10
diff -u -r1.10 JLabel.java
--- libjava/javax/swing/JLabel.java	16 Feb 2005 20:02:27 -0000	1.10
+++ libjava/javax/swing/JLabel.java	9 Jul 2005 22:10:05 -0000
@@ -92,23 +92,23 @@
   private transient int iconTextGap = 4;
 
   /**
-   * Creates a new horizontally and vertically centered JLabel object with no
-   * text and no icon.
+   * Creates a new vertically centered, horizontally on the leading edge
+   * JLabel object with text and no icon.
    */
   public JLabel()
   {
-    this(null, null, CENTER);
+    this(null, null, LEADING);
   }
 
   /**
-   * Creates a new horizontally and vertically centered JLabel object with no
-   * text and the given icon.
+   * Creates a new vertically centered, horizontally on the leading edge
+   * JLabel object with no text and the given icon.
    *
    * @param image The icon to use with the label.
    */
   public JLabel(Icon image)
   {
-    this(null, image, CENTER);
+    this(null, image, LEADING);
   }
 
   /**
@@ -125,14 +125,14 @@
   }
 
   /**
-   * Creates a new horizontally and vertically centered JLabel object with no
-   * icon and the given text.
+   * Creates a new horizontally leading and vertically centered JLabel 
+   * object with no icon and the given text.
    *
    * @param text The text to use with the label.
    */
   public JLabel(String text)
   {
-    this(text, null, CENTER);
+    this(text, null, LEADING);
   }
 
   /**
Index: libjava/javax/swing/JLayeredPane.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JLayeredPane.java,v
retrieving revision 1.12
diff -u -r1.12 JLayeredPane.java
--- libjava/javax/swing/JLayeredPane.java	16 Feb 2005 20:02:28 -0000	1.12
+++ libjava/javax/swing/JLayeredPane.java	9 Jul 2005 22:10:05 -0000
@@ -130,6 +130,48 @@
   }
 
   /**
+   * Looks up the layer of <code>comp</code> in the component's nearest
+   * JLayeredPane ancestor. If <code>comp</code> is not contained
+   * in a JLayeredPane, the value 0 (default layer) is returned.
+   *
+   * @param comp the component for which the layer is looked up
+   *
+   * @return the layer of <code>comp</code> in its nearest JLayeredPane
+   *     ancestor
+   */
+  public static int getLayer(JComponent comp)
+  {
+    JLayeredPane lp = (JLayeredPane) SwingUtilities.getAncestorOfClass
+      (JLayeredPane.class, comp);
+    if (lp == null)
+      return 0;
+    else
+      // The cast here forces the call to the instance method getLayer()
+      // instead of the static method (this would lead to infinite
+      // recursion).
+      return lp.getLayer((Component) comp);
+  }
+
+  /**
+   * Returns the first JLayeredPane that contains the Component
+   * <code>comp</code> or <code>null</code> if <code>comp</code> is
+   * not contained in a JLayeredPane.
+   *
+   * @param comp the component for which we are searching the JLayeredPane
+   *     ancestor
+   *
+   * @return the first JLayeredPane that contains the Component
+   *     <code>comp</code> or <code>null</code> if <code>comp</code> is
+   *     not contained in a JLayeredPane
+   */
+  public static JLayeredPane getLayeredPaneAbove(Component comp)
+  {
+    JLayeredPane lp = (JLayeredPane) SwingUtilities.getAncestorOfClass
+      (JLayeredPane.class, comp);
+    return lp;
+  }
+
+  /**
    * <p>Returns a pair of ints representing a half-open interval 
    * <code>[top, bottom)</code>, which is the range of component indices 
    * the provided layer number corresponds to.</p>
@@ -557,4 +599,15 @@
     revalidate();
     repaint();
   }     
+
+  /**
+   * Sets the layer property for a JComponent.
+   *
+   * @param component the component for which to set the layer
+   * @param layer the layer property to set
+   */
+  public static void putLayer(JComponent component, int layer)
+  {
+    getLayeredPaneAbove(component).setLayer(component, layer);
+  }
 }
Index: libjava/javax/swing/JList.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JList.java,v
retrieving revision 1.14
diff -u -r1.14 JList.java
--- libjava/javax/swing/JList.java	17 Feb 2005 07:48:51 -0000	1.14
+++ libjava/javax/swing/JList.java	9 Jul 2005 22:10:05 -0000
@@ -53,6 +53,7 @@
 import javax.swing.event.ListSelectionEvent;
 import javax.swing.event.ListSelectionListener;
 import javax.swing.plaf.ListUI;
+import javax.swing.text.Position;
 
 /**
  * <p>This class is a facade over three separate objects: {@link
@@ -1029,32 +1030,20 @@
    */
   public Dimension getPreferredScrollableViewportSize()
   {
-    int vis = getVisibleRowCount();
-    int nrows = getModel() == null ? 0 : getModel().getSize();
-    // FIXME: this is a somewhat arbitrary default, but.. ?
-    Dimension single = new Dimension(10, 10);;
-    Rectangle bounds = null;
 
-    if (vis > nrows)
+    Dimension retVal = getPreferredSize();
+    if (getLayoutOrientation() == VERTICAL)
       {
-        if (fixedCellWidth != -1 && 
-            fixedCellHeight != -1)
+        if (fixedCellHeight != -1)
           {
-            single = new Dimension(fixedCellWidth, fixedCellHeight);
-          }
-        else if (nrows != 0 && getUI() != null)
-          {
-            Rectangle tmp = getUI().getCellBounds(this, 0, 0);
-            if (tmp != null)
-              single = tmp.getSize();
-          }
-      }
-    else if (getUI() != null)
-      {
-        return getUI().getCellBounds(this, 0, vis - 1).getSize();
+            if (fixedCellWidth != -1)
+              {
+                int size = getModel().getSize();
+                retVal = new Dimension(fixedCellWidth, size * fixedCellHeight);
+              } // TODO: add else clause (preferredSize is ok for now)
+          } // TODO: add else clause (preferredSize is ok for now)
       }
-
-    return new Dimension(single.width, single.height * vis);
+    return retVal;
   }
 
   /**
@@ -1193,7 +1182,19 @@
    */
   public boolean getScrollableTracksViewportWidth()
   {
-    return false;
+    Component parent = getParent();
+    boolean retVal = false;
+    if (parent instanceof JViewport)
+      {
+        JViewport viewport = (JViewport) parent;
+        Dimension pref = getPreferredSize();
+        if (viewport.getSize().width > pref.width)
+          retVal = true;
+        if ((getLayoutOrientation() == HORIZONTAL_WRAP)
+            && (getVisibleRowCount() <= 0))
+          retVal = true;
+      }
+    return retVal;
   }
 
   /**
@@ -1206,7 +1207,19 @@
    */
   public boolean getScrollableTracksViewportHeight()
   {
-    return false;
+    Component parent = getParent();
+    boolean retVal = false;
+    if (parent instanceof JViewport)
+      {
+        JViewport viewport = (JViewport) parent;
+        Dimension pref = getPreferredSize();
+        if (viewport.getSize().height > pref.height)
+          retVal = true;
+        if ((getLayoutOrientation() == VERTICAL_WRAP)
+            && (getVisibleRowCount() <= 0))
+          retVal = true;
+      }
+    return retVal;
   }
 
   public int getAnchorSelectionIndex()
@@ -1323,4 +1336,81 @@
     layoutOrientation = orientation;
     firePropertyChange("layoutOrientation", old, orientation);
   }
+
+  /**
+   * Returns the bounds of the rectangle that encloses both list cells
+   * with index0 and index1.
+   *
+   * @param index0 the index of the first cell
+   * @param index1 the index of the second cell
+   *
+   * @return  the bounds of the rectangle that encloses both list cells
+   *     with index0 and index1, <code>null</code> if one of the indices is
+   *     not valid
+   */
+  public Rectangle getCellBounds(int index0, int index1)
+  {
+    return ((ListUI) ui).getCellBounds(this, index0, index1);
+  }
+
+  /**
+   * Returns the next list element (beginning from <code>startIndex</code>
+   * that starts with <code>prefix</code>. Searching is done in the direction
+   * specified by <code>bias</code>.
+   *
+   * @param prefix the prefix to search for in the cell values
+   * @param startIndex the index where to start searching from
+   * @param bias the search direction, either {@link Position.Bias.Forward}
+   *     or {@link Position.Bias.Backward}
+   *
+   * @return the index of the found element or -1 if no such element has
+   *     been found
+   *
+   * @throws IllegalArgumentException if prefix is <code>null</code> or
+   *     startIndex is not valid
+   *
+   * @since 1.4
+   */
+  public int getNextMatch(String prefix, int startIndex, Position.Bias bias)
+  {
+    if (prefix == null)
+      throw new IllegalArgumentException("The argument 'prefix' must not be"
+                                         + " null.");
+    if (startIndex < 0)
+      throw new IllegalArgumentException("The argument 'startIndex' must not"
+                                         + " be less than zero.");
+
+    int size = model.getSize();
+    if (startIndex > model.getSize())
+      throw new IllegalArgumentException("The argument 'startIndex' must not"
+                                         + " be greater than the number of"
+                                         + " elements in the ListModel.");
+
+    int index = -1;
+    if (bias == Position.Bias.Forward)
+      {
+        for (int i = startIndex; i < size; i++)
+          {
+            String item = model.getElementAt(i).toString();
+            if (item.startsWith(prefix))
+              {
+                index = i;
+                break;
+              }
+          }
+      }
+    else
+      {
+        for (int i = startIndex; i >= 0; i--)
+          {
+            String item = model.getElementAt(i).toString();
+            if (item.startsWith(prefix))
+              {
+                index = i;
+                break;
+              }
+          }
+      }
+    return index;
+  }
 }
Index: libjava/javax/swing/JMenu.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JMenu.java,v
retrieving revision 1.9
diff -u -r1.9 JMenu.java
--- libjava/javax/swing/JMenu.java	16 Feb 2005 20:02:29 -0000	1.9
+++ libjava/javax/swing/JMenu.java	9 Jul 2005 22:10:06 -0000
@@ -162,7 +162,8 @@
    */
   public Component add(Component component)
   {
-    return popupMenu.add(component);
+    popupMenu.insert(component, -1);
+    return component;
   }
 
   /**
@@ -796,6 +797,8 @@
   protected class AccessibleJMenu extends AccessibleJMenuItem
     implements AccessibleSelection
   {
+    private static final long serialVersionUID = -8131864021059524309L;
+
     protected AccessibleJMenu()
     {
     }
Index: libjava/javax/swing/JMenuItem.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JMenuItem.java,v
retrieving revision 1.11
diff -u -r1.11 JMenuItem.java
--- libjava/javax/swing/JMenuItem.java	16 Feb 2005 20:02:29 -0000	1.11
+++ libjava/javax/swing/JMenuItem.java	9 Jul 2005 22:10:06 -0000
@@ -163,6 +163,7 @@
   protected void init(String text, Icon icon)
   {
     super.init(text, icon);
+    setModel(new DefaultButtonModel());
 
     // Initializes properties for this menu item, that are different
     // from Abstract button properties. 
Index: libjava/javax/swing/JPopupMenu.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JPopupMenu.java,v
retrieving revision 1.12
diff -u -r1.12 JPopupMenu.java
--- libjava/javax/swing/JPopupMenu.java	16 Feb 2005 20:02:32 -0000	1.12
+++ libjava/javax/swing/JPopupMenu.java	9 Jul 2005 22:10:06 -0000
@@ -261,9 +261,6 @@
     constraints.weightx = 100.0;
     constraints.weighty = 100.0;
 
-    if (index == -1)
-      index = getComponents().length;
-
     constraints.gridy = index;
     super.add(component, constraints, index);
 
Index: libjava/javax/swing/JProgressBar.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JProgressBar.java,v
retrieving revision 1.9
diff -u -r1.9 JProgressBar.java
--- libjava/javax/swing/JProgressBar.java	17 Feb 2005 07:48:51 -0000	1.9
+++ libjava/javax/swing/JProgressBar.java	9 Jul 2005 22:10:06 -0000
@@ -45,6 +45,7 @@
 import javax.accessibility.AccessibleRole;
 import javax.accessibility.AccessibleStateSet;
 import javax.accessibility.AccessibleValue;
+import javax.swing.border.Border;
 import javax.swing.event.ChangeEvent;
 import javax.swing.event.ChangeListener;
 import javax.swing.plaf.ProgressBarUI;
@@ -285,9 +286,11 @@
    */
   protected void paintBorder(Graphics graphics)
   {
-    getBorder().paintBorder(this, graphics, 0, 0,
-                            getWidth(),
-                            getHeight());
+    Border border = getBorder();
+    if (paintBorder && border != null)
+      border.paintBorder(this, graphics, 0, 0,
+                         getWidth(),
+                         getHeight());
   }
 
   /**
Index: libjava/javax/swing/JRadioButton.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JRadioButton.java,v
retrieving revision 1.9
diff -u -r1.9 JRadioButton.java
--- libjava/javax/swing/JRadioButton.java	17 Feb 2005 07:48:52 -0000	1.9
+++ libjava/javax/swing/JRadioButton.java	9 Jul 2005 22:10:06 -0000
@@ -79,6 +79,7 @@
   protected class AccessibleJRadioButton
     extends AccessibleJToggleButton
   {
+    private static final long serialVersionUID = 4850967637026120674L;
 
     /**
      * Constructor for the accessible toggle button.
Index: libjava/javax/swing/JRootPane.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JRootPane.java,v
retrieving revision 1.10
diff -u -r1.10 JRootPane.java
--- libjava/javax/swing/JRootPane.java	16 Feb 2005 20:02:33 -0000	1.10
+++ libjava/javax/swing/JRootPane.java	9 Jul 2005 22:10:06 -0000
@@ -189,52 +189,52 @@
       */
       if (containerSize.width == 0 && containerSize.height == 0)
         {
-	  if (menuBar != null)
-	    {
-	      int maxWidth;
-	      menuBarSize = menuBar.getPreferredSize();
-	      maxWidth = Math.max(menuBarSize.width, contentPaneSize.width);
-	      menuBar.setBounds(0, 0, maxWidth, menuBarSize.height);
-	      glassPane.setBounds(0, menuBarSize.height, maxWidth,
-	                          contentPaneSize.height);
-	      contentPane.setBounds(0, menuBarSize.height, maxWidth,
-	                            contentPaneSize.height);
-	      layeredPane.setSize(maxWidth,
-	                          menuBarSize.height + contentPaneSize.height);
-	    }
-	  else
-	    {
-	      glassPane.setBounds(0, 0, contentPaneSize.width,
-	                          contentPaneSize.height);
-	      contentPane.setBounds(0, 0, contentPaneSize.width,
-	                            contentPaneSize.height);
-	      layeredPane.setSize(contentPaneSize.width, contentPaneSize.height);
-	    }
+          if (menuBar != null)
+            {
+              int maxWidth;
+              menuBarSize = menuBar.getPreferredSize();
+              maxWidth = Math.max(menuBarSize.width, contentPaneSize.width);
+              menuBar.setBounds(0, 0, maxWidth, menuBarSize.height);
+              glassPane.setBounds(0, menuBarSize.height, maxWidth,
+                                  contentPaneSize.height);
+              contentPane.setBounds(0, menuBarSize.height, maxWidth,
+                                    contentPaneSize.height);
+              layeredPane.setSize(maxWidth,
+                                  menuBarSize.height + contentPaneSize.height);
+            }
+          else
+            {
+              glassPane.setBounds(0, 0, contentPaneSize.width,
+                                  contentPaneSize.height);
+              contentPane.setBounds(0, 0, contentPaneSize.width,
+                                    contentPaneSize.height);
+              layeredPane.setSize(contentPaneSize.width, contentPaneSize.height);
+            }
         }
       else
         {
-	  if (menuBar != null)
-	    {
-	      menuBarSize = menuBar.getPreferredSize();
-	      if (menuBarSize.height > containerSize.height)
-		menuBarSize.height = containerSize.height;
-	      menuBar.setBounds(0, 0, containerSize.width, menuBarSize.height);
-	      int remainingHeight = containerSize.height - menuBarSize.height;
-	      glassPane.setBounds(0, menuBarSize.height, containerSize.width,
-	                          containerSize.height - menuBarSize.height);
-	      contentPane.setBounds(0, menuBarSize.height,
-	                            containerSize.width,
-	                            (containerSize.height - menuBarSize.height));
-	    }
-	  else
-	    {
-	      glassPane.setBounds(0, 0, containerSize.width,
-	                          containerSize.height);
-	      contentPane.setBounds(0, 0, containerSize.width,
-	                            containerSize.height);
-	    }
+          if (menuBar != null)
+            {
+              menuBarSize = menuBar.getPreferredSize();
+              if (menuBarSize.height > containerSize.height)
+                menuBarSize.height = containerSize.height;
+              menuBar.setBounds(0, 0, containerSize.width, menuBarSize.height);
+              int remainingHeight = containerSize.height - menuBarSize.height;
+              glassPane.setBounds(0, menuBarSize.height, containerSize.width,
+                                  containerSize.height - menuBarSize.height);
+              contentPane.setBounds(0, menuBarSize.height,
+                                    containerSize.width,
+                                    (containerSize.height - menuBarSize.height));
+            }
+          else
+            {
+              glassPane.setBounds(0, 0, containerSize.width,
+                                  containerSize.height);
+              contentPane.setBounds(0, 0, containerSize.width,
+                                    containerSize.height);
+            }
 
-	  layeredPane.setSize(containerSize.width, containerSize.height);
+          layeredPane.setSize(containerSize.width, containerSize.height);
         }
     }
 
@@ -279,20 +279,20 @@
 
       if (containerSize.width == 0 && containerSize.height == 0)
         {
-	  if (menuBar != null)
-	    {
-	      int maxWidth;
-	      menuBarSize = menuBar.getPreferredSize();
-	      maxWidth = Math.max(menuBarSize.width, contentPaneSize.width);
-	      prefSize = new Dimension(maxWidth,
-	                               contentPaneSize.height
-	                               + menuBarSize.height);
-	    }
-	  else
-	    prefSize = contentPaneSize;
+          if (menuBar != null)
+            {
+              int maxWidth;
+              menuBarSize = menuBar.getPreferredSize();
+              maxWidth = Math.max(menuBarSize.width, contentPaneSize.width);
+              prefSize = new Dimension(maxWidth,
+                                       contentPaneSize.height
+                                       + menuBarSize.height);
+            }
+          else
+            prefSize = contentPaneSize;
         }
       else
-	prefSize = c.getSize();
+        prefSize = c.getSize();
 
       return prefSize;
     }
@@ -319,7 +319,7 @@
   public static final int FILE_CHOOSER_DIALOG = 6;
   public static final int QUESTION_DIALOG = 7;
   public static final int WARNING_DIALOG = 8;
-	  
+          
   /** DOCUMENT ME! */
   protected Component glassPane;
 
@@ -609,13 +609,13 @@
   public void setWindowDecorationStyle(int style)
   {
     if (style != NONE
-	&& style != FRAME
-	&& style != INFORMATION_DIALOG
-	&& style != ERROR_DIALOG
-	&& style != COLOR_CHOOSER_DIALOG
-	&& style != FILE_CHOOSER_DIALOG
-	&& style != QUESTION_DIALOG
-	&& style != WARNING_DIALOG)
+        && style != FRAME
+        && style != INFORMATION_DIALOG
+        && style != ERROR_DIALOG
+        && style != COLOR_CHOOSER_DIALOG
+        && style != FILE_CHOOSER_DIALOG
+        && style != QUESTION_DIALOG
+        && style != WARNING_DIALOG)
       throw new IllegalArgumentException("invalid style");
     
     int oldStyle = windowDecorationStyle;
Index: libjava/javax/swing/JScrollPane.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JScrollPane.java,v
retrieving revision 1.11
diff -u -r1.11 JScrollPane.java
--- libjava/javax/swing/JScrollPane.java	16 Feb 2005 20:02:33 -0000	1.11
+++ libjava/javax/swing/JScrollPane.java	9 Jul 2005 22:10:06 -0000
@@ -645,6 +645,8 @@
     extends JScrollBar
     implements UIResource
   {
+    private static final long serialVersionUID = -42032395320987283L;
+
     public ScrollBar(int orientation)
     {
       super(orientation);
Index: libjava/javax/swing/JSeparator.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JSeparator.java,v
retrieving revision 1.6
diff -u -r1.6 JSeparator.java
--- libjava/javax/swing/JSeparator.java	17 Jun 2004 23:43:12 -0000	1.6
+++ libjava/javax/swing/JSeparator.java	9 Jul 2005 22:10:06 -0000
@@ -183,17 +183,6 @@
   }
 
   /**
-   * This method overrides the isFocusTraversable method from
-   * Component to false. JSeparator cannot be focused on.
-   *
-   * @return boolean False.
-   */
-  public boolean isFocusTraversable()
-  {
-    return false;
-  }
-
-  /**
    * getAccessibleContext
    *
    * @return AccessibleContext
Index: libjava/javax/swing/JSpinner.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JSpinner.java,v
retrieving revision 1.4
diff -u -r1.4 JSpinner.java
--- libjava/javax/swing/JSpinner.java	16 Feb 2005 20:02:34 -0000	1.4
+++ libjava/javax/swing/JSpinner.java	9 Jul 2005 22:10:06 -0000
@@ -279,6 +279,8 @@
     }
   }
 
+  private static final long serialVersionUID = 3412663575706551720L;
+
   /** DOCUMENT ME! */
   private SpinnerModel model;
 
Index: libjava/javax/swing/JTabbedPane.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JTabbedPane.java,v
retrieving revision 1.12
diff -u -r1.12 JTabbedPane.java
--- libjava/javax/swing/JTabbedPane.java	16 Feb 2005 20:02:34 -0000	1.12
+++ libjava/javax/swing/JTabbedPane.java	9 Jul 2005 22:10:06 -0000
@@ -530,6 +530,8 @@
     }
   }
 
+  private static final long serialVersionUID = 1614381073220130939L;
+
   /** The changeEvent used to fire changes to listeners. */
   protected ChangeEvent changeEvent;
 
Index: libjava/javax/swing/JTable.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JTable.java,v
retrieving revision 1.10
diff -u -r1.10 JTable.java
--- libjava/javax/swing/JTable.java	16 Feb 2005 20:02:36 -0000	1.10
+++ libjava/javax/swing/JTable.java	9 Jul 2005 22:10:07 -0000
@@ -43,6 +43,9 @@
 import java.awt.Dimension;
 import java.awt.Point;
 import java.awt.Rectangle;
+import java.text.DateFormat;
+import java.text.NumberFormat;
+import java.util.Date;
 import java.util.Hashtable;
 import java.util.Vector;
 
@@ -71,6 +74,212 @@
   implements TableModelListener, Scrollable, TableColumnModelListener,
              ListSelectionListener, CellEditorListener, Accessible
 {
+
+  /**
+   * A cell renderer for boolean values.
+   */
+  private class BooleanCellRenderer
+    extends DefaultTableCellRenderer
+  {
+
+    /**
+     * The CheckBox that is used for rendering.
+     */
+    private JCheckBox checkBox = new JCheckBox();
+
+    /**
+     * Returns the component that is used for rendering the value.
+     *
+     * @param table the JTable
+     * @param value the value of the object
+     * @param isSelected is the cell selected?
+     * @param hasFocus has the cell the focus?
+     * @param row the row to render
+     * @param column the cell to render
+     * 
+     * @return this component (the default table cell renderer)
+     */
+    public Component getTableCellRendererComponent(JTable table, Object value,
+                                                   boolean isSelected,
+                                                   boolean hasFocus, int row,
+                                                   int column)
+    {
+      Boolean boolValue = (Boolean) value;
+      checkBox.setSelected(boolValue.booleanValue());
+      return checkBox;
+    }
+  }
+
+  /**
+   * A cell renderer for Date values.
+   */
+  private class DateCellRenderer
+    extends DefaultTableCellRenderer
+  {
+    /**
+     * Returns the component that is used for rendering the value.
+     *
+     * @param table the JTable
+     * @param value the value of the object
+     * @param isSelected is the cell selected?
+     * @param hasFocus has the cell the focus?
+     * @param row the row to render
+     * @param column the cell to render
+     * 
+     * @return this component (the default table cell renderer)
+     */
+    public Component getTableCellRendererComponent(JTable table, Object value,
+                                                   boolean isSelected,
+                                                   boolean hasFocus, int row,
+                                                   int column)
+    {
+      super.getTableCellRendererComponent(table, value, isSelected, hasFocus,
+                                          row, column);
+      if (value instanceof Date)
+        {
+          Date dateValue = (Date) value;
+          DateFormat df = DateFormat.getDateInstance(DateFormat.SHORT);
+          setText(df.format(dateValue));
+        }
+      return this;
+    }
+  }
+
+  /**
+   * A cell renderer for Double values.
+   */
+  private class DoubleCellRenderer
+    extends DefaultTableCellRenderer
+  {
+    /**
+     * Creates a new instance of NumberCellRenderer.
+     */
+    public DoubleCellRenderer()
+    {
+      setHorizontalAlignment(JLabel.RIGHT);
+    }
+
+    /**
+     * Returns the component that is used for rendering the value.
+     *
+     * @param table the JTable
+     * @param value the value of the object
+     * @param isSelected is the cell selected?
+     * @param hasFocus has the cell the focus?
+     * @param row the row to render
+     * @param column the cell to render
+     * 
+     * @return this component (the default table cell renderer)
+     */
+    public Component getTableCellRendererComponent(JTable table, Object value,
+                                                   boolean isSelected,
+                                                   boolean hasFocus, int row,
+                                                   int column)
+    {
+      super.getTableCellRendererComponent(table, value, isSelected, hasFocus,
+                                          row, column);
+      if (value instanceof Double)
+        {
+          Double doubleValue = (Double) value;
+          NumberFormat nf = NumberFormat.getInstance();
+          setText(nf.format(doubleValue.doubleValue()));
+        }
+      return this;
+    }
+  }
+
+  /**
+   * A cell renderer for Float values.
+   */
+  private class FloatCellRenderer
+    extends DefaultTableCellRenderer
+  {
+    /**
+     * Creates a new instance of NumberCellRenderer.
+     */
+    public FloatCellRenderer()
+    {
+      setHorizontalAlignment(JLabel.RIGHT);
+    }
+
+    /**
+     * Returns the component that is used for rendering the value.
+     *
+     * @param table the JTable
+     * @param value the value of the object
+     * @param isSelected is the cell selected?
+     * @param hasFocus has the cell the focus?
+     * @param row the row to render
+     * @param column the cell to render
+     * 
+     * @return this component (the default table cell renderer)
+     */
+    public Component getTableCellRendererComponent(JTable table, Object value,
+                                                   boolean isSelected,
+                                                   boolean hasFocus, int row,
+                                                   int column)
+    {
+      super.getTableCellRendererComponent(table, value, isSelected, hasFocus,
+                                          row, column);
+      if (value instanceof Float)
+        {
+          Float floatValue = (Float) value;
+          NumberFormat nf = NumberFormat.getInstance();
+          setText(nf.format(floatValue.floatValue()));
+        }
+      return this;
+    }
+  }
+
+  /**
+   * A cell renderer for Number values.
+   */
+  private class NumberCellRenderer
+    extends DefaultTableCellRenderer
+  {
+    /**
+     * Creates a new instance of NumberCellRenderer.
+     */
+    public NumberCellRenderer()
+    {
+      setHorizontalAlignment(JLabel.RIGHT);
+    }
+  }
+
+  /**
+   * A cell renderer for Icon values.
+   */
+  private class IconCellRenderer
+    extends DefaultTableCellRenderer
+  {
+    /**
+     * Returns the component that is used for rendering the value.
+     *
+     * @param table the JTable
+     * @param value the value of the object
+     * @param isSelected is the cell selected?
+     * @param hasFocus has the cell the focus?
+     * @param row the row to render
+     * @param column the cell to render
+     * 
+     * @return this component (the default table cell renderer)
+     */
+    public Component getTableCellRendererComponent(JTable table, Object value,
+                                                   boolean isSelected,
+                                                   boolean hasFocus, int row,
+                                                   int column)
+    {
+      super.getTableCellRendererComponent(table, value, isSelected, hasFocus,
+                                          row, column);
+      if (value instanceof Icon)
+        {
+          Icon iconValue = (Icon) value;
+          setIcon(iconValue);
+        }
+      return this;
+    }
+  }
+
   private static final long serialVersionUID = 3876025080382781659L;
 
 
@@ -476,7 +685,12 @@
 
   protected void createDefaultRenderers()
   {
-    //FIXME: Create the renderer object.
+    setDefaultRenderer(Boolean.class, new BooleanCellRenderer());
+    setDefaultRenderer(Number.class, new NumberCellRenderer());
+    setDefaultRenderer(Double.class, new DoubleCellRenderer());
+    setDefaultRenderer(Double.class, new FloatCellRenderer());
+    setDefaultRenderer(Date.class, new DateCellRenderer());
+    setDefaultRenderer(Icon.class, new IconCellRenderer());
   }
   
   /**
@@ -1580,44 +1794,22 @@
 
 
   /**
-   * Sun javadocs describe an unusual implementation of
-   * <code>doLayout</code> which involves some private interfaces. We try
-   * to implement the same algorithm as is documented, but using the
-   * columnModel directly. We still use a private helper method, but it has
-   * a simpler signature.
+   * This distributes the superfluous width in a table evenly on its columns.
+   *
+   * The implementation used here is different to that one described in
+   * the JavaDocs. It is much simpler, and seems to work very well.
+   *
+   * TODO: correctly implement the algorithm described in the JavaDoc
    */
-
   private void distributeSpill(TableColumn[] cols, int spill)
   {
-    int MIN = 0;
-    int MAX = 0;
-    int PREF = 0;
-
-    int[] min = new int[cols.length];
-    int[] max = new int[cols.length];
-    int[] pref = new int[cols.length];
-
-    for (int i = 0; i < cols.length; ++i)
+    int average = spill / cols.length;
+    for (int i = 0; i < cols.length; i++)
       {
-        pref[i] = cols[i].getPreferredWidth();
-        min[i] = cols[i].getMinWidth();
-        max[i] = cols[i].getMaxWidth();
-        PREF += pref[i];
-        MIN += min[i];
-        MAX += max[i];
+        cols[i].setWidth(cols[i].getWidth() + average);
       }
-
-    for (int i = 0; i < cols.length; ++i)
-      {
-        int adj = 0;
-        if (spill > 0)          
-          adj = (spill * (pref[i] - min[i])) / (PREF - MIN);
-        else
-          adj = (spill * (max[i] - pref[i])) / (MAX - PREF);
-        cols[i].setWidth(pref[i] + adj);        
-      }    
   }
-  
+
   public void doLayout()
   {
     TableColumn resizingColumn = null;
@@ -1643,7 +1835,7 @@
           rCol = i;
       }
 
-    int spill = prefSum - getWidth();
+    int spill = getWidth() - prefSum;
 
     if (resizingColumn != null)
       {
Index: libjava/javax/swing/JTextArea.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JTextArea.java,v
retrieving revision 1.5
diff -u -r1.5 JTextArea.java
--- libjava/javax/swing/JTextArea.java	17 Feb 2005 07:48:52 -0000	1.5
+++ libjava/javax/swing/JTextArea.java	9 Jul 2005 22:10:07 -0000
@@ -38,13 +38,16 @@
 
 package javax.swing;
 
+import java.awt.Dimension;
 import java.awt.FontMetrics;
+import java.awt.Rectangle;
 
 import javax.swing.text.BadLocationException;
 import javax.swing.text.Document;
 import javax.swing.text.Element;
 import javax.swing.text.JTextComponent;
 import javax.swing.text.PlainDocument;
+import javax.swing.text.View;
 
 /**
  * The <code>JTextArea</code> component provides a multi-line area for displaying
@@ -230,6 +233,55 @@
   }
 
   /**
+   * Returns the increment that is needed to expose exactly one new line
+   * of text. This is implemented here to return the values of
+   * {@link #getRowHeight} and {@link getColumnWidth}, depending on
+   * the value of the argument <code>direction</code>.
+   *
+   * @param visibleRect the view area that is visible in the viewport
+   * @param orientation either {@link SwingConstants.VERTICAL} or
+   *     {@link SwingConstants.HORIZONTAL}
+   * @param direction less than zero for up/left scrolling, greater
+   *     than zero for down/right scrolling
+   *
+   * @return the increment that is needed to expose exactly one new row
+   *     or column of text
+   *
+   * @throws IllegalArgumentException if <code>orientation</code> is invalid
+   */
+  public int getScrollableUnitIncrement(Rectangle visibleRect, int orientation,
+                                        int direction)
+  {
+    if (orientation == SwingConstants.VERTICAL)
+      return getRowHeight();
+    else if (orientation == SwingConstants.HORIZONTAL)
+      return getColumnWidth();
+    else
+      throw new IllegalArgumentException("orientation must be either "
+                                     + "javax.swing.SwingConstants.VERTICAL "
+                                     + "or "
+                                     + "javax.swing.SwingConstants.HORIZONTAL"
+                                     );
+  }
+
+  /**
+   * Returns the preferred size of that text component in the case
+   * it is embedded within a JScrollPane. This uses the column and
+   * row settings if they are explicitly set, or fall back to
+   * the superclass's behaviour.
+   *
+   * @return the preferred size of that text component in the case
+   *     it is embedded within a JScrollPane
+   */
+  public Dimension getPreferredScrollableViewportSize()
+  {
+    if ((rows > 0) && (columns > 0))
+      return new Dimension(columns * getColumnWidth(), rows * getRowHeight());
+    else
+      return super.getPreferredScrollableViewportSize();
+  }
+
+  /**
    * Returns the UI class ID string.
    *
    * @return the string "TextAreaUI"
@@ -469,12 +521,30 @@
 
     try
       {
-	doc.remove(start, end);
-	doc.insertString(start, text, null);
+        doc.remove(start, end - start);
+        doc.insertString(start, text, null);
       }
     catch (BadLocationException e)
       {
 	// This cannot happen as we check offset above.
       }
   }
+
+  /**
+   * Returns the preferred size for the JTextArea. This is the maximum of
+   * the size that is needed to display the content and the requested size
+   * as per {@link #getColumns} and {@link #getRows}.
+   *
+   * @return the preferred size of the JTextArea
+   */
+  public Dimension getPreferredSize()
+  {
+    int reqWidth = getColumns() * getColumnWidth();
+    int reqHeight = getRows() * getRowHeight();
+    View view = getUI().getRootView(this);
+    int neededWidth = (int) view.getPreferredSpan(View.HORIZONTAL);
+    int neededHeight = (int) view.getPreferredSpan(View.VERTICAL);
+    return new Dimension(Math.max(reqWidth, neededWidth),
+                          Math.max(reqHeight, neededHeight));
+  }
 }
Index: libjava/javax/swing/JTextField.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JTextField.java,v
retrieving revision 1.10
diff -u -r1.10 JTextField.java
--- libjava/javax/swing/JTextField.java	19 Feb 2005 09:30:03 -0000	1.10
+++ libjava/javax/swing/JTextField.java	9 Jul 2005 22:10:07 -0000
@@ -47,6 +47,8 @@
 import java.beans.PropertyChangeListener;
 
 import javax.accessibility.AccessibleStateSet;
+import javax.swing.text.AttributeSet;
+import javax.swing.text.BadLocationException;
 import javax.swing.text.Document;
 import javax.swing.text.JTextComponent;
 import javax.swing.text.PlainDocument;
@@ -177,6 +179,9 @@
 
     if (text != null)
       setText(text);
+
+    // default value for alignment
+    align = LEADING;
   }
 
   /**
@@ -187,7 +192,15 @@
    */
   protected Document createDefaultModel()
   {
-    return new PlainDocument();
+    // subclassed to swallow newlines
+    return new PlainDocument() {
+        public void insertString(int offset, String str, AttributeSet a)
+          throws BadLocationException
+        {
+          if (str.indexOf('\n') == -1)
+            super.insertString(offset, str, a);
+        }
+      };
   }
 
   /**
Index: libjava/javax/swing/JToggleButton.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JToggleButton.java,v
retrieving revision 1.10
diff -u -r1.10 JToggleButton.java
--- libjava/javax/swing/JToggleButton.java	17 Feb 2005 07:48:52 -0000	1.10
+++ libjava/javax/swing/JToggleButton.java	9 Jul 2005 22:10:07 -0000
@@ -69,6 +69,7 @@
     extends AccessibleAbstractButton
     implements ItemListener
   {
+    private static final long serialVersionUID = -8652952712161229225L;
 
     /**
      * Constructor for the accessible toggle button.
@@ -243,9 +244,9 @@
   {
     super(text, icon);
 
-    horizontalAlignment = LEADING;
     setModel(new ToggleButtonModel());	
     model.setSelected(selected);
+    model.setActionCommand("");
   }
 
   /**
Index: libjava/javax/swing/JToolBar.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JToolBar.java,v
retrieving revision 1.8
diff -u -r1.8 JToolBar.java
--- libjava/javax/swing/JToolBar.java	16 Feb 2005 20:02:37 -0000	1.8
+++ libjava/javax/swing/JToolBar.java	9 Jul 2005 22:10:08 -0000
@@ -50,6 +50,7 @@
 import javax.accessibility.AccessibleContext;
 import javax.accessibility.AccessibleRole;
 import javax.accessibility.AccessibleStateSet;
+import javax.swing.JButton;
 import javax.swing.plaf.ToolBarUI;
 
 /**
@@ -742,6 +743,15 @@
   {
     // XXX: Sun says disable button but test cases show otherwise.
     super.addImpl(component, constraints, index);
+
+    // if we added a Swing Button then adjust this a little
+    if (component instanceof AbstractButton)
+      {
+        AbstractButton b = (AbstractButton) component;
+        b.setRolloverEnabled(rollover);
+        b.updateUI();
+      }
+
   } // addImpl()
 
   /**
Index: libjava/javax/swing/JToolTip.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JToolTip.java,v
retrieving revision 1.6
diff -u -r1.6 JToolTip.java
--- libjava/javax/swing/JToolTip.java	30 Nov 2004 23:58:58 -0000	1.6
+++ libjava/javax/swing/JToolTip.java	9 Jul 2005 22:10:08 -0000
@@ -60,6 +60,8 @@
    */
   protected class AccessibleJToolTip extends AccessibleJComponent
   {
+    private static final long serialVersionUID = -6222548177795408476L;
+
     /**
      * Creates a new AccessibleJToolTip object.
      */
Index: libjava/javax/swing/JTree.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JTree.java,v
retrieving revision 1.9
diff -u -r1.9 JTree.java
--- libjava/javax/swing/JTree.java	17 Feb 2005 07:48:52 -0000	1.9
+++ libjava/javax/swing/JTree.java	9 Jul 2005 22:10:08 -0000
@@ -40,6 +40,7 @@
 
 import java.awt.Dimension;
 import java.awt.Rectangle;
+import java.io.Serializable;
 import java.util.Enumeration;
 import java.util.Hashtable;
 import java.util.Iterator;
@@ -49,13 +50,17 @@
 import javax.accessibility.AccessibleContext;
 import javax.swing.event.TreeExpansionEvent;
 import javax.swing.event.TreeExpansionListener;
+import javax.swing.event.TreeModelEvent;
+import javax.swing.event.TreeModelListener;
 import javax.swing.event.TreeSelectionEvent;
 import javax.swing.event.TreeSelectionListener;
 import javax.swing.event.TreeWillExpandListener;
 import javax.swing.plaf.TreeUI;
+import javax.swing.text.Position;
 import javax.swing.tree.DefaultMutableTreeNode;
 import javax.swing.tree.DefaultTreeCellRenderer;
 import javax.swing.tree.DefaultTreeModel;
+import javax.swing.tree.DefaultTreeSelectionModel;
 import javax.swing.tree.ExpandVetoException;
 import javax.swing.tree.TreeCellEditor;
 import javax.swing.tree.TreeCellRenderer;
@@ -68,6 +73,172 @@
 public class JTree extends JComponent
   implements Scrollable, Accessible
 {
+  /**
+   * Listens to the model of the JTree and updates the property
+   * <code>expandedState</code> if nodes are removed or changed.
+   */
+  protected class TreeModelHandler
+    implements TreeModelListener
+  {
+
+    /**
+     * Creates a new instance of TreeModelHandler.
+     */
+    protected TreeModelHandler()
+    {
+    }
+
+    /**
+     * Notifies when a node has changed in some ways. This does not include
+     * that a node has changed its location or changed it's children. It
+     * only means that some attributes of the node have changed that might
+     * affect its presentation.
+     *
+     * This method is called after the actual change occured.
+     *
+     * @param ev the TreeModelEvent describing the change
+     */
+    public void treeNodesChanged(TreeModelEvent ev)
+    {
+      // nothing to do here
+    }
+
+    /**
+     * Notifies when a node is inserted into the tree.
+     *
+     * This method is called after the actual change occured.
+     *
+     * @param ev the TreeModelEvent describing the change
+     */
+    public void treeNodesInserted(TreeModelEvent ev)
+    {
+      // nothing to do here
+    }
+
+    /**
+     * Notifies when a node is removed from the tree.
+     *
+     * This method is called after the actual change occured.
+     *
+     * @param ev the TreeModelEvent describing the change
+     */
+    public void treeNodesRemoved(TreeModelEvent ev)
+    {
+      // TODO: The API docs suggest that this method should do something
+      // but I cannot really see what has to be done here ...
+    }
+
+    /**
+     * Notifies when the structure of the tree is changed.
+     *
+     * This method is called after the actual change occured.
+     *
+     * @param ev the TreeModelEvent describing the change
+     */
+    public void treeStructureChanged(TreeModelEvent ev)
+    {
+      // set state of new path
+      TreePath path = ev.getTreePath();
+      setExpandedState(path, isExpanded(path));
+    }
+  } // TreeModelHandler
+
+  /**
+   * This redirects TreeSelectionEvents and rewrites the source of it
+   * to be this JTree. This is typically done when the tree model
+   * generates an event, but the JTree object associated with that model
+   * should be listed as the actual source of the event.
+   */
+  protected class TreeSelectionRedirector
+    implements TreeSelectionListener, Serializable
+  {
+    /** The serial version UID. */
+    private static final long serialVersionUID = -3505069663646241664L;
+
+    /**
+     * Creates a new instance of TreeSelectionRedirector
+     */
+    protected TreeSelectionRedirector()
+    {
+    }
+
+    /**
+     * Notifies when the tree selection changes.
+     *
+     * @param ev the TreeSelectionEvent that describes the change
+     */
+    public void valueChanged(TreeSelectionEvent ev)
+    {
+      TreeSelectionEvent rewritten =
+        (TreeSelectionEvent) ev.cloneWithSource(JTree.this);
+      fireValueChanged(rewritten);
+    }
+  } // TreeSelectionRedirector
+
+  /**
+   * A TreeModel that does not allow anything to be selected.
+   */
+  protected static class EmptySelectionModel
+    extends DefaultTreeSelectionModel
+  {
+    /** The serial version UID. */
+    private static final long serialVersionUID = -5815023306225701477L;
+
+    /**
+     * The shared instance of this model.
+     */
+    protected static final EmptySelectionModel sharedInstance =
+    new EmptySelectionModel();
+
+    /**
+     * Creates a new instance of EmptySelectionModel.
+     */
+    protected EmptySelectionModel()
+    {
+    }
+
+    /**
+     * Returns the shared instance of EmptySelectionModel.
+     *
+     * @return the shared instance of EmptySelectionModel
+     */
+    public static EmptySelectionModel sharedInstance()
+    {
+      return sharedInstance;
+    }
+
+    /**
+     * This catches attempts to set a selection and sets nothing
+     * instead.
+     *
+     * @param paths not used here
+     */
+    public void setSelectionPaths(TreePath[] paths)
+    {
+      // we don't allow selections in this class
+    }
+
+    /**
+     * This catches attempts to add something to the selection.
+     *
+     * @param paths not used here
+     */
+    public void addSelectionPaths(TreePath[] paths)
+    {
+      // we don't allow selections in this class
+    }
+
+    /**
+     * This catches attempts to remove something from the selection.
+     *
+     * @param paths not used here
+     */
+    public void removeSelectionPaths(TreePath[] paths)
+    {
+      // we don't allow selections in this class
+    }
+  }// EmptySelectionModel
+
   private static final long serialVersionUID = 7559816092864483649L;
 
   public static final String CELL_EDITOR_PROPERTY = "cellEditor";
@@ -121,6 +292,17 @@
   protected int visibleRowCount;
 
   /**
+   * Handles TreeModelEvents to update the expandedState.
+   */
+  protected transient TreeModelListener treeModelListener;
+
+  /**
+   * Redirects TreeSelectionEvents so that the source is this JTree.
+   */
+  protected TreeSelectionRedirector selectionRedirector =
+    new TreeSelectionRedirector();
+
+  /**
    * Creates a new <code>JTree</code> object.
    */
   public JTree()
@@ -155,7 +337,9 @@
    */
   public JTree(TreeModel model)
   {
-    treeModel = model;
+    setModel(model);
+    setSelectionModel(EmptySelectionModel.sharedInstance());
+    selectionModel.addTreeSelectionListener(selectionRedirector);
     setCellRenderer(new DefaultTreeCellRenderer());
     updateUI();
   }
@@ -233,6 +417,20 @@
       return super.children();
     }
 
+    /**
+     * Returns the child node at position <code>pos</code>. Subclassed here
+     * to load the children if necessary.
+     *
+     * @param pos the position of the child node to fetch
+     *
+     * @return the childnode at the specified position
+     */
+    public TreeNode getChildAt(int pos)
+    {
+      loadChildren();
+      return super.getChildAt(pos);
+    }
+
     public boolean isLeaf() 
     {
       return (childValue == null || 
@@ -582,6 +780,11 @@
     TreeModel oldValue = treeModel;
     treeModel = model;
     firePropertyChange(TREE_MODEL_PROPERTY, oldValue, model);
+
+    // add treeModelListener to the new model
+    if (treeModelListener == null)
+      treeModelListener = createTreeModelListener();
+    model.addTreeModelListener(treeModelListener);
   }
 
   /**
@@ -1389,4 +1592,225 @@
   {    
     return isEditable();
   }
+
+  /**
+   * Creates and returns an instance of {@link TreeModelHandler}.
+   *
+   * @returns an instance of {@link TreeModelHandler}
+   */
+  protected TreeModelListener createTreeModelListener()
+  {
+    return new TreeModelHandler();
+  }
+
+  /**
+   * Returns a sample TreeModel that can be used in a JTree. This can
+   * be used in Bean- or GUI-Builders to show something interesting.
+   *
+   * @return a sample TreeModel that can be used in a JTree
+   */
+  protected static TreeModel getDefaultTreeModel()
+  {
+    DefaultMutableTreeNode root = new DefaultMutableTreeNode("Root node");
+    DefaultMutableTreeNode child1 = new DefaultMutableTreeNode("Child node 1");
+    DefaultMutableTreeNode child11 =
+      new DefaultMutableTreeNode("Child node 1.1");
+    DefaultMutableTreeNode child12 =
+      new DefaultMutableTreeNode("Child node 1.2");
+    DefaultMutableTreeNode child13 =
+      new DefaultMutableTreeNode("Child node 1.3");
+    DefaultMutableTreeNode child2 = new DefaultMutableTreeNode("Child node 2");
+    DefaultMutableTreeNode child21 =
+      new DefaultMutableTreeNode("Child node 2.1");
+    DefaultMutableTreeNode child22 =
+      new DefaultMutableTreeNode("Child node 2.2");
+    DefaultMutableTreeNode child23 =
+      new DefaultMutableTreeNode("Child node 2.3");
+    DefaultMutableTreeNode child24 =
+      new DefaultMutableTreeNode("Child node 2.4");
+
+    DefaultMutableTreeNode child3 = new DefaultMutableTreeNode("Child node 3");
+    root.add(child1);
+    root.add(child2);
+    root.add(child3);
+    child1.add(child11);
+    child1.add(child12);
+    child1.add(child13);
+    child2.add(child21);
+    child2.add(child22);
+    child2.add(child23);
+    child2.add(child24);
+    return new DefaultTreeModel(root);
+  }
+
+  /**
+   * Converts the specified value to a String. This is used by the
+   * renderers of this JTree and its nodes.
+   *
+   * This implementation simply returns <code>value.toString()</code> and
+   * ignores all other parameters.
+   * Subclass this method to control the conversion.
+   *
+   * @param value the value that is converted to a String
+   * @param selected indicates if that value is selected or not
+   * @param expanded indicates if that value is expanded or not
+   * @param leaf indicates if that value is a leaf node or not
+   * @param row the row of the node
+   * @param hasFocus indicates if that node has focus or not
+   */
+  public String convertValueToText(Object value, boolean selected,
+                                   boolean expanded, boolean leaf, int row,
+                                   boolean hasFocus)
+  {
+    return value.toString();
+  }
+
+  /**
+   * A String representation of this JTree. This is intended to be used
+   * for debugging. The returned string may be empty but may not be
+   * <code>null</code>.
+   *
+   * @return a String representation of this JTree
+   */
+  public String paramString()
+  {
+    // TODO: this is completely legal, but it would possibly be nice
+    // to return some more content, like the tree structure, some properties
+    // etc ...
+    return "";
+  }
+
+  /**
+   * Returns all TreePath objects which are a descendants of 
+   * the given path and are exapanded at the moment of the
+   * execution of this method. If the state of any node 
+   * is beeing toggled while this method is executing this 
+   * change may be left unaccounted.
+   *  
+   * @param path The parent of this request
+   * @return An Enumeration containing TreePath objects
+   */
+  public Enumeration getExpandedDescendants(TreePath path) 
+  {
+    Enumeration paths = nodeStates.keys();
+    Vector relevantPaths = new Vector();
+    while(paths.hasMoreElements())
+      {
+        TreePath nextPath = (TreePath) paths.nextElement();
+        if(nodeStates.get(nextPath) == EXPANDED && 
+           path.isDescendant(nextPath)) 
+          {
+            relevantPaths.add(nextPath);
+          }
+      }
+    return relevantPaths.elements();
+  }
+
+  /**
+   * Returns the next table element (beginning from the row
+   * <code>startingRow</code>
+   * that starts with <code>prefix</code>. Searching is done in the direction
+   * specified by <code>bias</code>.
+   *
+   * @param prefix the prefix to search for in the cell values
+   * @param startingRow the index of the row where to start searching from
+   * @param bias the search direction, either {@link Position.Bias.Forward}
+   *     or {@link Position.Bias.Backward}
+   *
+   * @return the path to the found element or -1 if no such element has
+   *     been found
+   *
+   * @throws IllegalArgumentException if prefix is <code>null</code> or
+   *     startingRow is not valid
+   *
+   * @since 1.4
+   */
+  public TreePath getNextMatch(String prefix, int startingRow,
+                               Position.Bias bias)
+  {
+    if (prefix == null)
+      throw new IllegalArgumentException("The argument 'prefix' must not be"
+                                         + " null.");
+    if (startingRow < 0)
+      throw new IllegalArgumentException("The argument 'startingRow' must not"
+                                         + " be less than zero.");
+
+    int size = getRowCount();
+    if (startingRow > size)
+      throw new IllegalArgumentException("The argument 'startingRow' must not"
+                                         + " be greater than the number of"
+                                         + " elements in the TreeModel.");
+
+    TreePath foundPath = null;
+    if (bias == Position.Bias.Forward)
+      {
+        for (int i = startingRow; i < size; i++)
+          {
+            TreePath path = getPathForRow(i);
+            Object o = path.getLastPathComponent();
+            // FIXME: in the following call to convertValueToText the
+            // last argument (hasFocus) should be done right.
+            String item = convertValueToText(o, isRowSelected(i),
+                                             isExpanded(i),
+                                             treeModel.isLeaf(o), i, false);
+            if (item.startsWith(prefix))
+              {
+                foundPath = path;
+                break;
+              }
+          }
+      }
+    else
+      {
+        for (int i = startingRow; i >= 0; i--)
+          {
+            TreePath path = getPathForRow(i);
+            Object o = path.getLastPathComponent();
+            // FIXME: in the following call to convertValueToText the
+            // last argument (hasFocus) should be done right.
+            String item = convertValueToText(o, isRowSelected(i),
+                                             isExpanded(i),
+                                             treeModel.isLeaf(o), i, false);
+            if (item.startsWith(prefix))
+              {
+                foundPath = path;
+                break;
+              }
+          }
+      }
+    return foundPath;
+  }
+
+  /**
+   * Removes any paths in the current set of selected paths that are
+   * descendants of <code>path</code>. If <code>includePath</code> is
+   * set to <code>true</code> and <code>path</code> itself is selected,
+   * then it will be removed too.
+   *
+   * @param path the path from which selected descendants are to be
+   *     removed
+   * @param includePath if <code>true</code> then <code>path</code>
+   *     itself will also be remove if it's selected
+   *
+   * @return <code>true</code> if something has been removed,
+   *     <code>false</code> otherwise
+   *
+   * @since 1.3
+   */
+  protected boolean removeDescendantSelectedPaths(TreePath path,
+                                                    boolean includeSelected)
+  {
+    boolean removedSomething = false;
+    TreePath[] selected = getSelectionPaths();
+    for (int index = 0; index < selected.length; index++)
+      {
+        if ((selected[index] == path && includeSelected)
+            || (selected[index].isDescendant(path)))
+          {
+            removeSelectionPath(selected[index]);
+            removedSomething = true;
+          }
+      }
+    return removedSomething;
+  }
 }
Index: libjava/javax/swing/JViewport.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/JViewport.java,v
retrieving revision 1.13
diff -u -r1.13 JViewport.java
--- libjava/javax/swing/JViewport.java	16 Feb 2005 20:02:37 -0000	1.13
+++ libjava/javax/swing/JViewport.java	9 Jul 2005 22:10:08 -0000
@@ -42,8 +42,12 @@
 import java.awt.Dimension;
 import java.awt.Graphics;
 import java.awt.Insets;
+import java.awt.LayoutManager;
 import java.awt.Point;
 import java.awt.Rectangle;
+import java.awt.event.ComponentAdapter;
+import java.awt.event.ComponentEvent;
+import java.io.Serializable;
 
 import javax.swing.border.Border;
 import javax.swing.event.ChangeEvent;
@@ -93,6 +97,61 @@
  */
 public class JViewport extends JComponent
 {
+
+  /**
+   * A {@link java.awt.event.ComponentListener} that listens for
+   * changes of the view's size. This class forbids changes of the view
+   * component's size that would exceed the viewport's size.
+   */
+  protected class ViewListener
+    extends ComponentAdapter
+    implements Serializable
+  {
+    private static final long serialVersionUID = -2812489404285958070L;
+
+    /**
+     * Creates a new instance of ViewListener.
+     */
+    protected ViewListener()
+    {
+    }
+
+    /**
+     * Receives notification when a component (in this case: the view
+     * component) changes it's size.
+     *
+     * @param ev the ComponentEvent describing the change
+     */
+    public void componentResized(ComponentEvent ev)
+    {
+      // According to some tests that I did with Sun's implementation
+      // this class is supposed to make sure that the view component
+      // is not resized to a larger size than the viewport.
+      // This is not documented anywhere. What I did is: I subclassed JViewport
+      // and ViewListener and 'disabled' the componentResized method by
+      // overriding it and not calling super.componentResized().
+      // When this method is disabled I can set the size on the view component
+      // normally, when it is enabled, it gets immediatly resized back,
+      // after a resize attempt that would exceed the Viewport's size.
+      Component comp = ev.getComponent();
+      Dimension newSize = comp.getSize();
+      Dimension viewportSize = getSize();
+      boolean revert = false;
+      if (newSize.width > viewportSize.width)
+        {
+          newSize.width = viewportSize.width;
+          revert = true;
+        }
+      if (newSize.height > viewportSize.height)
+        {
+          newSize.height = viewportSize.height;
+          revert = true;
+        }
+      if (revert == true)
+        comp.setSize(newSize);
+    }
+  }
+
   private static final long serialVersionUID = -6925142919680527970L;
   
   public static final int SIMPLE_SCROLL_MODE = 0;
@@ -125,10 +184,16 @@
 
   Point lastPaintPosition;
 
+  /**
+   * The ViewListener instance.
+   */
+  ViewListener viewListener;
+
   public JViewport()
   {
     setOpaque(true);
     setScrollMode(BLIT_SCROLL_MODE);
+    setLayout(createLayoutManager());
     updateUI();
   }
 
@@ -267,9 +332,17 @@
   public void setView(Component v)
   {
     while (getComponentCount() > 0)
-      remove(0);
+      {
+        if (viewListener != null)
+          getView().removeComponentListener(viewListener);
+        remove(0);
+      }
+
     if (v != null)
       {
+        if (viewListener == null)
+          viewListener = createViewListener();
+        v.addComponentListener(viewListener);
         add(v);
         fireStateChanged();
       }
@@ -392,4 +465,26 @@
     if (border != null)
       throw new IllegalArgumentException();
   }
+
+  /**
+   * Creates a {@link ViewListener} that is supposed to listen for
+   * size changes on the view component.
+   *
+   * @return a ViewListener instance
+   */
+  protected ViewListener createViewListener()
+  {
+    return new ViewListener();
+  }
+
+  /**
+   * Creates the LayoutManager that is used for this viewport. Override
+   * this method if you want to use a custom LayoutManager.
+   *
+   * @return a LayoutManager to use for this viewport
+   */
+  protected LayoutManager createLayoutManager()
+  {
+    return new ViewportLayout();
+  }
 }
Index: libjava/javax/swing/LayoutFocusTraversalPolicy.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/LayoutFocusTraversalPolicy.java,v
retrieving revision 1.2
diff -u -r1.2 LayoutFocusTraversalPolicy.java
--- libjava/javax/swing/LayoutFocusTraversalPolicy.java	16 Feb 2005 20:02:38 -0000	1.2
+++ libjava/javax/swing/LayoutFocusTraversalPolicy.java	9 Jul 2005 22:10:08 -0000
@@ -79,6 +79,8 @@
       return 1;
     }
   }
+
+  private static final long serialVersionUID = 4312146927238881442L;
   
   public LayoutFocusTraversalPolicy()
   {
Index: libjava/javax/swing/MenuSelectionManager.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/MenuSelectionManager.java,v
retrieving revision 1.7
diff -u -r1.7 MenuSelectionManager.java
--- libjava/javax/swing/MenuSelectionManager.java	16 Feb 2005 20:02:39 -0000	1.7
+++ libjava/javax/swing/MenuSelectionManager.java	9 Jul 2005 22:10:08 -0000
@@ -157,7 +157,7 @@
     for (int i = 0; i < selectedPath.size(); i++)
       {
 	Component comp = ((Component) selectedPath.get(i));
-        Dimension size = comp.getSize();
+	Dimension size = comp.getSize();
 
 	// convert location of this menu item to screen coordinates
 	compPointOnScreen = comp.getLocationOnScreen();
@@ -277,6 +277,11 @@
 	 }
 	*/
       }
+    else
+      {
+	if (event.getID() == MouseEvent.MOUSE_RELEASED)
+	  clearSelectedPath();
+      }
   }
 
   /**
Index: libjava/javax/swing/RepaintManager.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/RepaintManager.java,v
retrieving revision 1.10
diff -u -r1.10 RepaintManager.java
--- libjava/javax/swing/RepaintManager.java	16 Feb 2005 20:02:39 -0000	1.10
+++ libjava/javax/swing/RepaintManager.java	9 Jul 2005 22:10:08 -0000
@@ -176,12 +176,13 @@
 
   /**
    * The global, shared RepaintManager instance. This is reused for all
-   * components in all windows.
+   * components in all windows.  This is package-private to avoid an accessor
+   * method.
    *
    * @see #currentManager
    * @see #setCurrentManager
    */
-  private static RepaintManager globalManager;
+  static RepaintManager globalManager;
 
   /**
    * Create a new RepaintManager object.
@@ -488,6 +489,31 @@
   }
 
   /**
+   * Creates and returns a volatile offscreen buffer for the specified
+   * component that can be used as a double buffer. The returned image
+   * is a {@link VolatileImage}. Its size will be <code>(proposedWidth,
+   * proposedHeight)</code> except when the maximum double buffer size
+   * has been set in this RepaintManager.
+   *
+   * @param comp the Component for which to create a volatile buffer
+   * @param proposedWidth the proposed width of the buffer
+   * @param proposedHeight the proposed height of the buffer
+   *
+   * @since 1.4
+   *
+   * @see {@link VolatileImage}
+   */
+  public Image getVolatileOffscreenBuffer(Component comp, int proposedWidth,
+                                          int proposedHeight)
+  {
+    int maxWidth = doubleBufferMaximumSize.width;
+    int maxHeight = doubleBufferMaximumSize.height;
+    return comp.createVolatileImage(Math.min(maxWidth, proposedWidth),
+                                    Math.min(maxHeight, proposedHeight));
+  }
+  
+
+  /**
    * Get the value of the {@link #doubleBufferMaximumSize} property.
    *
    * @return The current value of the property
Index: libjava/javax/swing/ScrollPaneLayout.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/ScrollPaneLayout.java,v
retrieving revision 1.10
diff -u -r1.10 ScrollPaneLayout.java
--- libjava/javax/swing/ScrollPaneLayout.java	16 Feb 2005 20:02:39 -0000	1.10
+++ libjava/javax/swing/ScrollPaneLayout.java	9 Jul 2005 22:10:08 -0000
@@ -467,6 +467,15 @@
       }
   }
 
+  /**
+   * Returns the bounds of the border around a ScrollPane's viewport.
+   *
+   * @param scrollPane the ScrollPane for which's viewport the border
+   *     is requested
+   *
+   * @deprecated As of Swing 1.1 replaced by
+   *     {@link javax.swing.JScrollPane#getViewportBorderBounds}.
+   */
   public Rectangle getViewportBorderBounds(JScrollPane scrollPane) {
     return null;
   }
Index: libjava/javax/swing/SizeRequirements.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/SizeRequirements.java,v
retrieving revision 1.4
diff -u -r1.4 SizeRequirements.java
--- libjava/javax/swing/SizeRequirements.java	16 Feb 2005 20:02:41 -0000	1.4
+++ libjava/javax/swing/SizeRequirements.java	9 Jul 2005 22:10:08 -0000
@@ -1,5 +1,5 @@
 /* SizeRequirements.java --
-   Copyright (C) 2002 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -35,137 +35,295 @@
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
 
-
 package javax.swing;
 
 import java.io.Serializable;
 
 /**
- * SizeRequirements
- * @author	Andrew Selkirk
- * @version	1.0
+ * This class calculates information about the size and position requirements
+ * of components.
+ *
+ * Two types of layout are supported:
+ * <ul>
+ * <li>Tiled: the components are placed at position top-left or bottom-right
+ *    position within their allocated space</li>
+ * <li>Aligned: the components are placed aligned in their allocated space
+ *    according to their alignment value</li>
+ * </ul>
+ *
+ * @author Andrew Selkirk
+ * @author Roman Kennke (roman@kennke.org)
  */
 public class SizeRequirements implements Serializable
 {
+  /**
+   * The serialVersionUID.
+   */
   private static final long serialVersionUID = 9217749429906736553L;
 
-	//-------------------------------------------------------------
-	// Variables --------------------------------------------------
-	//-------------------------------------------------------------
-
-	/**
-	 * minimum
-	 */
-	public int minimum;
-
-	/**
-	 * preferred
-	 */
-	public int preferred;
-
-	/**
-	 * maximum
-	 */
-	public int maximum;
-
-	/**
-	 * alignment
-	 */
-	public float alignment;
-
-
-	//-------------------------------------------------------------
-	// Initialization ---------------------------------------------
-	//-------------------------------------------------------------
-
-	/**
-	 * Constructor SizeRequirements
-	 */
-	public SizeRequirements() {
-		// TODO
-	} // SizeRequirements()
-
-	/**
-	 * Constructor SizeRequirements
-	 * @param min TODO
-	 * @param pref TODO
-	 * @param max TODO
-	 * @param align TODO
-	 */
-	public SizeRequirements(int min, int pref, int max, float align) {
-		// TODO
-	} // SizeRequirements()
-
-
-	//-------------------------------------------------------------
-	// Methods ----------------------------------------------------
-	//-------------------------------------------------------------
-
-	/**
-	 * toString
-	 * @returns String
-	 */
-	public String toString() {
-		return null; // TODO
-	} // toString()
-
-	/**
-	 * getTiledSizeRequirements
-	 * @param children TODO
-	 * @returns SizeRequirements
-	 */
-	public static SizeRequirements getTiledSizeRequirements(
-			SizeRequirements[] children) {
-		return null; // TODO
-	} // getTiledSizeRequirements()
-
-	/**
-	 * getAlignedSizeRequirements
-	 * @param children TODO
-	 * @returns SizeRequirements
-	 */
-	public static SizeRequirements getAlignedSizeRequirements(
-			SizeRequirements[] children) {
-		return null; // TODO
-	} // getAlignedSizeRequirements()
-
-	/**
-	 * calculateTiledPositions
-	 * @param allocated TODO
-	 * @param total TODO
-	 * @param children TODO
-	 * @param offset TODO
-	 * @param spans TODO
-	 */
-	public static void calculateTiledPositions(int allocated,
-			SizeRequirements total, SizeRequirements[] children,
-			int[] offset, int[] spans) {
-		// TODO
-	} // calculateTiledPositions()
-
-	/**
-	 * calculateAlignedPositions
-	 * @param allocated TODO
-	 * @param total TODO
-	 * @param children TODO
-	 * @param offset TODO
-	 * @param spans TODO
-	 */
-	public static void calculateAlignedPositions(int allocated,
-			SizeRequirements total, SizeRequirements[] children,
-			int[] offset, int[] spans) {
-		// TODO
-	} // calculateAlignedPositions()
-
-	/**
-	 * adjustSizes
-	 * @param delta TODO
-	 * @param children TODO
-	 * @returns int[]
-	 */
-	public static int[] adjustSizes(int delta, SizeRequirements[] children) {
-		return null; // TODO
-	} // adjustSizes()
-
-
-} // SizeRequirements
+  /**
+   * The minimum reasonable width or height of a component.
+   */
+  public int minimum;
+
+  /**
+   * The preferred width or height of a component.
+   */
+  public int preferred;
+
+  /**
+   * The maximum reasonable width or height of a component.
+   */
+  public int maximum;
+
+  /**
+   * The horizontal or vertical alignment of a component.
+   */
+  public float alignment;
+
+  /**
+   * Creates a SizeRequirements object with minimum, preferred and
+   * maximum size set to zero, and an alignment value of 0.5.
+   */
+  public SizeRequirements()
+  {
+    this (0, 0, 0, 0.5F);
+  }
+
+  /**
+   * Creates a SizeRequirements object with the specified minimum,
+   * preferred, maximum and alignment values.
+   *
+   * @param min the minimum reasonable size of the component
+   * @param pref the preferred size of the component
+   * @param max the maximum size of the component
+   * @param align the alignment of the component
+   */
+  public SizeRequirements(int min, int pref, int max, float align)
+  {
+    minimum = min;
+    preferred = pref;
+    maximum = max;
+    alignment = align;
+  }
+
+  /**
+   * Returns a String representation of this SizeRequirements object,
+   * containing information about the minimum, preferred, maximum and
+   * alignment value.
+   *
+   * @return a String representation of this SizeRequirements object
+   */
+  public String toString()
+  {
+    return null; // TODO
+  }
+
+  /**
+   * Calculates how much space is nessecary to place a set of components
+   * end-to-end. The size requirements of the components is specified
+   * in <code>children</code>.
+   *
+   * @param children the SizeRequirements of each of the components
+   *
+   * @return the SizeRequirements that describe how much space is needed
+   *     to place the components end-to-end
+   */
+  public static SizeRequirements
+  getTiledSizeRequirements(SizeRequirements[] children)
+  {
+    SizeRequirements result = new SizeRequirements();
+    for (int i = 0; i < children.length; i++)
+      {
+        result.minimum += children[i].minimum;
+        result.preferred += children[i].preferred;
+        result.maximum += children[i].maximum;
+      }
+    return result;
+  }
+
+  /**
+   * Calculates how much space is nessecary to place a set of components
+   * aligned according to their alignment value.
+   * The size requirements of the components is specified in
+   * <code>children</code>.
+   *
+   * @param children the SizeRequirements of each of the components
+   *
+   * @return the SizeRequirements that describe how much space is needed
+   *     to place the components aligned
+   */
+  public static SizeRequirements
+  getAlignedSizeRequirements(SizeRequirements[] children)
+  {
+    return null; // TODO
+  }
+
+  /**
+   * Calculate the offsets and spans of the components, when they should
+   * be placed end-to-end.
+   *
+   * You must specify the amount of allocated space in
+   * <code>allocated</code>, the total size requirements of the set of
+   * components in <code>total</code> (this can be calculated using
+   * {@link #getTiledSizeRequirements} and the size requirements of the
+   * components in <code>children</code>.
+   *
+   * The calculated offset and span values for each component are then
+   * stored in the arrays <code>offsets</code> and <code>spans</code>.
+   *
+   * The components are placed in the forward direction, beginning with
+   * an offset of 0.
+   *
+   * @param allocated the amount of allocated space
+   * @param total the total size requirements of the components
+   * @param children the size requirement of each component
+   * @param offsets will hold the offset values for each component
+   * @param spans will hold the span values for each component
+   */
+  public static void calculateTiledPositions(int allocated,
+                                             SizeRequirements total,
+                                             SizeRequirements[] children,
+                                             int[] offsets, int[] spans)
+  {
+    calculateTiledPositions(allocated, total, children, offsets, spans, true);
+  }
+
+  /**
+   * Calculate the offsets and spans of the components, when they should
+   * be placed end-to-end.
+   *
+   * You must specify the amount of allocated space in
+   * <code>allocated</code>, the total size requirements of the set of
+   * components in <code>total</code> (this can be calculated using
+   * {@link #getTiledSizeRequirements} and the size requirements of the
+   * components in <code>children</code>.
+   *
+   * The calculated offset and span values for each component are then
+   * stored in the arrays <code>offsets</code> and <code>spans</code>.
+   *
+   * Depending on the value of <code>forward</code> the components are
+   * placed in the forward direction (left-right or top-bottom), where
+   * the offsets begin with 0, or in the reverse direction
+   * (right-left or bottom-top).
+   *
+   * @param allocated the amount of allocated space
+   * @param total the total size requirements of the components
+   * @param children the size requirement of each component
+   * @param offsets will hold the offset values for each component
+   * @param spans will hold the span values for each component
+   * @param forward whether the components should be placed in the forward
+   *     direction (left-right or top-bottom) or reverse direction
+   *     (right-left or bottom-top)
+   */
+  public static void calculateTiledPositions(int allocated,
+                                             SizeRequirements total,
+                                             SizeRequirements[] children,
+                                             int[] offsets, int[] spans,
+                                             boolean forward)
+  {
+    if (forward)
+      {
+        int offset = 0;
+        for (int i = 0; i < children.length; i++)
+          {
+            offsets[i] = offset;
+            spans[i] = children[i].preferred;
+            offset += children[i].preferred;
+          }
+      }
+    else
+      {
+        int offset = allocated;
+        for (int i = 0; i < children.length; i++)
+          {
+            offset -= children[i].preferred;
+            offsets[i] = offset;
+            spans[i] = children[i].preferred;
+          }
+      }
+  }
+
+  /**
+   * Calculate the offsets and spans of the components, when they should
+   * be placed end-to-end.
+   *
+   * You must specify the amount of allocated space in
+   * <code>allocated</code>, the total size requirements of the set of
+   * components in <code>total</code> (this can be calculated using
+   * {@link #getTiledSizeRequirements} and the size requirements of the
+   * components in <code>children</code>.
+   *
+   * The calculated offset and span values for each component are then
+   * stored in the arrays <code>offsets</code> and <code>spans</code>.
+   *
+   * The components are tiled in the forward direction, beginning with
+   * an offset of 0.
+   * 
+   * @param allocated the amount of allocated space
+   * @param total the total size requirements of the components
+   * @param children the size requirement of each component
+   * @param offsets will hold the offset values for each component
+   * @param spans will hold the span values for each component
+   */
+  public static void calculateAlignedPositions(int allocated,
+                                               SizeRequirements total,
+                                               SizeRequirements[] children,
+                                               int[] offsets, int[] spans)
+  {
+    calculateTiledPositions(allocated, total, children, offsets, spans, true);
+  }
+
+  /**
+   * Calculate the offsets and spans of the components, when they should
+   * be placed end-to-end.
+   *
+   * You must specify the amount of allocated space in
+   * <code>allocated</code>, the total size requirements of the set of
+   * components in <code>total</code> (this can be calculated using
+   * {@link #getTiledSizeRequirements} and the size requirements of the
+   * components in <code>children</code>.
+   *
+   * The calculated offset and span values for each component are then
+   * stored in the arrays <code>offsets</code> and <code>spans</code>.
+   *
+   * Depending on the value of <code>forward</code> the components are
+   * placed in the forward direction (left-right or top-bottom), where
+   * the offsets begin with 0, or in the reverse direction
+   * (right-left or bottom-top).
+   *
+   * @param allocated the amount of allocated space
+   * @param total the total size requirements of the components
+   * @param children the size requirement of each component
+   * @param offsets will hold the offset values for each component
+   * @param spans will hold the span values for each component
+   * @param forward whether the components should be placed in the forward
+   *     direction (left-right or top-bottom) or reverse direction
+   *     (right-left or bottom-top)
+   */
+  public static void calculateAlignedPositions(int allocated,
+                                               SizeRequirements total,
+                                               SizeRequirements[] children,
+                                               int[] offset, int[] spans,
+                                               boolean forward)
+  {
+    // TODO
+  }
+
+  /**
+   * Returns an array of new preferred sizes for the children based on
+   * <code>delta</code>. <code>delta</code> specifies a change in the
+   * allocated space. The sizes of the children will be shortened or
+   * lengthened to accomodate the new allocation.
+   *
+   * @param delta the change of the size of the total allocation for
+   *     the components
+   * @param children the size requirements of each component
+   *
+   * @return the new preferred sizes for each component
+   */
+  public static int[] adjustSizes(int delta, SizeRequirements[] children)
+  {
+    return null; // TODO
+  }
+}
Index: libjava/javax/swing/SpinnerDateModel.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/SpinnerDateModel.java,v
retrieving revision 1.1
diff -u -r1.1 SpinnerDateModel.java
--- libjava/javax/swing/SpinnerDateModel.java	19 Feb 2005 09:22:39 -0000	1.1
+++ libjava/javax/swing/SpinnerDateModel.java	9 Jul 2005 22:10:08 -0000
@@ -61,9 +61,9 @@
 
   /**
    * For compatability with Sun's JDK
-   * FIXME: what's the number? And which fields should be serialized?
+   * FIXME: Which fields should be serialized?
    */
-  private static final long serialVersionUID = 1L;
+  private static final long serialVersionUID = -4802518107105940612L;
 
   /**
    * Constructs a SpinnerDateModel using the current date,
Index: libjava/javax/swing/SwingUtilities.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/SwingUtilities.java,v
retrieving revision 1.15
diff -u -r1.15 SwingUtilities.java
--- libjava/javax/swing/SwingUtilities.java	16 Feb 2005 20:02:41 -0000	1.15
+++ libjava/javax/swing/SwingUtilities.java	9 Jul 2005 22:10:09 -0000
@@ -352,6 +352,25 @@
   }
 
   /**
+   * Returns the first ancestor of <code>comp</code> that is a {@link Window}
+   * or <code>null</code> if <code>comp</code> is not contained in a
+   * {@link Window}.
+   *
+   * This is equivalent to calling
+   * <code>getAncestorOfClass(Window, comp)</code> or
+   * <code>windowForComponent(comp)</code>.
+   *
+   * @param comp the component for which we are searching the ancestor Window
+   *
+   * @return the first ancestor Window of <code>comp</code> or
+   *     <code>null</code> if <code>comp</code> is not contained in a Window
+   */
+  public static Window getWindowAncestor(Component comp)
+  {
+    return (Window) getAncestorOfClass(Window.class, comp);
+  }
+
+  /**
    * Equivalent to calling <code>getAncestorOfClass(Window, comp)</code>.
    *
    * @param comp The component to search for an ancestor window 
@@ -515,8 +534,11 @@
     if (destination == null)
       destination = getRoot(source);
 
-    convertPointToScreen(pt, source);
-    convertPointFromScreen(pt, destination);
+    if (source.isShowing() && destination.isShowing())
+      {
+        convertPointToScreen(pt, source);
+        convertPointFromScreen(pt, destination);
+      }
 
     return pt;
   }
@@ -1106,9 +1128,13 @@
       component.setActionMap(uiActionMap);
     else
       {
-        while(child.getParent() != null
-              && !(child.getParent() instanceof ActionMapUIResource))
-          child = child.getParent();
+        ActionMap parent = child.getParent();
+        while(parent != null)
+          {
+            child = parent;
+            parent = child.getParent();
+          }
+
         if (child != null)
           child.setParent(uiActionMap);
       }
@@ -1319,4 +1345,45 @@
            && b.x >= a.x && b.x + b.width <= a.x + a.width && b.y >= a.y
            && b.y + b.height <= a.y + a.height;
   }
+
+  /**
+   * Returns the InputMap that is provided by the ComponentUI of
+   * <code>component</code> for the specified condition.
+   *
+   * @param component the component for which the InputMap is returned
+   * @param cond the condition that specifies which of the three input
+   *     maps should be returned, may be
+   *     {@link JComponent#WHEN_IN_FOCUSED_WINDOW},
+   *     {@link JComponent#WHEN_FOCUSED} or
+   *     {@link JComponent#WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
+   *
+   * @return
+   */
+  public static InputMap getUIInputMap(JComponent component, int cond)
+  {
+    if (UIManager.getUI(component) != null)
+      // we assume here that the UI class sets the parent of the component's
+      // InputMap, which is the correct behaviour. If it's not, then
+      // this can be considered a bug
+      return component.getInputMap(cond).getParent();
+    else
+      return null;
+  }
+
+  /**
+   * Returns the ActionMap that is provided by the ComponentUI of
+   * <code>component</code>.
+   *
+   * @param component the component for which the ActionMap is returned
+   */
+  public static ActionMap getUIActionMap(JComponent component)
+  {
+    if (UIManager.getUI(component) != null)
+      // we assume here that the UI class sets the parent of the component's
+      // ActionMap, which is the correct behaviour. If it's not, then
+      // this can be considered a bug
+      return component.getActionMap().getParent();
+    else
+      return null;
+  }
 }
Index: libjava/javax/swing/Timer.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/Timer.java,v
retrieving revision 1.10
diff -u -r1.10 Timer.java
--- libjava/javax/swing/Timer.java	16 Feb 2005 20:02:42 -0000	1.10
+++ libjava/javax/swing/Timer.java	9 Jul 2005 22:10:10 -0000
@@ -1,5 +1,5 @@
 /* Timer.java --
-   Copyright (C) 2002, 2004  Free Software Foundation, Inc.
+   Copyright (C) 2002, 2004, 2005  Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -46,33 +46,70 @@
 import javax.swing.event.EventListenerList;
 
 /**
- * DOCUMENT ME!
+ * Fires one or more action events after the specified delay.
+ * @author Ronald Veldema
+ * @author Audrius Meskauskas (audriusa@Bionformatics.org) - bug fixes
+ * and documentation comments
  */
-public class Timer implements Serializable
+public class Timer
+  implements Serializable
 {
-  /** DOCUMENT ME! */
-  private static final long serialVersionUID = -1116180831621385484L;
-
-  /** DOCUMENT ME! */
-  protected EventListenerList listenerList = new EventListenerList();
-
-  // This object manages a "queue" of virtual actionEvents, maintained as a
-  // simple long counter. When the timer expires, a new event is queued,
-  // and a dispatcher object is pushed into the system event queue. When
-  // the system thread runs the dispatcher, it will fire as many
-  // ActionEvents as have been queued, unless the timer is set to
-  // coalescing mode, in which case it will fire only one ActionEvent.
+  /**
+   * The timer thread
+   */
+  private class Waker
+    extends Thread
+  {
+    /**
+     * Fires events, pausing for required intervals.
+     */
+    public void run()
+    {
+      running = true;
+      try
+        {
+          sleep(initialDelay);
 
-  /** DOCUMENT ME! */
-  private long queue;
+          queueEvent();
 
-  /** DOCUMENT ME! */
-  private Object queueLock = new Object();
+          while (running)
+            {
+              try
+                {
+                  sleep(delay);
+                }
+              catch (InterruptedException e)
+                {
+                  return;
+                }
+              queueEvent();
+
+              if (logTimers)
+                System.out.println("javax.swing.Timer -> clocktick");
+
+              if ( ! repeats)
+                break;
+            }
+          running = false;
+        }
+      catch (Exception e)
+        {
+          // The timer is no longer running.
+          running = false;
+        }
+    }
+  }
 
-  /** DOCUMENT ME! */
-  private Waker waker;
+  /**
+   * Use serialVersionUID for interoperability.
+   */
+  private static final long serialVersionUID = -1116180831621385484L;
 
-  private Runnable drainer = new Runnable() 
+  /**
+   * The encloding class, used with {@link SwingUtilities#invokeLater}
+   * to invoke the {@link #drainEvents()}.
+   */
+  private Runnable drainer = new Runnable()
     {
       public void run()
       {
@@ -81,165 +118,136 @@
     };
 
   /**
-   * DOCUMENT ME!
+   * If <code>true</code>, the timer prints a message to
+   * {@link System#out} when firing each event.
    */
-  private void queueEvent()
-  {
-    synchronized (queueLock)
-      {
-	queue++;
-	if (queue == 1)
-	  SwingUtilities.invokeLater(drainer);
-      }
-  }
+  static boolean logTimers;
 
   /**
-   * DOCUMENT ME!
+   * A field to store all listeners who are listening to this timer.
    */
-  private void drainEvents()
-  {
-    synchronized (queueLock)
-      {
-	if (isCoalesce())
-	  {
-	    if (queue > 0)
-	      fireActionPerformed();
-	  }
-	else
-	  {
-	    while (queue > 0)
-	      {
-		fireActionPerformed();
-		queue--;
-	      }
-	  }
-	queue = 0;
-      }
-  }
-
-  static boolean logTimers;
+  protected EventListenerList listenerList = new EventListenerList();
 
-  /** DOCUMENT ME! */
+  /**
+   * <code>true</code> if the timer coalesces events.
+   */
   boolean coalesce = true;
 
-  /** DOCUMENT ME! */
+  /**
+   * <code>true</code> if the timer is firing repetetive events.
+   */
   boolean repeats = true;
 
-  /** DOCUMENT ME! */
+  /**
+   * <code>true</code> if the timer is currently active, firing events
+   * as scheduled.
+   */
   boolean running;
 
-  /** DOCUMENT ME! */
-  int ticks;
-
-  /** DOCUMENT ME! */
+  /**
+   * The delay between subsequent repetetive events.
+   */
   int delay;
 
-  /** DOCUMENT ME! */
+  /**
+   * The initial delay before the first event.
+   */
   int initialDelay;
 
   /**
-   * DOCUMENT ME!
+   * The number of events that have been already fired by this timer.
+   * This is used as a numeric identifier for the next event that would
+   * be fired.
    */
-  private class Waker extends Thread
-  {
-    /**
-     * DOCUMENT ME!
-     */
-    public void run()
-    {
-      running = true;
-      try
-        {
-	  sleep(initialDelay);
+  int ticks;
 
-	  while (running)
-	    {
-	      try
-	        {
-		  sleep(delay);
-	        }
-	      catch (InterruptedException e)
-	        {
-		  return;
-	        }
-	      queueEvent();
-
-	      if (logTimers)
-		System.out.println("javax.swing.Timer -> clocktick");
-
-	      if (! repeats)
-		break;
-	    }
-	  running = false;
-        }
-      catch (Exception e)
-        {
-//	  System.out.println("swing.Timer::" + e);
-        }
-    }
-  }
+  /**
+   * Stores the thread that posts events to the queue at required time
+   * intervals.
+   */
+  private Waker waker;
+
+  /**
+   * This object manages a "queue" of virtual actionEvents, maintained as a
+   * simple long counter. When the timer expires, a new event is queued,
+   * and a dispatcher object is pushed into the system event queue. When
+   * the system thread runs the dispatcher, it will fire as many
+   * ActionEvents as have been queued, unless the timer is set to
+   * coalescing mode, in which case it will fire only one ActionEvent.
+   */
+  private long queue;
+
+  /**
+   * <code>synchronized(queueLock)</code> replaces
+   * <code>synchronized(queue)</code> that is not supported by this language.
+   */
+  private Object queueLock = new Object();
 
   /**
    * Creates a new Timer object.
    *
-   * @param d DOCUMENT ME!
-   * @param listener DOCUMENT ME!
+   * @param d the default value for both initial and between event delay, in
+   * milliseconds.
+   * @param listener the first action listener, can be <code>null</code>.
    */
   public Timer(int d, ActionListener listener)
   {
     delay = d;
+    initialDelay = d;
 
     if (listener != null)
       addActionListener(listener);
   }
 
   /**
-   * DOCUMENT ME!
+   * Get the array of action listeners.
    *
-   * @param c DOCUMENT ME!
-   */
-  public void setCoalesce(boolean c)
-  {
-    coalesce = c;
-  }
-
-  /**
-   * DOCUMENT ME!
+   * @return the array of action listeners that are listening for the events,
+   * fired by this timer
    *
-   * @return DOCUMENT ME!
+   * @since 1.4
    */
-  public boolean isCoalesce()
+  public ActionListener[] getActionListeners()
   {
-    return coalesce;
+    return (ActionListener[]) listenerList.getListeners(ActionListener.class);
   }
 
   /**
-   * DOCUMENT ME!
+   * Sets whether the Timer coalesces multiple pending event firings.
+   * If the coalescing is enabled, the multiple events that have not been
+   * fired on time are replaced by the single event. The events may not
+   * be fired on time if the application is busy.
    *
-   * @param listener DOCUMENT ME!
+   * @param c <code>true</code> (default) to enable the event coalescing,
+   * <code>false</code> otherwise
    */
-  public void addActionListener(ActionListener listener)
+  public void setCoalesce(boolean c)
   {
-    listenerList.add(ActionListener.class, listener);
+    coalesce = c;
   }
 
   /**
-   * DOCUMENT ME!
+   * Checks if the Timer coalesces multiple pending event firings.
+   * If the coalescing is enabled, the multiple events that have not been
+   * fired on time are replaced by the single event. The events may not
+   * be fired on time if the application is busy.
    *
-   * @param listener DOCUMENT ME!
+   * @return <code>true</code> if the coalescing is enabled,
+   * <code>false</code> otherwise
    */
-  public void removeActionListener(ActionListener listener)
+  public boolean isCoalesce()
   {
-    listenerList.remove(ActionListener.class, listener);
+    return coalesce;
   }
 
   /**
-   * DOCUMENT ME!
-   *
-   * @param listenerType DOCUMENT ME!
+   * Get the event listeners of the given type that are listening for the
+   * events, fired by this timer.
    *
-   * @return DOCUMENT ME!
+   * @param listenerType the listener type (for example, ActionListener.class)
    *
+   * @return the array of event listeners that are listening for the events,
+   * fired by this timer
    * @since 1.3
    */
   public EventListener[] getListeners(Class listenerType)
@@ -248,42 +256,12 @@
   }
 
   /**
-   * DOCUMENT ME!
-   *
-   * @return DOCUMENT ME!
-   *
-   * @since 1.4
-   */
-  public ActionListener[] getActionListeners()
-  {
-    return (ActionListener[]) listenerList.getListeners(ActionListener.class);
-  }
-
-  /**
-   * DOCUMENT ME!
+   * Set the timer logging state. If it is set to <code>true</code>, the
+   * timer prints a message to {@link System#out} when firing each
+   * action event.
    *
-   * @param event DOCUMENT ME!
-   */
-  protected void fireActionPerformed(ActionEvent event)
-  {
-    ActionListener[] listeners = getActionListeners();
-
-    for (int i = 0; i < listeners.length; i++)
-      listeners[i].actionPerformed(event);
-  }
-
-  /**
-   * DOCUMENT ME!
-   */
-  void fireActionPerformed()
-  {
-    fireActionPerformed(new ActionEvent(this, ticks++, "Timer"));
-  }
-
-  /**
-   * DOCUMENT ME!
-   *
-   * @param lt DOCUMENT ME!
+   * @param lt <code>true</code> if logging is enabled, <code>false</code>
+   * (default value) otherwise
    */
   public static void setLogTimers(boolean lt)
   {
@@ -291,9 +269,11 @@
   }
 
   /**
-   * DOCUMENT ME!
+   * Return the logging state.
    *
-   * @return DOCUMENT ME!
+   * @return <code>true</code> if the timer is printing a message to
+   * {@link System#out}
+   * when firing each action event
    */
   public static boolean getLogTimers()
   {
@@ -301,9 +281,11 @@
   }
 
   /**
-   * DOCUMENT ME!
+   * Set the delay between firing the subsequent events.
+   * This parameter does not change the value of the initial delay before
+   * firing the first event.
    *
-   * @param d DOCUMENT ME!
+   * @param d The time gap between the subsequent events, in milliseconds
    */
   public void setDelay(int d)
   {
@@ -311,9 +293,9 @@
   }
 
   /**
-   * DOCUMENT ME!
+   * Get the delay between firing the subsequent events.
    *
-   * @return DOCUMENT ME!
+   * @return The delay between subsequent events, in milliseconds
    */
   public int getDelay()
   {
@@ -321,9 +303,12 @@
   }
 
   /**
-   * DOCUMENT ME!
+   * Set the intial delay before firing the first event since calling
+   * the {@link #start()} method. If the initial delay has not been
+   * set, it is assumed having the same value as the delay between the
+   * subsequent events.
    *
-   * @param i DOCUMENT ME!
+   * @param i the initial delay, in milliseconds
    */
   public void setInitialDelay(int i)
   {
@@ -331,9 +316,11 @@
   }
 
   /**
-   * DOCUMENT ME!
+   * Get the intial delay before firing the first event since calling
+   * the {@link #start()} method. If the initial delay has not been
+   * set, returns the same value as {@link #getDelay()}.
    *
-   * @return DOCUMENT ME!
+   * @return the initial delay before firing the first action event.
    */
   public int getInitialDelay()
   {
@@ -341,9 +328,11 @@
   }
 
   /**
-   * DOCUMENT ME!
+   * Enable firing the repetetive events.
    *
-   * @param r DOCUMENT ME!
+   * @param r <code>true</code> (default value) to fire repetetive events.
+   * <code>false</code> to fire
+   * only one event after the initial delay
    */
   public void setRepeats(boolean r)
   {
@@ -351,9 +340,11 @@
   }
 
   /**
-   * DOCUMENT ME!
+   * Check is this timer fires repetetive events.
    *
-   * @return DOCUMENT ME!
+   * @return <code>true</code> if the timer fires repetetive events,
+   * <code>false</code> if it fires
+   * only one event after the initial delay
    */
   public boolean isRepeats()
   {
@@ -361,9 +352,11 @@
   }
 
   /**
-   * DOCUMENT ME!
+   * Get the timer state.
    *
-   * @return DOCUMENT ME!
+   * @return <code>true</code> if the timer has been started and is firing
+   * the action events as scheduled. <code>false</code>
+   * if the timer is inactive.
    */
   public boolean isRunning()
   {
@@ -371,18 +364,28 @@
   }
 
   /**
-   * DOCUMENT ME!
+   * Add the action listener
+   *
+   * @param listener the action listener to add
    */
-  public void start()
+  public void addActionListener(ActionListener listener)
   {
-    if (isRunning())
-      return;
-    waker = new Waker();
-    waker.start();
+    listenerList.add(ActionListener.class, listener);
   }
 
   /**
-   * DOCUMENT ME!
+   * Remove the action listener.
+   *
+   * @param listener the action listener to remove
+   */
+  public void removeActionListener(ActionListener listener)
+  {
+    listenerList.remove(ActionListener.class, listener);
+  }
+
+  /**
+   * Cancel all pending tasks and fire the first event after the initial
+   * delay.
    */
   public void restart()
   {
@@ -391,7 +394,18 @@
   }
 
   /**
-   * DOCUMENT ME!
+   * Start firing the action events.
+   */
+  public void start()
+  {
+    if (isRunning())
+      return;
+    waker = new Waker();
+    waker.start();
+  }
+
+  /**
+   * Stop firing the action events.
    */
   public void stop()
   {
@@ -400,7 +414,72 @@
       waker.interrupt();
     synchronized (queueLock)
       {
-	queue = 0;
+        queue = 0;
+      }
+  }
+
+  /**
+   * Fire the given action event to the action listeners.
+   *
+   * @param event the event to fire
+   */
+  protected void fireActionPerformed(ActionEvent event)
+  {
+    ActionListener[] listeners = getActionListeners();
+
+    for (int i = 0; i < listeners.length; i++)
+      listeners [ i ].actionPerformed(event);
+  }
+
+  /**
+   * Fire the action event, named "Timer" and having the numeric
+   * identifier, equal to the numer of events that have been
+   * already fired before.
+   */
+  void fireActionPerformed()
+  {
+    fireActionPerformed(new ActionEvent(this, ticks++, "Timer"));
+  }
+
+  /**
+   * Fire the queued action events.
+   * In the coalescing mode, a single event is fired as a replacement
+   * for all queued events. In non coalescing mode, a series of
+   * all queued events is fired.
+   * This is package-private to avoid an accessor method.
+   */
+  void drainEvents()
+  {
+    synchronized (queueLock)
+      {
+        if (isCoalesce())
+          {
+            if (queue > 0)
+              fireActionPerformed();
+          }
+        else
+          {
+            while (queue > 0)
+              {
+                fireActionPerformed();
+                queue--;
+              }
+          }
+        queue = 0;
+      }
+  }
+
+  /**
+  * Post a scheduled event to the event queue.
+  * Package-private to avoid an accessor method.
+  */
+  void queueEvent()
+  {
+    synchronized (queueLock)
+      {
+        queue++;
+        if (queue == 1)
+          SwingUtilities.invokeLater(drainer);
       }
   }
 }
Index: libjava/javax/swing/ToolTipManager.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/ToolTipManager.java,v
retrieving revision 1.6
diff -u -r1.6 ToolTipManager.java
--- libjava/javax/swing/ToolTipManager.java	30 Nov 2004 23:59:00 -0000	1.6
+++ libjava/javax/swing/ToolTipManager.java	9 Jul 2005 22:10:10 -0000
@@ -466,9 +466,9 @@
   /**
    * This method displays the ToolTip. It can figure out the method needed to
    * show it as well (whether to display it in heavyweight/lightweight panel
-   * or a window.)
+   * or a window.)  This is package-private to avoid an accessor method.
    */
-  private void showTip()
+  void showTip()
   {
     if (! enabled || currentComponent == null)
       return;
@@ -535,8 +535,9 @@
 
   /**
    * This method hides the ToolTip.
+   * This is package-private to avoid an accessor method.
    */
-  private void hideTip()
+  void hideTip()
   {
     if (currentTip == null || ! currentTip.isVisible() || ! enabled)
       return;
Index: libjava/javax/swing/TransferHandler.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/TransferHandler.java,v
retrieving revision 1.4
diff -u -r1.4 TransferHandler.java
--- libjava/javax/swing/TransferHandler.java	16 Feb 2005 20:02:42 -0000	1.4
+++ libjava/javax/swing/TransferHandler.java	9 Jul 2005 22:10:10 -0000
@@ -102,7 +102,7 @@
     }
   }
   
-  private static final long serialVersionUID = -7908749299918704233L;
+  private static final long serialVersionUID = -967749805571669910L;
 
   private static final String COMMAND_COPY = "copy";
   private static final String COMMAND_CUT = "cut";
@@ -119,8 +119,9 @@
   
   /**
    * Clipboard if system clipboard may not be used.
+   * Package-private to avoid an accessor method.
    */
-  private static Clipboard clipboard;
+  static Clipboard clipboard;
   
   private int sourceActions;
   private Icon visualRepresentation;
Index: libjava/javax/swing/UIDefaults.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/UIDefaults.java,v
retrieving revision 1.12
diff -u -r1.12 UIDefaults.java
--- libjava/javax/swing/UIDefaults.java	16 Feb 2005 20:02:43 -0000	1.12
+++ libjava/javax/swing/UIDefaults.java	9 Jul 2005 22:10:10 -0000
@@ -64,8 +64,14 @@
  */
 public class UIDefaults extends Hashtable
 {
+
+  /** Our ResourceBundles. */
   private LinkedList bundles;
+
+  /** The default locale. */
   private Locale defaultLocale;
+
+  /** We use this for firing PropertyChangeEvents. */
   private PropertyChangeSupport propertyChangeSupport;
 
   public static interface ActiveValue
@@ -208,8 +214,12 @@
     }
   }
 
+  /** Our serialVersionUID for serialization. */
   private static final long serialVersionUID = 7341222528856548117L;
 
+  /**
+   * Constructs a new empty UIDefaults instance.
+   */
   public UIDefaults()
   {
     bundles = new LinkedList();
@@ -217,6 +227,14 @@
     propertyChangeSupport = new PropertyChangeSupport(this);
   }
 
+  /**
+   * Constructs a new UIDefaults instance and loads the specified entries.
+   * The entries are expected to come in pairs, that means
+   * <code>entries[0]</code> is a key, <code>entries[1]</code> is a value,
+   * <code>entries[2]</code> a key and so forth.
+   *
+   * @param entries the entries to initialize the UIDefaults instance with
+   */
   public UIDefaults(Object[] entries)
   {
     this();
@@ -225,11 +243,24 @@
       put(entries[2 * i], entries[2 * i + 1]);
   }
 
+  /**
+   * Returns the entry for the specified <code>key</code> in the default
+   * locale.
+   *
+   * @return the entry for the specified <code>key</code>
+   */
   public Object get(Object key)
   {
     return this.get(key, getDefaultLocale());
   }
 
+  /**
+   * Returns the entry for the specified <code>key</code> in the Locale
+   * <code>loc</code>.
+   *
+   * @param key the key for which we return the value
+   * @param loc the locale
+   */
   public Object get(Object key, Locale loc)
   {
     Object obj = null;
@@ -284,133 +315,344 @@
     return obj;
   }
 
+  /**
+   * Puts a key and value into this UIDefaults object.<br>
+   * In contrast to
+   * {@link java.util.Hashtable}s <code>null</code>-values are accepted
+   * here and treated like #remove(key).
+   * <br>
+   * This fires a PropertyChangeEvent with key as name and the old and new
+   * values.
+   *
+   * @param key the key to put into the map
+   * @param value the value to put into the map
+   *
+   * @return the old value for key or <code>null</code> if <code>key</code>
+   *     had no value assigned
+   */
   public Object put(Object key, Object value)
   {
-    Object old;
-    if (value != null)
-      old = super.put(key, value);
-    else
-      old = super.remove(key);
+    Object old = checkAndPut(key, value);
+
     if (key instanceof String && old != value)
       firePropertyChange((String) key, old, value);
     return old;
   }
 
+  /**
+   * Puts a set of key-value pairs into the map.
+   * The entries are expected to come in pairs, that means
+   * <code>entries[0]</code> is a key, <code>entries[1]</code> is a value,
+   * <code>entries[2]</code> a key and so forth.
+   * <br>
+   * If a value is <code>null</code> it is treated like #remove(key).
+   * <br>
+   * This unconditionally fires a PropertyChangeEvent with
+   * <code>&apos;UIDefaults&apos;</code> as name and <code>null</code> for
+   * old and new value.
+   *
+   * @param entries the entries to be put into the map
+   */
   public void putDefaults(Object[] entries)
   {
     for (int i = 0; (2 * i + 1) < entries.length; ++i)
   {
-        super.put(entries[2 * i], entries[2 * i + 1]);
+        checkAndPut(entries[2 * i], entries[2 * i + 1]);
       }
     firePropertyChange("UIDefaults", null, null);
   }
 
+  /**
+   * Checks the value for <code>null</code> and put it into the Hashtable, if
+   * it is not <code>null</code>. If the value is <code>null</code> then
+   * remove the corresponding key.
+   *
+   * @param key the key to put into this UIDefauls table
+   * @param value the value to put into this UIDefaults table
+   *
+   * @return the old value for <code>key</code>
+   */
+  private Object checkAndPut(Object key, Object value)
+  {
+    Object old;
+
+    if (value != null)
+      old = super.put(key, value);
+    else
+      old = super.remove(key);
+
+    return old;
+  }
+
+  /**
+   * Returns a font entry for the default locale.
+   *
+   * @param key the key to the requested entry
+   *
+   * @return the font entry for <code>key</code> or null if no such entry
+   *     exists
+   */
   public Font getFont(Object key)
   {
     Object o = get(key);
     return o instanceof Font ? (Font) o : null;
   }
 
+  /**
+   * Returns a font entry for a specic locale.
+   *
+   * @param key the key to the requested entry
+   * @param locale the locale to the requested entry
+   *
+   * @return the font entry for <code>key</code> or null if no such entry
+   *     exists
+   */
   public Font getFont(Object key, Locale l)
   {
     Object o = get(key, l);
     return o instanceof Font ? (Font) o : null;
   }
 
+  /**
+   * Returns a color entry for the default locale.
+   *
+   * @param key the key to the requested entry
+   *
+   * @return the color entry for <code>key</code> or null if no such entry
+   *     exists
+   */
   public Color getColor(Object key)
   {
     Object o = get(key);
     return o instanceof Color ? (Color) o : null;
   }
 
+  /**
+   * Returns a color entry for a specic locale.
+   *
+   * @param key the key to the requested entry
+   * @param locale the locale to the requested entry
+   *
+   * @return the color entry for <code>key</code> or null if no such entry
+   *     exists
+   */
   public Color getColor(Object key, Locale l)
   {
     Object o = get(key, l);
     return o instanceof Color ? (Color) o : null;
   }
 
+  /**
+   * Returns an icon entry for the default locale.
+   *
+   * @param key the key to the requested entry
+   *
+   * @return the icon entry for <code>key</code> or null if no such entry
+   *     exists
+   */
   public Icon getIcon(Object key)
   {
     Object o = get(key);
     return o instanceof Icon ? (Icon) o : null;
   }
 
+  /**
+   * Returns an icon entry for a specic locale.
+   *
+   * @param key the key to the requested entry
+   * @param locale the locale to the requested entry
+   *
+   * @return the icon entry for <code>key</code> or null if no such entry
+   *     exists
+   */
   public Icon getIcon(Object key, Locale l)
   {
     Object o = get(key, l);
     return o instanceof Icon ? (Icon) o : null;
   }
 
+  /**
+   * Returns a border entry for the default locale.
+   *
+   * @param key the key to the requested entry
+   *
+   * @return the border entry for <code>key</code> or null if no such entry
+   *     exists
+   */
   public Border getBorder(Object key)
   {
     Object o = get(key);
     return o instanceof Border ? (Border) o : null;
   }
 
+  /**
+   * Returns a border entry for a specic locale.
+   *
+   * @param key the key to the requested entry
+   * @param locale the locale to the requested entry
+   *
+   * @return the border entry for <code>key</code> or null if no such entry
+   *     exists
+   */
   public Border getBorder(Object key, Locale l)
   {
     Object o = get(key, l);
     return o instanceof Border ? (Border) o : null;
   }
 
+  /**
+   * Returns a string entry for the default locale.
+   *
+   * @param key the key to the requested entry
+   *
+   * @return the string entry for <code>key</code> or null if no such entry
+   *     exists
+   */
   public String getString(Object key)
   {
     Object o = get(key);
     return o instanceof String ? (String) o : null;
   }
 
+  /**
+   * Returns a string entry for a specic locale.
+   *
+   * @param key the key to the requested entry
+   * @param locale the locale to the requested entry
+   *
+   * @return the string entry for <code>key</code> or null if no such entry
+   *     exists
+   */
   public String getString(Object key, Locale l)
   {
     Object o = get(key, l);
     return o instanceof String ? (String) o : null;
   }
 
+  /**
+   * Returns an integer entry for the default locale.
+   *
+   * @param key the key to the requested entry
+   *
+   * @return the integer entry for <code>key</code> or null if no such entry
+   *     exists
+   */
   public int getInt(Object key)
   {
     Object o = get(key);
     return o instanceof Integer ? ((Integer) o).intValue() : 0;
   }
 
+  /**
+   * Returns an integer entry for a specic locale.
+   *
+   * @param key the key to the requested entry
+   * @param locale the locale to the requested entry
+   *
+   * @return the integer entry for <code>key</code> or null if no such entry
+   *     exists
+   */
   public int getInt(Object key, Locale l)
   {
     Object o = get(key, l);
     return o instanceof Integer ? ((Integer) o).intValue() : 0;
   }
 
+  /**
+   * Returns a boolean entry for the default locale.
+   *
+   * @param key the key to the requested entry
+   *
+   * @return the boolean entry for <code>key</code> or null if no such entry
+   *     exists
+   */
   public boolean getBoolean(Object key)
   {
     return Boolean.TRUE.equals(get(key));
   }
 
+  /**
+   * Returns a boolean entry for a specic locale.
+   *
+   * @param key the key to the requested entry
+   * @param locale the locale to the requested entry
+   *
+   * @return the boolean entry for <code>key</code> or null if no such entry
+   *     exists
+   */
   public boolean getBoolean(Object key, Locale l)
   {
     return Boolean.TRUE.equals(get(key, l));
   }
 
+  /**
+   * Returns an insets entry for the default locale.
+   *
+   * @param key the key to the requested entry
+   *
+   * @return the insets entry for <code>key</code> or null if no such entry
+   *     exists
+   */
   public Insets getInsets(Object key) 
   {
     Object o = get(key);
     return o instanceof Insets ? (Insets) o : null;
   }
 
+  /**
+   * Returns an insets entry for a specic locale.
+   *
+   * @param key the key to the requested entry
+   * @param locale the locale to the requested entry
+   *
+   * @return the boolean entry for <code>key</code> or null if no such entry
+   *     exists
+   */
   public Insets getInsets(Object key, Locale l) 
   {
     Object o = get(key, l);
     return o instanceof Insets ? (Insets) o : null;
   }
 
+  /**
+   * Returns a dimension entry for the default locale.
+   *
+   * @param key the key to the requested entry
+   *
+   * @return the dimension entry for <code>key</code> or null if no such entry
+   *     exists
+   */
   public Dimension getDimension(Object key) 
   {
     Object o = get(key);
     return o instanceof Dimension ? (Dimension) o : null;
   }
 
+  /**
+   * Returns a dimension entry for a specic locale.
+   *
+   * @param key the key to the requested entry
+   * @param locale the locale to the requested entry
+   *
+   * @return the boolean entry for <code>key</code> or null if no such entry
+   *     exists
+   */
   public Dimension getDimension(Object key, Locale l) 
   {
     Object o = get(key, l);
     return o instanceof Dimension ? (Dimension) o : null;
   }
 
+  /**
+   * Returns the ComponentUI class that renders a component. <code>id</code>
+   * is the ID for which the String value of the classname is stored in
+   * this UIDefaults map.
+   *
+   * @param id the ID of the UI class
+   * @param loader the ClassLoader to use
+   *
+   * @return the UI class for <code>id</code>
+   */
   public Class getUIClass(String id, ClassLoader loader)
   {
     String className = (String) get (id);
@@ -428,16 +670,38 @@
       }
   }
 
+  /**
+   * Returns the ComponentUI class that renders a component. <code>id</code>
+   * is the ID for which the String value of the classname is stored in
+   * this UIDefaults map.
+   *
+   * @param id the ID of the UI class
+   *
+   * @return the UI class for <code>id</code>
+   */
   public Class getUIClass(String id)
   {
     return getUIClass (id, null);
   }
 
+  /**
+   * If a key is requested in #get(key) that has no value, this method
+   * is called before returning <code>null</code>.
+   *
+   * @param msg the error message
+   */
   protected void getUIError(String msg)
   {
     System.err.println ("UIDefaults.getUIError: " + msg);
   }
 
+  /**
+   * Returns the {@link ComponentUI} for the specified {@link JComponent}.
+   *
+   * @param target the component for which the ComponentUI is requested
+   *
+   * @return the {@link ComponentUI} for the specified {@link JComponent}
+   */
   public ComponentUI getUI(JComponent target)
   {
     String classId = target.getUIClassID ();
@@ -477,42 +741,86 @@
       }
   }
 
+  /**
+   * Adds a {@link PropertyChangeListener} to this UIDefaults map.
+   * Registered PropertyChangeListener are notified when values
+   * are beeing put into this UIDefaults map.
+   *
+   * @param listener the PropertyChangeListener to add
+   */
   public void addPropertyChangeListener(PropertyChangeListener listener)
   {
     propertyChangeSupport.addPropertyChangeListener(listener);
   }
 
+  /**
+   * Removes a PropertyChangeListener from this UIDefaults map.
+   *
+   * @param listener the PropertyChangeListener to remove
+   */
   public void removePropertyChangeListener(PropertyChangeListener listener)
   {
     propertyChangeSupport.removePropertyChangeListener(listener);
   }
 
+  /**
+   * Returns an array of all registered PropertyChangeListeners.
+   *
+   * @return all registered PropertyChangeListeners
+   */
   public PropertyChangeListener[] getPropertyChangeListeners()
   {
     return propertyChangeSupport.getPropertyChangeListeners();
   }
 
+  /**
+   * Fires a PropertyChangeEvent.
+   *
+   * @param property the property name
+   * @param oldValue the old value
+   * @param newValue the new value
+   */
   protected void firePropertyChange(String property,
 				    Object oldValue, Object newValue)
   {
     propertyChangeSupport.firePropertyChange(property, oldValue, newValue);
   }
 
+  /**
+   * Adds a ResourceBundle for localized values.
+   *
+   * @param name the name of the ResourceBundle to add
+   */
   public void addResourceBundle(String name)
   {
     bundles.addFirst(name);
   }
 
+  /**
+   * Removes a ResourceBundle.
+   *
+   * @param name the name of the ResourceBundle to remove
+   */
   public void removeResourceBundle(String name)
   {
     bundles.remove(name);
   }
 
+  /**
+   * Sets the current locale to <code>loc</code>.
+   *
+   * @param loc the Locale to be set
+   */
   public void setDefaultLocale(Locale loc)
   {
     defaultLocale = loc;
   }
 
+  /**
+   * Returns the current default locale.
+   *
+   * @return the current default locale
+   */
   public Locale getDefaultLocale()
   {
     return defaultLocale;
Index: libjava/javax/swing/UIManager.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/UIManager.java,v
retrieving revision 1.13
diff -u -r1.13 UIManager.java
--- libjava/javax/swing/UIManager.java	16 Feb 2005 20:02:43 -0000	1.13
+++ libjava/javax/swing/UIManager.java	9 Jul 2005 22:10:10 -0000
@@ -1,5 +1,5 @@
 /* UIManager.java -- 
-   Copyright (C) 2002, 2003, 2004  Free Software Foundation, Inc.
+   Copyright (C) 2002, 2003, 2004, 2005  Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -47,6 +47,7 @@
 import java.util.Locale;
 
 import javax.swing.border.Border;
+import javax.swing.event.EventListenerList;
 import javax.swing.plaf.ComponentUI;
 import javax.swing.plaf.metal.MetalLookAndFeel;
 
@@ -72,6 +73,23 @@
     {
       return clazz;
     }
+
+    /**
+     * Returns a String representation of the LookAndFeelInfo object.
+     *
+     * @return a String representation of the LookAndFeelInfo object
+     */
+    public String toString()
+    {
+      StringBuffer s = new StringBuffer();
+      s.append(getClass().getName());
+      s.append('[');
+      s.append(getName());
+      s.append(' ');
+      s.append(getClassName());
+      s.append(']');
+      return s.toString();
+    }
   }
 
   private static final long serialVersionUID = -5547433830339189365L;
@@ -83,7 +101,28 @@
   static LookAndFeel[] aux_installed;
   
   static LookAndFeel look_and_feel = new MetalLookAndFeel();
-    
+
+  static
+  {
+    String defaultlaf = System.getProperty("swing.defaultlaf");
+    try {
+      if (defaultlaf != null)
+        {
+          Class lafClass = Class.forName(defaultlaf);
+          LookAndFeel laf = (LookAndFeel) lafClass.newInstance();
+          setLookAndFeel(laf);
+        }
+    }
+    catch (Exception ex)
+      {
+        System.err.println("cannot initialize Look and Feel: " + defaultlaf);
+        System.err.println("errot: " + ex.getMessage());
+        System.err.println("falling back to Metal Look and Feel");
+      }
+  }
+  
+  private static EventListenerList listenerList = new EventListenerList();
+
   public UIManager()
   {
     // Do nothing here.
@@ -96,7 +135,7 @@
    */
   public static void addPropertyChangeListener(PropertyChangeListener listener)
   {
-    // FIXME
+    listenerList.add(PropertyChangeListener.class, listener);
   }
 
   /**
@@ -106,7 +145,7 @@
    */
   public static void removePropertyChangeListener(PropertyChangeListener listener)
   {
-    // FIXME
+    listenerList.remove(PropertyChangeListener.class, listener);
   }
 
   /**
@@ -118,8 +157,8 @@
    */
   public static PropertyChangeListener[] getPropertyChangeListeners()
   {
-    // FIXME
-    throw new Error ("Not implemented");
+    return (PropertyChangeListener[])
+      listenerList.getListeners(PropertyChangeListener.class);
   }
 
   /**
Index: libjava/javax/swing/colorchooser/DefaultHSBChooserPanel.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/colorchooser/DefaultHSBChooserPanel.java,v
retrieving revision 1.3
diff -u -r1.3 DefaultHSBChooserPanel.java
--- libjava/javax/swing/colorchooser/DefaultHSBChooserPanel.java	30 Nov 2004 23:59:01 -0000	1.3
+++ libjava/javax/swing/colorchooser/DefaultHSBChooserPanel.java	9 Jul 2005 22:10:10 -0000
@@ -1,5 +1,5 @@
 /* DefaultHSBChooserPanel.java --
-   Copyright (C) 2004 Free Software Foundation, Inc.
+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -70,38 +70,47 @@
  */
 class DefaultHSBChooserPanel extends AbstractColorChooserPanel
 {
-  /** The gradient image displayed. */
-  private transient Image gradientImage;
+  /** The gradient image displayed.
+   * This is package-private to avoid an accessor method.  */
+  transient Image gradientImage;
 
   /** The Panel that holds the gradient image. */
   private transient JPanel gradientPanel;
 
-  /** The track gradient image. */
-  private transient Image trackImage;
+  /** The track gradient image.
+   * This is package-private to avoid an accessor method.  */
+  transient Image trackImage;
 
   /** The panel that holds the track. */
   private transient JPanel trackPanel;
 
-  /** The slider for the locked HSB value. */
-  private transient JSlider slider;
-
-  /** The RadioButton that controls the Hue. */
-  private transient JRadioButton hRadio;
-
-  /** The RadioButton that controls the Saturation. */
-  private transient JRadioButton sRadio;
-
-  /** The RadioButton that controls the Brightness. */
-  private transient JRadioButton bRadio;
-
-  /** The JSpinner that controls the Hue. */
-  private transient JSpinner hSpinner;
-
-  /** The JSpinner that controls the Saturation. */
-  private transient JSpinner sSpinner;
-
-  /** The JSpinner that controls the Brightness. */
-  private transient JSpinner bSpinner;
+  /** The slider for the locked HSB value.
+   * This is package-private to avoid an accessor method.  */
+  transient JSlider slider;
+
+  /** The RadioButton that controls the Hue.
+   * This is package-private to avoid an accessor method.  */
+  transient JRadioButton hRadio;
+
+  /** The RadioButton that controls the Saturation.
+   * This is package-private to avoid an accessor method.  */
+  transient JRadioButton sRadio;
+
+  /** The RadioButton that controls the Brightness.
+   * This is package-private to avoid an accessor method.  */
+  transient JRadioButton bRadio;
+
+  /** The JSpinner that controls the Hue.
+   * This is package-private to avoid an accessor method.  */
+  transient JSpinner hSpinner;
+
+  /** The JSpinner that controls the Saturation.
+   * This is package-private to avoid an accessor method.  */
+  transient JSpinner sSpinner;
+
+  /** The JSpinner that controls the Brightness.
+   * This is package-private to avoid an accessor method.  */
+  transient JSpinner bSpinner;
 
   /** The default width of the gradient image. */
   private static final int imgWidth = 200;
@@ -132,20 +141,26 @@
   /** The JLabel that displays the value of Blue. */
   private transient JLabel bFull;
 
-  /** The point that is displayed in the gradient image. */
-  private transient Point gradientPoint = new Point();
+  /** The point that is displayed in the gradient image.
+   * Package-private to avoid an accessor method.
+   */
+  transient Point gradientPoint = new Point();
 
   /**
    * This indicates that the change to the slider or point is triggered
    * internally.
+   * This is package-private to avoid an accessor method.
    */
-  private transient boolean internalChange = false;
+  transient boolean internalChange = false;
 
-  /** This indicates that the change to the spinner is triggered internally. */
-  private transient boolean spinnerTrigger = false;
+  /** This indicates that the change to the spinner is triggered
+   * internally.
+   * This is package-private to avoid an accessor method.  */
+  transient boolean spinnerTrigger = false;
 
-  /** This int identifies which spinner is currently locked. */
-  private transient int locked = -1;
+  /** This int identifies which spinner is currently locked.
+   * This is package-private to avoid an accessor method.  */
+  transient int locked = -1;
 
   /** This value indicates that the Hue spinner is locked. */
   static final int HLOCKED = 0;
@@ -159,8 +174,9 @@
   /**
    * This method indicates that the mouse event is in the process of being
    * handled.
+   * This is package-private to avoid an accessor method.
    */
-  private transient boolean handlingMouse;
+  transient boolean handlingMouse;
 
   /**
    * This helper class handles mouse events on the gradient image.
@@ -716,8 +732,9 @@
   /**
    * This method calls the appropriate method to update the gradient image
    * depending on which HSB value is constant.
+   * This is package-private to avoid an accessor method.
    */
-  private void updateImage()
+  void updateImage()
   {
     switch (locked)
       {
@@ -750,8 +767,9 @@
   /**
    * This method updates the slider in response to making a different HSB
    * property the constant.
+   * This is package-private to avoid an accessor method.
    */
-  private void updateSlider()
+  void updateSlider()
   {
     if (slider == null)
       return;
@@ -779,8 +797,9 @@
   /**
    * This method updates the track gradient image depending on which HSB
    * property is constant.
+   * This is package-private to avoid an accessor method.
    */
-  private void updateTrack()
+  void updateTrack()
   {
     switch (locked)
       {
Index: libjava/javax/swing/colorchooser/DefaultRGBChooserPanel.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/colorchooser/DefaultRGBChooserPanel.java,v
retrieving revision 1.4
diff -u -r1.4 DefaultRGBChooserPanel.java
--- libjava/javax/swing/colorchooser/DefaultRGBChooserPanel.java	16 Feb 2005 20:02:46 -0000	1.4
+++ libjava/javax/swing/colorchooser/DefaultRGBChooserPanel.java	9 Jul 2005 22:10:10 -0000
@@ -109,17 +109,20 @@
     }
   }
 
-  /** Whether the color change was initiated by the spinners. */
-  private transient boolean spinnerChange = false;
-
-  /** Whether the color change was initiated by the sliders. */
-  private transient boolean sliderChange = false;
+  /** Whether the color change was initiated by the spinners.
+   * This is package-private to avoid an accessor method.  */
+  transient boolean spinnerChange = false;
+
+  /** Whether the color change was initiated by the sliders.
+   * This is package-private to avoid an accessor method.  */
+  transient boolean sliderChange = false;
 
   /**
    * Whether the change was forced by the chooser (meaning the color has
    * already been changed).
+   * This is package-private to avoid an accessor method.
    */
-  private transient boolean updateChange = false;
+  transient boolean updateChange = false;
 
   /** The ChangeListener for the sliders. */
   private transient ChangeListener colorChanger;
@@ -127,14 +130,17 @@
   /** The ChangeListener for the spinners. */
   private transient ChangeListener spinnerHandler;
 
-  /** The slider that handles the red values. */
-  private transient JSlider R;
-
-  /** The slider that handles the green values. */
-  private transient JSlider G;
-
-  /** The slider that handles the blue values. */
-  private transient JSlider B;
+  /** The slider that handles the red values.
+   * This is package-private to avoid an accessor method.  */
+  transient JSlider R;
+
+  /** The slider that handles the green values.
+   * This is package-private to avoid an accessor method.  */
+  transient JSlider G;
+
+  /** The slider that handles the blue values.
+   * This is package-private to avoid an accessor method.  */
+  transient JSlider B;
 
   /** The label for the red slider. */
   private transient JLabel RLabel;
@@ -145,14 +151,17 @@
   /** The label for the blue slider. */
   private transient JLabel BLabel;
 
-  /** The spinner that handles the red values. */
-  private transient JSpinner RSpinner;
-
-  /** The spinner that handles the green values. */
-  private transient JSpinner GSpinner;
-
-  /** The spinner that handles the blue values. */
-  private transient JSpinner BSpinner;
+  /** The spinner that handles the red values.
+   * This is package-private to avoid an accessor method.  */
+  transient JSpinner RSpinner;
+
+  /** The spinner that handles the green values.
+   * This is package-private to avoid an accessor method.  */
+  transient JSpinner GSpinner;
+
+  /** The spinner that handles the blue values.
+   * This is package-private to avoid an accessor method.  */
+  transient JSpinner BSpinner;
 
   /**
    * Creates a new DefaultRGBChooserPanel object.
Index: libjava/javax/swing/colorchooser/DefaultSwatchChooserPanel.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/colorchooser/DefaultSwatchChooserPanel.java,v
retrieving revision 1.4
diff -u -r1.4 DefaultSwatchChooserPanel.java
--- libjava/javax/swing/colorchooser/DefaultSwatchChooserPanel.java	16 Feb 2005 20:02:47 -0000	1.4
+++ libjava/javax/swing/colorchooser/DefaultSwatchChooserPanel.java	9 Jul 2005 22:10:10 -0000
@@ -501,10 +501,11 @@
 
     /**
      * This method adds the given color to the beginning of the swatch panel.
+     * Package-private to avoid an accessor method.
      *
      * @param c The color to add.
      */
-    private void addColorToQueue(Color c)
+    void addColorToQueue(Color c)
     {
       if (--start == -1)
 	start = numRows * numCols - 1;
Index: libjava/javax/swing/event/TreeSelectionEvent.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/event/TreeSelectionEvent.java,v
retrieving revision 1.3
diff -u -r1.3 TreeSelectionEvent.java
--- libjava/javax/swing/event/TreeSelectionEvent.java	30 Nov 2004 23:59:01 -0000	1.3
+++ libjava/javax/swing/event/TreeSelectionEvent.java	9 Jul 2005 22:10:10 -0000
@@ -1,5 +1,5 @@
 /* TreeSelectionEvent.java --
-   Copyright (C) 2002, 2004 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -49,142 +49,151 @@
  */
 public class TreeSelectionEvent extends EventObject {
 
-	//-------------------------------------------------------------
-	// Variables --------------------------------------------------
-	//-------------------------------------------------------------
-
-	/**
-	 * paths
-	 */
-	protected TreePath[] paths;
-
-	/**
-	 * areNew
-	 */
-	protected boolean[] areNew;
-
-	/**
-	 * oldLeadSelectionPath
-	 */
-	protected TreePath oldLeadSelectionPath;
-
-	/**
-	 * newLeadSelectionPath
-	 */
-	protected TreePath newLeadSelectionPath;
-
-
-	//-------------------------------------------------------------
-	// Initialization ---------------------------------------------
-	//-------------------------------------------------------------
-
-	/**
-	 * Constructor TreeSelectionEvent
-	 * @param source TODO
-	 * @param paths TODO
-	 * @param areNew TODO
-	 * @param oldLeadSelectionPath TODO
-	 * @param newLeadSelectionPath TODO
-	 */
-	public TreeSelectionEvent(Object source, TreePath[] paths,
-				boolean[] areNew, TreePath oldLeadSelectionPath,
-				TreePath newLeadSelectionPath) {
-		super(source);
-		this.paths					= paths;
-		this.areNew					= areNew;
-		this.oldLeadSelectionPath	= oldLeadSelectionPath;
-		this.newLeadSelectionPath	= newLeadSelectionPath;
-	} // TreeSelectionEvent()
-
-	/**
-	 * Constructor TreeSelectionEvent
-	 * @param source TODO
-	 * @param paths TODO
-	 * @param areNew TODO
-	 * @param oldLeadSelectionPath TODO
-	 * @param newLeadSelectionPath TODO
-	 */
-	public TreeSelectionEvent(Object source, TreePath path,
-				boolean isNew, TreePath oldLeadSelectionPath,
-				TreePath newLeadSelectionPath) {
-		super(source);
-//TODO		this.paths					= new TreePath[1]{path};
-//TODO		this.areNew					= new boolean[1]{isNew};
-		this.oldLeadSelectionPath	= oldLeadSelectionPath;
-		this.newLeadSelectionPath	= newLeadSelectionPath;
-	} // TreeSelectionEvent()
-
-
-	//-------------------------------------------------------------
-	// Methods ----------------------------------------------------
-	//-------------------------------------------------------------
-
-	/**
-	 * getPath
-	 * @returns TreePath
-	 */
-	public TreePath getPath() {
-		return paths[0];
-	} // getPath()
-
-	/**
-	 * getPaths
-	 * @returns TreePath[]
-	 */
-	public TreePath[] getPaths() {
-		return paths;
-	} // getPaths()
-
-	/**
-	 * isAddedPath
-	 * @returns boolean
-	 */
-	public boolean isAddedPath() {
-		return false; // TODO
-	} // isAddedPath()
-
-	/**
-	 * isAddedPath
-	 * @param path TODO
-	 * @returns boolean
-	 */
-	public boolean isAddedPath(TreePath path) {
-		return false; // TODO
-	} // isAddedPath()
-
-	/**
-	 * isAddedPath
-	 * @param index TODO
-	 * @returns boolean
-	 */
-	public boolean isAddedPath(int index) {
-		return false; // TODO
-	} // isAddedPath()
-
-	/**
-	 * getOldLeadSelectionPath
-	 * @returns TreePath
-	 */
-	public TreePath getOldLeadSelectionPath() {
-		return oldLeadSelectionPath;
-	} // getOldLeadSelectionPath()
-
-	/**
-	 * getNewLeadSelectionPath
-	 * @returns TreePath
-	 */
-	public TreePath getNewLeadSelectionPath() {
-		return newLeadSelectionPath;
-	} // getNewLeadSelectionPath()
-
-	/**
-	 * cloneWithSource
-	 * @param source TODO
-	 * @returns Object
-	 */
-	public Object cloneWithSource(Object source) {
-		return null; // TODO
-	} // cloneWithSource()
+  //-------------------------------------------------------------
+  // Variables --------------------------------------------------
+  //-------------------------------------------------------------
+
+  /**
+   * paths
+   */
+  protected TreePath[] paths;
+
+  /**
+   * areNew
+   */
+  protected boolean[] areNew;
+
+  /**
+   * oldLeadSelectionPath
+   */
+  protected TreePath oldLeadSelectionPath;
+
+  /**
+   * newLeadSelectionPath
+   */
+  protected TreePath newLeadSelectionPath;
+
+
+  //-------------------------------------------------------------
+  // Initialization ---------------------------------------------
+  //-------------------------------------------------------------
+
+  /**
+   * Constructor TreeSelectionEvent
+   * @param source TODO
+   * @param paths TODO
+   * @param areNew TODO
+   * @param oldLeadSelectionPath TODO
+   * @param newLeadSelectionPath TODO
+   */
+  public TreeSelectionEvent(Object source, TreePath[] paths,
+			    boolean[] areNew, TreePath oldLeadSelectionPath,
+			    TreePath newLeadSelectionPath)
+  {
+    super(source);
+    this.paths					= paths;
+    this.areNew					= areNew;
+    this.oldLeadSelectionPath	= oldLeadSelectionPath;
+    this.newLeadSelectionPath	= newLeadSelectionPath;
+  } // TreeSelectionEvent()
+
+  /**
+   * Constructor TreeSelectionEvent
+   * @param source TODO
+   * @param paths TODO
+   * @param areNew TODO
+   * @param oldLeadSelectionPath TODO
+   * @param newLeadSelectionPath TODO
+   */
+  public TreeSelectionEvent(Object source, TreePath path,
+			    boolean isNew, TreePath oldLeadSelectionPath,
+			    TreePath newLeadSelectionPath)
+  {
+    super(source);
+    this.paths = new TreePath[]{path};
+    this.areNew = new boolean[]{isNew};
+    this.oldLeadSelectionPath	= oldLeadSelectionPath;
+    this.newLeadSelectionPath	= newLeadSelectionPath;
+  } // TreeSelectionEvent()
+
+
+  //-------------------------------------------------------------
+  // Methods ----------------------------------------------------
+  //-------------------------------------------------------------
+
+  /**
+   * @returns the first path element
+   */
+  public TreePath getPath()
+  {
+    return paths[0];
+  } // getPath()
+
+  /**
+   * 
+   * @returns the paths with selection changed
+   */
+  public TreePath[] getPaths()
+  {
+    return (TreePath[]) paths.clone();
+  } // getPaths()
+
+  /**
+   * @return true if the first path is added to the selection, false otherwise
+   */
+  public boolean isAddedPath()
+  {
+    return areNew[0];
+  } // isAddedPath()
+
+  /**
+   * @param path the path to check
+   * @return true if the path is added to the selection, false otherwise
+   */
+  public boolean isAddedPath(TreePath path)
+  {
+    for (int i = paths.length - 1; i >= 0; i--)
+      if (paths[i].equals(path))
+	return areNew[i];
+
+    return false;
+  } // isAddedPath()
+
+  /**
+   * @param index the index'th path
+   * @return true if the path is added to the selection, false otherwise
+   */
+  public boolean isAddedPath(int index)
+  {
+    return areNew[index];
+  } // isAddedPath()
+
+  /**
+   * @return the previous lead selection path
+   */
+  public TreePath getOldLeadSelectionPath()
+  {
+    return oldLeadSelectionPath;
+  } // getOldLeadSelectionPath()
+
+  /**
+   * @returns the current lead selection path
+   */
+  public TreePath getNewLeadSelectionPath()
+  {
+    return newLeadSelectionPath;
+  } // getNewLeadSelectionPath()
+
+  /**
+   * @param source the new event source
+   * @return a cloned event with another event source
+   */
+  public Object cloneWithSource(Object source)
+  {
+    return new TreeSelectionEvent (source, paths, areNew,
+				   oldLeadSelectionPath,
+				   newLeadSelectionPath);
+  } // cloneWithSource()
 
 
 } // TreeSelectionEvent
Index: libjava/javax/swing/filechooser/FileSystemView.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/filechooser/FileSystemView.java,v
retrieving revision 1.3
diff -u -r1.3 FileSystemView.java
--- libjava/javax/swing/filechooser/FileSystemView.java	5 May 2004 09:16:16 -0000	1.3
+++ libjava/javax/swing/filechooser/FileSystemView.java	9 Jul 2005 22:10:10 -0000
@@ -1,5 +1,5 @@
 /* FileSystemView.java --
-   Copyright (C) 2002, 2004  Free Software Foundation, Inc.
+   Copyright (C) 2002, 2004, 2005  Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -35,116 +35,327 @@
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
 
-
 package javax.swing.filechooser;
 
 import java.io.File;
 import java.io.IOException;
+import java.util.ArrayList;
+import javax.swing.Icon;
+
 
 /**
- * FileSystemView
- * @author	Andrew Selkirk
- * @version	1.0
+ * DOCUMENT ME!
  */
-public abstract class FileSystemView {
-
-	//-------------------------------------------------------------
-	// Initialization ---------------------------------------------
-	//-------------------------------------------------------------
-
-	/**
-	 * Constructor FileSystemView
-	 */
-	public FileSystemView() {
-		// TODO
-	} // FileSystemView()
-
-
-	//-------------------------------------------------------------
-	// Methods ----------------------------------------------------
-	//-------------------------------------------------------------
-
-	/**
-	 * getFileSystemView
-	 * @returns FileSystemView
-	 */
-	public static FileSystemView getFileSystemView() {
-		return null; // TODO
-	} // getFileSystemView()
-
-	/**
-	 * isRoot
-	 * @param file TODO
-	 * @returns boolean
-	 */
-	public abstract boolean isRoot(File file);
-
-	/**
-	 * createNewFolder
-	 * @param file TODO
-	 * @exception IOException TODO
-	 * @returns File
-	 */
-	public abstract File createNewFolder(File file) throws IOException;
-
-	/**
-	 * isHiddenFile
-	 * @param file TODO
-	 * @returns boolean
-	 */
-	public abstract boolean isHiddenFile(File file);
-
-	/**
-	 * getRoots
-	 * @returns File[]
-	 */
-	public abstract File[] getRoots();
-
-	/**
-	 * getHomeDirectory
-	 * @returns File
-	 */
-	public File getHomeDirectory() {
-		return null; // TODO
-	} // getHomeDirectory()
-
-	/**
-	 * createFileObject
-	 * @param directory TODO
-	 * @param filename TODO
-	 * @returns File
-	 */
-	public File createFileObject(File directory, String filename) {
-		return null; // TODO
-	} // createFileObject()
-
-	/**
-	 * createFileObject
-	 * @param path TODO
-	 * @returns File
-	 */
-	public File createFileObject(String path) {
-		return null; // TODO
-	} // createFileObject()
-
-	/**
-	 * getFiles
-	 * @param directory TODO
-	 * @param fileHiding TODO
-	 * @returns File[]
-	 */
-	public File[] getFiles(File directory, boolean fileHiding) {
-		return null; // TODO
-	} // getFiles()
-
-	/**
-	 * getParentDirectory
-	 * @param directory TODO
-	 * @returns File
-	 */
-	public File getParentDirectory(File directory) {
-		return null; // TODO
-	} // getParentDirectory()
-
-
-} // FileSystemView
+public abstract class FileSystemView
+{
+  /**
+   * DOCUMENT ME!
+   *
+   * @param dir DOCUMENT ME!
+   * @param filename DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public File createFileObject(File dir, String filename)
+  {
+    return new File(dir, filename);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param path DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public File createFileObject(String path)
+  {
+    return new File(path);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  protected File createFileSystemRoot(File f)
+  {
+    File[] roots = File.listRoots();
+    if (roots == null)
+      return null;
+    return roots[0];
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param containingDir DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   *
+   * @throws IOException DOCUMENT ME!
+   */
+  public abstract File createNewFolder(File containingDir)
+                                throws IOException;
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param parent DOCUMENT ME!
+   * @param fileName DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public File getChild(File parent, String fileName)
+  {
+    // FIXME: Handle the case when parent and child are special folders.
+    return new File(parent, fileName);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public File getDefaultDirectory()
+  {
+    return getHomeDirectory();
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param dir DOCUMENT ME!
+   * @param useFileHiding DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public File[] getFiles(File dir, boolean useFileHiding)
+  {
+    if (dir == null)
+      return null;
+    File[] files = dir.listFiles();
+    if (! useFileHiding)
+      return files;
+    ArrayList trim = new ArrayList();
+    for (int i = 0; i < files.length; i++)
+      if (! files[i].isHidden())
+	trim.add(files[i]);
+    File[] value = (File[]) trim.toArray(new File[0]);
+    return value;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public static FileSystemView getFileSystemView()
+  {
+    if (File.separator.equals("/"))
+      return new UnixFileSystemView();
+
+    // else if (File.Separator.equals("\"))
+    //	return new Win32FileSystemView();
+    // else 
+    //	return new GenericFileSystemView();
+    return null;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public File getHomeDirectory()
+  {
+    return createFileObject(System.getProperty("user.home"));
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public File getParentDirectory(File f)
+  {
+    if (f == null)
+      return null;
+    return f.getParentFile();
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public File[] getRoots()
+  {
+    // subclass
+    return null;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public String getSystemDisplayName(File f)
+  {
+    return null;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public Icon getSystemIcon(File f)
+  {
+    return null;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public String getSystemTypeDescription(File f)
+  {
+    return null;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param dir DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean isComputerNode(File dir)
+  {
+    return false;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param dir DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean isDrive(File dir)
+  {
+    return false;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean isFileSystem(File f)
+  {
+    return (f.isFile() || f.isDirectory());
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param dir DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean isFileSystemRoot(File dir)
+  {
+    File[] roots = File.listRoots();
+    if (roots == null || dir == null)
+      return false;
+    String filename = dir.getAbsolutePath();
+    for (int i = 0; i < roots.length; i++)
+      if (roots[i].getAbsolutePath().equals(filename))
+	return true;
+    return false;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param dir DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean isFloppyDrive(File dir)
+  {
+    return false;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean isHiddenFile(File f)
+  {
+    return f.isHidden();
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param folder DOCUMENT ME!
+   * @param file DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean isParent(File folder, File file)
+  {
+    File parent = file.getParentFile();
+    if (parent == null)
+      return false;
+    return folder.equals(parent);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean isRoot(File f)
+  {
+    // These are not file system roots.
+    return false;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public Boolean isTraversable(File f)
+  {
+    // Tested. A directory where the user has no permission to rwx is still
+    // traversable. (No files are listed when you traverse the directory)
+    // My best guess is that as long as it's a directory, the file is
+    // traversable.
+    return new Boolean(f.isDirectory());
+  }
+}
Index: libjava/javax/swing/filechooser/UnixFileSystemView.java
===================================================================
RCS file: libjava/javax/swing/filechooser/UnixFileSystemView.java
diff -N libjava/javax/swing/filechooser/UnixFileSystemView.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/filechooser/UnixFileSystemView.java	9 Jul 2005 22:10:10 -0000
@@ -0,0 +1,144 @@
+/* UnixFileSystemView.java --
+   Copyright (C) 2005  Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package javax.swing.filechooser;
+
+import java.io.File;
+import java.io.IOException;
+import javax.swing.Icon;
+
+
+/**
+ * DOCUMENT ME!
+ */
+class UnixFileSystemView extends FileSystemView
+{
+  /** DOCUMENT ME! */
+  private static final String NEW_FOLDER_NAME = "NewFolder";
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param containingDir DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   *
+   * @throws IOException DOCUMENT ME!
+   */
+  public File createNewFolder(File containingDir) throws IOException
+  {
+    int count = 0;
+    File f = null;
+    String filename = containingDir.getAbsolutePath() + File.separator
+                      + NEW_FOLDER_NAME;
+    while (f == null)
+      {
+	String full = filename;
+	if (count > 0)
+	  full += "." + (count++);
+	f = new File(full);
+	if (f.isDirectory() || f.isFile())
+	  {
+	    count++;
+	    f = null;
+	  }
+      }
+    f.mkdir();
+    return f;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public File[] getRoots()
+  {
+    return File.listRoots();
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public String getSystemDisplayName(File f)
+  {
+    // FIXME: Implement;
+    return null;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public Icon getSystemIcon(File f)
+  {
+    // FIXME: Implement;
+    return null;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public String getSystemTypeDescription(File f)
+  {
+    // FIXME: Implement.
+    return null;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean isRoot(File f)
+  {
+    return isFileSystemRoot(f);
+  }
+}
Index: libjava/javax/swing/plaf/basic/BasicArrowButton.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicArrowButton.java,v
retrieving revision 1.6
diff -u -r1.6 BasicArrowButton.java
--- libjava/javax/swing/plaf/basic/BasicArrowButton.java	30 Nov 2004 23:59:03 -0000	1.6
+++ libjava/javax/swing/plaf/basic/BasicArrowButton.java	9 Jul 2005 22:10:10 -0000
@@ -1,5 +1,5 @@
 /* BasicArrowButton.java --
-   Copyright (C) 2004 Free Software Foundation, Inc.
+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -80,17 +80,22 @@
   /**
    * The color the arrow is painted in if disabled and the bottom and right
    * edges of the button.
+   * This is package-private to avoid an accessor method.
    */
-  private transient Color shadow = Color.GRAY;
+  transient Color shadow = Color.GRAY;
 
   /**
    * The color the arrow is painted in if enabled and the bottom and right
    * edges of the button.
+   * This is package-private to avoid an accessor method.
    */
-  private transient Color darkShadow = Color.DARK_GRAY;
+  transient Color darkShadow = Color.DARK_GRAY;
 
-  /** The top and left edges of the button. */
-  private transient Color highlight = Color.WHITE;
+  /**
+   * The top and left edges of the button.
+   * This is package-private to avoid an accessor method.
+   */
+  transient Color highlight = Color.WHITE;
 
   /** The border around the ArrowButton. */
   private transient Border buttonBorder = new Border()
Index: libjava/javax/swing/plaf/basic/BasicButtonListener.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicButtonListener.java,v
retrieving revision 1.5
diff -u -r1.5 BasicButtonListener.java
--- libjava/javax/swing/plaf/basic/BasicButtonListener.java	16 Feb 2005 20:02:49 -0000	1.5
+++ libjava/javax/swing/plaf/basic/BasicButtonListener.java	9 Jul 2005 22:10:10 -0000
@@ -1,5 +1,5 @@
 /* BasicButtonListener.java --
-   Copyright (C) 2004 Free Software Foundation, Inc.
+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -87,9 +87,6 @@
     if (e.getSource() instanceof AbstractButton)
       {
         AbstractButton button = (AbstractButton) e.getSource();
-        ButtonModel model = button.getModel();
-        model.setArmed(false);
-
         if (button.isFocusPainted())
           button.repaint();   
       }
@@ -157,7 +154,7 @@
       {
         AbstractButton button = (AbstractButton) e.getSource();
         ButtonModel model = button.getModel();
-        if ((e.getModifiersEx() & InputEvent.BUTTON1_DOWN_MASK) != 0)
+        if (e.getButton() == MouseEvent.BUTTON1)
           {
             // It is important that these transitions happen in this order.
             model.setArmed(true);
@@ -179,7 +176,7 @@
       {
         AbstractButton button = (AbstractButton) e.getSource();
         ButtonModel model = button.getModel();
-        if ((e.getModifiersEx() & InputEvent.BUTTON1_DOWN_MASK) != 0)
+        if (e.getButton() == MouseEvent.BUTTON1)
           {
             // It is important that these transitions happen in this order.
             model.setPressed(false);
Index: libjava/javax/swing/plaf/basic/BasicButtonUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicButtonUI.java,v
retrieving revision 1.14
diff -u -r1.14 BasicButtonUI.java
--- libjava/javax/swing/plaf/basic/BasicButtonUI.java	16 Feb 2005 20:02:49 -0000	1.14
+++ libjava/javax/swing/plaf/basic/BasicButtonUI.java	9 Jul 2005 22:10:10 -0000
@@ -107,17 +107,29 @@
     textShiftOffset = defaultTextShiftOffset;
   }
 
+  /**
+   * Returns the prefix for the UI defaults property for this UI class.
+   * This is &apos;Button&apos; for this class.
+   *
+   * @return the prefix for the UI defaults property
+   */
+  protected String getPropertyPrefix()
+  {
+    return "Button";
+  }
+
   protected void installDefaults(AbstractButton b)
   {
     UIDefaults defaults = UIManager.getLookAndFeelDefaults();
-    focusColor = defaults.getColor("Button.focus");
-    b.setForeground(defaults.getColor("Button.foreground"));
-    b.setBackground(defaults.getColor("Button.background"));
-    b.setMargin(defaults.getInsets("Button.margin"));
-    b.setBorder(defaults.getBorder("Button.border"));
-    b.setIconTextGap(defaults.getInt("Button.textIconGap"));
+    String prefix = getPropertyPrefix();
+    focusColor = defaults.getColor(prefix + ".focus");
+    b.setForeground(defaults.getColor(prefix + ".foreground"));
+    b.setBackground(defaults.getColor(prefix + ".background"));
+    b.setMargin(defaults.getInsets(prefix + ".margin"));
+    b.setBorder(defaults.getBorder(prefix + ".border"));
+    b.setIconTextGap(defaults.getInt(prefix + ".textIconGap"));
     b.setInputMap(JComponent.WHEN_FOCUSED, 
-                  (InputMap) defaults.get("Button.focusInputMap"));
+                  (InputMap) defaults.get(prefix + ".focusInputMap"));
     b.setOpaque(true);
   }
 
@@ -247,14 +259,12 @@
     Rectangle tr = new Rectangle();
     Rectangle ir = new Rectangle();
     Rectangle vr = new Rectangle();
-    Rectangle br = new Rectangle();
 
     Font f = c.getFont();
 
     g.setFont(f);
 
-    SwingUtilities.calculateInnerArea(b, br);
-    SwingUtilities.calculateInsetArea(br, b.getMargin(), vr);    
+    SwingUtilities.calculateInnerArea(b, vr);
     String text = SwingUtilities.layoutCompoundLabel(c, g.getFontMetrics(f), 
                                                      b.getText(),
                                                      currentIcon(b),
@@ -270,7 +280,7 @@
         || b.isSelected())
       paintButtonPressed(g, b);
     else
-      paintButtonNormal(g, br, c);
+      paintButtonNormal(g, vr, c);
 	
     paintIcon(g, c, ir);
     if (text != null)
Index: libjava/javax/swing/plaf/basic/BasicCheckBoxUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicCheckBoxUI.java,v
retrieving revision 1.5
diff -u -r1.5 BasicCheckBoxUI.java
--- libjava/javax/swing/plaf/basic/BasicCheckBoxUI.java	12 Feb 2004 00:17:24 -0000	1.5
+++ libjava/javax/swing/plaf/basic/BasicCheckBoxUI.java	9 Jul 2005 22:10:10 -0000
@@ -1,5 +1,5 @@
 /* BasicCheckBoxUI.java
-   Copyright (C) 2002, 2004 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -59,7 +59,13 @@
   
   public void installUI(final JComponent c)  {
     super.installUI(c);
-  }  
+  }
+
+  // Overridden to change method access.
+  public String getPropertyPrefix()
+  {
+    return super.getPropertyPrefix();
+  }
 }
 
 
Index: libjava/javax/swing/plaf/basic/BasicColorChooserUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicColorChooserUI.java,v
retrieving revision 1.3
diff -u -r1.3 BasicColorChooserUI.java
--- libjava/javax/swing/plaf/basic/BasicColorChooserUI.java	30 Nov 2004 23:59:03 -0000	1.3
+++ libjava/javax/swing/plaf/basic/BasicColorChooserUI.java	9 Jul 2005 22:10:10 -0000
@@ -1,5 +1,5 @@
 /* BasicColorChooserUI.java --
-   Copyright (C) 2004 Free Software Foundation, Inc.
+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -141,11 +141,14 @@
   /** The PropertyChangeListener for the JColorChooser. */
   protected PropertyChangeListener propertyChangeListener;
 
-  /** The JColorChooser. */
-  private JColorChooser chooser;
+  /**
+   * The JColorChooser.
+   * This is package-private to avoid an accessor method.
+   */
+  JColorChooser chooser;
 
   /** The JTabbedPane that is used. */
-  private JTabbedPane pane;
+  JTabbedPane pane;
 
   /** The Container that holds the preview panel. */
   private Container prevContainer;
@@ -219,10 +222,11 @@
   /**
    * This method adds tabs to the JTabbedPane for the chooserPanels defined in
    * the JColorChooser.
+   * This is package-private to avoid an accessor method.
    *
    * @param panels The Panels that need tabs to be made for them.
    */
-  private void makeTabs(AbstractColorChooserPanel[] panels)
+  void makeTabs(AbstractColorChooserPanel[] panels)
   {
     pane.removeAll();
     for (int i = 0; i < panels.length; i++)
@@ -255,10 +259,11 @@
   /**
    * This is a helper method that swaps the existing preview panel with the
    * given panel.
+   * This is package-private to avoid an accessor method.
    *
    * @param preview The new preview panel.
    */
-  private void updatePreviewPanel(JComponent preview)
+  void updatePreviewPanel(JComponent preview)
   {
     if (prevContainer == null)
       {
Index: libjava/javax/swing/plaf/basic/BasicComboBoxUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicComboBoxUI.java,v
retrieving revision 1.4
diff -u -r1.4 BasicComboBoxUI.java
--- libjava/javax/swing/plaf/basic/BasicComboBoxUI.java	16 Feb 2005 20:02:51 -0000	1.4
+++ libjava/javax/swing/plaf/basic/BasicComboBoxUI.java	9 Jul 2005 22:10:11 -0000
@@ -160,17 +160,22 @@
   private Color highlight;
   private Color lightHighlight;
 
-  /* Size of the largest item in the comboBox */
-  private Dimension largestItemSize;
+  /* Size of the largest item in the comboBox
+   * This is package-private to avoid an accessor method.
+   */
+  Dimension largestItemSize;
 
   // It seems that JComboBox doesn't have a border set explicitely. So we just
   // paint the border everytime combo box is displayed. 
 
-  /* border insets for this JComboBox*/
-  private static final Insets borderInsets = new Insets(2, 2, 2, 2);
+  /* border insets for this JComboBox
+   * This is package-private to avoid an accessor method. */
+  static final Insets borderInsets = new Insets(2, 2, 2, 2);
 
   // Width of the arrow button  
-  private static int arrowButtonWidth = 15;
+  // This is package-private to avoid an accessor method.
+  // FIXME: has wrong name for a constant.
+  static final int arrowButtonWidth = 15;
 
   // FIXME: This fields aren't used anywhere at this moment.
   protected Dimension cachedMinimumSize;
@@ -1106,7 +1111,7 @@
       if (largestItemSize == null)
 	largestItemSize = new Dimension(0, 0);
 
-      for (int i = start - 1; i < end; i++)
+      for (int i = start; i < end; i++)
         {
 	  Object item = model.getElementAt(i);
 	  Component comp = renderer.getListCellRendererComponent(new JList(),
Index: libjava/javax/swing/plaf/basic/BasicDesktopIconUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicDesktopIconUI.java,v
retrieving revision 1.3
diff -u -r1.3 BasicDesktopIconUI.java
--- libjava/javax/swing/plaf/basic/BasicDesktopIconUI.java	30 Nov 2004 23:59:03 -0000	1.3
+++ libjava/javax/swing/plaf/basic/BasicDesktopIconUI.java	9 Jul 2005 22:10:11 -0000
@@ -1,5 +1,5 @@
 /* BasicDesktopIconUI.java --
-   Copyright (C) 2004 Free Software Foundation, Inc.
+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -302,8 +302,9 @@
   /** The MouseListener responsible for reacting to MouseEvents on the JDesktopIcon. */
   private transient MouseInputListener mouseHandler;
 
-  /** The Button in the JDesktopIcon responsible for deiconifying it. */
-  private transient BoundButton button;
+  /** The Button in the JDesktopIcon responsible for deiconifying it.
+   * This is package-private to avoid an accessor method. */
+  transient BoundButton button;
 
   /** The PropertyChangeListener listening to the JDesktopIcon. */
   private transient PropertyChangeListener propertyHandler;
Index: libjava/javax/swing/plaf/basic/BasicDirectoryModel.java
===================================================================
RCS file: libjava/javax/swing/plaf/basic/BasicDirectoryModel.java
diff -N libjava/javax/swing/plaf/basic/BasicDirectoryModel.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/basic/BasicDirectoryModel.java	9 Jul 2005 22:10:11 -0000
@@ -0,0 +1,313 @@
+/* BasicDirectoryModel.java --
+   Copyright (C) 2005  Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package javax.swing.plaf.basic;
+
+import java.beans.PropertyChangeEvent;
+import java.beans.PropertyChangeListener;
+import java.io.File;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.Enumeration;
+import java.util.Vector;
+import javax.swing.AbstractListModel;
+import javax.swing.JFileChooser;
+import javax.swing.event.ListDataEvent;
+import javax.swing.filechooser.FileSystemView;
+
+
+/**
+ * DOCUMENT ME!
+ */
+public class BasicDirectoryModel extends AbstractListModel
+  implements PropertyChangeListener
+{
+  /** DOCUMENT ME! */
+  private Vector contents;
+
+  /** DOCUMENT ME! */
+  private int directories;
+
+  /** DOCUMENT ME! */
+  private int listingMode;
+
+  /** DOCUMENT ME! */
+  private JFileChooser filechooser;
+
+  /** DOCUMENT ME! */
+  private Comparator comparator = new Comparator()
+    {
+      public int compare(Object o1, Object o2)
+      {
+	if (lt((File) o1, (File) o2))
+	  return -1;
+	else
+	  return 1;
+      }
+    };
+
+  /**
+   * Creates a new BasicDirectoryModel object.
+   *
+   * @param filechooser DOCUMENT ME!
+   */
+  public BasicDirectoryModel(JFileChooser filechooser)
+  {
+    this.filechooser = filechooser;
+    filechooser.addPropertyChangeListener(this);
+    listingMode = filechooser.getFileSelectionMode();
+    contents = new Vector();
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param o DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean contains(Object o)
+  {
+    return contents.contains(o);
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  public void fireContentsChanged()
+  {
+    fireContentsChanged(this, 0, getSize() - 1);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public Vector getDirectories()
+  {
+    Vector tmp = new Vector();
+    for (int i = 0; i < directories; i++)
+      tmp.add(contents.get(i));
+    return tmp;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param index DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public Object getElementAt(int index)
+  {
+    if (index > getSize() - 1)
+      return null;
+    if (listingMode == JFileChooser.FILES_ONLY)
+      return contents.get(directories + index);
+    else
+      return contents.elementAt(index);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public Vector getFiles()
+  {
+    Vector tmp = new Vector();
+    for (int i = directories; i < getSize(); i++)
+      tmp.add(contents.get(i));
+    return tmp;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public int getSize()
+  {
+    if (listingMode == JFileChooser.DIRECTORIES_ONLY)
+      return directories;
+    else if (listingMode == JFileChooser.FILES_ONLY)
+      return contents.size() - directories;
+    return contents.size();
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param o DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public int indexOf(Object o)
+  {
+    if (listingMode == JFileChooser.FILES_ONLY)
+      return contents.indexOf(o) - directories;
+    return contents.indexOf(o);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param e DOCUMENT ME!
+   */
+  public void intervalAdded(ListDataEvent e)
+  {
+    // obsoleted
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param e DOCUMENT ME!
+   */
+  public void intervalRemoved(ListDataEvent e)
+  {
+    // obsoleted
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  public void invalidateFileCache()
+  {
+    // obsoleted
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param a DOCUMENT ME!
+   * @param b DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  protected boolean lt(File a, File b)
+  {
+    boolean aTrav = filechooser.isTraversable(a);
+    boolean bTrav = filechooser.isTraversable(b);
+
+    if (aTrav == bTrav)
+      {
+	String aname = a.getName().toLowerCase();
+	String bname = b.getName().toLowerCase();
+	return ((aname.compareTo(bname) < 0) ? true : false);
+      }
+    else
+      {
+	if (aTrav)
+	  return true;
+	else
+	  return false;
+      }
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param e DOCUMENT ME!
+   */
+  public void propertyChange(PropertyChangeEvent e)
+  {
+    if (e.getPropertyName().equals(JFileChooser.FILE_SELECTION_MODE_CHANGED_PROPERTY))
+      listingMode = filechooser.getFileSelectionMode();
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param oldFile DOCUMENT ME!
+   * @param newFile DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public boolean renameFile(File oldFile, File newFile)
+  {
+    // FIXME: implement
+    return false;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param v DOCUMENT ME!
+   */
+  protected void sort(Vector v)
+  {
+    Collections.sort(v, comparator);
+    Enumeration e = Collections.enumeration(v);
+    Vector tmp = new Vector();
+    for (; e.hasMoreElements();)
+      tmp.add(e.nextElement());
+
+    contents = tmp;
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  public void validateFileCache()
+  {
+    contents.clear();
+    directories = 0;
+    FileSystemView fsv = filechooser.getFileSystemView();
+    File[] list = fsv.getFiles(filechooser.getCurrentDirectory(),
+                               filechooser.isFileHidingEnabled());
+
+    if (list == null)
+      return;
+
+    for (int i = 0; i < list.length; i++)
+      {
+	if (list[i] == null)
+	  continue;
+	if (filechooser.accept(list[i]))
+	  {
+	    contents.add(list[i]);
+	    if (filechooser.isTraversable(list[i]))
+	      directories++;
+	  }
+      }
+    sort(contents);
+    filechooser.revalidate();
+    filechooser.repaint();
+  }
+}
Index: libjava/javax/swing/plaf/basic/BasicFileChooserUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/basic/BasicFileChooserUI.java
diff -N libjava/javax/swing/plaf/basic/BasicFileChooserUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/basic/BasicFileChooserUI.java	9 Jul 2005 22:10:12 -0000
@@ -0,0 +1,1928 @@
+/* BasicFileChooserUI.java --
+   Copyright (C) 2005  Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package javax.swing.plaf.basic;
+
+import java.awt.BorderLayout;
+import java.awt.Color;
+import java.awt.Component;
+import java.awt.Dimension;
+import java.awt.Graphics;
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+import java.awt.Point;
+import java.awt.Polygon;
+import java.awt.Window;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.ItemEvent;
+import java.awt.event.ItemListener;
+import java.awt.event.MouseAdapter;
+import java.awt.event.MouseEvent;
+import java.awt.event.MouseListener;
+import java.beans.PropertyChangeEvent;
+import java.beans.PropertyChangeListener;
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Hashtable;
+import javax.swing.AbstractAction;
+import javax.swing.Action;
+import javax.swing.BoxLayout;
+import javax.swing.ButtonGroup;
+import javax.swing.Icon;
+import javax.swing.JButton;
+import javax.swing.JComboBox;
+import javax.swing.JComponent;
+import javax.swing.JDialog;
+import javax.swing.JFileChooser;
+import javax.swing.JLabel;
+import javax.swing.JList;
+import javax.swing.JPanel;
+import javax.swing.JScrollPane;
+import javax.swing.JTextField;
+import javax.swing.JToggleButton;
+import javax.swing.ListCellRenderer;
+import javax.swing.SwingConstants;
+import javax.swing.SwingUtilities;
+import javax.swing.Timer;
+import javax.swing.UIDefaults;
+import javax.swing.UIManager;
+import javax.swing.event.ListSelectionEvent;
+import javax.swing.event.ListSelectionListener;
+import javax.swing.filechooser.FileFilter;
+import javax.swing.filechooser.FileSystemView;
+import javax.swing.filechooser.FileView;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.FileChooserUI;
+
+
+/**
+ * DOCUMENT ME!
+ */
+public class BasicFileChooserUI extends FileChooserUI
+{
+  /**
+   * DOCUMENT ME!
+   */
+  protected class AcceptAllFileFilter extends FileFilter
+  {
+    public AcceptAllFileFilter()
+    {
+    }
+    
+    /**
+     * DOCUMENT ME!
+     *
+     * @param f DOCUMENT ME!
+     *
+     * @return DOCUMENT ME!
+     */
+    public boolean accept(File f)
+    {
+      return true;
+    }
+
+    /**
+     * DOCUMENT ME!
+     *
+     * @return DOCUMENT ME!
+     */
+    public String getDescription()
+    {
+      return acceptAllFileFilterText;
+    }
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  protected class ApproveSelectionAction extends AbstractAction
+  {
+    /**
+     * Creates a new ApproveSelectionAction object.
+     */
+    protected ApproveSelectionAction()
+    {
+    }
+
+    /**
+     * DOCUMENT ME!
+     *
+     * @param e DOCUMENT ME!
+     */
+    public void actionPerformed(ActionEvent e)
+    {
+      Object obj = filelist.getSelectedValue();
+      if (obj != null)
+        {
+	  File f = filechooser.getFileSystemView().createFileObject(obj
+	                                                            .toString());
+	  if (filechooser.isTraversable(f))
+	    filechooser.setCurrentDirectory(f);
+	  else
+	    {
+	      filechooser.setSelectedFile(f);
+	      filechooser.approveSelection();
+	      closeDialog();
+	    }
+        }
+    }
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  protected class BasicFileView extends FileView
+  {
+    /** DOCUMENT ME! */
+    protected Hashtable iconCache = new Hashtable();
+
+    public BasicFileView()
+    {
+    }
+
+    /**
+     * DOCUMENT ME!
+     *
+     * @param f DOCUMENT ME!
+     * @param i DOCUMENT ME!
+     */
+    public void cacheIcon(File f, Icon i)
+    {
+      iconCache.put(f, i);
+    }
+
+    /**
+     * DOCUMENT ME!
+     */
+    public void clearIconCache()
+    {
+      iconCache.clear();
+    }
+
+    /**
+     * DOCUMENT ME!
+     *
+     * @param f DOCUMENT ME!
+     *
+     * @return DOCUMENT ME!
+     */
+    public Icon getCachedIcon(File f)
+    {
+      return (Icon) iconCache.get(f);
+    }
+
+    /**
+     * DOCUMENT ME!
+     *
+     * @param f DOCUMENT ME!
+     *
+     * @return DOCUMENT ME!
+     */
+    public String getDescription(File f)
+    {
+      return getName(f);
+    }
+
+    /**
+     * DOCUMENT ME!
+     *
+     * @param f DOCUMENT ME!
+     *
+     * @return DOCUMENT ME!
+     */
+    public Icon getIcon(File f)
+    {
+      Icon val = getCachedIcon(f);
+      if (val != null)
+	return val;
+      if (filechooser.isTraversable(f))
+	val = directoryIcon;
+      else
+	val = fileIcon;
+      cacheIcon(f, val);
+      return val;
+    }
+
+    /**
+     * DOCUMENT ME!
+     *
+     * @param f DOCUMENT ME!
+     *
+     * @return DOCUMENT ME!
+     */
+    public String getName(File f)
+    {
+      return f.getName();
+    }
+
+    /**
+     * DOCUMENT ME!
+     *
+     * @param f DOCUMENT ME!
+     *
+     * @return DOCUMENT ME!
+     */
+    public String getTypeDescription(File f)
+    {
+      if (filechooser.isTraversable(f))
+	return dirDescText;
+      else
+	return fileDescText;
+    }
+
+    /**
+     * DOCUMENT ME!
+     *
+     * @param f DOCUMENT ME!
+     *
+     * @return DOCUMENT ME!
+     */
+    public Boolean isHidden(File f)
+    {
+      return new Boolean(filechooser.getFileSystemView().isHiddenFile(f));
+    }
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  protected class CancelSelectionAction extends AbstractAction
+  {
+    /**
+     * Creates a new CancelSelectionAction object.
+     */
+    protected CancelSelectionAction()
+    {
+    }
+
+    /**
+     * DOCUMENT ME!
+     *
+     * @param e DOCUMENT ME!
+     */
+    public void actionPerformed(ActionEvent e)
+    {
+      filechooser.cancelSelection();
+      closeDialog();
+    }
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  protected class ChangeToParentDirectoryAction extends AbstractAction
+  {
+    /**
+     * Creates a new ChangeToParentDirectoryAction object.
+     */
+    protected ChangeToParentDirectoryAction()
+    {
+    }
+
+    /**
+     * DOCUMENT ME!
+     *
+     * @param e DOCUMENT ME!
+     */
+    public void actionPerformed(ActionEvent e)
+    {
+      filechooser.changeToParentDirectory();
+      filechooser.revalidate();
+      filechooser.repaint();
+    }
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  protected class DoubleClickListener extends MouseAdapter
+  {
+    /** DOCUMENT ME! */
+    private Timer timer = null;
+
+    /** DOCUMENT ME! */
+    private Object lastSelected = null;
+
+    /** DOCUMENT ME! */
+    private JList list = null;
+
+    /**
+     * Creates a new DoubleClickListener object.
+     *
+     * @param list DOCUMENT ME!
+     */
+    public DoubleClickListener(JList list)
+    {
+      this.list = list;
+      timer = new Timer(1000, null);
+      timer.setRepeats(false);
+      lastSelected = list.getSelectedValue();
+      setDirectorySelected(false);
+    }
+
+    /**
+     * DOCUMENT ME!
+     *
+     * @param e DOCUMENT ME!
+     */
+    public void mouseClicked(MouseEvent e)
+    {
+      if (list.getSelectedValue() == null)
+	return;
+      FileSystemView fsv = filechooser.getFileSystemView();
+      if (timer.isRunning()
+          && list.getSelectedValue().toString().equals(lastSelected.toString()))
+        {
+	  File f = fsv.createFileObject(lastSelected.toString());
+	  timer.stop();
+	  if (filechooser.isTraversable(f))
+	    {
+	      filechooser.setCurrentDirectory(f);
+	      filechooser.rescanCurrentDirectory();
+	    }
+	  else
+	    {
+	      filechooser.setSelectedFile(f);
+	      filechooser.approveSelection();
+	      closeDialog();
+	    }
+        }
+      else
+        {
+	  File f = fsv.createFileObject(list.getSelectedValue().toString());
+	  if (filechooser.isTraversable(f))
+	    {
+	      setDirectorySelected(true);
+	      setDirectory(f);
+	    }
+	  else
+	    {
+	      setDirectorySelected(false);
+	      setDirectory(null);
+	    }
+	  lastSelected = list.getSelectedValue().toString();
+	  timer.restart();
+        }
+    }
+
+    /**
+     * DOCUMENT ME!
+     *
+     * @param e DOCUMENT ME!
+     */
+    public void mouseEntered(MouseEvent e)
+    {
+      // FIXME: Implement
+    }
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  protected class GoHomeAction extends AbstractAction
+  {
+    /**
+     * Creates a new GoHomeAction object.
+     */
+    protected GoHomeAction()
+    {
+    }
+
+    /**
+     * DOCUMENT ME!
+     *
+     * @param e DOCUMENT ME!
+     */
+    public void actionPerformed(ActionEvent e)
+    {
+      filechooser.setCurrentDirectory(filechooser.getFileSystemView()
+                                                 .getHomeDirectory());
+      filechooser.revalidate();
+      filechooser.repaint();
+    }
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  protected class NewFolderAction extends AbstractAction
+  {
+    /**
+     * Creates a new NewFolderAction object.
+     */
+    protected NewFolderAction()
+    {
+    }
+
+    /**
+     * DOCUMENT ME!
+     *
+     * @param e DOCUMENT ME!
+     */
+    public void actionPerformed(ActionEvent e)
+    {
+      try
+        {
+	  filechooser.getFileSystemView().createNewFolder(filechooser
+	                                                  .getCurrentDirectory());
+        }
+      catch (IOException ioe)
+        {
+	  return;
+        }
+      filechooser.rescanCurrentDirectory();
+      filechooser.repaint();
+    }
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  protected class SelectionListener implements ListSelectionListener
+  {
+    /**
+     * Creates a new SelectionListener object.
+     */
+    protected SelectionListener()
+    {
+    }
+
+    /**
+     * DOCUMENT ME!
+     *
+     * @param e DOCUMENT ME!
+     */
+    public void valueChanged(ListSelectionEvent e)
+    {
+      Object f = filelist.getSelectedValue();
+      if (f == null)
+	return;
+      File file = filechooser.getFileSystemView().createFileObject(f.toString());
+      if (! filechooser.isTraversable(file))
+	filechooser.setSelectedFile(file);
+      else
+	filechooser.setSelectedFile(null);
+    }
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  protected class UpdateAction extends AbstractAction
+  {
+    /**
+     * Creates a new UpdateAction object.
+     */
+    protected UpdateAction()
+    {
+    }
+
+    /**
+     * DOCUMENT ME!
+     *
+     * @param e DOCUMENT ME!
+     */
+    public void actionPerformed(ActionEvent e)
+    {
+    }
+  }
+
+  /** DOCUMENT ME! */
+  protected int cancelButtonMnemonic;
+
+  /** DOCUMENT ME! */
+  protected String cancelButtonText;
+
+  /** DOCUMENT ME! */
+  protected String cancelButtonToolTipText;
+
+  /** DOCUMENT ME! */
+  protected Icon computerIcon = new Icon()
+    {
+      public int getIconHeight()
+      {
+	return ICON_SIZE;
+      }
+
+      public int getIconWidth()
+      {
+	return ICON_SIZE;
+      }
+
+      public void paintIcon(Component c, Graphics g, int x, int y)
+      {
+      }
+    };
+
+  /** DOCUMENT ME! */
+  protected Icon detailsViewIcon = new Icon()
+    {
+      public int getIconHeight()
+      {
+	return ICON_SIZE;
+      }
+
+      public int getIconWidth()
+      {
+	return ICON_SIZE;
+      }
+
+      public void paintIcon(Component c, Graphics g, int x, int y)
+      {
+	Color saved = g.getColor();
+	g.translate(x, y);
+
+	g.setColor(Color.GRAY);
+	g.drawRect(1, 1, 15, 20);
+	g.drawLine(17, 6, 23, 6);
+	g.drawLine(17, 12, 23, 12);
+	g.drawLine(17, 18, 23, 18);
+
+	g.setColor(saved);
+	g.translate(-x, -y);
+      }
+    };
+
+  /** DOCUMENT ME! */
+  protected Icon directoryIcon = new Icon()
+    {
+      public int getIconHeight()
+      {
+	return ICON_SIZE;
+      }
+
+      public int getIconWidth()
+      {
+	return ICON_SIZE;
+      }
+
+      public void paintIcon(Component c, Graphics g, int x, int y)
+      {
+	Color saved = g.getColor();
+	g.translate(x, y);
+
+	Point ap = new Point(3, 7);
+	Point bp = new Point(3, 21);
+	Point cp = new Point(21, 21);
+	Point dp = new Point(21, 12);
+	Point ep = new Point(16, 12);
+	Point fp = new Point(13, 7);
+
+	Polygon dir = new Polygon(new int[] { ap.x, bp.x, cp.x, dp.x, ep.x, fp.x },
+	                          new int[] { ap.y, bp.y, cp.y, dp.y, ep.y, fp.y },
+	                          6);
+
+	g.setColor(new Color(153, 204, 255));
+	g.fillPolygon(dir);
+	g.setColor(Color.BLACK);
+	g.drawPolygon(dir);
+
+	g.translate(-x, -y);
+	g.setColor(saved);
+      }
+    };
+
+  /** DOCUMENT ME! */
+  protected int directoryOpenButtonMnemonic;
+
+  /** DOCUMENT ME! */
+  protected String directoryOpenButtonText;
+
+  /** DOCUMENT ME! */
+  protected String directoryOpenButtonToolTipText;
+
+  /** DOCUMENT ME! */
+  protected Icon fileIcon = new Icon()
+    {
+      public int getIconHeight()
+      {
+	return ICON_SIZE;
+      }
+
+      public int getIconWidth()
+      {
+	return ICON_SIZE;
+      }
+
+      public void paintIcon(Component c, Graphics g, int x, int y)
+      {
+	Color saved = g.getColor();
+	g.translate(x, y);
+
+	Point a = new Point(5, 4);
+	Point b = new Point(5, 20);
+	Point d = new Point(19, 20);
+	Point e = new Point(19, 7);
+	Point f = new Point(16, 4);
+
+	Polygon p = new Polygon(new int[] { a.x, b.x, d.x, e.x, f.x, },
+	                        new int[] { a.y, b.y, d.y, e.y, f.y }, 5);
+
+	g.setColor(Color.WHITE);
+	g.fillPolygon(p);
+	g.setColor(Color.BLACK);
+	g.drawPolygon(p);
+
+	g.drawLine(16, 4, 14, 6);
+	g.drawLine(14, 6, 19, 7);
+
+	g.setColor(saved);
+	g.translate(-x, -y);
+      }
+    };
+
+  /** DOCUMENT ME! */
+  protected Icon floppyDriveIcon = new Icon()
+    {
+      public int getIconHeight()
+      {
+	return ICON_SIZE;
+      }
+
+      public int getIconWidth()
+      {
+	return ICON_SIZE;
+      }
+
+      public void paintIcon(Component c, Graphics g, int x, int y)
+      {
+      }
+    };
+
+  /** DOCUMENT ME! */
+  protected Icon hardDriveIcon = new Icon()
+    {
+      public int getIconHeight()
+      {
+	return ICON_SIZE;
+      }
+
+      public int getIconWidth()
+      {
+	return ICON_SIZE;
+      }
+
+      public void paintIcon(Component c, Graphics g, int x, int y)
+      {
+      }
+    };
+
+  /** DOCUMENT ME! */
+  protected int helpButtonMnemonic;
+
+  /** DOCUMENT ME! */
+  protected String helpButtonText;
+
+  /** DOCUMENT ME! */
+  protected String helpButtonToolTipText;
+
+  /** DOCUMENT ME! */
+  protected Icon homeFolderIcon = new Icon()
+    {
+      public int getIconHeight()
+      {
+	return ICON_SIZE;
+      }
+
+      public int getIconWidth()
+      {
+	return ICON_SIZE;
+      }
+
+      public void paintIcon(Component c, Graphics g, int x, int y)
+      {
+	Color saved = g.getColor();
+	g.translate(x, y);
+
+	Point a = new Point(12, 3);
+	Point b = new Point(4, 10);
+	Point d = new Point(20, 10);
+
+	Polygon p = new Polygon(new int[] { a.x, b.x, d.x },
+	                        new int[] { a.y, b.y, d.y }, 3);
+
+	g.setColor(new Color(104, 51, 0));
+	g.fillPolygon(p);
+	g.setColor(Color.BLACK);
+	g.drawPolygon(p);
+
+	g.setColor(Color.WHITE);
+	g.fillRect(8, 10, 8, 10);
+	g.setColor(Color.BLACK);
+	g.drawRect(8, 10, 8, 10);
+
+	g.setColor(saved);
+	g.translate(-x, -y);
+      }
+    };
+
+  /** DOCUMENT ME! */
+  protected Icon listViewIcon = new Icon()
+    {
+      public int getIconHeight()
+      {
+	return ICON_SIZE;
+      }
+
+      public int getIconWidth()
+      {
+	return ICON_SIZE;
+      }
+
+      // Not needed. Only simplifies things until we get real icons.
+      private void paintPartial(Graphics g, int x, int y)
+      {
+	Color saved = g.getColor();
+	g.translate(x, y);
+
+	g.setColor(Color.GRAY);
+	g.drawRect(1, 1, 7, 10);
+	g.drawLine(8, 6, 11, 6);
+
+	g.setColor(saved);
+	g.translate(-x, -y);
+      }
+
+      public void paintIcon(Component c, Graphics g, int x, int y)
+      {
+	Color saved = g.getColor();
+	g.translate(x, y);
+
+	paintPartial(g, 0, 0);
+	paintPartial(g, 12, 0);
+	paintPartial(g, 0, 12);
+	paintPartial(g, 12, 12);
+
+	g.setColor(saved);
+	g.translate(-x, -y);
+      }
+    };
+
+  /** DOCUMENT ME! */
+  protected Icon newFolderIcon = directoryIcon;
+
+  /** DOCUMENT ME! */
+  protected int openButtonMnemonic;
+
+  /** DOCUMENT ME! */
+  protected String openButtonText;
+
+  /** DOCUMENT ME! */
+  protected String openButtonToolTipText;
+
+  /** DOCUMENT ME! */
+  protected int saveButtonMnemonic;
+
+  /** DOCUMENT ME! */
+  protected String saveButtonText;
+
+  /** DOCUMENT ME! */
+  protected String saveButtonToolTipText;
+
+  /** DOCUMENT ME! */
+  protected int updateButtonMnemonic;
+
+  /** DOCUMENT ME! */
+  protected String updateButtonText;
+
+  /** DOCUMENT ME! */
+  protected String updateButtonToolTipText;
+
+  /** DOCUMENT ME! */
+  protected Icon upFolderIcon = new Icon()
+    {
+      public int getIconHeight()
+      {
+	return ICON_SIZE;
+      }
+
+      public int getIconWidth()
+      {
+	return ICON_SIZE;
+      }
+
+      public void paintIcon(Component comp, Graphics g, int x, int y)
+      {
+	Color saved = g.getColor();
+	g.translate(x, y);
+
+	Point a = new Point(3, 7);
+	Point b = new Point(3, 21);
+	Point c = new Point(21, 21);
+	Point d = new Point(21, 12);
+	Point e = new Point(16, 12);
+	Point f = new Point(13, 7);
+
+	Polygon dir = new Polygon(new int[] { a.x, b.x, c.x, d.x, e.x, f.x },
+	                          new int[] { a.y, b.y, c.y, d.y, e.y, f.y }, 6);
+
+	g.setColor(new Color(153, 204, 255));
+	g.fillPolygon(dir);
+	g.setColor(Color.BLACK);
+	g.drawPolygon(dir);
+
+	a = new Point(12, 15);
+	b = new Point(9, 18);
+	c = new Point(15, 18);
+
+	Polygon arrow = new Polygon(new int[] { a.x, b.x, c.x },
+	                            new int[] { a.y, b.y, c.y }, 3);
+
+	g.fillPolygon(arrow);
+
+	g.drawLine(12, 15, 12, 22);
+
+	g.translate(-x, -y);
+	g.setColor(saved);
+      }
+    };
+
+  // -- begin private --
+
+  /** DOCUMENT ME! */
+  private JFileChooser filechooser;
+
+  /** DOCUMENT ME! */
+  private JList filelist;
+
+  /** DOCUMENT ME! */
+  private JComboBox filters;
+
+  /** DOCUMENT ME! */
+  private BasicDirectoryModel model;
+
+  /** DOCUMENT ME! */
+  private FileFilter acceptAll = new AcceptAllFileFilter();
+
+  /** DOCUMENT ME! */
+  private FileView fv = new BasicFileView();
+
+  /** DOCUMENT ME! */
+  private static final int ICON_SIZE = 24;
+
+  /** DOCUMENT ME! */
+  private JComboBox parents;
+
+  /** DOCUMENT ME! */
+  private String filename;
+
+  /** DOCUMENT ME! */
+  private JButton accept;
+
+  /** DOCUMENT ME! */
+  private JButton cancel;
+
+  /** DOCUMENT ME! */
+  private JButton upFolderButton;
+
+  /** DOCUMENT ME! */
+  private JButton newFolderButton;
+
+  /** DOCUMENT ME! */
+  private JButton homeFolderButton;
+
+  /** DOCUMENT ME! */
+  private JPanel accessoryPanel;
+
+  /** DOCUMENT ME! */
+  private PropertyChangeListener propertyChangeListener;
+
+  /** DOCUMENT ME! */
+  private String acceptAllFileFilterText;
+
+  /** DOCUMENT ME! */
+  private String dirDescText;
+
+  /** DOCUMENT ME! */
+  private String fileDescText;
+
+  /** DOCUMENT ME! */
+  private boolean dirSelected = false;
+
+  /** DOCUMENT ME! */
+  private File currDir = null;
+
+  /** DOCUMENT ME! */
+  private JPanel bottomPanel;
+
+  /** DOCUMENT ME! */
+  private JPanel closePanel;
+
+  // -- end private --
+  private class ListLabelRenderer
+    extends JLabel
+    implements ListCellRenderer
+  {
+    /** DOCUMENT ME! */
+    final Color selected = new Color(153, 204, 255);
+
+    /**
+     * Creates a new ListLabelRenderer object.
+     */
+    public ListLabelRenderer()
+    {
+      super();
+      setOpaque(true);
+    }
+
+    /**
+     * DOCUMENT ME!
+     *
+     * @param list DOCUMENT ME!
+     * @param value DOCUMENT ME!
+     * @param index DOCUMENT ME!
+     * @param isSelected DOCUMENT ME!
+     * @param cellHasFocus DOCUMENT ME!
+     *
+     * @return DOCUMENT ME!
+     */
+    public Component getListCellRendererComponent(JList list, Object value,
+                                                  int index,
+                                                  boolean isSelected,
+                                                  boolean cellHasFocus)
+    {
+      setHorizontalAlignment(SwingConstants.LEFT);
+      File file = (File) value;
+      setText(filechooser.getName(file));
+      setIcon(filechooser.getIcon(file));
+      setBackground(isSelected ? selected : Color.WHITE);
+      setForeground(Color.BLACK);
+
+      return this;
+    }
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  public class CBLabelRenderer extends JLabel implements ListCellRenderer
+  {
+    /**
+     * Creates a new CBLabelRenderer object.
+     */
+    public CBLabelRenderer()
+    {
+      super();
+      setOpaque(true);
+    }
+
+    /**
+     * DOCUMENT ME!
+     *
+     * @param list DOCUMENT ME!
+     * @param value DOCUMENT ME!
+     * @param index DOCUMENT ME!
+     * @param isSelected DOCUMENT ME!
+     * @param cellHasFocus DOCUMENT ME!
+     *
+     * @return DOCUMENT ME!
+     */
+    public Component getListCellRendererComponent(JList list, Object value,
+                                                  int index,
+                                                  boolean isSelected,
+                                                  boolean cellHasFocus)
+    {
+      setHorizontalAlignment(SwingConstants.LEFT);
+      setIcon(directoryIcon);
+      setText(value.toString());
+      setForeground(Color.BLACK);
+      setBackground(Color.WHITE);
+
+      return this;
+    }
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  private void closeDialog()
+  {
+    Window owner = SwingUtilities.windowForComponent(filechooser);
+    if (owner instanceof JDialog)
+      ((JDialog) owner).dispose();
+  }
+
+  /**
+   * Creates a new BasicFileChooserUI object.
+   *
+   * @param b DOCUMENT ME!
+   */
+  public BasicFileChooserUI(JFileChooser b)
+  {
+    this.filechooser = b;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param c DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public static ComponentUI createUI(JComponent c)
+  {
+    return new BasicFileChooserUI((JFileChooser) c);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param c DOCUMENT ME!
+   */
+  public void installUI(JComponent c)
+  {
+    if (c instanceof JFileChooser)
+      {
+	JFileChooser fc = (JFileChooser) c;
+	fc.resetChoosableFileFilters();
+	createModel();
+	clearIconCache();
+	installDefaults(fc);
+	installComponents(fc);
+	installListeners(fc);
+      }
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param c DOCUMENT ME!
+   */
+  public void uninstallUI(JComponent c)
+  {
+    model = null;
+    uninstallListeners(filechooser);
+    uninstallComponents(filechooser);
+    uninstallDefaults(filechooser);
+    filechooser = null;
+  }
+
+  // FIXME: Indent the entries in the combobox
+  private void boxEntries()
+  {
+    ArrayList parentFiles = new ArrayList();
+    File parent = filechooser.getCurrentDirectory();
+    if (parent == null)
+      parent = filechooser.getFileSystemView().getDefaultDirectory();
+    while (parent != null)
+      {
+	String name = parent.getName();
+	if (name.equals(""))
+	  name = parent.getAbsolutePath();
+
+	parentFiles.add(parentFiles.size(), name);
+	parent = parent.getParentFile();
+      }
+
+    if (parentFiles.size() == 0)
+      return;
+
+    if (parents.getItemCount() > 0)
+      parents.removeAllItems();
+    for (int i = parentFiles.size() - 1; i >= 0; i--)
+      parents.addItem(parentFiles.get(i));
+    parents.setSelectedIndex(parentFiles.size() - 1);
+    parents.revalidate();
+    parents.repaint();
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  private ItemListener createBoxListener()
+  {
+    return new ItemListener()
+      {
+	public void itemStateChanged(ItemEvent e)
+	{
+	  if (parents.getItemCount() - 1 == parents.getSelectedIndex())
+	    return;
+	  StringBuffer dir = new StringBuffer();
+	  for (int i = 0; i <= parents.getSelectedIndex(); i++)
+	    {
+	      dir.append(parents.getItemAt(i));
+	      dir.append(File.separatorChar);
+	    }
+	  filechooser.setCurrentDirectory(filechooser.getFileSystemView()
+	                                             .createFileObject(dir
+	                                                               .toString()));
+	}
+      };
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  private ItemListener createFilterListener()
+  {
+    return new ItemListener()
+      {
+	public void itemStateChanged(ItemEvent e)
+	{
+	  int index = filters.getSelectedIndex();
+	  if (index == -1)
+	    return;
+	  filechooser.setFileFilter(filechooser.getChoosableFileFilters()[index]);
+	}
+      };
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  private void filterEntries()
+  {
+    FileFilter[] list = filechooser.getChoosableFileFilters();
+    if (filters.getItemCount() > 0)
+      filters.removeAllItems();
+
+    int index = -1;
+    String selected = filechooser.getFileFilter().getDescription();
+    for (int i = 0; i < list.length; i++)
+      {
+	if (selected.equals(list[i].getDescription()))
+	  index = i;
+	filters.addItem(list[i].getDescription());
+      }
+    filters.setSelectedIndex(index);
+    filters.revalidate();
+    filters.repaint();
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   */
+  public void installComponents(JFileChooser fc)
+  {
+    JLabel look = new JLabel("Look In:");
+
+    parents = new JComboBox();
+    parents.setRenderer(new CBLabelRenderer());
+    boxEntries();
+    look.setLabelFor(parents);
+    JPanel parentsPanel = new JPanel();
+    parentsPanel.add(look);
+    parentsPanel.add(parents);
+    JPanel buttonPanel = new JPanel();
+
+    upFolderButton = new JButton();
+    upFolderButton.setIcon(upFolderIcon);
+    buttonPanel.add(upFolderButton);
+
+    homeFolderButton = new JButton();
+    homeFolderButton = new JButton(homeFolderIcon);
+    buttonPanel.add(homeFolderButton);
+
+    newFolderButton = new JButton();
+    newFolderButton.setIcon(newFolderIcon);
+    buttonPanel.add(newFolderButton);
+
+    ButtonGroup toggles = new ButtonGroup();
+    JToggleButton listViewButton = new JToggleButton();
+    listViewButton.setIcon(listViewIcon);
+    toggles.add(listViewButton);
+    buttonPanel.add(listViewButton);
+
+    JToggleButton detailsViewButton = new JToggleButton();
+    detailsViewButton.setIcon(detailsViewIcon);
+    toggles.add(detailsViewButton);
+    buttonPanel.add(detailsViewButton);
+
+    JPanel topPanel = new JPanel();
+    topPanel.setLayout(new java.awt.FlowLayout());
+    topPanel.add(parentsPanel);
+    topPanel.add(buttonPanel);
+
+    accessoryPanel = new JPanel();
+    if (filechooser.getAccessory() != null)
+      accessoryPanel.add(filechooser.getAccessory(), BorderLayout.CENTER);
+
+    filelist = new JList(model);
+    filelist.setVisibleRowCount(6);
+    JScrollPane scrollp = new JScrollPane(filelist);
+    scrollp.setPreferredSize(new Dimension(400, 175));
+    filelist.setBackground(Color.WHITE);
+
+    filelist.setLayoutOrientation(JList.VERTICAL_WRAP);
+    filelist.setCellRenderer(new ListLabelRenderer());
+
+    GridBagConstraints c = new GridBagConstraints();
+    c.gridx = 0;
+    c.gridy = 0;
+    c.fill = GridBagConstraints.BOTH;
+    c.weightx = 1;
+    c.weighty = 1;
+
+    JPanel centrePanel = new JPanel();
+    centrePanel.setLayout(new GridBagLayout());
+    centrePanel.add(scrollp, c);
+
+    c.gridx = 1;
+    centrePanel.add(accessoryPanel, c);
+
+    JLabel fileNameLabel = new JLabel("File Name:");
+    JLabel fileTypesLabel = new JLabel("Files of Type:");
+
+    JTextField entry = new JTextField();
+    filters = new JComboBox();
+    filterEntries();
+
+    fileNameLabel.setLabelFor(entry);
+    fileNameLabel.setHorizontalTextPosition(SwingConstants.LEFT);
+    fileTypesLabel.setLabelFor(filters);
+    fileTypesLabel.setHorizontalTextPosition(SwingConstants.LEFT);
+
+    closePanel = new JPanel();
+    accept = getApproveButton(filechooser);
+    cancel = new JButton(cancelButtonText);
+    cancel.setMnemonic(cancelButtonMnemonic);
+    cancel.setToolTipText(cancelButtonToolTipText);
+    closePanel.add(accept);
+    closePanel.add(cancel);
+
+    c.anchor = GridBagConstraints.WEST;
+    c.weighty = 0;
+    c.weightx = 0;
+    c.gridx = 0;
+
+    bottomPanel = new JPanel();
+    bottomPanel.setLayout(new GridBagLayout());
+    bottomPanel.add(fileNameLabel, c);
+
+    c.gridy = 1;
+    bottomPanel.add(fileTypesLabel, c);
+    c.gridx = 1;
+    c.gridy = 0;
+    c.weightx = 1;
+    c.weighty = 1;
+    bottomPanel.add(entry, c);
+
+    c.gridy = 1;
+    bottomPanel.add(filters, c);
+
+    c.fill = GridBagConstraints.NONE;
+    c.gridy = 2;
+    c.anchor = GridBagConstraints.EAST;
+    bottomPanel.add(closePanel, c);
+
+    filechooser.setLayout(new BorderLayout());
+    filechooser.add(topPanel, BorderLayout.NORTH);
+    filechooser.add(centrePanel, BorderLayout.CENTER);
+    filechooser.add(bottomPanel, BorderLayout.SOUTH);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   */
+  public void uninstallComponents(JFileChooser fc)
+  {
+    parents = null;
+
+    accept = null;
+    cancel = null;
+    upFolderButton = null;
+    homeFolderButton = null;
+    newFolderButton = null;
+
+    filelist = null;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   */
+  protected void installListeners(JFileChooser fc)
+  {
+    propertyChangeListener = createPropertyChangeListener(filechooser);
+    filechooser.addPropertyChangeListener(propertyChangeListener);
+
+    //parents.addItemListener(createBoxListener());
+    accept.addActionListener(getApproveSelectionAction());
+    cancel.addActionListener(getCancelSelectionAction());
+    upFolderButton.addActionListener(getChangeToParentDirectoryAction());
+    homeFolderButton.addActionListener(getGoHomeAction());
+    newFolderButton.addActionListener(getNewFolderAction());
+    filters.addItemListener(createFilterListener());
+
+    filelist.addMouseListener(createDoubleClickListener(filechooser, filelist));
+    filelist.addListSelectionListener(createListSelectionListener(filechooser));
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   */
+  protected void uninstallListeners(JFileChooser fc)
+  {
+    filechooser.removePropertyChangeListener(propertyChangeListener);
+    propertyChangeListener = null;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   */
+  protected void installDefaults(JFileChooser fc)
+  {
+    installIcons(fc);
+    installStrings(fc);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   */
+  protected void uninstallDefaults(JFileChooser fc)
+  {
+    uninstallStrings(fc);
+    uninstallIcons(fc);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   */
+  protected void installIcons(JFileChooser fc)
+  {
+    // FIXME: Implement.
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   */
+  protected void uninstallIcons(JFileChooser fc)
+  {
+    // FIXME: Implement.
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   */
+  protected void installStrings(JFileChooser fc)
+  {
+    UIDefaults defaults = UIManager.getLookAndFeelDefaults();
+
+    acceptAllFileFilterText = defaults.getString("FileChooser.acceptAllFileFilterText");
+    cancelButtonMnemonic = defaults.getInt("FileChooser.cancelButtonMnemonic");
+    cancelButtonText = defaults.getString("FileChooser.cancelButtonText");
+    cancelButtonToolTipText = defaults.getString("FileChooser.cancelButtonToolTipText");
+
+    dirDescText = defaults.getString("FileChooser.directoryDescriptionText");
+    fileDescText = defaults.getString("FileChooser.fileDescriptionText");
+
+    helpButtonMnemonic = defaults.getInt("FileChooser.helpButtonMnemonic");
+    helpButtonText = defaults.getString("FileChooser.helpButtonText");
+    helpButtonToolTipText = defaults.getString("FileChooser.helpButtonToolTipText");
+
+    openButtonMnemonic = defaults.getInt("FileChooser.openButtonMnemonic");
+    openButtonText = defaults.getString("FileChooser.openButtonText");
+    openButtonToolTipText = defaults.getString("FileChooser.openButtonToolTipText");
+
+    saveButtonMnemonic = defaults.getInt("FileChooser.saveButtonMnemonic");
+    saveButtonText = defaults.getString("FileChooser.saveButtonText");
+    saveButtonToolTipText = defaults.getString("FileChooser.saveButtonToolTipText");
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   */
+  protected void uninstallStrings(JFileChooser fc)
+  {
+    acceptAllFileFilterText = null;
+    cancelButtonMnemonic = 0;
+    cancelButtonText = null;
+    cancelButtonToolTipText = null;
+
+    dirDescText = null;
+    fileDescText = null;
+
+    helpButtonMnemonic = 0;
+    helpButtonText = null;
+    helpButtonToolTipText = null;
+
+    openButtonMnemonic = 0;
+    openButtonText = null;
+    openButtonToolTipText = null;
+
+    saveButtonMnemonic = 0;
+    saveButtonText = null;
+    saveButtonToolTipText = null;
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  protected void createModel()
+  {
+    model = new BasicDirectoryModel(filechooser);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public BasicDirectoryModel getModel()
+  {
+    return model;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public PropertyChangeListener createPropertyChangeListener(JFileChooser fc)
+  {
+    return new PropertyChangeListener()
+      {
+	public void propertyChange(PropertyChangeEvent e)
+	{
+	  // FIXME: Multiple file selection waiting on JList multiple selection bug.
+	  if (e.getPropertyName().equals(JFileChooser.SELECTED_FILE_CHANGED_PROPERTY))
+	    {
+	      if (filechooser.getSelectedFile() == null)
+		setFileName(null);
+	      else
+		setFileName(filechooser.getSelectedFile().toString());
+	      int index = -1;
+	      File file = filechooser.getSelectedFile();
+	      for (index = 0; index < model.getSize(); index++)
+		if (((File) model.getElementAt(index)).equals(file))
+		  break;
+	      if (index == -1)
+		return;
+	      filelist.setSelectedIndex(index);
+	      filelist.ensureIndexIsVisible(index);
+	      filelist.revalidate();
+	      filelist.repaint();
+	    }
+	  else if (e.getPropertyName().equals(JFileChooser.DIRECTORY_CHANGED_PROPERTY))
+	    {
+	      //boxEntries();
+	      filelist.clearSelection();
+	      filelist.revalidate();
+	      filelist.repaint();
+	      setDirectorySelected(false);
+	      setDirectory(filechooser.getCurrentDirectory());
+	    }
+	  else if (e.getPropertyName().equals(JFileChooser.CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY)
+	           || e.getPropertyName().equals(JFileChooser.FILE_FILTER_CHANGED_PROPERTY))
+	    filterEntries();
+	  else if (e.getPropertyName().equals(JFileChooser.DIALOG_TYPE_CHANGED_PROPERTY)
+	           || e.getPropertyName().equals(JFileChooser.DIALOG_TITLE_CHANGED_PROPERTY))
+	    {
+	      Window owner = SwingUtilities.windowForComponent(filechooser);
+	      if (owner instanceof JDialog)
+		((JDialog) owner).setTitle(getDialogTitle(filechooser));
+	      accept.setText(getApproveButtonText(filechooser));
+	      accept.setToolTipText(getApproveButtonToolTipText(filechooser));
+	      accept.setMnemonic(getApproveButtonMnemonic(filechooser));
+	    }
+	  else if (e.getPropertyName().equals(JFileChooser.APPROVE_BUTTON_TEXT_CHANGED_PROPERTY))
+	    accept.setText(getApproveButtonText(filechooser));
+	  else if (e.getPropertyName().equals(JFileChooser.APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY))
+	    accept.setToolTipText(getApproveButtonToolTipText(filechooser));
+	  else if (e.getPropertyName().equals(JFileChooser.APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY))
+	    accept.setMnemonic(getApproveButtonMnemonic(filechooser));
+	  else if (e.getPropertyName().equals(JFileChooser.CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY))
+	    {
+	      if (filechooser.getControlButtonsAreShown())
+	        {
+		  GridBagConstraints c = new GridBagConstraints();
+		  c.gridy = 1;
+		  bottomPanel.add(filters, c);
+
+		  c.fill = GridBagConstraints.BOTH;
+		  c.gridy = 2;
+		  c.anchor = GridBagConstraints.EAST;
+		  bottomPanel.add(closePanel, c);
+		  bottomPanel.revalidate();
+		  bottomPanel.repaint();
+		  bottomPanel.doLayout();
+	        }
+	      else
+		bottomPanel.remove(closePanel);
+	    }
+	  else if (e.getPropertyName().equals(JFileChooser.ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY))
+	    {
+	      if (filechooser.isAcceptAllFileFilterUsed())
+		filechooser.addChoosableFileFilter(getAcceptAllFileFilter(filechooser));
+	      else
+		filechooser.removeChoosableFileFilter(getAcceptAllFileFilter(filechooser));
+	    }
+	  else if (e.getPropertyName().equals(JFileChooser.ACCESSORY_CHANGED_PROPERTY))
+	    {
+	      JComponent old = (JComponent) e.getOldValue();
+	      if (old != null)
+		getAccessoryPanel().remove(old);
+	      JComponent newval = (JComponent) e.getNewValue();
+	      if (newval != null)
+		getAccessoryPanel().add(newval);
+	    }
+	  if (e.getPropertyName().equals(JFileChooser.DIRECTORY_CHANGED_PROPERTY)
+	      || e.getPropertyName().equals(JFileChooser.FILE_FILTER_CHANGED_PROPERTY)
+	      || e.getPropertyName().equals(JFileChooser.FILE_HIDING_CHANGED_PROPERTY))
+	    rescanCurrentDirectory(filechooser);
+
+	  filechooser.revalidate();
+	  filechooser.repaint();
+	}
+      };
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public String getFileName()
+  {
+    return filename;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public String getDirectoryName()
+  {
+    // XXX: I don't see a case where the thing returns something non-null..
+    return null;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param filename DOCUMENT ME!
+   */
+  public void setFileName(String filename)
+  {
+    this.filename = filename;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param dirname DOCUMENT ME!
+   */
+  public void setDirectoryName(String dirname)
+  {
+    // FIXME: Implement
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   */
+  public void rescanCurrentDirectory(JFileChooser fc)
+  {
+    getModel().validateFileCache();
+    filelist.revalidate();
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   * @param f DOCUMENT ME!
+   */
+  public void ensureFileIsVisible(JFileChooser fc, File f)
+  {
+    // XXX: Not sure what this does.
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public JFileChooser getFileChooser()
+  {
+    return filechooser;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public JPanel getAccessoryPanel()
+  {
+    return accessoryPanel;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public JButton getApproveButton(JFileChooser fc)
+  {
+    accept = new JButton(getApproveButtonText(fc));
+    accept.setMnemonic(getApproveButtonMnemonic(fc));
+    accept.setToolTipText(getApproveButtonToolTipText(fc));
+    return accept;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public String getApproveButtonToolTipText(JFileChooser fc)
+  {
+    if (fc.getApproveButtonToolTipText() != null)
+      return fc.getApproveButtonToolTipText();
+    else if (fc.getDialogType() == JFileChooser.SAVE_DIALOG)
+      return saveButtonToolTipText;
+    else
+      return openButtonToolTipText;
+  }
+
+  /**
+   * DOCUMENT ME!
+   */
+  public void clearIconCache()
+  {
+    if (fv instanceof BasicFileView)
+      ((BasicFileView) fv).clearIconCache();
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public ListSelectionListener createListSelectionListener(JFileChooser fc)
+  {
+    return new SelectionListener();
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   * @param list DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  protected MouseListener createDoubleClickListener(JFileChooser fc, JList list)
+  {
+    return new DoubleClickListener(list);
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  protected boolean isDirectorySelected()
+  {
+    return dirSelected;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param selected DOCUMENT ME!
+   */
+  protected void setDirectorySelected(boolean selected)
+  {
+    dirSelected = selected;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  protected File getDirectory()
+  {
+    return currDir;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param f DOCUMENT ME!
+   */
+  protected void setDirectory(File f)
+  {
+    currDir = f;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public FileFilter getAcceptAllFileFilter(JFileChooser fc)
+  {
+    return acceptAll;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public FileView getFileView(JFileChooser fc)
+  {
+    if (fc.getFileView() != null)
+      return fc.getFileView();
+    return fv;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public String getDialogTitle(JFileChooser fc)
+  {
+    String ret = fc.getDialogTitle();
+    if (ret != null)
+      return ret;
+    switch (fc.getDialogType())
+      {
+      case JFileChooser.OPEN_DIALOG:
+	ret = openButtonText;
+	break;
+      case JFileChooser.SAVE_DIALOG:
+	ret = saveButtonText;
+	break;
+      default:
+	ret = fc.getApproveButtonText();
+	break;
+      }
+    if (ret == null)
+      ret = openButtonText;
+    return ret;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public int getApproveButtonMnemonic(JFileChooser fc)
+  {
+    if (fc.getApproveButtonMnemonic() != 0)
+      return fc.getApproveButtonMnemonic();
+    else if (fc.getDialogType() == JFileChooser.SAVE_DIALOG)
+      return saveButtonMnemonic;
+    else
+      return openButtonMnemonic;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @param fc DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public String getApproveButtonText(JFileChooser fc)
+  {
+    if (fc.getApproveButtonText() != null)
+      return fc.getApproveButtonText();
+    else if (fc.getDialogType() == JFileChooser.SAVE_DIALOG)
+      return saveButtonText;
+    else
+      return openButtonText;
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public Action getNewFolderAction()
+  {
+    return new NewFolderAction();
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public Action getGoHomeAction()
+  {
+    return new GoHomeAction();
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public Action getChangeToParentDirectoryAction()
+  {
+    return new ChangeToParentDirectoryAction();
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public Action getApproveSelectionAction()
+  {
+    return new ApproveSelectionAction();
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public Action getCancelSelectionAction()
+  {
+    return new CancelSelectionAction();
+  }
+
+  /**
+   * DOCUMENT ME!
+   *
+   * @return DOCUMENT ME!
+   */
+  public Action getUpdateAction()
+  {
+    return new UpdateAction();
+  }
+}
Index: libjava/javax/swing/plaf/basic/BasicGraphicsUtils.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicGraphicsUtils.java,v
retrieving revision 1.10
diff -u -r1.10 BasicGraphicsUtils.java
--- libjava/javax/swing/plaf/basic/BasicGraphicsUtils.java	30 Nov 2004 23:59:03 -0000	1.10
+++ libjava/javax/swing/plaf/basic/BasicGraphicsUtils.java	9 Jul 2005 22:10:12 -0000
@@ -1,5 +1,5 @@
 /* BasicGraphicsUtils.java
-   Copyright (C) 2003, 2004 Free Software Foundation, Inc.
+   Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -595,7 +595,6 @@
     Rectangle iconRect = new Rectangle();
     Rectangle textRect = new Rectangle();
     Insets insets = b.getInsets();
-    Insets margin = b.getMargin();
     
     viewRect = new Rectangle();
 
@@ -628,11 +627,11 @@
 
     contentRect = textRect.union(iconRect);
 
-    return new Dimension(insets.left + margin.left
+    return new Dimension(insets.left
 			 + contentRect.width 
-			 + insets.right + margin.right,
-                         insets.top + margin.top
+			 + insets.right,
+                         insets.top
 			 + contentRect.height 
-			 + insets.bottom + margin.bottom);
+			 + insets.bottom);
   }
 }
Index: libjava/javax/swing/plaf/basic/BasicInternalFrameTitlePane.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicInternalFrameTitlePane.java,v
retrieving revision 1.4
diff -u -r1.4 BasicInternalFrameTitlePane.java
--- libjava/javax/swing/plaf/basic/BasicInternalFrameTitlePane.java	16 Feb 2005 20:02:52 -0000	1.4
+++ libjava/javax/swing/plaf/basic/BasicInternalFrameTitlePane.java	9 Jul 2005 22:10:12 -0000
@@ -1,5 +1,5 @@
 /* BasicInternalFrameTitlePane.java --
-   Copyright (C) 2004 Free Software Foundation, Inc.
+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -77,6 +77,10 @@
 {
   /**
    * The Action responsible for closing the JInternalFrame.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class CloseAction extends AbstractAction
   {
@@ -102,6 +106,10 @@
 
   /**
    * This Action is responsible for iconifying the JInternalFrame.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class IconifyAction extends AbstractAction
   {
@@ -128,6 +136,10 @@
 
   /**
    * This Action is responsible for maximizing the JInternalFrame.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class MaximizeAction extends AbstractAction
   {
@@ -154,6 +166,10 @@
 
   /**
    * This Action is responsible for dragging the JInternalFrame.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class MoveAction extends AbstractAction
   {
@@ -171,6 +187,10 @@
   /**
    * This Action is responsible for restoring the JInternalFrame. Restoring
    * the JInternalFrame is the same as setting the maximum property to false.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class RestoreAction extends AbstractAction
   {
@@ -197,6 +217,10 @@
 
   /**
    * This action is responsible for sizing the JInternalFrame.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class SizeAction extends AbstractAction
   {
@@ -214,8 +238,12 @@
   /**
    * This class is responsible for handling property change events from the
    * JInternalFrame and adjusting the Title Pane as necessary.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
-  protected class PropertyChangeHandler implements PropertyChangeListener
+  public class PropertyChangeHandler implements PropertyChangeListener
   {
     /**
      * This method is called when a PropertyChangeEvent is received by the
@@ -236,6 +264,10 @@
   /**
    * This class acts as the MenuBar for the TitlePane. Clicking on the Frame
    * Icon in the top left corner will activate it.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class SystemMenuBar extends JMenuBar
   {
@@ -284,8 +316,12 @@
 
   /**
    * This class acts as the Layout Manager for the TitlePane.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
-  protected class TitlePaneLayout implements LayoutManager
+  public class TitlePaneLayout implements LayoutManager
   {
     /**
      * Creates a new <code>TitlePaneLayout</code> object.
@@ -644,8 +680,9 @@
   /**
    * The label used to display the title. This label is not added to the
    * TitlePane.
+   * This is package-private to avoid an accessor method.
    */
-  private transient JLabel title;
+  transient JLabel title;
 
   /**
    * Creates a new BasicInternalFrameTitlePane object that is used in the
@@ -790,9 +827,12 @@
    */
   protected void setButtonIcons()
   {
-    closeButton.setIcon(closeIcon);
-    iconButton.setIcon(iconIcon);
-    maxButton.setIcon(maxIcon);
+    if (closeButton != null)
+      closeButton.setIcon(closeIcon);
+    if (iconButton != null)
+      iconButton.setIcon(iconIcon);
+    if (maxButton != null)
+      maxButton.setIcon(maxIcon);
   }
 
   /**
Index: libjava/javax/swing/plaf/basic/BasicInternalFrameUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicInternalFrameUI.java,v
retrieving revision 1.6
diff -u -r1.6 BasicInternalFrameUI.java
--- libjava/javax/swing/plaf/basic/BasicInternalFrameUI.java	16 Feb 2005 20:02:52 -0000	1.6
+++ libjava/javax/swing/plaf/basic/BasicInternalFrameUI.java	9 Jul 2005 22:10:12 -0000
@@ -1,5 +1,5 @@
 /* BasicInternalFrameUI.java --
-   Copyright (C) 2004 Free Software Foundation, Inc.
+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -162,7 +162,7 @@
     implements SwingConstants
   {
     /** FIXME: Use for something. */
-    protected int RESIZE_NONE;
+    protected final int RESIZE_NONE = 0;
 
     /** The x offset from the top left corner of the JInternalFrame. */
     private transient int xOffset = 0;
Index: libjava/javax/swing/plaf/basic/BasicListUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicListUI.java,v
retrieving revision 1.10
diff -u -r1.10 BasicListUI.java
--- libjava/javax/swing/plaf/basic/BasicListUI.java	16 Feb 2005 20:02:53 -0000	1.10
+++ libjava/javax/swing/plaf/basic/BasicListUI.java	9 Jul 2005 22:10:12 -0000
@@ -1,5 +1,5 @@
 /* BasicListUI.java --
-   Copyright (C) 2002, 2004 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -44,14 +44,19 @@
 import java.awt.Graphics;
 import java.awt.Point;
 import java.awt.Rectangle;
+import java.awt.event.ComponentAdapter;
+import java.awt.event.ComponentEvent;
+import java.awt.event.ComponentListener;
 import java.awt.event.FocusEvent;
 import java.awt.event.FocusListener;
 import java.awt.event.MouseEvent;
 import java.beans.PropertyChangeEvent;
 import java.beans.PropertyChangeListener;
 
+import javax.swing.CellRendererPane;
 import javax.swing.JComponent;
 import javax.swing.JList;
+import javax.swing.JViewport;
 import javax.swing.ListCellRenderer;
 import javax.swing.ListModel;
 import javax.swing.ListSelectionModel;
@@ -71,11 +76,27 @@
  */
 public class BasicListUI extends ListUI
 {
+
+  /**
+   * A helper class which listens for {@link ComponentEvent}s from
+   * the JList.
+   */
+  private class ComponentHandler extends ComponentAdapter {
+
+    /**
+     * Called when the component is hidden. Invalidates the internal
+     * layout.
+     */
+    public void componentResized(ComponentEvent ev) {
+      BasicListUI.this.damageLayout();
+    }
+  }
+
   /**
    * A helper class which listens for {@link FocusEvents}
    * from the JList.
    */
-  class FocusHandler implements FocusListener
+  public class FocusHandler implements FocusListener
   {
     /**
      * Called when the JList acquires focus.
@@ -112,7 +133,7 @@
    *
    * @see javax.swing.JList#model
    */
-  class ListDataHandler implements ListDataListener
+  public class ListDataHandler implements ListDataListener
   {
     /**
      * Called when a general change has happened in the model which cannot
@@ -150,7 +171,7 @@
    * A helper class which listens for {@link ListSelectionEvent}s
    * from the {@link JList}'s {@link ListSelectionModel}.
    */
-  class ListSelectionHandler implements ListSelectionListener
+  public class ListSelectionHandler implements ListSelectionListener
   {
     /**
      * Called when the list selection changes.  
@@ -166,7 +187,7 @@
    * A helper class which listens for {@link MouseEvent}s 
    * from the {@link JList}.
    */
-  class MouseInputHandler implements MouseInputListener
+  public class MouseInputHandler implements MouseInputListener
   {
     /**
      * Called when a mouse button press/release cycle completes
@@ -186,11 +207,12 @@
      */
     public void mousePressed(MouseEvent event)
     {
-      int row = BasicListUI.this.convertYToRow(event.getY());
-      if (row == -1)
+      Point click = event.getPoint();
+      int index = BasicListUI.this.locationToIndex(list, click);
+      if (index == -1)
         return;
 
-      BasicListUI.this.list.setSelectedIndex(row);
+      BasicListUI.this.list.setSelectedIndex(index);
     }
 
     /**
@@ -248,7 +270,7 @@
    * Helper class which listens to {@link PropertyChangeEvent}s
    * from the {@link JList}.
    */
-  class PropertyChangeHandler implements PropertyChangeListener
+  public class PropertyChangeHandler implements PropertyChangeListener
   {
     /**
      * Called when the {@link JList} changes one of its bound properties.
@@ -282,41 +304,51 @@
   }
 
   /** The current focus listener. */
-  FocusHandler focusListener;
+  protected FocusListener focusListener;
 
   /** The data listener listening to the model. */
-  ListDataHandler listDataListener;
+  protected ListDataListener listDataListener;
 
   /** The selection listener listening to the selection model. */
-  ListSelectionHandler listSelectionListener;
+  protected ListSelectionListener listSelectionListener;
 
   /** The mouse listener listening to the list. */
-  MouseInputHandler mouseInputListener;
+  protected MouseInputListener mouseInputListener;
 
   /** The property change listener listening to the list. */
-  PropertyChangeHandler propertyChangeListener;
+  protected PropertyChangeListener propertyChangeListener;
+
+
+  /** The component listener that receives notification for resizing the
+   * JList component.*/
+  private ComponentListener componentListener;
 
   /** Saved reference to the list this UI was created for. */
-  JList list;
+  protected JList list;
 
   /** The height of a single cell in the list. */
-  int cellHeight;
+  protected int cellHeight;
 
   /** The width of a single cell in the list. */
-  int cellWidth;
+  protected int cellWidth;
 
   /** 
    * An array of varying heights of cells in the list, in cases where each
    * cell might have a different height.
    */
-  int[] cellHeights;
+  protected int[] cellHeights;
 
   /**
    * A simple counter. When nonzero, indicates that the UI class is out of
    * date with respect to the underlying list, and must recalculate the
    * list layout before painting or performing size calculations.
    */
-  int updateLayoutStateNeeded;
+  protected int updateLayoutStateNeeded;
+
+  /**
+   * The {@link CellRendererPane} that is used for painting.
+   */
+  protected CellRendererPane rendererPane;
 
   /**
    * Calculate the height of a particular row. If there is a fixed {@link
@@ -328,7 +360,7 @@
    *
    * @return The height, in pixels, of the specified row
    */
-  int getRowHeight(int row)
+  protected int getRowHeight(int row)
   {
     if (row < 0 || row >= cellHeights.length)
       return -1;
@@ -356,14 +388,21 @@
     if (l != list || cellWidth == -1)
       return null;
 
-    int lo = Math.min(index1, index2);
-    int hi = Math.max(index1, index2);
-    Rectangle lobounds = new Rectangle(0, convertRowToY(lo), cellWidth,
-                                       getRowHeight(lo));
-    Rectangle hibounds = new Rectangle(0, convertRowToY(hi), cellWidth,
-                                       getRowHeight(hi));
+    int minIndex = Math.min(index1, index2);
+    int maxIndex = Math.max(index1, index2);
+    Point loc = indexToLocation(list, minIndex);
+    Rectangle bounds = new Rectangle(loc.x, loc.y, cellWidth,
+                                     getRowHeight(minIndex));
+
+    for (int i = minIndex + 1; i <= maxIndex; i++)
+      {
+        Point hiLoc = indexToLocation(list, i);
+        Rectangle hibounds = new Rectangle(hiLoc.x, hiLoc.y, cellWidth,
+                                       getRowHeight(i));
+        bounds = bounds.union(hibounds);
+      }
 
-    return lobounds.union(hibounds);
+    return bounds;
   }
 
   /**
@@ -376,7 +415,7 @@
    * @return The Y coordinate of the specified row, or <code>-1</code> if
    * the specified row number is invalid
    */
-  int convertRowToY(int row)
+  protected int convertRowToY(int row)
   {
     int y = 0;
     for (int i = 0; i < row; ++i)
@@ -399,7 +438,7 @@
    * @return The row number containing the specified Y value, or <code>-1</code>
    * if the specified Y coordinate is invalid
    */
-  int convertYToRow(int y0)
+  protected int convertYToRow(int y0)
   {
     for (int row = 0; row < cellHeights.length; ++row)
       {
@@ -417,7 +456,7 @@
    * #cellWidth} properties by examining the variouis properties of the
    * {@link JList}.
    */
-  void updateLayoutState()
+  protected void updateLayoutState()
   {
     int nrows = list.getModel().getSize();
     cellHeight = -1;
@@ -436,7 +475,11 @@
                                                                     false);
             Dimension dim = flyweight.getPreferredSize();
             cellHeights[i] = dim.height;
+            // compute average cell height (little hack here)
+            cellHeight = (cellHeight * i + cellHeights[i]) / (i + 1);
             cellWidth = Math.max(cellWidth, dim.width);
+            if (list.getLayoutOrientation() == JList.VERTICAL)
+                cellWidth = Math.max(cellWidth, list.getSize().width);
           }
       }
     else
@@ -449,20 +492,22 @@
   /**
    * Marks the current layout as damaged and requests revalidation from the
    * JList.
+   * This is package-private to avoid an accessor method.
    *
    * @see #updateLayoutStateNeeded
    */
   void damageLayout()
   {
     updateLayoutStateNeeded = 1;
-    list.revalidate();
+    if (list != null)
+      list.revalidate();
   }
 
   /**
    * Calls {@link #updateLayoutState} if {@link #updateLayoutStateNeeded}
    * is nonzero, then resets {@link #updateLayoutStateNeeded} to zero.
    */
-  void maybeUpdateLayoutState()
+  protected void maybeUpdateLayoutState()
   {
     if (updateLayoutStateNeeded != 0)
       {
@@ -481,7 +526,9 @@
     listSelectionListener = new ListSelectionHandler();
     mouseInputListener = new MouseInputHandler();
     propertyChangeListener = new PropertyChangeHandler();
+    componentListener = new ComponentHandler();
     updateLayoutStateNeeded = 1;
+    rendererPane = new CellRendererPane();
   }
 
   /**
@@ -490,7 +537,7 @@
    *
    * @see #uninstallDefaults
    */
-  void installDefaults()
+  protected void installDefaults()
   {
     UIDefaults defaults = UIManager.getLookAndFeelDefaults();
     list.setForeground(defaults.getColor("List.foreground"));
@@ -504,7 +551,7 @@
    * Resets to <code>null</code> those defaults which were installed in 
    * {@link #installDefaults}
    */
-  void uninstallDefaults()
+  protected void uninstallDefaults()
   {
     UIDefaults defaults = UIManager.getLookAndFeelDefaults();
     list.setForeground(null);
@@ -519,7 +566,7 @@
    *
    * @see #uninstallListeners
    */
-  void installListeners()
+  protected void installListeners()
   {
     list.addFocusListener(focusListener);
     list.getModel().addListDataListener(listDataListener);
@@ -527,12 +574,13 @@
     list.addMouseListener(mouseInputListener);
     list.addMouseMotionListener(mouseInputListener);
     list.addPropertyChangeListener(propertyChangeListener);
+    list.addComponentListener(componentListener);
   }
 
   /**
    * Detaches all the listeners we attached in {@link #installListeners}.
    */
-  void uninstallListeners()
+  protected void uninstallListeners()
   {
     list.removeFocusListener(focusListener);
     list.getModel().removeListDataListener(listDataListener);
@@ -545,14 +593,14 @@
   /**
    * Installs keyboard actions for this UI in the {@link JList}.
    */
-  void installKeyboardActions()
+  protected void installKeyboardActions()
   {
   }
 
   /**
    * Uninstalls keyboard actions for this UI in the {@link JList}.
    */
-  void uninstallKeyboardActions()
+  protected void uninstallKeyboardActions()
   {
   }
 
@@ -591,18 +639,6 @@
   }
 
   /**
-   * Gets the maximum size this list can assume.
-   *
-   * @param c The component to measure the size of
-   *
-   * @return A new Dimension representing the component's maximum size
-   */
-  public Dimension getMaximumSize(JComponent c)
-  {
-    return new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE);
-  }
-
-  /**
    * Gets the size this list would prefer to assume. This is calculated by
    * calling {@link #getCellBounds} over the entire list.
    *
@@ -612,10 +648,34 @@
    */
   public Dimension getPreferredSize(JComponent c)
   {
-    if (list.getModel().getSize() == 0)
+    int size = list.getModel().getSize();
+    if (size == 0)
       return new Dimension(0, 0);
+    int visibleRows = list.getVisibleRowCount();
+    int layoutOrientation = list.getLayoutOrientation();
     Rectangle bounds = getCellBounds(list, 0, list.getModel().getSize() - 1);
-    return bounds.getSize();
+    Dimension retVal = bounds.getSize();
+    Component parent = list.getParent();
+    if ((visibleRows == -1) && (parent instanceof JViewport))
+      {
+        JViewport viewport = (JViewport) parent;
+
+        if (layoutOrientation == JList.HORIZONTAL_WRAP)
+          {
+            int h = viewport.getSize().height;
+            int cellsPerCol = h / cellHeight;
+            int w = size / cellsPerCol * cellWidth;
+            retVal = new Dimension(w, h);
+          }
+        else if (layoutOrientation == JList.VERTICAL_WRAP)
+          {
+            int w = viewport.getSize().width;
+            int cellsPerRow = Math.max(w / cellWidth, 1);
+            int h = size / cellsPerRow * cellHeight;
+            retVal = new Dimension(w, h);
+          }
+      }
+    return retVal;
   }
 
   /**
@@ -625,7 +685,7 @@
    * @param g The graphics context to paint in
    * @param c The component to paint the background of
    */
-  public void paintBackground(Graphics g, JComponent c)
+  private void paintBackground(Graphics g, JComponent c)
   {
     Dimension size = getPreferredSize(c);
     Color save = g.getColor();
@@ -647,18 +707,18 @@
    * @param sel A selection model to provide to the cell renderer
    * @param lead The lead selection index of the list
    */
-  void paintCell(Graphics g, int row, Rectangle bounds, ListCellRenderer rend,
-                 ListModel data, ListSelectionModel sel, int lead)
+  protected void paintCell(Graphics g, int row, Rectangle bounds,
+                 ListCellRenderer rend, ListModel data,
+                 ListSelectionModel sel, int lead)
   {
     boolean is_sel = list.isSelectedIndex(row);
     boolean has_focus = false;
     Component comp = rend.getListCellRendererComponent(list,
                                                        data.getElementAt(row),
                                                        0, is_sel, has_focus);
-    g.translate(bounds.x, bounds.y);
-    comp.setBounds(new Rectangle(0, 0, bounds.width, bounds.height));
-    comp.paint(g);
-    g.translate(-bounds.x, -bounds.y);
+    //comp.setBounds(new Rectangle(0, 0, bounds.width, bounds.height));
+    //comp.paint(g);
+    rendererPane.paintComponent(g, comp, list, bounds);
   }
 
   /**
@@ -690,13 +750,123 @@
       }
   }
 
+  /**
+   * Computes the index of a list cell given a point within the list.
+   *
+   * @param list the list which on which the computation is based on
+   * @param location the coordinates
+   *
+   * @return the index of the list item that is located at the given
+   *         coordinates or <code>null</code> if the location is invalid
+   */
   public int locationToIndex(JList list, Point location)
   {
-    return convertYToRow(location.y);
+    int layoutOrientation = list.getLayoutOrientation();
+    int index = -1;
+    switch (layoutOrientation)
+      {
+      case JList.VERTICAL:
+        index = convertYToRow(location.y);
+        break;
+      case JList.HORIZONTAL_WRAP:
+        // determine visible rows and cells per row
+        int visibleRows = list.getVisibleRowCount();
+        int cellsPerRow = -1;
+        int numberOfItems = list.getModel().getSize();
+        Dimension listDim = list.getSize();
+        if (visibleRows <= 0)
+          {
+            try
+              {
+                cellsPerRow = listDim.width / cellWidth;
+              }
+            catch (ArithmeticException ex)
+              {
+                cellsPerRow = 1;
+              }
+          }
+        else
+          {
+            cellsPerRow = numberOfItems / visibleRows + 1;
+          }
+
+        // determine index for the given location
+        int cellsPerColumn = numberOfItems / cellsPerRow + 1;
+        int gridX = Math.min(location.x / cellWidth, cellsPerRow - 1);
+        int gridY = Math.min(location.y / cellHeight, cellsPerColumn);
+        index = gridX + gridY * cellsPerRow;
+        break;
+      case JList.VERTICAL_WRAP:
+        // determine visible rows and cells per column
+        int visibleRows2 = list.getVisibleRowCount();
+        if (visibleRows2 <= 0)
+          {
+            Dimension listDim2 = list.getSize();
+            visibleRows2 = listDim2.height / cellHeight;
+          }
+        int numberOfItems2 = list.getModel().getSize();
+        int cellsPerRow2 = numberOfItems2 / visibleRows2 + 1;
+
+        Dimension listDim2 = list.getSize();
+        int gridX2 = Math.min(location.x / cellWidth, cellsPerRow2 - 1);
+        int gridY2 = Math.min(location.y / cellHeight, visibleRows2);
+        index = gridY2 + gridX2 * visibleRows2;
+        break;
+      }
+    return index;
   }
 
   public Point indexToLocation(JList list, int index)
   {
-    return new Point(0, convertRowToY(index));
+    int layoutOrientation = list.getLayoutOrientation();
+    Point loc = null;
+    switch (layoutOrientation)
+      {
+      case JList.VERTICAL:
+        loc = new Point(0, convertRowToY(index));
+        break;
+      case JList.HORIZONTAL_WRAP:
+        // determine visible rows and cells per row
+        int visibleRows = list.getVisibleRowCount();
+        int numberOfCellsPerRow = -1;
+        if (visibleRows <= 0)
+          {
+            Dimension listDim = list.getSize();
+            numberOfCellsPerRow = Math.max(listDim.width / cellWidth, 1);
+          }
+        else
+          {
+            int numberOfItems = list.getModel().getSize();
+            numberOfCellsPerRow = numberOfItems / visibleRows + 1;
+          }
+        // compute coordinates inside the grid
+        int gridX = index % numberOfCellsPerRow;
+        int gridY = index / numberOfCellsPerRow;
+        int locX = gridX * cellWidth;
+        int locY = gridY * cellHeight;
+        loc = new Point(locX, locY);
+        break;
+      case JList.VERTICAL_WRAP:
+        // determine visible rows and cells per column
+        int visibleRows2 = list.getVisibleRowCount();
+        if (visibleRows2 <= 0)
+          {
+            Dimension listDim2 = list.getSize();
+            visibleRows2 = listDim2.height / cellHeight;
+          }
+        // compute coordinates inside the grid
+        if (visibleRows2 > 0)
+          {
+            int gridY2 = index % visibleRows2;
+            int gridX2 = index / visibleRows2;
+            int locX2 = gridX2 * cellWidth;
+            int locY2 = gridY2 * cellHeight;
+            loc = new Point(locX2, locY2);
+          }
+        else
+          loc = new Point(0, convertRowToY(index));
+        break;
+      }
+    return loc;
   }
 }
Index: libjava/javax/swing/plaf/basic/BasicLookAndFeel.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicLookAndFeel.java,v
retrieving revision 1.13
diff -u -r1.13 BasicLookAndFeel.java
--- libjava/javax/swing/plaf/basic/BasicLookAndFeel.java	22 Feb 2005 12:16:00 -0000	1.13
+++ libjava/javax/swing/plaf/basic/BasicLookAndFeel.java	9 Jul 2005 22:10:12 -0000
@@ -1,5 +1,5 @@
 /* BasicLookAndFeel.java --
-   Copyright (C) 2002, 2004 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -112,6 +112,7 @@
       "DesktopIconUI", "javax.swing.plaf.basic.BasicDesktopIconUI",
       "DesktopPaneUI", "javax.swing.plaf.basic.BasicDesktopPaneUI",
       "EditorPaneUI", "javax.swing.plaf.basic.BasicEditorPaneUI",
+      "FileChooserUI", "javax.swing.plaf.basic.BasicFileChooserUI",
       "FormattedTextFieldUI", "javax.swing.plaf.basic.BasicFormattedTextFieldUI",
       "InternalFrameUI", "javax.swing.plaf.basic.BasicInternalFrameUI",
       "LabelUI", "javax.swing.plaf.basic.BasicLabelUI",
@@ -159,34 +160,39 @@
    */
   protected void initSystemColorDefaults(UIDefaults defaults)
   {
+    Color highLight = new Color(249, 247, 246);
+    Color light = new Color(239, 235, 231);
+    Color shadow = new Color(139, 136, 134);
+    Color darkShadow = new Color(16, 16, 16);
+
     Object[] uiDefaults;
     uiDefaults = new Object[] {
       "activeCaption", new ColorUIResource(0, 0, 128),
       "activeCaptionBorder", new ColorUIResource(Color.lightGray),
       "activeCaptionText", new ColorUIResource(Color.white),
-      "control", new ColorUIResource(Color.lightGray),
-      "controlDkShadow", new ColorUIResource(Color.black),
-      "controlHighlight", new ColorUIResource(Color.lightGray),
-      "controlLtHighlight", new ColorUIResource(Color.white),
-      "controlShadow", new ColorUIResource(Color.gray),
-      "controlText", new ColorUIResource(Color.black),
+      "control", new ColorUIResource(light),
+      "controlDkShadow", new ColorUIResource(shadow),
+      "controlHighlight", new ColorUIResource(highLight),
+      "controlLtHighlight", new ColorUIResource(highLight),
+      "controlShadow", new ColorUIResource(shadow),
+      "controlText", new ColorUIResource(darkShadow),
       "desktop", new ColorUIResource(0, 92, 92),
       "inactiveCaption", new ColorUIResource(Color.gray),
       "inactiveCaptionBorder", new ColorUIResource(Color.lightGray),
       "inactiveCaptionText", new ColorUIResource(Color.lightGray),
-      "info", new ColorUIResource(Color.white),
-      "infoText", new ColorUIResource(Color.black),
-      "menu", new ColorUIResource(Color.lightGray),
-      "menuText", new ColorUIResource(Color.black),
-      "scrollbar", new ColorUIResource(224, 224, 224),
-      "text", new ColorUIResource(Color.lightGray),
-      "textHighlight", new ColorUIResource(0, 0, 128),
+      "info", new ColorUIResource(light),
+      "infoText", new ColorUIResource(darkShadow),
+      "menu", new ColorUIResource(light),
+      "menuText", new ColorUIResource(darkShadow),
+      "scrollbar", new ColorUIResource(light),
+      "text", new ColorUIResource(Color.white),
+      "textHighlight", new ColorUIResource(Color.black),
       "textHighlightText", new ColorUIResource(Color.white),
       "textInactiveText", new ColorUIResource(Color.gray),
       "textText", new ColorUIResource(Color.black),
-      "window", new ColorUIResource(Color.white),
+      "window", new ColorUIResource(light),
       "windowBorder", new ColorUIResource(Color.black),
-      "windowText", new ColorUIResource(Color.black)
+      "windowText", new ColorUIResource(darkShadow)
     };
     defaults.putDefaults(uiDefaults);
   }
@@ -232,68 +238,70 @@
   {
     Object[] uiDefaults;
     
-    // The default Look and Feel happens to use these three purple shades
-    // extensively.
-    Color lightPurple = new Color(0xCC, 0xCC, 0xFF);
-    Color midPurple = new Color(0x99, 0x99, 0xCC);
-    Color darkPurple = new Color(0x66, 0x66, 0x99);
-
+    Color highLight = new Color(249, 247, 246);
+    Color light = new Color(239, 235, 231);
+    Color shadow = new Color(139, 136, 134);
+    Color darkShadow = new Color(16, 16, 16);
+    
     uiDefaults = new Object[] {
 
       "AbstractUndoableEdit.undoText", "Undo",
       "AbstractUndoableEdit.redoText", "Redo",
-
-      "Button.background", new ColorUIResource(Color.lightGray),
-      "Button.border", BorderUIResource.getEtchedBorderUIResource(),
-      "Button.darkShadow", new ColorUIResource(Color.darkGray),
+      "Button.background", new ColorUIResource(light),
+      "Button.border",
+      new UIDefaults.LazyValue() 
+      {
+        public Object createValue(UIDefaults table)
+        {
+          return BasicBorders.getButtonBorder();
+        }
+      },
+      "Button.darkShadow", new ColorUIResource(shadow),
       "Button.focusInputMap", new UIDefaults.LazyInputMap(new Object[] {
         "SPACE",  "pressed",
         "released SPACE", "released"
       }),
-      "Button.focus", midPurple,
       "Button.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "Button.foreground", new ColorUIResource(Color.black),
-      "Button.highlight", new ColorUIResource(Color.white),
-      "Button.light", new ColorUIResource(Color.lightGray.brighter()),
+      "Button.foreground", new ColorUIResource(darkShadow),
+      "Button.highlight", new ColorUIResource(highLight),
+      "Button.light", new ColorUIResource(highLight),
       "Button.margin", new InsetsUIResource(2, 2, 2, 2),
-      "Button.shadow", new ColorUIResource(Color.gray),
+      "Button.shadow", new ColorUIResource(shadow),
       "Button.textIconGap", new Integer(4),
       "Button.textShiftOffset", new Integer(0),
-      "CheckBox.background", new ColorUIResource(Color.lightGray),
+      "CheckBox.background", new ColorUIResource(light),
       "CheckBox.border", new BorderUIResource.CompoundBorderUIResource(null,
                                                                        null),
-      "CheckBox.darkShadow", new ColorUIResource(Color.darkGray),
       "CheckBox.focusInputMap", new UIDefaults.LazyInputMap(new Object[] {
         "SPACE",  "pressed",
         "released SPACE", "released"
       }),
       "CheckBox.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "CheckBox.foreground", new ColorUIResource(Color.black),
-      "CheckBox.highlight", new ColorUIResource(Color.white),
+      "CheckBox.foreground", new ColorUIResource(darkShadow),
       "CheckBox.icon", BasicIconFactory.getCheckBoxIcon(),
-      "CheckBox.light", new ColorUIResource(Color.lightGray.brighter()),
       "CheckBox.margin",new InsetsUIResource(2, 2, 2, 2),
-      "CheckBox.shadow", new ColorUIResource(Color.gray),
       "CheckBox.textIconGap", new Integer(4),
       "CheckBox.textShiftOffset", new Integer(0),
       "CheckBoxMenuItem.acceleratorFont", new FontUIResource("Dialog",
                                                              Font.PLAIN, 12),
-      "CheckBoxMenuItem.acceleratorForeground", new ColorUIResource(Color.black),
-      "CheckBoxMenuItem.acceleratorSelectionForeground", new ColorUIResource(Color.white),
+      "CheckBoxMenuItem.acceleratorForeground",
+      new ColorUIResource(darkShadow),
+      "CheckBoxMenuItem.acceleratorSelectionForeground",
+      new ColorUIResource(Color.white),
       "CheckBoxMenuItem.arrowIcon", BasicIconFactory.getMenuItemArrowIcon(),
-      "CheckBoxMenuItem.background", new ColorUIResource(Color.lightGray),
+      "CheckBoxMenuItem.background", new ColorUIResource(light),
       "CheckBoxMenuItem.border", new BasicBorders.MarginBorder(),
       "CheckBoxMenuItem.borderPainted", Boolean.FALSE,
       "CheckBoxMenuItem.checkIcon", BasicIconFactory.getCheckBoxMenuItemIcon(),
       "CheckBoxMenuItem.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "CheckBoxMenuItem.foreground", new ColorUIResource(Color.black),
+      "CheckBoxMenuItem.foreground", new ColorUIResource(darkShadow),
       "CheckBoxMenuItem.margin", new InsetsUIResource(2, 2, 2, 2),
-      "CheckBoxMenuItem.selectionBackground", new ColorUIResource(lightPurple),
-      "CheckBoxMenuItem.selectionForeground", new ColorUIResource(Color.black),
-      "ColorChooser.background", new ColorUIResource(Color.lightGray),
+      "CheckBoxMenuItem.selectionBackground", new ColorUIResource(Color.black),
+      "CheckBoxMenuItem.selectionForeground", new ColorUIResource(Color.white),
+      "ColorChooser.background", new ColorUIResource(light),
       "ColorChooser.cancelText", "Cancel",
       "ColorChooser.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "ColorChooser.foreground", new ColorUIResource(Color.black),
+      "ColorChooser.foreground", new ColorUIResource(darkShadow),
       "ColorChooser.hsbBlueText", "B",
       "ColorChooser.hsbBrightnessText", "B",
       "ColorChooser.hsbGreenText", "G",
@@ -312,7 +320,7 @@
       "ColorChooser.rgbRedMnemonic", new Integer(82),
       "ColorChooser.rgbRedText", "Red",
       "ColorChooser.sampleText", "Sample Text  Sample Text",
-      "ColorChooser.swatchesDefaultRecentColor", new ColorUIResource(Color.lightGray),
+      "ColorChooser.swatchesDefaultRecentColor", new ColorUIResource(light),
       "ColorChooser.swatchesNameText", "Swatches",
       "ColorChooser.swatchesRecentSwatchSize", new Dimension(10, 10),
       "ColorChooser.swatchesRecentText", "Recent:",
@@ -324,13 +332,17 @@
         "HOME",  "homePassThrough",
         "END",  "endPassThrough"
       }),
-      "ComboBox.background", new ColorUIResource(Color.white),
-      "ComboBox.disabledBackground", new ColorUIResource(Color.lightGray),
+      "ComboBox.background", new ColorUIResource(light),
+      "ComboBox.buttonBackground", new ColorUIResource(light),
+      "ComboBox.buttonDarkShadow", new ColorUIResource(shadow),
+      "ComboBox.buttonHighlight", new ColorUIResource(highLight),
+      "ComboBox.buttonShadow", new ColorUIResource(shadow),
+      "ComboBox.disabledBackground", new ColorUIResource(light),
       "ComboBox.disabledForeground", new ColorUIResource(Color.gray),
       "ComboBox.font", new FontUIResource("SansSerif", Font.PLAIN, 12),
       "ComboBox.foreground", new ColorUIResource(Color.black),
-      "ComboBox.selectionBackground", new ColorUIResource(lightPurple),
-      "ComboBox.selectionForeground", new ColorUIResource(Color.black),
+      "ComboBox.selectionBackground", new ColorUIResource(Color.black),
+      "ComboBox.selectionForeground", new ColorUIResource(Color.white),
       "Desktop.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[] {
         "KP_LEFT", "left",
         "KP_RIGHT", "right",
@@ -352,13 +364,13 @@
         "ctrl F10", "maximize",
         "ctrl alt shift F6","selectPreviousFrame"
       }),
-      "Desktop.background", new ColorUIResource(175, 163, 236),
+      "Desktop.background", new ColorUIResource(0, 92, 92),
       "DesktopIcon.border", new BorderUIResource.CompoundBorderUIResource(null,
                                                                           null),
       "EditorPane.background", new ColorUIResource(Color.white),
       "EditorPane.border", new BasicBorders.MarginBorder(),
       "EditorPane.caretBlinkRate", new Integer(500),
-      "EditorPane.caretForeground", new ColorUIResource(Color.red),
+      "EditorPane.caretForeground", new ColorUIResource(Color.black),
       "EditorPane.font", new FontUIResource("Serif", Font.PLAIN, 12),
       "EditorPane.foreground", new ColorUIResource(Color.black),
       "EditorPane.inactiveForeground", new ColorUIResource(Color.gray),
@@ -377,7 +389,7 @@
                                                              0), "insert-tab")
           },
       "EditorPane.margin", new InsetsUIResource(3, 3, 3, 3),
-      "EditorPane.selectionBackground", new ColorUIResource(Color.lightGray),
+      "EditorPane.selectionBackground", new ColorUIResource(Color.black),
       "EditorPane.selectionForeground", new ColorUIResource(Color.white),
       "FileChooser.acceptAllFileFilterText", "All Files (*.*)",
       "FileChooser.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[] {
@@ -387,20 +399,20 @@
       "FileChooser.cancelButtonText", "Cancel",
       "FileChooser.cancelButtonToolTipText", "Abort file chooser dialog",
       // XXX Don't use gif
-      "FileChooser.detailsViewIcon", new IconUIResource(new ImageIcon("icons/DetailsView.gif")),
+//      "FileChooser.detailsViewIcon", new IconUIResource(new ImageIcon("icons/DetailsView.gif")),
       "FileChooser.directoryDescriptionText", "Directory",
       "FileChooser.fileDescriptionText", "Generic File",
       "FileChooser.helpButtonMnemonic", new Integer(72),
       "FileChooser.helpButtonText", "Help",
       "FileChooser.helpButtonToolTipText", "FileChooser help",
       // XXX Don't use gif
-      "FileChooser.homeFolderIcon", new IconUIResource(new ImageIcon("icons/HomeFolder.gif")),
+//      "FileChooser.homeFolderIcon", new IconUIResource(new ImageIcon("icons/HomeFolder.gif")),
       // XXX Don't use gif
-      "FileChooser.listViewIcon", new IconUIResource(new ImageIcon("icons/ListView.gif")),
+//      "FileChooser.listViewIcon", new IconUIResource(new ImageIcon("icons/ListView.gif")),
       "FileChooser.newFolderErrorSeparator", ":",
       "FileChooser.newFolderErrorText", "Error creating new folder",
       // XXX Don't use gif
-      "FileChooser.newFolderIcon", new IconUIResource(new ImageIcon("icons/NewFolder.gif")),
+//      "FileChooser.newFolderIcon", new IconUIResource(new ImageIcon("icons/NewFolder.gif")),
       "FileChooser.openButtonMnemonic", new Integer(79),
       "FileChooser.openButtonText", "Open",
       "FileChooser.openButtonToolTipText", "Open selected file",
@@ -408,33 +420,48 @@
       "FileChooser.saveButtonText", "Save",
       "FileChooser.saveButtonToolTipText", "Save selected file",
       // XXX Don't use gif
-      "FileChooser.upFolderIcon", new IconUIResource(new ImageIcon("icons/UpFolder.gif")),
+//      "FileChooser.upFolderIcon", new IconUIResource(new ImageIcon("icons/UpFolder.gif")),
       "FileChooser.updateButtonMnemonic", new Integer(85),
       "FileChooser.updateButtonText", "Update",
       "FileChooser.updateButtonToolTipText", "Update directory listing",
       // XXX Don't use gif
-      "FileView.computerIcon", new IconUIResource(new ImageIcon("icons/Computer.gif")),
+//      "FileView.computerIcon", new IconUIResource(new ImageIcon("icons/Computer.gif")),
       // XXX Don't use gif
-      "FileView.directoryIcon", new IconUIResource(new ImageIcon("icons/Directory.gif")),
+//      "FileView.directoryIcon", new IconUIResource(new ImageIcon("icons/Directory.gif")),
       // XXX Don't use gif
-      "FileView.fileIcon", new IconUIResource(new ImageIcon("icons/File.gif")),
+//      "FileView.fileIcon", new IconUIResource(new ImageIcon("icons/File.gif")),
       // XXX Don't use gif
-      "FileView.floppyDriveIcon", new IconUIResource(new ImageIcon("icons/Floppy.gif")),
+//      "FileView.floppyDriveIcon", new IconUIResource(new ImageIcon("icons/Floppy.gif")),
       // XXX Don't use gif
-      "FileView.hardDriveIcon", new IconUIResource(new ImageIcon("icons/HardDrive.gif")),
+//      "FileView.hardDriveIcon", new IconUIResource(new ImageIcon("icons/HardDrive.gif")),
       "FocusManagerClassName", "TODO",
+      "FormattedTextField.background", new ColorUIResource(light),
+      "FormattedTextField.caretForeground", new ColorUIResource(Color.black),
+      "FormattedTextField.foreground", new ColorUIResource(Color.black),
+      "FormattedTextField.inactiveBackground", new ColorUIResource(light),
+      "FormattedTextField.inactiveForeground", new ColorUIResource(Color.gray),
+      "FormattedTextField.selectionBackground",
+      new ColorUIResource(Color.black),
+      "FormattedTextField.selectionForeground",
+      new ColorUIResource(Color.white),
       "FormView.resetButtonText", "Reset",
       "FormView.submitButtonText", "Submit Query",
-      "InternalFrame.activeTitleBackground", new ColorUIResource(162, 167, 241),
-      "InternalFrame.activeTitleForeground", new ColorUIResource(Color.black),
-      "InternalFrame.border", new BorderUIResource.CompoundBorderUIResource(null,
-                                                                            null),
+      "InternalFrame.activeTitleBackground", new ColorUIResource(0, 0, 128),
+      "InternalFrame.activeTitleForeground", new ColorUIResource(Color.white),
+      "InternalFrame.border",
+      new BorderUIResource.CompoundBorderUIResource(null, null),
+      "InternalFrame.borderColor", new ColorUIResource(light),
+      "InternalFrame.borderDarkShadow", new ColorUIResource(shadow),
+      "InternalFrame.borderHighlight", new ColorUIResource(highLight),
+      "InternalFrame.borderLight", new ColorUIResource(light),
+      "InternalFrame.borderShadow", new ColorUIResource(shadow),
       "InternalFrame.closeIcon", BasicIconFactory.createEmptyFrameIcon(),
       // XXX Don't use gif
-      "InternalFrame.icon", new IconUIResource(new ImageIcon("icons/JavaCup.gif")),
+//      "InternalFrame.icon", new IconUIResource(new ImageIcon("icons/JavaCup.gif")),
       "InternalFrame.iconifyIcon", BasicIconFactory.createEmptyFrameIcon(),
-      "InternalFrame.inactiveTitleBackground", new ColorUIResource(Color.lightGray),
-      "InternalFrame.inactiveTitleForeground", new ColorUIResource(Color.black),
+      "InternalFrame.inactiveTitleBackground", new ColorUIResource(Color.gray),
+      "InternalFrame.inactiveTitleForeground",
+      new ColorUIResource(Color.lightGray),
       "InternalFrame.maximizeIcon", BasicIconFactory.createEmptyFrameIcon(),
       "InternalFrame.minimizeIcon", BasicIconFactory.createEmptyFrameIcon(),
       "InternalFrame.titleFont", new FontUIResource("Dialog", Font.PLAIN, 12),
@@ -443,12 +470,12 @@
         "ctrl SPACE",  "showSystemMenu",
         "ESCAPE",  "showSystemMenu"
       },
-      "Label.background", new ColorUIResource(Color.lightGray),
+      "Label.background", new ColorUIResource(light),
       "Label.disabledForeground", new ColorUIResource(Color.white),
-      "Label.disabledShadow", new ColorUIResource(Color.gray),
+      "Label.disabledShadow", new ColorUIResource(shadow),
       "Label.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "Label.foreground", new ColorUIResource(Color.black),
-      "List.background", new ColorUIResource(Color.white),
+      "Label.foreground", new ColorUIResource(darkShadow),
+      "List.background", new ColorUIResource(light),
       "List.border", new BasicBorders.MarginBorder(),
       "List.focusInputMap", new UIDefaults.LazyInputMap(new Object[] {
         "PAGE_UP", "scrollUp",
@@ -470,20 +497,20 @@
         "shift PAGE_UP","scrollUpExtendSelection",
         "KP_DOWN", "selectNextRow"
       }),
-      "List.foreground", new ColorUIResource(Color.black),
-      "List.selectionBackground", new ColorUIResource(0xCC, 0xCC, 0xFF),
-      "List.selectionForeground", new ColorUIResource(Color.black),
+      "List.foreground", new ColorUIResource(darkShadow),
+      "List.selectionBackground", new ColorUIResource(Color.black),
+      "List.selectionForeground", new ColorUIResource(Color.white),
       "Menu.acceleratorFont", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "Menu.acceleratorForeground", new ColorUIResource(Color.black),
+      "Menu.acceleratorForeground", new ColorUIResource(darkShadow),
       "Menu.acceleratorSelectionForeground", new ColorUIResource(Color.white),
       "Menu.arrowIcon", BasicIconFactory.getMenuArrowIcon(),
-      "Menu.background", new ColorUIResource(Color.lightGray),
+      "Menu.background", new ColorUIResource(light),
       "Menu.border", new BasicBorders.MarginBorder(),
       "Menu.borderPainted", Boolean.FALSE,
       "Menu.checkIcon", BasicIconFactory.getMenuItemCheckIcon(),
       "Menu.consumesTabs", Boolean.TRUE,
       "Menu.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "Menu.foreground", new ColorUIResource(Color.black),
+      "Menu.foreground", new ColorUIResource(darkShadow),
       "Menu.margin", new InsetsUIResource(2, 2, 2, 2),
       "Menu.selectedWindowInputMapBindings", new Object[] {
         "ESCAPE", "cancel",
@@ -498,115 +525,130 @@
         "ENTER", "return",
         "SPACE", "return"
       },
-      "Menu.selectionBackground", new ColorUIResource(lightPurple),
-      "Menu.selectionForeground", new ColorUIResource(Color.black),
-      "MenuBar.background", new ColorUIResource(Color.lightGray),
+      "Menu.selectionBackground", new ColorUIResource(Color.black),
+      "Menu.selectionForeground", new ColorUIResource(Color.white),
+      "MenuBar.background", new ColorUIResource(light),
       "MenuBar.border", new BasicBorders.MenuBarBorder(null, null),
       "MenuBar.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "MenuBar.foreground", new ColorUIResource(Color.black),
+      "MenuBar.foreground", new ColorUIResource(darkShadow),
+      "MenuBar.highlight", new ColorUIResource(highLight),
+      "MenuBar.shadow", new ColorUIResource(shadow),
       "MenuBar.windowBindings", new Object[] {
         "F10", "takeFocus"
       },
       "MenuItem.acceleratorDelimiter", "-",
       "MenuItem.acceleratorFont", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "MenuItem.acceleratorForeground", new ColorUIResource(Color.black),
-      "MenuItem.acceleratorSelectionForeground", new ColorUIResource(Color.white),
+      "MenuItem.acceleratorForeground", new ColorUIResource(darkShadow),
+      "MenuItem.acceleratorSelectionForeground",
+      new ColorUIResource(Color.white),
       "MenuItem.arrowIcon", BasicIconFactory.getMenuItemArrowIcon(),
-      "MenuItem.background", new ColorUIResource(Color.lightGray),
+      "MenuItem.background", new ColorUIResource(light),
       "MenuItem.border", new BasicBorders.MarginBorder(),
       "MenuItem.borderPainted", Boolean.FALSE,
       "MenuItem.checkIcon", BasicIconFactory.getMenuItemCheckIcon(),
       "MenuItem.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "MenuItem.foreground", new ColorUIResource(Color.black),
+      "MenuItem.foreground", new ColorUIResource(darkShadow),
       "MenuItem.margin", new InsetsUIResource(2, 2, 2, 2),
-      "MenuItem.selectionBackground", new ColorUIResource(lightPurple),
-      "MenuItem.selectionForeground", new ColorUIResource(Color.black),
-      "OptionPane.background", new ColorUIResource(Color.lightGray),
-      "OptionPane.border", new BorderUIResource.EmptyBorderUIResource(0, 0, 0, 0),
-      "OptionPane.buttonAreaBorder", new BorderUIResource.EmptyBorderUIResource(0, 0, 0, 0),
+      "MenuItem.selectionBackground", new ColorUIResource(Color.black),
+      "MenuItem.selectionForeground", new ColorUIResource(Color.white),
+      "OptionPane.background", new ColorUIResource(light),
+      "OptionPane.border",
+      new BorderUIResource.EmptyBorderUIResource(0, 0, 0, 0),
+      "OptionPane.buttonAreaBorder",
+      new BorderUIResource.EmptyBorderUIResource(0, 0, 0, 0),
       "OptionPane.cancelButtonText", "Cancel",
       // XXX Don't use gif
-      "OptionPane.errorIcon", new IconUIResource(new ImageIcon("icons/Error.gif")),
+//      "OptionPane.errorIcon",
+//      new IconUIResource(new ImageIcon("icons/Error.gif")),
       "OptionPane.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "OptionPane.foreground", new ColorUIResource(Color.black),
+      "OptionPane.foreground", new ColorUIResource(darkShadow),
       // XXX Don't use gif
-      "OptionPane.informationIcon", new IconUIResource(new ImageIcon("icons/Inform.gif")),
-      "OptionPane.messageAreaBorder", new BorderUIResource.EmptyBorderUIResource(0, 0, 0, 0),
-      "OptionPane.messageForeground", new ColorUIResource(Color.black),
+//      "OptionPane.informationIcon",
+//      new IconUIResource(new ImageIcon("icons/Inform.gif")),
+      "OptionPane.messageAreaBorder",
+      new BorderUIResource.EmptyBorderUIResource(0, 0, 0, 0),
+      "OptionPane.messageForeground", new ColorUIResource(darkShadow),
       "OptionPane.minimumSize", new DimensionUIResource(262, 90),
       "OptionPane.noButtonText", "No",
       "OptionPane.okButtonText", "OK",
       // XXX Don't use gif
-      "OptionPane.questionIcon", new IconUIResource(new ImageIcon("icons/Question.gif")),
+//      "OptionPane.questionIcon",
+//      new IconUIResource(new ImageIcon("icons/Question.gif")),
       // XXX Don't use gif
-      "OptionPane.warningIcon", new IconUIResource(new ImageIcon("icons/Warn.gif")),
+//      "OptionPane.warningIcon",
+//      new IconUIResource(new ImageIcon("icons/Warn.gif")),
       "OptionPane.windowBindings", new Object[] {
         "ESCAPE",  "close"
       },
       "OptionPane.yesButtonText", "Yes",
-      "Panel.background", new ColorUIResource(Color.lightGray),
+      "Panel.background", new ColorUIResource(light),
       "Panel.font", new FontUIResource("Dialog", Font.PLAIN, 12),
       "Panel.foreground", new ColorUIResource(Color.black),
-      "PasswordField.background", new ColorUIResource(Color.white),
+      "PasswordField.background", new ColorUIResource(light),
       "PasswordField.border", new BasicBorders.FieldBorder(null, null,
                                                            null, null),
       "PasswordField.caretBlinkRate", new Integer(500),
       "PasswordField.caretForeground", new ColorUIResource(Color.black),
       "PasswordField.font", new FontUIResource("MonoSpaced", Font.PLAIN, 12),
       "PasswordField.foreground", new ColorUIResource(Color.black),
+      "PasswordField.inactiveBackground", new ColorUIResource(light),
       "PasswordField.inactiveForeground", new ColorUIResource(Color.gray),
       "PasswordField.keyBindings", new JTextComponent.KeyBinding[] {
         new JTextComponent.KeyBinding(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,
                                                              0),
                                       "notify-field-accept")},
       "PasswordField.margin", new InsetsUIResource(0, 0, 0, 0),
-      "PasswordField.selectionBackground", new ColorUIResource(lightPurple),
-      "PasswordField.selectionForeground", new ColorUIResource(Color.black),
-      "PopupMenu.background", new ColorUIResource(Color.lightGray),
+      "PasswordField.selectionBackground", new ColorUIResource(Color.black),
+      "PasswordField.selectionForeground", new ColorUIResource(Color.white),
+      "PopupMenu.background", new ColorUIResource(light),
       "PopupMenu.border", new BorderUIResource.BevelBorderUIResource(0),
       "PopupMenu.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "PopupMenu.foreground", new ColorUIResource(Color.black),
-      "ProgressBar.background", new ColorUIResource(Color.lightGray),
+      "PopupMenu.foreground", new ColorUIResource(darkShadow),
+      "ProgressBar.background", new ColorUIResource(light),
       "ProgressBar.border", new BorderUIResource.LineBorderUIResource(Color.darkGray),
       "ProgressBar.cellLength", new Integer(1),
       "ProgressBar.cellSpacing", new Integer(0),
       "ProgressBar.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "ProgressBar.foreground", new ColorUIResource(midPurple),
-      "ProgressBar.selectionBackground", new ColorUIResource(lightPurple),
-      "ProgressBar.selectionForeground", new ColorUIResource(Color.lightGray),
+      "ProgressBar.foreground", new ColorUIResource(Color.black),
+      "ProgressBar.selectionBackground", new ColorUIResource(Color.black),
+      "ProgressBar.selectionForeground", new ColorUIResource(light),
       "ProgressBar.repaintInterval", new Integer(250),
       "ProgressBar.cycleTime", new Integer(6000),
-      "RadioButton.background", new ColorUIResource(Color.lightGray),
+      "RadioButton.background", new ColorUIResource(light),
       "RadioButton.border", new BorderUIResource.CompoundBorderUIResource(null,
                                                                           null),
-      "RadioButton.darkShadow", new ColorUIResource(Color.darkGray),
+      "RadioButton.darkShadow", new ColorUIResource(shadow),
       "RadioButton.focusInputMap", new UIDefaults.LazyInputMap(new Object[] {
         "SPACE",  "pressed",
         "released SPACE", "released"
       }),
       "RadioButton.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "RadioButton.foreground", new ColorUIResource(Color.black),
-      "RadioButton.highlight", new ColorUIResource(Color.white),
+      "RadioButton.foreground", new ColorUIResource(darkShadow),
+      "RadioButton.highlight", new ColorUIResource(highLight),
       "RadioButton.icon", BasicIconFactory.getRadioButtonIcon(),
-      "RadioButton.light", new ColorUIResource(Color.lightGray.brighter()),
+      "RadioButton.light", new ColorUIResource(highLight),
       "RadioButton.margin", new InsetsUIResource(2, 2, 2, 2),
-      "RadioButton.shadow", new ColorUIResource(Color.gray),
+      "RadioButton.shadow", new ColorUIResource(shadow),
       "RadioButton.textIconGap", new Integer(4),
       "RadioButton.textShiftOffset", new Integer(0),
-      "RadioButtonMenuItem.acceleratorFont", new FontUIResource("Dialog",
-                                                                Font.PLAIN, 12),
-      "RadioButtonMenuItem.acceleratorForeground", new ColorUIResource(Color.black),
-      "RadioButtonMenuItem.acceleratorSelectionForeground", new ColorUIResource(Color.white),
+      "RadioButtonMenuItem.acceleratorFont",
+      new FontUIResource("Dialog", Font.PLAIN, 12),
+      "RadioButtonMenuItem.acceleratorForeground",
+      new ColorUIResource(darkShadow),
+      "RadioButtonMenuItem.acceleratorSelectionForeground",
+      new ColorUIResource(Color.white),
       "RadioButtonMenuItem.arrowIcon", BasicIconFactory.getMenuItemArrowIcon(),
-      "RadioButtonMenuItem.background", new ColorUIResource(Color.lightGray),
+      "RadioButtonMenuItem.background", new ColorUIResource(light),
       "RadioButtonMenuItem.border", new BasicBorders.MarginBorder(),
       "RadioButtonMenuItem.borderPainted", Boolean.FALSE,
       "RadioButtonMenuItem.checkIcon", BasicIconFactory.getRadioButtonMenuItemIcon(),
       "RadioButtonMenuItem.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "RadioButtonMenuItem.foreground", new ColorUIResource(Color.black),
+      "RadioButtonMenuItem.foreground", new ColorUIResource(darkShadow),
       "RadioButtonMenuItem.margin", new InsetsUIResource(2, 2, 2, 2),
-      "RadioButtonMenuItem.selectionBackground", new ColorUIResource(lightPurple),
-      "RadioButtonMenuItem.selectionForeground", new ColorUIResource(Color.black),
+      "RadioButtonMenuItem.selectionBackground",
+      new ColorUIResource(Color.black),
+      "RadioButtonMenuItem.selectionForeground",
+      new ColorUIResource(Color.white),
       "RootPane.defaultButtonWindowKeyBindings", new Object[] {
         "ENTER",  "press",
         "released ENTER", "release",
@@ -628,15 +670,15 @@
         "DOWN",  "positiveUnitIncrement",
         "KP_RIGHT", "negativeUnitIncrement"
       }),
-      "ScrollBar.foreground", new ColorUIResource(Color.lightGray),
+      "ScrollBar.foreground", new ColorUIResource(light),
       "ScrollBar.maximumThumbSize", new DimensionUIResource(4096, 4096),
       "ScrollBar.minimumThumbSize", new DimensionUIResource(8, 8),
-      "ScrollBar.thumb", new ColorUIResource(Color.lightGray),
-      "ScrollBar.thumbDarkShadow", new ColorUIResource(Color.black),
-      "ScrollBar.thumbHighlight", new ColorUIResource(Color.white),
-      "ScrollBar.thumbLightShadow", new ColorUIResource(Color.gray),
-      "ScrollBar.track", new ColorUIResource(224, 224, 224),
-      "ScrollBar.trackHighlight", new ColorUIResource(Color.black),
+      "ScrollBar.thumb", new ColorUIResource(light),
+      "ScrollBar.thumbDarkShadow", new ColorUIResource(shadow),
+      "ScrollBar.thumbHighlight", new ColorUIResource(highLight),
+      "ScrollBar.thumbShadow", new ColorUIResource(shadow),
+      "ScrollBar.track", new ColorUIResource(light),
+      "ScrollBar.trackHighlight", new ColorUIResource(shadow),
       "ScrollPane.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[] {
         "PAGE_UP", "scrollUp",
         "KP_LEFT", "unitScrollLeft",
@@ -653,16 +695,16 @@
         "KP_UP", "unitScrollUp",
         "KP_DOWN", "unitScrollDown"
       }),
-      "ScrollPane.background", new ColorUIResource(Color.lightGray),
+      "ScrollPane.background", new ColorUIResource(light),
       "ScrollPane.border", new BorderUIResource.EtchedBorderUIResource(),
       "ScrollPane.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "ScrollPane.foreground", new ColorUIResource(Color.black),
-      "Separator.background", new ColorUIResource(Color.white),
-      "Separator.foreground", new ColorUIResource(Color.gray),
-      "Separator.highlight", new ColorUIResource(Color.white),
-      "Separator.shadow", new ColorUIResource(Color.gray),
-      "Slider.background", new ColorUIResource(Color.lightGray),
-      "Slider.focus", new ColorUIResource(Color.black),
+      "ScrollPane.foreground", new ColorUIResource(darkShadow),
+      "Separator.background", new ColorUIResource(highLight),
+      "Separator.foreground", new ColorUIResource(shadow),
+      "Separator.highlight", new ColorUIResource(highLight),
+      "Separator.shadow", new ColorUIResource(shadow),
+      "Slider.background", new ColorUIResource(light),
+      "Slider.focus", new ColorUIResource(shadow),
       "Slider.focusInputMap", new UIDefaults.LazyInputMap(new Object[] {
         "PAGE_UP", "positiveBlockIncrement",
         "PAGE_DOWN", "negativeBlockIncrement",
@@ -678,12 +720,14 @@
         "KP_RIGHT", "positiveUnitIncrement"
       }),
       "Slider.focusInsets", new InsetsUIResource(2, 2, 2, 2),
-      "Slider.foreground", new ColorUIResource(Color.lightGray),
-      "Slider.highlight", new ColorUIResource(Color.white),
-      "Slider.shadow", new ColorUIResource(Color.gray),
+      "Slider.foreground", new ColorUIResource(light),
+      "Slider.highlight", new ColorUIResource(highLight),
+      "Slider.shadow", new ColorUIResource(shadow),
       "Slider.thumbHeight", new Integer(20),
       "Slider.thumbWidth", new Integer(10),
       "Slider.tickHeight", new Integer(12),
+      "Spinner.background", new ColorUIResource(light),
+      "Spinner.foreground", new ColorUIResource(light),
       "SplitPane.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[] {
         "F6",  "toggleFocus",
         "F8",  "startResize",
@@ -698,21 +742,22 @@
         "DOWN",  "positiveIncrement",
         "KP_RIGHT", "positiveIncrement"
       }),
-      "SplitPane.background", new ColorUIResource(Color.lightGray),
+      "SplitPane.background", new ColorUIResource(light),
       "SplitPane.border", new BasicBorders.SplitPaneBorder(null, null),
+      "SplitPane.darkShadow", new ColorUIResource(shadow),
       "SplitPane.dividerSize", new Integer(10),
-      "SplitPane.highlight", new ColorUIResource(Color.white),
-      "SplitPane.shadow", new ColorUIResource(Color.gray),
+      "SplitPane.highlight", new ColorUIResource(highLight),
+      "SplitPane.shadow", new ColorUIResource(shadow),
       "TabbedPane.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[] {
         "ctrl PAGE_DOWN","navigatePageDown",
         "ctrl PAGE_UP", "navigatePageUp",
         "ctrl UP", "requestFocus",
         "ctrl KP_UP", "requestFocus"
       }),
-      "TabbedPane.background", new ColorUIResource(Color.LIGHT_GRAY),
+      "TabbedPane.background", new ColorUIResource(light),
       "TabbedPane.contentBorderInsets", new InsetsUIResource(2, 2, 3, 3),
-      "TabbedPane.darkShadow", new ColorUIResource(Color.darkGray),
-      "TabbedPane.focus", new ColorUIResource(Color.black),
+      "TabbedPane.darkShadow", new ColorUIResource(shadow),
+      "TabbedPane.focus", new ColorUIResource(darkShadow),
       "TabbedPane.focusInputMap", new UIDefaults.LazyInputMap(new Object[] {
         "LEFT",  "navigateLeft",
         "KP_UP", "navigateUp",
@@ -726,11 +771,11 @@
         "DOWN",  "navigateDown"
       }),
       "TabbedPane.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "TabbedPane.foreground", new ColorUIResource(Color.black),
-      "TabbedPane.highlight", new ColorUIResource(Color.lightGray),
-      "TabbedPane.lightHighlight", new ColorUIResource(Color.white),
+      "TabbedPane.foreground", new ColorUIResource(darkShadow),
+      "TabbedPane.highlight", new ColorUIResource(highLight),
+      "TabbedPane.light", new ColorUIResource(highLight),
       "TabbedPane.selectedTabPadInsets", new InsetsUIResource(2, 2, 2, 1),
-      "TabbedPane.shadow", new ColorUIResource(Color.gray),
+      "TabbedPane.shadow", new ColorUIResource(shadow),
       "TabbedPane.tabbedPaneTabAreaInsets", new InsetsUIResource(3, 2, 1, 2),
       "TabbedPane.tabbedPaneTabInsets", new InsetsUIResource(1, 4, 1, 4),
       "TabbedPane.tabbedPaneContentBorderInsets", new InsetsUIResource(3, 2, 1, 2),
@@ -777,21 +822,23 @@
         "ctrl PAGE_DOWN", "scrollRightChangeSelection",
         "PAGE_UP",   "scrollUpChangeSelection"
       }),
-      "Table.background", new ColorUIResource(Color.white),
-      "Table.focusCellBackground", new ColorUIResource(Color.white),
-      "Table.focusCellForeground", new ColorUIResource(Color.black),
-      "Table.focusCellHighlightBorder", new BorderUIResource.LineBorderUIResource(Color.white),
+      "Table.background", new ColorUIResource(light),
+      "Table.focusCellBackground", new ColorUIResource(light),
+      "Table.focusCellForeground", new ColorUIResource(darkShadow),
+      "Table.focusCellHighlightBorder",
+      new BorderUIResource.LineBorderUIResource(Color.white),
       "Table.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "Table.foreground", new ColorUIResource(Color.black),
+      "Table.foreground", new ColorUIResource(darkShadow),
       "Table.gridColor", new ColorUIResource(Color.gray),
       "Table.scrollPaneBorder", new BorderUIResource.BevelBorderUIResource(0),
-      "Table.selectionBackground", new ColorUIResource(lightPurple),
-      "Table.selectionForeground", new ColorUIResource(Color.black),
-      "TableHeader.background", new ColorUIResource(Color.lightGray),
+      "Table.selectionBackground", new ColorUIResource(Color.black),
+      "Table.selectionForeground", new ColorUIResource(Color.white),
+      "TableHeader.background", new ColorUIResource(light),
       "TableHeader.cellBorder", new BorderUIResource.BevelBorderUIResource(0),
       "TableHeader.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "TableHeader.foreground", new ColorUIResource(Color.black),
-      "TextArea.background", new ColorUIResource(Color.white),
+      "TableHeader.foreground", new ColorUIResource(darkShadow),
+
+			"TextArea.background", new ColorUIResource(light),
       "TextArea.border", new BasicBorders.MarginBorder(),
       "TextArea.caretBlinkRate", new Integer(500),
       "TextArea.caretForeground", new ColorUIResource(Color.black),
@@ -813,15 +860,20 @@
                                                              0), "insert-tab")
           },
       "TextArea.margin", new InsetsUIResource(0, 0, 0, 0),
-      "TextArea.selectionBackground", new ColorUIResource(lightPurple),
-      "TextArea.selectionForeground", new ColorUIResource(Color.black),
-      "TextField.background", new ColorUIResource(Color.white),
+      "TextArea.selectionBackground", new ColorUIResource(Color.black),
+      "TextArea.selectionForeground", new ColorUIResource(Color.white),
+      "TextField.background", new ColorUIResource(light),
       "TextField.border", new BasicBorders.FieldBorder(null, null, null, null),
       "TextField.caretBlinkRate", new Integer(500),
       "TextField.caretForeground", new ColorUIResource(Color.black),
+      "TextField.darkShadow", new ColorUIResource(shadow),
       "TextField.font", new FontUIResource("SansSerif", Font.PLAIN, 12),
       "TextField.foreground", new ColorUIResource(Color.black),
+      "TextField.highlight", new ColorUIResource(highLight),
+      "TextField.inactiveBackground", new ColorUIResource(light),
       "TextField.inactiveForeground", new ColorUIResource(Color.gray),
+      "TextField.light", new ColorUIResource(highLight),
+      "TextField.highlight", new ColorUIResource(light),
       "TextField.keyBindings", new JTextComponent.KeyBinding[] {
         new JTextComponent.KeyBinding(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,
                                                              0),
@@ -834,8 +886,8 @@
 							     "selection-forward"),
           },
       "TextField.margin", new InsetsUIResource(0, 0, 0, 0),
-      "TextField.selectionBackground", new ColorUIResource(lightPurple),
-      "TextField.selectionForeground", new ColorUIResource(Color.black),
+      "TextField.selectionBackground", new ColorUIResource(Color.black),
+      "TextField.selectionForeground", new ColorUIResource(Color.white),
       "TextPane.background", new ColorUIResource(Color.white),
       "TextPane.border", new BasicBorders.MarginBorder(),
       "TextPane.caretBlinkRate", new Integer(500),
@@ -858,20 +910,25 @@
                                                              0), "insert-tab")
           },
       "TextPane.margin", new InsetsUIResource(3, 3, 3, 3),
-      "TextPane.selectionBackground", new ColorUIResource(Color.lightGray),
+      "TextPane.selectionBackground", new ColorUIResource(Color.black),
       "TextPane.selectionForeground", new ColorUIResource(Color.white),
       "TitledBorder.border", new BorderUIResource.EtchedBorderUIResource(),
       "TitledBorder.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "TitledBorder.titleColor", new ColorUIResource(Color.black),
-      "ToggleButton.background", new ColorUIResource(Color.lightGray),
-      "ToggleButton.border", new BorderUIResource.CompoundBorderUIResource(null, null),
+      "TitledBorder.titleColor", new ColorUIResource(darkShadow),
+      "ToggleButton.background", new ColorUIResource(light),
+      "ToggleButton.border",
+      new BorderUIResource.CompoundBorderUIResource(null, null),
+      "ToggleButton.darkShadow", new ColorUIResource(shadow),
       "ToggleButton.focusInputMap", new UIDefaults.LazyInputMap(new Object[] {
         "SPACE",  "pressed",
         "released SPACE", "released"
       }),
       "ToggleButton.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "ToggleButton.foreground", new ColorUIResource(Color.black),
+      "ToggleButton.foreground", new ColorUIResource(darkShadow),
+      "ToggleButton.highlight", new ColorUIResource(highLight),
+      "ToggleButton.light", new ColorUIResource(light),
       "ToggleButton.margin", new InsetsUIResource(2, 14, 2, 14),
+      "ToggleButton.shadow", new ColorUIResource(shadow),
       "ToggleButton.textIconGap", new Integer(4),
       "ToggleButton.textShiftOffset", new Integer(0),
       "ToolBar.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[] {
@@ -884,26 +941,30 @@
         "RIGHT", "navigateRight",
         "KP_RIGHT", "navigateRight"
       }),
-      "ToolBar.background", new ColorUIResource(Color.lightGray),
+      "ToolBar.background", new ColorUIResource(light),
       "ToolBar.border", new BorderUIResource.EtchedBorderUIResource(),
-      "ToolBar.dockingBackground", new ColorUIResource(Color.lightGray),
-      "ToolBar.dockingForeground", new ColorUIResource(11, 30, 143),
-      "ToolBar.floatingBackground", new ColorUIResource(Color.lightGray),
-      "ToolBar.floatingForeground", new ColorUIResource(113, 171, 212),
+      "ToolBar.darkShadow", new ColorUIResource(shadow),
+      "ToolBar.dockingBackground", new ColorUIResource(light),
+      "ToolBar.dockingForeground", new ColorUIResource(Color.red),
+      "ToolBar.floatingBackground", new ColorUIResource(light),
+      "ToolBar.floatingForeground", new ColorUIResource(Color.darkGray),
       "ToolBar.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "ToolBar.foreground", new ColorUIResource(Color.black),
+      "ToolBar.foreground", new ColorUIResource(darkShadow),
+      "ToolBar.highlight", new ColorUIResource(highLight),
+      "ToolBar.light", new ColorUIResource(highLight),
       "ToolBar.separatorSize", new DimensionUIResource(20, 20),
-      "ToolTip.background", new ColorUIResource(122, 178, 241),
+      "ToolBar.shadow", new ColorUIResource(shadow),
+      "ToolTip.background", new ColorUIResource(light),
       "ToolTip.border", new BorderUIResource.LineBorderUIResource(Color.lightGray),
       "ToolTip.font", new FontUIResource("SansSerif", Font.PLAIN, 12),
-      "ToolTip.foreground", new ColorUIResource(Color.black),
+      "ToolTip.foreground", new ColorUIResource(darkShadow),
       "Tree.ancestorInputMap", new UIDefaults.LazyInputMap(new Object[] {
         "ESCAPE", "cancel"
       }),
-      "Tree.background", new ColorUIResource(Color.white),
+      "Tree.background", new ColorUIResource(light),
       "Tree.changeSelectionWithFocus", Boolean.TRUE,
-      "Tree.closedIcon", new IconUIResource(new ImageIcon("icons/TreeClosed.png")),
-      "Tree.collapsedIcon", new IconUIResource(new ImageIcon("icons/TreeCollapsed.png")),
+//      "Tree.closedIcon", new IconUIResource(new ImageIcon("icons/TreeClosed.png")),
+//      "Tree.collapsedIcon", new IconUIResource(new ImageIcon("icons/TreeCollapsed.png")),
       "Tree.drawsFocusBorderAroundIcon", Boolean.FALSE,
       "Tree.editorBorder", new BorderUIResource.LineBorderUIResource(Color.lightGray),
       "Tree.focusInputMap", new UIDefaults.LazyInputMap(new Object[] {
@@ -951,22 +1012,23 @@
         "ctrl PAGE_DOWN", "scrollDownChangeLead"
       }),
       "Tree.font", new FontUIResource("Dialog", Font.PLAIN, 12),
-      "Tree.expandedIcon", new IconUIResource(new ImageIcon("icons/TreeExpanded.png")),
+//      "Tree.expandedIcon", new IconUIResource(new ImageIcon("icons/TreeExpanded.png")),
       "Tree.foreground", new ColorUIResource(Color.black),
       "Tree.hash", new ColorUIResource(Color.gray),
-      "Tree.leafIcon", new IconUIResource(new ImageIcon("icons/TreeLeaf.png")),
+//      "Tree.leafIcon", new IconUIResource(new ImageIcon("icons/TreeLeaf.png")),
       "Tree.leftChildIndent", new Integer(7),
-      "Tree.openIcon", new IconUIResource(new ImageIcon("icons/TreeOpen.png")),
+//      "Tree.openIcon", new IconUIResource(new ImageIcon("icons/TreeOpen.png")),
       "Tree.rightChildIndent", new Integer(13),
       "Tree.rowHeight", new Integer(16),
       "Tree.scrollsOnExpand", Boolean.TRUE,
-      "Tree.selectionBackground", new ColorUIResource(lightPurple),
+      "Tree.selectionBackground", new ColorUIResource(Color.black),
       "Tree.selectionBorderColor", new ColorUIResource(Color.black),
-      "Tree.selectionForeground", new ColorUIResource(Color.black),
-      "Tree.textBackground", new ColorUIResource(Color.lightGray),
+      "Tree.selectionForeground", new ColorUIResource(Color.white),
+      "Tree.textBackground", new ColorUIResource(Color.white),
       "Tree.textForeground", new ColorUIResource(Color.black),
-      "Viewport.background", new ColorUIResource(Color.lightGray),
-      "Viewport.font", new FontUIResource("Dialog", Font.PLAIN, 12),
+      "Viewport.background", new ColorUIResource(light),
+      "Viewport.foreground", new ColorUIResource(Color.black),
+      "Viewport.font", new FontUIResource("Dialog", Font.PLAIN, 12)
     };
     defaults.putDefaults(uiDefaults);
   }
Index: libjava/javax/swing/plaf/basic/BasicMenuBarUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicMenuBarUI.java,v
retrieving revision 1.7
diff -u -r1.7 BasicMenuBarUI.java
--- libjava/javax/swing/plaf/basic/BasicMenuBarUI.java	16 Feb 2005 20:02:53 -0000	1.7
+++ libjava/javax/swing/plaf/basic/BasicMenuBarUI.java	9 Jul 2005 22:10:12 -0000
@@ -295,9 +295,9 @@
     public void propertyChange(PropertyChangeEvent e)
     {
       if (e.getPropertyName().equals("borderPainted"))
-	menuBar.repaint();
+        menuBar.repaint();
       if (e.getPropertyName().equals("margin"))
-	menuBar.repaint();
+        menuBar.repaint();
     }
   }
 }
Index: libjava/javax/swing/plaf/basic/BasicMenuItemUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicMenuItemUI.java,v
retrieving revision 1.9
diff -u -r1.9 BasicMenuItemUI.java
--- libjava/javax/swing/plaf/basic/BasicMenuItemUI.java	16 Feb 2005 20:02:53 -0000	1.9
+++ libjava/javax/swing/plaf/basic/BasicMenuItemUI.java	9 Jul 2005 22:10:12 -0000
@@ -1,5 +1,5 @@
 /* BasicMenuItemUI.java --
-   Copyright (C) 2002, 2004  Free Software Foundation, Inc.
+   Copyright (C) 2002, 2004, 2005  Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -605,7 +605,17 @@
     if (text != null && ! text.equals(""))
       {
 	if (menuItem.isEnabled())
-	  g.setColor(menuItem.getForeground());
+          {
+            /* Menu item is considered to be highlighted when it is selected.
+               It is considered to be selected if menu item is inside some menu
+               and is armed or if it is both armed and pressed */
+            if (menuItem.getModel().isArmed()
+                && (menuItem.getParent() instanceof MenuElement
+                    || menuItem.getModel().isPressed()))
+              g.setColor(selectionForeground);
+            else
+              g.setColor(menuItem.getForeground());
+          }
 	else
 	  // FIXME: should fix this to use 'disabledForeground', but its
 	  // default value in BasicLookAndFeel is null.	  
Index: libjava/javax/swing/plaf/basic/BasicMenuUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicMenuUI.java,v
retrieving revision 1.9
diff -u -r1.9 BasicMenuUI.java
--- libjava/javax/swing/plaf/basic/BasicMenuUI.java	16 Feb 2005 20:02:54 -0000	1.9
+++ libjava/javax/swing/plaf/basic/BasicMenuUI.java	9 Jul 2005 22:10:13 -0000
@@ -1,5 +1,5 @@
 /* BasicMenuUI.java
-   Copyright (C) 2002, 2004  Free Software Foundation, Inc.
+   Copyright (C) 2002, 2004, 2005  Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -179,7 +179,7 @@
    */
   public Dimension getMaximumSize(JComponent c)
   {
-    return null;
+    return c.getPreferredSize();
   }
 
   protected String getPropertyPrefix()
@@ -424,7 +424,10 @@
     }
   }
 
-  protected class ChangeHandler implements ChangeListener
+  /**
+   * @deprecated
+   */
+  public class ChangeHandler implements ChangeListener
   {
     public void stateChanged(ChangeEvent e)
     {
Index: libjava/javax/swing/plaf/basic/BasicOptionPaneUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicOptionPaneUI.java,v
retrieving revision 1.10
diff -u -r1.10 BasicOptionPaneUI.java
--- libjava/javax/swing/plaf/basic/BasicOptionPaneUI.java	16 Feb 2005 20:02:54 -0000	1.10
+++ libjava/javax/swing/plaf/basic/BasicOptionPaneUI.java	9 Jul 2005 22:10:13 -0000
@@ -1,5 +1,5 @@
 /* BasicOptionPaneUI.java --
-   Copyright (C) 2004 Free Software Foundation, Inc.
+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -56,6 +56,7 @@
 import java.beans.PropertyChangeListener;
 import java.beans.PropertyVetoException;
 
+import javax.swing.BorderFactory;
 import javax.swing.Box;
 import javax.swing.BoxLayout;
 import javax.swing.Icon;
@@ -84,8 +85,12 @@
   /**
    * This is a helper class that listens to the buttons located at the bottom
    * of the JOptionPane.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
-  protected class ButtonActionListener implements ActionListener
+  public class ButtonActionListener implements ActionListener
   {
     /** The index of the option this button represents. */
     protected int buttonIndex;
@@ -151,8 +156,13 @@
    * This helper layout manager is responsible for the layout of the button
    * area. The button area is the panel that holds the buttons which
    * represent the options.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
-  protected class ButtonAreaLayout implements LayoutManager
+  // FIXME: should be static
+  public class ButtonAreaLayout implements LayoutManager
   {
     /** Whether this layout will center the buttons. */
     protected boolean centersChildren = true;
@@ -365,6 +375,10 @@
 
   /**
    * This helper class handles property change events from the JOptionPane.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class PropertyChangeHandler implements PropertyChangeListener
   {
@@ -439,7 +453,8 @@
   protected JOptionPane optionPane;
 
   /** The size of the icons. */
-  private static int iconSize = 36;
+  // FIXME: wrong name for a constant.
+  private static final int iconSize = 36;
 
   /** The foreground color for the message area. */
   private transient Color messageForeground;
@@ -451,22 +466,24 @@
   private transient Border buttonBorder;
 
   /** The string used to describe OK buttons. */
-  private static String OK_STRING = "OK";
+  private static final String OK_STRING = "OK";
 
   /** The string used to describe Yes buttons. */
-  private static String YES_STRING = "Yes";
+  private static final String YES_STRING = "Yes";
 
   /** The string used to describe No buttons. */
-  private static String NO_STRING = "No";
+  private static final String NO_STRING = "No";
 
   /** The string used to describe Cancel buttons. */
-  private static String CANCEL_STRING = "Cancel";
+  private static final String CANCEL_STRING = "Cancel";
 
-  /** The container for the message area. */
-  private transient Container messageAreaContainer;
-
-  /** The container for the buttons. */
-  private transient Container buttonContainer;
+  /** The container for the message area.
+   * This is package-private to avoid an accessor method. */
+  transient Container messageAreaContainer;
+
+  /** The container for the buttons.
+   * This is package-private to avoid an accessor method.  */
+  transient Container buttonContainer;
 
   /**
    * A helper class that implements Icon. This is used temporarily until
@@ -846,18 +863,8 @@
     messageArea.setLayout(new BorderLayout());
     addIcon(messageArea);
 
-    JPanel rightSide = new JPanel()
-      {
-	public Dimension getPreferredSize()
-	{
-	  int w = Math.max(optionPane.getSize().width, minimumWidth);
-	  Insets i = optionPane.getInsets();
-	  Dimension orig = super.getPreferredSize();
-	  Dimension value = new Dimension(w - i.left - i.right - iconSize,
-	                                  orig.height);
-	  return value;
-	}
-      };
+    JPanel rightSide = new JPanel();
+    rightSide.setBorder(BorderFactory.createEmptyBorder(0, 11, 17, 0));
     rightSide.setLayout(new GridBagLayout());
     GridBagConstraints con = createConstraints();
 
@@ -868,19 +875,16 @@
       {
 	Object[] selection = optionPane.getSelectionValues();
 
-//	if (selection == null)
-//	  inputComponent = new JTextField();
-//	else if (selection.length < 20)
-//	  inputComponent = new JComboBox(selection);
-	// FIXME: Uncomment when the widgets are done.
 	if (selection == null)
-	  inputComponent = null;
+          inputComponent = new JTextField(15);
+	else if (selection.length < 20)
+          inputComponent = new JComboBox(selection);
 	else
 	  inputComponent = new JList(selection);
 	if (inputComponent != null)
 	  {
 	    addMessageComponents(rightSide, con, inputComponent,
-	                         getMaxCharactersPerLineCount(), true);
+                                 getMaxCharactersPerLineCount(), false);
 	    resetSelectedValue();
 	    selectInitialValue(optionPane);
 	  }
@@ -910,7 +914,7 @@
    */
   protected Container createSeparator()
   {
-    return null;
+    return (Container) Box.createVerticalStrut(17);
   }
 
   /**
@@ -1127,6 +1131,7 @@
 	optionPane.add(button);
       }
 
+    optionPane.setBorder(BorderFactory.createEmptyBorder(12, 12, 11, 11));
     optionPane.invalidate();
   }
 
@@ -1238,8 +1243,9 @@
   /**
    * This method resets the value in the inputComponent to the
    * initialSelectionValue property.
+   * This is package-private to avoid an accessor method.
    */
-  private void resetSelectedValue()
+  void resetSelectedValue()
   {
     if (inputComponent != null)
       {
Index: libjava/javax/swing/plaf/basic/BasicPopupMenuUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicPopupMenuUI.java,v
retrieving revision 1.6
diff -u -r1.6 BasicPopupMenuUI.java
--- libjava/javax/swing/plaf/basic/BasicPopupMenuUI.java	30 Nov 2004 23:59:05 -0000	1.6
+++ libjava/javax/swing/plaf/basic/BasicPopupMenuUI.java	9 Jul 2005 22:10:14 -0000
@@ -1,5 +1,5 @@
 /* BasicPopupMenuUI.java
-   Copyright (C) 2002, 2004 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -37,18 +37,24 @@
 
 package javax.swing.plaf.basic;
 
+import java.awt.AWTEvent;
 import java.awt.Component;
 import java.awt.Container;
+import java.awt.Cursor;
 import java.awt.Dimension;
-import java.awt.GridBagLayout;
+import java.awt.Point;
 import java.awt.event.ComponentEvent;
 import java.awt.event.ComponentListener;
 import java.awt.event.MouseEvent;
 
+import javax.swing.BoxLayout;
 import javax.swing.JComponent;
+import javax.swing.JLayeredPane;
+import javax.swing.JMenu;
 import javax.swing.JPopupMenu;
 import javax.swing.MenuElement;
 import javax.swing.MenuSelectionManager;
+import javax.swing.RootPaneContainer;
 import javax.swing.SwingUtilities;
 import javax.swing.UIDefaults;
 import javax.swing.UIManager;
@@ -73,8 +79,9 @@
   /* PopupMenuListener listens to popup menu events fired by JPopupMenu*/
   private transient PopupMenuListener popupMenuListener;
 
-  /* ComponentListener listening to popupMenu's invoker. */
-  private TopWindowListener topWindowListener;
+  /* ComponentListener listening to popupMenu's invoker.
+   * This is package-private to avoid an accessor method.  */
+  TopWindowListener topWindowListener;
 
   /**
    * Creates a new BasicPopupMenuUI object.
@@ -82,7 +89,6 @@
   public BasicPopupMenuUI()
   {
     popupMenuListener = new PopupMenuHandler();
-    mouseInputListener = new MouseInputHandler();
     topWindowListener = new TopWindowListener();
   }
 
@@ -110,7 +116,7 @@
   {
     super.installUI(c);
     popupMenu = (JPopupMenu) c;
-    popupMenu.setLayout(new GridBagLayout());
+    popupMenu.setLayout(new DefaultMenuLayout(popupMenu, BoxLayout.Y_AXIS));
     popupMenu.setBorderPainted(true);
     JPopupMenu.setDefaultLightWeightPopupEnabled(true);
 
@@ -119,8 +125,8 @@
   }
 
   /**
-   * This method installs the defaults that are defined in  the Basic look and
-   * feel for this {@link JPopupMenu}.
+   * This method installs the defaults that are defined in  the Basic look
+   * and feel for this {@link JPopupMenu}.
    */
   public void installDefaults()
   {
@@ -138,8 +144,6 @@
    */
   protected void installListeners()
   {
-    popupMenu.addMouseListener(mouseInputListener);
-    popupMenu.addMouseMotionListener(mouseInputListener);
     popupMenu.addPopupMenuListener(popupMenuListener);
   }
 
@@ -182,8 +186,6 @@
    */
   protected void uninstallListeners()
   {
-    popupMenu.removeMouseListener(mouseInputListener);
-    popupMenu.removeMouseMotionListener(mouseInputListener);
     popupMenu.removePopupMenuListener(popupMenuListener);
   }
 
@@ -272,8 +274,26 @@
       // by the top - level window that this popup belongs to.
       Component invoker = popupMenu.getInvoker();
 
-      Container rootContainer = (Container) SwingUtilities.getRoot(invoker);
-      rootContainer.removeComponentListener(topWindowListener);
+      RootPaneContainer rootContainer = (RootPaneContainer) SwingUtilities
+                                        .getRoot(invoker);
+      ((Container) rootContainer).removeComponentListener(topWindowListener);
+
+      // If this popup menu is the last popup menu visible on the screen, then
+      // stop interrupting mouse events in the glass pane before hiding this 
+      // last popup menu.
+      boolean topLevelMenu = (popupMenu.getInvoker() instanceof JMenu)
+                             && ((JMenu) popupMenu.getInvoker())
+                                .isTopLevelMenu();
+
+      if (topLevelMenu || ! (popupMenu.getInvoker() instanceof MenuElement))
+        {
+          // set glass pane not to interrupt mouse events and remove
+	  // mouseInputListener
+	  Container glassPane = (Container) rootContainer.getGlassPane();
+	  glassPane.setVisible(false);
+	  glassPane.removeMouseListener(mouseInputListener);
+	  mouseInputListener = null;
+        }
     }
 
     /**
@@ -287,8 +307,20 @@
       // ComponentEvents fired by it. We need to cancel this popup menu
       // if topWindow to which this popup belongs was resized or moved.
       Component invoker = popupMenu.getInvoker();
-      Container rootContainer = (Container) SwingUtilities.getRoot(invoker);
-      rootContainer.addComponentListener(topWindowListener);
+      RootPaneContainer rootContainer = (RootPaneContainer) SwingUtilities
+                                        .getRoot(invoker);
+      ((Container) rootContainer).addComponentListener(topWindowListener);
+
+      // Set the glass pane to interrupt all mouse events originating in root 
+      // container
+      if (mouseInputListener == null)
+        {
+	  Container glassPane = (Container) rootContainer.getGlassPane();
+	  glassPane.setVisible(true);
+	  mouseInputListener = new MouseInputHandler(rootContainer);
+	  glassPane.addMouseListener(mouseInputListener);
+	  glassPane.addMouseMotionListener(mouseInputListener);
+        }
 
       // if this popup menu is a free floating popup menu,
       // then by default its first element should be always selected when
@@ -343,8 +375,8 @@
     }
 
     /**
-     * This method is invoked when top-level window is shown This method does
-     * nothing by default.
+     * This method is invoked when top-level window is shown This method
+     * does nothing by default.
      *
      * @param e The ComponentEvent
      */
@@ -367,34 +399,272 @@
     }
   }
 
+  /**
+   * MouseInputHandler listens to all mouse events originated in the root
+   * container. This class is responsible for closing menu hierarchy when the
+   * user presses mouse over any component that do not belong to the current 
+   * menu hierarchy. This is acomplished by interrupting all mouse event in 
+   * the glass pane and checking if other component was pressed while menu 
+   * was open, before redestributing events further to intended components
+   */
   private class MouseInputHandler implements MouseInputListener
   {
+    private JLayeredPane layeredPane;
+    private Container glassPane;
+    private Cursor nativeCursor;
+    private transient Component mouseEventTarget;
+    private transient Component pressedComponent;
+    private transient Component lastComponentEntered;
+    private transient int pressCount;
+
+    /**
+     * Creates a new MouseInputHandler object.
+     *
+     * @param c the top most root container
+     */
+    public MouseInputHandler(RootPaneContainer c)
+    {
+      layeredPane = c.getLayeredPane();
+      glassPane = (Container) c.getGlassPane();
+    }
+
+    /**
+     * Handles mouse clicked event
+     *
+     * @param e Mouse event
+     */
     public void mouseClicked(MouseEvent e)
     {
+      handleEvent(e);
     }
 
+    /**
+     * Handles mouseDragged event
+     *
+     * @param e MouseEvent
+     */
     public void mouseDragged(MouseEvent e)
     {
+      handleEvent(e);
     }
 
+    /**
+     * Handles mouseEntered event
+     *
+     * @param e MouseEvent
+     */
     public void mouseEntered(MouseEvent e)
     {
+      handleEvent(e);
     }
 
+    /**
+     * Handles mouseExited event
+     *
+     * @param e MouseEvent
+     */
     public void mouseExited(MouseEvent e)
     {
+      handleEvent(e);
     }
 
+    /**
+     * Handles mouse moved event
+     *
+     * @param e MouseEvent
+     */
     public void mouseMoved(MouseEvent e)
     {
+      handleEvent(e);
     }
 
+    /**
+     * Handles mouse pressed event
+     *
+     * @param e MouseEvent
+     */
     public void mousePressed(MouseEvent e)
     {
+      handleEvent(e);
     }
 
+    /**
+     * Handles mouse released event
+     *
+     * @param e MouseEvent
+     */
     public void mouseReleased(MouseEvent e)
     {
+      handleEvent(e);
+    }
+
+    /*
+     * This method determines component that was intended to received mouse
+     * event, before it was interrupted within the glass pane. This method
+     * also redispatches mouse entered and mouse exited events to the
+     * appropriate components. This code is slightly modified code from
+     * Container.LightweightDispatcher class, which is private inside
+     * Container class and cannot be used here.
+     */
+    public void acquireComponentForMouseEvent(MouseEvent me)
+    {
+      int x = me.getX();
+      int y = me.getY();
+
+      // Find the candidate which should receive this event.
+      Component parent = layeredPane;
+      Component candidate = null;
+      Point p = me.getPoint();
+      while ((candidate == null) && (parent != null))
+        {
+	  p = SwingUtilities.convertPoint(glassPane, p.x, p.y, parent);
+	  candidate = SwingUtilities.getDeepestComponentAt(parent, p.x, p.y);
+
+	  if (candidate == null)
+	    {
+	      p = SwingUtilities.convertPoint(parent, p.x, p.y,
+	                                      parent.getParent());
+	      parent = parent.getParent();
+	    }
+        }
+
+      // If the only candidate we found was the native container itself,
+      // don't dispatch any event at all.  We only care about the lightweight
+      // children here.
+      if (candidate == layeredPane)
+	candidate = null;
+
+      // If our candidate is new, inform the old target we're leaving.
+      if ((lastComponentEntered != null) && lastComponentEntered.isShowing()
+          && (lastComponentEntered != candidate))
+        {
+	  // Old candidate could have been removed from 
+	  // the layeredPane so we check first.
+	  if (SwingUtilities.isDescendingFrom(lastComponentEntered, layeredPane))
+	    {
+	      Point tp = SwingUtilities.convertPoint(layeredPane, x, y,
+	                                             lastComponentEntered);
+	      MouseEvent exited = new MouseEvent(lastComponentEntered,
+	                                         MouseEvent.MOUSE_EXITED,
+	                                         me.getWhen(),
+	                                         me.getModifiersEx(), tp.x,
+	                                         tp.y, me.getClickCount(),
+	                                         me.isPopupTrigger(),
+	                                         me.getButton());
+
+	      lastComponentEntered.dispatchEvent(exited);
+	    }
+
+	  lastComponentEntered = null;
+        }
+
+      // If we have a candidate, maybe enter it.
+      if (candidate != null)
+        {
+	  mouseEventTarget = candidate;
+
+	  if (candidate.isLightweight() && candidate.isShowing()
+	      && (candidate != layeredPane)
+	      && (candidate != lastComponentEntered))
+	    {
+	      lastComponentEntered = mouseEventTarget;
+
+	      Point cp = SwingUtilities.convertPoint(layeredPane, x, y,
+	                                             lastComponentEntered);
+	      MouseEvent entered = new MouseEvent(lastComponentEntered,
+	                                          MouseEvent.MOUSE_ENTERED,
+	                                          me.getWhen(),
+	                                          me.getModifiersEx(), cp.x,
+	                                          cp.y, me.getClickCount(),
+	                                          me.isPopupTrigger(),
+	                                          me.getButton());
+	      lastComponentEntered.dispatchEvent(entered);
+	    }
+        }
+
+      if ((me.getID() == MouseEvent.MOUSE_RELEASED)
+          || ((me.getID() == MouseEvent.MOUSE_PRESSED) && (pressCount > 0))
+          || (me.getID() == MouseEvent.MOUSE_DRAGGED))
+        {
+	  // If any of the following events occur while a button is held down,
+	  // they should be dispatched to the same component to which the
+	  // original MOUSE_PRESSED event was dispatched:
+	  //   - MOUSE_RELEASED
+	  //   - MOUSE_PRESSED: another button pressed while the first is held down
+	  //   - MOUSE_DRAGGED
+	  if (SwingUtilities.isDescendingFrom(pressedComponent, layeredPane))
+	    mouseEventTarget = pressedComponent;
+	  else if (me.getID() == MouseEvent.MOUSE_CLICKED)
+	    {
+	      // Don't dispatch CLICKED events whose target is not the same as the
+	      // target for the original PRESSED event.
+	      if (candidate != pressedComponent)
+		mouseEventTarget = null;
+	      else if (pressCount == 0)
+		pressedComponent = null;
+	    }
+        }
+    }
+
+    /*
+     * This method handles mouse events interrupted by glassPane. It
+     * redispatches the mouse events appropriately to the intended components.
+     * The code in this method is also taken from
+     * Container.LightweightDispatcher class. The code is slightly modified
+     * to handle the case when mouse is released over non-menu component. In
+     * this case this method closes current menu hierarchy before 
+     * redispatching the event further.
+     */
+    public void handleEvent(AWTEvent e)
+    {
+      if (e instanceof MouseEvent)
+        {
+	  MouseEvent me = (MouseEvent) e;
+
+	  acquireComponentForMouseEvent(me);
+
+	  // Avoid dispatching ENTERED and EXITED events twice.
+	  if (mouseEventTarget != null && mouseEventTarget.isShowing()
+	      && (e.getID() != MouseEvent.MOUSE_ENTERED)
+	      && (e.getID() != MouseEvent.MOUSE_EXITED))
+	    {
+	      MouseEvent newEvt = SwingUtilities.convertMouseEvent(glassPane,
+	                                                           me,
+	                                                           mouseEventTarget);
+
+	      mouseEventTarget.dispatchEvent(newEvt);
+
+	      // If mouse was clicked over the component that is not part 
+	      // of menu hierarchy,then must close the menu hierarchy */
+	      if (e.getID() == MouseEvent.MOUSE_RELEASED)
+	        {
+		  boolean partOfMenuHierarchy = false;
+		  MenuSelectionManager manager = MenuSelectionManager
+		                                 .defaultManager();
+
+		  partOfMenuHierarchy = manager.isComponentPartOfCurrentMenu(mouseEventTarget);
+
+		  if (! partOfMenuHierarchy)
+		    manager.clearSelectedPath();
+	        }
+
+	      switch (e.getID())
+	        {
+		case MouseEvent.MOUSE_PRESSED:
+		  if (pressCount++ == 0)
+		    pressedComponent = mouseEventTarget;
+		  break;
+		case MouseEvent.MOUSE_RELEASED:
+		  // Clear our memory of the original PRESSED event, only if
+		  // we're not expecting a CLICKED event after this. If
+		  // there is a CLICKED event after this, it will do clean up.
+		  if ((--pressCount == 0)
+		      && (mouseEventTarget != pressedComponent))
+		    pressedComponent = null;
+		  break;
+	        }
+	    }
+        }
     }
   }
 }
Index: libjava/javax/swing/plaf/basic/BasicProgressBarUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicProgressBarUI.java,v
retrieving revision 1.8
diff -u -r1.8 BasicProgressBarUI.java
--- libjava/javax/swing/plaf/basic/BasicProgressBarUI.java	16 Feb 2005 20:02:55 -0000	1.8
+++ libjava/javax/swing/plaf/basic/BasicProgressBarUI.java	9 Jul 2005 22:10:14 -0000
@@ -48,6 +48,9 @@
 import java.awt.Rectangle;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
+import java.awt.font.FontRenderContext;
+import java.awt.geom.AffineTransform;
+import java.awt.geom.Rectangle2D;
 import java.beans.PropertyChangeEvent;
 import java.beans.PropertyChangeListener;
 
@@ -72,8 +75,12 @@
   /**
    * A helper class that listens for ChangeEvents 
    * from the progressBar's model.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
-  protected class ChangeHandler implements ChangeListener
+  public class ChangeHandler implements ChangeListener
   {
     /**
      * Called every time the state of the model changes.
@@ -381,16 +388,16 @@
   {
     // The only thing we need to worry about is
     // the text size.
-    Graphics g = progressBar.getGraphics();
-
     Insets insets = c.getInsets();
 
-    FontMetrics fm = g.getFontMetrics(c.getFont());
-
-    int textW = fm.stringWidth(progressBar.getString());
-    int textH = fm.getHeight();
-
-    g.dispose();
+    // make a fontrenderer context so that we can make assumptions about
+    // the string bounds
+    FontRenderContext ctx = new FontRenderContext(new AffineTransform(),
+                                                  false, false);
+    Rectangle2D bounds = c.getFont().getStringBounds(progressBar.getString(),
+                                                     ctx);
+    int textW = (int) bounds.getWidth();
+    int textH = (int) bounds.getHeight();
 
     if (progressBar.getOrientation() == JProgressBar.HORIZONTAL)
       {
@@ -489,11 +496,6 @@
       paintDeterminate(g, c);
     else
       paintIndeterminate(g, c);
-      
-    if (progressBar.isBorderPainted())
-      progressBar.getBorder().paintBorder(progressBar, g, 0, 0,
-                                          progressBar.getWidth(),
-					  progressBar.getHeight());
   }
 
   /**
Index: libjava/javax/swing/plaf/basic/BasicScrollBarUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicScrollBarUI.java,v
retrieving revision 1.10
diff -u -r1.10 BasicScrollBarUI.java
--- libjava/javax/swing/plaf/basic/BasicScrollBarUI.java	16 Feb 2005 20:02:56 -0000	1.10
+++ libjava/javax/swing/plaf/basic/BasicScrollBarUI.java	9 Jul 2005 22:10:14 -0000
@@ -152,8 +152,18 @@
         {
 	  incrButton.removeMouseListener(buttonListener);
 	  decrButton.removeMouseListener(buttonListener);
-	  incrButton = createIncreaseButton(scrollbar.getOrientation());
-	  decrButton = createDecreaseButton(scrollbar.getOrientation());
+          int orientation = scrollbar.getOrientation();
+          switch (orientation)
+            {
+            case (JScrollBar.HORIZONTAL):
+              incrButton = createIncreaseButton(EAST);
+              decrButton = createDecreaseButton(WEST);
+              break;
+            default:
+              incrButton = createIncreaseButton(SOUTH);
+              decrButton = createDecreaseButton(NORTH);
+              break;
+            }
 	  incrButton.addMouseListener(buttonListener);
 	  decrButton.addMouseListener(buttonListener);
 	  calculatePreferredSize();
@@ -489,7 +499,7 @@
     thumbColor = defaults.getColor("ScrollBar.thumb");
     thumbHighlightColor = defaults.getColor("ScrollBar.thumbHighlight");
     thumbDarkShadowColor = defaults.getColor("ScrollBar.thumbDarkShadow");
-    thumbLightShadowColor = defaults.getColor("ScrollBar.thumbLightShadow");
+    thumbLightShadowColor = defaults.getColor("ScrollBar.thumbShadow");
   }
 
   /**
@@ -513,16 +523,9 @@
   protected JButton createIncreaseButton(int orientation)
   {
     if (incrButton == null)
-      incrButton = new BasicArrowButton((orientation == SwingConstants.HORIZONTAL)
-                                        ? SwingConstants.EAST
-                                        : SwingConstants.SOUTH);
+      incrButton = new BasicArrowButton(orientation);
     else
-      {
-	if (orientation == SwingConstants.HORIZONTAL)
-	  ((BasicArrowButton) incrButton).setDirection(SwingConstants.EAST);
-	else
-	  ((BasicArrowButton) incrButton).setDirection(SwingConstants.SOUTH);
-      }
+      ((BasicArrowButton) incrButton).setDirection(orientation);
     return incrButton;
   }
 
@@ -537,16 +540,9 @@
   protected JButton createDecreaseButton(int orientation)
   {
     if (decrButton == null)
-      decrButton = new BasicArrowButton((orientation == SwingConstants.HORIZONTAL)
-                                        ? SwingConstants.WEST
-                                        : SwingConstants.NORTH);
+      decrButton = new BasicArrowButton(orientation);
     else
-      {
-	if (orientation == SwingConstants.HORIZONTAL)
-	  ((BasicArrowButton) decrButton).setDirection(SwingConstants.WEST);
-	else
-	  ((BasicArrowButton) decrButton).setDirection(SwingConstants.NORTH);
-      }
+      ((BasicArrowButton) decrButton).setDirection(orientation);
     return decrButton;
   }
 
@@ -649,8 +645,9 @@
   /**
    * This method calculates the preferred size since calling
    * getPreferredSize() returns a cached value.
+   * This is package-private to avoid an accessor method.
    */
-  private void calculatePreferredSize()
+  void calculatePreferredSize()
   {
     // System.err.println(this + ".calculatePreferredSize()");
     int height;
@@ -746,7 +743,8 @@
 	thumbRect.x += (value - min) * trackRect.width / (max - min);
 	thumbRect.y = trackRect.y;
 
-	thumbRect.width = extent * trackRect.width / (max - min);
+	thumbRect.width = Math.max(extent * trackRect.width / (max - min),
+                                   getMinimumThumbSize().width);
 	thumbRect.height = trackRect.height;
       }
     else
@@ -755,7 +753,8 @@
 	thumbRect.y = trackRect.y + value * trackRect.height / (max - min);
 
 	thumbRect.width = trackRect.width;
-	thumbRect.height = extent * trackRect.height / (max - min);
+	thumbRect.height = Math.max(extent * trackRect.height / (max - min),
+                                    getMinimumThumbSize().height);
       }
     return thumbRect;
   }
@@ -793,9 +792,19 @@
    */
   protected void installComponents()
   {
-    incrButton = createIncreaseButton(scrollbar.getOrientation());
+    int orientation = scrollbar.getOrientation();
+    switch (orientation)
+      {
+      case (JScrollBar.HORIZONTAL):
+        incrButton = createIncreaseButton(EAST);
+        decrButton = createDecreaseButton(WEST);
+        break;
+      default:
+        incrButton = createIncreaseButton(SOUTH);
+        decrButton = createDecreaseButton(NORTH);
+        break;
+      }
     scrollbar.add(incrButton);
-    decrButton = createDecreaseButton(scrollbar.getOrientation());
     scrollbar.add(decrButton);
   }
 
@@ -812,6 +821,11 @@
     scrollbar.setBorder(defaults.getBorder("ScrollBar.border"));
     scrollbar.setOpaque(true);
 
+    thumbColor = defaults.getColor("ScrollBar.thumb");
+    thumbDarkShadowColor = defaults.getColor("ScrollBar.thumbDarkShadow");
+    thumbHighlightColor = defaults.getColor("ScrollBar.thumbHighlight");
+    thumbLightShadowColor = defaults.getColor("ScrollBar.thumbShadow");
+
     maximumThumbSize = defaults.getDimension("ScrollBar.maximumThumbSize");
     minimumThumbSize = defaults.getDimension("ScrollBar.minimumThumbSize");
   }
@@ -869,9 +883,9 @@
 	scrollTimer.setRepeats(true);
 
 	installComponents();
-	installListeners();
 	installDefaults();
 	configureScrollBarColors();
+	installListeners();
 
 	calculatePreferredSize();
 	layoutContainer(scrollbar);
@@ -1022,53 +1036,15 @@
    */
   protected void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds)
   {
-    Color saved = g.getColor();
-    Point x;
-    Point y;
-    Point z;
-    Polygon lines;
-
-    g.setColor(thumbHighlightColor);
-    x = new Point(thumbBounds.x + 1, thumbBounds.y + 1);
-    y = new Point(x);
-    y.translate(thumbBounds.width - 2, 0);
-    z = new Point(x);
-    z.translate(0, thumbBounds.height - 2);
-
-    lines = new Polygon(new int[] { x.x, y.x, z.x },
-                        new int[] { x.y, y.y, z.y }, 3);
-
-    g.drawPolygon(lines);
-
-    g.setColor(thumbLightShadowColor);
-    x = new Point(thumbBounds.x + thumbBounds.width - 1,
-                  thumbBounds.y + thumbBounds.height - 1);
-    y = new Point(x);
-    y.translate(-(thumbBounds.width - 2), 0);
-    z = new Point(x);
-    z.translate(0, -(thumbBounds.height - 2));
-
-    lines = new Polygon(new int[] { x.x, y.x, z.x },
-                        new int[] { x.y, y.y, z.y }, 3);
-    g.drawPolygon(lines);
-
-    g.setColor(thumbDarkShadowColor);
-    x = new Point(thumbBounds.x + thumbBounds.width,
-                  thumbBounds.y + thumbBounds.height);
-    y = new Point(x);
-    y.translate(-thumbBounds.width, 0);
-    z = new Point(x);
-    z.translate(0, -thumbBounds.height);
-
-    lines = new Polygon(new int[] { x.x, y.x, z.x },
-                        new int[] { x.y, y.y, z.y }, 3);
-    g.drawPolygon(lines);
-
     g.setColor(thumbColor);
     g.fillRect(thumbBounds.x, thumbBounds.y, thumbBounds.width,
                thumbBounds.height);
 
-    g.setColor(saved);
+    BasicGraphicsUtils.drawBezel(g, thumbBounds.x, thumbBounds.y,
+                                 thumbBounds.width, thumbBounds.height,
+                                 false, false, thumbDarkShadowColor,
+                                 thumbDarkShadowColor, thumbHighlightColor,
+                                 thumbHighlightColor);
   }
 
   /**
@@ -1237,12 +1213,13 @@
    * This method returns the value in the scrollbar's range given the y
    * coordinate. If the value is out of range, it will return the closest
    * legal value.
+   * This is package-private to avoid an accessor method.
    *
    * @param yPos The y coordinate to calculate a value for.
    *
    * @return The value for the y coordinate.
    */
-  private int valueForYPosition(int yPos)
+  int valueForYPosition(int yPos)
   {
     int min = scrollbar.getMinimum();
     int max = scrollbar.getMaximum();
@@ -1269,12 +1246,13 @@
    * This method returns the value in the scrollbar's range given the x
    * coordinate. If the value is out of range, it will return the closest
    * legal value.
+   * This is package-private to avoid an accessor method.
    *
    * @param xPos The x coordinate to calculate a value for.
    *
    * @return The value for the x coordinate.
    */
-  private int valueForXPosition(int xPos)
+  int valueForXPosition(int xPos)
   {
     int min = scrollbar.getMinimum();
     int max = scrollbar.getMaximum();
Index: libjava/javax/swing/plaf/basic/BasicScrollPaneUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicScrollPaneUI.java,v
retrieving revision 1.7
diff -u -r1.7 BasicScrollPaneUI.java
--- libjava/javax/swing/plaf/basic/BasicScrollPaneUI.java	16 Feb 2005 20:02:57 -0000	1.7
+++ libjava/javax/swing/plaf/basic/BasicScrollPaneUI.java	9 Jul 2005 22:10:14 -0000
@@ -1,5 +1,5 @@
 /* BasicScrollPaneUI.java
-   Copyright (C) 2002, 2004 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -53,7 +53,10 @@
 public class BasicScrollPaneUI extends ScrollPaneUI
   implements ScrollPaneConstants
 {
-  
+
+  /** The Scrollpane for which the UI is provided by this class. */
+  protected JScrollPane scrollpane;
+
   public static ComponentUI createUI(final JComponent c) 
   {
     return new BasicScrollPaneUI();
@@ -61,6 +64,7 @@
 
   protected void installDefaults(JScrollPane p)
   {
+    scrollpane = p;
     UIDefaults defaults = UIManager.getLookAndFeelDefaults();
     p.setForeground(defaults.getColor("ScrollPane.foreground"));
     p.setBackground(defaults.getColor("ScrollPane.background"));
@@ -75,6 +79,7 @@
     p.setBackground(null);
     p.setFont(null);
     p.setBorder(null);
+    scrollpane = null;
   }
     
   public void installUI(final JComponent c) 
Index: libjava/javax/swing/plaf/basic/BasicSliderUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicSliderUI.java,v
retrieving revision 1.9
diff -u -r1.9 BasicSliderUI.java
--- libjava/javax/swing/plaf/basic/BasicSliderUI.java	16 Feb 2005 20:02:57 -0000	1.9
+++ libjava/javax/swing/plaf/basic/BasicSliderUI.java	9 Jul 2005 22:10:14 -0000
@@ -138,6 +138,10 @@
 {
   /**
    * Helper class that listens to the {@link JSlider}'s model for changes.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class ChangeHandler implements ChangeListener
   {
@@ -160,8 +164,12 @@
 
   /**
    * Helper class that listens for resize events.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
-  protected class ComponentHandler extends ComponentAdapter
+  public class ComponentHandler extends ComponentAdapter
   {
     /**
      * Called when the size of the component changes. The UI delegate should
@@ -181,6 +189,10 @@
 
   /**
    * Helper class that listens for focus events.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class FocusHandler implements FocusListener
   {
@@ -246,6 +258,10 @@
    * Helper class that listens to our swing timer. This class is responsible
    * for listening to the timer and moving the thumb in the proper direction
    * every interval.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class ScrollListener implements ActionListener
   {
@@ -320,6 +336,10 @@
 
   /**
    * Helper class that listens for mouse events.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class TrackListener extends MouseInputAdapter
   {
@@ -2158,12 +2178,13 @@
 
   /**
    * This method finds the closest value that has a tick associated with it.
+   * This is package-private to avoid an accessor method.
    *
    * @param value The value to search from.
    *
    * @return The closest value that has a tick associated with it.
    */
-  private int findClosestTick(int value)
+  int findClosestTick(int value)
   {
     int min = slider.getMinimum();
     int max = slider.getMaximum();
Index: libjava/javax/swing/plaf/basic/BasicSplitPaneDivider.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicSplitPaneDivider.java,v
retrieving revision 1.6
diff -u -r1.6 BasicSplitPaneDivider.java
--- libjava/javax/swing/plaf/basic/BasicSplitPaneDivider.java	16 Feb 2005 20:02:57 -0000	1.6
+++ libjava/javax/swing/plaf/basic/BasicSplitPaneDivider.java	9 Jul 2005 22:10:15 -0000
@@ -1,5 +1,5 @@
 /* BasicSplitPaneDivider.java --
-   Copyright (C) 2003, 2004 Free Software Foundation, Inc.
+   Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -157,8 +157,9 @@
   /**
    * Keeps track of where the divider should be placed when using one touch
    * expand buttons.
+   * This is package-private to avoid an accessor method.
    */
-  private transient int currentDividerLocation = 1;
+  transient int currentDividerLocation = 1;
 
   /** DOCUMENT ME! */
   private transient Border tmpBorder = new Border()
@@ -493,10 +494,11 @@
    * using one touch expand buttons. Location 0 is the left (or top) most
    * location. Location 1 is the middle. Location 2 is the right (or bottom)
    * most location.
+   * This is package-private to avoid an accessor method.
    *
    * @param locationIndex The location to move to.
    */
-  private void moveDividerTo(int locationIndex)
+  void moveDividerTo(int locationIndex)
   {
     Insets insets = splitPane.getInsets();
     switch (locationIndex)
Index: libjava/javax/swing/plaf/basic/BasicSplitPaneUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicSplitPaneUI.java,v
retrieving revision 1.4
diff -u -r1.4 BasicSplitPaneUI.java
--- libjava/javax/swing/plaf/basic/BasicSplitPaneUI.java	30 Nov 2004 23:59:06 -0000	1.4
+++ libjava/javax/swing/plaf/basic/BasicSplitPaneUI.java	9 Jul 2005 22:10:15 -0000
@@ -1,5 +1,5 @@
 /* BasicSplitPaneUI.java --
-   Copyright (C) 2003, 2004 Free Software Foundation, Inc.
+   Copyright (C) 2003, 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -71,8 +71,12 @@
   /**
    * This Layout Manager controls the position and size of the components when
    * the JSplitPane's orientation is HORIZONTAL_SPLIT.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
-  protected class BasicHorizontalLayoutManager implements LayoutManager2
+  public class BasicHorizontalLayoutManager implements LayoutManager2
   {
     // 3 components at a time.
     // LEFT/TOP = 0
@@ -344,7 +348,7 @@
 		    height = Math.max(height, dims.height);
 	        }
 	    }
-	  return new Dimension(500, 500); //width, height);	
+	  return new Dimension(width, height);	
         }
       return null;
     }
@@ -485,8 +489,12 @@
   /**
    * This class is the Layout Manager for the JSplitPane when the orientation
    * is VERTICAL_SPLIT.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
-  protected class BasicVerticalLayoutManager
+  public class BasicVerticalLayoutManager
     extends BasicHorizontalLayoutManager
   {
     /**
@@ -605,7 +613,7 @@
 		  width = Math.max(width, dims.width);
 	        }
 	    }
-	  return new Dimension(500, 500); //width, height);
+	  return new Dimension(width, height);
         }
       return null;
     }
@@ -653,8 +661,12 @@
 
   /**
    * This class handles FocusEvents from the JComponent.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
-  protected class FocusHandler extends FocusAdapter
+  public class FocusHandler extends FocusAdapter
   {
     /**
      * This method is called when the JSplitPane gains focus.
@@ -680,6 +692,10 @@
   /**
    * This is a deprecated class. It is supposed to be used for handling down
    * and right key presses.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class KeyboardDownRightHandler implements ActionListener
   {
@@ -697,6 +713,10 @@
   /**
    * This is a deprecated class. It is supposed to be used for handling end
    * key presses.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class KeyboardEndHandler implements ActionListener
   {
@@ -714,6 +734,10 @@
   /**
    * This is a deprecated class. It is supposed to be used for handling home
    * key presses.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class KeyboardHomeHandler implements ActionListener
   {
@@ -731,6 +755,10 @@
   /**
    * This is a deprecated class. It is supposed to be used for handling resize
    * toggles.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class KeyboardResizeToggleHandler implements ActionListener
   {
@@ -748,6 +776,10 @@
   /**
    * This is a deprecated class. It is supposed to be used for handler up and
    * left key presses.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class KeyboardUpLeftHandler implements ActionListener
   {
@@ -765,6 +797,10 @@
   /**
    * This helper class handles PropertyChangeEvents from the JSplitPane. When
    * a property changes, this will update the UI accordingly.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class PropertyHandler implements PropertyChangeListener
   {
@@ -954,8 +990,8 @@
    */
   protected void installDefaults()
   {
-    resetLayoutManager();
     divider = createDefaultDivider();
+    resetLayoutManager();
     nonContinuousLayoutDivider = createDefaultNonContinuousLayoutDivider();
     splitPane.add(divider, JSplitPane.DIVIDER);
 
@@ -1348,7 +1384,6 @@
    */
   public void paint(Graphics g, JComponent jc)
   {
-    // Do nothing. All the painting is handled by children.
   }
 
   /**
@@ -1409,9 +1444,8 @@
       layoutManager = new BasicHorizontalLayoutManager();
     else
       layoutManager = new BasicVerticalLayoutManager();
-    layoutManager.invalidateLayout(splitPane);
-    layoutManager.updateComponents();
     getSplitPane().setLayout(layoutManager);
+    layoutManager.updateComponents();
 
     // invalidating by itself does not invalidate the layout.
     getSplitPane().revalidate();
Index: libjava/javax/swing/plaf/basic/BasicTabbedPaneUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicTabbedPaneUI.java,v
retrieving revision 1.11
diff -u -r1.11 BasicTabbedPaneUI.java
--- libjava/javax/swing/plaf/basic/BasicTabbedPaneUI.java	16 Feb 2005 20:02:58 -0000	1.11
+++ libjava/javax/swing/plaf/basic/BasicTabbedPaneUI.java	9 Jul 2005 22:10:16 -0000
@@ -83,6 +83,10 @@
 {
   /**
    * A helper class that handles focus.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class FocusHandler extends FocusAdapter
   {
@@ -111,6 +115,10 @@
    * A helper class for determining if mouse presses occur inside tabs and
    * sets the index appropriately. In SCROLL_TAB_MODE, this class also
    * handles the mouse clicks on the scrolling buttons.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class MouseHandler extends MouseAdapter
   {
@@ -173,6 +181,10 @@
 
   /**
    * This class handles PropertyChangeEvents fired from the JTabbedPane.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class PropertyChangeHandler implements PropertyChangeListener
   {
@@ -205,8 +217,12 @@
    * A LayoutManager responsible for placing all the tabs and the visible
    * component inside the JTabbedPane. This class is only used for
    * WRAP_TAB_LAYOUT.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
-  protected class TabbedPaneLayout implements LayoutManager
+  public class TabbedPaneLayout implements LayoutManager
   {
     /**
      * This method is called when a component is added to the JTabbedPane.
@@ -1101,6 +1117,10 @@
 
   /**
    * This class handles ChangeEvents from the JTabbedPane.
+   *
+   * @specnote Apparently this class was intended to be protected,
+   *           but was made public by a compiler bug and is now
+   *           public for compatibility.
    */
   public class TabSelectionHandler implements ChangeListener
   {
@@ -1168,8 +1188,7 @@
    * This is a helper class that implements UIResource so it is not added as a
    * tab when an object of this class is added to the JTabbedPane.
    */
-  private static class ScrollingButton extends BasicArrowButton
-    implements UIResource
+  private class ScrollingButton extends BasicArrowButton implements UIResource
   {
     /**
      * Creates a ScrollingButton given the direction.
@@ -1182,20 +1201,25 @@
     }
   }
 
-  /** The button that increments the current scroll location. */
-  private transient ScrollingButton incrButton;
-
-  /** The button that decrements the current scroll location. */
-  private transient ScrollingButton decrButton;
-
-  /** The viewport used to display the tabs. */
-  private transient ScrollingViewport viewport;
-
-  /** The panel inside the viewport that paints the tabs. */
-  private transient ScrollingPanel panel;
-
-  /** The starting visible tab in the run in SCROLL_TAB_MODE. */
-  private transient int currentScrollLocation;
+  /** The button that increments the current scroll location.
+   * This is package-private to avoid an accessor method.  */
+  transient ScrollingButton incrButton;
+
+  /** The button that decrements the current scroll location.
+   * This is package-private to avoid an accessor method.  */
+  transient ScrollingButton decrButton;
+
+  /** The viewport used to display the tabs.
+   * This is package-private to avoid an accessor method.  */
+  transient ScrollingViewport viewport;
+
+  /** The panel inside the viewport that paints the tabs.
+   * This is package-private to avoid an accessor method.  */
+  transient ScrollingPanel panel;
+
+  /** The starting visible tab in the run in SCROLL_TAB_MODE.
+   * This is package-private to avoid an accessor method.  */
+  transient int currentScrollLocation;
 
   /** A reusable rectangle. */
   protected Rectangle calcRect;
@@ -1306,14 +1330,17 @@
   /** The tab pane that this UI paints. */
   protected JTabbedPane tabPane;
 
-  /** The current layout manager for the tabPane. */
-  private transient LayoutManager layoutManager;
-
-  /** The rectangle that describes the tab area's position and size. */
-  private transient Rectangle tabAreaRect;
-
-  /** The rectangle that describes the content area's position and size. */
-  private transient Rectangle contentRect;
+  /** The current layout manager for the tabPane.
+   * This is package-private to avoid an accessor method.  */
+  transient LayoutManager layoutManager;
+
+  /** The rectangle that describes the tab area's position and size.
+   * This is package-private to avoid an accessor method.  */
+  transient Rectangle tabAreaRect;
+
+  /** The rectangle that describes the content area's position and
+   * size.  This is package-private to avoid an accessor method.  */
+  transient Rectangle contentRect;
 
   /**
    * Creates a new BasicTabbedPaneUI object.
@@ -1326,10 +1353,11 @@
   /**
    * This method creates a ScrollingButton that  points in the appropriate
    * direction for an increasing button.
+   * This is package-private to avoid an accessor method.
    *
    * @return The increase ScrollingButton.
    */
-  private ScrollingButton createIncreaseButton()
+  ScrollingButton createIncreaseButton()
   {
     if (incrButton == null)
       incrButton = new ScrollingButton(SwingConstants.NORTH);
@@ -1344,10 +1372,11 @@
   /**
    * This method creates a ScrollingButton that points in the appropriate
    * direction for a decreasing button.
+   * This is package-private to avoid an accessor method.
    *
    * @return The decrease ScrollingButton.
    */
-  private ScrollingButton createDecreaseButton()
+  ScrollingButton createDecreaseButton()
   {
     if (decrButton == null)
       decrButton = new ScrollingButton(SwingConstants.SOUTH);
@@ -1362,12 +1391,13 @@
   /**
    * This method finds the point to set the view  position at given the index
    * of a tab. The tab will be the first visible tab in the run.
+   * This is package-private to avoid an accessor method.
    *
    * @param index The index of the first visible tab.
    *
    * @return The position of the first visible tab.
    */
-  private Point findPointForIndex(int index)
+  Point findPointForIndex(int index)
   {
     int tabPlacement = tabPane.getTabPlacement();
     int selectedIndex = tabPane.getSelectedIndex();
@@ -1682,7 +1712,7 @@
    */
   public Dimension getMaximumSize(JComponent c)
   {
-    return getPreferredSize(c);
+    return new Dimension(Short.MAX_VALUE, Short.MAX_VALUE);
   }
 
   /**
Index: libjava/javax/swing/plaf/basic/BasicTableUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicTableUI.java,v
retrieving revision 1.4
diff -u -r1.4 BasicTableUI.java
--- libjava/javax/swing/plaf/basic/BasicTableUI.java	16 Feb 2005 20:02:59 -0000	1.4
+++ libjava/javax/swing/plaf/basic/BasicTableUI.java	9 Jul 2005 22:10:16 -0000
@@ -209,12 +209,22 @@
 
   protected void uninstallDefaults() 
   {
-    table.setFont(null);
-    table.setGridColor(null);
-    table.setForeground(null);
-    table.setBackground(null);
-    table.setSelectionForeground(null);
-    table.setSelectionBackground(null);
+    // TODO: this method used to do the following which is not
+    // quite right (at least it breaks apps that run fine with the
+    // JDK):
+    //
+    // table.setFont(null);
+    // table.setGridColor(null);
+    // table.setForeground(null);
+    // table.setBackground(null);
+    // table.setSelectionForeground(null);
+    // table.setSelectionBackground(null);
+    //
+    // This would leave the component in a corrupt state, which is
+    // not acceptable. A possible solution would be to have component
+    // level defaults installed, that get overridden by the UI defaults
+    // and get restored in this method. I am not quite sure about this
+    // though. / Roman Kennke
   }
 
   protected void uninstallKeyboardActions() 
Index: libjava/javax/swing/plaf/basic/BasicTextUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicTextUI.java,v
retrieving revision 1.9
diff -u -r1.9 BasicTextUI.java
--- libjava/javax/swing/plaf/basic/BasicTextUI.java	16 Feb 2005 20:03:00 -0000	1.9
+++ libjava/javax/swing/plaf/basic/BasicTextUI.java	9 Jul 2005 22:10:16 -0000
@@ -57,6 +57,9 @@
 import javax.swing.SwingUtilities;
 import javax.swing.UIDefaults;
 import javax.swing.UIManager;
+import javax.swing.event.DocumentEvent;
+import javax.swing.event.DocumentListener;
+import javax.swing.plaf.ActionMapUIResource;
 import javax.swing.plaf.TextUI;
 import javax.swing.plaf.UIResource;
 import javax.swing.text.BadLocationException;
@@ -150,6 +153,45 @@
       
       return ((PlainView) view).modelToView(position, a, bias).getBounds();
     }
+
+    /**
+     * Notification about text insertions. These are forwarded to the
+     * real root view.
+     *
+     * @param ev the DocumentEvent describing the change
+     * @param shape the current allocation of the view's display
+     * @param vf the ViewFactory to use for creating new Views
+     */
+    public void insertUpdate(DocumentEvent ev, Shape shape, ViewFactory vf)
+    {
+      view.insertUpdate(ev, shape, vf);
+    }
+
+    /**
+     * Notification about text removals. These are forwarded to the
+     * real root view.
+     *
+     * @param ev the DocumentEvent describing the change
+     * @param shape the current allocation of the view's display
+     * @param vf the ViewFactory to use for creating new Views
+     */
+    public void removeUpdate(DocumentEvent ev, Shape shape, ViewFactory vf)
+    {
+      view.removeUpdate(ev, shape, vf);
+    }
+
+    /**
+     * Notification about text changes. These are forwarded to the
+     * real root view.
+     *
+     * @param ev the DocumentEvent describing the change
+     * @param shape the current allocation of the view's display
+     * @param vf the ViewFactory to use for creating new Views
+     */
+    public void changedUpdate(DocumentEvent ev, Shape shape, ViewFactory vf)
+    {
+      view.changedUpdate(ev, shape, vf);
+    }
   }
 
   class UpdateHandler implements PropertyChangeListener
@@ -163,13 +205,61 @@
 	}
     }
   }
-  
+
+  /**
+   * Listens for changes on the underlying model and forwards notifications
+   * to the View.
+   *
+   * TODO: Maybe this should somehow be handled through EditorKits
+   */
+  class DocumentHandler implements DocumentListener
+  {
+    /**
+     * Notification about a document change event.
+     *
+     * @param ev the DocumentEvent describing the change
+     */
+    public void changedUpdate(DocumentEvent ev)
+    {
+      Dimension size = textComponent.getSize();
+      rootView.changedUpdate(ev, new Rectangle(0, 0, size.width, size.height),
+                             BasicTextUI.this);
+    }
+    
+    /**
+     * Notification about a document insert event.
+     *
+     * @param ev the DocumentEvent describing the insertion
+     */
+    public void insertUpdate(DocumentEvent ev)
+    {
+      Dimension size = textComponent.getSize();
+      rootView.insertUpdate(ev, new Rectangle(0, 0, size.width, size.height),
+                            BasicTextUI.this);
+    }
+
+    /**
+     * Notification about a document removal event.
+     *
+     * @param ev the DocumentEvent describing the removal
+     */
+    public void removeUpdate(DocumentEvent ev)
+    {
+      Dimension size = textComponent.getSize();
+      rootView.removeUpdate(ev, new Rectangle(0, 0, size.width, size.height),
+                            BasicTextUI.this);
+    }
+  }
+
   static EditorKit kit = new DefaultEditorKit();
 
   RootView rootView = new RootView();
   JTextComponent textComponent;
   UpdateHandler updateHandler = new UpdateHandler();
 
+  /** The DocumentEvent handler. */
+  DocumentHandler documentHandler = new DocumentHandler();
+
   public BasicTextUI()
   {
   }
@@ -249,11 +339,34 @@
   protected void installListeners()
   {
     textComponent.addFocusListener(focuslistener);
+    installDocumentListeners();
+  }
+
+  /**
+   * Installs the document listeners on the textComponent's model.
+   */
+  private void installDocumentListeners()
+  {
+    Document doc = textComponent.getDocument();
+    if (doc != null)
+      doc.addDocumentListener(documentHandler);
   }
 
+  /**
+   * Returns the name of the keymap for this type of TextUI.
+   * 
+   * This is implemented so that the classname of this TextUI
+   * without the package prefix is returned. This way subclasses
+   * don't have to override this method.
+   * 
+   * @return the name of the keymap for this TextUI
+   */
   protected String getKeymapName()
   {
-    return "BasicTextUI";
+    String fullClassName = getClass().getName();
+    int index = fullClassName.lastIndexOf('.');
+    String className = fullClassName.substring(index + 1);
+    return className;
   }
 
   protected Keymap createKeymap()
@@ -262,6 +375,12 @@
     UIDefaults defaults = UIManager.getLookAndFeelDefaults();
     JTextComponent.KeyBinding[] bindings = 
       (JTextComponent.KeyBinding[]) defaults.get(prefix + ".keyBindings");
+    if (bindings == null)
+      {
+        bindings = new JTextComponent.KeyBinding[0];
+        defaults.put(prefix + ".keyBindings", bindings);
+      }
+
     Keymap km = JTextComponent.addKeymap(getKeymapName(), 
                                          JTextComponent.getKeymap(JTextComponent.DEFAULT_KEYMAP));    
     JTextComponent.loadKeymap(km, bindings, textComponent.getActions());
@@ -316,7 +435,7 @@
   ActionMap createActionMap()
   {
     Action[] actions = textComponent.getActions();
-    ActionMap am = new ActionMap();
+    ActionMap am = new ActionMapUIResource();
     for (int i = 0; i < actions.length; ++i)
       {
         String name = (String) actions[i].getValue(Action.NAME);
@@ -366,7 +485,20 @@
 
     return new Dimension((int) w, (int) h);
   }
-  
+
+  /**
+   * Returns the maximum size for text components that use this UI.
+   *
+   * This returns (Integer.MAX_VALUE, Integer.MAX_VALUE).
+   *
+   * @return the maximum size for text components that use this UI
+   */
+  public Dimension getMaximumSize(JComponent c)
+  {
+    // Sun's implementation returns Integer.MAX_VALUE here, so do we.
+    return new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE);
+  }
+
   public final void paint(Graphics g, JComponent c)
   {
     paintSafely(g);
@@ -488,6 +620,7 @@
     Document doc = textComponent.getDocument();
     if (doc == null)
       return;
+    installDocumentListeners();
     Element elem = doc.getDefaultRootElement();
     if (elem == null)
       return;
Index: libjava/javax/swing/plaf/basic/BasicToggleButtonUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicToggleButtonUI.java,v
retrieving revision 1.7
diff -u -r1.7 BasicToggleButtonUI.java
--- libjava/javax/swing/plaf/basic/BasicToggleButtonUI.java	2 Sep 2004 05:10:27 -0000	1.7
+++ libjava/javax/swing/plaf/basic/BasicToggleButtonUI.java	9 Jul 2005 22:10:16 -0000
@@ -1,5 +1,5 @@
 /* BasicToggleButtonUI.java
-   Copyright (C) 2002, 2004 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -48,5 +48,15 @@
     return new BasicToggleButtonUI();
   }    
 
+  /**
+   * Returns the prefix for the UI defaults property for this UI class.
+   * This is &apos;ToggleButton&apos; for this class.
+   *
+   * @return the prefix for the UI defaults property
+   */
+  protected String getPropertyPrefix()
+  {
+    return "ToggleButton";
+  }
 }
 
Index: libjava/javax/swing/plaf/basic/BasicToolBarUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicToolBarUI.java,v
retrieving revision 1.6
diff -u -r1.6 BasicToolBarUI.java
--- libjava/javax/swing/plaf/basic/BasicToolBarUI.java	16 Feb 2005 20:03:01 -0000	1.6
+++ libjava/javax/swing/plaf/basic/BasicToolBarUI.java	9 Jul 2005 22:10:16 -0000
@@ -82,8 +82,9 @@
  */
 public class BasicToolBarUI extends ToolBarUI implements SwingConstants
 {
-  /** Static owner of all DragWindows. */
-  private static JFrame owner = new JFrame();
+  /** Static owner of all DragWindows.
+   * This is package-private to avoid an accessor method.  */
+  static JFrame owner = new JFrame();
 
   /** The border used when the JToolBar is in nonrollover mode. */
   private static Border nonRolloverBorder;
@@ -94,8 +95,9 @@
   /** The last known BorderLayout constraint before floating. */
   protected String constraintBeforeFloating;
 
-  /** The last known orientation of the JToolBar before floating. */
-  private int lastGoodOrientation;
+  /** The last known orientation of the JToolBar before floating.
+   * This is package-private to avoid an accessor method.  */
+  int lastGoodOrientation;
 
   /** The color of the border when it is dockable. */
   protected Color dockingBorderColor;
@@ -136,20 +138,24 @@
    */
   private transient Window floatFrame;
 
-  /** The original parent of the JToolBar. */
-  private transient Container origParent;
-
-  /** A hashtable of components and their original borders. */
-  private transient Hashtable borders;
+  /** The original parent of the JToolBar.
+   * This is package-private to avoid an accessor method.  */
+  transient Container origParent;
+
+  /** A hashtable of components and their original borders.
+   * This is package-private to avoid an accessor method.  */
+  transient Hashtable borders;
 
   /** A window listener for the floatable frame. */
   private transient WindowListener windowListener;
 
-  /** A set of cached bounds of the JToolBar. */
-  private transient Dimension cachedBounds;
-
-  /** The cached orientation of the JToolBar. */
-  private transient int cachedOrientation;
+  /** A set of cached bounds of the JToolBar.
+   * This is package-private to avoid an accessor method.  */
+  transient Dimension cachedBounds;
+
+  /** The cached orientation of the JToolBar.
+   * This is package-private to avoid an accessor method.  */
+  transient int cachedOrientation;
 
   /**
    * This method creates a new <code>BasicToolBarUI</code> object for the given JToolBar.
@@ -1086,8 +1092,9 @@
 
     /**
      * Creates a new DragWindow object.
+     * This is package-private to avoid an accessor method.
      */
-    private DragWindow()
+    DragWindow()
     {
       super(owner);
     }
Index: libjava/javax/swing/plaf/basic/BasicViewportUI.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/basic/BasicViewportUI.java,v
retrieving revision 1.10
diff -u -r1.10 BasicViewportUI.java
--- libjava/javax/swing/plaf/basic/BasicViewportUI.java	30 Nov 2004 23:59:06 -0000	1.10
+++ libjava/javax/swing/plaf/basic/BasicViewportUI.java	9 Jul 2005 22:10:16 -0000
@@ -103,7 +103,6 @@
   public void installUI(JComponent c) 
   {
     super.installUI(c);
-    c.setLayout(new ViewportLayout());
     installListeners(c);
   }
 
Index: libjava/javax/swing/plaf/basic/DefaultMenuLayout.java
===================================================================
RCS file: libjava/javax/swing/plaf/basic/DefaultMenuLayout.java
diff -N libjava/javax/swing/plaf/basic/DefaultMenuLayout.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/basic/DefaultMenuLayout.java	9 Jul 2005 22:10:16 -0000
@@ -0,0 +1,78 @@
+/* DefaultMenuLayout.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package javax.swing.plaf.basic;
+
+import java.awt.Container;
+import java.awt.Dimension;
+
+import javax.swing.BoxLayout;
+import javax.swing.plaf.UIResource;
+
+/**
+ * The LayoutManager that is used in PopupMenus. This is a derived from
+ * {@link BoxLayout}.
+ *
+ * @author Roman Kennke (roman@kennke.org)
+ */
+public class DefaultMenuLayout
+  extends BoxLayout
+  implements UIResource
+{
+
+  /**
+   * Creates a new instance of DefaultMenuLayout.
+   *
+   * @param target the component that is laid out
+   * @param axis the axis along which the component is laid out
+   */
+  public DefaultMenuLayout(Container target, int axis)
+  {
+    super(target, axis);
+  }
+
+  /**
+   * Returns the preferred size for the layout of the menu.
+   *
+   * @param target the Container which's preferred size we calculate
+   */
+  public Dimension preferredLayoutSize(Container target)
+  {
+    return super.preferredLayoutSize(target);
+  }
+
+}
Index: libjava/javax/swing/plaf/metal/MetalBorders.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalBorders.java
diff -N libjava/javax/swing/plaf/metal/MetalBorders.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalBorders.java	9 Jul 2005 22:10:16 -0000
@@ -0,0 +1,443 @@
+/* MetalBorders.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import java.awt.Color;
+import java.awt.Component;
+import java.awt.Graphics;
+import java.awt.Insets;
+
+import javax.swing.AbstractButton;
+import javax.swing.ButtonModel;
+import javax.swing.JButton;
+import javax.swing.border.AbstractBorder;
+import javax.swing.border.Border;
+import javax.swing.plaf.BorderUIResource;
+import javax.swing.plaf.UIResource;
+import javax.swing.plaf.basic.BasicGraphicsUtils;
+import javax.swing.plaf.basic.BasicBorders;
+
+/**
+ * This factory class creates borders for the different Swing components
+ * UI.
+ *
+ * @author Roman Kennke (roman@kennke.org)
+ */
+public class MetalBorders
+{
+
+  /** The shared instance for getButtonBorder(). */
+  private static Border buttonBorder;
+
+  /** The shared instance for getRolloverButtonBorder(). */
+  private static Border toolbarButtonBorder;
+
+  /**
+   * A MarginBorder that gets shared by multiple components.
+   * Created on demand by the private helper function {@link
+   * #getMarginBorder()}.
+   */
+  private static BasicBorders.MarginBorder marginBorder;
+
+  /**
+   * The border that is drawn around Swing buttons.
+   */
+  public static class MetalButtonBorder
+    extends AbstractBorder
+    implements UIResource
+  {
+    /** The borders insets. */
+    protected static Insets borderInsets = new Insets(3, 3, 3, 3);
+
+    /**
+     * Creates a new instance of ButtonBorder.
+     */
+    public MetalButtonBorder()
+    {
+    }
+
+    /**
+     * Paints the button border.
+     *
+     * @param c the component for which we paint the border
+     * @param g the Graphics context to use
+     * @param x the X coordinate of the upper left corner of c
+     * @param y the Y coordinate of the upper left corner of c
+     * @param w the width of c
+     * @param h the height of c
+     */
+    public void paintBorder(Component c, Graphics g, int x, int y, int w,
+                            int h)
+    {
+      ButtonModel bmodel = null;
+      
+      if (c instanceof AbstractButton)
+        bmodel = ((AbstractButton) c).getModel();
+
+      Color darkShadow = MetalLookAndFeel.getControlDarkShadow();
+      Color shadow = MetalLookAndFeel.getControlShadow();
+      Color light = MetalLookAndFeel.getWhite();
+      Color middle = MetalLookAndFeel.getControl();
+
+      // draw dark border
+      g.setColor(darkShadow);
+      g.drawRect(x, y, w - 2, h - 2);
+
+      if (!bmodel.isPressed())
+        {
+          // draw light border
+          g.setColor(light);
+          g.drawRect(x + 1, y + 1, w - 2, h - 2);
+
+          // draw crossing pixels of both borders
+          g.setColor(middle);
+          g.drawRect(x + 1, y + h - 2, 0, 0);
+          g.drawRect(x + w - 2, y + 1, 0, 0);
+        }
+      else
+        {
+          // draw light border
+          g.setColor(light);
+          g.drawLine(x + w - 1, y + 1, x + w - 1, y + h - 1);
+          g.drawLine(x + 1, y + h - 1, x + w - 1, y + h - 1);
+
+          // draw shadow border
+          g.setColor(middle);
+          g.drawLine(x + 1, y + 1, x + w - 2, y + 1);
+          g.drawLine(x + 1, y + 1, x + 1, y + h - 2);
+
+          // draw crossing pixels of both borders
+          g.setColor(shadow);
+          g.drawRect(x + 1, y + h - 2, 0, 0);
+          g.drawRect(x + w - 2, y + 1, 0, 0);
+        }
+    }
+
+    /**
+     * Returns the insets of the ButtonBorder.
+     *
+     * @param c the component for which the border is used
+     *
+     * @return the insets of the ButtonBorder
+     */
+    public Insets getBorderInsets(Component c)
+    {
+      return getBorderInsets(c, null);
+    }
+
+    /**
+     * Returns the insets of the ButtonBorder in the specified Insets object.
+     *
+     * @param c the component for which the border is used
+     * @param newInsets the insets object where to put the values
+     *
+     * @return the insets of the ButtonBorder
+     */
+    public Insets getBorderInsets(Component c, Insets newInsets)
+    {
+      if (newInsets == null)
+        newInsets = new Insets(0, 0, 0, 0);
+
+      AbstractButton b = (AbstractButton) c;
+      newInsets.bottom = borderInsets.bottom;
+      newInsets.left = borderInsets.left;
+      newInsets.right = borderInsets.right;
+      newInsets.top = borderInsets.top;
+      return newInsets;
+    }
+  }
+
+  /**
+   * A border for JScrollPanes.
+   */
+  public static class ScrollPaneBorder
+    extends AbstractBorder
+    implements UIResource
+  {
+    /** The border insets. */
+    private static Insets insets = new Insets(1, 1, 2, 2);
+    
+    /**
+     * Constructs a new ScrollPaneBorder.
+     */
+    public ScrollPaneBorder()
+    {
+    }
+    
+    /**
+     * Returns the insets of the border for the Component <code>c</code>.
+     *
+     * @param c the Component for which we return the border insets
+     */
+    public Insets getBorderInsets(Component c)
+    {
+      return insets;
+    }
+
+    /**
+     * Paints the border.
+     *
+     * @param c the Component for which the border is painted
+     * @param g the Graphics context
+     * @param x the X coordinate of the upper left corner of the border
+     * @param y the Y coordinate of the upper left corner of the border
+     * @param w the width of the border
+     * @param h the height of the border
+     */
+    public void paintBorder(Component c, Graphics g, int x, int y,
+                            int w, int h)
+    {
+      Color darkShadow = MetalLookAndFeel.getControlDarkShadow();
+      Color shadow = MetalLookAndFeel.getControlShadow();
+      Color light = MetalLookAndFeel.getWhite();
+      Color middle = MetalLookAndFeel.getControl();
+
+      // paint top border line
+      g.setColor(darkShadow);
+      g.drawLine(x, y, x + w - 2, y);
+
+      // paint left border line
+      g.drawLine(x, y, x, y + h - 2);
+ 
+      // paint right inner border line
+      g.drawLine(x + w - 2, y, x + w - 2, y + h + 1);
+
+      // paint bottom inner border line
+      g.drawLine(x + 2, y + h - 2, x + w - 2, y + h - 2);
+
+      // draw right outer border line
+      g.setColor(light);
+      g.drawLine(x + w - 1, y, x + w - 1, y + h - 1);
+
+      // draw bottom outer border line
+      g.drawLine(x, y + h - 1, x + w - 1, y + h - 1);
+
+      // paint the lighter points
+      g.setColor(middle);
+      g.drawLine(x + w - 1, y, x + w - 1, y);
+      g.drawLine(x + w - 2, y + 2, x + w - 2, y + 2);
+      g.drawLine(x, y + h - 1, x, y + h - 1);
+      g.drawLine(x + 1, y + h - 2, x + 1, y + h - 2);
+
+    }
+    
+  }
+  
+  /**
+   * This border is used in Toolbar buttons as inner border.
+   */
+  static class RolloverMarginBorder extends AbstractBorder
+  {
+    /** The borders insets. */
+    protected static Insets borderInsets = new Insets(3, 3, 3, 3);
+
+    /**
+     * Creates a new instance of RolloverBorder.
+     */
+    public RolloverMarginBorder()
+    {
+    }
+    
+    /**
+     * Returns the insets of the RolloverBorder.
+     *
+     * @param c the component for which the border is used
+     *
+     * @return the insets of the RolloverBorder
+     */
+    public Insets getBorderInsets(Component c)
+    {
+      return getBorderInsets(c, null);
+    }
+
+    /**
+     * Returns the insets of the RolloverMarginBorder in the specified
+     * Insets object.
+     *
+     * @param c the component for which the border is used
+     * @param newInsets the insets object where to put the values
+     *
+     * @return the insets of the RolloverMarginBorder
+     */
+    public Insets getBorderInsets(Component c, Insets newInsets)
+    {
+      if (newInsets == null)
+        newInsets = new Insets(0, 0, 0, 0);
+
+      AbstractButton b = (AbstractButton) c;
+      Insets margin = b.getMargin();
+      newInsets.bottom = borderInsets.bottom;
+      newInsets.left = borderInsets.left;
+      newInsets.right = borderInsets.right;
+      newInsets.top = borderInsets.top;
+      return newInsets;
+    }
+  }
+
+  /**
+   * A border implementation for popup menus.
+   */
+  public static class PopupMenuBorder
+    extends AbstractBorder
+    implements UIResource
+  {
+
+    /** The border's insets. */
+    protected static Insets borderInsets = new Insets(2, 2, 1, 1);
+
+    /**
+     * Constructs a new PopupMenuBorder.
+     */
+    public PopupMenuBorder()
+    {
+    }
+    
+    /**
+     * Returns the insets of the border, creating a new Insets instance
+     * with each call.
+     *
+     * @param c the component for which we return the border insets
+     *          (not used here)
+     */
+    public Insets getBorderInsets(Component c)
+    {
+      return getBorderInsets(c, null);
+    }
+    
+    /**
+     * Returns the insets of the border, using the supplied Insets instance.
+     *
+     * @param c the component for which we return the border insets
+     *          (not used here)
+     * @param i the Insets instance to fill with the Insets values
+     */
+    public Insets getBorderInsets(Component c, Insets i)
+    {
+      Insets insets;
+      if (i == null)
+        insets = new Insets(borderInsets.top, borderInsets.left,
+                            borderInsets.bottom, borderInsets.right);
+      else
+        {
+          insets = i;
+          insets.top = borderInsets.top;
+          insets.left = borderInsets.left;
+          insets.bottom = borderInsets.bottom;
+          insets.right = borderInsets.right;
+        }
+      
+      return insets;
+    }
+
+    /**
+     * Paints the border for component <code>c</code> using the
+     * Graphics context <code>g</code> with the dimension
+     * <code>x, y, w, h</code>.
+     *
+     * @param c the component for which we paint the border
+     * @param g the Graphics context to use
+     * @param x the X coordinate of the upper left corner of c
+     * @param y the Y coordinate of the upper left corner of c
+     * @param w the width of c
+     * @param h the height of c
+     */
+    public void paintBorder(Component c, Graphics g, int x, int y, int w,
+                            int h)
+    {
+      Color darkShadow = MetalLookAndFeel.getPrimaryControlDarkShadow();
+      Color light = MetalLookAndFeel.getPrimaryControlHighlight();
+
+      // draw dark outer border
+      g.setColor(darkShadow);
+      g.drawRect(x, y, w - 1, h - 1);
+      
+      // draw highlighted inner border (only top and left)
+      g.setColor(light);
+      g.drawLine(x + 1, y + 1, x + 1, y + h - 2);
+      g.drawLine(x + 1, y + 1, x + w - 2, y + 1);
+    }
+    
+  }
+
+  /**
+   * Returns a border for Swing buttons in the Metal Look &amp; Feel.
+   *
+   * @return a border for Swing buttons in the Metal Look &amp; Feel
+   */
+  public static Border getButtonBorder()
+  {
+    if (buttonBorder == null)
+      {
+        Border outer = new MetalButtonBorder();
+        Border inner = getMarginBorder();
+        buttonBorder = new BorderUIResource.CompoundBorderUIResource
+            (outer, inner);
+      }
+    return buttonBorder;
+  }
+
+  /**
+   * Returns a border for Toolbar buttons in the Metal Look &amp; Feel.
+   *
+   * @return a border for Toolbar buttons in the Metal Look &amp; Feel
+   */
+  static Border getToolbarButtonBorder()
+  {
+    if (toolbarButtonBorder == null)
+      {
+        Border outer = new MetalButtonBorder();
+        Border inner = new RolloverMarginBorder();
+        toolbarButtonBorder = new BorderUIResource.CompoundBorderUIResource
+          (outer, inner);
+      }
+    return toolbarButtonBorder;
+  }
+
+  /**
+   * Returns a shared instance of {@link BasicBorders.MarginBorder}.
+   *
+   * @return a shared instance of {@link BasicBorders.MarginBorder}
+   */
+  static Border getMarginBorder()
+  {
+    if (marginBorder == null)
+      marginBorder = new BasicBorders.MarginBorder();
+    return marginBorder;
+  }
+}
Index: libjava/javax/swing/plaf/metal/MetalButtonUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalButtonUI.java
diff -N libjava/javax/swing/plaf/metal/MetalButtonUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalButtonUI.java	9 Jul 2005 22:10:16 -0000
@@ -0,0 +1,101 @@
+/* MetalButtonUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import javax.swing.AbstractButton;
+import javax.swing.JComponent;
+import javax.swing.JToolBar;
+import javax.swing.UIDefaults;
+import javax.swing.UIManager;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicButtonUI;
+
+/**
+ * The Metal Look &amp; Feel implementation for
+ * {@link javax.swing.AbstractButton}s.
+ *
+ * @author Roman Kennke (roman@kennke.org)
+ */
+public class MetalButtonUI
+  extends BasicButtonUI
+{
+
+  // FIXME: probably substitute with a Map in the future in the case
+  // that this UI becomes stateful
+
+  /** The cached MetalButtonUI instance. */
+  private static MetalButtonUI instance = null;
+
+  /**
+   * Creates a new instance of MetalButtonUI.
+   */
+  public MetalButtonUI()
+  {
+    super();
+  }
+
+  /**
+   * Returns an instance of MetalButtonUI.
+   *
+   * @param component a button for which a UI instance should be returned
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instance == null)
+      instance = new MetalButtonUI();
+    return instance;
+  }
+
+  /**
+   * Install the Look &amp; Feel defaults for Buttons.
+   *
+   * @param button the button for which to install the Look &amp; Feel
+   */
+  public void installDefaults(AbstractButton button)
+  {
+    super.installDefaults(button);
+
+    UIDefaults defaults = UIManager.getLookAndFeelDefaults();
+    button.setFont(defaults.getFont("Button.font"));
+
+    if (button.getParent() instanceof JToolBar)
+      button.setBorder(MetalBorders.getToolbarButtonBorder());
+  }
+
+}
Index: libjava/javax/swing/plaf/metal/MetalCheckBoxUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalCheckBoxUI.java
diff -N libjava/javax/swing/plaf/metal/MetalCheckBoxUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalCheckBoxUI.java	9 Jul 2005 22:10:16 -0000
@@ -0,0 +1,74 @@
+/* MetalCheckBoxUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicCheckBoxUI;
+
+public class MetalCheckBoxUI
+  extends BasicCheckBoxUI
+{
+
+  // FIXME: maybe replace by a Map of instances when this becomes stateful
+  /** The shared UI instance for JCheckBoxes. */
+  private static MetalCheckBoxUI instance = null;
+
+  /**
+   * Constructs a new instance of MetalCheckBoxUI.
+   */
+  public MetalCheckBoxUI()
+  {
+    super();
+  }
+
+  /**
+   * Returns an instance of MetalCheckBoxUI.
+   *
+   * @param component the component for which we return an UI instance
+   *
+   * @return an instance of MetalCheckBoxUI
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instance == null)
+      instance = new MetalCheckBoxUI();
+    return instance;
+  }
+}
Index: libjava/javax/swing/plaf/metal/MetalComboBoxUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalComboBoxUI.java
diff -N libjava/javax/swing/plaf/metal/MetalComboBoxUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalComboBoxUI.java	9 Jul 2005 22:10:16 -0000
@@ -0,0 +1,86 @@
+/* MetalComboBoxUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import java.util.HashMap;
+
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicComboBoxUI;
+
+public class MetalComboBoxUI
+  extends BasicComboBoxUI
+{
+
+  /** The UI instances for JComboBoxes. */
+  private static HashMap instances = null;
+
+  /**
+   * Constructs a new instance of MetalComboBoxUI.
+   */
+  public MetalComboBoxUI()
+  {
+    super();
+  }
+
+  /**
+   * Returns an instance of MetalComboBoxUI.
+   *
+   * @param component the component for which we return an UI instance
+   *
+   * @return an instance of MetalComboBoxUI
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instances == null)
+      instances = new HashMap();
+
+    Object o = instances.get(component);
+    MetalComboBoxUI instance;
+    if (o == null)
+      {
+	instance = new MetalComboBoxUI();
+	instances.put(component, instance);
+      }
+    else
+      instance = (MetalComboBoxUI) o;
+
+    return instance;
+  }
+}
Index: libjava/javax/swing/plaf/metal/MetalDesktopIconUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalDesktopIconUI.java
diff -N libjava/javax/swing/plaf/metal/MetalDesktopIconUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalDesktopIconUI.java	9 Jul 2005 22:10:16 -0000
@@ -0,0 +1,74 @@
+/* MetalDesktopIconUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicDesktopIconUI;
+
+public class MetalDesktopIconUI
+  extends BasicDesktopIconUI
+{
+
+  // FIXME: maybe replace by a Map of instances when this becomes stateful
+  /** The shared UI instance for MetalDesktopIcons */
+  private static MetalDesktopIconUI instance = null;
+
+  /**
+   * Constructs a new instance of MetalDesktopIconUI.
+   */
+  public MetalDesktopIconUI()
+  {
+    super();
+  }
+
+  /**
+   * Returns an instance of MetalDesktopIconUI.
+   *
+   * @param component the component for which we return an UI instance
+   *
+   * @return an instance of MetalDesktopIconUI
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instance == null)
+      instance = new MetalDesktopIconUI();
+    return instance;
+  }
+}
Index: libjava/javax/swing/plaf/metal/MetalInternalFrameUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalInternalFrameUI.java
diff -N libjava/javax/swing/plaf/metal/MetalInternalFrameUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalInternalFrameUI.java	9 Jul 2005 22:10:16 -0000
@@ -0,0 +1,88 @@
+/* MetalInternalFrameUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import java.util.HashMap;
+
+import javax.swing.JComponent;
+import javax.swing.JInternalFrame;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicInternalFrameUI;
+
+public class MetalInternalFrameUI
+  extends BasicInternalFrameUI
+{
+
+  /** The instances of MetalInternalFrameUI*/
+  private static HashMap instances;
+
+  /**
+   * Constructs a new instance of MetalInternalFrameUI.
+   */
+  public MetalInternalFrameUI(JInternalFrame frame)
+  {
+    super(frame);
+  }
+
+  /**
+   * Returns an instance of MetalInternalFrameUI.
+   *
+   * @param component the component for which we return an UI instance
+   *
+   * @return an instance of MetalInternalFrameUI
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instances == null)
+      instances = new HashMap();
+
+
+    Object o = instances.get(component);
+    MetalInternalFrameUI instance;
+    if (o == null)
+      {
+	instance = new MetalInternalFrameUI((JInternalFrame) component);
+	instances.put(component, instance);
+      }
+    else
+      instance = (MetalInternalFrameUI) o;
+
+    return instance;
+  }
+}
Index: libjava/javax/swing/plaf/metal/MetalLabelUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalLabelUI.java
diff -N libjava/javax/swing/plaf/metal/MetalLabelUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalLabelUI.java	9 Jul 2005 22:10:16 -0000
@@ -0,0 +1,74 @@
+/* MetalLabelUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicLabelUI;
+
+public class MetalLabelUI
+  extends BasicLabelUI
+{
+
+  // FIXME: maybe replace by a Map of instances when this becomes stateful
+  /** The shared UI instance for JLabels. */
+  private static MetalLabelUI instance = null;
+
+  /**
+   * Constructs a new instance of MetalLabelUI.
+   */
+  public MetalLabelUI()
+  {
+    super();
+  }
+
+  /**
+   * Returns an instance of MetalLabelUI.
+   *
+   * @param component the component for which we return an UI instance
+   *
+   * @return an instance of MetalLabelUI
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instance == null)
+      instance = new MetalLabelUI();
+    return instance;
+  }
+}
Index: libjava/javax/swing/plaf/metal/MetalLookAndFeel.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/plaf/metal/MetalLookAndFeel.java,v
retrieving revision 1.7
diff -u -r1.7 MetalLookAndFeel.java
--- libjava/javax/swing/plaf/metal/MetalLookAndFeel.java	16 Feb 2005 20:03:03 -0000	1.7
+++ libjava/javax/swing/plaf/metal/MetalLookAndFeel.java	9 Jul 2005 22:10:17 -0000
@@ -1,5 +1,5 @@
 /* MetalLookAndFeel.java
-   Copyright (C) 2002 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -38,6 +38,9 @@
 
 package javax.swing.plaf.metal;
 
+import java.awt.Color;
+import java.awt.Insets;
+
 import javax.swing.UIDefaults;
 import javax.swing.plaf.ColorUIResource;
 import javax.swing.plaf.FontUIResource;
@@ -89,6 +92,9 @@
     if (LAF_defaults == null)
       LAF_defaults = super.getDefaults();
 
+    // add custom theme entries to the table
+    theme.addCustomEntriesToTable(LAF_defaults);
+    
     // Returns the default values for this look and feel. 
     return LAF_defaults;
   }
@@ -307,4 +313,220 @@
   {
     MetalLookAndFeel.theme = theme;
   }
+
+  /**
+   * Sets the ComponentUI classes for all Swing components to the Metal
+   * implementations.
+   *
+   * In particular this sets the following keys:
+   *
+   * <table>
+   * <tr>
+   * <th>Key</th><th>Value</th>
+   * </tr><tr>
+   * <td>ButtonUI</td><td>{@link MetalButtonUI}</td>
+   * </tr><tr>
+   * <td>CheckBoxUI</td><td>{@link MetalCheckBoxUI}</td>
+   * </tr><tr>
+   * <td>ComboBoxUI</td><td>{@link MetalComboBoxUI}</td>
+   * </tr><tr>
+   * <td>DesktopIconUI</td><td>{@link MetalDesktopIconUI}</td>
+   * </tr><tr>
+   * <td>InternalFrameUI</td><td>{@link MetalInternalFrameUI}</td>
+   * </tr><tr>
+   * <td>LabelUI</td><td>{@link MetalLabelUI}</td>
+   * </tr><tr>
+   * <td>PopupMenuSeparatorUI</td><td>{@link MetalPopupMenuSeparatorUI}</td>
+   * </tr><tr>
+   * <td>ProgressBarUI</td><td>{@link MetalProgressBarUI}</td>
+   * </tr><tr>
+   * <td>RadioButtonUI</td><td>{@link MetalRadioButtonUI}</td>
+   * </tr><tr>
+   * <td>RootPaneUI</td><td>{@link MetalRootPaneUI}</td>
+   * </tr><tr>
+   * <td>ScrollBarUI</td><td>{@link MetalScrollBarUI}</td>
+   * </tr><tr>
+   * <td>ScrollPaneUI</td><td>{@link MetalScrollPaneUI}</td>
+   * </tr><tr>
+   * <td>SeparatorUI</td><td>{@link MetalSeparatorUI}</td>
+   * </tr><tr>
+   * <td>SliderUI</td><td>{@link MetalSliderUI}</td>
+   * </tr><tr>
+   * <td>SplitPaneUI</td><td>{@link MetalSplitPaneUI}</td>
+   * </tr><tr>
+   * <td>TabbedPaneUI</td><td>{@link MetalTabbedPaneUI}</td>
+   * </tr><tr>
+   * <td>TextFieldUI</td><td>{@link MetalTextFieldUI}</td>
+   * </tr><tr>
+   * <td>ToggleButtonUI</td><td>{@link MetalToggleButtonUI}</td>
+   * </tr><tr>
+   * <td>ToolBarUI</td><td>{@link MetalToolBarUI}</td>
+   * </tr><tr>
+   * <td>ToolTipUI</td><td>{@link MetalToolTipUI}</td>
+   * </tr><tr>
+   * <td>TreeUI</td><td>{@link MetalTreeUI}</td>
+   * </tr><tr>
+   * </table>
+   *
+   * @param defaults the UIDefaults where the class defaults are added
+   */
+  protected void initClassDefaults(UIDefaults defaults)
+  {
+    super.initClassDefaults(defaults);
+
+    // Variables
+    Object[] uiDefaults;
+    // Initialize Class Defaults
+    uiDefaults = new Object[] {
+      "ButtonUI", "javax.swing.plaf.metal.MetalButtonUI",
+      "CheckBoxUI", "javax.swing.plaf.metal.MetalCheckBoxUI",
+      "ComboBoxUI", "javax.swing.plaf.metal.MetalComboBoxUI",
+      "DesktopIconUI", "javax.swing.plaf.metal.MetalDesktopIconUI",
+      "InternalFrameUI", "javax.swing.plaf.metal.MetalInternalFrameUI",
+      "LabelUI", "javax.swing.plaf.metal.MetalLabelUI",
+      "PopupMenuSeparatorUI",
+      "javax.swing.plaf.metal.MetalPopupMenuSeparatorUI",
+      "ProgressBarUI", "javax.swing.plaf.metal.MetalProgressBarUI",
+      "RadioButtonUI", "javax.swing.plaf.metal.MetalRadioButtonUI",
+      "RootPaneUI", "javax.swing.plaf.metal.MetalRootPaneUI",
+      "ScrollBarUI", "javax.swing.plaf.metal.MetalScrollBarUI",
+      "ScrollPaneUI", "javax.swing.plaf.metal.MetalScrollPaneUI",
+      "SeparatorUI", "javax.swing.plaf.metal.MetalSeparatorUI",
+      "SliderUI", "javax.swing.plaf.metal.MetalSliderUI",
+      "SplitPaneUI", "javax.swing.plaf.metal.MetalSplitPaneUI",
+      "TabbedPaneUI", "javax.swing.plaf.metal.MetalTabbedPaneUI",
+      "TextFieldUI", "javax.swing.plaf.metal.MetalTextFieldUI",
+      "ToggleButtonUI", "javax.swing.plaf.metal.MetalToggleButtonUI",
+      "ToolBarUI", "javax.swing.plaf.metal.MetalToolBarUI",
+      "ToolTipUI", "javax.swing.plaf.metal.MetalToolTipUI",
+      "TreeUI", "javax.swing.plaf.metal.MetalTreeUI",
+    };
+    // Add Class Defaults to UI Defaults table
+    defaults.putDefaults(uiDefaults);
+  }
+
+  /**
+   * Initializes the component defaults for the Metal Look &amp; Feel.
+   *
+   * In particular this sets the following keys (the colors are given
+   * as RGB hex values):
+   *
+   * <table>
+   * <tr>
+   * <th>Key</th><th>Value</th>
+   * </tr><tr>
+   * <td>Button.background</td><td>0xcccccc</td>
+   * </tr><tr>
+   * <td>Button.border</td><td>{@link MetalBorders.ButtonBorder}</td>
+   * </tr><tr>
+   * <td>Button.font</td><td>{@link #getControlTextFont}</td>
+   * </tr><tr>
+   * <td>Button.margin</td><td><code>new java.awt.Insets(2, 14, 2, 14)</code>
+   * </td>
+   * </tr><tr>
+   * <td>CheckBox.background</td><td>0xcccccc</td>
+   * </tr><tr>
+   * <td>CheckBoxMenuItem.background</td><td>0xcccccc</td>
+   * </tr><tr>
+   * <td>ToolBar.background</td><td>0xcccccc</td>
+   * </tr><tr>
+   * <td>Panel.background</td><td>0xcccccc</td>
+   * </tr><tr>
+   * <td>Slider.background</td><td>0xcccccc</td>
+   * </tr><tr>
+   * <td>OptionPane.background</td><td>0xcccccc</td>
+   * </tr><tr>
+   * <td>ProgressBar.background</td><td>0xcccccc</td>
+   * </tr><tr>
+   * <td>TabbedPane.background</td><td>0xcccccc</td>
+   * </tr><tr>
+   * <td>Label.background</td><td>0xcccccc</td>
+   * </tr><tr>
+   * <td>Label.font</td><td>{@link #getControlTextFont}</td>
+   * </tr><tr>
+   * <td>Menu.background</td><td>0xcccccc</td>
+   * </tr><tr>
+   * <td>MenuBar.background</td><td>0xcccccc</td>
+   * </tr><tr>
+   * <td>MenuItem.background</td><td>0xcccccc</td>
+   * </tr><tr>
+   * <td>ScrollBar.background</td><td>0xcccccc</td>
+   * </tr><tr>
+   * <td>PopupMenu.border</td>
+   * <td><code>new javax.swing.plaf.metal.MetalBorders.PopupMenuBorder()</td>
+   * </tr><tr>
+   * </table>
+   *
+   * @param defaults the UIDefaults instance to which the values are added
+   */
+  protected void initComponentDefaults(UIDefaults defaults)
+  {
+    super.initComponentDefaults(defaults);
+    Object[] myDefaults = new Object[] {
+      "Button.background", new ColorUIResource(getControl()),
+      "Button.border", MetalBorders.getButtonBorder(),
+      "Button.darkShadow", new ColorUIResource(getControlDarkShadow()),
+      "Button.disabledText", new ColorUIResource(getControlDisabled()),
+      "Button.focus", new ColorUIResource(getFocusColor()),
+      "Button.font", getControlTextFont(),
+      "Button.foreground", new ColorUIResource(getSystemTextColor()),
+      "Button.highlight", new ColorUIResource(getControlHighlight()),
+      "Button.light", new ColorUIResource(getControlHighlight()),
+      "Button.margin", new Insets(2, 14, 2, 14),
+      "Button.select", new ColorUIResource(getPrimaryControlShadow()),
+      "Button.shadow", new ColorUIResource(getPrimaryControlShadow()),
+      "CheckBox.background", new ColorUIResource(getControl()),
+      "CheckBoxMenuItem.background", new ColorUIResource(getControl()),
+      "ToolBar.background", new ColorUIResource(getControl()),
+      "Panel.background", new ColorUIResource(getControl()),
+      "Slider.background", new ColorUIResource(getControl()),
+      "OptionPane.background", new ColorUIResource(getControl()),
+      "ProgressBar.background", new ColorUIResource(getControl()),
+      "ScrollPane.border", new MetalBorders.ScrollPaneBorder(),
+      "TabbedPane.background", new ColorUIResource(getControl()),
+      "Label.background", new ColorUIResource(getControl()),
+      "Label.font", getControlTextFont(),
+      "Label.disabledForeground", new ColorUIResource(getControlDisabled()),
+      "Label.foreground", new ColorUIResource(getSystemTextColor()),
+      "Menu.background", new ColorUIResource(getControl()),
+      "Menu.font", getControlTextFont(),
+      "MenuBar.background", new ColorUIResource(getControl()),
+      "MenuBar.font", getControlTextFont(),
+      "MenuItem.background", new ColorUIResource(getControl()),
+      "MenuItem.font", getControlTextFont(),
+      "ScrollBar.background", new ColorUIResource(getControl()),
+      "ScrollBar.shadow", new ColorUIResource(getControlShadow()),
+      "ScrollBar.thumb", new ColorUIResource(getPrimaryControlShadow()),
+      "ScrollBar.thumbDarkShadow",
+      new ColorUIResource(getPrimaryControlDarkShadow()),
+      "ScrollBar.thumbHighlight",
+      new ColorUIResource(getPrimaryControl()),
+      "PopupMenu.border", new MetalBorders.PopupMenuBorder()
+    };
+    defaults.putDefaults(myDefaults);
+  }
+
+  /**
+   * Initializes the system color defaults.
+   *
+   * In particular this sets the following keys:
+   *
+   * <table>
+   * <tr>
+   * <th>Key</th><th>Value</th><th>Description</th>
+   * </tr><tr>
+   * <td>control</td><td>0xcccccc</td><td>The default color for components</td>
+   * </tr>
+   * </table>
+   */
+  protected void initSystemColorDefaults(UIDefaults defaults)
+  {
+    super.initSystemColorDefaults(defaults);
+    Object[] uiDefaults;
+    uiDefaults = new Object[] {
+      "control", new ColorUIResource(getControl())
+    };
+    defaults.putDefaults(uiDefaults);
+  }
+
 }
Index: libjava/javax/swing/plaf/metal/MetalPopupMenuSeparatorUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalPopupMenuSeparatorUI.java
diff -N libjava/javax/swing/plaf/metal/MetalPopupMenuSeparatorUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalPopupMenuSeparatorUI.java	9 Jul 2005 22:10:17 -0000
@@ -0,0 +1,73 @@
+/* MetalPopupMenuSeparatorUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
+
+public class MetalPopupMenuSeparatorUI
+  extends MetalSeparatorUI
+{
+
+  // FIXME: maybe replace by a Map of instances when this becomes stateful
+  /** The shared UI instance for MetalPopupMenuSeparatorUIs */
+  private static MetalPopupMenuSeparatorUI instance = null;
+
+  /**
+   * Constructs a new instance of MetalPopupMenuSeparatorUI.
+   */
+  public MetalPopupMenuSeparatorUI()
+  {
+    super();
+  }
+
+  /**
+   * Returns an instance of MetalPopupMenuSeparatorUI.
+   *
+   * @param component the component for which we return an UI instance
+   *
+   * @return an instance of MetalPopupMenuSeparatorUI
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instance == null)
+      instance = new MetalPopupMenuSeparatorUI();
+    return instance;
+  }
+}
Index: libjava/javax/swing/plaf/metal/MetalProgressBarUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalProgressBarUI.java
diff -N libjava/javax/swing/plaf/metal/MetalProgressBarUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalProgressBarUI.java	9 Jul 2005 22:10:17 -0000
@@ -0,0 +1,74 @@
+/* MetalProgressBarUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicProgressBarUI;
+
+public class MetalProgressBarUI
+  extends BasicProgressBarUI
+{
+
+  // FIXME: maybe replace by a Map of instances when this becomes stateful
+  /** The shared UI instance for MetalProgressBarUIs */
+  private static MetalProgressBarUI instance = null;
+
+  /**
+   * Constructs a new instance of MetalProgressBarUI.
+   */
+  public MetalProgressBarUI()
+  {
+    super();
+  }
+
+  /**
+   * Returns an instance of MetalProgressBarUI.
+   *
+   * @param component the component for which we return an UI instance
+   *
+   * @return an instance of MetalProgressBarUI
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instance == null)
+      instance = new MetalProgressBarUI();
+    return instance;
+  }
+}
Index: libjava/javax/swing/plaf/metal/MetalRadioButtonUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalRadioButtonUI.java
diff -N libjava/javax/swing/plaf/metal/MetalRadioButtonUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalRadioButtonUI.java	9 Jul 2005 22:10:17 -0000
@@ -0,0 +1,74 @@
+/* MetalRadioButtonUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicRadioButtonUI;
+
+public class MetalRadioButtonUI
+  extends BasicRadioButtonUI
+{
+
+  // FIXME: maybe replace by a Map of instances when this becomes stateful
+  /** The shared UI instance for JRadioButtons. */
+  private static MetalRadioButtonUI instance = null;
+
+  /**
+   * Constructs a new instance of MetalRadioButtonUI.
+   */
+  public MetalRadioButtonUI()
+  {
+    super();
+  }
+
+  /**
+   * Returns an instance of MetalRadioButtonUI.
+   *
+   * @param component the component for which we return an UI instance
+   *
+   * @return an instance of MetalRadioButtonUI
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instance == null)
+      instance = new MetalRadioButtonUI();
+    return instance;
+  }
+}
Index: libjava/javax/swing/plaf/metal/MetalRootPaneUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalRootPaneUI.java
diff -N libjava/javax/swing/plaf/metal/MetalRootPaneUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalRootPaneUI.java	9 Jul 2005 22:10:17 -0000
@@ -0,0 +1,74 @@
+/* MetalRootPaneUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicRootPaneUI;
+
+public class MetalRootPaneUI
+  extends BasicRootPaneUI
+{
+
+  // FIXME: maybe replace by a Map of instances when this becomes stateful
+  /** The shared UI instance for MetalRootPaneUIs */
+  private static MetalRootPaneUI instance = null;
+
+  /**
+   * Constructs a new instance of MetalRootPaneUI.
+   */
+  public MetalRootPaneUI()
+  {
+    super();
+  }
+
+  /**
+   * Returns an instance of MetalRootPaneUI.
+   *
+   * @param component the component for which we return an UI instance
+   *
+   * @return an instance of MetalRootPaneUI
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instance == null)
+      instance = new MetalRootPaneUI();
+    return instance;
+  }
+}
Index: libjava/javax/swing/plaf/metal/MetalScrollBarUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalScrollBarUI.java
diff -N libjava/javax/swing/plaf/metal/MetalScrollBarUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalScrollBarUI.java	9 Jul 2005 22:10:17 -0000
@@ -0,0 +1,165 @@
+/* MetalScrollBarUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import java.awt.Dimension;
+import java.awt.Graphics;
+import java.awt.Rectangle;
+import java.util.HashMap;
+
+import javax.swing.JComponent;
+import javax.swing.UIDefaults;
+import javax.swing.UIManager;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicScrollBarUI;
+
+public class MetalScrollBarUI
+  extends BasicScrollBarUI
+{
+
+  /** The minimum thumb size */
+  private static final Dimension MIN_THUMB_SIZE = new Dimension(18, 18);
+
+  // FIXME: maybe replace by a Map of instances when this becomes stateful
+  /** The shared UI instance for JScrollBars. */
+  private static HashMap instances = null;
+
+  /**
+   * Constructs a new instance of MetalScrollBarUI.
+   */
+  public MetalScrollBarUI()
+  {
+    super();
+  }
+
+  /**
+   * Returns an instance of MetalScrollBarUI.
+   *
+   * @param component the component for which we return an UI instance
+   *
+   * @return an instance of MetalScrollBarUI
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instances == null)
+      instances = new HashMap();
+
+    Object o = instances.get(component);
+    MetalScrollBarUI instance;
+    if (o == null)
+      {
+	instance = new MetalScrollBarUI();
+	instances.put(component, instance);
+      }
+    else
+      instance = (MetalScrollBarUI) o;
+
+    return instance;
+  }
+
+  /**
+   * Paints the slider button of the ScrollBar.
+   *
+   * @param g the Graphics context to use
+   * @param c the JComponent on which we paint
+   * @param thumbBounds the rectangle that is the slider button
+   */
+  protected void paintThumb(Graphics g, JComponent c, Rectangle thumbBounds)
+  {
+    // first we fill the background
+    g.setColor(thumbColor);
+    g.fillRect(thumbBounds.x, thumbBounds.y, thumbBounds.width,
+               thumbBounds.height);
+
+    // draw the outer dark line
+    g.setColor(thumbDarkShadowColor);
+    g.drawRect(thumbBounds.x, thumbBounds.y, thumbBounds.width - 1,
+               thumbBounds.height - 1);
+
+    // draw the inner light line
+    g.setColor(thumbHighlightColor);
+    g.drawLine(thumbBounds.x + 1, thumbBounds.y + 1,
+               thumbBounds.x + thumbBounds.width - 2,
+               thumbBounds.y + 1);
+    g.drawLine(thumbBounds.x + 1, thumbBounds.y + 1,
+               thumbBounds.x + 1,
+               thumbBounds.y + thumbBounds.height - 2);
+
+    // draw the shadow line
+    UIDefaults def = UIManager.getLookAndFeelDefaults();
+    g.setColor(def.getColor("ScrollBar.shadow"));
+    g.drawLine(thumbBounds.x + 1, thumbBounds.y + thumbBounds.height,
+               thumbBounds.x + thumbBounds.width,
+               thumbBounds.y + thumbBounds.height);
+
+    // draw the pattern
+    int xOff = 0;
+    for (int y = thumbBounds.y + 4;
+         y < (thumbBounds.y + thumbBounds.height - 4); y++)
+      {
+        // set color alternating with every line
+        if ((y % 2) == 0)
+          g.setColor(thumbHighlightColor);
+        else
+          g.setColor(thumbDarkShadowColor);
+
+        for (int x = thumbBounds.x + 3 + (xOff);
+             x < (thumbBounds.x + thumbBounds.width - 3); x = x + 4)
+          {
+            g.drawLine(x, y, x, y);
+          }
+
+        // increase x offset
+        xOff++;
+        if (xOff > 3)
+          xOff = 0;
+
+      }
+  }
+
+  /**
+   * This method returns the minimum thumb size.
+   *
+   * @return The minimum thumb size.
+   */
+  protected Dimension getMinimumThumbSize()
+  {
+    return MIN_THUMB_SIZE;
+  }
+}
Index: libjava/javax/swing/plaf/metal/MetalScrollPaneUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalScrollPaneUI.java
diff -N libjava/javax/swing/plaf/metal/MetalScrollPaneUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalScrollPaneUI.java	9 Jul 2005 22:10:17 -0000
@@ -0,0 +1,74 @@
+/* MetalScrollPaneUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicScrollPaneUI;
+
+public class MetalScrollPaneUI
+  extends BasicScrollPaneUI
+{
+
+  // FIXME: maybe replace by a Map of instances when this becomes stateful
+  /** The shared UI instance for JScrollPanes. */
+  private static MetalScrollPaneUI instance = null;
+
+  /**
+   * Constructs a new instance of MetalScrollPaneUI.
+   */
+  public MetalScrollPaneUI()
+  {
+    super();
+  }
+
+  /**
+   * Returns an instance of MetalScrollPaneUI.
+   *
+   * @param component the component for which we return an UI instance
+   *
+   * @return an instance of MetalScrollPaneUI
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instance == null)
+      instance = new MetalScrollPaneUI();
+    return instance;
+  }
+}
Index: libjava/javax/swing/plaf/metal/MetalSeparatorUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalSeparatorUI.java
diff -N libjava/javax/swing/plaf/metal/MetalSeparatorUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalSeparatorUI.java	9 Jul 2005 22:10:17 -0000
@@ -0,0 +1,74 @@
+/* MetalSeparatorUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicSeparatorUI;
+
+public class MetalSeparatorUI
+  extends BasicSeparatorUI
+{
+
+  // FIXME: maybe replace by a Map of instances when this becomes stateful
+  /** The shared UI instance for MetalSeparatorUIs */
+  private static MetalSeparatorUI instance = null;
+
+  /**
+   * Constructs a new instance of MetalSeparatorUI.
+   */
+  public MetalSeparatorUI()
+  {
+    super();
+  }
+
+  /**
+   * Returns an instance of MetalSeparatorUI.
+   *
+   * @param component the component for which we return an UI instance
+   *
+   * @return an instance of MetalSeparatorUI
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instance == null)
+      instance = new MetalSeparatorUI();
+    return instance;
+  }
+}
Index: libjava/javax/swing/plaf/metal/MetalSliderUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalSliderUI.java
diff -N libjava/javax/swing/plaf/metal/MetalSliderUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalSliderUI.java	9 Jul 2005 22:10:17 -0000
@@ -0,0 +1,87 @@
+/* MetalSliderUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import java.util.HashMap;
+
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicSliderUI;
+
+public class MetalSliderUI
+  extends BasicSliderUI
+{
+
+  /** The UI instances for MetalSliderUIs */
+  private static HashMap instances;
+
+  /**
+   * Constructs a new instance of MetalSliderUI.
+   */
+  public MetalSliderUI()
+  {
+    super(null);
+  }
+
+  /**
+   * Returns an instance of MetalSliderUI.
+   *
+   * @param component the component for which we return an UI instance
+   *
+   * @return an instance of MetalSliderUI
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instances == null)
+      instances = new HashMap();
+
+
+    Object o = instances.get(component);
+    MetalSliderUI instance;
+    if (o == null)
+      {
+	instance = new MetalSliderUI();
+	instances.put(component, instance);
+      }
+    else
+      instance = (MetalSliderUI) o;
+
+    return instance;
+  }
+}
Index: libjava/javax/swing/plaf/metal/MetalSplitPaneUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalSplitPaneUI.java
diff -N libjava/javax/swing/plaf/metal/MetalSplitPaneUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalSplitPaneUI.java	9 Jul 2005 22:10:17 -0000
@@ -0,0 +1,86 @@
+/* MetalSplitPaneUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import java.util.HashMap;
+
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicSplitPaneUI;
+
+public class MetalSplitPaneUI
+  extends BasicSplitPaneUI
+{
+
+  /** The UI instances for MetalSplitPaneUIs */
+  private static HashMap instances;
+
+  /**
+   * Constructs a new instance of MetalSplitPaneUI.
+   */
+  public MetalSplitPaneUI()
+  {
+    super();
+  }
+
+  /**
+   * Returns an instance of MetalSplitPaneUI.
+   *
+   * @param component the component for which we return an UI instance
+   *
+   * @return an instance of MetalSplitPaneUI
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instances == null)
+      instances = new HashMap();
+
+    Object o = instances.get(component);
+    MetalSplitPaneUI instance;
+    if (o == null)
+      {
+	instance = new MetalSplitPaneUI();
+	instances.put(component, instance);
+      }
+    else
+      instance = (MetalSplitPaneUI) o;
+
+    return instance;
+  }
+}
Index: libjava/javax/swing/plaf/metal/MetalTabbedPaneUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalTabbedPaneUI.java
diff -N libjava/javax/swing/plaf/metal/MetalTabbedPaneUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalTabbedPaneUI.java	9 Jul 2005 22:10:17 -0000
@@ -0,0 +1,86 @@
+/* MetalTabbedPaneUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import java.util.HashMap;
+
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicTabbedPaneUI;
+
+public class MetalTabbedPaneUI
+  extends BasicTabbedPaneUI
+{
+
+  /** The shared UI instance for JTabbedPanes. */
+  private static HashMap instances = null;
+
+  /**
+   * Constructs a new instance of MetalTabbedPaneUI.
+   */
+  public MetalTabbedPaneUI()
+  {
+    super();
+  }
+
+  /**
+   * Returns an instance of MetalTabbedPaneUI.
+   *
+   * @param component the component for which we return an UI instance
+   *
+   * @return an instance of MetalTabbedPaneUI
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instances == null)
+      instances = new HashMap();
+
+    Object o = instances.get(component);
+    MetalTabbedPaneUI instance;
+    if (o == null)
+      {
+	instance = new MetalTabbedPaneUI();
+	instances.put(component, instance);
+      }
+    else
+      instance = (MetalTabbedPaneUI) o;
+
+    return instance;
+  }
+}
Index: libjava/javax/swing/plaf/metal/MetalTextFieldUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalTextFieldUI.java
diff -N libjava/javax/swing/plaf/metal/MetalTextFieldUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalTextFieldUI.java	9 Jul 2005 22:10:17 -0000
@@ -0,0 +1,86 @@
+/* MetalTextFieldUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import java.util.HashMap;
+
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicTextFieldUI;
+
+public class MetalTextFieldUI
+  extends BasicTextFieldUI
+{
+
+  /** The UI instances for MetalTextFieldUIs */
+  private static HashMap instances = null;
+
+  /**
+   * Constructs a new instance of MetalTextFieldUI.
+   */
+  public MetalTextFieldUI()
+  {
+    super();
+  }
+
+  /**
+   * Returns an instance of MetalTextFieldUI.
+   *
+   * @param component the component for which we return an UI instance
+   *
+   * @return an instance of MetalTextFieldUI
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instances == null)
+      instances = new HashMap();
+
+    Object o = instances.get(component);
+    MetalTextFieldUI instance;
+    if (o == null)
+      {
+	instance = new MetalTextFieldUI();
+	instances.put(component, instance);
+      }
+    else
+      instance = (MetalTextFieldUI) o;
+
+    return instance;
+  }
+}
Index: libjava/javax/swing/plaf/metal/MetalToggleButtonUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalToggleButtonUI.java
diff -N libjava/javax/swing/plaf/metal/MetalToggleButtonUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalToggleButtonUI.java	9 Jul 2005 22:10:17 -0000
@@ -0,0 +1,74 @@
+/* MetalToggleButtonUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicToggleButtonUI;
+
+public class MetalToggleButtonUI
+  extends BasicToggleButtonUI
+{
+
+  // FIXME: maybe replace by a Map of instances when this becomes stateful
+  /** The shared UI instance for MetalToggleButtonUIs */
+  private static MetalToggleButtonUI instance = null;
+
+  /**
+   * Constructs a new instance of MetalToggleButtonUI.
+   */
+  public MetalToggleButtonUI()
+  {
+    super();
+  }
+
+  /**
+   * Returns an instance of MetalToggleButtonUI.
+   *
+   * @param component the component for which we return an UI instance
+   *
+   * @return an instance of MetalToggleButtonUI
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instance == null)
+      instance = new MetalToggleButtonUI();
+    return instance;
+  }
+}
Index: libjava/javax/swing/plaf/metal/MetalToolBarUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalToolBarUI.java
diff -N libjava/javax/swing/plaf/metal/MetalToolBarUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalToolBarUI.java	9 Jul 2005 22:10:17 -0000
@@ -0,0 +1,74 @@
+/* MetalToolBarUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicToolBarUI;
+
+public class MetalToolBarUI
+  extends BasicToolBarUI
+{
+
+  // FIXME: maybe replace by a Map of instances when this becomes stateful
+  /** The shared UI instance for MetalToolBarUIs */
+  private static MetalToolBarUI instance = null;
+
+  /**
+   * Constructs a new instance of MetalToolBarUI.
+   */
+  public MetalToolBarUI()
+  {
+    super();
+  }
+
+  /**
+   * Returns an instance of MetalToolBarUI.
+   *
+   * @param component the component for which we return an UI instance
+   *
+   * @return an instance of MetalToolBarUI
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instance == null)
+      instance = new MetalToolBarUI();
+    return instance;
+  }
+}
Index: libjava/javax/swing/plaf/metal/MetalToolTipUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalToolTipUI.java
diff -N libjava/javax/swing/plaf/metal/MetalToolTipUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalToolTipUI.java	9 Jul 2005 22:10:17 -0000
@@ -0,0 +1,74 @@
+/* MetalToolTipUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicToolTipUI;
+
+public class MetalToolTipUI
+  extends BasicToolTipUI
+{
+
+  // FIXME: maybe replace by a Map of instances when this becomes stateful
+  /** The shared UI instance for MetalToolTipUIs */
+  private static MetalToolTipUI instance = null;
+
+  /**
+   * Constructs a new instance of MetalToolTipUI.
+   */
+  public MetalToolTipUI()
+  {
+    super();
+  }
+
+  /**
+   * Returns an instance of MetalToolTipUI.
+   *
+   * @param component the component for which we return an UI instance
+   *
+   * @return an instance of MetalToolTipUI
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instance == null)
+      instance = new MetalToolTipUI();
+    return instance;
+  }
+}
Index: libjava/javax/swing/plaf/metal/MetalTreeUI.java
===================================================================
RCS file: libjava/javax/swing/plaf/metal/MetalTreeUI.java
diff -N libjava/javax/swing/plaf/metal/MetalTreeUI.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/plaf/metal/MetalTreeUI.java	9 Jul 2005 22:10:17 -0000
@@ -0,0 +1,74 @@
+/* MetalTreeUI.java
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.plaf.metal;
+
+import javax.swing.JComponent;
+import javax.swing.plaf.ComponentUI;
+import javax.swing.plaf.basic.BasicTreeUI;
+
+public class MetalTreeUI
+  extends BasicTreeUI
+{
+
+  // FIXME: maybe replace by a Map of instances when this becomes stateful
+  /** The shared UI instance for MetalTreeUIs */
+  private static MetalTreeUI instance = null;
+
+  /**
+   * Constructs a new instance of MetalTreeUI.
+   */
+  public MetalTreeUI()
+  {
+    super();
+  }
+
+  /**
+   * Returns an instance of MetalTreeUI.
+   *
+   * @param component the component for which we return an UI instance
+   *
+   * @return an instance of MetalTreeUI
+   */
+  public static ComponentUI createUI(JComponent component)
+  {
+    if (instance == null)
+      instance = new MetalTreeUI();
+    return instance;
+  }
+}
Index: libjava/javax/swing/table/DefaultTableCellRenderer.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/table/DefaultTableCellRenderer.java,v
retrieving revision 1.8
diff -u -r1.8 DefaultTableCellRenderer.java
--- libjava/javax/swing/table/DefaultTableCellRenderer.java	16 Feb 2005 20:03:05 -0000	1.8
+++ libjava/javax/swing/table/DefaultTableCellRenderer.java	9 Jul 2005 22:10:17 -0000
@@ -122,10 +122,14 @@
                                                  boolean hasFocus,
                                                  int row, int column)
   {
-    if (value!=null)
+    if (value != null)
       super.setText(value.toString());
 
     setOpaque(true);
+
+    if (table == null)
+      return this;
+
     if (isSelected)
       {
         setBackground(table.getSelectionBackground());
Index: libjava/javax/swing/text/AbstractDocument.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/text/AbstractDocument.java,v
retrieving revision 1.10
diff -u -r1.10 AbstractDocument.java
--- libjava/javax/swing/text/AbstractDocument.java	16 Feb 2005 20:03:09 -0000	1.10
+++ libjava/javax/swing/text/AbstractDocument.java	9 Jul 2005 22:10:17 -0000
@@ -43,6 +43,7 @@
 import java.util.Dictionary;
 import java.util.Enumeration;
 import java.util.EventListener;
+import java.util.Hashtable;
 import java.util.Vector;
 
 import javax.swing.event.DocumentEvent;
@@ -71,7 +72,10 @@
   Content content;
   AttributeContext context;
   DocumentFilter documentFilter;
-  
+
+  /** The documents properties. */
+  Dictionary properties;
+
   protected EventListenerList listenerList = new EventListenerList();
 
   protected AbstractDocument(Content doc)
@@ -175,7 +179,11 @@
 
   public Dictionary getDocumentProperties()
   {
-    return null;
+    // FIXME: make me thread-safe
+    if (properties == null)
+      properties = new Hashtable();
+
+    return properties;
   }
 
   public Position getEndPosition()
@@ -201,7 +209,12 @@
 
   public Object getProperty(Object key)
   {
-    return null;
+    // FIXME: make me thread-safe
+    Object value = null;
+    if (properties != null)
+      value = properties.get(key);
+
+    return value;
   }
 
   public Element[] getRootElements()
@@ -258,6 +271,11 @@
 
   public void putProperty(Object key, Object value)
   {
+    // FIXME: make me thread-safe
+    if (properties == null)
+      properties = new Hashtable();
+
+    properties.put(key, value);
   }
 
   public void readLock()
@@ -366,6 +384,8 @@
 
   public void setDocumentProperties(Dictionary x)
   {
+    // FIXME: make me thread-safe
+    properties = x;
   }
 
   protected void writeLock()
@@ -827,8 +847,8 @@
   public class LeafElement extends AbstractElement
   {
     private static final long serialVersionUID = 5115368706941283802L;
-    private int start;
-    private int end;
+    int start;
+    int end;
 
     public LeafElement(Element parent, AttributeSet attributes, int start,
                        int end)
Index: libjava/javax/swing/text/ChangedCharSetException.java
===================================================================
RCS file: libjava/javax/swing/text/ChangedCharSetException.java
diff -N libjava/javax/swing/text/ChangedCharSetException.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/ChangedCharSetException.java	9 Jul 2005 22:10:17 -0000
@@ -0,0 +1,100 @@
+/* ChangedCharSetException.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.text;
+
+import java.io.IOException;
+import java.io.Serializable;
+
+/**
+ * The exception is thrown when the document charset is changed.
+ *
+ * @author Audrius Meskauskas (AudriusA@Bioinformatics.org)
+ */
+public class ChangedCharSetException
+  extends IOException
+  implements Serializable
+{
+  /**
+   * Use serialVersionUID for interoperability.
+   * This value corresponds the version 1.4.
+   */
+  private static final long serialVersionUID = 9119851554465432389L;
+
+  /**
+   * The char set specification.
+   */
+  private final String m_charSetSpec;
+
+  /**
+   * The char set key.
+   */
+  private final boolean m_charSetKey;
+
+  /**
+   * Constructs a new char set exception with two additional parameters,
+   * defining the circumstances under that the exception was raised.
+   */
+  public ChangedCharSetException(String charSetSpec, boolean charSetKey)
+  {
+    m_charSetSpec = charSetSpec;
+    m_charSetKey = charSetKey;
+  }
+
+  /**
+   * Get the value of the first parameter, previously passed to the
+   * constructor.
+   *
+   * @return the value of the first parameter
+   */
+  public String getCharSetSpec()
+  {
+    return m_charSetSpec;
+  }
+
+  /**
+   * Get the value of the second parameter, previously passed to the
+   * constructor.
+   *
+   * @return the value of the second parameter
+   */
+  public boolean keyEqualsCharSet()
+  {
+    return m_charSetKey;
+  }
+}
Index: libjava/javax/swing/text/DefaultCaret.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/text/DefaultCaret.java,v
retrieving revision 1.9
diff -u -r1.9 DefaultCaret.java
--- libjava/javax/swing/text/DefaultCaret.java	30 Nov 2004 23:59:07 -0000	1.9
+++ libjava/javax/swing/text/DefaultCaret.java	9 Jul 2005 22:10:17 -0000
@@ -63,7 +63,7 @@
   private JTextComponent textComponent;
   
   private boolean selectionVisible = true;
-  private int blinkRate = 0;
+  private int blinkRate = 500;
   private int dot = 0;
   private int mark = 0;
   private Point magicCaretPosition = null;
Index: libjava/javax/swing/text/DefaultEditorKit.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/text/DefaultEditorKit.java,v
retrieving revision 1.8
diff -u -r1.8 DefaultEditorKit.java
--- libjava/javax/swing/text/DefaultEditorKit.java	16 Feb 2005 20:03:09 -0000	1.8
+++ libjava/javax/swing/text/DefaultEditorKit.java	9 Jul 2005 22:10:17 -0000
@@ -92,6 +92,16 @@
     }
   }
 
+  /**
+   * This action is executed as default action when a KEY_TYPED
+   * event is received and no keymap entry exists for that. The purpose
+   * of this action is to filter out a couple of characters. This includes
+   * the control characters and characters with the ALT-modifier.
+   * 
+   * If an event does not get filtered, it is inserted into the document
+   * of the text component. If there is some text selected in the text component,
+   * this text will be replaced.
+   */
   public static class DefaultKeyTypedAction 
     extends TextAction
   {
@@ -102,6 +112,13 @@
 
     public void actionPerformed(ActionEvent event)
     {
+      // first we filter the following events:
+      // - control characters
+      // - key events with the ALT modifier (FIXME: filter that too!)
+      char c = event.getActionCommand().charAt(0);
+      if (Character.isISOControl(c))
+        return;
+
       JTextComponent t = getTextComponent(event);
       if (t != null)
         {
@@ -110,7 +127,6 @@
               t.getDocument().insertString(t.getCaret().getDot(), event.getActionCommand(), null);
               t.getCaret().setDot(Math.min(t.getCaret().getDot() + 1,
                                            t.getDocument().getEndPosition().getOffset()));
-              t.repaint();
             }
           catch (BadLocationException be)
             {
@@ -120,6 +136,11 @@
     }
   }
 
+  /**
+   * This action inserts a newline character into the document
+   * of the text component. This is typically triggered by hitting
+   * ENTER on the keyboard.
+   */
   public static class InsertBreakAction 
     extends TextAction
   {
@@ -130,6 +151,8 @@
 
     public void actionPerformed(ActionEvent event)
     {
+      JTextComponent t = getTextComponent(event);
+      t.replaceSelection("\n");
     }
   }
 
@@ -251,7 +274,6 @@
                 if (pos < t.getDocument().getEndPosition().getOffset())
                   {
                     t.getDocument().remove(t.getCaret().getDot(), 1);
-                    t.repaint();
                   }
               }
             catch (BadLocationException e)
@@ -275,7 +297,6 @@
                   {
                     t.getDocument().remove(pos - 1, 1);
                     t.getCaret().setDot(pos - 1);
-                    t.repaint();
                   }
               }
             catch (BadLocationException e)
Index: libjava/javax/swing/text/DefaultFormatter.java
===================================================================
RCS file: libjava/javax/swing/text/DefaultFormatter.java
diff -N libjava/javax/swing/text/DefaultFormatter.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/DefaultFormatter.java	9 Jul 2005 22:10:17 -0000
@@ -0,0 +1,429 @@
+/* DefaultFormatter.java --
+Copyright (C) 2005  Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package javax.swing.text;
+
+import java.io.Serializable;
+import java.lang.reflect.Constructor;
+import java.text.ParseException;
+
+import javax.swing.JFormattedTextField;
+
+/**
+ * The <code>DefaultFormatter</code> is a concrete formatter for use in
+ * {@link JFormattedTextField}s.
+ *
+ * It can format arbitrary values by invoking
+ * their {@link Object#toString} method.
+ *
+ * In order to convert a String back to
+ * a value, the value class must provide a single argument constructor that
+ * takes a String object as argument value. If no such constructor is found,
+ * the String itself is passed back by #stringToValue.
+ *  
+ * @author Roman Kennke (roman@kennke.org)
+ */
+public class DefaultFormatter
+  extends JFormattedTextField.AbstractFormatter
+  implements Cloneable, Serializable
+{
+
+  /**
+   * A {@link DocumentFilter} that intercepts modification of the
+   * JFormattedTextField's Document and commits the value depending
+   * on the value of the <code>commitsOnValidEdit</code> property.
+   *
+   */
+  // FIXME: Handle allowsInvalid and overwriteMode properties
+  private class FormatterDocumentFilter
+    extends DocumentFilter
+  {
+    /**
+     * Invoked when text is removed from a text component.
+     *
+     * @param bypass the FilterBypass to use to mutate the document
+     * @param offset the start position of the modification
+     * @param length the length of the removed text
+     *
+     * @throws BadLocationException if offset or lenght are invalid in
+     *     the Document
+     */
+    public void remove(DocumentFilter.FilterBypass bypass, int offset,
+                        int length)
+      throws BadLocationException
+    {
+      super.remove(bypass, offset, length);
+      checkValidInput();
+      commitIfAllowed();
+    }
+    
+    /**
+     * Invoked when text is inserted into a text component.
+     *
+     * @param bypass the FilterBypass to use to mutate the document
+     * @param offset the start position of the modification
+     * @param text the inserted text
+     * @param attributes the attributes of the inserted text
+     *
+     * @throws BadLocationException if offset or lenght are invalid in
+     *     the Document
+     */
+    public void insertString(DocumentFilter.FilterBypass bypass, int offset,
+                              String text, AttributeSet attributes)
+      throws BadLocationException
+    {
+      if (overwriteMode == true)
+        replace(bypass, offset, text.length(), text, attributes);
+      else
+        super.insertString(bypass, offset, text, attributes);
+      checkValidInput();
+      commitIfAllowed();
+    }
+
+    /**
+     * Invoked when text is replaced in a text component.
+     * 
+     * @param bypass the FilterBypass to use to mutate the document
+     * @param offset the start position of the modification
+     * @param length the length of the removed text
+     * @param text the inserted text
+     * @param attributes the attributes of the inserted text
+     *
+     * @throws BadLocationException if offset or lenght are invalid in
+     *     the Document
+     */
+    public void replace(DocumentFilter.FilterBypass bypass, int offset,
+                         int length, String text, AttributeSet attributes)
+      throws BadLocationException
+    {
+      super.replace(bypass, offset, length, text, attributes);
+      checkValidInput();
+      commitIfAllowed();
+    }
+
+    /**
+     * Commits the value to the JTextTextField if the property
+     * <code>commitsOnValidEdit</code> is set to <code>true</code>.
+     */
+    private void commitIfAllowed()
+    {
+      if (commitsOnValidEdit == true)
+        try
+          {
+            getFormattedTextField().commitEdit();
+          }
+        catch (ParseException ex)
+          {
+            // ignore invalid edits
+          }
+    }
+
+    /**
+     * Checks if the value in the input field is valid. If the
+     * property allowsInvalid is set to <code>false</code>, then
+     * the string in the input field is not allowed to be entered.
+     *
+     * @param doc the document of the input field
+     * @param value the current (old) value of the input field
+     */
+    private void checkValidInput()
+    {
+      JFormattedTextField ftf = getFormattedTextField();
+      try
+        {
+          Object newval = stringToValue(ftf.getText());
+        }
+      catch (ParseException ex)
+        {
+          if (!allowsInvalid)
+            {
+              // roll back the input if invalid edits are not allowed
+              try
+                {
+                  ftf.setText(valueToString(ftf.getValue()));
+                }
+              catch (ParseException pe)
+                {
+                  // if that happens, something serious must be wrong
+                  throw new AssertionError("values must be parseable");
+                }
+            }
+        }
+    }
+  }
+
+  /** The serialVersoinUID. */
+  private static final long serialVersionUID = -7369196326612908900L;
+
+  /**
+   * Indicates if the value should be committed after every
+   * valid modification of the Document.
+   */
+  boolean commitsOnValidEdit;
+
+  /**
+   * If <code>true</code> newly inserted characters overwrite existing
+   * values, otherwise insertion is done the normal way.
+   */
+  boolean overwriteMode;
+
+  /**
+   * If <code>true</code> invalid edits are allowed for a limited
+   * time.
+   */
+  boolean allowsInvalid;
+
+  /**
+   * The class that is used for values.
+   */
+  Class valueClass;
+
+  /**
+   * Creates a new instance of <code>DefaultFormatter</code>.
+   */
+  public DefaultFormatter()
+  {
+    commitsOnValidEdit = true;
+    overwriteMode = true;
+    allowsInvalid = true;
+    valueClass = Object.class;
+  }
+
+  /**
+   * Installs the formatter on the specified {@link JFormattedTextField}.
+   *
+   * This method does the following things:
+   * <ul>
+   * <li>Display the value of #valueToString in the
+   *  <code>JFormattedTextField</code></li>
+   * <li>Install the Actions from #getActions on the <code>JTextField</code>
+   * </li>
+   * <li>Install the DocumentFilter returned by #getDocumentFilter</li>
+   * <li>Install the NavigationFilter returned by #getNavigationFilter</li>
+   * </ul>
+   *
+   * This method is typically not overridden by subclasses. Instead override
+   * one of the mentioned methods in order to customize behaviour.
+   *
+   * @param ftf the {@link JFormattedTextField} in which this formatter
+   *     is installed 
+   */
+  public void install(JFormattedTextField ftf)
+  {
+    super.install(ftf);
+  }
+
+  /**
+   * Returns <code>true</code> if the value should be committed after
+   * each valid modification of the input field, <code>false</code> if
+   * it should never be committed by this formatter.
+   *
+   * @return the state of the <code>commitsOnValidEdit</code> property
+   *
+   * @see #setCommitsOnValidEdit
+   */
+  public boolean getCommitsOnValidEdit()
+  {
+    return commitsOnValidEdit;
+  }
+
+  /**
+   * Sets the value of the <code>commitsOnValidEdit</code> property.
+   *
+   * @param commitsOnValidEdit the new state of the
+   *     <code>commitsOnValidEdit</code> property
+   *
+   * @see #getCommitsOnValidEdit
+   */
+  public void setCommitsOnValidEdit(boolean commitsOnValidEdit)
+  {
+    this.commitsOnValidEdit = commitsOnValidEdit;
+  }
+
+  /**
+   * Returns the value of the <code>overwriteMode</code> property.
+   * If that is set to <code>true</code> then newly inserted characters
+   * overwrite existing values, otherwise the characters are inserted like
+   * normal. The default is <code>true</code>.
+   *
+   * @return the value of the <code>overwriteMode</code> property
+   */
+  public boolean getOverwriteMode()
+  {
+    return overwriteMode;
+  }
+
+  /**
+   * Sets the value of the <code>overwriteMode</code> property.
+   * 
+   * If that is set to <code>true</code> then newly inserted characters
+   * overwrite existing values, otherwise the characters are inserted like
+   * normal. The default is <code>true</code>.
+   *
+   * @param overwriteMode the new value for the <code>overwriteMode</code>
+   *     property
+   */
+  public void setOverwriteMode(boolean overwriteMode)
+  {
+    this.overwriteMode = overwriteMode;
+  }
+
+  /**
+   * Returns whether or not invalid edits are allowed or not. If invalid
+   * edits are allowed, the JFormattedTextField may temporarily contain invalid
+   * characters.
+   *
+   * @return the value of the allowsInvalid property
+   */
+  public boolean getAllowsInvalid()
+  {
+    return allowsInvalid;
+  }
+
+  /**
+   * Sets the value of the <code>allowsInvalid</code> property.
+   *
+   * @param allowsInvalid the new value for the property
+   *
+   * @see #getAllowsInvalid()
+   */
+  public void setAllowsInvalid(boolean allowsInvalid)
+  {
+    this.allowsInvalid = allowsInvalid;
+  }
+
+  /**
+   * Returns the class that is used for values. When Strings are converted
+   * back to values, this class is used to create new value objects.
+   *
+   * @return the class that is used for values
+   */
+  public Class getValueClass()
+  {
+    return valueClass;
+  }
+
+  /**
+   * Sets the class that is used for values.
+   *
+   * @param valueClass the class that is used for values
+   *
+   * @see #getValueClass()
+   */
+  public void setValueClass(Class valueClass)
+  {
+    this.valueClass = valueClass;
+  }
+
+  /**
+   * Converts a String (from the JFormattedTextField input) to a value.
+   * In order to achieve this, the formatter tries to instantiate an object
+   * of the class returned by #getValueClass() using a single argument
+   * constructor that takes a String argument. If such a constructor cannot
+   * be found, the String itself is returned.
+   *
+   * @param string the string to convert
+   *
+   * @return the value for the string
+   *
+   * @throws ParseException if the string cannot be converted into
+   *     a value object (e.g. invalid input)
+   */
+  public Object stringToValue(String string)
+    throws ParseException
+  {
+    Object value = string;
+    Class valueClass = getValueClass();
+    if (valueClass == null)
+      valueClass = getFormattedTextField().getValue().getClass();
+    if (valueClass != null)
+      try
+        {
+          Constructor constr = valueClass.getConstructor
+                                             (new Class[]{String.class});
+          value = constr.newInstance(new Object[]{ string });
+        }
+      catch (NoSuchMethodException ex)
+        {
+          // leave value as string
+        }
+      catch (Exception ex)
+        {
+          throw new ParseException(string, 0);
+        }
+    return value;
+  }
+
+  /**
+   * Converts a value object into a String. This is done by invoking the
+   * {@link Object#toString()} method on the value.
+   *
+   * @param value the value to be converted
+   *
+   * @return the string representation of the value
+   *
+   * @throws ParseException if the value cannot be converted
+   */
+  public String valueToString(Object value)
+    throws ParseException
+  {
+    return value.toString();
+  }
+
+  /**
+   * Creates and returns a clone of this DefaultFormatter.
+   *
+   * @return a clone of this object
+   *
+   * @throws CloneNotSupportedException not thrown here
+   */
+  public Object clone()
+    throws CloneNotSupportedException
+  {
+    return super.clone();
+  }
+
+  /**
+   * Returns the DocumentFilter that is used to restrict input.
+   *
+   * @return the DocumentFilter that is used to restrict input
+   */
+  protected DocumentFilter getDocumentFilter()
+  {
+    return new FormatterDocumentFilter();
+  }
+}
Index: libjava/javax/swing/text/DefaultStyledDocument.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/text/DefaultStyledDocument.java,v
retrieving revision 1.2
diff -u -r1.2 DefaultStyledDocument.java
--- libjava/javax/swing/text/DefaultStyledDocument.java	16 Feb 2005 20:03:10 -0000	1.2
+++ libjava/javax/swing/text/DefaultStyledDocument.java	9 Jul 2005 22:10:17 -0000
@@ -181,8 +181,15 @@
   
   public void setLogicalStyle(int position, Style style)
   {
-    // FIXME: Implement me.
-    throw new Error("not implemented");
+    Element el = getParagraphElement(position);
+    if (el instanceof AbstractElement)
+      {
+        AbstractElement ael = (AbstractElement) el;
+        ael.setResolveParent(style);
+      }
+    else
+      throw new AssertionError("paragraph elements are expected to be"
+         + "instances of javax.swing.text.AbstractDocument.AbstractElement");
   }
 
   public void setParagraphAttributes(int offset, int length,
Index: libjava/javax/swing/text/Document.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/text/Document.java,v
retrieving revision 1.7
diff -u -r1.7 Document.java
--- libjava/javax/swing/text/Document.java	30 Nov 2004 23:59:07 -0000	1.7
+++ libjava/javax/swing/text/Document.java	9 Jul 2005 22:10:17 -0000
@@ -1,5 +1,5 @@
 /* Document.java --
-   Copyright (C) 2002, 2004 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -40,48 +40,182 @@
 import javax.swing.event.DocumentListener;
 import javax.swing.event.UndoableEditListener;
 
-
+/**
+ * A Document is the model that backs up all text components in Swing.
+ * This interface supports different kinds of implementations, from
+ * simple plain text model up to complex styled HTML or RTF models.
+ */
 public interface Document
 {
+  /**
+   * The key for the property that describes the source of a document.
+   */
   String StreamDescriptionProperty = "stream";
+
+  /**
+   * The key for the property that is the title of a document.
+   */
   String TitleProperty = "title";
 
+  /**
+   * Adds a {@link DocumentListener} to this document.
+   *
+   * @param listener the DocumentListener to add
+   */
   void addDocumentListener(DocumentListener listener);
 
+  /**
+   * Adds an {@link UndoableEditListener} to this document.
+   *
+   * @param listener the UndoableEditListener to add
+   */
   void addUndoableEditListener(UndoableEditListener listener);
 
+  /**
+   * Creates a mark in the character content at the specified offset.
+   *
+   * @param offs the offset where to place the mark
+   *
+   * @return the created Position object
+   *
+   * @throws BadLocationException of the specified offset is not a valid
+   *         position in the documents content
+   */
   Position createPosition(int offs)
     throws BadLocationException;
 
+  /**
+   * Returns the default root element. Views should be using this element
+   * unless other mechanisms for assigning views to element structure is
+   * provided.
+   *
+   * @return the default root element
+   */
   Element getDefaultRootElement();
 
+  /**
+   * Returns the position that marks the end of the document.
+   *
+   * @return the position that marks the end of the document
+   */
   Position getEndPosition();
 
+  /**
+   * Returns the length of the document content.
+   *
+   * @return the length of the document content
+   */
   int getLength();
 
+  /**
+   * Returns a document property with the specified key.
+   *
+   * @param key the (non-null) key for the property to fetch
+   *
+   * @return the property for <code>key</code> or null if no such property
+   *         is stored
+   */
   Object getProperty(Object key);
 
+  /**
+   * Returns the root elements of the document content.
+   *
+   * @return the root elements of the document content
+   */
   Element[] getRootElements();
 
+  /**
+   * Returns the position that marks the beginning of the document
+   * content.
+   *
+   * @return the start position
+   */
   Position getStartPosition();
 
+  /**
+   * Returns the textual content starting at <code>offset</code> with
+   * a length of <code>length</code>.
+   *
+   * @param offset the beginning of the text fragment to fetch
+   * @param length the length of the text fragment to fetch
+   *
+   * @return the text fragment starting at <code>offset</code> with
+   *         a length of <code>length</code>
+   *
+   * @throws BadLocationException if <code>offset</code> or <code>length</code>
+   *         are no valid locations in the document content
+   */
   String getText(int offset, int length)
     throws BadLocationException;
 
+  /**
+   * Fetch the textual content starting at <code>offset</code> with
+   * a length of <code>length</code> and store it in <code>txt</code>.
+   *
+   * @param offset the beginning of the text fragment to fetch
+   * @param length the length of the text fragment to fetch
+   * @param txt the Segment where to store the text fragment
+   *
+   * @throws BadLocationException if <code>offset</code> or <code>length</code>
+   *         are no valid locations in the document content
+   */
   void getText(int offset, int length, Segment txt)
     throws BadLocationException;
 
+  /**
+   * Inserts a piece of text with an AttributeSet at the specified
+   * <code>offset</code>.
+   *
+   * @param offset the location where to insert the content
+   * @param str the textual content to insert
+   * @param a the Attributes associated with the piece of text
+   *
+   * @throws BadLocationException if <code>offset</code>
+   *         is not a valid location in the document content
+   */
   void insertString(int offset, String str, AttributeSet a)
     throws BadLocationException;
 
+  /**
+   * Sets a document property.
+   *
+   * @param key the key of the property
+   * @param value the value of the property
+   */
   void putProperty(Object key, Object value);
 
+  /**
+   * Removes a piece of content.
+   *
+   * @param offs the location of the fragment to remove
+   * @param len the length of the fragment to remove
+   *
+   * @throws BadLocationException if <code>offs</code> or <code>len</code>
+   *         are no valid locations in the document content
+   */
   void remove(int offs, int len)
     throws BadLocationException;
 
+  /**
+   * Removes a DocumentListener from this Document.
+   *
+   * @param listener the DocumentListener to remove
+   */
   void removeDocumentListener(DocumentListener listener);
 
+  /**
+   * Removes an UndoableEditListener from this Document.
+   *
+   * @param listener the UndoableEditListener to remove
+   */
   void removeUndoableEditListener(UndoableEditListener listener);
 
+  /**
+   * This allows the Document to be rendered safely. It is made sure that
+   * the Runnable can read the document without any changes while reading.
+   * The Runnable is not allowed to change the Document itself.
+   *
+   * @param r the Runnable that renders the Document
+   */
   void render(Runnable r);
 }
Index: libjava/javax/swing/text/FieldView.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/text/FieldView.java,v
retrieving revision 1.4
diff -u -r1.4 FieldView.java
--- libjava/javax/swing/text/FieldView.java	30 Nov 2004 23:59:08 -0000	1.4
+++ libjava/javax/swing/text/FieldView.java	9 Jul 2005 22:10:17 -0000
@@ -39,10 +39,15 @@
 package javax.swing.text;
 
 import java.awt.Component;
+import java.awt.ComponentOrientation;
 import java.awt.FontMetrics;
 import java.awt.Graphics;
+import java.awt.Rectangle;
 import java.awt.Shape;
 
+import javax.swing.JTextField;
+import javax.swing.event.DocumentEvent;
+
 public class FieldView extends PlainView
 {
   public FieldView(Element elem)
@@ -56,6 +61,55 @@
     return container.getFontMetrics(container.getFont());
   }
 
+  /**
+   * Vertically centers the single line of text within the
+   * bounds of the input shape. The returned Rectangle is centered
+   * vertically within <code>shape</code> and has a height of the
+   * preferred span along the Y axis. Horizontal adjustment is done according
+   * to the horizontalAligment property of the component that is rendered.
+   *
+   * @param shape the shape within which the line is beeing centered
+   */
+  protected Shape adjustAllocation(Shape shape)
+  {
+    Rectangle rectIn = shape.getBounds();
+    // vertical adjustment
+    int height = (int) getPreferredSpan(Y_AXIS);
+    int y = rectIn.y + (rectIn.height - height) / 2;
+    // horizontal adjustment
+    JTextField textField = (JTextField) getContainer();
+    int halign = textField.getHorizontalAlignment();
+    int width = (int) getPreferredSpan(X_AXIS);
+    int x;
+    ComponentOrientation orientation = textField.getComponentOrientation();
+    switch (halign)
+      {
+      case JTextField.CENTER:
+        x = rectIn.x + (rectIn.width - width) / 2;
+        break;
+      case JTextField.RIGHT:
+        x = rectIn.x + (rectIn.width - width);
+        break;
+      case JTextField.TRAILING:
+        if (orientation.isLeftToRight())
+          x = rectIn.x + (rectIn.width - width);
+        else
+          x = rectIn.x;
+        break;
+      case JTextField.LEADING:
+        if (orientation.isLeftToRight())
+          x = rectIn.x;
+        else
+          x = rectIn.x + (rectIn.width - width);
+        break;
+      case JTextField.LEFT:
+      default:
+        x = rectIn.x;
+        break;
+      }
+    return new Rectangle(x, y, width, height);
+  }
+
   public float getPreferredSpan(int axis)
   {
     if (axis != X_AXIS && axis != Y_AXIS)
@@ -91,11 +145,32 @@
   public Shape modelToView(int pos, Shape a, Position.Bias bias)
     throws BadLocationException
   {
-    return super.modelToView(pos, a, bias);
+    Shape newAlloc = adjustAllocation(a);
+    return super.modelToView(pos, newAlloc, bias);
   }
   
   public void paint(Graphics g, Shape s)
   {
-    super.paint(g, s);
+    Shape newAlloc = adjustAllocation(s);
+    super.paint(g, newAlloc);
+  }
+
+  public void insertUpdate(DocumentEvent ev, Shape shape, ViewFactory vf)
+  {
+    Shape newAlloc = adjustAllocation(shape);
+    super.insertUpdate(ev, newAlloc, vf);
   }
+
+  public void removeUpdate(DocumentEvent ev, Shape shape, ViewFactory vf)
+  {
+    Shape newAlloc = adjustAllocation(shape);
+    super.removeUpdate(ev, newAlloc, vf);
+  }
+
+  public void changedUpdate(DocumentEvent ev, Shape shape, ViewFactory vf)
+  {
+    Shape newAlloc = adjustAllocation(shape);
+    super.removeUpdate(ev, newAlloc, vf);
+  }
+
 }
Index: libjava/javax/swing/text/GapContent.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/text/GapContent.java,v
retrieving revision 1.5
diff -u -r1.5 GapContent.java
--- libjava/javax/swing/text/GapContent.java	16 Feb 2005 20:03:11 -0000	1.5
+++ libjava/javax/swing/text/GapContent.java	9 Jul 2005 22:10:17 -0000
@@ -1,5 +1,5 @@
 /* GapContent.java --
-   Copyright (C) 2002, 2004 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -40,72 +40,317 @@
 
 import java.io.Serializable;
 
-// too lazy to make a real gapcontent.
-// lets just use a stringbuffer instead.
 import javax.swing.undo.UndoableEdit;
 
+/**
+ * This implementation of {@link AbstractDocument.Content} uses a gapped
+ * buffer. This takes advantage of the fact that text area content is
+ * mostly inserted sequentially. The buffer is a char array that maintains
+ * a gap at the current insertion point. If characters a inserted at
+ * gap boundaries, the cost is minimal (simple array access). The array only
+ * has to be shifted around when the insertion point moves (then the gap also
+ * moves and one array copy is necessary) or when the gap is filled up and
+ * the buffer has to be enlarged.
+ *
+ * TODO: Implement UndoableEdit support stuff
+ */
 public class GapContent
   implements AbstractDocument.Content, Serializable
 {
   private static final long serialVersionUID = 8374645204155842629L;
-    
-  StringBuffer buf = new StringBuffer();
 
+  /**
+   * This is the default buffer size and the amount of bytes that
+   * a buffer is extended if it is full.
+   */
+  static final int DEFAULT_BUFSIZE = 64;
+
+  /**
+   * The text buffer.
+   */
+  char[] buffer;
+
+  /**
+   * The index of the first character of the gap.
+   */
+  int gapStart;
+
+  /**
+   * The index of the character after the last character of the gap.
+   */
+  int gapEnd;
+
+  /**
+   * Creates a new GapContent object.
+   */
   public GapContent()
   {
-    this(10);
+    this(DEFAULT_BUFSIZE);
   }
 
+  /**
+   * Creates a new GapContent object with a specified initial size.
+   *
+   * @param size the initial size of the buffer
+   */
   public GapContent(int size)
   {
-    buf.append("\n");
+    buffer = (char[]) allocateArray(size);
+    gapStart = 0;
+    gapEnd = size - 1;
+    buffer[size - 1] = '\n';
   }
 
-  public Position createPosition(final int offset) throws BadLocationException
+  /**
+   * Allocates an array of the specified length that can then be used as
+   * buffer.
+   *
+   * @param size the size of the array to be allocated
+   *
+   * @return the allocated array
+   */
+  protected Object allocateArray(int size)
   {
-    return new Position()
-      {
-	int off = offset;
+    return new char[size];
+  }
 
-	public int getOffset()
-	{
-	  return off;
-	}
-      };
+  /**
+   * Returns the length of the allocated buffer array.
+   *
+   * @return the length of the allocated buffer array
+   */
+  protected int getArrayLength()
+  {
+    return buffer.length;
   }
 
+  /**
+   * Returns the length of the content.
+   *
+   * @return the length of the content
+   */
   public int length()
   {
-    return buf.length();
+    return buffer.length - (gapEnd - gapStart);
   }
 
+  /**
+   * Inserts a string at the specified position.
+   *
+   * @param where the position where the string is inserted
+   * @param str the string that is to be inserted
+   *
+   * @return an UndoableEdit object (currently not supported, so
+   *         <code>null</code> is returned)
+   *
+   * @throws BadLocationException if <code>where</code> is not a valid location
+   *         in the buffer
+   */
   public UndoableEdit insertString(int where, String str)
     throws BadLocationException
   {
-    buf.insert(where, str);
+    // check arguments
+    int length = length();
+    int strLen = str.length();
+
+    if (where >= length)
+      throw new BadLocationException("the where argument cannot be greater"
+                                     + " than the content length", where);
+
+    // check if the gap is big enough to hold the string
+    if ((gapEnd - gapStart) < strLen)
+      // make room for this string and some more
+      shiftEnd(strLen + DEFAULT_BUFSIZE);
+
+    // are we at the gap boundary?
+    if (where != gapStart)
+      shiftGap(where);
+
+    // now we can simple copy the string into the gap and adjust the
+    // gap boundaries
+    System.arraycopy(str.toCharArray(), 0, buffer, gapStart, strLen);
+    gapStart += strLen;
     return null;
   }
 
+  /**
+   * Removes a piece of content at th specified position.
+   *
+   * @param where the position where the content is to be removed
+   * @param nitems number of characters to be removed
+   *
+   * @return an UndoableEdit object (currently not supported, so
+   *         <code>null</code> is returned)
+   *
+   * @throws BadLocationException if <code>where</code> is not a valid location
+   *         in the buffer
+   */
   public UndoableEdit remove(int where, int nitems)
     throws BadLocationException
   {
-    buf.delete(where, where + nitems);
+    // check arguments
+    int length = length();
+
+    if (where >= length)
+      throw new BadLocationException("the where argument cannot be greater"
+                                     + " than the content length", where);
+    if ((where + nitems) > length)
+      throw new BadLocationException("where + nitems cannot be greater"
+                                     + " than the content length",
+                                     where + nitems);
+
+    // check if we are at the gap boundary
+    if (where != gapStart)
+      shiftGap(where);
+
+    // now we simply have to enlarge the gap
+    gapEnd += nitems;
     return null;
   }
 
+  /**
+   * Returns a piece of content as String.
+   *
+   * @param where the start location of the fragment
+   * @param len the length of the fragment
+   *
+   * @throws BadLocationException if <code>where</code> or
+   *         <code>where + len</code> are no valid locations in the buffer
+   */
   public String getString(int where, int len) throws BadLocationException
   {
-    return buf.substring(where, where+len);
+    Segment seg = new Segment();
+    getChars(where, len, seg);
+    return new String(seg.array, seg.offset, seg.count);
   }
 
+  /**
+   * Fetches a piece of content and stores it in a {@link Segment} object.
+   *
+   * If the requested piece of text spans the gap, the content is copied
+   * into a new array. If it doesn't then it is contiguous and the
+   * actual content store is returned.
+   *
+   * @param where the start location of the fragment
+   * @param len the length of the fragment
+   * @param txt the Segment object to store the fragment in
+   *
+   * @throws BadLocationException if <code>where</code> or
+   *         <code>where + len</code> are no valid locations in the buffer
+   */
   public void getChars(int where, int len, Segment txt)
     throws BadLocationException
   {
-    txt.array = new char[len];
+    // check arguments
+    int length = length();
+    if (where >= length)
+      throw new BadLocationException("the where argument cannot be greater"
+                                     + " than the content length", where);
+    if ((where + len) > length)
+      throw new BadLocationException("len plus where cannot be greater"
+                                     + " than the content length",
+                                     len + where);
 
-    System.arraycopy(buf.toString().toCharArray(), where, txt.array, 0, len);
+    // check if requested segment is contiguous
+    if ((where < gapStart) && ((gapStart - where) < len))
+      {
+        // requested segment is not contiguous -> copy the pieces together
+        char[] copy = new char[len];
+        int lenFirst = gapStart - where; // the length of the first segment
+        System.arraycopy(buffer, where, copy, 0, lenFirst);
+        System.arraycopy(buffer, gapEnd, copy, lenFirst, len - lenFirst);
+        txt.array = copy;
+        txt.offset = 0;
+        txt.count = len;
+      }
+    else
+      {
+        // requested segment is contiguous -> we can simply return the
+        // actual content
+        txt.array = buffer;
+        if (where < gapStart)
+          txt.offset = where;
+        else
+          txt.offset = where + (gapEnd - gapStart);
+        txt.count = len;
+      }
+  }
 
-    txt.count = len;
-    txt.offset = 0;
+  /**
+   * Creates and returns a mark at the specified position.
+   *
+   * @param offset the position at which to create the mark
+   *
+   * @return the create Position object for the mark
+   *
+   * @throws BadLocationException if the offset is not a valid position in
+   *         the buffer
+   */
+  public Position createPosition(final int offset) throws BadLocationException
+  {
+    return new Position()
+      {
+	int off = offset;
+
+	public int getOffset()
+	{
+	  return off;
+	}
+      };
+  }
+
+  /**
+   * Enlarges the gap. This allocates a new bigger buffer array, copy the
+   * segment before the gap as it is and the segment after the gap at
+   * the end of the new buffer array. This does change the gapEnd mark
+   * but not the gapStart mark.
+   *
+   * @param newSize the new size of the gap
+   */
+  protected void shiftEnd(int newSize)
+  {
+    char[] newBuf = (char[]) allocateArray(length() + newSize);
+    System.arraycopy(buffer, 0, newBuf, 0, gapStart);
+    System.arraycopy(buffer, gapEnd, newBuf, gapStart + newSize,
+                     buffer.length - gapEnd);
+    gapEnd = gapStart + newSize;
+    buffer = newBuf;
+  }
+
+  /**
+   * Shifts the gap to the specified position.
+   *
+   * @param newGapStart the new start position of the gap
+   */
+  protected void shiftGap(int newGapStart)
+  {
+    int newGapEnd = newGapStart + (gapEnd - gapStart);
+
+    if (newGapStart == gapStart)
+      return;
+    else if (newGapStart < gapStart)
+      {
+        System.arraycopy(buffer, newGapStart, buffer, newGapEnd,
+                         gapStart - newGapStart);
+        gapStart = newGapStart;
+        gapEnd = newGapEnd;
+      }
+    else
+      {
+        System.arraycopy(buffer, gapEnd, buffer, gapStart,
+                         newGapStart - gapStart);
+        gapStart = newGapStart;
+        gapEnd = newGapEnd;
+      }
+  }
+
+  /**
+   * Returns the allocated buffer array.
+   *
+   * @return the allocated buffer array
+   */
+  protected Object getArray()
+  {
+    return buffer;
   }
 }
Index: libjava/javax/swing/text/InternationalFormatter.java
===================================================================
RCS file: libjava/javax/swing/text/InternationalFormatter.java
diff -N libjava/javax/swing/text/InternationalFormatter.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/InternationalFormatter.java	9 Jul 2005 22:10:17 -0000
@@ -0,0 +1,354 @@
+/* InternationalFormatter.java --
+Copyright (C) 2005  Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package javax.swing.text;
+
+import java.text.AttributedCharacterIterator;
+import java.text.Format;
+import java.text.ParseException;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Set;
+
+import javax.swing.Action;
+import javax.swing.JFormattedTextField;
+
+/**
+ * This extends {@link DefaultFormatter} so that the value to string
+ * conversion is done via a {@link Format} object. This allows
+ * various additional formats to be handled by JFormattedField.
+ *
+ * @author Roman Kennke (roman@kennke.org)
+ */
+public class InternationalFormatter
+  extends DefaultFormatter
+{
+
+  /** The serialVersoinUID. */
+  private static final long serialVersionUID = 6941977820906408656L;
+
+  /** The format that handles value to string conversion. */
+  Format format;
+
+  /** The minimal permissable value. */
+  Comparable minimum;
+
+  /** The maximal permissable value. */
+  Comparable maximum;
+
+  /**
+   * Creates a new InternationalFormatter with no Format specified.
+   */
+  public InternationalFormatter()
+  {
+    super();
+    minimum = null;
+    maximum = null;
+    format = null;
+  }
+
+  /**
+   * Creates a new InternationalFormatter that uses the specified
+   * Format object for value to string conversion.
+   *
+   * @param format the Format object to use for value to string conversion
+   */
+  public InternationalFormatter(Format format)
+  {
+    this();
+    setFormat(format);
+  }
+
+  /**
+   * Sets the Format object that is used to convert values to strings.
+   *
+   * @param format the Format to use for value to string conversion
+   *
+   * @see Format
+   */
+  public void setFormat(Format format)
+  {
+    this.format = format;
+  }
+
+  /**
+   * Returns the currently used Format object that is used to format
+   * the JFormattedField.
+   *
+   * @return the current Format
+   */
+  public Format getFormat()
+  {
+    return format;
+  }
+
+  /**
+   * Sets the minimum value that is allowed by this Formatter. The minimum
+   * value is given as an object that implements the {@link Comparable}
+   * interface.
+   *
+   * If <code>minValue</code> is null, then the Formatter has no restrictions
+   * at the lower end.
+   *
+   * If value class is not yet specified and <code>minValue</code> is not
+   * null, then <code>valueClass</code> is set to the class of the minimum
+   * value.
+   *
+   * @param minValue the minimum permissable value
+   *
+   * @see Comparable
+   */
+  public void setMinimum(Comparable minValue)
+  {
+    minimum = minValue;
+    if (valueClass == null && minValue != null)
+      valueClass = minValue.getClass();
+  }
+
+  /**
+   * Returns the minimal value that is allowed by this Formatter.
+   *
+   * A <code>null</code> value means that there is no restriction.
+   *
+   * @return the minimal value that is allowed by this Formatter or
+   *     <code>null</code> if there is no restriction
+   */
+  public Comparable getMinimum()
+  {
+    return minimum;
+  }
+
+  /**
+   * Sets the maximum value that is allowed by this Formatter. The maximum
+   * value is given as an object that implements the {@link Comparable}
+   * interface.
+   *
+   * If <code>maxValue</code> is null, then the Formatter has no restrictions
+   * at the upper end.
+   *
+   * If value class is not yet specified and <code>maxValue</code> is not
+   * null, then <code>valueClass</code> is set to the class of the maximum
+   * value.
+   *
+   * @param maxValue the maximum permissable value
+   *
+   * @see Comparable
+   */
+  public void setMaximum(Comparable maxValue)
+  {
+    maximum = maxValue;
+    if (valueClass == null && maxValue != null)
+      valueClass = maxValue.getClass();
+  }
+
+  /**
+   * Returns the maximal value that is allowed by this Formatter.
+   *
+   * A <code>null</code> value means that there is no restriction.
+   *
+   * @return the maximal value that is allowed by this Formatter or
+   *     <code>null</code> if there is no restriction
+   */
+  public Comparable getMaximum()
+  {
+    return maximum;
+  }
+
+  /**
+   * Installs the formatter on the specified {@link JFormattedTextField}.
+   *
+   * This method does the following things:
+   * <ul>
+   * <li>Display the value of #valueToString in the
+   *  <code>JFormattedTextField</code></li>
+   * <li>Install the Actions from #getActions on the <code>JTextField</code>
+   * </li>
+   * <li>Install the DocumentFilter returned by #getDocumentFilter</li>
+   * <li>Install the NavigationFilter returned by #getNavigationFilter</li>
+   * </ul>
+   *
+   * This method is typically not overridden by subclasses. Instead override
+   * one of the mentioned methods in order to customize behaviour.
+   *
+   * @param ftf the {@link JFormattedTextField} in which this formatter
+   *     is installed 
+   */
+  public void install(JFormattedTextField ftf)
+  {
+    super.install(ftf);
+  }
+
+  /**
+   * Converts a value object into a String. This is done by invoking
+   * {@link Format#format} on the specified <code>Format</code> object.
+   * If no format is set, then {@link DefaultFormatter#valueToString(Object)}
+   * is called as a fallback.
+   *
+   * @param value the value to be converted
+   *
+   * @return the string representation of the value
+   *
+   * @throws ParseException if the value cannot be converted
+   */
+  public String valueToString(Object value)
+    throws ParseException
+  {
+    if (format != null)
+      return format.format(value);
+    else
+      return super.valueToString(value);
+  }
+
+  /**
+   * Converts a String (from the JFormattedTextField input) to a value.
+   * This is achieved by invoking {@link Format#parseObject(String)} on
+   * the specified <code>Format</code> object.
+   *
+   * This implementation differs slightly from {@link DefaultFormatter},
+   * it does:
+   * <ol>
+   * <li>Convert the string to an <code>Object</code> using the
+   *   <code>Formatter</code>.</li>
+   * <li>If a <code>valueClass</code> has been set, this object is passed to
+   *   {@link DefaultFormatter#stringToValue(String)} so that the value
+   *   has the correct type. This may or may not work correctly, depending on
+   *   the implementation of toString() in the value class and if the class
+   *   implements a constructor that takes one String as argument.</li>
+   * <li>If no {@link ParseException} has been thrown so far, we check if the
+   *   value exceeds either <code>minimum</code> or <code>maximum</code> if
+   *   one of those has been specified and throw a <code>ParseException</code>
+   *   if it does.</li>
+   * <li>Return the value.</li>
+   * </ol>
+   *
+   * If no format has been specified, then
+   * {@link DefaultFormatter#stringToValue(String)} is invoked as fallback.
+   *
+   * @param string the string to convert
+   *
+   * @return the value for the string
+   *
+   * @throws ParseException if the string cannot be converted into
+   *     a value object (e.g. invalid input)
+   */
+  public Object stringToValue(String string)
+    throws ParseException
+  {
+    if (format != null)
+      {
+        Object o = format.parseObject(string);
+
+        // If a value class has been set, call super in order to get
+        // the class right. That is what the JDK API docs suggest, so we do
+        // it that way.
+        if (valueClass != null)
+          o = super.stringToValue(o.toString());
+
+        // Check for minimum and maximum bounds
+        if (minimum != null && minimum.compareTo(o) > 0)
+          throw new ParseException("The value may not be less than the"
+                                    + " specified minimum", 0);
+        if (maximum != null && minimum.compareTo(o) < 0)
+          throw new ParseException("The value may not be greater than the"
+                                    + " specified maximum", 0);
+        return o;
+      }
+    else
+      return super.stringToValue(string);
+  }
+
+  /**
+   * Returns the {@link Format.Field} constants that are associated with
+   * the specified position in the text.
+   *
+   * If <code>offset</code> is not a valid location in the input field,
+   * an empty array of fields is returned.
+   *
+   * @param offset the position in the text from which we want to fetch
+   *     the fields constants
+   *
+   * @return the field values associated with the specified position in
+   *     the text
+   */
+  public Format.Field[] getFields(int offset)
+  {
+    // TODO: don't know if this is correct
+    AttributedCharacterIterator aci = format.formatToCharacterIterator
+                                         (getFormattedTextField().getValue());
+    aci.setIndex(offset);
+    Map atts = aci.getAttributes();
+    Set keys = atts.keySet();
+    Format.Field[] fields = new Format.Field[keys.size()];
+    int index = 0;
+    for (Iterator i = keys.iterator(); i.hasNext(); index++)
+      fields[index] = (Format.Field) i.next();
+    return fields;
+  }
+
+  /**
+   * This creates and returns a clone of this Formatter.
+   *
+   * @return a clone of this formatter
+   *
+   * @throws CloneNotSupportedException not thrown here, since cloning is
+   *     supported
+   * XXX - FIXME - Whole method disabled as workaround for gcj bug #22060.
+  public Object clone()
+    throws CloneNotSupportedException
+  {
+    // TODO: it has to be considered, if we should return a deep or shallow
+    // clone here. for now we return a shallow clone
+    Object clone = super.clone();
+    return clone;
+  }
+   */
+
+  /**
+   * Returns the Actions that are supported by this Formatter.
+   *
+   * @specnote the JDK API docs say here: <cite>If
+   *     <code>getSupportsIncrement</code> returns true, this returns two
+   *     Actions suitable for incrementing/decrementing the value.</cite>
+   *     The questsion is, which method <code>getSupportsIncrement</code>?
+   *     There is no such method in the whole API! So we just call
+   *     super.getActions here.
+   */
+  public Action[] getActions()
+  {
+    return super.getActions();
+  }
+}
Index: libjava/javax/swing/text/JTextComponent.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/text/JTextComponent.java,v
retrieving revision 1.12.2.1
diff -u -r1.12.2.1 JTextComponent.java
--- libjava/javax/swing/text/JTextComponent.java	31 Mar 2005 15:35:25 -0000	1.12.2.1
+++ libjava/javax/swing/text/JTextComponent.java	9 Jul 2005 22:10:18 -0000
@@ -50,6 +50,7 @@
 import java.awt.datatransfer.Transferable;
 import java.awt.datatransfer.UnsupportedFlavorException;
 import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
 import java.awt.event.InputMethodListener;
 import java.awt.event.KeyEvent;
 import java.io.IOException;
@@ -68,6 +69,8 @@
 import javax.swing.JViewport;
 import javax.swing.KeyStroke;
 import javax.swing.Scrollable;
+import javax.swing.SwingConstants;
+import javax.swing.Timer;
 import javax.swing.TransferHandler;
 import javax.swing.UIManager;
 import javax.swing.event.CaretEvent;
@@ -297,6 +300,44 @@
   }
 
   /**
+   * The timer that lets the caret blink.
+   */
+  private class CaretBlinkTimer
+    extends Timer
+    implements ActionListener
+  {
+    /**
+     * Creates a new CaretBlinkTimer object with a default delay of 1 second.
+     */
+    public CaretBlinkTimer()
+    {
+      super(1000, null);
+      addActionListener(this);
+    }
+
+    /**
+     * Lets the caret blink.
+     */
+    public void actionPerformed(ActionEvent ev)
+    {
+      caret.setVisible(!caret.isVisible());
+    }
+
+    /**
+     * Updates the blink delay according to the current caret.
+     */
+    public void update()
+    {
+      stop();
+      setDelay(caret.getBlinkRate());
+      if (editable)
+        start();
+      else
+        caret.setVisible(false);
+    }
+  }
+
+  /**
    * According to <a
    * href="http://java.sun.com/products/jfc/tsc/special_report/kestrel/keybindings.html">this
    * report</a>, a pair of private classes wraps a {@link
@@ -652,7 +693,9 @@
   private Keymap keymap;
   private char focusAccelerator = '\0';
   private NavigationFilter navigationFilter;
-  
+
+  private CaretBlinkTimer caretBlinkTimer;
+
   /**
    * Get a Keymap from the global keymap table, by name.
    *
@@ -883,7 +926,8 @@
     return getUI().getEditorKit(this).getActions();
   }
     
-  private Document doc;
+  // This is package-private to avoid an accessor method.
+  Document doc;
   private Caret caret;
   private Highlighter highlighter;
   private Color caretColor;
@@ -908,7 +952,10 @@
         creatingKeymap = true;
       }
 
+    caretBlinkTimer = new CaretBlinkTimer();
+
     setFocusable(true);
+    setEditable(true);
     enableEvents(AWTEvent.KEY_EVENT_MASK);
     updateUI();
     
@@ -1084,19 +1131,39 @@
 
   public Dimension getPreferredScrollableViewportSize()
   {
-    return null;
+    return getPreferredSize();
   }
 
   public int getScrollableUnitIncrement(Rectangle visible, int orientation,
                                         int direction)
   {
-    return 0;
+    // We return 1/10 of the visible area as documented in Sun's API docs.
+    if (orientation == SwingConstants.HORIZONTAL)
+      return visible.width / 10;
+    else if (orientation == SwingConstants.VERTICAL)
+      return visible.height / 10;
+    else
+      throw new IllegalArgumentException("orientation must be either "
+                                      + "javax.swing.SwingConstants.VERTICAL "
+                                      + "or "
+                                      + "javax.swing.SwingConstants.HORIZONTAL"
+                                         );
   }
 
   public int getScrollableBlockIncrement(Rectangle visible, int orientation,
                                          int direction)
   {
-    return 0;
+    // We return the whole visible area as documented in Sun's API docs.
+    if (orientation == SwingConstants.HORIZONTAL)
+      return visible.width;
+    else if (orientation == SwingConstants.VERTICAL)
+      return visible.height;
+    else
+      throw new IllegalArgumentException("orientation must be either "
+                                      + "javax.swing.SwingConstants.VERTICAL "
+                                      + "or "
+                                      + "javax.swing.SwingConstants.HORIZONTAL"
+                                         );
   }
 
   /**
@@ -1119,6 +1186,14 @@
     if (editable == newValue)
       return;
 
+    if (newValue == true)
+      caretBlinkTimer.start();
+    else
+      {
+        caretBlinkTimer.stop();
+        caret.setVisible(false);
+      }
+
     boolean oldValue = editable;
     editable = newValue;
     firePropertyChange("editable", oldValue, newValue);
@@ -1147,6 +1222,8 @@
     Caret oldCaret = caret;
     caret = newCaret;
 
+    caretBlinkTimer.update();
+
     if (caret != null)
       caret.install(this);
     
Index: libjava/javax/swing/text/PlainDocument.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/text/PlainDocument.java,v
retrieving revision 1.5
diff -u -r1.5 PlainDocument.java
--- libjava/javax/swing/text/PlainDocument.java	16 Feb 2005 20:03:12 -0000	1.5
+++ libjava/javax/swing/text/PlainDocument.java	9 Jul 2005 22:10:18 -0000
@@ -47,7 +47,7 @@
   public static final String lineLimitAttribute = "lineLimit";
   public static final String tabSizeAttribute = "tabSize";
 
-  private Element rootElement;
+  private BranchElement rootElement;
   private int tabSize;
   
   public PlainDocument()
@@ -59,7 +59,7 @@
   {
     super(content);
     tabSize = 8;
-    rootElement = createDefaultRoot();
+    rootElement = (BranchElement) createDefaultRoot();
   }
 
   private void reindex()
@@ -114,9 +114,43 @@
 
   protected void removeUpdate(DefaultDocumentEvent event)
   {
-    reindex();
-
     super.removeUpdate(event);
+
+    int p0 = event.getOffset();
+    int len = event.getLength();
+    int p1 = len + p0;
+
+    // check if we must collapse some elements
+    int i1 = rootElement.getElementIndex(p0);
+    int i2 = rootElement.getElementIndex(p1);
+    if (i1 != i2)
+      {
+        Element el1 = rootElement.getElement(i1);
+        Element el2 = rootElement.getElement(i2);
+        int start = el1.getStartOffset();
+        int end = el2.getEndOffset();
+        // collapse elements if the removal spans more than 1 line
+        Element newEl = createLeafElement(rootElement,
+                                          SimpleAttributeSet.EMPTY,
+                                          start, end - len);
+        rootElement.replace(i1, i2 - i1, new Element[]{ newEl });
+      }
+    else
+      {
+        // otherwise only adjust indices of the element
+        LeafElement el1 = (LeafElement) rootElement.getElement(i1);
+        el1.end -= len;
+      }
+
+    // reindex remaining elements
+    for (int i = rootElement.getElementIndex(p0) + 1;
+         i < rootElement.getElementCount(); i++)
+      {
+        LeafElement el = (LeafElement) rootElement.getElement(i);
+        el.start -= len;
+        el.end -= len;
+      }
+      
   }
 
   public Element getDefaultRootElement()
Index: libjava/javax/swing/text/PlainView.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/text/PlainView.java,v
retrieving revision 1.5
diff -u -r1.5 PlainView.java
--- libjava/javax/swing/text/PlainView.java	16 Feb 2005 20:03:12 -0000	1.5
+++ libjava/javax/swing/text/PlainView.java	9 Jul 2005 22:10:18 -0000
@@ -123,7 +123,7 @@
       {
 	metrics = g.getFontMetrics();
 	// FIXME: Selected text are not drawn yet.
-	Element line = getDocument().getDefaultRootElement().getElement(lineIndex);
+	Element line = getElement().getElement(lineIndex);
 	drawUnselectedText(g, x, y, line.getStartOffset(), line.getEndOffset());
 	//drawSelectedText(g, , , , );
       }
@@ -148,7 +148,7 @@
     g.setColor(unselectedColor);
     Segment segment = new Segment();
     getDocument().getText(p0, p1 - p0, segment);
-    return Utilities.drawTabbedText(segment, x, y, g, this, 0);
+    return Utilities.drawTabbedText(segment, x, y, g, this, segment.offset);
   }
 
   public void paint(Graphics g, Shape s)
@@ -200,7 +200,42 @@
     if (axis != X_AXIS && axis != Y_AXIS)
       throw new IllegalArgumentException();
 
-    return 10;
+    // make sure we have the metrics
+    updateMetrics();
+
+    float span = 0;
+    Element el = getElement();
+    Document doc = el.getDocument();
+    Segment seg = new Segment();
+
+    switch (axis)
+      {
+      case X_AXIS:
+        // calculate the maximum of the line's widths
+        for (int i = 0; i < el.getElementCount(); i++)
+          {
+            Element child = el.getElement(i);
+            int start = child.getStartOffset();
+            int end = child.getEndOffset();
+            try {
+              doc.getText(start, start + end, seg);
+            }
+            catch (BadLocationException ex)
+              {
+                // throw new ClasspathAssertionError
+                // ("no BadLocationException should be thrown here");
+              }
+            int width = metrics.charsWidth(seg.array, seg.offset, seg.count);
+            span = Math.max(span, width);
+          }
+        break;
+      case Y_AXIS:
+      default:
+        span = metrics.getHeight() * el.getElementCount();
+        break;
+      }
+
+    return span;
   }
 }
 
Index: libjava/javax/swing/text/SimpleAttributeSet.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/text/SimpleAttributeSet.java,v
retrieving revision 1.3
diff -u -r1.3 SimpleAttributeSet.java
--- libjava/javax/swing/text/SimpleAttributeSet.java	30 Nov 2004 23:59:08 -0000	1.3
+++ libjava/javax/swing/text/SimpleAttributeSet.java	9 Jul 2005 22:10:18 -0000
@@ -1,5 +1,5 @@
 /* SimpleAttributeSet.java --
-   Copyright (C) 2004 Free Software Foundation, Inc.
+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
Index: libjava/javax/swing/text/StringContent.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/text/StringContent.java,v
retrieving revision 1.3
diff -u -r1.3 StringContent.java
--- libjava/javax/swing/text/StringContent.java	17 Feb 2005 07:48:53 -0000	1.3
+++ libjava/javax/swing/text/StringContent.java	9 Jul 2005 22:10:18 -0000
@@ -56,7 +56,8 @@
  */
 public final class StringContent implements AbstractDocument.Content, Serializable
 {
-  private char[] content;
+  // This is package-private to avoid an accessor method.
+  char[] content;
 
   private int count;
 
@@ -156,7 +157,8 @@
       this.offset = offset;
     }
 
-    private void setOffset(int offset)
+    // This is package-private to avoid an accessor method.
+    void setOffset(int offset)
     {
       this.offset = this.offset >= 0 ? offset : -1;
     }
@@ -290,7 +292,8 @@
       }
   }
 
-  private void checkLocation(int where, int len) throws BadLocationException
+  // This is package-private to avoid an accessor method.
+  void checkLocation(int where, int len) throws BadLocationException
   {
     if (where < 0)
       throw new BadLocationException("Invalid location", 1);
Index: libjava/javax/swing/text/StyleConstants.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/text/StyleConstants.java,v
retrieving revision 1.3
diff -u -r1.3 StyleConstants.java
--- libjava/javax/swing/text/StyleConstants.java	30 Nov 2004 23:59:08 -0000	1.3
+++ libjava/javax/swing/text/StyleConstants.java	9 Jul 2005 22:10:18 -0000
@@ -1,5 +1,5 @@
 /* StyleConstants.java --
-   Copyright (C) 2004 Free Software Foundation, Inc.
+   Copyright (C) 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -83,8 +83,10 @@
   public static final Object ResolveAttribute = new StyleConstants("resolver");
 
   String keyname;
-  
-  private StyleConstants(String k) 
+
+  // Package-private to avoid accessor constructor for use by
+  // subclasses.
+  StyleConstants(String k) 
   {
     keyname = k;
   }
Index: libjava/javax/swing/text/StyleContext.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/text/StyleContext.java,v
retrieving revision 1.3
diff -u -r1.3 StyleContext.java
--- libjava/javax/swing/text/StyleContext.java	30 Nov 2004 23:59:08 -0000	1.3
+++ libjava/javax/swing/text/StyleContext.java	9 Jul 2005 22:10:18 -0000
@@ -203,7 +203,11 @@
 
     public void setResolveParent(AttributeSet parent)
     {
-      attributes = StyleContext.this.addAttribute(attributes, ResolveAttribute, parent);
+      if (parent != null)
+        {
+          attributes = StyleContext.this.addAttribute
+            (attributes, ResolveAttribute, parent);
+        }
       fireStateChanged();
     }
       
Index: libjava/javax/swing/text/Utilities.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/text/Utilities.java,v
retrieving revision 1.4
diff -u -r1.4 Utilities.java
--- libjava/javax/swing/text/Utilities.java	17 Feb 2005 07:48:53 -0000	1.4
+++ libjava/javax/swing/text/Utilities.java	9 Jul 2005 22:10:19 -0000
@@ -92,7 +92,7 @@
     int ascent = metrics.getAscent();
 
     int pixelWidth = 0;
-    int pos = 0;
+    int pos = s.offset;
     int len = 0;
 
     for (int offset = s.offset; offset < (s.offset + s.count); ++offset)
Index: libjava/javax/swing/text/View.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/text/View.java,v
retrieving revision 1.6
diff -u -r1.6 View.java
--- libjava/javax/swing/text/View.java	16 Feb 2005 20:03:13 -0000	1.6
+++ libjava/javax/swing/text/View.java	9 Jul 2005 22:10:19 -0000
@@ -40,9 +40,12 @@
 
 import java.awt.Container;
 import java.awt.Graphics;
+import java.awt.Rectangle;
 import java.awt.Shape;
 
+import javax.swing.JComponent;
 import javax.swing.SwingConstants;
+import javax.swing.event.DocumentEvent;
 
 public abstract class View implements SwingConstants
 {
@@ -59,6 +62,11 @@
   private View parent;
 
   /**
+   * The child views.
+   */
+  View[] children;
+
+  /**
    * Creates a new <code>View</code> instance.
    *
    * @param elem an <code>Element</code> value
@@ -66,6 +74,7 @@
   public View(Element elem)
   {
     elt = elem;
+    children = new View[0];
   }
 
   public abstract void paint(Graphics g, Shape s);
@@ -241,6 +250,8 @@
   {
     if (parent != null)
       parent.preferenceChanged(this, width, height);
+    else
+      ((JComponent) getContainer()).revalidate();
   }
 
   public int getBreakWeight(int axis, float pos, float len)
@@ -260,5 +271,193 @@
   {
     return -1;
   }
+
+  /**
+   * Receive notification about an insert update to the text model.
+   *
+   * The default implementation of this method does the following:
+   * <ul>
+   * <li>Call {@link #updateChildren} if the element that this view is
+   * responsible for has changed. This makes sure that the children can
+   * correctly represent the model.<li>
+   * <li>Call {@link #forwardUpdate}. This forwards the DocumentEvent to
+   * the child views.<li>
+   * <li>Call {@link #updateLayout}. Gives the view a chance to either
+   * repair its layout, reschedule layout or do nothing at all.</li>
+   * </ul>
+   *
+   * @param ev the DocumentEvent that describes the change
+   * @param shape the shape of the view
+   * @param vf the ViewFactory for creating child views
+   */
+  public void insertUpdate(DocumentEvent ev, Shape shape, ViewFactory vf)
+  {
+    Element el = getElement();
+    DocumentEvent.ElementChange ec = ev.getChange(el);
+    if (ec != null)
+      updateChildren(ec, ev, vf);
+    forwardUpdate(ec, ev, shape, vf);
+    updateLayout(ec, ev, shape);
+  }
+
+  /**
+   * Receive notification about a remove update to the text model.
+   *
+   * The default implementation of this method does the following:
+   * <ul>
+   * <li>Call {@link #updateChildren} if the element that this view is
+   * responsible for has changed. This makes sure that the children can
+   * correctly represent the model.<li>
+   * <li>Call {@link #forwardUpdate}. This forwards the DocumentEvent to
+   * the child views.<li>
+   * <li>Call {@link #updateLayout}. Gives the view a chance to either
+   * repair its layout, reschedule layout or do nothing at all.</li>
+   * </ul>
+   *
+   * @param ev the DocumentEvent that describes the change
+   * @param shape the shape of the view
+   * @param vf the ViewFactory for creating child views
+   */
+  public void removeUpdate(DocumentEvent ev, Shape shape, ViewFactory vf)
+  {
+    Element el = getElement();
+    DocumentEvent.ElementChange ec = ev.getChange(el);
+    if (ec != null)
+        updateChildren(ec, ev, vf);
+    forwardUpdate(ec, ev, shape, vf);
+    updateLayout(ec, ev, shape);
+  }
+
+  /**
+   * Receive notification about a change update to the text model.
+   *
+   * The default implementation of this method does the following:
+   * <ul>
+   * <li>Call {@link #updateChildren} if the element that this view is
+   * responsible for has changed. This makes sure that the children can
+   * correctly represent the model.<li>
+   * <li>Call {@link #forwardUpdate}. This forwards the DocumentEvent to
+   * the child views.<li>
+   * <li>Call {@link #updateLayout}. Gives the view a chance to either
+   * repair its layout, reschedule layout or do nothing at all.</li>
+   * </ul>
+   *
+   * @param ev the DocumentEvent that describes the change
+   * @param shape the shape of the view
+   * @param vf the ViewFactory for creating child views
+   */
+  public void changedUpdate(DocumentEvent ev, Shape shape, ViewFactory vf)
+  {
+    Element el = getElement();
+    DocumentEvent.ElementChange ec = ev.getChange(el);
+    if (ec != null)
+        updateChildren(ec, ev, vf);
+    forwardUpdate(ec, ev, shape, vf);
+    updateLayout(ec, ev, shape);
+  }
+
+  /**
+   * Updates the list of children that is returned by {@link #getView}
+   * and {@link #getViewCount}.
+   *
+   * Element that are specified as beeing added in the ElementChange record are
+   * assigned a view for using the ViewFactory. Views of Elements that
+   * are specified as beeing removed are removed from the list.
+   *
+   * @param ec the ElementChange record that describes the change of the
+   *           element
+   * @param ev the DocumentEvent describing the change of the document model
+   * @param vf the ViewFactory to use for creating new views
+   *
+   * @return whether or not the child views represent the child elements of
+   *         the element that this view is responsible for. Some views may
+   *         create views that are responsible only for parts of the element
+   *         that they are responsible for and should then return false.
+   *
+   * @since 1.3
+   */
+  protected boolean updateChildren(DocumentEvent.ElementChange ec,
+                                   DocumentEvent ev,
+                                   ViewFactory vf)
+  {
+    Element[] added = ec.getChildrenAdded();
+    Element[] removed = ec.getChildrenRemoved();
+    View[] newChildren = new View[children.length + added.length
+                                  - removed.length];
+    int index = ec.getIndex();
+    System.arraycopy(children, 0, newChildren, 0, index);
+    System.arraycopy(children, index, added, 0, added.length);
+    int index2 = index + removed.length;
+    int len2 = children.length - index2;
+    System.arraycopy(children, index2, newChildren, index + added.length,
+                     len2);
+    children = newChildren;
+
+    return true;
+  }
+
+  /**
+   * Forwards the DocumentEvent to child views that need to get notified
+   * of the change to the model. This calles {@link #forwardUpdateToView}
+   * for each View that must be forwarded to.
+   *
+   * @param ec the ElementChange describing the element changes (may be
+   *           <code>null</code> if there were no changes)
+   * @param ev the DocumentEvent describing the changes to the model
+   * @param shape the current allocation of the view
+   * @param vf the ViewFactory used to create new Views
+   *
+   * @since 1.3
+   */
+  protected void forwardUpdate(DocumentEvent.ElementChange ec,
+                               DocumentEvent ev, Shape shape, ViewFactory vf)
+  {
+    for (int i = 0; i < children.length; i++)
+      {
+        View child = children[i];
+        forwardUpdateToView(child, ev, shape, vf);
+      }
+  }
+
+  /**
+   * Forwards an update event to the given child view. This calls
+   * {@link #insertUpdate}, {@link #removeUpdate} or {@link #changedUpdate},
+   * depending on the type of document event.
+   *
+   * @param view the View to forward the event to
+   * @param ev the DocumentEvent to forward
+   * @param shape the current allocation of the View
+   * @param vf the ViewFactory used to create new Views
+   *
+   * @since 1.3
+   */
+  protected void forwardUpdateToView(View view, DocumentEvent ev, Shape shape,
+                                     ViewFactory vf)
+  {
+    DocumentEvent.EventType type = ev.getType();
+    if (type == DocumentEvent.EventType.INSERT)
+      view.insertUpdate(ev, shape, vf);
+    else if (type == DocumentEvent.EventType.REMOVE)
+      view.removeUpdate(ev, shape, vf);
+    else if (type == DocumentEvent.EventType.CHANGE)
+      view.changedUpdate(ev, shape, vf);
+  }
+
+  /**
+   * Updates the layout.
+   *
+   * @param ec the ElementChange that describes the changes to the element
+   * @param ev the DocumentEvent that describes the changes to the model
+   * @param shape the current allocation for this view
+   *
+   * @since 1.3
+   */
+  protected void updateLayout(DocumentEvent.ElementChange ec,
+                              DocumentEvent ev, Shape shape)
+  {
+    Rectangle b = shape.getBounds();
+    if (ec != null)
+      preferenceChanged(this, true, true);
+  }
 }
 
Index: libjava/javax/swing/text/html/HTML.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/text/html/HTML.java,v
retrieving revision 1.2
diff -u -r1.2 HTML.java
--- libjava/javax/swing/text/html/HTML.java	30 Nov 2004 23:59:08 -0000	1.2
+++ libjava/javax/swing/text/html/HTML.java	9 Jul 2005 22:10:19 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -35,38 +35,1275 @@
 obligated to do so.  If you do not wish to do so, delete this
 exception statement from your version. */
 
+
 package javax.swing.text.html;
 
 import java.io.Serializable;
 
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+
+import java.util.Map;
+import java.util.TreeMap;
+
+import javax.swing.text.AttributeSet;
+
 /**
- * Stub implementation.
- * Just enough to get gjdoc working.
- *
- * @author Mark Wielaard (mark@klomp.org)
+ * HTML attribute and tag definitions.
+ * @author Audrius Meskauskas (AudriusA@Bioinformatics.org)
  */
 public class HTML
 {
-  public static class Tag
+  /**
+   * Represents a HTML attribute.
+   */
+  public static class Attribute
+    implements Serializable
   {
-    private final String id;
+    /**
+     * The action attribute
+     */
+    public static final Attribute ACTION = new Attribute("action");
 
-    protected Tag(String id)
+    /**
+     * The align attribute
+     */
+    public static final Attribute ALIGN = new Attribute("align");
+
+    /**
+     * The alink attribute
+     */
+    public static final Attribute ALINK = new Attribute("alink");
+
+    /**
+     * The alt attribute
+     */
+    public static final Attribute ALT = new Attribute("alt");
+
+    /**
+     * The archive attribute
+     */
+    public static final Attribute ARCHIVE = new Attribute("archive");
+
+    /**
+     * The background attribute
+     */
+    public static final Attribute BACKGROUND = new Attribute("background");
+
+    /**
+     * The bgcolor attribute
+     */
+    public static final Attribute BGCOLOR = new Attribute("bgcolor");
+
+    /**
+     * The border attribute
+     */
+    public static final Attribute BORDER = new Attribute("border");
+
+    /**
+     * The cellpadding attribute
+     */
+    public static final Attribute CELLPADDING = new Attribute("cellpadding");
+
+    /**
+     * The cellspacing attribute
+     */
+    public static final Attribute CELLSPACING = new Attribute("cellspacing");
+
+    /**
+     * The checked attribute
+     */
+    public static final Attribute CHECKED = new Attribute("checked");
+
+    /**
+     * The class attribute
+     */
+    public static final Attribute CLASS = new Attribute("class");
+
+    /**
+     * The classid attribute
+     */
+    public static final Attribute CLASSID = new Attribute("classid");
+
+    /**
+     * The clear attribute
+     */
+    public static final Attribute CLEAR = new Attribute("clear");
+
+    /**
+     * The code attribute
+     */
+    public static final Attribute CODE = new Attribute("code");
+
+    /**
+     * The codebase attribute
+     */
+    public static final Attribute CODEBASE = new Attribute("codebase");
+
+    /**
+     * The codetype attribute
+     */
+    public static final Attribute CODETYPE = new Attribute("codetype");
+
+    /**
+     * The color attribute
+     */
+    public static final Attribute COLOR = new Attribute("color");
+
+    /**
+     * The cols attribute
+     */
+    public static final Attribute COLS = new Attribute("cols");
+
+    /**
+     * The colspan attribute
+     */
+    public static final Attribute COLSPAN = new Attribute("colspan");
+
+    /**
+     * The comment attribute
+     */
+    public static final Attribute COMMENT = new Attribute("comment");
+
+    /**
+     * The compact attribute
+     */
+    public static final Attribute COMPACT = new Attribute("compact");
+
+    /**
+     * The content attribute
+     */
+    public static final Attribute CONTENT = new Attribute("content");
+
+    /**
+     * The coords attribute
+     */
+    public static final Attribute COORDS = new Attribute("coords");
+
+    /**
+     * The data attribute
+     */
+    public static final Attribute DATA = new Attribute("data");
+
+    /**
+     * The declare attribute
+     */
+    public static final Attribute DECLARE = new Attribute("declare");
+
+    /**
+     * The dir attribute
+     */
+    public static final Attribute DIR = new Attribute("dir");
+
+    /**
+     * The dummy attribute
+     */
+    public static final Attribute DUMMY = new Attribute("dummy");
+
+    /**
+     * The enctype attribute
+     */
+    public static final Attribute ENCTYPE = new Attribute("enctype");
+
+    /**
+     * The endtag attribute
+     */
+    public static final Attribute ENDTAG = new Attribute("endtag");
+
+    /**
+     *  The face attribute
+     */
+    public static final Attribute FACE = new Attribute("face");
+
+    /**
+     *  The frameborder attribute
+     */
+    public static final Attribute FRAMEBORDER = new Attribute("frameborder");
+
+    /**
+     *  The halign attribute
+     */
+    public static final Attribute HALIGN = new Attribute("halign");
+
+    /**
+     *  The height attribute
+     */
+    public static final Attribute HEIGHT = new Attribute("height");
+
+    /**
+     *  The href attribute
+     */
+    public static final Attribute HREF = new Attribute("href");
+
+    /**
+     *  The hspace attribute
+     */
+    public static final Attribute HSPACE = new Attribute("hspace");
+
+    /**
+     *  The http-equiv attribute
+     */
+    public static final Attribute HTTPEQUIV = new Attribute("http-equiv");
+
+    /**
+     *  The id attribute
+     */
+    public static final Attribute ID = new Attribute("id");
+
+    /**
+     *  The ismap attribute
+     */
+    public static final Attribute ISMAP = new Attribute("ismap");
+
+    /**
+     *  The lang attribute
+     */
+    public static final Attribute LANG = new Attribute("lang");
+
+    /**
+     *  The language attribute
+     */
+    public static final Attribute LANGUAGE = new Attribute("language");
+
+    /**
+     *  The link attribute
+     */
+    public static final Attribute LINK = new Attribute("link");
+
+    /**
+     *  The lowsrc attribute
+     */
+    public static final Attribute LOWSRC = new Attribute("lowsrc");
+
+    /**
+     *  The marginheight attribute
+     */
+    public static final Attribute MARGINHEIGHT = new Attribute("marginheight");
+
+    /**
+     *  The marginwidth attribute
+     */
+    public static final Attribute MARGINWIDTH = new Attribute("marginwidth");
+
+    /**
+     *  The maxlength attribute
+     */
+    public static final Attribute MAXLENGTH = new Attribute("maxlength");
+
+    /**
+     *  The media attribute
+     */
+    public static final Attribute MEDIA = new Attribute("media");
+
+    /**
+     *  The method attribute
+     */
+    public static final Attribute METHOD = new Attribute("method");
+
+    /**
+     *  The multiple attribute
+     */
+    public static final Attribute MULTIPLE = new Attribute("multiple");
+
+    /**
+     *  The n attribute
+     */
+    public static final Attribute N = new Attribute("n");
+
+    /**
+     *  The name attribute
+     */
+    public static final Attribute NAME = new Attribute("name");
+
+    /**
+     *  The nohref attribute
+     */
+    public static final Attribute NOHREF = new Attribute("nohref");
+
+    /**
+     *  The noresize attribute
+     */
+    public static final Attribute NORESIZE = new Attribute("noresize");
+
+    /**
+     *  The noshade attribute
+     */
+    public static final Attribute NOSHADE = new Attribute("noshade");
+
+    /**
+     *  The nowrap attribute
+     */
+    public static final Attribute NOWRAP = new Attribute("nowrap");
+
+    /**
+     *  The prompt attribute
+     */
+    public static final Attribute PROMPT = new Attribute("prompt");
+
+    /**
+     *  The rel attribute
+     */
+    public static final Attribute REL = new Attribute("rel");
+
+    /**
+     *  The rev attribute
+     */
+    public static final Attribute REV = new Attribute("rev");
+
+    /**
+     *  The rows attribute
+     */
+    public static final Attribute ROWS = new Attribute("rows");
+
+    /**
+     *  The rowspan attribute
+     */
+    public static final Attribute ROWSPAN = new Attribute("rowspan");
+
+    /**
+     *  The scrolling attribute
+     */
+    public static final Attribute SCROLLING = new Attribute("scrolling");
+
+    /**
+     *  The selected attribute
+     */
+    public static final Attribute SELECTED = new Attribute("selected");
+
+    /**
+     *  The shape attribute
+     */
+    public static final Attribute SHAPE = new Attribute("shape");
+
+    /**
+     *  The shapes attribute
+     */
+    public static final Attribute SHAPES = new Attribute("shapes");
+
+    /**
+     *  The size attribute
+     */
+    public static final Attribute SIZE = new Attribute("size");
+
+    /**
+     *  The src attribute
+     */
+    public static final Attribute SRC = new Attribute("src");
+
+    /**
+     *  The standby attribute
+     */
+    public static final Attribute STANDBY = new Attribute("standby");
+
+    /**
+     *  The start attribute
+     */
+    public static final Attribute START = new Attribute("start");
+
+    /**
+     *  The style attribute
+     */
+    public static final Attribute STYLE = new Attribute("style");
+
+    /**
+     *  The target attribute
+     */
+    public static final Attribute TARGET = new Attribute("target");
+
+    /**
+     *  The text attribute
+     */
+    public static final Attribute TEXT = new Attribute("text");
+
+    /**
+     *  The title attribute
+     */
+    public static final Attribute TITLE = new Attribute("title");
+
+    /**
+     *  The type attribute
+     */
+    public static final Attribute TYPE = new Attribute("type");
+
+    /**
+     *  The usemap attribute
+     */
+    public static final Attribute USEMAP = new Attribute("usemap");
+
+    /**
+     *  The valign attribute
+     */
+    public static final Attribute VALIGN = new Attribute("valign");
+
+    /**
+     *  The value attribute
+     */
+    public static final Attribute VALUE = new Attribute("value");
+
+    /**
+     *  The valuetype attribute
+     */
+    public static final Attribute VALUETYPE = new Attribute("valuetype");
+
+    /**
+     *  The version attribute
+     */
+    public static final Attribute VERSION = new Attribute("version");
+
+    /**
+     *  The vlink attribute
+     */
+    public static final Attribute VLINK = new Attribute("vlink");
+
+    /**
+     *  The vspace attribute
+     */
+    public static final Attribute VSPACE = new Attribute("vspace");
+
+    /**
+     *  The width attribute
+     */
+    public static final Attribute WIDTH = new Attribute("width");
+    private final String name;
+
+    /**
+     * Creates the attribute with the given name.
+     */
+    protected Attribute(String a_name)
     {
-      this.id = id;
+      name = a_name;
     }
-  }
 
-  public static class UnknownTag extends Tag implements Serializable
-  {
     /**
-     * For compatability with Sun's JDK 1.4.2 rev. 5
+     * Calls compareTo on the tag names (Strings)
      */
-    private static final long serialVersionUID = -1534369342247250625L;
-
-    public UnknownTag(String id)
+    public int compareTo(Object other)
     {
-      super(id);
+      return name.compareTo(((Attribute) other).name);
     }
+
+    /**
+     * The attributes are equal if the names are equal
+     * (ignoring case)
+     */
+    public boolean equals(Object other)
+    {
+      if (other == this)
+        return true;
+
+      if (!(other instanceof Attribute))
+        return false;
+
+      Attribute that = (Attribute) other;
+
+      return that.name.equalsIgnoreCase(name);
+    }
+
+    /**
+     * Returns the hash code which corresponds to the string for this tag.
+     */
+    public int hashCode()
+    {
+      return name == null ? 0 : name.hashCode();
+    }
+
+    /**
+     * Returns the attribute name. The names of the built-in attributes
+     * are always returned in lowercase.
+     */
+    public String toString()
+    {
+      return name;
+    }
+
+    /**
+     *  Return an array of all attributes, declared in the HTML.Attribute
+     *  class. WARNING: attributes are the only public fields,
+     *  expected in this class.
+     */
+    static Attribute[] getAllAttributes()
+    {
+      Field[] f = Attribute.class.getFields();
+      Attribute[] attrs = new Attribute[ f.length ];
+      Field x;
+      int p = 0;
+      Attribute a;
+
+      for (int i = 0; i < f.length; i++)
+        {
+          x = f [ i ];
+
+          if ((x.getModifiers() & Modifier.STATIC) != 0)
+            {
+              if (x.getType().equals(Attribute.class))
+                {
+                  try
+                    {
+                      a = (Attribute) x.get(null);
+                      attrs [ p++ ] = a;
+                    }
+                  catch (Exception ex)
+                    {
+                      ex.printStackTrace(System.err);
+                      throw new Error("This should never happen, report a bug");
+                    }
+                }
+            }
+        }
+
+      return attrs;
+    }
+  }
+
+  /**
+   * Represents a HTML tag.
+   */
+  public static class Tag
+    implements Comparable, Serializable
+  {
+    /**
+     * The &lt;a&gt; tag
+     */
+    public static final Tag A = new Tag("a");
+
+    /**
+     * The &lt;address&gt; tag
+     */
+    public static final Tag ADDRESS = new Tag("address");
+
+    /**
+     * The &lt;applet&gt; tag
+     */
+    public static final Tag APPLET = new Tag("applet");
+
+    /**
+     * The &lt;area&gt; tag
+     */
+    public static final Tag AREA = new Tag("area");
+
+    /**
+     * The &lt;b&gt; tag
+     */
+    public static final Tag B = new Tag("b");
+
+    /**
+     * The &lt;base&gt; tag
+     */
+    public static final Tag BASE = new Tag("base");
+
+    /**
+     * The &lt;basefont&gt; tag
+     */
+    public static final Tag BASEFONT = new Tag("basefont");
+
+    /**
+     * The &lt;big&gt; tag
+     */
+    public static final Tag BIG = new Tag("big");
+
+    /**
+     * The &lt;blockquote&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag BLOCKQUOTE = new Tag("blockquote", BREAKS | BLOCK);
+
+    /**
+     * The &lt;body&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag BODY = new Tag("body", BREAKS | BLOCK);
+
+    /**
+     * The &lt;br&gt; tag , breaks flow.
+     */
+    public static final Tag BR = new Tag("br", BREAKS);
+
+    /**
+     * The &lt;caption&gt; tag
+     */
+    public static final Tag CAPTION = new Tag("caption");
+
+    /**
+     * The &lt;center&gt; tag , breaks flow.
+     */
+    public static final Tag CENTER = new Tag("center", BREAKS);
+
+    /**
+     * The &lt;cite&gt; tag
+     */
+    public static final Tag CITE = new Tag("cite");
+
+    /**
+     * The &lt;code&gt; tag
+     */
+    public static final Tag CODE = new Tag("code");
+
+    /**
+     * The &lt;dd&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag DD = new Tag("dd", BREAKS | BLOCK);
+
+    /**
+     * The &lt;dfn&gt; tag
+     */
+    public static final Tag DFN = new Tag("dfn");
+
+    /**
+     * The &lt;dir&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag DIR = new Tag("dir", BREAKS | BLOCK);
+
+    /**
+     * The &lt;div&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag DIV = new Tag("div", BREAKS | BLOCK);
+
+    /**
+     * The &lt;dl&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag DL = new Tag("dl", BREAKS | BLOCK);
+
+    /**
+     * The &lt;dt&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag DT = new Tag("dt", BREAKS | BLOCK);
+
+    /**
+     * The &lt;em&gt; tag
+     */
+    public static final Tag EM = new Tag("em");
+
+    /**
+     * The &lt;font&gt; tag
+     */
+    public static final Tag FONT = new Tag("font");
+
+    /**
+     * The &lt;form&gt; tag , breaks flow.
+     */
+    public static final Tag FORM = new Tag("form", BREAKS);
+
+    /**
+     * The &lt;frame&gt; tag
+     */
+    public static final Tag FRAME = new Tag("frame");
+
+    /**
+     * The &lt;frameset&gt; tag
+     */
+    public static final Tag FRAMESET = new Tag("frameset");
+
+    /**
+     * The &lt;h1&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag H1 = new Tag("h1", BREAKS | BLOCK);
+
+    /**
+     * The &lt;h2&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag H2 = new Tag("h2", BREAKS | BLOCK);
+
+    /**
+     * The &lt;h3&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag H3 = new Tag("h3", BREAKS | BLOCK);
+
+    /**
+     * The &lt;h4&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag H4 = new Tag("h4", BREAKS | BLOCK);
+
+    /**
+     * The &lt;h5&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag H5 = new Tag("h5", BREAKS | BLOCK);
+
+    /**
+     * The &lt;h6&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag H6 = new Tag("h6", BREAKS | BLOCK);
+
+    /**
+     * The &lt;head&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag HEAD = new Tag("head", BREAKS | BLOCK);
+
+    /**
+     * The &lt;hr&gt; tag , breaks flow.
+     */
+    public static final Tag HR = new Tag("hr", BREAKS);
+
+    /**
+     * The &lt;html&gt; tag , breaks flow.
+     */
+    public static final Tag HTML = new Tag("html", BREAKS);
+
+    /**
+     * The &lt;i&gt; tag
+     */
+    public static final Tag I = new Tag("i");
+
+    /**
+     * The &lt;img&gt; tag
+     */
+    public static final Tag IMG = new Tag("img");
+
+    /**
+     * The &lt;input&gt; tag
+     */
+    public static final Tag INPUT = new Tag("input");
+
+    /**
+     * The &lt;isindex&gt; tag , breaks flow.
+     */
+    public static final Tag ISINDEX = new Tag("isindex", BREAKS);
+
+    /**
+     * The &lt;kbd&gt; tag
+     */
+    public static final Tag KBD = new Tag("kbd");
+
+    /**
+     * The &lt;li&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag LI = new Tag("li", BREAKS | BLOCK);
+
+    /**
+     * The &lt;link&gt; tag
+     */
+    public static final Tag LINK = new Tag("link");
+
+    /**
+     * The &lt;map&gt; tag
+     */
+    public static final Tag MAP = new Tag("map");
+
+    /**
+     * The &lt;menu&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag MENU = new Tag("menu", BREAKS | BLOCK);
+
+    /**
+     * The &lt;meta&gt; tag
+     */
+    public static final Tag META = new Tag("meta");
+
+    /**
+     * The &lt;nobr&gt; tag
+     */
+    public static final Tag NOBR = new Tag("nobr");
+
+    /**
+     * The &lt;noframes&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag NOFRAMES = new Tag("noframes", BREAKS | BLOCK);
+
+    /**
+     * The &lt;object&gt; tag
+     */
+    public static final Tag OBJECT = new Tag("object");
+
+    /**
+     * The &lt;ol&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag OL = new Tag("ol", BREAKS | BLOCK);
+
+    /**
+     * The &lt;option&gt; tag
+     */
+    public static final Tag OPTION = new Tag("option");
+
+    /**
+     * The &lt;p&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag P = new Tag("p", BREAKS | BLOCK);
+
+    /**
+     * The &lt;param&gt; tag
+     */
+    public static final Tag PARAM = new Tag("param");
+
+    /**
+     * The &lt;pre&gt; tag , breaks flow, block tag, preformatted.
+     */
+    public static final Tag PRE = new Tag("pre", BREAKS | BLOCK | PREFORMATTED);
+
+    /**
+     * The &lt;s&gt; tag
+     */
+    public static final Tag S = new Tag("s");
+
+    /**
+     * The &lt;samp&gt; tag
+     */
+    public static final Tag SAMP = new Tag("samp");
+
+    /**
+     * The &lt;script&gt; tag
+     */
+    public static final Tag SCRIPT = new Tag("script");
+
+    /**
+     * The &lt;select&gt; tag
+     */
+    public static final Tag SELECT = new Tag("select");
+
+    /**
+     * The &lt;small&gt; tag
+     */
+    public static final Tag SMALL = new Tag("small");
+
+    /**
+     * The &lt;span&gt; tag
+     */
+    public static final Tag SPAN = new Tag("span");
+
+    /**
+     * The &lt;strike&gt; tag
+     */
+    public static final Tag STRIKE = new Tag("strike");
+
+    /**
+     * The &lt;strong&gt; tag
+     */
+    public static final Tag STRONG = new Tag("strong");
+
+    /**
+     * The &lt;style&gt; tag
+     */
+    public static final Tag STYLE = new Tag("style");
+
+    /**
+     * The &lt;sub&gt; tag
+     */
+    public static final Tag SUB = new Tag("sub");
+
+    /**
+     * The &lt;sup&gt; tag
+     */
+    public static final Tag SUP = new Tag("sup");
+
+    /**
+     * The &lt;table&gt; tag , block tag.
+     */
+    public static final Tag TABLE = new Tag("table", BLOCK);
+
+    /**
+     * The &lt;td&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag TD = new Tag("td", BREAKS | BLOCK);
+
+    /**
+     * The &lt;textarea&gt; tag , preformatted.
+     */
+    public static final Tag TEXTAREA = new Tag("textarea", PREFORMATTED);
+
+    /**
+     * The &lt;th&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag TH = new Tag("th", BREAKS | BLOCK);
+
+    /**
+     * The &lt;title&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag TITLE = new Tag("title", BREAKS | BLOCK);
+
+    /**
+     * The &lt;tr&gt; tag , block tag.
+     */
+    public static final Tag TR = new Tag("tr", BLOCK);
+
+    /**
+     * The &lt;tt&gt; tag
+     */
+    public static final Tag TT = new Tag("tt");
+
+    /**
+     * The &lt;u&gt; tag
+     */
+    public static final Tag U = new Tag("u");
+
+    /**
+     * The &lt;ul&gt; tag , breaks flow, block tag.
+     */
+    public static final Tag UL = new Tag("ul", BREAKS | BLOCK);
+
+    /**
+     * The &lt;var&gt; tag
+     */
+    public static final Tag VAR = new Tag("var");
+
+    /* Special tags */
+
+    /**
+     * Total number of syntetic tags, delared in the Tag class.
+     * This must be adjusted if the new synthetic tags are declared.
+     * Otherwise the HTML.getAllTags() will not work as expected.
+     */
+    private static final int TOTAL_SYNTHETIC_TAGS = 3;
+
+    /**
+     * All comments are labeled with this tag.
+     * This tag is not included into the array, returned by getAllTags().
+     * toString() returns 'comment'. HTML reader synthesizes this tag.
+     */
+    public static final Tag COMMENT = new Tag("comment", SYNTETIC);
+
+    /**
+     *  All text content is labeled with this tag.
+     *  This tag is not included into the array, returned by getAllTags().
+     *  toString() returns 'content'. HTML reader synthesizes this tag.
+     */
+    public static final Tag CONTENT = new Tag("content", SYNTETIC);
+
+    /**
+     * All text content must be in a paragraph element.
+     * If a paragraph didn't exist when content was encountered,
+     * a paragraph is manufactured.
+     * toString() returns 'implied'. HTML reader synthesizes this tag.
+     */
+    public static final Tag IMPLIED = new Tag("implied", SYNTETIC);
+    final String name;
+    final int flags;
+
+    /**
+     * Create the unitialised instance of HTML.Tag.
+     *
+     * The {@link #breaksFlow()}, {@link #isBlock()}
+     * and {@link #isPreformatted()} will always return false.
+     * The {@link #toString()} will return <code>null</code>.
+     *
+     * @since 1.3
+     */
+    public Tag()
+    {
+      name = null;
+      flags = 0;
+    }
+
+    /**
+     * Creates a new Tag with the specified id, and with causesBreak
+     * and isBlock set to false.
+     */
+    protected Tag(String id)
+    {
+      name = id;
+      flags = 0;
+    }
+
+    /**
+     * Creates a new Tag with the specified tag name and
+     * causesBreak and isBlock properties.
+     */
+    protected Tag(String id, boolean causesBreak, boolean isBlock)
+    {
+      int f = 0;
+
+      if (causesBreak)
+        {
+          f |= BREAKS;
+        }
+
+      if (isBlock)
+        {
+          f |= BLOCK;
+        }
+
+      flags = f;
+      name = id;
+    }
+
+    /**
+     * Create a tag taking flags.
+     */
+    Tag(String id, int a_flags)
+    {
+      name = id;
+      flags = a_flags;
+    }
+
+    /**
+     * Returns true if this tag is a block tag, which is a tag used to
+     * add structure to a document.
+     */
+    public boolean isBlock()
+    {
+      return (flags & BLOCK) != 0;
+    }
+
+    /**
+     * Returns true if this tag is pre-formatted, which is true if
+     * the tag is either PRE or TEXTAREA
+     */
+    public boolean isPreformatted()
+    {
+      return (flags & PREFORMATTED) != 0;
+    }
+
+    /**
+     * Returns true if this tag causes a line break to the flow of text
+     */
+    public boolean breaksFlow()
+    {
+      return (flags & BREAKS) != 0;
+    }
+
+    /**
+     * Calls compareTo on the tag names (Strings)
+     */
+    public int compareTo(Object other)
+    {
+      return name.compareTo(((Tag) other).name);
+    }
+
+    /**
+     * The tags are equal if the names are equal (ignoring case).
+     */
+    public boolean equals(Object other)
+    {
+      if (other == this)
+        {
+          return true;
+        }
+
+      if (!(other instanceof Tag))
+        {
+          return false;
+        }
+
+      Tag that = (Tag) other;
+
+      return that.name.equalsIgnoreCase(name);
+    }
+
+    /**
+     * Returns the hash code which corresponds to the string for this tag.
+     */
+    public int hashCode()
+    {
+      return name == null ? 0 : name.hashCode();
+    }
+
+    /**
+     * Returns the tag name. The names of the built-in tags are always
+     * returned in lowercase.
+     */
+    public String toString()
+    {
+      return name;
+    }
+
+    /**
+     * Return an array of HTML tags, declared in HTML.Tag class.
+     * WARNING: This method expects that the Tags are the only
+     * public fields declared in the Tag class.
+     */
+    static Tag[] getAllTags()
+    {
+      Field[] f = Tag.class.getFields();
+      Field x;
+
+      // The syntetic tags are not included.
+      Tag[] tags = new Tag[ f.length - TOTAL_SYNTHETIC_TAGS ];
+      int p = 0;
+      Tag t;
+
+      for (int i = 0; i < f.length; i++)
+        {
+          x = f [ i ];
+
+          if ((x.getModifiers() & Modifier.STATIC) != 0)
+            {
+              if (x.getType().equals(Tag.class))
+                {
+                  try
+                    {
+                      t = (Tag) x.get(null);
+
+                      if (!t.isSyntetic())
+                        {
+                          tags [ p++ ] = t;
+                        }
+                    }
+                  catch (IllegalAccessException ex)
+                    {
+                      unexpected(ex);
+                    }
+                  catch (IllegalArgumentException ex)
+                    {
+                      unexpected(ex);
+                    }
+                }
+            }
+        }
+
+      return tags;
+    }
+
+    /**
+     * Returns true for tags, generated by the html reader
+     * (COMMENT, CONTENT and IMPLIED).
+     */
+    boolean isSyntetic()
+    {
+      return (flags & SYNTETIC) != 0;
+    }
+
+    private static void unexpected(Exception ex)
+                            throws Error
+    {
+      throw new Error("This should never happen, report a bug", ex);
+    }
+  }
+
+  /**
+   * Represents an unknown HTML tag.
+   * @author Mark Wielaard (mark@klomp.org)
+   */
+  public static class UnknownTag
+    extends Tag
+    implements Serializable
+  {
+    private static final long serialVersionUID = -1534369342247250625L;
+
+    /**
+     * Creates a new UnknownTag with the specified name
+     * @param name The tag name.
+     *
+     */
+    public UnknownTag(String name)
+    {
+      super(name);
+    }
+  }
+
+  /**
+   * This value is returned for attributes without value that have no
+   * default value defined in the DTD.
+   */
+  public static final String NULL_ATTRIBUTE_VALUE = "#DEFAULT";
+
+  /* Package level html tag flags */
+  static final int BREAKS = 1;
+  static final int BLOCK = 2;
+  static final int PREFORMATTED = 4;
+  static final int SYNTETIC = 8;
+  private static Map tagMap;
+  private static Map attrMap;
+
+  /**
+   * The public constructor (does nothing). It it seldom required to have
+   * an instance of this class, because all public fields and methods
+   * are static.
+   */
+  public HTML()
+  {
+  }
+
+  /**
+   * Returns the set of the recognized HTML attributes.
+   */
+  public static HTML.Attribute[] getAllAttributeKeys()
+  {
+    return Attribute.getAllAttributes();
+  }
+
+  /**
+   * Returns the set of actual HTML tags that are recognized by
+   * the default HTML reader. The returned array does not include the
+   * COMMENT, CONTENT and IMPLIED tags.
+   */
+  public static HTML.Tag[] getAllTags()
+  {
+    return Tag.getAllTags();
+  }
+
+  /**
+   * Returns an htl attribute constant for the given attribute name.
+   * @param attName the attribute name, case insensitive
+   */
+  public static Attribute getAttributeKey(String attName)
+  {
+    if (attrMap == null)
+      {
+        // Create the map on demand.
+        attrMap = new TreeMap();
+
+        Attribute[] attrs = getAllAttributeKeys();
+
+        for (int i = 0; i < attrs.length; i++)
+          {
+            attrMap.put(attrs [ i ].toString(), attrs [ i ]);
+          }
+      }
+
+    return (Attribute) attrMap.get(attName.toLowerCase());
+  }
+
+  /**
+   * Searches the value of given attribute in the provided set.
+   * If the value is found (String type expected), tries to parse it as
+   * an integer value. If succeded, returns the obtained integer value.
+   *
+   * For example:<p><code>
+   * SimpleAttributeSet ase = new SimpleAttributeSet();
+   * ase.addAttribute(HTML.getAttributeKey("size"),"222");
+   * System.out.println(
+   *  HTML.getIntegerAttributeValue
+   *     (ase, HTML.getAttributeKey("size"), 333)); // prints "222"
+   * System.out.println(
+   *  HTML.getIntegerAttributeValue
+   *     (ase, HTML.getAttributeKey("width"), 333)); // prints "333".
+   * </code></p>
+   *
+   *
+   * @param set The attribute set to search in. If the set contains the
+   * given attribute, it must by a type of String.
+   * @param attribute The html attribute to search in
+   * @param defaultValue The value that is returned if the attribute is not
+   * found in the given set or if the NumberFormatException was thrown
+   * during the parsing.
+   */
+  public static int getIntegerAttributeValue(AttributeSet set,
+                                             HTML.Attribute attribute,
+                                             int defaultValue
+                                            )
+  {
+    Object v = set.getAttribute(attribute);
+
+    if (v == null)
+      {
+        return defaultValue;
+      }
+
+    try
+      {
+        return Integer.parseInt(v.toString().trim());
+      }
+    catch (Exception ex)
+      {
+        return defaultValue;
+      }
+  }
+
+  /**
+   * Returns a HTML tag constant for the given HTML attribute name.
+   * If the tag is unknown, the null is returned.
+   * @param tagName the tag name, case insensitive
+   */
+  public static Tag getTag(String tagName)
+  {
+    if (tagMap == null)
+      {
+        // Create the mao on demand.
+        tagMap = new TreeMap();
+
+        Tag[] tags = getAllTags();
+
+        for (int i = 0; i < tags.length; i++)
+          {
+            tagMap.put(tags [ i ].toString(), tags [ i ]);
+          }
+      }
+
+    return (Tag) tagMap.get(tagName.toLowerCase());
   }
 }
Index: libjava/javax/swing/text/html/HTMLDocument.java
===================================================================
RCS file: libjava/javax/swing/text/html/HTMLDocument.java
diff -N libjava/javax/swing/text/html/HTMLDocument.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/html/HTMLDocument.java	9 Jul 2005 22:10:19 -0000
@@ -0,0 +1,53 @@
+/* HTMLDocument.java --
+   Copyright (C) 2005  Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.text.html;
+
+import javax.swing.text.DefaultStyledDocument;
+
+/**
+ * TODO: This class is not yet completetely implemented.
+ *
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class HTMLDocument extends DefaultStyledDocument
+{
+  public void processHTMLFrameHyperlinkEvent(HTMLFrameHyperlinkEvent event)
+  {
+  }
+}
Index: libjava/javax/swing/text/html/HTMLEditorKit.java
===================================================================
RCS file: libjava/javax/swing/text/html/HTMLEditorKit.java
diff -N libjava/javax/swing/text/html/HTMLEditorKit.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/html/HTMLEditorKit.java	9 Jul 2005 22:10:19 -0000
@@ -0,0 +1,249 @@
+/* HTMLEditorKit.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.text.html;
+
+import java.io.Reader;
+import java.io.Serializable;
+
+import javax.swing.text.BadLocationException;
+import javax.swing.text.MutableAttributeSet;
+import javax.swing.text.StyledEditorKit;
+
+/**
+ * This class is NOT implemented. This file currently holds only
+ * declarations of the two enclosing classes, necessary for testing
+ * the implemented javax.swing.text.html.parser package.
+ *
+ * @author No authorship is taken, implement the class and be!
+ * TODO: replace this header after implementing the class.
+ */
+public class HTMLEditorKit
+  extends StyledEditorKit
+  implements Serializable, Cloneable
+{
+  /**
+   * The abstract HTML parser declaration.
+   */
+  public abstract static class Parser
+  {
+    /**
+     * Parse the HTML text, calling various methods of the provided callback
+     * in response to the occurence of the corresponding HTML constructions.
+     * @param reader The reader to read the source HTML from.
+     * @param callback The callback to receive information about the parsed
+     * HTML structures
+     * @param ignoreCharSet If true, the parser ignores all charset information
+     * that may be present in HTML documents.
+     * @throws IOException, normally if the reader throws one.
+     */
+    public abstract void parse(Reader reader, ParserCallback callback,
+                               boolean ignoreCharSet
+                              )
+                        throws java.io.IOException;
+  }
+
+  /**
+   * The "hook" that receives all information about the HTML document
+   * structure while parsing it. The methods are invoked by parser
+   * and should be normally overridden.
+   */
+  public static class ParserCallback
+  {
+    /**
+     * If the tag does not occurs in the html stream directly, but
+     * is supposed by parser, the tag attribute set contains this additional
+     * attribute, having value Boolean.True.
+     */
+    public static final Object IMPLIED = "_implied_";
+
+    /**
+     * The parser calls this method after it finishes parsing the document.
+     */
+    public void flush()
+               throws BadLocationException
+    {
+    }
+
+    /**
+     * Handle HTML comment, present in the given position.
+     * @param comment the comment
+     * @position the position of the comment in the text being parsed.
+     */
+    public void handleComment(char[] comment, int position)
+    {
+    }
+
+    /**
+     * Notifies about the character sequences, used to separate lines in
+     * this document. The parser calls this method after it finishes
+     * parsing the document, but before flush().
+     * @param end_of_line The "end of line sequence", one of: \r or \n or \r\n.
+     */
+    public void handleEndOfLineString(String end_of_line)
+    {
+    }
+
+    /**
+     * The method is called when the HTML closing tag ((like &lt;/table&gt;)
+     * is found or if the parser concludes that the one should be present
+     * in the current position.
+     * @param The tag being handled
+     * @position the tag position in the text being parsed.
+     */
+    public void handleEndTag(HTML.Tag tag, int position)
+    {
+    }
+
+    /**
+     * Handle the error.
+     * @param message The message, explaining the error.
+     * @param position The starting position of the fragment that has caused
+     * the error in the html document being parsed.
+     */
+    public void handleError(String message, int position)
+    {
+    }
+
+    /**
+     * Handle the tag with no content, like &lt;br&gt;. The method is
+     * called for the elements that, in accordance with the current DTD,
+     * has an empty content.
+     * @param tag The tag being handled.
+     * @param position The tag position in the text being parsed.
+     */
+    public void handleSimpleTag(HTML.Tag tag, MutableAttributeSet attributes,
+                                int position
+                               )
+    {
+    }
+
+    /**
+     * The method is called when the HTML opening tag ((like &lt;table&gt;)
+     * is found or if the parser concludes that the one should be present
+     * in the current position.
+     * @param tag The tag being handled
+     * @param position The tag position in the text being parsed
+     */
+    public void handleStartTag(HTML.Tag tag, MutableAttributeSet attributes,
+                               int position
+                              )
+    {
+    }
+
+    /**
+     * Handle the text section.
+     * @param text A section text.
+     * @param position The text position in the HTML document text being parsed.
+     */
+    public void handleText(char[] text, int position)
+    {
+    }
+  }
+
+  /**
+   * Use serialVersionUID (v1.4) for interoperability.
+   */
+  private static final long serialVersionUID = 8751997116710384592L;
+
+  /**
+   * Default cascading stylesheed file ("default.css").
+   */
+  public static final String DEFAULT_CSS = "default.css";
+
+  /**
+   * The <b>bold</b> action identifier.
+   */
+  public static final String BOLD_ACTION = "html-bold-action";
+
+  /**
+   * The <i>italic</i> action identifier.
+   */
+  public static final String ITALIC_ACTION = "html-italic-action";
+
+  /**
+   * The <font color="#FF0000">color</font> action indentifier
+   * (passing the color as an argument).
+   */
+  public static final String COLOR_ACTION = "html-color-action";
+
+  /**
+   * The <font size="+1">increase</font> font action identifier.
+   */
+  public static final String FONT_CHANGE_BIGGER = "html-font-bigger";
+
+  /**
+   * The <font size="-1">decrease</font> font action identifier.
+   */
+  public static final String FONT_CHANGE_SMALLER = "html-font-smaller";
+
+  /**
+   * Align images at the bottom.
+   */
+  public static final String IMG_ALIGN_BOTTOM = "html-image-align-bottom";
+
+  /**
+   * Align images at the middle.
+   */
+  public static final String IMG_ALIGN_MIDDLE = "html-image-align-middle";
+
+  /**
+   * Align images at the top.
+   */
+  public static final String IMG_ALIGN_TOP = "html-image-align-top";
+
+  /**
+   * Align images at the border.
+   */
+  public static final String IMG_BORDER = "html-image-border";
+
+  /**
+   * The "logical style" action identifier, passing that style as parameter.
+   */
+  public static final String LOGICAL_STYLE_ACTION = "html-logical-style-action";
+
+  /**
+   * The "ident paragraph left" action.
+   */
+  public static final String PARA_INDENT_LEFT = "html-para-indent-left";
+
+  /**
+   * The "ident paragraph right" action.
+   */
+  public static final String PARA_INDENT_RIGHT = "html-para-indent-right";
+}
\ No newline at end of file
Index: libjava/javax/swing/text/html/HTMLFrameHyperlinkEvent.java
===================================================================
RCS file: libjava/javax/swing/text/html/HTMLFrameHyperlinkEvent.java
diff -N libjava/javax/swing/text/html/HTMLFrameHyperlinkEvent.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/html/HTMLFrameHyperlinkEvent.java	9 Jul 2005 22:10:19 -0000
@@ -0,0 +1,132 @@
+/* HTMLFrameHyperlinkEvent.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.text.html;
+
+import java.net.URL;
+
+import javax.swing.event.HyperlinkEvent;
+import javax.swing.event.HyperlinkEvent.EventType;
+import javax.swing.text.Element;
+
+/**
+ * HTMLFrameHyperlinkEvent transfers information about the link that was
+ * activated in a frame.
+ *
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class HTMLFrameHyperlinkEvent
+  extends HyperlinkEvent
+{
+  private final String target_frame;
+
+  /**
+   * Creates a new hypertext link event.
+   *
+   * @param source The object this link is associated to.
+   * @param type The type of event.
+   * @param url The URL this link pointing too.
+   * @param element The element in the document representing the anchor.
+   * @param frame - the Frame to display the document in.
+   */
+  public HTMLFrameHyperlinkEvent(Object source, EventType type, URL url,
+                                 Element element, String frame)
+  {
+    super(source, type, url, frame, element);
+    target_frame = frame;
+  }
+
+  /**
+   * Creates a new hypertext link event.
+   *
+   * @param source The object this link is associated to.
+   * @param type The type of event.
+   * @param url The URL this link pointing too.
+   * @param frame - the Frame to display the document in.
+   */
+  public HTMLFrameHyperlinkEvent(Object source, EventType type, URL url,
+                                 String frame)
+  {
+    super(source, type, url, frame);
+    target_frame = frame;
+  }
+
+  /**
+   * Creates a new hypertext link event.
+   *
+   * @param source The object this link is associated to.
+   * @param type The type of event.
+   * @param url The URL this link pointing too.
+   * @param description The description for this link.
+   * @param element The element in the document representing the anchor.
+   * @param frame - the Frame to display the document in.
+   */
+  public HTMLFrameHyperlinkEvent(Object source, EventType type, URL url,
+                                 String description, Element element,
+                                 String frame)
+  {
+    super(source, type, url, description, element);
+    target_frame = frame;
+  }
+
+  /**
+   * Creates a new hypertext link event.
+   *
+   * @param source The object this link is associated to.
+   * @param type The type of event.
+   * @param url The URL this link pointing too.
+   * @param description The description for this link.
+   * @param frame - the Frame to display the document in.
+   */
+  public HTMLFrameHyperlinkEvent(Object source, EventType type, URL url,
+                                 String description, String frame)
+  {
+    super(source, type, url, description);
+    target_frame = frame;
+  }
+
+  /**
+   * Gets the string, passed as the target frame identifier.
+   *
+   * @return the target for the link.
+   */
+  public String getTarget()
+  {
+    return target_frame;
+  }
+}
Index: libjava/javax/swing/text/html/parser/AttributeList.java
===================================================================
RCS file: libjava/javax/swing/text/html/parser/AttributeList.java
diff -N libjava/javax/swing/text/html/parser/AttributeList.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/html/parser/AttributeList.java	9 Jul 2005 22:10:19 -0000
@@ -0,0 +1,294 @@
+/* AttributeList.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.text.html.parser;
+
+import gnu.javax.swing.text.html.parser.support.gnuStringIntMapper;
+
+import java.io.Serializable;
+
+import java.util.Enumeration;
+import java.util.Vector;
+
+/**
+ * <p>
+ * Stores the attribute information, obtained by parsing SGML (DTD) tag
+ * <code>&lt;!ATTLIST .. &gt;</code></p>
+ * <p>
+ * Elements can have a associated named properties (attributes) having the
+ * assigned values. The element start tag can have any number of attribute
+ * value pairs, separated by spaces. They can appear in any order.
+ * SGML requires you to delimit the attribute values using either double (")
+ * or single (') quotation marks.  In HTML, it is possible
+ * (but not recommended) to specify the value of an attribute without
+ * quotation marks. Such attribute value may only contain
+ * letters, digits, hyphens (-) and periods (.) .
+ * </p>
+ * <p>
+ * The <code>AttributeList</code> defines a single attribute that additionally
+ * has a pointer referencing the possible subsequent attribute.
+ * The whole structure is just a simple linked list, storing all attributes of
+ * some <code>Element</code>.
+ * Use the <code>getNext()</code> method repeatedly to see all attributes in
+ * the list.
+ * </p>
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public final class AttributeList
+  implements DTDConstants, Serializable
+{
+  /** Maps between type names and they string values. */
+  private static final gnuStringIntMapper mapper =
+    new gnuStringIntMapper()
+    {
+      protected void create()
+      {
+        add("CDATA", DTDConstants.CDATA);
+        add("ENTITY", DTDConstants.ENTITY);
+        add("ENTITIES", DTDConstants.ENTITIES);
+        add("ID", DTDConstants.ID);
+        add("IDREF", DTDConstants.IDREF);
+        add("IDREFS", DTDConstants.IDREFS);
+        add("NAME", DTDConstants.NAME);
+        add("NAMES", DTDConstants.NAMES);
+        add("NMTOKEN", DTDConstants.NMTOKEN);
+        add("NMTOKENS", DTDConstants.NMTOKENS);
+        add("NOTATION", DTDConstants.NOTATION);
+        add("NUMBER", DTDConstants.NUMBER);
+        add("NUMBERS", DTDConstants.NUMBERS);
+        add("NUTOKEN", DTDConstants.NUTOKEN);
+        add("NUTOKENS", DTDConstants.NUTOKENS);
+      }
+    };
+
+  /** Use serialVersionUID for interoperability. */
+  private static final long serialVersionUID = -1361214058742015233L;
+
+  /**
+   * The value of ( = pointer to ) the next attribute in the linked list,
+   * storing all attributes of some Element. Contains null for the
+   * last attribute.
+   */
+  public AttributeList next;
+
+  /**
+   * The name of the attribute. The attribute names are case insensitive.
+   */
+  public String name;
+
+  /**
+   * The default value of this attribute. Equals to null if no default value
+   * is specified.
+   */
+  public String value;
+
+  /**
+   * The explicit set of the allowed values of this attribute. Equals to
+   * null, if this parameter was not specified.
+   * Values, defined in DTD, are case insensitive.
+   */
+  public Vector values;
+
+  /**
+   * The modifier of this attribute. This field contains one of the
+   * following DTD constants:
+   * <ul>
+   * <li> REQUIRED if the attribute value is always required,</li>
+   * <li> IMPLIED if the user agent must supply the default value itself,</li>
+   * <li> FIXED if the attribute value is fixed to some value and cannot
+   * be changed.</li>
+   * <li> DEFAULT if the attribute default value has been supplied.</li>
+   * <li> CURRENT the value that at any point in the document is
+   * the last value supplied for that element. A value is required to be
+   * supplied for the first* occurrence of an element</li>
+   * <li> CONREF specifies the IDREF value of
+   * the reference to content in another location of the document.
+   * The element with this attribute is empty, the content from
+   * that another location must be used instead.</li>
+   * </ul>
+   */
+  public int modifier;
+
+  /**
+   * The type of the attribute. The possible values of this field
+   * (NUMBER, NAME, ID, CDATA and so on) are defined in DTDConstants.
+   */
+  public int type;
+
+  /**
+   * Creates the attribute with the given name, initializing other fields
+   * to the default values ( 0 and null ).
+   *
+   * @param a_name The name of the attribute.
+   */
+  public AttributeList(String a_name)
+  {
+    name = a_name;
+  }
+
+  /**
+   * Creates the attribute with the given properties.
+   * @param a_name The name of the attribute
+   * @param a_type The type of the attribute. The possible values are defined
+   * in <code> DTDConstants</code>.
+   * @param a_modifier The modifier of this attribute. The possible values
+   * are defined in <code> DTDConstants</code>.
+   * @param a_default The default value of this attribute
+   * @param allowed_values The explicit set of the allowed values of
+   * this attribute
+   * @param a_next The value of the subsequent instance of the AttributeList,
+   * representing the next attribute definition for the same element.
+   * Equals to null for the last attribute definition.
+   */
+  public AttributeList(String a_name, int a_type, int a_modifier,
+                       String a_default, Vector allowed_values,
+                       AttributeList a_next
+                      )
+  {
+    this(a_name);
+    type = a_type;
+    modifier = a_modifier;
+    value = a_default;
+    values = allowed_values;
+    next = a_next;
+  }
+
+  /**
+   * Get the modifier of this attribute. This field contains one of the
+   * following DTD constants:
+   * <ul>
+   * <li> REQUIRED if the attribute value is always required,</li>
+   * <li> IMPLIED if the user agent must supply the default value itself,</li>
+   * <li> FIXED if the attribute value is fixed to some value and cannot
+   * be changed.</li>
+   * <li> DEFAULT if the attribute default value has been supplied.</li>
+   * <li> CURRENT the value that at any point in the document is
+   * the last value supplied for that element. A value is required to be
+   * supplied for the first* occurrence of an element</li>
+   * <li> CONREF specifies the IDREF value of
+   * the reference to content in another location of the document.
+   * The element with this attribute is empty, the content from
+   * that another location must be used instead.</li>
+   * </ul>
+   */
+  public int getModifier()
+  {
+    return modifier;
+  }
+
+  /**
+   * Get the name of the attribute.
+   * The value is returned as it was supplied to a
+   * constructor, preserving the character case.
+   */
+  public String getName()
+  {
+    return name;
+  }
+
+  /**
+   * Get the value of ( = pointer to ) the next attribute in the linked list,
+   * storing all attributes of some Element. Contains null for the
+   * last attribute.
+   */
+  public AttributeList getNext()
+  {
+    return next;
+  }
+
+  /**
+   * Get the type of the attribute. The possible values of this field
+   * (NUMBER, NAME, ID, CDATA and so on) are defined in DTDConstants.
+   */
+  public int getType()
+  {
+    return type;
+  }
+
+  /**
+   * Get the default value of this attribute.
+   */
+  public String getValue()
+  {
+    return value;
+  }
+
+  /**
+   * Get the allowed values of this attribute.
+   */
+  public Enumeration getValues()
+  {
+    return values.elements();
+  }
+
+  /**
+   * Converts a string value, representing a valid SGLM attribute type,
+   * into the corresponding value, defined in DTDConstants.
+   * @param typeName the name of the type (character case is ignored).
+   * @return a value from DTDConstants or DTDConstants.ANY if the
+   * string is not representing a known type. The known attribute types
+   * in this implementation are CDATA, ENTITY, ENTITIES, ID, IDREF, IDREFS,
+   *  NAME, NAMES, NMTOKEN, NMTOKENS, NOTATION, NUMBER, NUMBERS, NUTOKEN and
+   *  NUTOKENS.
+   * @throws NullPointerException if the passed parameter is null.
+   */
+  public static int name2type(String typeName)
+  {
+    return mapper.get(typeName.toUpperCase());
+  }
+
+  /**
+   * Returns the attribute name.
+   */
+  public String toString()
+  {
+    return name;
+  }
+
+  /**
+   * Converts a value from DTDConstants into the string representation.
+   * @param type - an integer value of the public static integer field,
+   * defined in the DTDConstants class.
+   * @return a corresponding SGML DTD keyword (UPPERCASE) or null if there
+   * are no attribute type constant having the given value.
+   */
+  public static String type2name(int type)
+  {
+    return mapper.get(type);
+  }
+}
Index: libjava/javax/swing/text/html/parser/ContentModel.java
===================================================================
RCS file: libjava/javax/swing/text/html/parser/ContentModel.java
diff -N libjava/javax/swing/text/html/parser/ContentModel.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/html/parser/ContentModel.java	9 Jul 2005 22:10:19 -0000
@@ -0,0 +1,218 @@
+/* ContentModel.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.text.html.parser;
+
+import gnu.javax.swing.text.html.parser.models.transformer;
+
+import java.io.Serializable;
+
+import java.util.Vector;
+
+/**
+ * A representation of the element content. The instances of this class
+ * can be arranged into the linked list, representing a BNF expression.
+ * The content model is constructed as a branched tree structure in the
+ * following way:
+ * <pre>
+ * a = new ContentModel('+', A, null); // a reprensents A+
+ * b = new ContentModel('&amp;', B, a); // b represents B &amp; A+
+ * c = new ContentModel('*', b, null); // c represents ( B &amp; A+) *
+ * d = new ContentModel('|', new ContentModel('*', A, null),
+ *          new ContentModel('?', B, null)); // d represents ( A* | B? )
+ * </pre>
+ * where the valid operations are:
+ * <ul>
+ * <li><code>E* </code> E occurs zero or more times</li>
+ * <li><code>E+ </code> E occurs one or more times</li>
+ * <li><code>E? </code> E occurs once or not atl all</li>
+ * <li><code>A,B</code> A occurs before B</li>
+ * <li><code>A|B</code> both A and B are permitted in any order.
+ * The '|' alone does not permit the repetetive occurence of A or B
+ * (use <code>(A|B)*</code>.</li>
+ * <li><code>A&amp;B</code> both A and B must occur once (in any order)</li>
+ * </ul>
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public final class ContentModel
+  implements Serializable
+{
+  /** Use serialVersionUID for interoperability. */
+  private static final long serialVersionUID = -1130825523866321257L;
+
+  /**
+   * The next content model model ( = pointer to the next element of
+   * the linked list) for the binary expression (',','&amp;' or '|'). Null
+   * for the last element in the list.
+   */
+  public ContentModel next;
+
+  /**
+   * The document content, containing either Element or the enclosed
+   * content model (that would be in the parentheses in BNF expression).
+   */
+  public Object content;
+
+  /**
+   * Specifies the BNF operation between this node and the node,
+   * stored in the field <code>next</code> (or for this node, if it is
+   * an unary operation.
+   */
+  public int type;
+
+  /** Create a content model initializing all fields to default values. */
+  public ContentModel()
+  {
+  }
+
+  /**
+   * Create a content model, consisting of the single element.
+   * Examples:
+   *<code>
+   * a = new ContentModel('+', A, null); // a reprensents A+
+   * b = new ContentModel('&amp;', B, a);    // b represents  B &amp; A+
+   * c = new ContentModel('*', b, null); // c represents  ( B &amp; A+) *
+   * d = new ContentModel('|', A,
+   *    new ContentModel('?',b, null);
+   *     // d represents
+   * </code>
+   */
+  public ContentModel(Element a_content)
+  {
+    content = a_content;
+  }
+
+  /**
+   * Create a content model, involving expression of the given type.
+   * @param a_type The expression operation type ('*','?' or '+'
+   * @param a_content The content for that the expression is applied.
+   */
+  public ContentModel(int a_type, ContentModel a_content)
+  {
+    content = a_content;
+    type = a_type;
+  }
+
+  /**
+   * Create a content model, involving binary expression of the given type.
+   * @param a_type The expression operation type ( ',', '|' or '&amp;').
+   * @param a_content The content of the left part of the expression.
+   * @param a_next The content model, representing the right part of the
+   * expression.
+   */
+  public ContentModel(int a_type, Object a_content, ContentModel a_next)
+  {
+    content = a_content;
+    type = a_type;
+    next = a_next;
+  }
+
+  /**
+   * Adds all list elements to the given vector, ignoring the
+   * operations between the elements. The old vector values are not
+   * discarded.
+   * @param elements - a vector to add the values to.
+   */
+  public void getElements(Vector elements)
+  {
+    ContentModel c = this;
+
+    while (c != null)
+      {
+        elements.add(c.content);
+        c = c.next;
+      }
+  }
+
+  /**
+   * Checks if the content model matches an empty input stream.
+   * The empty content is created using SGML DTD keyword EMPTY.
+   * The empty model is a model with the content field equal to null.
+   *
+   * @return true if the content field is equal to null.
+   */
+  public boolean empty()
+  {
+    return content == null;
+  }
+
+  /**
+   * Get the element, stored in the <code>next.content</code>.
+   * The method is programmed as the part of the standard API, but not
+   * used in this implementation.
+   * @return the value of the field <code>next</code>.
+   */
+  public Element first()
+  {
+    return (Element) next.content;
+  }
+
+  /**
+   * Checks if this object can potentially be the first token in the
+   * ContenModel list. The method is programmed as the part of the
+   *  standard API, but not used in this implementation.
+   */
+  public boolean first(Object token)
+  {
+    ContentModel c = this;
+    while (c.next != null)
+      {
+        if (c.content != null && c.content.toString().equals(token.toString()) &&
+            c.type != ','
+           )
+
+          // Agree if the operation with the preceeding element
+          // is not the comma operation.
+          return true;
+        c = c.next;
+      }
+    return false;
+  }
+
+  /**
+   * Returns a string representation (an expression) of this content model.
+   * The expression has BNF-like syntax, except the absence of the
+   * unary operator is additionally indicated by " ' ". It is
+   * advisable to check the created models for correctness using this
+   * method.
+   */
+  public String toString()
+  {
+    return transformer.transform(this).toString();
+  }
+}
Index: libjava/javax/swing/text/html/parser/DTD.java
===================================================================
RCS file: libjava/javax/swing/text/html/parser/DTD.java
diff -N libjava/javax/swing/text/html/parser/DTD.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/html/parser/DTD.java	9 Jul 2005 22:10:19 -0000
@@ -0,0 +1,607 @@
+/* DTD.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.text.html.parser;
+
+import java.io.DataInputStream;
+import java.io.EOFException;
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.util.BitSet;
+import java.util.Hashtable;
+import java.util.StringTokenizer;
+import java.util.Vector;
+
+/**
+ * <p>Representation or the SGML DTD document.
+ * Provides basis for describing a syntax of the
+ * HTML documents. The fields of this class are NOT initialized in
+ * constructor. You need to do this separately before passing this data
+ * structure to the HTML parser. The subclasses with the fields, pre-
+ * initialized, for example, for HTML 4.01, can be available only between
+ * the implementation specific classes
+ * ( for example, {@link gnu.javax.swing.text.html.parser.HTML_401F }
+ * in this implementation).</p>
+ * <p>
+ * If you need more information about SGML DTD documents,
+ * the author suggests to read SGML tutorial on
+ * {@link http://www.w3.org/TR/WD-html40-970708/intro/sgmltut.html}.
+ * We also recommend Goldfarb C.F (1991) <i>The SGML Handbook</i>,
+ * Oxford University Press, 688 p, ISBN: 0198537379.
+ * </p>
+ * <p>
+ * Warning: the html, head and other tag fields will only be automatically
+ * assigned if the VM has the correctly implemented reflection mechanism.
+ * As these fields are not used anywhere in the implementation, not
+ * exception will be thrown in the opposite case.
+ * </p>
+ *
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class DTD
+  implements DTDConstants
+{
+  /**
+   * The version of the persistent data format.
+   */
+  public static int FILE_VERSION = 1;
+
+  /**
+   * The table of existing available DTDs.
+   */
+  static Hashtable dtdHash = new Hashtable();
+
+  /**
+   * The applet element for this DTD.
+   */
+  public Element applet;
+
+  /**
+   * The base element for this DTD.
+   */
+  public Element base;
+
+  /**
+   * The body element for this DTD.
+   */
+  public Element body;
+
+  /**
+   * The head element for this DTD.
+   */
+  public Element head;
+
+  /**
+   * The html element for this DTD.
+   */
+  public Element html;
+
+  /**
+   * The isindex element of for this DTD.
+   */
+  public Element isindex;
+
+  /**
+   * The meta element for this DTD.
+   */
+  public Element meta;
+
+  /**
+   * The p element for this DTD.
+   */
+  public Element p;
+
+  /**
+   * The param element for this DTD.
+   */
+  public Element param;
+
+  /**
+   * The pcdata for this DTD.
+   */
+  public Element pcdata;
+
+  /**
+   * The title element for this DTD.
+   */
+  public Element title;
+
+  /**
+   * The element for accessing all DTD elements by name.
+   */
+  public Hashtable elementHash = new Hashtable();
+
+  /**
+   * The entity table for accessing all DTD entities by name.
+   */
+  public Hashtable entityHash = new Hashtable();
+
+  /**
+   *  The name of this DTD.
+   */
+  public String name;
+
+  /**
+   * Contains all elements in this DTD. The
+   * javax.swing.text.html.parser.Element#index field of all elements
+   * in this vector is set to the element position in this vector.
+   */
+  public Vector elements = new Vector();
+
+  /** Create a new DTD with the specified name. */
+  protected DTD(String a_name)
+  {
+    name = a_name;
+  }
+
+  /** Get this DTD by name. The current implementation
+   * only looks in the internal table of DTD documents. If no corresponding
+   * entry is found, the new entry is created, placed into
+   * the table and returned. */
+  public static DTD getDTD(String name)
+                    throws IOException
+  {
+    DTD d = (DTD) dtdHash.get(name);
+
+    if (d == null)
+      {
+        d = new DTD(name);
+        dtdHash.put(d.name, d);
+      }
+
+    return d;
+  }
+
+  /**
+   * Get the element by the element name. If the element is not yet
+   * defined, it is newly created and placed into the element table.
+   * If the element name matches (ingoring case) a public non static
+   * element field in this class, this field is assigned to the value
+   * of the newly created element.
+   */
+  public Element getElement(String element_name)
+  {
+    return newElement(element_name);
+  }
+
+  /**
+   * Get the element by the value of its
+   * {@link javax.swing.text.html.parser.Element#index} field.
+   */
+  public Element getElement(int index)
+  {
+    return (Element) elements.get(index);
+  }
+
+  /**
+   * Get the entity with the given identifier.
+   * @param id that can be returned by
+   * {@link javax.swing.text.html.parser.Entity#name2type(String an_entity)}
+   * @return The entity from this DTD or null if there is no entity with
+   * such id or such entity is not present in the table of this instance.
+   */
+  public Entity getEntity(int id)
+  {
+    String name = Entity.mapper.get(id);
+
+    if (name != null)
+      return (Entity) entityHash.get(name);
+    else
+      return null;
+  }
+
+  /**
+   * Get the named entity by its name.
+   */
+  public Entity getEntity(String entity_name)
+  {
+    return (Entity) entityHash.get(entity_name);
+  }
+
+  /**
+   * Get the name of this instance of DTD
+   */
+  public String getName()
+  {
+    return name;
+  }
+
+  /**
+   * Creates, adds into the entity table and returns the
+   * character entity like <code>&amp;lt;</code>
+   *  (means '<code>&lt;</code>' );
+   * @param name The entity name (without heading &amp; and closing ;)
+   * @param type The entity type
+   * @param character The entity value (single character)
+   * @return The created entity
+   */
+  public Entity defEntity(String name, int type, int character)
+  {
+    Entity e = newEntity(name, type);
+    e.data = new char[] { (char) character };
+    return e;
+  }
+
+  /**
+   * Define the attributes for the element with the given name.
+   * If the element is not exist, it is created.
+   * @param forElement
+   * @param attributes
+   */
+  public void defineAttributes(String forElement, AttributeList attributes)
+  {
+    Element e = (Element) elementHash.get(forElement.toLowerCase());
+
+    if (e == null)
+      e = newElement(forElement);
+
+    e.atts = attributes;
+  }
+
+  /**
+   * Defines the element and adds it to the element table. Sets the
+   * <code>Element.index</code> field to the value, unique for this
+   * instance of DTD. If the element with the given name already exists,
+   * replaces all other its settings by the method argument values.
+   * @param name the name of the element
+   * @param type the type of the element
+   * @param headless true if the element needs no starting tag
+   * (should not occur in HTML).
+   * @param tailless true if the element needs no ending tag (like
+   * <code>&lt;hr&gt;</code>
+   * @param content the element content
+   * @param exclusions the set of elements that must not occur inside
+   * this element. The <code>Element.index</code> value defines which
+   * bit in this bitset corresponds to that element.
+   * @param inclusions the set of elements that can occur inside this
+   * element. the <code>Element.index</code> value defines which
+   * bit in this bitset corresponds to that element.
+   * @param attributes the element attributes.
+   * @return the newly defined element.
+   */
+  public Element defineElement(String name, int type, boolean headless,
+                               boolean tailless, ContentModel content,
+                               BitSet exclusions, BitSet inclusions,
+                               AttributeList attributes
+                              )
+  {
+    Element e = newElement(name);
+    e.type = type;
+    e.oStart = headless;
+    e.oEnd = tailless;
+    e.content = content;
+    e.exclusions = exclusions;
+    e.inclusions = inclusions;
+    e.atts = attributes;
+
+    return e;
+  }
+
+  /**
+   * Creates, intializes and adds to the entity table the new
+   * entity.
+   * @param name the name of the entity
+   * @param type the type of the entity
+   * @param data the data section of the entity
+   * @return the created entity
+   */
+  public Entity defineEntity(String name, int type, char[] data)
+  {
+    Entity e = newEntity(name, type);
+    e.data = data;
+
+    return e;
+  }
+
+  /** Place this DTD into the DTD table. */
+  public static void putDTDHash(String name, DTD dtd)
+  {
+    dtdHash.put(name, dtd);
+  }
+
+  /**
+   * <p>Reads DTD from an archived format. This format is not standardized
+   * and differs between implementations.</p><p> This implementation
+   * reads and defines all entities and elements using
+   * ObjectInputStream. The elements and entities can be written into the
+   * stream in any order. The objects other than elements and entities
+   * are ignored.</p>
+   * @param stream A data stream to read from.
+   * @throws java.io.IOException If one is thrown by the input stream
+   */
+  public void read(DataInputStream stream)
+            throws java.io.IOException
+  {
+    ObjectInputStream oi = new ObjectInputStream(stream);
+    Object def;
+    try
+      {
+        while (true)
+          {
+            def = oi.readObject();
+            if (def instanceof Element)
+              {
+                Element e = (Element) def;
+                elementHash.put(e.name.toLowerCase(), e);
+                assignField(e);
+              }
+            else if (def instanceof Entity)
+              {
+                Entity e = (Entity) def;
+                entityHash.put(e.name, e);
+              }
+          }
+      }
+    catch (ClassNotFoundException ex)
+      {
+        throw new IOException(ex.getMessage());
+      }
+    catch (EOFException ex)
+      {
+        // ok EOF
+      }
+  }
+
+  /**
+   * Returns the name of this instance of DTD.
+   */
+  public String toString()
+  {
+    return name;
+  }
+
+  /**
+   * Creates and returns new attribute (not an attribute list).
+   * @param name the name of this attribute
+   * @param type the type of this attribute (FIXED, IMPLIED or
+   * REQUIRED from <code>DTDConstants</code>).
+   * @param modifier the modifier of this attribute
+   * @param default_value the default value of this attribute
+   * @param allowed_values the allowed values of this attribute. The multiple
+   * possible values in this parameter are supposed to be separated by
+   * '|', same as in SGML DTD <code>&lt;!ATTLIST </code>tag. This parameter
+   * can be null if no list of allowed values is specified.
+   * @param atts the previous attribute of this element. This is
+   * placed to the field
+   * {@link javax.swing.text.html.parser.AttributeList#next },
+   * creating a linked list.
+   * @return
+   */
+  protected AttributeList defAttributeList(String name, int type, int modifier,
+                                           String default_value,
+                                           String allowed_values,
+                                           AttributeList atts
+                                          )
+  {
+    AttributeList al = new AttributeList(name);
+    al.modifier = modifier;
+    al.value = default_value;
+    al.next = atts;
+
+    if (allowed_values != null)
+      {
+        StringTokenizer st = new StringTokenizer(allowed_values, " \t|");
+        Vector v = new Vector(st.countTokens());
+
+        while (st.hasMoreTokens())
+          v.add(st.nextToken());
+
+        al.values = v;
+      }
+
+    return al;
+  }
+
+  /**
+   * Creates a new content model.
+   * @param type specifies the BNF operation for this content model.
+   * The valid operations are documented in the
+   * {@link javax.swing.text.html.parser.ContentModel#type }.
+   * @param content the content of this content model
+   * @param next if the content model is specified by BNF-like
+   * expression, contains the rest of this expression.
+   * @return The newly created content model.
+   */
+  protected ContentModel defContentModel(int type, Object content,
+                                         ContentModel next
+                                        )
+  {
+    ContentModel model = new ContentModel();
+    model.type = type;
+    model.next = next;
+    model.content = content;
+
+    return model;
+  }
+
+  /**
+   * Defines a new element and adds it to the element table.
+   * If the element alredy exists,
+   * overrides it settings with the specified values.
+   * @param name the name of the new element
+   * @param type the type of the element
+   * @param headless true if the element needs no starting tag
+   * @param tailless true if the element needs no closing tag
+   * @param content the element content.
+   * @param exclusions the elements that must be excluded from the
+   * content of this element, in all levels of the hierarchy.
+   * @param inclusions the elements that can be included as the
+   * content of this element.
+   * @param attributes the element attributes.
+   * @return the created or updated element.
+   */
+  protected Element defElement(String name, int type, boolean headless,
+                               boolean tailless, ContentModel content,
+                               String[] exclusions, String[] inclusions,
+                               AttributeList attributes
+                              )
+  {
+    // compute the bit sets
+    BitSet exclude = bitSet(exclusions);
+    BitSet include = bitSet(inclusions);
+
+    Element e =
+      defineElement(name, type, headless, tailless, content, exclude, include,
+                    attributes
+                   );
+
+    return e;
+  }
+
+  /**
+   * Creates, intializes and adds to the entity table the new
+   * entity.
+   * @param name the name of the entity
+   * @param type the type of the entity
+   * @param data the data section of the entity
+   * @return the created entity
+   */
+  protected Entity defEntity(String name, int type, String data)
+  {
+    Entity e = newEntity(name, type);
+    e.data = data.toCharArray();
+
+    return e;
+  }
+
+  private void assignField(Element e)
+  {
+    String element_name = e.name;
+    try
+      {
+        // Assign the field via reflection.
+        Field f = getClass().getField(element_name.toLowerCase());
+        if ((f.getModifiers() & Modifier.PUBLIC) != 0)
+          if ((f.getModifiers() & Modifier.STATIC) == 0)
+            if (f.getType().isAssignableFrom(e.getClass()))
+              f.set(this, e);
+      }
+    catch (IllegalAccessException ex)
+      {
+        unexpected(ex);
+      }
+    catch (NoSuchFieldException ex)
+      {
+        // This is ok.
+      }
+
+    // Some virtual machines may still lack the proper
+    // implementation of reflection. As the tag fields
+    // are not used anywhere in this implementation,
+    // (and this class is also rarely used by the end user),
+    // it may be better not to crash everything by throwing an error
+    // for each case when the HTML parsing is required.
+    catch (Throwable t)
+      {
+        // This VM has no reflection mechanism implemented!
+        if (t instanceof OutOfMemoryError)
+          throw (Error) t;
+      }
+  }
+
+  /**
+   * Create the bit set for this array of elements.
+   * The unknown elements are automatically defined and added
+   * to the element table.
+   * @param elements
+   * @return
+   */
+  private BitSet bitSet(String[] elements)
+  {
+    BitSet b = new BitSet();
+
+    for (int i = 0; i < elements.length; i++)
+      {
+        Element e = getElement(elements [ i ]);
+
+        if (e == null)
+          e = newElement(elements [ i ]);
+
+        b.set(e.index);
+      }
+
+    return b;
+  }
+
+  /**
+   * Find the element with the given name in the element table.
+   * If not find, create a new element with this name and add to the
+   * table.
+   * @param name the name of the element
+   * @return the found or created element.
+   */
+  private Element newElement(String name)
+  {
+    Element e = (Element) elementHash.get(name.toLowerCase());
+
+    if (e == null)
+      {
+        e = new Element();
+        e.name = name;
+        e.index = elements.size();
+        elements.add(e);
+        elementHash.put(e.name.toLowerCase(), e);
+        assignField(e);
+      }
+    return e;
+  }
+
+  /**
+   * Creates and adds to the element table the entity with an
+   * unitialized data section. Used internally.
+   * @param name the name of the entity
+   * @param type the type of the entity, a bitwise combination
+   * of GENERAL, PARAMETER, SYSTEM and PUBLIC.
+   * @throws an error if the parameter is both GENERAL and PARAMETER
+   * of both PUBLIC and SYSTEM.
+   * @return the created entity
+   */
+  private Entity newEntity(String name, int type)
+  {
+    Entity e = new Entity(name, type, null);
+    entityHash.put(e.name, e);
+    return e;
+  }
+
+  private void unexpected(Exception ex)
+  {
+    throw new Error("This should never happen, report a bug", ex);
+  }
+}
Index: libjava/javax/swing/text/html/parser/DTDConstants.java
===================================================================
RCS file: libjava/javax/swing/text/html/parser/DTDConstants.java
diff -N libjava/javax/swing/text/html/parser/DTDConstants.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/html/parser/DTDConstants.java	9 Jul 2005 22:10:19 -0000
@@ -0,0 +1,290 @@
+/* DTDConstants.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.text.html.parser;
+
+/**
+ * <p>This class defines the SGML basic types, used for describing HTML 4.01
+ * at {@link http://www.w3.org/TR/html4/types.html }. Not all constants,
+ * defined here, are actually used in HTML 4.01 SGML specification. Some others
+ * are defined just as part of the required implementation.
+ * </p>
+ * <p>
+ * If you need more information about SGML DTD documents,
+ * the author suggests to read SGML tutorial on
+ * {@link http://www.w3.org/TR/WD-html40-970708/intro/sgmltut.html}.
+ * We also recommend Goldfarb C.F (1991) <i>The SGML Handbook</i>,
+ * Oxford University Press, 688 p, ISBN: 0198537379.
+ * </p>
+ *
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public interface DTDConstants
+{
+  /* ----- The data types, used in HTML 4.01 SGML definition: ---- */
+
+  /**
+   * The CDATA (Character data) constant, specifes the content model,
+   * consisting of characters only. In SGML for HTML 4.01, the character
+   * entities must be replaced by characters, the line feeds must be
+   * ignored and any number of the subsequent carriage returns or tabs
+   * must be replaced by a single space.
+   */
+  int CDATA = 1;
+
+  /**
+   *  The EMPTY constant, means the element with no content.
+   */
+  int EMPTY = 17;
+
+  /**
+   * The ID constant, means that the token is the unique identifier.
+   * This identifier can be referenced by attribute with value of IDREF.
+   * The identifier must begin with letter, followed by any number of
+   * letters, digits, hyphens, underscores, colons and periods.
+   */
+  int ID = 4;
+
+  /**
+   *  The IDREF constant, specifies reference to a valid ID within
+   * the document.
+   */
+  int IDREF = 5;
+
+  /**
+   *  The IDREFS constant, a space separated list of IDREFs
+   */
+  int IDREFS = 6;
+
+  /**
+   * The NAME constant, means the token that
+   * must begin with letter, followed by any number of
+   * letters, digits, hyphens, underscores, colons and periods.
+   */
+  int NAME = 7;
+
+  /**
+   *  The NAMES constant, specifies a space separated of NAMEs.
+   */
+  int NAMES = 8;
+
+  /**
+   * The NMTOKEN constant, specifies the attribute, consisting of
+   * characters that can be either digits or alphabetic characters).
+   */
+  int NMTOKEN = 9;
+
+  /**
+   * The NMTOKENS constant, specifies a list of NMTOKENs.
+   */
+  int NMTOKENS = 10;
+
+  /**
+   *  The NOTATION constant, a previously defined data type.
+   */
+  int NOTATION = 11;
+
+  /**
+   * The NUMBER constant (means that the attribute consists of at least
+   * one decimal digit).
+   */
+  int NUMBER = 12;
+
+  /**
+   *  The NUMBERS constant, specifies a space separated list of NUMBERs.
+   */
+  int NUMBERS = 13;
+
+  /**
+   *  The NUTOKEN constant.
+   */
+  int NUTOKEN = 14;
+
+  /**
+   *  The NUTOKENS constant.
+   */
+  int NUTOKENS = 15;
+
+  /* -------
+     The entity scope constants.
+     As these four constants are combined with the bitwise OR,
+     they are defined in the hexadecimal notation.
+     The reason of setting the two bits at once (for PUBLIC and SYSTEM)
+     is probably historical.                                      ----- */
+
+  /**
+   * The PUBLIC constant, specifies the public entity. The PUBLIC entities
+   * are assumed to be known to many systems so that a full declaration
+   * need not be transmitted. For example,
+   * &lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0//EN"&gt;
+   */
+  int PUBLIC = 0xA;
+
+  /**
+   * The SYSTEM constant, specifies the system entitiy. The system entities
+   * are assumed to be known but require the clear identifer
+   * (like the file path), where they can be found in the system.
+   * For example, <code>
+   * &lt;DOCTYPE html SYSTEM "/path/to/file.dtd"&gt; </code>.
+   */
+  int SYSTEM = 0x11;
+
+  /**
+   * The PARAMETER constant, specifies that entity is only valid
+   * inside SGML DTD scope.
+   */
+  int PARAMETER = 0x40000;
+
+  /**
+   * The GENERAL constant, specifies theat the entity is valid in the
+   * whole HTML document scope.
+   */
+  int GENERAL = 0x10000;
+
+  /* ---- The constants, defining if the element attribute is required,
+     fixed or implied.  ---- */
+
+  /**
+   * The attribute modifier #REQUIRED constant, indicates that the
+   * value must be supplied.
+   */
+  int REQUIRED = 2;
+
+  /**
+   * The attribute modifier #FIXED constant, means that the attribute has
+   * the fixed value that cannot be changed.
+   */
+  int FIXED = 1;
+
+  /**
+   * The attribute modifier #IMPLIED constant,
+   * indicating that for this attribute the user agent must provide
+   * the value itself.
+   */
+  int IMPLIED = 5;
+
+  /**
+   * The attribute modifier #CURRENT constant, specifies the value
+   * that at any point in the document is the last value supplied for
+   * that element. A value is required to be supplied for the first
+   * occurrence of an element
+   */
+  int CURRENT = 3;
+
+  /**
+   * The attribute modifier #CONREF constant, specifies the IDREF value of
+   * the reference to content in another location of the document.
+   * The element with this attribute is empty, the content from
+   * that another location must be used instead.
+   */
+  int CONREF = 4;
+
+  /* ----- Constants, defining if the element
+     start and end tags are required. ---- */
+
+  /**
+   *  The STARTTAG, meaning that the element needs a starting tag.
+   */
+  int STARTTAG = 13;
+
+  /**
+   *  The ENDTAG constant, meaning that the element needs a closing tag.
+   */
+  int ENDTAG = 14;
+
+  /* ----- Other constants: ----- */
+
+  /**
+   * The ANY constant, specifies
+   * an attribute, consisting from arbitrary characters.
+   */
+  int ANY = 19;
+
+  /**
+   *  The DEFAULT constant, specifies the default value.
+   */
+  int DEFAULT = 131072;
+
+  /**
+   *  The ENTITIES constant (list of ENTITYes)
+   */
+  int ENTITIES = 3;
+
+  /**
+   *  The ENTITY constant, meaning the numeric or symbolic name of some
+   * HTML data.
+   */
+  int ENTITY = 2;
+
+  /**
+   *  The MD constant.
+   */
+  int MD = 16;
+
+  /**
+   *  The MODEL constant.
+   */
+  int MODEL = 18;
+
+  /**
+   * The MS constant.
+   */
+  int MS = 15;
+
+  /**
+   * The PI (Processing Instruction) constant, specifies a processing
+   * instruction. Processing instructions are used to embed information
+   * intended for specific applications.
+   */
+  int PI = 12;
+
+  /**
+   * The RCDATA constant (Entity References and Character Data), specifies
+   * the content model, consisting of characters AND entities. The
+   * "&lt;" is threated as an ordinary character, but
+   * "<code>&amp;name;</code>" still means the general entity with
+   *  the given name.
+   */
+  int RCDATA = 16;
+
+  /**
+   * The SDATA constant. Means that the value contains the entity name
+   * and the replacement value of a character entity reference.
+   */
+  int SDATA = 11;
+}
Index: libjava/javax/swing/text/html/parser/DocumentParser.java
===================================================================
RCS file: libjava/javax/swing/text/html/parser/DocumentParser.java
diff -N libjava/javax/swing/text/html/parser/DocumentParser.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/html/parser/DocumentParser.java	9 Jul 2005 22:10:19 -0000
@@ -0,0 +1,261 @@
+/* DocumentParser.java -- A parser for HTML documents.
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.text.html.parser;
+
+import gnu.javax.swing.text.html.parser.htmlAttributeSet;
+import javax.swing.text.html.parser.Parser;
+
+import java.io.IOException;
+import java.io.Reader;
+
+import javax.swing.text.BadLocationException;
+import javax.swing.text.html.HTMLEditorKit;
+
+/**
+ * <p>A simple error-tolerant HTML parser that uses a DTD document
+ * to access data on the possible tokens, arguments and syntax.</p>
+ * <p> The parser reads an HTML content from a Reader and calls various
+ * notifying methods (which should be overridden in a subclass)
+ * when tags or data are encountered.</p>
+ * <p>Some HTML elements need no opening or closing tags. The
+ * task of this parser is to invoke the tag handling methods also when
+ * the tags are not explicitly specified and must be supposed using
+ * information, stored in the DTD.
+ * For  example, parsing the document
+ * <p>&lt;table&gt;&lt;tr&gt;&lt;td&gt;a&lt;td&gt;b&lt;td&gt;c&lt;/tr&gt; <br>
+ * will invoke exactly the handling methods exactly in the same order
+ * (and with the same parameters) as if parsing the document: <br>
+ * <em>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt;&lt;
+ * tbody&gt;</em>&lt;tr&gt;&lt;td&gt;a<em>&lt;/td&gt;</em>&lt;td&gt;b<em>
+ * &lt;/td&gt;</em>&lt;td&gt;c<em>&lt;/td&gt;&lt;/tr&gt;</em>&lt;
+ * <em>/tbody&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</em></p>
+ * (supposed tags are given in italics). The parser also supports
+ * obsolete elements of HTML syntax.<p>
+ * </p>
+ * In this implementation, DocumentParser is directly derived from its
+ * ancestor without changes of functionality.
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class DocumentParser
+  extends Parser
+  implements DTDConstants
+{
+  /**
+   * The enclosed working parser class.
+   */
+  private class gnuParser
+    extends gnu.javax.swing.text.html.parser.support.Parser
+  {
+    private gnuParser(DTD d)
+    {
+      super(d);
+    }
+
+    protected final void handleComment(char[] comment)
+    {
+      parser.handleComment(comment);
+      callBack.handleComment(comment, hTag.where.startPosition);
+    }
+
+    protected final void handleEmptyTag(TagElement tag)
+      throws javax.swing.text.ChangedCharSetException
+    {
+      parser.handleEmptyTag(tag);
+      callBack.handleSimpleTag(tag.getHTMLTag(), getAttributes(),
+                               hTag.where.startPosition
+                              );
+    }
+
+    protected final void handleEndTag(TagElement tag)
+    {
+      parser.handleEndTag(tag);
+      callBack.handleEndTag(tag.getHTMLTag(), hTag.where.startPosition);
+    }
+
+    protected final void handleError(int line, String message)
+    {
+      parser.handleError(line, message);
+      callBack.handleError(message, hTag.where.startPosition);
+    }
+
+    protected final void handleStartTag(TagElement tag)
+    {
+      parser.handleStartTag(tag);
+      htmlAttributeSet attributes = gnu.getAttributes();
+
+      if (tag.fictional())
+        attributes.addAttribute(HTMLEditorKit.ParserCallback.IMPLIED,
+                                Boolean.TRUE
+                               );
+
+      callBack.handleStartTag(tag.getHTMLTag(), attributes,
+                              hTag.where.startPosition
+                             );
+    }
+
+    protected final void handleText(char[] text)
+    {
+      parser.handleText(text);
+      callBack.handleText(text, hTag.where.startPosition);
+    }
+
+    DTD getDTD()
+    {
+      return dtd;
+    }
+  }
+
+  /**
+   * This field is used to access the identically named
+   * methods of the outer class.
+   * This is package-private to avoid an accessor method.
+   */
+  DocumentParser parser = this;
+
+  /**
+   * The callback.
+   * This is package-private to avoid an accessor method.
+   */
+  HTMLEditorKit.ParserCallback callBack;
+
+  /**
+   * The reference to the working class of HTML parser that is
+   * actually used to parse the document.
+   * This is package-private to avoid an accessor method.
+   */
+  gnuParser gnu;
+
+  /**
+   * Creates a new parser that uses the given DTD to access data on the
+   * possible tokens, arguments and syntax. There is no single - step way
+   * to get a default DTD; you must either refer to the implementation -
+   * specific packages, write your own DTD or obtain the working instance
+   * of parser in other way, for example, by calling
+   * {@link javax.swing.text.html.HTMLEditorKit#getParser() }.
+   * @param a_dtd a DTD to use.
+   */
+  public DocumentParser(DTD a_dtd)
+  {
+    super(a_dtd);
+    gnu = new gnuParser(a_dtd);
+  }
+
+  /**
+   * Parses the HTML document, calling methods of the provided
+   * callback. This method must be multithread - safe.
+   * @param reader The reader to read the HTML document from
+   * @param callback The callback that is notifyed about the presence
+   * of HTML elements in the document.
+   * @param ignoreCharSet If thrue, any charset changes during parsing
+   * are ignored.
+   * @throws java.io.IOException
+   */
+  public void parse(Reader reader, HTMLEditorKit.ParserCallback a_callback,
+                    boolean ignoreCharSet
+                   )
+             throws IOException
+  {
+    callBack = a_callback;
+    gnu.parse(reader);
+
+    callBack.handleEndOfLineString(gnu.getEndOfLineSequence());
+    try
+      {
+        callBack.flush();
+      }
+    catch (BadLocationException ex)
+      {
+        // Convert this into the supported type of exception.
+        throw new IOException(ex.getMessage());
+      }
+  }
+
+  /**
+   * Handle HTML comment. The default method returns without action.
+   * @param comment the comment being handled
+   */
+  protected void handleComment(char[] comment)
+  {
+  }
+
+  /**
+   * Handle the tag with no content, like &lt;br&gt;. The method is
+   * called for the elements that, in accordance with the current DTD,
+   * has an empty content.
+   * @param tag the tag being handled.
+   * @throws javax.swing.text.ChangedCharSetException
+   */
+  protected void handleEmptyTag(TagElement tag)
+                         throws javax.swing.text.ChangedCharSetException
+  {
+  }
+
+  /**
+   * The method is called when the HTML closing tag ((like &lt;/table&gt;)
+   * is found or if the parser concludes that the one should be present
+   * in the current position.
+   * @param The tag being handled
+   */
+  protected void handleEndTag(TagElement tag)
+  {
+  }
+
+  /* Handle error that has occured in the given line. */
+  protected void handleError(int line, String message)
+  {
+  }
+
+  /**
+   * The method is called when the HTML opening tag ((like &lt;table&gt;)
+   * is found or if the parser concludes that the one should be present
+   * in the current position.
+   * @param The tag being handled
+   */
+  protected void handleStartTag(TagElement tag)
+  {
+  }
+
+  /**
+   * Handle the text section.
+   * @param text a section text.
+   */
+  protected void handleText(char[] text)
+  {
+  }
+}
Index: libjava/javax/swing/text/html/parser/Element.java
===================================================================
RCS file: libjava/javax/swing/text/html/parser/Element.java
diff -N libjava/javax/swing/text/html/parser/Element.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/html/parser/Element.java	9 Jul 2005 22:10:19 -0000
@@ -0,0 +1,317 @@
+/* Element.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.text.html.parser;
+
+import gnu.javax.swing.text.html.parser.support.gnuStringIntMapper;
+
+import java.io.Serializable;
+
+import java.util.BitSet;
+
+/**
+ * <p>
+ * Stores the element information, obtained by parsing SGML DTD
+ * tag <code>&lt;!ELEMENT .. &gt;</code>. This class has no public
+ * constructor and can only be instantiated using the
+ * {@link javax.swing.text.html.parser.DTD } methods</p>
+ *
+ * <p>SGML defines elements that represent structures or
+ * behavior. An element typically consists of a start tag, content, and an
+ * end tag. Hence the elements are not tags. The HTML 4.0 definition specifies
+ * that some elements are not required to have the end tags. Also, some
+ * HTML elements (like <code>&lt;hr&gt;</code>) have no content. Element names
+ * are case sensitive.</p>
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public final class Element
+  implements DTDConstants, Serializable
+{
+  /**
+   * Package level mapper between type names and they string values.
+   */
+  static final gnuStringIntMapper mapper =
+    new gnuStringIntMapper()
+    {
+      protected void create()
+      {
+        add("CDATA", DTDConstants.CDATA);
+        add("RCDATA", DTDConstants.RCDATA);
+        add("EMPTY", DTDConstants.EMPTY);
+        add("ANY", DTDConstants.ANY);
+      }
+    };
+
+  /** Use serialVersionUID for interoperability. */
+  private static final long serialVersionUID = -6717939384601675586L;
+
+  /**
+   * The element attributes.
+   */
+  public AttributeList atts;
+
+  /**
+   * Contains refernces to elements that must NOT occur inside this element,
+   * at any level of hierarchy.
+   */
+  public BitSet exclusions;
+
+  /**
+   * Contains refernces to elements that must CAN occur inside this element,
+   * at any level of hierarchy.
+   */
+  public BitSet inclusions;
+
+  /**
+   * The content model, defining elements, entities and DTD text
+   * that may/may not occur inside this element.
+   */
+  public ContentModel content;
+
+  /**
+   * A field to store additional user data for this Element.
+   */
+  public Object data;
+
+  /**
+   * The element name.
+   */
+  public String name;
+
+  /**
+   * True is this element need not to have the closing tag, false
+   * otherwise. The HTML 4.0 definition specifies
+   * that some elements (like <code>&lt;hr&gt;</code>are
+   * not required to have the end tags.
+   */
+  public boolean oEnd;
+
+  /**
+   * True is this element need not to have the starting tag, false
+   * otherwise. The HTML 4.0 definition specifies
+   * that some elements (like <code>&lt;head&gt;</code> or
+   * <code>&lt;body&gt;</code>) are
+   * not required to have the start tags.
+
+   */
+  public boolean oStart;
+
+  /**
+   * This field contains the unique integer identifier of this Element,
+   * used to refer the element (more exactly, the element flag)
+   * in <code>inclusions</code> and <code>exclusions</code> bit set.
+   */
+  public int index;
+
+  /**
+   * The element type, containing value, defined in DTDConstants.
+   * In this implementation, the element type can be
+   * CDATA, RCDATA, EMPTY or ANY.
+   */
+  public int type;
+
+  /**
+   * The default constructor must have package level access in this
+   * class. Use DTD.defineElement(..) to create an element when required.
+   * @todo MAKE THIS PACKAGE in the final version. Now the Parser needs it!
+   */
+  Element()
+  {
+  }
+
+  /**
+   * Converts the string representation of the element type
+   * into its unique integer identifier, defined in DTDConstants.
+   * @param a_type A name of the type
+   * @return DTDConstants.CDATA, DTDConstants.RCDATA, DTDConstants.EMPTY,
+   * DTDConstants.ANY or null if the type name is not
+   * "CDATA", "RCDATA", "EMPTY" or "ANY". This function is case sensitive.
+   * @throws NullPointerException if <code>a_type</code> is null.
+   */
+  public static int name2type(String a_type)
+  {
+    return mapper.get(a_type);
+  }
+
+  /**
+   * Get the element attribute by name.
+   * @param attribute the attribute name, case insensitive.
+   * @return the correspoding attribute of this element. The class,
+   * for storing as attribute list, as a single attribute, is used to
+   * store a single attribute in this case.
+   * @throws NullPointerException if the attribute name is null.
+   */
+  public AttributeList getAttribute(String attribute)
+  {
+    AttributeList a = atts;
+
+    while (a != null && !attribute.equalsIgnoreCase(a.name))
+      a = a.next;
+
+    return a;
+  }
+
+  /**
+   * Get the element attribute by its value.
+   * @param a_value the attribute value, case insensitive.
+   * @return the correspoding attribute of this element. The class,
+   * for storing as attribute list, as a single attribute, is used to
+   * store a single attribute in this case. If there are several
+   * attributes with the same value, there is no garranty, which one
+   * is returned.
+   */
+  public AttributeList getAttributeByValue(String a_value)
+  {
+    AttributeList a = atts;
+
+    if (a_value == null)
+      {
+        while (a != null)
+          {
+            if (a.value == null)
+              return a;
+
+            a = a.next;
+          }
+      }
+    else
+      {
+        while (a != null)
+          {
+            if (a.value != null && a_value.equalsIgnoreCase(a.value))
+              return a;
+
+            a = a.next;
+          }
+      }
+
+    return null;
+  }
+
+  /**
+   * Get all attributes of this document as an attribute list.
+   * @return
+   */
+  public AttributeList getAttributes()
+  {
+    return atts;
+  }
+
+  /**
+   * Get the content model, defining elements, entities and DTD text
+   * that may/may not occur inside this element.
+   */
+  public ContentModel getContent()
+  {
+    return content;
+  }
+
+  /**
+   * Returns true for the element with no content.
+   * Empty elements are defined with the SGML DTD keyword "EMPTY".
+   * @return true if content model field (content) method is equal to
+   * null or its method empty() returns true.
+   */
+  public boolean isEmpty()
+  {
+    return content == null || content.empty();
+  }
+
+  /**
+   * Get the unique integer identifier of this Element,
+   * used to refer the element (more exactly, the element flag)
+   * in <code>inclusions</code> and <code>exclusions</code> bit set.
+   * WARNING: This value may not be the same between different
+   * implementations.
+   */
+  public int getIndex()
+  {
+    return index;
+  }
+
+  /**
+   * Get the element name.
+   */
+  public String getName()
+  {
+    return name;
+  }
+
+  /**
+   * Get the element type.
+   * @return one of the values, defined DTDConstants.
+   * In this implementation, the element type can be
+   * CDATA, RCDATA, EMPTY or ANY.
+   */
+  public int getType()
+  {
+    return type;
+  }
+
+  /**
+   * True is this element need not to have the starting tag, false
+   * otherwise.s element need not to have the closing tag, false
+   * otherwise. The HTML 4.0 definition specifies
+   * that some elements (like <code>&lt;hr&gt;</code>are
+   * not required to have the end tags.
+   */
+  public boolean omitEnd()
+  {
+    return oEnd;
+  }
+
+  /**
+   * True is this element need not to have the closing tag, false
+   * otherwise. The HTML 4.0 definition specifies
+   * that some elements (like <code>&lt;head&gt;</code> or
+   * <code>&lt;body&gt;</code>) are
+   * not required to have the start tags.
+   */
+  public boolean omitStart()
+  {
+    return oStart;
+  }
+
+  /**
+   * Returns the name of this element.
+   */
+  public String toString()
+  {
+    return name;
+  }
+}
Index: libjava/javax/swing/text/html/parser/Entity.java
===================================================================
RCS file: libjava/javax/swing/text/html/parser/Entity.java
diff -N libjava/javax/swing/text/html/parser/Entity.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/html/parser/Entity.java	9 Jul 2005 22:10:19 -0000
@@ -0,0 +1,185 @@
+/* Entity.java -- Stores information, obtained by parsing SGML DTL
+ * &lt;!ENTITY % .. &gt; tag
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.text.html.parser;
+
+import gnu.javax.swing.text.html.parser.support.gnuStringIntMapper;
+
+import java.io.Serializable;
+
+/**
+ * <p>Stores information, obtained by parsing SGML DTL
+ * &lt;!ENTITY % .. &gt; tag.</p>
+ * <p>
+ * The entity defines some kind of macro that can be used elsewhere in
+ * the document.
+ * When the macro is referred to by the name in the DTD, it is expanded into
+ * a string
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public final class Entity
+  implements DTDConstants, Serializable
+{
+  /**
+   * Package level mapper between type names and they string values.
+   */
+  final static gnuStringIntMapper mapper =
+    new gnuStringIntMapper()
+    {
+      protected void create()
+      {
+        add("ANY", DTDConstants.ANY);
+        add("CDATA", DTDConstants.CDATA);
+        add("PUBLIC", DTDConstants.PUBLIC);
+        add("SDATA", DTDConstants.SDATA);
+        add("PI", DTDConstants.PI);
+        add("STARTTAG", DTDConstants.STARTTAG);
+        add("ENDTAG", DTDConstants.ENDTAG);
+        add("MS", DTDConstants.MS);
+        add("MD", DTDConstants.MD);
+        add("SYSTEM", DTDConstants.SYSTEM);
+      }
+    };
+
+  /**
+   * The entity name.
+   */
+  public String name;
+
+  /**
+   * The entity data
+   */
+  public char[] data;
+
+  /**
+   *  The entity type.
+   */
+  public int type;
+
+  /**
+   * String representation of the entity data.
+   */
+  private String sdata;
+
+  /**
+   * Create a new entity
+   * @param a_name the entity name
+   * @param a_type the entity type
+   * @param a_data the data replacing the entity reference
+   */
+  public Entity(String a_name, int a_type, char[] a_data)
+  {
+    name = a_name;
+    type = a_type;
+    data = a_data;
+  }
+
+  /**
+   * Converts a given string to the corresponding entity type.
+   * @return a value, defined in DTDConstants (one of
+   * PUBLIC, CDATA, SDATA, PI, STARTTAG, ENDTAG, MS, MD, SYSTEM)
+   * or CDATA if the parameter is not a valid entity type.
+   */
+  public static int name2type(String an_entity)
+  {
+    int r = mapper.get(an_entity);
+    return (r == 0) ? DTDConstants.CDATA : r;
+  }
+
+  /**
+   * Get the entity data.
+   */
+  public char[] getData()
+  {
+    return data;
+  }
+
+  /**
+   * Returns true for general entities. Each general entity can be
+   * referenced as <code>&entity-name;</code>. Such entities are
+   * defined by the SGML DTD tag
+   * <code>&lt;!ENTITY <i>name</i>    "<i>value</i>"></code>. The general
+   * entities can be used anywhere in the document.
+   */
+  public boolean isGeneral()
+  {
+    return (type & DTDConstants.GENERAL) != 0;
+  }
+
+  /**
+   * Get the entity name.
+   */
+  public String getName()
+  {
+    return name;
+  }
+
+  /**
+   * Returns true for parameter entities. Each parameter entity can be
+   * referenced as <code>&entity-name;</code>. Such entities are
+   * defined by the SGML DTD tag
+   * <code>&lt;!ENTITY % <i>name</i>    "<i>value</i>"></code>. The parameter
+   * entities can be used only in SGML context.
+   */
+  public boolean isParameter()
+  {
+    return (type & DTDConstants.PARAMETER) != 0;
+  }
+
+  /**
+   * Returns a data as String
+   */
+  public String getString()
+  {
+    if (sdata == null)
+      sdata = new String(data);
+
+    return sdata;
+  }
+  
+  /**
+   * Get the entity type.
+   * @return the value of the {@link #type}.
+   */
+  public int getType() 
+  {
+    return type;
+  }  
+          
+}
Index: libjava/javax/swing/text/html/parser/Parser.java
===================================================================
RCS file: libjava/javax/swing/text/html/parser/Parser.java
diff -N libjava/javax/swing/text/html/parser/Parser.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/html/parser/Parser.java	9 Jul 2005 22:10:19 -0000
@@ -0,0 +1,436 @@
+/* Parser.java -- HTML parser
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.text.html.parser;
+
+import java.io.IOException;
+import java.io.Reader;
+
+import javax.swing.text.ChangedCharSetException;
+import javax.swing.text.SimpleAttributeSet;
+
+/*
+ * FOR DEVELOPERS: To avoid regression, please run the package test
+ * textsuite/javax.swing.text.html.parser/AllParserTests after your
+ * modifications.
+ */
+
+/**
+ * <p>A simple error-tolerant HTML parser that uses a DTD document
+ * to access data on the possible tokens, arguments and syntax.</p>
+ * <p> The parser reads an HTML content from a Reader and calls various
+ * notifying methods (which should be overridden in a subclass)
+ * when tags or data are encountered.</p>
+ * <p>Some HTML elements need no opening or closing tags. The
+ * task of this parser is to invoke the tag handling methods also when
+ * the tags are not explicitly specified and must be supposed using
+ * information, stored in the DTD.
+ * For  example, parsing the document
+ * <p>&lt;table&gt;&lt;tr&gt;&lt;td&gt;a&lt;td&gt;b&lt;td&gt;c&lt;/tr&gt; <br>
+ * will invoke exactly the handling methods exactly in the same order
+ * (and with the same parameters) as if parsing the document: <br>
+ * <em>&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt;&lt;
+ * tbody&gt;</em>&lt;tr&gt;&lt;td&gt;a<em>&lt;/td&gt;</em>&lt;td&gt;b<em>
+ * &lt;/td&gt;</em>&lt;td&gt;c<em>&lt;/td&gt;&lt;/tr&gt;</em>&lt;
+ * <em>/tbody&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;</em></p>
+ * (supposed tags are given in italics). The parser also supports
+ * obsolete elements of HTML syntax.<p>
+ * </p>
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class Parser 
+  implements DTDConstants
+{
+  /**
+   * The document template description that will be used to parse the documents.
+   */
+  protected DTD dtd;
+
+  /**
+   * The value of this field determines whether or not the Parser will be
+   * strict in enforcing SGML compatibility. The default value is false,
+   * stating that the parser should do everything to parse and get at least
+   * some information even from the incorrectly written HTML input.
+   */
+  protected boolean strict;
+
+  /**
+   * The package level reference to the working HTML parser in this
+   * implementation.
+   */
+  final gnu.javax.swing.text.html.parser.support.Parser gnu;
+
+  /**
+   * Creates a new parser that uses the given DTD to access data on the
+   * possible tokens, arguments and syntax. There is no single - step way
+   * to get a default DTD; you must either refer to the implementation -
+   * specific packages, write your own DTD or obtain the working instance
+   * of parser in other way, for example, by calling
+   * {@link javax.swing.text.html.HTMLEditorKit#getParser() }.
+   * @param a_dtd A DTD to use.
+   */
+  public Parser(DTD a_dtd)
+  {
+    dtd = a_dtd;
+
+    final Parser j = this;
+
+    gnu =
+      new gnu.javax.swing.text.html.parser.support.Parser(dtd)
+        {
+          protected final void handleComment(char[] comment)
+          {
+            j.handleComment(comment);
+          }
+
+          protected final void handleEOFInComment()
+          {
+            j.handleEOFInComment();
+          }
+
+          protected final void handleEmptyTag(TagElement tag)
+            throws javax.swing.text.ChangedCharSetException
+          {
+            j.handleEmptyTag(tag);
+          }
+
+          protected final void handleStartTag(TagElement tag)
+          {
+            j.handleStartTag(tag);
+          }
+
+          protected final void handleEndTag(TagElement tag)
+          {
+            j.handleEndTag(tag);
+          }
+
+          protected final void handleError(int line, String message)
+          {
+            j.handleError(line, message);
+          }
+
+          protected final void handleText(char[] text)
+          {
+            j.handleText(text);
+          }
+
+          protected final void handleTitle(char[] title)
+          {
+            j.handleTitle(title);
+          }
+
+          protected final void markFirstTime(Element element)
+          {
+            j.markFirstTime(element);
+          }
+
+          protected final void startTag(TagElement tag)
+            throws ChangedCharSetException
+          {
+            j.startTag(tag);
+          }
+
+          protected final void endTag(boolean omitted)
+          {
+            j.endTag(omitted);
+          }
+
+          protected TagElement makeTag(Element element)
+          {
+            return j.makeTag(element);
+          }
+
+          protected TagElement makeTag(Element element, boolean isSupposed)
+          {
+            return j.makeTag(element, isSupposed);
+          }
+        };
+  }
+
+  /**
+   * Parse the HTML text, calling various methods in response to the
+   * occurence of the corresponding HTML constructions.
+   * @param reader The reader to read the source HTML from.
+   * @throws IOException If the reader throws one.
+   */
+  public synchronized void parse(Reader reader)
+    throws IOException
+  {
+    gnu.parse(reader);
+  }
+
+  /**
+   * Parses DTD markup declaration. Currently returns without action.
+   * @return null.
+   * @throws java.io.IOException
+   */
+  public String parseDTDMarkup()
+    throws IOException
+  {
+    return gnu.parseDTDMarkup();
+  }
+
+  /**
+   * Parse DTD document declarations. Currently only parses the document
+   * type declaration markup.
+   * @param strBuff
+   * @return true if this is a valid DTD markup declaration.
+   * @throws IOException
+   */
+  protected boolean parseMarkupDeclarations(StringBuffer strBuff)
+    throws IOException
+  {
+    return gnu.parseMarkupDeclarations(strBuff);
+  }
+
+  /**
+   * Get the attributes of the current tag.
+   * @return The attribute set, representing the attributes of the current tag.
+   */
+  protected SimpleAttributeSet getAttributes()
+  {
+    return gnu.getAttributes();
+  }
+
+  /**
+   * Get the number of the document line being parsed.
+   * @return The current line.
+   */
+  protected int getCurrentLine()
+  {
+    return gnu.hTag.where.beginLine;
+  }
+
+  /**
+   * Get the current position in the document being parsed.
+   * @return The current position.
+   */
+  protected int getCurrentPos()
+  {
+    return gnu.hTag.where.startPosition;
+  }
+
+  /**
+   * The method is called when the HTML end (closing) tag is found or if
+   * the parser concludes that the one should be present in the
+   * current position. The method is called immediatly
+   * before calling the handleEndTag().
+   * @param omitted True if the tag is no actually present in the document,
+   * but is supposed by the parser (like &lt;/html&gt; at the end of the
+   * document).
+   */
+  protected void endTag(boolean omitted)
+  {
+  }
+
+  /**
+   * Invokes the error handler. The default method in this implementation
+   * finally delegates the call to handleError, also providing the number of the
+   * current line.
+   */
+  protected void error(String msg)
+  {
+    gnu.error(msg);
+  }
+
+  /**
+   * Invokes the error handler. The default method in this implementation
+   * finally delegates the call to error (msg+": '"+invalid+"'").
+   */
+  protected void error(String msg, String invalid)
+  {
+    gnu.error(msg, invalid);
+  }
+
+  /**
+   * Invokes the error handler. The default method in this implementation
+   * finally delegates the call to error (parm1+" "+ parm2+" "+ parm3).
+   */
+  protected void error(String parm1, String parm2, String parm3)
+  {
+    gnu.error(parm1, parm2, parm3);
+  }
+
+  /**
+   * Invokes the error handler. The default method in this implementation
+   * finally delegates the call to error
+   * (parm1+" "+ parm2+" "+ parm3+" "+ parm4).
+   */
+  protected void error(String parm1, String parm2, String parm3, String parm4)
+  {
+    gnu.error(parm1, parm2, parm3, parm4);
+  }
+
+  /**
+   * In this implementation, this is never called and returns without action.
+   */
+  protected void flushAttributes()
+  {
+    gnu.flushAttributes();
+  }
+
+  /**
+   * Handle HTML comment. The default method returns without action.
+   * @param comment The comment being handled
+   */
+  protected void handleComment(char[] comment)
+  {
+  }
+
+  /**
+   * This is additionally called in when the HTML content terminates
+   * without closing the HTML comment. This can only happen if the
+   * HTML document contains errors (for example, the closing --;gt is
+   * missing. The default method calls the error handler.
+   */
+  protected void handleEOFInComment()
+  {
+    gnu.error("Unclosed comment");
+  }
+
+  /**
+   * Handle the tag with no content, like &lt;br&gt;. The method is
+   * called for the elements that, in accordance with the current DTD,
+   * has an empty content.
+   * @param The tag being handled.
+   * @throws javax.swing.text.ChangedCharSetException
+   */
+  protected void handleEmptyTag(TagElement tag)
+    throws ChangedCharSetException
+  {
+  }
+
+  /**
+   * The method is called when the HTML closing tag ((like &lt;/table&gt;)
+   * is found or if the parser concludes that the one should be present
+   * in the current position.
+   * @param The tag being handled
+   */
+  protected void handleEndTag(TagElement tag)
+  {
+  }
+
+  /* Handle error that has occured in the given line. */
+  protected void handleError(int line, String message)
+  {
+  }
+
+  /**
+   * The method is called when the HTML opening tag ((like &lt;table&gt;)
+   * is found or if the parser concludes that the one should be present
+   * in the current position.
+   * @param The tag being handled
+   */
+  protected void handleStartTag(TagElement tag)
+  {
+  }
+
+  /**
+   * Handle the text section.
+   * <p> For non-preformatted section, the parser replaces
+   * \t, \r and \n by spaces and then multiple spaces
+   * by a single space. Additionaly, all whitespace around
+   * tags is discarded.
+   * </p>
+   * <p> For pre-formatted text (inside TEXAREA and PRE), the parser preserves
+   * all tabs and spaces, but removes <b>one</b>  bounding \r, \n or \r\n,
+   * if it is present. Additionally, it replaces each occurence of \r or \r\n
+   * by a single \n.</p>
+   *
+   * @param text A section text.
+   */
+  protected void handleText(char[] text)
+  {
+  }
+
+  /**
+   * Handle HTML &lt;title&gt; tag. This method is invoked when
+   * both title starting and closing tags are already behind.
+   * The passed argument contains the concatenation of all
+   * title text sections.
+   * @param The title text.
+   */
+  protected void handleTitle(char[] title)
+  {
+  }
+
+  /**
+   * Constructs the tag from the given element. In this implementation,
+   * this is defined, but never called.
+   * @param element the base element of the tag.
+   * @return the tag
+   */
+  protected TagElement makeTag(Element element)
+  {
+    return makeTag(element, false);
+  }
+
+  /**
+   * Constructs the tag from the given element.
+   * @param the tag base {@link javax.swing.text.html.parser.Element}
+   * @param isSupposed true if the tag is not actually present in the
+   * html input, but the parser supposes that it should to occur in
+   * the current location.
+   * @return the tag
+   */
+  protected TagElement makeTag(Element element, boolean isSupposed)
+  {
+    return new TagElement(element, isSupposed);
+  }
+
+  /**
+   * This is called when the tag, representing the given element,
+   * occurs first time in the document.
+   * @param element
+   */
+  protected void markFirstTime(Element element)
+  {
+  }
+
+  /**
+   * The method is called when the HTML opening tag ((like &lt;table&gt;)
+   * is found or if the parser concludes that the one should be present
+   * in the current position. The method is called immediately before
+   * calling the handleStartTag.
+   * @param The tag
+   */
+  protected void startTag(TagElement tag)
+    throws ChangedCharSetException
+  {
+  }
+}
Index: libjava/javax/swing/text/html/parser/ParserDelegator.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/text/html/parser/ParserDelegator.java,v
retrieving revision 1.1
diff -u -r1.1 ParserDelegator.java
--- libjava/javax/swing/text/html/parser/ParserDelegator.java	9 Aug 2002 08:34:17 -0000	1.1
+++ libjava/javax/swing/text/html/parser/ParserDelegator.java	9 Jul 2005 22:10:19 -0000
@@ -1,5 +1,5 @@
-/* ParserDelegator - Delegator for ParserDocument.
-   Copyright (C) 2002 Free Software Foundation, Inc.
+/* ParserDelegator.java -- Delegator for ParserDocument.
+    Copyright (C) 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -37,10 +37,172 @@
 
 package javax.swing.text.html.parser;
 
+import gnu.javax.swing.text.html.parser.HTML_401F;
+import gnu.javax.swing.text.html.parser.htmlAttributeSet;
+
+import java.io.IOException;
+import java.io.Reader;
+import java.io.Serializable;
+
+import javax.swing.text.BadLocationException;
+import javax.swing.text.html.HTMLEditorKit;
+import javax.swing.text.html.HTMLEditorKit.ParserCallback;
+
 /**
- * Stub implementeation to get gjdoc working.
+ * This class instantiates and starts the working instance of
+ * html parser, being responsible for providing the default DTD.
+ *
+ * TODO Later this class must be derived from the totally abstract class
+ * HTMLEditorKit.Parser. HTMLEditorKit that does not yet exist.
+ *
+ * @author Audrius Meskauskas (AudriusA@Bioinformatics.org)
  */
-//public class ParserDelegator extends HTMLEditorKit.Parser
 public class ParserDelegator
+  extends javax.swing.text.html.HTMLEditorKit.Parser
+  implements Serializable
 {
+  private class gnuParser
+    extends gnu.javax.swing.text.html.parser.support.Parser
+  {
+    private static final long serialVersionUID = 1;
+
+    private gnuParser(DTD d)
+    {
+      super(d);
+    }
+
+    protected final void handleComment(char[] comment)
+    {
+      callBack.handleComment(comment, hTag.where.startPosition);
+    }
+
+    protected final void handleEmptyTag(TagElement tag)
+      throws javax.swing.text.ChangedCharSetException
+    {
+      callBack.handleSimpleTag(tag.getHTMLTag(), getAttributes(),
+                               hTag.where.startPosition
+                              );
+    }
+
+    protected final void handleEndTag(TagElement tag)
+    {
+      callBack.handleEndTag(tag.getHTMLTag(), hTag.where.startPosition);
+    }
+
+    protected final void handleError(int line, String message)
+    {
+      callBack.handleError(message, hTag.where.startPosition);
+    }
+
+    protected final void handleStartTag(TagElement tag)
+    {
+      htmlAttributeSet attributes = gnu.getAttributes();
+
+      if (tag.fictional())
+        attributes.addAttribute(ParserCallback.IMPLIED, Boolean.TRUE);
+
+      callBack.handleStartTag(tag.getHTMLTag(), attributes,
+                              hTag.where.startPosition
+                             );
+    }
+
+    protected final void handleText(char[] text)
+    {
+      callBack.handleText(text, hTag.where.startPosition);
+    }
+
+    DTD getDTD()
+    {
+      return dtd;
+    }
+  }
+
+  /**
+   * Use serialVersionUID for interoperability.
+   */
+  private static final long serialVersionUID = -1276686502624777206L;
+
+  private static DTD dtd = HTML_401F.getInstance();
+
+  /**
+   * The callback.
+   * This is package-private to avoid an accessor method.
+   */
+  HTMLEditorKit.ParserCallback callBack;
+
+  /**
+   * The reference to the working class of HTML parser that is
+   * actually used to parse the document.
+   * This is package-private to avoid an accessor method.
+   */
+  gnuParser gnu;
+
+  /**
+   * Parses the HTML document, calling methods of the provided
+   * callback. This method must be multithread - safe.
+   * @param reader The reader to read the HTML document from
+   * @param callback The callback that is notifyed about the presence
+   * of HTML elements in the document.
+   * @param ignoreCharSet If thrue, any charset changes during parsing
+   * are ignored.
+   * @throws java.io.IOException
+   */
+  public void parse(Reader reader, HTMLEditorKit.ParserCallback a_callback,
+                    boolean ignoreCharSet
+                   )
+             throws IOException
+  {
+    callBack = a_callback;
+
+    if (gnu == null || !dtd.equals(gnu.getDTD()))
+      {
+        gnu = new gnuParser(dtd);
+      }
+
+    gnu.parse(reader);
+
+    callBack.handleEndOfLineString(gnu.getEndOfLineSequence());
+    try
+      {
+        callBack.flush();
+      }
+    catch (BadLocationException ex)
+      {
+        // Convert this into the supported type of exception.
+        throw new IOException(ex.getMessage());
+      }
+  }
+
+  /**
+   * Calling this method instructs that, if not specified directly,
+   * the documents will be parsed using the default
+   * DTD of the implementation.
+   */
+  protected static void setDefaultDTD()
+  {
+    dtd = HTML_401F.getInstance();
+  }
+
+  /**
+   * Registers the user - written DTD under the given name, also
+   * making it default for the subsequent parsings. This has effect on
+   * all subsequent calls to the parse(...) . If you need to specify
+   * your DTD locally, simply {@link javax.swing.text.html.parser.Parser}
+   * instead.
+   * @param dtd The DTD that will be used to parse documents by this class.
+   * @param name The name of this DTD.
+   * @return No standard is specified on which instance of DTD must be
+   * returned by this method, and it is recommended to leave the returned
+   * value without consideration. This implementation returns the DTD
+   * that was previously set as the default DTD, or the implementations
+   * default DTD if none was set.
+   */
+  protected static DTD createDTD(DTD a_dtd, String name)
+  {
+    DTD.putDTDHash(name, a_dtd);
+
+    DTD dtd_prev = dtd;
+    dtd = a_dtd;
+    return dtd_prev;
+  }
 }
Index: libjava/javax/swing/text/html/parser/TagElement.java
===================================================================
RCS file: libjava/javax/swing/text/html/parser/TagElement.java
diff -N libjava/javax/swing/text/html/parser/TagElement.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/html/parser/TagElement.java	9 Jul 2005 22:10:19 -0000
@@ -0,0 +1,142 @@
+/* TagElement.java --
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.text.html.parser;
+
+import javax.swing.text.html.HTML;
+
+/**
+ * The SGML element, defining a single html tag.
+ * @author Audrius Meskauskas, Lithuania (AudriusA@Bioinformatics.org)
+ */
+public class TagElement
+{
+  /**
+   * The Element the tag was constructed from.
+   */
+  private final Element element;
+
+  /**
+   * The coresponding HTML tag, assigned once in constructor.
+   */
+  private final HTML.Tag tag;
+
+  /**
+   * The 'fictional' flag.
+   */
+  private final boolean fictional;
+
+  /**
+   * Creates the html tag element from the defintion, stored in the
+   * given element. Sets the flag 'fictional' to false.
+   * @param an_element
+   */
+  public TagElement(Element an_element)
+  {
+    this(an_element, false);
+  }
+
+  /**
+   * Creates the html tag element from the defintion, stored in the
+   * given element, setting the flag 'fictional' to the given value.
+   */
+  public TagElement(Element an_element, boolean is_fictional)
+  {
+    element = an_element;
+    fictional = is_fictional;
+
+    HTML.Tag t = HTML.getTag(element.getName());
+
+    if (t != null)
+      tag = t;
+    else
+      tag = new HTML.UnknownTag(element.getName());
+  }
+
+  /**
+   * Get the element from that the tag was constructed.
+   */
+  public Element getElement()
+  {
+    return element;
+  }
+
+  /**
+   * Get the corresponding HTML tag. This is either one of the
+   * pre-defined HTML tags or the instance of the UnknownTag with the
+   * element name.
+   */
+  public HTML.Tag getHTMLTag()
+  {
+    return tag;
+  }
+
+  /**
+   * Calls isPreformatted() for the corresponding html tag and returns
+   * the obtained value.
+   */
+  public boolean isPreformatted()
+  {
+    return tag.isPreformatted();
+  }
+
+  /**
+   * Calls breaksFlow() for the corresponding html tag and returns
+   * the obtained value.
+   */
+  public boolean breaksFlow()
+  {
+    return tag.breaksFlow();
+  }
+
+  /**
+   * Get the value of the flag 'fictional'.
+   */
+  public boolean fictional()
+  {
+    return fictional;
+  }
+
+  /**
+   * Returns string representation of this object.
+   */
+  public String toString()
+  {
+    return getElement() + (fictional ? "?" : "");
+  }
+}
Index: libjava/javax/swing/text/rtf/ControlWordToken.java
===================================================================
RCS file: libjava/javax/swing/text/rtf/ControlWordToken.java
diff -N libjava/javax/swing/text/rtf/ControlWordToken.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/rtf/ControlWordToken.java	9 Jul 2005 22:10:19 -0000
@@ -0,0 +1,86 @@
+/* ControlWordToken.java --
+   Copyright (C) 2005  Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.text.rtf;
+
+/**
+ * A special {@link Token} that represents a control word in RTF like
+ * '\deff0' where 'deff' is the name of the control word and '0' is an
+ * optional parameter.
+ *
+ * @author Roman Kennke (roman@ontographics.com)
+ */
+class ControlWordToken extends Token
+{
+
+  /**
+   * The name of the control word.
+   */
+  public String name;
+
+  /**
+   * The optional parameter of the control word. Absence of a parameter is
+   * expressed through Integer.MIN_VALUE.
+   */
+  public int param;
+
+  /**
+   * Constructs a new ControlWordToken with the specified name and without
+   * a parameter.
+   *
+   * @param name the name of the control word
+   */
+  public ControlWordToken(String name)
+  {
+    this(name, Integer.MIN_VALUE);
+  }
+
+
+  /**
+   * Constructs a new ControlWordToken with the specified name and parameter.
+   *
+   * @param name the name of the control word
+   */
+  public ControlWordToken(String name, int param)
+  {
+    super(Token.CONTROL_WORD);
+    this.name = name;
+    this.param = param;
+  }
+
+}
Index: libjava/javax/swing/text/rtf/RTFEditorKit.java
===================================================================
RCS file: libjava/javax/swing/text/rtf/RTFEditorKit.java
diff -N libjava/javax/swing/text/rtf/RTFEditorKit.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/rtf/RTFEditorKit.java	9 Jul 2005 22:10:19 -0000
@@ -0,0 +1,114 @@
+/* RTFEditorKit.java --
+   Copyright (C) 2005  Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.text.rtf;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.Reader;
+
+import javax.swing.text.BadLocationException;
+import javax.swing.text.Document;
+import javax.swing.text.StyledEditorKit;
+
+/**
+ * Provides support for RTF data for use in
+ * {@link javax.swing.JEditorPane}s.
+ *
+ * @author Roman Kennke (roman@ontographics.com)
+ */
+public class RTFEditorKit
+  extends StyledEditorKit
+{
+
+  /**
+   * Constructs a new RTFEditorKit.
+   */
+  public RTFEditorKit()
+  {
+    super();
+  }
+
+  /**
+   * Returns the MIME content type. In the case of RTFEditorKit this is
+   * &apos;text/rtf&apos;
+   *
+   * @return the MIME content type for RTFEditorKit
+   */
+  public String getContentType()
+  {
+    return "text/rtf";
+  }
+
+  /**
+   * Reads RTF data from <code>stream</code> into <code>doc</code> at the
+   * specified position <code>pos</code>.
+   *
+   * @param stream the {@link InputStream} from where we read RTF data
+   * @param doc the {@link Document} into which we read the RTF data
+   * @param pos the position where to start
+   *
+   * @throws IOException if an IO error occurs
+   * @throws BadLocationException if the position is not valid
+   */
+  public void read(InputStream stream, Document doc, int pos)
+    throws IOException, BadLocationException
+  {
+    RTFParser parser = new RTFParser(stream, doc, pos);
+    parser.parse();
+  }
+
+
+  /**
+   * Reads RTF data from <code>reader</code> into <code>doc</code> at the
+   * specified position <code>pos</code>.
+   *
+   * @param reader the {@link Reader} from where we read RTF data
+   * @param doc the {@link Document} into which we read the RTF data
+   * @param pos the position where to start
+   *
+   * @throws IOException if an IO error occurs
+   * @throws BadLocationException if the position is not valid
+   */
+  public void read(Reader reader, Document doc, int pos)
+    throws IOException, BadLocationException
+  {
+    RTFParser parser = new RTFParser(reader, doc, pos);
+    parser.parse();
+  }
+}
Index: libjava/javax/swing/text/rtf/RTFParseException.java
===================================================================
RCS file: libjava/javax/swing/text/rtf/RTFParseException.java
diff -N libjava/javax/swing/text/rtf/RTFParseException.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/rtf/RTFParseException.java	9 Jul 2005 22:10:19 -0000
@@ -0,0 +1,65 @@
+/* RTFParseException.java --
+   Copyright (C) 2005  Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.text.rtf;
+
+/**
+ * Indicates a parsing error during RTF processing.
+ *
+ * @author Roman Kennke (roman@ontographics.com)
+ */
+class RTFParseException
+  extends RuntimeException
+{
+  /**
+   * Constructs a new RTFParseException without message.
+   */
+  public RTFParseException()
+  {
+    super();
+  }
+
+  /**
+   * Constructs a new RTFParseException with the specified message.
+   */
+  public RTFParseException(String message)
+  {
+    super(message);
+  }
+
+}
Index: libjava/javax/swing/text/rtf/RTFParser.java
===================================================================
RCS file: libjava/javax/swing/text/rtf/RTFParser.java
diff -N libjava/javax/swing/text/rtf/RTFParser.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/rtf/RTFParser.java	9 Jul 2005 22:10:20 -0000
@@ -0,0 +1,195 @@
+/* RTFParser.java --
+   Copyright (C) 2005  Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.text.rtf;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.Reader;
+
+import javax.swing.text.BadLocationException;
+import javax.swing.text.Document;
+
+/**
+ * Parses an RTF file into a {@link Document}. The parser utilizes
+ * {@link RTFScanner}.
+ *
+ * @author Roman Kennke (roman@ontographics.com)
+ */
+class RTFParser
+{
+
+  /**
+   * Our scanner.
+   */
+  private RTFScanner scanner;
+
+  /**
+   * The document into which we parse.
+   */
+  private Document doc;
+
+  /**
+   * The current position.
+   */
+  private int pos;
+
+  /**
+   * Constructs a new RTFParser for the specified document and position,
+   * without initializing the scanner. This is only used internally.
+   *
+   * @param doc the {@link Document} into which we should parse
+   * @param pos the position to start
+   */
+  private RTFParser(Document doc, int pos)
+  {
+    this.doc = doc;
+    this.pos = pos;
+  }
+
+  /**
+   * Constructs a new RTFParser for the specified <code>stream</code>.
+   *
+   * @param stream the stream from which we parse
+   * @param doc the {@link Document} into which we should parse
+   * @param pos the position to start
+   */
+  public RTFParser(InputStream stream, Document doc, int pos)
+  {
+    this(doc, pos);
+    scanner = new RTFScanner(stream);
+  }
+
+  /**
+   * Constructs a new RTFParser for the specified <code>reader</code>.
+   *
+   * @param reader the reader from which we parse
+   * @param doc the {@link Document} into which we should parse
+   * @param pos the position to start
+   */
+  public RTFParser(Reader reader, Document doc, int pos)
+  {
+    this(doc, pos);
+    scanner = new RTFScanner(reader);
+  }
+
+  /**
+   * Returns the {@link Document} in which we parsed the RTF data.
+   *
+   * @return the {@link Document} in which we parsed the RTF data
+   */
+  public Document getDocument()
+  {
+    return doc;
+  }
+
+  /**
+   * Starts the parsing process.
+   */
+  public void parse()
+    throws IOException, BadLocationException
+  {
+    parseFile();
+  }
+
+  /**
+   * The parse rules for &lt;file&gt;.
+   */
+  private void parseFile()
+    throws IOException, BadLocationException
+  {
+    Token t1 = scanner.readToken();
+    if (t1.type != Token.LCURLY)
+      throw new RTFParseException("expected left curly braces");
+
+    parseHeader();
+    parseDocument();
+  
+    Token t2 = scanner.readToken();
+    if (t2.type != Token.RCURLY)
+      throw new RTFParseException("expected right curly braces");
+
+  }
+
+  /**
+   * The parse rules for &lt;header&gt;.
+   *
+   * TODO: implement this properly
+   */
+  private void parseHeader()
+  //throws IOException, BadLocationException
+  {
+    // TODO add parse rules here
+  }
+
+
+  /**
+   * The parse rules for &lt;document&gt;.
+   *
+   * TODO: implement this properly
+   */
+  private void parseDocument()
+    throws IOException, BadLocationException
+  {
+    //  !!! TODO !!!
+    // This simply emits every TEXT Token as text to the document
+    // which is plain stupid
+
+    boolean eof = false;
+
+    do {
+      Token token = scanner.readToken();
+      switch (token.type)
+        {
+        case Token.TEXT:
+          TextToken textToken = (TextToken) token;
+          doc.insertString(pos, textToken.text, null);
+          pos += textToken.text.length();
+          break;
+        case Token.EOF:
+          eof = true;
+          break;
+        default:
+          // FIXME
+          break;
+        }
+    } while (!eof);
+
+  }
+
+}
Index: libjava/javax/swing/text/rtf/RTFScanner.java
===================================================================
RCS file: libjava/javax/swing/text/rtf/RTFScanner.java
diff -N libjava/javax/swing/text/rtf/RTFScanner.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/rtf/RTFScanner.java	9 Jul 2005 22:10:20 -0000
@@ -0,0 +1,268 @@
+/* RTFScanner.java --
+   Copyright (C) 2005  Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.text.rtf;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+
+/**
+ * Provides a scanner that scans an {@link InputStream} for tokens of the
+ * RTF syntax.
+ *
+ * This scanner is based upon the RTF specification 1.6
+ * available at:
+ * 
+ * <a
+ * href="http://msdn.microsoft.com/library/en-us/dnrtfspec/html/rtfspec.asp">
+ * RTF specification at MSDN</a>
+ *
+ * @author Roman Kennke (roman@ontographics.com)
+ */
+class RTFScanner
+{
+
+  /**
+   * The reader from which we read the RTF data.
+   */
+  private Reader in;
+
+  /**
+   * This is used to constuct strings from the read in chars.
+   */
+  private StringBuffer buffer;
+
+  /**
+   * Constructs a new RTFScanner without initializing the {@link Reader}.
+   */
+  private RTFScanner()
+  {
+    buffer = new StringBuffer();
+  }
+
+  /**
+   * Constructs a new RTFScanner for the given {@link InputStream}.
+   * The stream is wrapped into an {@link InputStreamReader} and if it's
+   * not yet buffered then the Reader is wrapped in a {@link BufferedReader}
+   *
+   * @param stream the {@link InputStream} to read RTF data from
+   */
+  public RTFScanner(InputStream stream)
+  {
+    this();
+    InputStreamReader reader = new InputStreamReader(stream);
+    in = new BufferedReader(reader);
+  }
+
+  /**
+   * Constructs a new RTFScanner for the given {@link Reader}.
+   *
+   * If the reader is not an instance of {@link BufferedReader} then it
+   * is wrapped into a BufferedReader.
+   *
+   * @param reader the {@link BufferedReader} to read RTF data from
+   */
+  public RTFScanner(Reader reader)
+  {
+    this();
+    if (reader instanceof BufferedReader)
+      {
+        in = reader;
+      }
+    else
+      {
+        in = new BufferedReader(reader);
+      }
+  }
+
+  /**
+   * Reads in the next {@link Token} from the stream.
+   *
+   * @return the read {@link Token}
+   *
+   * @throws IOException if the underlying stream has problems
+   */
+  public Token readToken()
+    throws IOException
+  {
+    Token token = null;
+
+    int c = in.read();
+    switch(c)
+      {
+      case -1:
+        token = new Token(Token.EOF);
+        break;
+
+      case '{':
+        token = new Token(Token.LCURLY);
+        break;
+
+      case '}':
+        token = new Token(Token.RCURLY);
+        break;
+
+      case '\\':
+        buffer.delete(0, buffer.length());
+        buffer.append((char) c);
+        token = readControlWord();
+        break;
+
+      default:
+        buffer.delete(0, buffer.length());
+        buffer.append((char) c);
+        token = readText();
+        break;
+      }
+
+    return token;
+  }
+
+  /**
+   * Reads in a control word and optional parameter.
+   *
+   * @return the read in control word as {@link ControlWordToken}
+   *
+   * @throws IOException if the underlying stream has problems
+   */
+  private Token readControlWord()
+    throws IOException
+  {
+    // this flag indicates if we are still reading the name or are already
+    // in the parameter
+    boolean readingName = true;
+    String name = null;
+    String param = null;
+
+    while (true)
+      {
+        in.mark(1);
+        int c = in.read();
+
+        // check for 'a'..'z'
+        if (readingName && (c >= 'a') && (c <= 'z'))
+          {
+            buffer.append((char) c);
+          }
+        else if ((c >= '0') && (c <= '9'))
+          {
+            // if the last char was in the name, then finish reading the name
+            if (readingName)
+              {
+                name = buffer.toString();
+                buffer.delete(0, buffer.length());
+                readingName = false;
+              }
+            buffer.append((char) c);
+          }
+        else
+          {
+            // if we were in the name, then finish this
+            if (readingName)
+              {
+                name = buffer.toString();
+              }
+            // otherwise finish the parameter
+            else
+              {
+                param = buffer.toString();
+              }
+
+            // clear up
+            buffer.delete(0, buffer.length());
+            // reset input buffer to last char
+            in.reset();
+            // break while loop
+            break;
+          }
+      }
+
+    ControlWordToken token = null;
+
+    if (param == null)
+      token = new ControlWordToken(name);
+    else
+      token =new ControlWordToken(name, Integer.parseInt(param));
+
+    return token;
+
+  }
+
+  /**
+   * Reads in a block of text.
+   *
+   * @return the token for the text
+   */
+  private Token readText()
+    throws IOException
+  {
+
+    boolean readingText = true;
+    while (readingText)
+      {
+        in.mark(1);
+        int c = in.read();
+        switch(c)
+          {
+          case '\\':
+          case '{':
+          case '}':
+          case -1:
+            readingText = false;
+            in.reset();
+            break;
+
+          default:
+            buffer.append((char) c);
+            break;
+          }
+
+      }
+
+    String text = buffer.toString();
+    Token token = new TextToken(text);
+
+    buffer.delete(0, buffer.length());
+
+    return token;
+
+  }
+}
Index: libjava/javax/swing/text/rtf/TextToken.java
===================================================================
RCS file: libjava/javax/swing/text/rtf/TextToken.java
diff -N libjava/javax/swing/text/rtf/TextToken.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/rtf/TextToken.java	9 Jul 2005 22:10:20 -0000
@@ -0,0 +1,65 @@
+/* TextToken.java --
+   Copyright (C) 2005  Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.text.rtf;
+
+/**
+ * A special {@link Token} that represents a piece of text in RTF.
+ *
+ * @author Roman Kennke (roman@ontographics.com)
+ */
+class TextToken extends Token
+{
+
+  /**
+   * The text.
+   */
+  public String text;
+
+  /**
+   * Constructs a new TextToken with the specified textual data.
+   *
+   * @param text the text for this token
+   */
+  public TextToken(String text)
+  {
+    super(Token.TEXT);
+    this.text = text;
+  }
+
+}
Index: libjava/javax/swing/text/rtf/Token.java
===================================================================
RCS file: libjava/javax/swing/text/rtf/Token.java
diff -N libjava/javax/swing/text/rtf/Token.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/javax/swing/text/rtf/Token.java	9 Jul 2005 22:10:20 -0000
@@ -0,0 +1,91 @@
+/* Token.java --
+   Copyright (C) 2005  Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
+02111-1307 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package javax.swing.text.rtf;
+
+/**
+ * Represents a simple token that the RTFScanner can read. A simple
+ * only has a type (like LCURLY or RCURLY). More complex tokens may
+ * attach data to the token.
+ *
+ * @author Roman Kennke (roman@ontographics.com)
+ */
+class Token
+{
+
+  /**
+   * This special type inidicates the end of the input stream.
+   */
+  public static final int EOF = -1;
+
+  /**
+   * A left curly brace '{'.
+   */
+  public static final int LCURLY = 1;
+
+  /**
+   * A right curly brace '}'.
+   */
+  public static final int RCURLY = 2;
+
+  /**
+   * A control word like '\rtf1'. Tokens with this type are represented
+   * through the subclass {@link ControlWordToken}.
+   */
+  public static final int CONTROL_WORD = 3;
+
+  /**
+   * A token that contains text. This is represented through the subclass
+   * {@link TextToken}.
+   */
+  public static final int TEXT = 4;
+
+
+  /** The token type. */
+  public int type;
+
+  /**
+   * Constructs a new Token with the specified type.
+   *
+   * @param type the Token type
+   */
+  public Token(int type)
+  {
+    this.type = type;
+  }
+}
Index: libjava/javax/swing/tree/DefaultTreeSelectionModel.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/tree/DefaultTreeSelectionModel.java,v
retrieving revision 1.4
diff -u -r1.4 DefaultTreeSelectionModel.java
--- libjava/javax/swing/tree/DefaultTreeSelectionModel.java	30 Nov 2004 23:59:09 -0000	1.4
+++ libjava/javax/swing/tree/DefaultTreeSelectionModel.java	9 Jul 2005 22:10:20 -0000
@@ -1,5 +1,5 @@
 /* DefaultTreeSelectionModel.java --
-   Copyright (C) 2002, 2004  Free Software Foundation, Inc.
+   Copyright (C) 2002, 2004, 2005  Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -67,62 +67,66 @@
   public static final String SELECTION_MODE_PROPERTY = "selectionMode";
 
   /**
-   * changeSupport
+   * Our Swing property change support.
    */
   protected SwingPropertyChangeSupport changeSupport;
 
   /**
-   * selection
+   * The current selection.
    */
   protected TreePath[] selection;
 
   /**
-   * listenerList
+   * Our TreeSelectionListeners.
    */
   protected EventListenerList listenerList;
 
   /**
-   * rowMapper
+   * The current RowMapper.
    */
   protected transient RowMapper rowMapper;
 
   /**
-   * listSelectionModel
+   * The current listSelectionModel.
    */
   protected DefaultListSelectionModel listSelectionModel;
 
   /**
-   * selectionMode
+   * The current selection mode.
    */
   protected int selectionMode;
 
   /**
-   * leadPath
+   * The path that has been added last.
    */
   protected TreePath leadPath;
 
   /**
-   * leadIndex
+   * The index of the last added path.
    */
   protected int leadIndex;
 
   /**
-   * leadRow
+   * The row of the last added path according to the RowMapper.
    */
   protected int leadRow;
 
   /**
-   * Constructor DefaultTreeSelectionModel
+   * Constructs a new DefaultTreeSelectionModel.
    */
   public DefaultTreeSelectionModel()
   {
-    // TODO
+    setSelectionMode(DISCONTIGUOUS_TREE_SELECTION);
+    listenerList = new EventListenerList();
   }
 
   /**
-   * clone
-   * @exception CloneNotSupportedException TODO
-   * @return Object
+   * Creates a clone of this DefaultTreeSelectionModel with the same
+   * selection.
+   *
+   * @exception CloneNotSupportedException should not be thrown here
+   *
+   * @return a clone of this DefaultTreeSelectionModel
    */
   public Object clone() throws CloneNotSupportedException
   {
@@ -130,8 +134,9 @@
   }
 
   /**
-   * toString
-   * @return String
+   * Returns a string that shows this object's properties.
+   *
+   * @return a string that shows this object's properties
    */
   public String toString()
   {
@@ -161,8 +166,12 @@
   }
 
   /**
-   * setRowMapper
-   * @param value0 TODO
+   * Sets the RowMapper that should be used to map between paths and their
+   * rows.
+   *
+   * @param rowMapper the RowMapper to set
+   *
+   * @see {@link RowMapper
    */
   public void setRowMapper(RowMapper value0)
   {
@@ -170,44 +179,71 @@
   }
 
   /**
-   * getRowMapper
-   * @return RowMapper
+   * Returns the RowMapper that is currently used to map between paths and
+   * their rows.
+   *
+   * @return the current RowMapper
+   *
+   * @see {@link RowMapper
    */
   public RowMapper getRowMapper()
   {
-    return null; // TODO
+    return rowMapper;
   }
 
   /**
-   * setSelectionMode
-   * @param value0 TODO
+   * Sets the current selection mode. Possible values are
+   * {@link #SINGLE_TREE_SELECTION}, {@link CONTIGUOUS_TREE_SELECTION}
+   * and {@link #DISCONTIGUOUS_TREE_SELECTION}.
+   *
+   * @param mode the selection mode to be set
+   *
+   * @see {@link #getSelectionMode}
+   * @see {@link #SINGLE_TREE_SELECTION}
+   * @see {@link #CONTIGUOUS_TREE_SELECTION}
+   * @see {@link #DISCONTIGUOUS_TREE_SELECTION}
    */
-  public void setSelectionMode(int value0)
+  public void setSelectionMode(int mode)
   {
-    // TODO
+    selectionMode = mode;
   }
 
   /**
-   * getSelectionMode
-   * @return int
+   * Returns the current selection mode.
+   *
+   * @return the current selection mode
+   *
+   * @see {@link #setSelectionMode}
+   * @see {@link #SINGLE_TREE_SELECTION}
+   * @see {@link #CONTIGUOUS_TREE_SELECTION}
+   * @see {@link #DISCONTIGUOUS_TREE_SELECTION}
    */
   public int getSelectionMode()
   {
-    return 0; // TODO
+    return selectionMode;
   }
 
   /**
-   * setSelectionPath
-   * @param value0 TODO
+   * Sets this path as the only selection.
+   *
+   * If this changes the selection the registered TreeSelectionListeners
+   * are notified.
+   *
+   * @param path the path to set as selection
    */
-  public void setSelectionPath(TreePath value0)
+  public void setSelectionPath(TreePath path)
   {
-    // TODO
+    selection = new TreePath[] { path };
   }
 
   /**
-   * setSelectionPaths
-   * @param value0 TODO
+   * Sets the paths as selection. This method checks for duplicates and
+   * removes them.
+   *
+   * If this changes the selection the registered TreeSelectionListeners
+   * are notified.
+   *
+   * @param paths the paths to set as selection
    */
   public void setSelectionPaths(TreePath[] value0)
   {
@@ -215,8 +251,13 @@
   }
 
   /**
-   * addSelectionPath
-   * @param value0 TODO
+   * Adds a path to the list of selected paths. This method checks if the
+   * path is already selected and doesn't add the same path twice.
+   *
+   * If this changes the selection the registered TreeSelectionListeners
+   * are notified.
+   *
+   * @param path the path to add to the selection
    */
   public void addSelectionPath(TreePath value0)
   {
@@ -224,8 +265,13 @@
   }
 
   /**
-   * addSelectionPaths
-   * @param value0 TODO
+   * Adds the paths to the list of selected paths. This method checks if the
+   * paths are already selected and doesn't add the same path twice.
+   *
+   * If this changes the selection the registered TreeSelectionListeners
+   * are notified.
+   *
+   * @param paths the paths to add to the selection
    */
   public void addSelectionPaths(TreePath[] value0)
   {
@@ -233,8 +279,12 @@
   }
 
   /**
-   * removeSelectionPath
-   * @param value0 TODO
+   * Removes the path from the selection.
+   *
+   * If this changes the selection the registered TreeSelectionListeners
+   * are notified.
+   *
+   * @param path the path to remove
    */
   public void removeSelectionPath(TreePath value0)
   {
@@ -242,8 +292,12 @@
   }
 
   /**
-   * removeSelectionPaths
-   * @param value0 TODO
+   * Removes the paths from the selection.
+   *
+   * If this changes the selection the registered TreeSelectionListeners
+   * are notified.
+   *
+   * @param paths the path to remove
    */
   public void removeSelectionPaths(TreePath[] value0)
   {
@@ -251,36 +305,49 @@
   }
 
   /**
-   * getSelectionPath
-   * @return TreePath
+   * Returns the first path in the selection. This is especially useful
+   * when the selectionMode is {@link #SINGLE_TREE_SELECTION}.
+   *
+   * @return the first path in the selection
    */
   public TreePath getSelectionPath()
   {
-    return null; // TODO
+    if ((selection == null) || (selection.length == 0))
+      return null;
+    else
+      return selection[0];
   }
 
   /**
-   * getSelectionPaths
-   * @return TreePath[]
+   * Returns the complete selection.
+   *
+   * @return the complete selection
    */
   public TreePath[] getSelectionPaths()
   {
-    return null; // TODO
+    return selection;
   }
 
   /**
-   * getSelectionCount
-   * @return int
+   * Returns the number of paths in the selection.
+   *
+   * @return the number of paths in the selection
    */
   public int getSelectionCount()
   {
-    return 0; // TODO
+    if (selection == null)
+      return 0;
+    else
+      return selection.length;
   }
 
   /**
-   * isPathSelected
-   * @param value0 TODO
-   * @return boolean
+   * Checks if a given path is in the selection.
+   *
+   * @param path the path to check
+   *
+   * @return <code>true</code> if the path is in the selection,
+   *         <code>false</code> otherwise
    */
   public boolean isPathSelected(TreePath value0)
   {
@@ -288,16 +355,18 @@
   }
 
   /**
-   * isSelectionEmpty
-   * @return boolean
+   * Checks if the selection is empty.
+   *
+   * @return <code>true</code> if the selection is empty,
+   *         <code>false</code> otherwise
    */
   public boolean isSelectionEmpty()
   {
-    return false; // TODO
+    return ((selection == null) || (selection.length == 0));
   }
 
   /**
-   * clearSelection
+   * Removes all paths from the selection.
    */
   public void clearSelection()
   {
@@ -364,36 +433,61 @@
   }
 
   /**
-   * getSelectionRows
-   * @return int[]
+   * Returns the currently selected rows.
+   *
+   * @return the currently selected rows
    */
   public int[] getSelectionRows()
   {
-    return null; // TODO
+    if (rowMapper == null)
+      return null;
+    else
+      return rowMapper.getRowsForPaths(selection);
   }
 
   /**
-   * getMinSelectionRow
-   * @return int
+   * Returns the smallest row index from the selection.
+   *
+   * @return the smallest row index from the selection
    */
   public int getMinSelectionRow()
   {
-    return 0; // TODO
+    if ((rowMapper == null) || (selection == null) || (selection.length == 0))
+      return -1;
+    else {
+      int[] rows = rowMapper.getRowsForPaths(selection);
+      int minRow = Integer.MAX_VALUE;
+      for (int index = 0; index < rows.length; index++)
+        minRow = Math.min(minRow, rows[index]);
+      return minRow;
+    }
   }
 
   /**
-   * getMaxSelectionRow
-   * @return int
+   * Returns the largest row index from the selection.
+   *
+   * @return the largest row index from the selection
    */
   public int getMaxSelectionRow()
   {
-    return 0; // TODO
+    if ((rowMapper == null) || (selection == null) || (selection.length == 0))
+      return -1;
+    else {
+      int[] rows = rowMapper.getRowsForPaths(selection);
+      int maxRow = -1;
+      for (int index = 0; index < rows.length; index++)
+        maxRow = Math.max(maxRow, rows[index]);
+      return maxRow;
+    }
   }
 
   /**
-   * isRowSelected
-   * @param value0 TODO
-   * @return boolean
+   * Checks if a particular row is selected.
+   *
+   * @param row the index of the row to check
+   *
+   * @return <code>true</code> if the row is in this selection,
+   *         <code>false</code> otherwise
    */
   public boolean isRowSelected(int value0)
   {
@@ -401,7 +495,7 @@
   }
 
   /**
-   * resetRowSelection
+   * Updates the mappings from TreePaths to row indices.
    */
   public void resetRowSelection()
   {
@@ -414,7 +508,10 @@
    */
   public int getLeadSelectionRow()
   {
-    return 0; // TODO
+    if ((rowMapper == null) || (leadPath == null))
+      return -1;
+    else
+      return rowMapper.getRowsForPaths(new TreePath[]{ leadPath })[0];
   }
 
   /**
@@ -423,7 +520,7 @@
    */
   public TreePath getLeadSelectionPath()
   {
-    return null; // TODO
+    return leadPath;
   }
 
   /**
@@ -459,7 +556,16 @@
   }
 
   /**
-   * insureRowContinuity
+   * Makes sure the currently selected paths are valid according to the
+   * current selectionMode.
+   *
+   * If the selectionMode is set to {@link CONTIGUOUS_TREE_SELECTION}
+   * and the selection isn't contiguous then the selection is reset to
+   * the first set of contguous paths.
+   *
+   * If the selectionMode is set to {@link SINGLE_TREE_SELECTION}
+   * and the selection has more than one path, the selection is reset to
+   * the contain only the first path.
    */
   protected void insureRowContinuity()
   {
@@ -467,9 +573,12 @@
   }
 
   /**
-   * arePathsContiguous
-   * @param value0 TODO
-   * @return boolean
+   * Returns <code>true</code> if the paths are contiguous or we
+   * have no RowMapper assigned.
+   *
+   * @param paths the paths to check for continuity
+   * @return <code>true</code> if the paths are contiguous or we
+   *         have no RowMapper assigned
    */
   protected boolean arePathsContiguous(TreePath[] value0)
   {
@@ -477,9 +586,19 @@
   }
 
   /**
-   * canPathsBeAdded
-   * @param value0 TODO
-   * @return boolean
+   * Checks if the paths can be added. This returns <code>true</code> if:
+   * <ul>
+   * <li><code>paths</code> is <code>null</code> or empty</li>
+   * <li>we have no RowMapper assigned</li>
+   * <li>nothing is currently selected</li>
+   * <li>selectionMode is {@link DISCONTIGUOUS_TREE_SELECTION</li>
+   * <li>adding the paths to the selection still results in a contiguous set
+   *   of paths</li>
+   *
+   * @param paths the paths to check
+   *
+   * @return <code>true</code> if the paths can be added with respect to the
+   *         selectionMode
    */
   protected boolean canPathsBeAdded(TreePath[] value0)
   {
@@ -487,9 +606,12 @@
   }
 
   /**
-   * canPathsBeRemoved
-   * @param value0 TODO
-   * @return boolean
+   * Checks if the paths can be removed without breaking the continuity of
+   * the selection according to selectionMode.
+   *
+   * @param paths the paths to check
+   * @return  <code>true</code> if the paths can be removed with respect to the
+   *         selectionMode
    */
   protected boolean canPathsBeRemoved(TreePath[] value0)
   {
@@ -507,7 +629,7 @@
   }
 
   /**
-   * updateLeadIndex
+   * Updates the lead index instance field.
    */
   protected void updateLeadIndex()
   {
@@ -515,7 +637,7 @@
   }
 
   /**
-   * insureUniqueness
+   * Deprecated and not used.
    */
   protected void insureUniqueness()
   {
Index: libjava/javax/swing/tree/TreePath.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/swing/tree/TreePath.java,v
retrieving revision 1.3
diff -u -r1.3 TreePath.java
--- libjava/javax/swing/tree/TreePath.java	11 Jun 2003 13:20:41 -0000	1.3
+++ libjava/javax/swing/tree/TreePath.java	9 Jul 2005 22:10:20 -0000
@@ -1,5 +1,5 @@
 /* TreePath.java --
-   Copyright (C) 2002 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2005  Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -42,6 +42,7 @@
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.Serializable;
+import java.util.Arrays;
 
 /**
  * TreePath
@@ -51,250 +52,250 @@
 {
   static final long serialVersionUID = 4380036194768077479L;
 
-	//-------------------------------------------------------------
-	// Variables --------------------------------------------------
-	//-------------------------------------------------------------
-
-	/**
-	 * path
-	 */
-	private Object[]	path	= null;
-
-
-	//-------------------------------------------------------------
-	// Initialization ---------------------------------------------
-	//-------------------------------------------------------------
-
-	/**
-	 * Constructor TreePath
-	 * @param path TODO
-	 */
-	public TreePath(Object[] path) {
-
-		// Create Path
-		this.path = new Object[path.length];
-		System.arraycopy(path, 0, this.path, 0, path.length);
-
-	} // TreePath()
-
-	/**
-	 * Constructor TreePath
-	 * @param element TODO
-	 */
-	public TreePath(Object element) {
-
-		// Create Path
-		path = new Object[1];
-		path[0] = element;
-
-	} // TreePath()
-
-	/**
-	 * Constructor TreePath
-	 * @param path TODO
-	 * @param element TODO
-	 */
-	protected TreePath(TreePath path, Object element) {
-
-		// Variables
-		Object[]	treepath;
-
-		// Get Tree Path
-		treepath = path.getPath();
-
-		// Create Tree Path
-		this.path = new Object[treepath.length + 1];
-		System.arraycopy(treepath, 0, this.path, 0, treepath.length);
-		this.path[treepath.length] = element;
-
-	} // TreePath()
-
-	/**
-	 * Constructor TreePath
-	 * @param path TODO
-	 * @param length TODO
-	 */
-	protected TreePath(Object[] path, int length) {
-
-		// Create Path
-		this.path = new Object[length];
-		System.arraycopy(path, 0, this.path, 0, length);
-
-	} // TreePath()
-
-	/**
-	 * Constructor TreePath
-	 */
-	protected TreePath() {
-		path = new Object[0];
-	} // TreePath()
-
-
-	//-------------------------------------------------------------
-	// Methods ----------------------------------------------------
-	//-------------------------------------------------------------
-
-	/**
-	 * hashCode
-	 * @returns int
-	 */
-	public int hashCode() {
-		return getLastPathComponent().hashCode();
-	} // hashCode()
-
-	/**
-	 * equals
-	 * @param object TODO
-	 * @returns boolean
-	 */
-	public boolean equals(Object object) {
-
-		// Variables
-		Object[]	treepath;
-		int			index;
-
-		// Check for TreePath
-		if (object instanceof TreePath) {
-
-			// Get Path Elements
-			treepath = ((TreePath) object).getPath();
-
-			// Check length
-			if (treepath.length != path.length) {
-				return false;
-			} // if
-
-			// Check Elements
-			for (index = 0; index < path.length; index++) {
-				if (treepath[index] != path[index]) {
-					return false;
-				} // if
-			} // for
-
-			// Tree Path's are equals
-			return true;
-
-		} // if
-
-		// Unequal
-		return false;
-
-	} // equals()
-
-	/**
-	 * toString
-	 * @returns String
-	 */
-	public String toString() {
-		return null; // TODO
-	} // toString()
-
-	/**
-	 * writeObject
-	 * @param value0 TODO
-	 * @exception IOException TODO
-	 */
-	private void writeObject(ObjectOutputStream value0) throws IOException {
-		// TODO
-	} // writeObject()
-
-	/**
-	 * readObject
-	 * @param value0 TODO
-	 * @exception IOException TODO
-	 * @exception ClassNotFoundException TODO
-	 */
-	private void readObject(ObjectInputStream value0) throws IOException, ClassNotFoundException {
-		// TODO
-	} // readObject()
-
-	/**
-	 * getPath
-	 * @returns Object[]
-	 */
-	public Object[] getPath() {
-		return path;
-	} // getPath()
-
-	/**
-	 * getLastPathComponent
-	 * @returns Object
-	 */
-	public Object getLastPathComponent() {
-		return path[path.length - 1];
-	} // getLastPathComponent()
-
-	/**
-	 * getPathCount
-	 * @returns int
-	 */
-	public int getPathCount() {
-		return path.length;
-	} // getPathCount()
-
-	/**
-	 * getPathComponent
-	 * @param position TODO
-	 * @returns Object
-	 */
-	public Object getPathComponent(int position) {
-		return path[position];
-	} // getPathComponent()
-
-	/**
-	 * isDescendant
-	 * @param path TODO
-	 * @returns boolean
-	 */
-	public boolean isDescendant(TreePath path) {
-
-		// Variables
-		Object[]	treepath;
-		int			index;
-		int			index2;
-
-		// Get Descendant path
-		treepath = path.getPath();
-
-		// Locate Start Index
-		index = 0;
-		index2 = 0;
-		while (treepath[index] != this.path[index2]) {
-			index++;
-		} // while
-
-		// Verify Paths
-		while (treepath[index] == this.path[index2]) {
-			index++;
-			index2++;
-		} // while
-
-		// Check for descendant
-		if (index2 != this.path.length) {
-			return false;
-		} // if
-
-		// Is Descendant
-		return true;
-
-	} // isDescendant()
-
-	/**
-	 * pathByAddingChild
-	 * @param element TODO
-	 * @returns TreePath
-	 */
-	public TreePath pathByAddingChild(Object element) {
-		return new TreePath(this, element);
-	} // pathByAddingChild()
-
-	/**
-	 * getParentPath
-	 * @returns TreePath
-	 */
-	public TreePath getParentPath() {
-		return new TreePath(this.getPath(), path.length - 1);
-	} // getParentPath()
-
-
-} // TreePath
+  /**
+   * path
+   */
+  private Object[] path = null;
+
+
+  /**
+   * Constructor TreePath
+   * @param path TODO
+   */
+  public TreePath(Object[] path)
+  {
+    // Create Path
+    this.path = new Object[path.length];
+    System.arraycopy(path, 0, this.path, 0, path.length);
+  }
+
+  /**
+   * Constructor TreePath
+   * @param element TODO
+   */
+  public TreePath(Object element)
+  {
+    // Create Path
+    path = new Object[1];
+    path[0] = element;
+  }
+
+  /**
+   * Constructor TreePath
+   * @param path TODO
+   * @param element TODO
+   */
+  protected TreePath(TreePath path, Object element)
+  {
+    // Variables
+    Object[]	treepath;
+
+    // Get Tree Path
+    treepath = path.getPath();
+
+    // Create Tree Path
+    this.path = new Object[treepath.length + 1];
+    System.arraycopy(treepath, 0, this.path, 0, treepath.length);
+    this.path[treepath.length] = element;
+  }
+
+  /**
+   * Constructor TreePath
+   * @param path TODO
+   * @param length TODO
+   */
+  protected TreePath(Object[] path, int length)
+  {
+    // Create Path
+    this.path = new Object[length];
+    System.arraycopy(path, 0, this.path, 0, length);
+  }
+
+  /**
+   * Constructor TreePath
+   */
+  protected TreePath()
+  {
+    path = new Object[0];
+  }
+
+
+  /**
+   * hashCode
+   * @returns int
+   */
+  public int hashCode()
+  {
+    return getLastPathComponent().hashCode();
+  }
+
+  /**
+   * equals
+   * @param object TODO
+   * @returns boolean
+   */
+  public boolean equals(Object object)
+  {
+    // Variables
+    Object[]	treepath;
+    int			index;
+
+    // Check for TreePath
+    if (object instanceof TreePath)
+      {
+        // Get Path Elements
+        treepath = ((TreePath) object).getPath();
+
+        // Check length
+        if (treepath.length != path.length)
+          return false;
+
+        // Check Elements
+        for (index = 0; index < path.length; index++)
+          {
+            if (treepath[index] != path[index])
+              return false;
+          }
+
+        // Tree Path's are equals
+        return true;
+      }
+
+    // Unequal
+    return false;
+  }
+
+  /**
+   * toString
+   * @returns String
+   */
+  public String toString()
+  {
+    if (path.length == 1)
+      return String.valueOf(path[0]);
+    else
+      return Arrays.asList(path).toString();
+  }
+
+  /**
+   * writeObject
+   * @param value0 TODO
+   * @exception IOException TODO
+   */
+  private void writeObject(ObjectOutputStream value0)
+    throws IOException
+  {
+    // TODO
+  }
+
+  /**
+   * readObject
+   * @param value0 TODO
+   * @exception IOException TODO
+   * @exception ClassNotFoundException TODO
+   */
+  private void readObject(ObjectInputStream value0)
+    throws IOException, ClassNotFoundException
+  {
+    // TODO
+  }
+
+  /**
+   * getPath
+   * @returns Object[]
+   */
+  public Object[] getPath()
+  {
+    return path;
+  }
+
+  /**
+   * getLastPathComponent
+   * @returns Object
+   */
+  public Object getLastPathComponent()
+  {
+    return path[path.length - 1];
+  }
+
+  /**
+   * getPathCount
+   * @returns int
+   */
+  public int getPathCount()
+  {
+    return path.length;
+  }
+
+  /**
+   * getPathComponent
+   * @param position TODO
+   * @returns Object
+   */
+  public Object getPathComponent(int position)
+  {
+    return path[position];
+  }
+
+  /**
+   * isDescendant
+   * @param path TODO
+   * @returns boolean
+   */
+  public boolean isDescendant(TreePath path)
+  {
+
+    // Variables
+    Object[]	treepath;
+    int			index;
+    int			index2;
+
+    // Get Descendant path
+    treepath = path.getPath();
+
+    // Locate Start Index
+    index = 0;
+    index2 = 0;
+    while (treepath[index] != this.path[index2])
+      index++;
+
+    // Verify Paths
+    while (treepath[index] == this.path[index2])
+      {
+        index++;
+        index2++;
+      }
+
+    // Check for descendant
+    if (index2 != this.path.length)
+      return false;
+
+    // Is Descendant
+    return true;
+
+  }
+
+  /**
+   * pathByAddingChild
+   * @param element TODO
+   * @returns TreePath
+   */
+  public TreePath pathByAddingChild(Object element)
+  {
+    return new TreePath(this, element);
+  }
+
+  /**
+   * getParentPath
+   * @returns TreePath
+   */
+  public TreePath getParentPath()
+  {
+    // If this path has only one element, then we return null. That
+    // is what the JDK does.
+    if (path.length <= 1)
+      return null;
+
+    return new TreePath(this.getPath(), path.length - 1);
+  }
+}
Index: libjava/javax/xml/XMLConstants.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/XMLConstants.java,v
retrieving revision 1.2
diff -u -r1.2 XMLConstants.java
--- libjava/javax/xml/XMLConstants.java	17 Feb 2005 07:48:55 -0000	1.2
+++ libjava/javax/xml/XMLConstants.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/datatype/DatatypeConfigurationException.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/datatype/DatatypeConfigurationException.java,v
retrieving revision 1.2
diff -u -r1.2 DatatypeConfigurationException.java
--- libjava/javax/xml/datatype/DatatypeConfigurationException.java	17 Feb 2005 07:48:56 -0000	1.2
+++ libjava/javax/xml/datatype/DatatypeConfigurationException.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/datatype/DatatypeConstants.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/datatype/DatatypeConstants.java,v
retrieving revision 1.2
diff -u -r1.2 DatatypeConstants.java
--- libjava/javax/xml/datatype/DatatypeConstants.java	17 Feb 2005 07:48:56 -0000	1.2
+++ libjava/javax/xml/datatype/DatatypeConstants.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/datatype/DatatypeFactory.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/datatype/DatatypeFactory.java,v
retrieving revision 1.2
diff -u -r1.2 DatatypeFactory.java
--- libjava/javax/xml/datatype/DatatypeFactory.java	17 Feb 2005 07:48:56 -0000	1.2
+++ libjava/javax/xml/datatype/DatatypeFactory.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/datatype/Duration.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/datatype/Duration.java,v
retrieving revision 1.2
diff -u -r1.2 Duration.java
--- libjava/javax/xml/datatype/Duration.java	17 Feb 2005 07:48:56 -0000	1.2
+++ libjava/javax/xml/datatype/Duration.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/datatype/XMLGregorianCalendar.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/datatype/XMLGregorianCalendar.java,v
retrieving revision 1.2
diff -u -r1.2 XMLGregorianCalendar.java
--- libjava/javax/xml/datatype/XMLGregorianCalendar.java	17 Feb 2005 07:48:56 -0000	1.2
+++ libjava/javax/xml/datatype/XMLGregorianCalendar.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/namespace/NamespaceContext.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/namespace/NamespaceContext.java,v
retrieving revision 1.2
diff -u -r1.2 NamespaceContext.java
--- libjava/javax/xml/namespace/NamespaceContext.java	17 Feb 2005 07:48:56 -0000	1.2
+++ libjava/javax/xml/namespace/NamespaceContext.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/namespace/QName.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/namespace/QName.java,v
retrieving revision 1.2
diff -u -r1.2 QName.java
--- libjava/javax/xml/namespace/QName.java	17 Feb 2005 07:48:56 -0000	1.2
+++ libjava/javax/xml/namespace/QName.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/parsers/DocumentBuilder.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/parsers/DocumentBuilder.java,v
retrieving revision 1.2
diff -u -r1.2 DocumentBuilder.java
--- libjava/javax/xml/parsers/DocumentBuilder.java	17 Feb 2005 07:48:56 -0000	1.2
+++ libjava/javax/xml/parsers/DocumentBuilder.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/parsers/DocumentBuilderFactory.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/parsers/DocumentBuilderFactory.java,v
retrieving revision 1.2
diff -u -r1.2 DocumentBuilderFactory.java
--- libjava/javax/xml/parsers/DocumentBuilderFactory.java	17 Feb 2005 07:48:56 -0000	1.2
+++ libjava/javax/xml/parsers/DocumentBuilderFactory.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/parsers/FactoryConfigurationError.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/parsers/FactoryConfigurationError.java,v
retrieving revision 1.2
diff -u -r1.2 FactoryConfigurationError.java
--- libjava/javax/xml/parsers/FactoryConfigurationError.java	17 Feb 2005 07:48:56 -0000	1.2
+++ libjava/javax/xml/parsers/FactoryConfigurationError.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/parsers/ParserConfigurationException.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/parsers/ParserConfigurationException.java,v
retrieving revision 1.2
diff -u -r1.2 ParserConfigurationException.java
--- libjava/javax/xml/parsers/ParserConfigurationException.java	17 Feb 2005 07:48:56 -0000	1.2
+++ libjava/javax/xml/parsers/ParserConfigurationException.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/parsers/SAXParser.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/parsers/SAXParser.java,v
retrieving revision 1.2
diff -u -r1.2 SAXParser.java
--- libjava/javax/xml/parsers/SAXParser.java	17 Feb 2005 07:48:56 -0000	1.2
+++ libjava/javax/xml/parsers/SAXParser.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/parsers/SAXParserFactory.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/parsers/SAXParserFactory.java,v
retrieving revision 1.2
diff -u -r1.2 SAXParserFactory.java
--- libjava/javax/xml/parsers/SAXParserFactory.java	17 Feb 2005 07:48:56 -0000	1.2
+++ libjava/javax/xml/parsers/SAXParserFactory.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/ErrorListener.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/ErrorListener.java,v
retrieving revision 1.2
diff -u -r1.2 ErrorListener.java
--- libjava/javax/xml/transform/ErrorListener.java	17 Feb 2005 07:48:57 -0000	1.2
+++ libjava/javax/xml/transform/ErrorListener.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/OutputKeys.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/OutputKeys.java,v
retrieving revision 1.2
diff -u -r1.2 OutputKeys.java
--- libjava/javax/xml/transform/OutputKeys.java	17 Feb 2005 07:48:57 -0000	1.2
+++ libjava/javax/xml/transform/OutputKeys.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/Result.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/Result.java,v
retrieving revision 1.2
diff -u -r1.2 Result.java
--- libjava/javax/xml/transform/Result.java	17 Feb 2005 07:48:57 -0000	1.2
+++ libjava/javax/xml/transform/Result.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/Source.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/Source.java,v
retrieving revision 1.2
diff -u -r1.2 Source.java
--- libjava/javax/xml/transform/Source.java	17 Feb 2005 07:48:57 -0000	1.2
+++ libjava/javax/xml/transform/Source.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/SourceLocator.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/SourceLocator.java,v
retrieving revision 1.2
diff -u -r1.2 SourceLocator.java
--- libjava/javax/xml/transform/SourceLocator.java	17 Feb 2005 07:48:57 -0000	1.2
+++ libjava/javax/xml/transform/SourceLocator.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/Templates.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/Templates.java,v
retrieving revision 1.2
diff -u -r1.2 Templates.java
--- libjava/javax/xml/transform/Templates.java	17 Feb 2005 07:48:57 -0000	1.2
+++ libjava/javax/xml/transform/Templates.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/Transformer.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/Transformer.java,v
retrieving revision 1.2
diff -u -r1.2 Transformer.java
--- libjava/javax/xml/transform/Transformer.java	17 Feb 2005 07:48:57 -0000	1.2
+++ libjava/javax/xml/transform/Transformer.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/TransformerConfigurationException.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/TransformerConfigurationException.java,v
retrieving revision 1.2
diff -u -r1.2 TransformerConfigurationException.java
--- libjava/javax/xml/transform/TransformerConfigurationException.java	17 Feb 2005 07:48:57 -0000	1.2
+++ libjava/javax/xml/transform/TransformerConfigurationException.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/TransformerException.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/TransformerException.java,v
retrieving revision 1.2
diff -u -r1.2 TransformerException.java
--- libjava/javax/xml/transform/TransformerException.java	17 Feb 2005 07:48:57 -0000	1.2
+++ libjava/javax/xml/transform/TransformerException.java	9 Jul 2005 22:10:20 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/TransformerFactory.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/TransformerFactory.java,v
retrieving revision 1.2
diff -u -r1.2 TransformerFactory.java
--- libjava/javax/xml/transform/TransformerFactory.java	17 Feb 2005 07:48:57 -0000	1.2
+++ libjava/javax/xml/transform/TransformerFactory.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/TransformerFactoryConfigurationError.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/TransformerFactoryConfigurationError.java,v
retrieving revision 1.2
diff -u -r1.2 TransformerFactoryConfigurationError.java
--- libjava/javax/xml/transform/TransformerFactoryConfigurationError.java	17 Feb 2005 07:48:57 -0000	1.2
+++ libjava/javax/xml/transform/TransformerFactoryConfigurationError.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/URIResolver.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/URIResolver.java,v
retrieving revision 1.2
diff -u -r1.2 URIResolver.java
--- libjava/javax/xml/transform/URIResolver.java	17 Feb 2005 07:48:57 -0000	1.2
+++ libjava/javax/xml/transform/URIResolver.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/dom/DOMLocator.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/dom/DOMLocator.java,v
retrieving revision 1.2
diff -u -r1.2 DOMLocator.java
--- libjava/javax/xml/transform/dom/DOMLocator.java	17 Feb 2005 07:48:57 -0000	1.2
+++ libjava/javax/xml/transform/dom/DOMLocator.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/dom/DOMResult.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/dom/DOMResult.java,v
retrieving revision 1.2
diff -u -r1.2 DOMResult.java
--- libjava/javax/xml/transform/dom/DOMResult.java	17 Feb 2005 07:48:57 -0000	1.2
+++ libjava/javax/xml/transform/dom/DOMResult.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/dom/DOMSource.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/dom/DOMSource.java,v
retrieving revision 1.2
diff -u -r1.2 DOMSource.java
--- libjava/javax/xml/transform/dom/DOMSource.java	17 Feb 2005 07:48:57 -0000	1.2
+++ libjava/javax/xml/transform/dom/DOMSource.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/sax/SAXResult.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/sax/SAXResult.java,v
retrieving revision 1.2
diff -u -r1.2 SAXResult.java
--- libjava/javax/xml/transform/sax/SAXResult.java	17 Feb 2005 07:48:57 -0000	1.2
+++ libjava/javax/xml/transform/sax/SAXResult.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/sax/SAXSource.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/sax/SAXSource.java,v
retrieving revision 1.2
diff -u -r1.2 SAXSource.java
--- libjava/javax/xml/transform/sax/SAXSource.java	17 Feb 2005 07:48:57 -0000	1.2
+++ libjava/javax/xml/transform/sax/SAXSource.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/sax/SAXTransformerFactory.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/sax/SAXTransformerFactory.java,v
retrieving revision 1.2
diff -u -r1.2 SAXTransformerFactory.java
--- libjava/javax/xml/transform/sax/SAXTransformerFactory.java	17 Feb 2005 07:48:57 -0000	1.2
+++ libjava/javax/xml/transform/sax/SAXTransformerFactory.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/sax/TemplatesHandler.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/sax/TemplatesHandler.java,v
retrieving revision 1.2
diff -u -r1.2 TemplatesHandler.java
--- libjava/javax/xml/transform/sax/TemplatesHandler.java	17 Feb 2005 07:48:57 -0000	1.2
+++ libjava/javax/xml/transform/sax/TemplatesHandler.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/sax/TransformerHandler.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/sax/TransformerHandler.java,v
retrieving revision 1.2
diff -u -r1.2 TransformerHandler.java
--- libjava/javax/xml/transform/sax/TransformerHandler.java	17 Feb 2005 07:48:57 -0000	1.2
+++ libjava/javax/xml/transform/sax/TransformerHandler.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/stream/StreamResult.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/stream/StreamResult.java,v
retrieving revision 1.2
diff -u -r1.2 StreamResult.java
--- libjava/javax/xml/transform/stream/StreamResult.java	17 Feb 2005 07:48:58 -0000	1.2
+++ libjava/javax/xml/transform/stream/StreamResult.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/transform/stream/StreamSource.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/transform/stream/StreamSource.java,v
retrieving revision 1.2
diff -u -r1.2 StreamSource.java
--- libjava/javax/xml/transform/stream/StreamSource.java	17 Feb 2005 07:48:58 -0000	1.2
+++ libjava/javax/xml/transform/stream/StreamSource.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/validation/Schema.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/validation/Schema.java,v
retrieving revision 1.2
diff -u -r1.2 Schema.java
--- libjava/javax/xml/validation/Schema.java	17 Feb 2005 07:48:58 -0000	1.2
+++ libjava/javax/xml/validation/Schema.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/validation/SchemaFactory.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/validation/SchemaFactory.java,v
retrieving revision 1.2
diff -u -r1.2 SchemaFactory.java
--- libjava/javax/xml/validation/SchemaFactory.java	17 Feb 2005 07:48:58 -0000	1.2
+++ libjava/javax/xml/validation/SchemaFactory.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/validation/TypeInfoProvider.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/validation/TypeInfoProvider.java,v
retrieving revision 1.2
diff -u -r1.2 TypeInfoProvider.java
--- libjava/javax/xml/validation/TypeInfoProvider.java	17 Feb 2005 07:48:58 -0000	1.2
+++ libjava/javax/xml/validation/TypeInfoProvider.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/validation/Validator.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/validation/Validator.java,v
retrieving revision 1.2
diff -u -r1.2 Validator.java
--- libjava/javax/xml/validation/Validator.java	17 Feb 2005 07:48:58 -0000	1.2
+++ libjava/javax/xml/validation/Validator.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/validation/ValidatorHandler.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/validation/ValidatorHandler.java,v
retrieving revision 1.2
diff -u -r1.2 ValidatorHandler.java
--- libjava/javax/xml/validation/ValidatorHandler.java	17 Feb 2005 07:48:58 -0000	1.2
+++ libjava/javax/xml/validation/ValidatorHandler.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/xpath/XPath.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/xpath/XPath.java,v
retrieving revision 1.1
diff -u -r1.1 XPath.java
--- libjava/javax/xml/xpath/XPath.java	2 Feb 2005 00:42:17 -0000	1.1
+++ libjava/javax/xml/xpath/XPath.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/xpath/XPathConstants.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/xpath/XPathConstants.java,v
retrieving revision 1.2
diff -u -r1.2 XPathConstants.java
--- libjava/javax/xml/xpath/XPathConstants.java	17 Feb 2005 07:48:58 -0000	1.2
+++ libjava/javax/xml/xpath/XPathConstants.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/xpath/XPathException.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/xpath/XPathException.java,v
retrieving revision 1.2
diff -u -r1.2 XPathException.java
--- libjava/javax/xml/xpath/XPathException.java	17 Feb 2005 07:48:58 -0000	1.2
+++ libjava/javax/xml/xpath/XPathException.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/xpath/XPathExpression.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/xpath/XPathExpression.java,v
retrieving revision 1.2
diff -u -r1.2 XPathExpression.java
--- libjava/javax/xml/xpath/XPathExpression.java	17 Feb 2005 07:48:58 -0000	1.2
+++ libjava/javax/xml/xpath/XPathExpression.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/xpath/XPathExpressionException.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/xpath/XPathExpressionException.java,v
retrieving revision 1.2
diff -u -r1.2 XPathExpressionException.java
--- libjava/javax/xml/xpath/XPathExpressionException.java	17 Feb 2005 07:48:58 -0000	1.2
+++ libjava/javax/xml/xpath/XPathExpressionException.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/xpath/XPathFactory.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/xpath/XPathFactory.java,v
retrieving revision 1.2
diff -u -r1.2 XPathFactory.java
--- libjava/javax/xml/xpath/XPathFactory.java	17 Feb 2005 07:48:58 -0000	1.2
+++ libjava/javax/xml/xpath/XPathFactory.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/xpath/XPathFactoryConfigurationException.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/xpath/XPathFactoryConfigurationException.java,v
retrieving revision 1.2
diff -u -r1.2 XPathFactoryConfigurationException.java
--- libjava/javax/xml/xpath/XPathFactoryConfigurationException.java	17 Feb 2005 07:48:58 -0000	1.2
+++ libjava/javax/xml/xpath/XPathFactoryConfigurationException.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/xpath/XPathFunction.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/xpath/XPathFunction.java,v
retrieving revision 1.2
diff -u -r1.2 XPathFunction.java
--- libjava/javax/xml/xpath/XPathFunction.java	17 Feb 2005 07:48:58 -0000	1.2
+++ libjava/javax/xml/xpath/XPathFunction.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/xpath/XPathFunctionException.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/xpath/XPathFunctionException.java,v
retrieving revision 1.2
diff -u -r1.2 XPathFunctionException.java
--- libjava/javax/xml/xpath/XPathFunctionException.java	17 Feb 2005 07:48:58 -0000	1.2
+++ libjava/javax/xml/xpath/XPathFunctionException.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/xpath/XPathFunctionResolver.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/xpath/XPathFunctionResolver.java,v
retrieving revision 1.2
diff -u -r1.2 XPathFunctionResolver.java
--- libjava/javax/xml/xpath/XPathFunctionResolver.java	17 Feb 2005 07:48:58 -0000	1.2
+++ libjava/javax/xml/xpath/XPathFunctionResolver.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/javax/xml/xpath/XPathVariableResolver.java
===================================================================
RCS file: /cvs/gcc/gcc/libjava/javax/xml/xpath/XPathVariableResolver.java,v
retrieving revision 1.1
diff -u -r1.1 XPathVariableResolver.java
--- libjava/javax/xml/xpath/XPathVariableResolver.java	2 Feb 2005 00:42:17 -0000	1.1
+++ libjava/javax/xml/xpath/XPathVariableResolver.java	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gdkfont.h
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gdkfont.h,v
retrieving revision 1.4
diff -u -r1.4 gdkfont.h
--- libjava/jni/gtk-peer/gdkfont.h	16 Feb 2005 20:03:18 -0000	1.4
+++ libjava/jni/gtk-peer/gdkfont.h	9 Jul 2005 22:10:21 -0000
@@ -18,8 +18,8 @@
    
    You should have received a copy of the GNU General Public License
    along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
+   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+   02110-1301 USA.
    
    Linking this library statically or dynamically with other modules is
    making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GThreadNativeMethodRunner.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GThreadNativeMethodRunner.c,v
retrieving revision 1.4
diff -u -r1.4 gnu_java_awt_peer_gtk_GThreadNativeMethodRunner.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GThreadNativeMethodRunner.c	16 Feb 2005 20:03:18 -0000	1.4
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GThreadNativeMethodRunner.c	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkFontPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkFontPeer.c,v
retrieving revision 1.3
diff -u -r1.3 gnu_java_awt_peer_gtk_GdkFontPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkFontPeer.c	16 Feb 2005 20:03:19 -0000	1.3
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkFontPeer.c	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
    
    You should have received a copy of the GNU General Public License
    along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
+   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+   02110-1301 USA.
    
    Linking this library statically or dynamically with other modules is
    making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics.c,v
retrieving revision 1.10
diff -u -r1.10 gnu_java_awt_peer_gtk_GdkGraphics.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics.c	16 Feb 2005 20:03:19 -0000	1.10
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics.c	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -97,6 +97,32 @@
   NSA_SET_PTR (env, obj, g);
 }
 
+JNIEXPORT void JNICALL
+Java_gnu_java_awt_peer_gtk_GdkGraphics_initFromImage
+   (JNIEnv *env, jobject obj, jobject source)
+{
+  struct graphics *g;
+  GdkPixmap *pixmap = 
+    gnu_java_awt_peer_gtk_GtkImage_getPixmap(env, source);
+  g_assert(pixmap != NULL);
+  gdk_pixmap_ref (pixmap);
+
+  g = (struct graphics *) malloc (sizeof (struct graphics));
+  g->x_offset = g->y_offset = 0;
+
+  gdk_threads_enter ();
+
+  g->drawable = (GdkDrawable *)pixmap;
+
+  g->cm = gdk_drawable_get_colormap (g->drawable);
+  gdk_colormap_ref (g->cm);
+  g->gc = gdk_gc_new (g->drawable);
+
+  gdk_threads_leave ();
+
+  NSA_SET_PTR (env, obj, g);
+}
+
 /* copy the native state of the peer (GtkWidget *) to the native state
    of the graphics object */
 JNIEXPORT void JNICALL
@@ -301,136 +327,6 @@
 }
 
 JNIEXPORT void JNICALL
-Java_gnu_java_awt_peer_gtk_GdkGraphics_copyPixmap
-  (JNIEnv *env, jobject obj, jobject offscreen, 
-   jint x, jint y, jint width, jint height)
-{
-  struct graphics *g1, *g2;
-
-  g1 = (struct graphics *) NSA_GET_PTR (env, obj);
-  g2 = (struct graphics *) NSA_GET_PTR (env, offscreen);
-
-  gdk_threads_enter ();
-  gdk_window_copy_area ((GdkWindow *)g1->drawable,
-			g1->gc,
-			x + g1->x_offset, y + g1->y_offset,
-			(GdkWindow *)g2->drawable,
-			0 + g2->x_offset, 0 + g2->y_offset, 
-			width, height);
-  gdk_flush ();
-  gdk_threads_leave ();
-}
-
-static void flip_pixbuf (GdkPixbuf *pixbuf,
-                         jboolean flip_x,
-                         jboolean flip_y,
-                         jint width,
-                         jint height)
-{
-  gint src_rs;
-  guchar *src_pix;
-
-  src_rs = gdk_pixbuf_get_rowstride (pixbuf);
-  src_pix = gdk_pixbuf_get_pixels (pixbuf);
-
-  if (flip_x) 
-    {
-      gint i, channels;
-      guchar buf[4];
-
-      channels = gdk_pixbuf_get_has_alpha (pixbuf) ? 4 : 3;
-
-      for (i = 0; i < height; i++) 
-        {
-          guchar *left = src_pix + i * src_rs;
-          guchar *right = left + channels * (width - 1);
-          while (left < right)
-            { 
-              g_memmove (buf, left, channels);
-              g_memmove (left, right, channels);
-              g_memmove (right, buf, channels);
-              left += channels;
-              right -= channels;
-            }
-        }
-    }
-
-  if (flip_y) 
-    {
-      guchar *top = src_pix;
-      guchar *bottom = top + (height - 1) * src_rs;
-      gpointer buf = g_malloc (src_rs);
-      
-      while (top < bottom)
-        {
-          g_memmove (buf, top, src_rs);
-          g_memmove (top, bottom, src_rs);
-          g_memmove (bottom, buf, src_rs); 
-          top += src_rs;
-          bottom -= src_rs;
-        }
-
-      g_free (buf);
-    }
-}
-  
-JNIEXPORT void JNICALL
-Java_gnu_java_awt_peer_gtk_GdkGraphics_copyAndScalePixmap
-  (JNIEnv *env, jobject obj, jobject offscreen, jboolean flip_x, jboolean flip_y,
-   jint src_x, jint src_y, jint src_width, jint src_height,
-   jint dest_x, jint dest_y, jint dest_width, jint dest_height)
-{
-  struct graphics *g1, *g2;
-  GdkPixbuf *buf_src, *buf_dest;
-
-  g1 = (struct graphics *) NSA_GET_PTR (env, obj);
-  g2 = (struct graphics *) NSA_GET_PTR (env, offscreen);
-
-  gdk_threads_enter ();
-
-  buf_src = gdk_pixbuf_get_from_drawable (NULL,
-                                          g2->drawable,
-                                          g2->cm,
-                                          src_x,
-                                          src_y,
-                                          0,
-                                          0,
-                                          src_width,
-                                          src_height);
-
-  buf_dest = gdk_pixbuf_scale_simple (buf_src, 
-                                      dest_width, 
-                                      dest_height, 
-                                      GDK_INTERP_BILINEAR);
-
-  if (flip_x || flip_y)
-    {
-      flip_pixbuf (buf_dest, flip_x, flip_y, dest_width, dest_height);
-    }
-
-  gdk_pixbuf_render_to_drawable (buf_dest,
-                                 g1->drawable,
-                                 g1->gc,
-                                 0,
-                                 0,
-                                 dest_x,
-                                 dest_y,
-                                 dest_width,
-                                 dest_height,
-                                 GDK_RGB_DITHER_NORMAL,
-                                 0,
-                                 0);
-
-  g_object_unref (G_OBJECT (buf_src));
-  g_object_unref (G_OBJECT (buf_dest));
-
-  gdk_threads_leave ();
-}
-
-
-
-
-JNIEXPORT void JNICALL
 Java_gnu_java_awt_peer_gtk_GdkGraphics_clearRect
   (JNIEnv *env, jobject obj, jint x, jint y, jint width, jint height)
 {
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics2D.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics2D.c,v
retrieving revision 1.12
diff -u -r1.12 gnu_java_awt_peer_gtk_GdkGraphics2D.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics2D.c	16 Feb 2005 20:03:19 -0000	1.12
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphics2D.c	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
    
    You should have received a copy of the GNU General Public License
    along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
+   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+   02110-1301 USA.
    
    Linking this library statically or dynamically with other modules is
    making a combined work based on this library.  Thus, the terms and
@@ -41,6 +41,7 @@
 #include <gdk/gdktypes.h>
 #include <gdk/gdkprivate.h>
 #include <gdk/gdkx.h>
+#include <X11/extensions/Xrender.h>
 
 #include <gdk-pixbuf/gdk-pixbuf.h>
 #include <gdk-pixbuf/gdk-pixdata.h>
@@ -196,15 +197,16 @@
   g_assert (gdk_pixbuf_get_bits_per_sample (gr->drawbuf) == bits_per_sample);
   g_assert (gdk_pixbuf_get_n_channels (gr->drawbuf) == total_channels);
   
-  gr->surface = cairo_surface_create_for_image ((char *) gdk_pixbuf_get_pixels (gr->drawbuf), 
+  gr->surface = cairo_image_surface_create_for_data (gdk_pixbuf_get_pixels (gr->drawbuf), 
 						CAIRO_FORMAT_ARGB32, 
 						gdk_pixbuf_get_width (gr->drawbuf), 
 						gdk_pixbuf_get_height (gr->drawbuf), 
 						gdk_pixbuf_get_rowstride (gr->drawbuf));      
   g_assert (gr->surface != NULL);
-  g_assert (gr->cr != NULL);
   gr->mode = MODE_DRAWABLE_NO_RENDER;
-  cairo_set_target_surface (gr->cr, gr->surface);
+  if (gr->cr != NULL)
+    cairo_destroy (gr->cr);
+  gr->cr = cairo_create (gr->surface);
 }
 
 static void
@@ -228,13 +230,12 @@
   vis = gdk_x11_visual_get_xvisual (gdk_drawable_get_visual (gr->drawable));
   g_assert (vis != NULL);
   
-  gr->surface = cairo_xlib_surface_create (dpy, draw, vis, 
-					   CAIRO_FORMAT_ARGB32,
-					   DefaultColormap (dpy, DefaultScreen (dpy)));
+  gr->surface = cairo_xlib_surface_create (dpy, draw, vis, gr->width, gr->height);
   g_assert (gr->surface != NULL);
-  g_assert (gr->cr != NULL);
   gr->mode = MODE_DRAWABLE_WITH_RENDER;
-  cairo_set_target_surface (gr->cr, gr->surface);
+  if (gr->cr != NULL)
+    cairo_destroy (gr->cr);
+  gr->cr = cairo_create (gr->surface);
 }
 
 static void
@@ -272,15 +273,18 @@
       break;
 
     case MODE_JAVA_ARRAY:
-      gr->javabuf = (*env)->GetIntArrayElements (env, gr->jarray, &gr->isCopy);
-      gr->surface = cairo_surface_create_for_image ((char *) gr->javabuf, 
-						    CAIRO_FORMAT_ARGB32, 
-						    gr->width, 
-						    gr->height, 
-						    gr->width * 4);
-      g_assert(gr->surface != NULL);
-      g_assert(gr->cr != NULL);
-      cairo_set_target_surface (gr->cr, gr->surface);
+      {
+        jboolean isCopy;
+        gr->javabuf = (*env)->GetPrimitiveArrayCritical (env, gr->jarray, &isCopy);
+        gr->isCopy |= isCopy;
+        if (gr->isCopy)
+          {
+	    /* Make sure that the pixel buffer copy is already initalized,
+	       i.e. we already failed to get direct access in initState. */
+	    g_assert (gr->javabuf_copy != NULL);
+	    memcpy (gr->javabuf_copy, gr->javabuf, gr->width * gr->height * 4);
+	  }
+      }
       break;
     }
 }
@@ -319,13 +323,9 @@
       break;
       
     case MODE_JAVA_ARRAY:
-      /* 
-       * FIXME: Perhaps this should use the isCopy flag to try to avoid
-       * tearing down the cairo surface.
-       */
-      cairo_surface_destroy (gr->surface);
-      gr->surface = NULL;
-      (*env)->ReleaseIntArrayElements (env, gr->jarray, gr->javabuf, JNI_COMMIT);
+      if (gr->isCopy)
+	memcpy (gr->javabuf, gr->javabuf_copy, gr->width * gr->height * 4);
+      (*env)->ReleasePrimitiveArrayCritical (env, gr->jarray, gr->javabuf, JNI_COMMIT);
     }
 }
 
@@ -333,21 +333,14 @@
 static void 
 update_pattern_transform (struct graphics2d *gr)
 {
-  double a, b, c, d, tx, ty;
-  cairo_matrix_t *mat = NULL;
+  cairo_matrix_t mat;
 
   g_assert (gr != NULL);
   if (gr->pattern == NULL)
     return;
 
-  return;
-  /* temporarily disabled: ambiguous behavior */
-  /*   cairo_get_matrix (gr->cr, &a, &b, &c, &d, &tx, &ty); */
-  mat = cairo_matrix_create ();
-  g_assert (mat != NULL);
-  cairo_matrix_set_affine (mat, a, b, c, d, tx, ty);
-  cairo_pattern_set_matrix (gr->pattern, mat);
-  cairo_matrix_destroy (mat);
+  cairo_get_matrix (gr->cr, &mat);
+  cairo_pattern_set_matrix (gr->pattern, &mat);
 }
 
 static void
@@ -385,20 +378,32 @@
   g->debug = g_old->debug; 
   g->mode = g_old->mode;
 
+  g->width = g_old->width;
+  g->height = g_old->height;
+
   if (g_old->mode == MODE_JAVA_ARRAY)
     {
-      g->width = g_old->width;
-      g->height = g_old->height;
-      g->jarray = (*env)->NewGlobalRef(env, g_old->jarray);
+      jint size = g->width * g->height * 4;
+      
+      g->jarray = (*env)->NewGlobalRef (env, g_old->jarray);
+      g->javabuf = (*env)->GetIntArrayElements (env, g->jarray, &g->isCopy);
+      g->isCopy = JNI_TRUE;
+      g->javabuf_copy = (jint *) malloc (size);
+      memcpy (g->javabuf_copy, g->javabuf, size);
+      g->surface = cairo_image_surface_create_for_data ((unsigned char *) g->javabuf,
+						         CAIRO_FORMAT_ARGB32,
+						         g->width,
+						         g->height,
+						         g->width * 4);
+      g_assert (g->surface != NULL);
+      g->cr = cairo_create (g->surface);
+      g_assert (g->cr != NULL);
+      (*env)->ReleaseIntArrayElements (env, g->jarray, g->javabuf, JNI_ABORT);
     }
   else
     {
       g->drawable = g_old->drawable;
-
       g_object_ref (g->drawable);
-  
-      g->cr = cairo_create();
-      g_assert (g->cr != NULL);
 
       if (x_server_has_render_extension ())
 	init_graphics2d_as_renderable (g);
@@ -406,7 +411,8 @@
 	init_graphics2d_as_pixbuf (g);
     }
 
-  cairo_surface_set_filter (g->surface, CAIRO_FILTER_FAST);
+  if (g->pattern)
+    cairo_pattern_set_filter (g->pattern, CAIRO_FILTER_FAST);
 
   NSA_SET_G2D_PTR (env, obj, g);
   gdk_threads_leave();
@@ -418,6 +424,7 @@
 (JNIEnv *env, jobject obj, jintArray jarr, jint width, jint height)
 {
   struct graphics2d *gr;
+  jint *cairobuf;
 
   gdk_threads_enter();
   gr = (struct graphics2d *) malloc (sizeof (struct graphics2d));
@@ -428,13 +435,35 @@
 
   if (gr->debug) printf ("constructing java-backed image of size (%d,%d)\n",
 			 width, height);
-  
-  gr->cr = cairo_create();
-  g_assert (gr->cr != NULL);
 
   gr->width = width;
   gr->height = height;
   gr->jarray = (*env)->NewGlobalRef(env, jarr);
+  gr->javabuf = (*env)->GetPrimitiveArrayCritical (env, gr->jarray, &gr->isCopy);
+  if (gr->isCopy)
+    {
+      /* We didn't get direct access to the pixel buffer, so we'll have to
+         maintain a separate copy for Cairo. */
+      jint size = gr->width * gr->height * 4;
+      gr->javabuf_copy = (jint *) malloc (size);
+      memcpy (gr->javabuf_copy, gr->javabuf, size);
+      cairobuf = gr->javabuf_copy;
+    }
+  else
+    {
+      /* Have Cairo write directly to the Java array. */
+      cairobuf = gr->javabuf;
+    }
+  gr->surface = cairo_image_surface_create_for_data ((unsigned char *) cairobuf,
+						     CAIRO_FORMAT_ARGB32,
+						     gr->width,
+						     gr->height,
+						     gr->width * 4);
+  g_assert (gr->surface != NULL);
+  gr->cr = cairo_create (gr->surface);
+  g_assert (gr->cr != NULL);
+  (*env)->ReleasePrimitiveArrayCritical (env, gr->jarray, gr->javabuf, JNI_COMMIT);
+  
   gr->mode = MODE_JAVA_ARRAY;
 
   if (gr->debug) printf ("constructed java-backed image of size (%d,%d)\n",
@@ -464,8 +493,8 @@
 						 gdk_rgb_get_visual ()->depth);
   g_assert (gr->drawable != NULL);
 
-  gr->cr = cairo_create();
-  g_assert (gr->cr != NULL);
+  gr->width = width;
+  gr->height = height;
 
   if (x_server_has_render_extension ())
     init_graphics2d_as_renderable (gr);
@@ -484,7 +513,7 @@
 {
   struct graphics2d *src = NULL, *dst = NULL;
   gint s_height, s_width, d_height, d_width, height, width;
-  cairo_matrix_t *matrix;
+  cairo_matrix_t matrix;
   cairo_operator_t tmp_op;
 
   gdk_threads_enter();
@@ -505,19 +534,19 @@
   width = min (s_width, d_width);
   height = min (s_height, d_height);
 
-  matrix = cairo_matrix_create ();
-  cairo_surface_get_matrix (src->surface, matrix);
-  cairo_matrix_translate (matrix, (double)-x, (double)-y);
-  cairo_surface_set_matrix (src->surface, matrix);
-
-  tmp_op = cairo_current_operator (dst->cr); 
-  cairo_set_operator(dst->cr, CAIRO_OPERATOR_SRC); 
-  cairo_show_surface (dst->cr, src->surface, width, height);
+  cairo_get_matrix (src->cr, &matrix);
+  cairo_matrix_translate (&matrix, (double)-x, (double)-y); 
+  if (src->pattern)
+    cairo_pattern_set_matrix (src->pattern, &matrix); 
+  tmp_op = cairo_get_operator (dst->cr); 
+  cairo_set_operator(dst->cr, CAIRO_OPERATOR_SOURCE); 
+  cairo_set_source_surface (dst->cr, src->surface, 0, 0);
+  cairo_paint (dst->cr);
   cairo_set_operator(dst->cr, tmp_op);
 
-  cairo_matrix_translate (matrix, (double)x, (double)y);
-  cairo_surface_set_matrix (src->surface, matrix);
-  cairo_matrix_destroy (matrix);
+  cairo_matrix_translate (&matrix, (double)x, (double)y);
+  if (src->pattern)
+    cairo_pattern_set_matrix (src->pattern, &matrix);
 
   gdk_flush();
 
@@ -546,15 +575,15 @@
 
   check_for_debug (gr);
 
-  gr->cr = cairo_create();
-  g_assert (gr->cr != NULL);
-
   widget = GTK_WIDGET (ptr);
   g_assert (widget != NULL);
 
   grab_current_drawable (widget, &(gr->drawable), &(gr->win));
   g_assert (gr->drawable != NULL);
 
+  gr->width = widget->allocation.width;
+  gr->height = widget->allocation.height;
+
   if (x_server_has_render_extension ())
     init_graphics2d_as_renderable (gr);
   else
@@ -602,7 +631,8 @@
   if (gr->drawbuf)
     g_object_unref (gr->drawbuf); 
 
-  g_object_unref (gr->drawable);
+  if (gr->drawable)
+    g_object_unref (gr->drawable);
 
   if (gr->pattern)
     cairo_pattern_destroy (gr->pattern);
@@ -614,7 +644,11 @@
     free (gr->pattern_pixels);
 
   if (gr->mode == MODE_JAVA_ARRAY)
-    (*env)->DeleteGlobalRef(env, gr->jarray);
+    {
+      (*env)->DeleteGlobalRef (env, gr->jarray);
+      if (gr->javabuf_copy)
+        free (gr->javabuf_copy);
+    }
 
   if (gr->debug) printf ("disposed of graphics2d\n");
 
@@ -634,7 +668,8 @@
 {
   struct graphics2d *gr = NULL;
   cairo_surface_t *surf = NULL;
-  cairo_matrix_t *mat = NULL;
+  cairo_t *cr2 = NULL;
+  cairo_matrix_t mat;
   gr = (struct graphics2d *) NSA_GET_G2D_PTR (env, obj);
   g_assert (gr != NULL);
 
@@ -646,38 +681,32 @@
 			 r1, g1, b1, a1, 
 			 r2, g2, b2, a2);
   
-  cairo_save (gr->cr);
-  
   if (cyclic)
     surf = cairo_surface_create_similar (gr->surface, CAIRO_FORMAT_ARGB32, 3, 2);
   else
     surf = cairo_surface_create_similar (gr->surface, CAIRO_FORMAT_ARGB32, 2, 2);      
   g_assert (surf != NULL);
 
-  cairo_set_target_surface (gr->cr, surf);
+  cr2 = cairo_create (surf);
   
-  cairo_identity_matrix (gr->cr);
+  cairo_identity_matrix (cr2);
 
-  cairo_set_rgb_color (gr->cr, r1 / 255.0, g1 / 255.0, b1 / 255.0);
-  cairo_set_alpha (gr->cr, a1 / 255.0);
-  cairo_rectangle (gr->cr, 0, 0, 1, 2);
-  cairo_fill (gr->cr);
+  cairo_set_source_rgba (cr2, r1 / 255.0, g1 / 255.0, b1 / 255.0, a1 / 255.0);
+  cairo_rectangle (cr2, 0, 0, 1, 2);
+  cairo_fill (cr2);
     
-  cairo_set_rgb_color (gr->cr, r2 / 255.0, g2 / 255.0, b2 / 255.0);
-  cairo_set_alpha (gr->cr, a2 / 255.0);
-  cairo_rectangle (gr->cr, 1, 0, 1, 2);
-  cairo_fill (gr->cr);
+  cairo_set_source_rgba (cr2, r2 / 255.0, g2 / 255.0, b2 / 255.0, a2 / 255.0);
+  cairo_rectangle (cr2, 1, 0, 1, 2);
+  cairo_fill (cr2);
 
   if (cyclic)
     {
-      cairo_set_rgb_color (gr->cr, r1 / 255.0, g1 / 255.0, b1 / 255.0);
-      cairo_set_alpha (gr->cr, a1 / 255.0);
-      cairo_rectangle (gr->cr, 2, 0, 1, 2);
-      cairo_fill (gr->cr);
+      cairo_set_source_rgba (cr2, r1 / 255.0, g1 / 255.0, b1 / 255.0, a1 / 255.0);
+      cairo_rectangle (cr2, 2, 0, 1, 2);
+      cairo_fill (cr2);
     }
 
-  mat = cairo_matrix_create ();
-  g_assert (mat != NULL);
+  cairo_matrix_init_identity (&mat);
 
   /* 
      consider the vector [x2 - x1, y2 - y1] = [p,q]
@@ -716,15 +745,16 @@
     double c = (y2 - y1 == 0.) ? 0. : (1. / (y2 - y1));
     double dx = (x1 == 0.) ? 0. : 1. / x1;
     double dy = (y1 == 0.) ? 0. : 1. / y1;
+    cairo_pattern_t *p;
     
-    cairo_matrix_set_affine (mat,
-			     a, 0.,
-			     c, 0.,
-			     dx, dy);
+    cairo_matrix_init (&mat,
+                       a, 0.,
+                       c, 0.,
+                       dx, dy);
     
-    cairo_surface_set_matrix (surf, mat);
-    cairo_matrix_destroy (mat);
-    cairo_surface_set_filter (surf, CAIRO_FILTER_BILINEAR);
+    p = cairo_pattern_create_for_surface (surf);
+    cairo_pattern_set_matrix (p, &mat);
+    cairo_pattern_set_filter (p, CAIRO_FILTER_BILINEAR);
   }
 
   /* FIXME: repeating gradients (not to mention hold gradients) don't seem to work. */
@@ -743,8 +773,7 @@
   gr->pattern_surface = surf;  
   gr->pattern = cairo_pattern_create_for_surface(surf);
 
-  cairo_restore (gr->cr);    
-  cairo_set_pattern (gr->cr, gr->pattern);
+  cairo_set_source (gr->cr, gr->pattern);
   gdk_threads_leave();
 }
 
@@ -784,14 +813,14 @@
   memcpy (gr->pattern_pixels, jpixels, h * stride * 4);
   (*env)->ReleaseIntArrayElements (env, jarr, jpixels, 0);
 
-  gr->pattern_surface = cairo_surface_create_for_image (gr->pattern_pixels, 
+  gr->pattern_surface = cairo_image_surface_create_for_data ((unsigned char *)gr->pattern_pixels, 
 							CAIRO_FORMAT_ARGB32, 
 							w, h, stride * 4);
   g_assert (gr->pattern_surface != NULL);
-  cairo_surface_set_repeat (gr->pattern_surface, 1);
+  cairo_pattern_set_extend (gr->pattern, 1);
   gr->pattern = cairo_pattern_create_for_surface (gr->pattern_surface);
   g_assert (gr->pattern != NULL);
-  cairo_set_pattern (gr->cr, gr->pattern);
+  cairo_set_source (gr->cr, gr->pattern);
   gdk_threads_leave();
 }
 
@@ -822,19 +851,24 @@
   begin_drawing_operation (env, gr);
   
  {
-   cairo_matrix_t *mat = NULL;
-   cairo_surface_t *surf = cairo_surface_create_for_image ((char *)native_pixels, 
+   cairo_matrix_t mat;
+   cairo_pattern_t *p;
+   cairo_surface_t *surf = cairo_image_surface_create_for_data ((unsigned char *)native_pixels, 
 							   CAIRO_FORMAT_ARGB32, 
 							   w, h, stride * 4);   
-   mat = cairo_matrix_create ();
-   cairo_matrix_set_affine (mat, 
-			    native_matrix[0], native_matrix[1],
-			    native_matrix[2], native_matrix[3],
-			    native_matrix[4], native_matrix[5]);
-   cairo_surface_set_matrix (surf, mat);
-   cairo_surface_set_filter (surf, cairo_surface_get_filter(gr->surface));
-   cairo_show_surface (gr->cr, surf, w, h);
-   cairo_matrix_destroy (mat);
+   cairo_matrix_init_identity (&mat);
+   cairo_matrix_init (&mat, 
+                      native_matrix[0], native_matrix[1],
+                      native_matrix[2], native_matrix[3],
+                      native_matrix[4], native_matrix[5]);
+
+   p = cairo_pattern_create_for_surface (surf);
+   cairo_pattern_set_matrix (p, &mat);
+   if (gr->pattern)
+     cairo_pattern_set_filter (p, cairo_pattern_get_filter (gr->pattern));
+   cairo_set_source (gr->cr, p);
+   cairo_paint (gr->cr);
+   cairo_pattern_destroy (p);
    cairo_surface_destroy (surf);
  }
   
@@ -906,13 +940,14 @@
 			 native_matrix[4], native_matrix[5]);
 
   {
-    cairo_matrix_t * mat = cairo_matrix_create ();
-    cairo_matrix_set_affine (mat, 
-			     native_matrix[0], native_matrix[1],
-			     native_matrix[2], native_matrix[3],
-			     native_matrix[4], native_matrix[5]);
-    cairo_set_matrix (gr->cr, mat);
-    cairo_matrix_destroy (mat);
+    cairo_matrix_t mat;
+
+    cairo_matrix_init_identity (&mat);
+    cairo_matrix_init (&mat, 
+                       native_matrix[0], native_matrix[1],
+                       native_matrix[2], native_matrix[3],
+                       native_matrix[4], native_matrix[5]);
+    cairo_set_matrix (gr->cr, &mat);
   }
 
   (*env)->ReleaseDoubleArrayElements (env, java_matrix, native_matrix, 0);
@@ -925,7 +960,7 @@
 		  struct peerfont *pfont,
 		  int debug)
 {
-  cairo_font_t *ft;
+  cairo_font_face_t *ft;
   FT_Face face = NULL;
 
   g_assert(cr != NULL);
@@ -936,7 +971,7 @@
       face = pango_ft2_font_get_face (pfont->font);
       g_assert (face != NULL);
       
-      ft = cairo_ft_font_create_for_ft_face (face);
+      ft = cairo_ft_font_face_create_for_ft_face (face, 0);
       g_assert (ft != NULL);
       
       if (debug) printf ("install_font_peer made new cairo font for '%s' at %f\n", 
@@ -944,19 +979,19 @@
 			 (pango_font_description_get_size (pfont->desc) / 
 			  (double)PANGO_SCALE));
     
-      cairo_set_font (cr, ft); 
-      cairo_font_destroy (ft);
-      cairo_scale_font (cr, 
+      cairo_set_font_face (cr, ft); 
+      cairo_font_face_destroy (ft);
+      cairo_set_font_size (cr, 
 			(pango_font_description_get_size (pfont->desc) / 
 			 (double)PANGO_SCALE));
-      ft = cairo_current_font (cr);
+      ft = cairo_get_font_face (cr);
       pfont->graphics_resource = ft;
     }
   else
     {
       if (debug) printf ("install_font_peer reused existing font resource\n");
-      ft = (cairo_font_t *) pfont->graphics_resource;
-      cairo_set_font (cr, ft);       
+      ft = (cairo_font_face_t *) pfont->graphics_resource;
+      cairo_set_font_face (cr, ft);       
     }
 }
 
@@ -974,7 +1009,7 @@
   g_assert (pfont != NULL);
   if (pfont->graphics_resource != NULL)
     {
-      cairo_font_destroy ((cairo_font_t *) pfont->graphics_resource);
+      cairo_font_face_destroy ((cairo_font_face_t *) pfont->graphics_resource);
       pfont->graphics_resource = NULL;
     }
   gdk_threads_leave();
@@ -1164,7 +1199,7 @@
       break;
       
     case java_awt_alpha_composite_SRC: 
-      cairo_set_operator (gr->cr, CAIRO_OPERATOR_SRC);
+      cairo_set_operator (gr->cr, CAIRO_OPERATOR_SOURCE);
       break;
       
     case java_awt_alpha_composite_SRC_OVER: 
@@ -1172,7 +1207,7 @@
       break;
 
     case java_awt_alpha_composite_DST_OVER: 
-      cairo_set_operator (gr->cr, CAIRO_OPERATOR_OVER_REVERSE);
+      cairo_set_operator (gr->cr, CAIRO_OPERATOR_DEST_OVER);
       break;
 
     case java_awt_alpha_composite_SRC_IN: 
@@ -1180,7 +1215,7 @@
       break;
 
     case java_awt_alpha_composite_DST_IN: 
-      cairo_set_operator (gr->cr, CAIRO_OPERATOR_IN_REVERSE);
+      cairo_set_operator (gr->cr, CAIRO_OPERATOR_DEST_IN);
       break;
 
     case java_awt_alpha_composite_SRC_OUT: 
@@ -1188,11 +1223,11 @@
       break;
 
     case java_awt_alpha_composite_DST_OUT: 
-      cairo_set_operator (gr->cr, CAIRO_OPERATOR_OUT_REVERSE);
+      cairo_set_operator (gr->cr, CAIRO_OPERATOR_DEST_OUT);
       break;
 
     case java_awt_alpha_composite_DST: 
-      cairo_set_operator (gr->cr, CAIRO_OPERATOR_DST);
+      cairo_set_operator (gr->cr, CAIRO_OPERATOR_DEST);
       break;
 
     case java_awt_alpha_composite_SRC_ATOP: 
@@ -1200,7 +1235,7 @@
       break;
 
     case java_awt_alpha_composite_DST_ATOP: 
-      cairo_set_operator (gr->cr, CAIRO_OPERATOR_ATOP_REVERSE);
+      cairo_set_operator (gr->cr, CAIRO_OPERATOR_DEST_ATOP);
       break;
 
     case java_awt_alpha_composite_XOR: 
@@ -1211,8 +1246,8 @@
 }
 
 JNIEXPORT void JNICALL
-Java_gnu_java_awt_peer_gtk_GdkGraphics2D_cairoSetRGBColor 
-   (JNIEnv *env, jobject obj, jdouble r, jdouble g, jdouble b)
+Java_gnu_java_awt_peer_gtk_GdkGraphics2D_cairoSetRGBAColor 
+   (JNIEnv *env, jobject obj, jdouble r, jdouble g, jdouble b, jdouble a)
 {
   struct graphics2d *gr = NULL;
 
@@ -1227,29 +1262,13 @@
      draw to a PixBuf, you must exchange the R and B components of your
      color. */
 
-  if (gr->debug) printf ("cairo_set_rgb_color (%f, %f, %f)\n", r, g, b);
+  if (gr->debug) printf ("cairo_set_source_rgb (%f, %f, %f)\n", r, g, b);
 
   if (gr->drawbuf)
-    cairo_set_rgb_color (gr->cr, b, g, r);
+    cairo_set_source_rgba (gr->cr, b, g, r, a);
   else
-    cairo_set_rgb_color (gr->cr, r, g, b);
-
-  gdk_threads_leave();
-}
-
-JNIEXPORT void JNICALL
-Java_gnu_java_awt_peer_gtk_GdkGraphics2D_cairoSetAlpha 
-   (JNIEnv *env, jobject obj, jdouble a)
-{
-  struct graphics2d *gr = NULL;
+    cairo_set_source_rgba (gr->cr, r, g, b, a);
 
-  gdk_threads_enter();
-  if (peer_is_disposed(env, obj)) { gdk_threads_leave(); return; }
-
-  gr = (struct graphics2d *) NSA_GET_G2D_PTR (env, obj);
-  g_assert (gr != NULL);
-  if (gr->debug) printf ("cairo_set_alpha %f\n", a);  
-  cairo_set_alpha (gr->cr, a);
   gdk_threads_leave();
 }
 
@@ -1581,7 +1600,7 @@
   if (gr == NULL) { gdk_threads_leave (); return; }
   if (gr->debug) printf ("cairo_clip\n");
   begin_drawing_operation (env, gr);
-  cairo_init_clip (gr->cr);
+  cairo_reset_clip (gr->cr);
   cairo_clip (gr->cr);
   end_drawing_operation (env, gr);
   gdk_threads_leave();
@@ -1602,19 +1621,19 @@
    switch ((enum java_awt_rendering_hints_filter) filter)
      {
      case java_awt_rendering_hints_VALUE_INTERPOLATION_NEAREST_NEIGHBOR:
-       cairo_surface_set_filter (gr->surface, CAIRO_FILTER_NEAREST);
+       cairo_pattern_set_filter (gr->pattern, CAIRO_FILTER_NEAREST);
        break;
      case java_awt_rendering_hints_VALUE_INTERPOLATION_BILINEAR:
-       cairo_surface_set_filter (gr->surface, CAIRO_FILTER_BILINEAR);
+       cairo_pattern_set_filter (gr->pattern, CAIRO_FILTER_BILINEAR);
        break; 
      case java_awt_rendering_hints_VALUE_ALPHA_INTERPOLATION_SPEED:
-       cairo_surface_set_filter (gr->surface, CAIRO_FILTER_FAST);
+       cairo_pattern_set_filter (gr->pattern, CAIRO_FILTER_FAST);
        break;
      case java_awt_rendering_hints_VALUE_ALPHA_INTERPOLATION_DEFAULT:
-       cairo_surface_set_filter (gr->surface, CAIRO_FILTER_NEAREST);
+       cairo_pattern_set_filter (gr->pattern, CAIRO_FILTER_NEAREST);
        break;
      case java_awt_rendering_hints_VALUE_ALPHA_INTERPOLATION_QUALITY:
-       cairo_surface_set_filter (gr->surface, CAIRO_FILTER_BEST);
+       cairo_pattern_set_filter (gr->pattern, CAIRO_FILTER_BEST);
        break;
      }
    gdk_threads_leave();
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphicsEnvironment.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphicsEnvironment.c,v
retrieving revision 1.2
diff -u -r1.2 gnu_java_awt_peer_gtk_GdkGraphicsEnvironment.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphicsEnvironment.c	30 Nov 2004 23:59:12 -0000	1.2
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkGraphicsEnvironment.c	9 Jul 2005 22:10:21 -0000
@@ -15,8 +15,8 @@
 
    You should have received a copy of the GNU General Public License
    along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
+   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+   02110-1301 USA.
 
    Linking this library statically or dynamically with other modules is
    making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkPixbufDecoder.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkPixbufDecoder.c,v
retrieving revision 1.7
diff -u -r1.7 gnu_java_awt_peer_gtk_GdkPixbufDecoder.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkPixbufDecoder.c	16 Feb 2005 20:03:21 -0000	1.7
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkPixbufDecoder.c	9 Jul 2005 22:10:22 -0000
@@ -1,5 +1,5 @@
 /* gdkpixbufdecoder.c
-   Copyright (C) 1999, 2003, 2004 Free Software Foundation, Inc.
+   Copyright (C) 1999, 2003, 2004, 2005 Free Software Foundation, Inc.
 
    This file is part of GNU Classpath.
    
@@ -15,8 +15,8 @@
    
    You should have received a copy of the GNU General Public License
    along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
+   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+   02110-1301 USA.
    
    Linking this library statically or dynamically with other modules is
    making a combined work based on this library.  Thus, the terms and
@@ -154,6 +154,7 @@
 			  (jint) width, (jint) height,
 			  jpixels,
 			  stride_pixels);
+  (*env)->DeleteLocalRef(env, jpixels);
   gdk_threads_enter ();
 }
 
@@ -206,6 +207,7 @@
   jclass formatClass;
   jmethodID addExtensionID;
   jmethodID addMimeTypeID;
+  jobject string;
 
   formatClass = (*env)->FindClass
     (env, "gnu/java/awt/peer/gtk/GdkPixbufDecoder$ImageFormatSpec");
@@ -227,26 +229,33 @@
       format = (GdkPixbufFormat *) f->data;
       name = gdk_pixbuf_format_get_name(format);
 
+      string = (*env)->NewStringUTF(env, name);
+      g_assert(string != NULL);
+
       jformat = (*env)->CallStaticObjectMethod 
-	(env, clazz, registerFormatID, 				    
-	 (*env)->NewStringUTF(env, name),
+	(env, clazz, registerFormatID, string,
 	 (jboolean) gdk_pixbuf_format_is_writable(format));
+      (*env)->DeleteLocalRef(env, string);
 
       g_assert(jformat != NULL);
       
       ch = gdk_pixbuf_format_get_extensions(format);
       while (*ch)
 	{
-	  (*env)->CallVoidMethod (env, jformat, addExtensionID, 
-				  (*env)->NewStringUTF(env, *ch)); 
+	  string = (*env)->NewStringUTF(env, *ch);
+	  g_assert(string != NULL);
+	  (*env)->CallVoidMethod (env, jformat, addExtensionID, string);
+	  (*env)->DeleteLocalRef(env, string);
 	  ++ch;
 	}
       
       ch = gdk_pixbuf_format_get_mime_types(format);
       while (*ch)
 	{
-	  (*env)->CallVoidMethod (env, jformat, addMimeTypeID, 
-				  (*env)->NewStringUTF(env, *ch)); 
+	  string = (*env)->NewStringUTF(env, *ch);
+	  g_assert(string != NULL);
+	  (*env)->CallVoidMethod (env, jformat, addMimeTypeID, string);
+	  (*env)->DeleteLocalRef(env, string);
 	  ++ch;
 	}
     }
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkRobotPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkRobotPeer.c,v
retrieving revision 1.2
diff -u -r1.2 gnu_java_awt_peer_gtk_GdkRobotPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkRobotPeer.c	16 Feb 2005 20:03:21 -0000	1.2
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkRobotPeer.c	9 Jul 2005 22:10:22 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkTextLayout.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkTextLayout.c,v
retrieving revision 1.2
diff -u -r1.2 gnu_java_awt_peer_gtk_GdkTextLayout.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkTextLayout.c	30 Nov 2004 23:59:12 -0000	1.2
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GdkTextLayout.c	9 Jul 2005 22:10:22 -0000
@@ -15,8 +15,8 @@
    
    You should have received a copy of the GNU General Public License
    along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
+   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+   02110-1301 USA.
    
    Linking this library statically or dynamically with other modules is
    making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.c,v
retrieving revision 1.13
diff -u -r1.13 gnu_java_awt_peer_gtk_GtkButtonPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.c	16 Feb 2005 20:03:21 -0000	1.13
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkButtonPeer.c	9 Jul 2005 22:10:22 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCanvasPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCanvasPeer.c,v
retrieving revision 1.4
diff -u -r1.4 gnu_java_awt_peer_gtk_GtkCanvasPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCanvasPeer.c	30 Nov 2004 23:59:12 -0000	1.4
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCanvasPeer.c	9 Jul 2005 22:10:22 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxGroupPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxGroupPeer.c,v
retrieving revision 1.2
diff -u -r1.2 gnu_java_awt_peer_gtk_GtkCheckboxGroupPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxGroupPeer.c	30 Nov 2004 23:59:12 -0000	1.2
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxGroupPeer.c	9 Jul 2005 22:10:22 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c,v
retrieving revision 1.4
diff -u -r1.4 gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c	30 Nov 2004 23:59:12 -0000	1.4
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxMenuItemPeer.c	9 Jul 2005 22:10:22 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.c,v
retrieving revision 1.11
diff -u -r1.11 gnu_java_awt_peer_gtk_GtkCheckboxPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.c	16 Feb 2005 20:03:22 -0000	1.11
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkCheckboxPeer.c	9 Jul 2005 22:10:22 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c,v
retrieving revision 1.10
diff -u -r1.10 gnu_java_awt_peer_gtk_GtkChoicePeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c	16 Feb 2005 20:03:22 -0000	1.10
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkChoicePeer.c	9 Jul 2005 22:10:22 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkClipboard.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkClipboard.c,v
retrieving revision 1.5
diff -u -r1.5 gnu_java_awt_peer_gtk_GtkClipboard.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkClipboard.c	16 Feb 2005 20:03:22 -0000	1.5
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkClipboard.c	9 Jul 2005 22:10:22 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c,v
retrieving revision 1.30
diff -u -r1.30 gnu_java_awt_peer_gtk_GtkComponentPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c	16 Feb 2005 20:03:23 -0000	1.30
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkComponentPeer.c	9 Jul 2005 22:10:22 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c,v
retrieving revision 1.6
diff -u -r1.6 gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c	30 Nov 2004 23:59:12 -0000	1.6
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEmbeddedWindowPeer.c	9 Jul 2005 22:10:22 -0000
@@ -16,8 +16,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c,v
retrieving revision 1.27
diff -u -r1.27 gnu_java_awt_peer_gtk_GtkEvents.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c	22 Feb 2005 04:50:29 -0000	1.27
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkEvents.c	9 Jul 2005 22:10:22 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c,v
retrieving revision 1.11
diff -u -r1.11 gnu_java_awt_peer_gtk_GtkFileDialogPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c	16 Feb 2005 20:03:24 -0000	1.11
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c	9 Jul 2005 22:10:22 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFramePeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFramePeer.c,v
retrieving revision 1.3
diff -u -r1.3 gnu_java_awt_peer_gtk_GtkFramePeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFramePeer.c	16 Feb 2005 20:03:24 -0000	1.3
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFramePeer.c	9 Jul 2005 22:10:22 -0000
@@ -15,8 +15,8 @@
 
    You should have received a copy of the GNU General Public License
    along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
+   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+   02110-1301 USA.
 
    Linking this library statically or dynamically with other modules is
    making a combined work based on this library.  Thus, the terms and
@@ -38,6 +38,10 @@
 #include "gtkpeer.h"
 #include "gnu_java_awt_peer_gtk_GtkFramePeer.h"
 
+/* lives in GtkImage.c */
+GdkPixbuf *gnu_java_awt_peer_gtk_GtkImage_getPixbuf(JNIEnv *env, jobject obj);
+jboolean gnu_java_awt_peer_gtk_GtkImage_isOffScreen(JNIEnv *env, jobject obj);
+
 JNIEXPORT void JNICALL
 Java_gnu_java_awt_peer_gtk_GtkFramePeer_removeMenuBarPeer
   (JNIEnv *env, jobject obj)
@@ -156,68 +160,26 @@
 }
 
 JNIEXPORT void JNICALL
-Java_gnu_java_awt_peer_gtk_GtkFramePeer_nativeSetIconImageFromDecoder
-  (JNIEnv *env, jobject obj, jobject decoder)
+Java_gnu_java_awt_peer_gtk_GtkFramePeer_nativeSetIconImage
+  (JNIEnv *env, jobject obj, jobject gtkimage)
 {
   void *ptr;
-  GdkPixbufLoader *loader = NULL;
-  GdkPixbuf *pixbuf = NULL;
-
-  ptr = NSA_GET_PTR (env, obj);
-
-  loader = NSA_GET_PB_PTR (env, decoder);
-  g_assert (loader != NULL);
+  GdkPixbuf *pixbuf = gnu_java_awt_peer_gtk_GtkImage_getPixbuf(env, gtkimage);
 
-  gdk_threads_enter ();
-
-  pixbuf = gdk_pixbuf_loader_get_pixbuf (loader);
   g_assert (pixbuf != NULL);
 
-  gtk_window_set_icon (GTK_WINDOW (ptr), pixbuf);
-
-  gdk_threads_leave ();
-}
-
-static void
-free_pixbuf_data (guchar *pixels, gpointer data __attribute__((unused)))
-{
-  free(pixels);
-}
-
-JNIEXPORT void JNICALL
-Java_gnu_java_awt_peer_gtk_GtkFramePeer_nativeSetIconImageFromData
-  (JNIEnv *env, jobject obj, jintArray pixelArray, jint width, jint height)
-{
-  void *ptr;
-  GdkPixbuf *pixbuf;
-  jint *pixels;
-  int pixels_length, i;
-  guchar *data;
-
   ptr = NSA_GET_PTR (env, obj);
 
-  pixels = (*env)->GetIntArrayElements (env, pixelArray, 0);
-  pixels_length = (*env)->GetArrayLength (env, pixelArray);
-
-  data = malloc (sizeof (guchar) * pixels_length);
-  for (i = 0; i < pixels_length; i++)
-    data[i] = (guchar) pixels[i];
-
   gdk_threads_enter ();
 
-  pixbuf = gdk_pixbuf_new_from_data (data,
-                                     GDK_COLORSPACE_RGB,
-                                     TRUE,
-                                     8,
-                                     width,
-                                     height,
-                                     width*4,
-                                     free_pixbuf_data,
-                                     NULL);
-
   gtk_window_set_icon (GTK_WINDOW (ptr), pixbuf);
 
-  gdk_threads_leave ();
+  /* if the GtkImage is offscreen, this is a temporary pixbuf which should 
+   be thrown out. */
+  if(gnu_java_awt_peer_gtk_GtkImage_isOffScreen(env, gtkimage) == JNI_TRUE)
+    gdk_pixbuf_unref (pixbuf);
 
-  (*env)->ReleaseIntArrayElements(env, pixelArray, pixels, 0);
+  gdk_threads_leave ();
 }
+
+
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkGenericPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkGenericPeer.c,v
retrieving revision 1.3
diff -u -r1.3 gnu_java_awt_peer_gtk_GtkGenericPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkGenericPeer.c	16 Feb 2005 20:03:25 -0000	1.3
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkGenericPeer.c	9 Jul 2005 22:10:22 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImage.c
===================================================================
RCS file: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImage.c
diff -N libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImage.c
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImage.c	9 Jul 2005 22:10:22 -0000
@@ -0,0 +1,610 @@
+/* gtkimage.c
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+#include "gtkpeer.h"
+#include "gnu_java_awt_peer_gtk_GtkImage.h"
+#include <gdk-pixbuf/gdk-pixbuf.h>
+
+/* The constant fields in java.awt.Image */   
+#define SCALE_DEFAULT      1
+#define SCALE_FAST         2
+#define SCALE_SMOOTH       4
+#define SCALE_REPLICATE    8 
+#define SCALE_AREA_AVERAGING  16
+
+/* functions used by other gtk peer native routines */
+GdkPixbuf *gnu_java_awt_peer_gtk_GtkImage_getPixbuf(JNIEnv *env, jobject obj);
+GdkPixmap *gnu_java_awt_peer_gtk_GtkImage_getPixmap(JNIEnv *env, jobject obj);
+jboolean gnu_java_awt_peer_gtk_GtkImage_isOffScreen(JNIEnv *env, jobject obj);
+
+/* local stuff */
+static GdkInterpType mapHints(jint hints);
+static jboolean offScreen (JNIEnv * env, jobject obj);
+static void *getData (JNIEnv * env, jobject obj);
+static void createRawData (JNIEnv * env, jobject obj, void *ptr);
+static void setWidthHeight (JNIEnv * env, jobject obj, int width, int height);
+
+/**
+ * Loads a pixmap from a file.
+ */
+JNIEXPORT jboolean JNICALL
+Java_gnu_java_awt_peer_gtk_GtkImage_loadPixbuf
+  (JNIEnv *env, jobject obj, jstring name)
+{
+  const char *filename;
+  int width, height;
+  GdkPixbuf *pixbuf;
+
+  /* Don't use the JCL convert function because it throws an exception
+     on failure */
+  filename = (*env)->GetStringUTFChars (env, name, 0);
+
+  if (filename == NULL)
+    return JNI_FALSE;
+
+  gdk_threads_enter ();
+
+  pixbuf = gdk_pixbuf_new_from_file (filename, NULL);
+  if (pixbuf == NULL)
+    {
+      gdk_threads_leave ();
+      (*env)->ReleaseStringUTFChars (env, name, filename);
+      return JNI_FALSE;
+    }
+
+  width =  gdk_pixbuf_get_width (pixbuf);
+  height = gdk_pixbuf_get_height (pixbuf);
+  gdk_threads_leave ();
+  
+  createRawData (env, obj, pixbuf);
+  setWidthHeight(env, obj, width, height);
+  (*env)->ReleaseStringUTFChars (env, name, filename);
+  return JNI_TRUE;
+}
+
+/**
+ * Returns a copy of the pixel data as a java array.
+ */
+JNIEXPORT jintArray JNICALL 
+Java_gnu_java_awt_peer_gtk_GtkImage_getPixels(JNIEnv *env, jobject obj)
+{
+  GdkPixbuf *pixbuf;
+  int width, height, rowstride;
+  guchar *pixeldata;
+  jintArray result_array;
+  jint *result_array_iter, *dst;
+  int i,j;
+
+  gdk_threads_enter ();
+
+  pixbuf = gnu_java_awt_peer_gtk_GtkImage_getPixbuf(env, obj);
+  width =  gdk_pixbuf_get_width (pixbuf);
+  height = gdk_pixbuf_get_height (pixbuf);
+  rowstride = gdk_pixbuf_get_rowstride (pixbuf);
+
+  result_array = (*env)->NewIntArray (env, (width * height));
+  dst = result_array_iter = 
+    (*env)->GetIntArrayElements (env, result_array, NULL);
+
+  pixeldata = gdk_pixbuf_get_pixels (pixbuf);
+
+  /* FIXME: handle more bit depths here? */
+  g_assert (gdk_pixbuf_get_bits_per_sample (pixbuf) == 8);
+
+  if (gdk_pixbuf_get_has_alpha (pixbuf))
+    {
+      for(i = 0 ; i < height; i++)
+	{
+	  memcpy(dst, (void *)pixeldata, width * 4);
+	  dst += width;
+	  pixeldata += rowstride;
+	}
+    } else {
+      for(i = 0; i < height; i++)
+	{
+	  for(j = 0; j < width; j++)
+	    dst[j] = 0xFF000000 |
+	      (pixeldata[j*3 + 2] & 0xFF) << 16 |
+	      (pixeldata[j*3 + 1] & 0xFF) << 8 |
+	      (pixeldata[j*3] & 0xFF);
+	  dst += width;
+	  pixeldata += rowstride;
+	}
+    }
+  
+  if (offScreen (env, obj) == JNI_TRUE)
+    gdk_pixbuf_unref (pixbuf);
+    
+  gdk_threads_leave ();
+
+  (*env)->ReleaseIntArrayElements (env, result_array, result_array_iter, 0);
+  return result_array;
+}
+
+/**
+ * Returns a copy of the pixel data as a java array.
+ * (GdkPixbuf only)
+ */
+JNIEXPORT void JNICALL 
+Java_gnu_java_awt_peer_gtk_GtkImage_setPixels(JNIEnv *env, jobject obj,
+					      jintArray pixels)
+{
+  GdkPixbuf *pixbuf = (GdkPixbuf *)getData (env, obj);
+  int width, height, rowstride;
+  guchar *pixeldata;
+  jint *src_array_iter, *src;
+  int i;
+
+  gdk_threads_enter ();
+
+  width =  gdk_pixbuf_get_width (pixbuf);
+  height = gdk_pixbuf_get_height (pixbuf);
+  rowstride = gdk_pixbuf_get_rowstride (pixbuf);
+
+  src = src_array_iter = 
+    (*env)->GetIntArrayElements (env, pixels, NULL);
+
+  pixeldata = gdk_pixbuf_get_pixels (pixbuf);
+  for(i = 0 ; i < height; i++)
+    {
+      memcpy((void *)pixeldata, (void *)src, width * 4);
+      src += width;
+      pixeldata += rowstride;
+    }
+
+  gdk_threads_leave ();
+
+  (*env)->ReleaseIntArrayElements (env, pixels, src_array_iter, 0);
+}
+
+/**
+ * Allocates a Gtk Pixbuf or Pixmap.
+ */
+JNIEXPORT void JNICALL
+Java_gnu_java_awt_peer_gtk_GtkImage_createPixmap(JNIEnv *env, jobject obj)
+{
+  int width, height;
+  jclass cls;
+  jfieldID field;
+
+  cls = (*env)->GetObjectClass (env, obj);
+  field = (*env)->GetFieldID (env, cls, "width", "I");
+  g_assert (field != 0);
+  width = (*env)->GetIntField (env, obj, field);
+
+  field = (*env)->GetFieldID (env, cls, "height", "I");
+  g_assert (field != 0);
+  height = (*env)->GetIntField (env, obj, field);
+
+  gdk_threads_enter ();
+  if (offScreen (env, obj) == JNI_FALSE)
+    createRawData (env, obj, gdk_pixbuf_new (GDK_COLORSPACE_RGB, 
+					     TRUE,
+					     8,
+					     width,
+					     height));
+  else
+    createRawData (env, obj, gdk_pixmap_new (NULL, width, height,
+					     gdk_rgb_get_visual ()->depth));
+
+  gdk_threads_leave ();
+}
+
+/**
+ * Frees the Gtk Pixmap.
+ */
+JNIEXPORT void JNICALL
+Java_gnu_java_awt_peer_gtk_GtkImage_freePixmap(JNIEnv *env, jobject obj)
+{
+  gdk_threads_enter ();
+  if (offScreen (env, obj) == JNI_FALSE)
+    gdk_pixbuf_unref ((GdkPixbuf *)getData (env, obj));
+  else
+    gdk_pixmap_unref ((GdkPixmap *)getData (env, obj));
+
+  gdk_threads_leave ();
+}
+
+/**
+ * Sets this pixmap to a scaled version of the source pixmap.
+ * width and height of the destination GtkImage must be set.
+ */
+JNIEXPORT void JNICALL 
+Java_gnu_java_awt_peer_gtk_GtkImage_createScaledPixmap(JNIEnv *env, 
+						       jobject destination, 
+						       jobject source,
+						       jint hints)
+{
+  GdkPixbuf* dst;
+  int width, height;
+  jclass cls;
+  jfieldID field;
+
+  GdkPixbuf *pixbuf;
+
+  cls = (*env)->GetObjectClass (env, destination);
+  field = (*env)->GetFieldID (env, cls, "width", "I");
+  g_assert (field != 0);
+  width = (*env)->GetIntField (env, destination, field);
+
+  field = (*env)->GetFieldID (env, cls, "height", "I");
+  g_assert (field != 0);
+  height = (*env)->GetIntField (env, destination, field);
+
+  gdk_threads_enter ();
+
+  pixbuf = gnu_java_awt_peer_gtk_GtkImage_getPixbuf(env, source);
+
+  dst = gdk_pixbuf_scale_simple(pixbuf,
+				width, height,
+				mapHints(hints));
+
+  if (offScreen (env, source) == JNI_TRUE)
+      gdk_pixbuf_unref (pixbuf);
+
+  gdk_threads_leave ();
+
+  createRawData (env, destination, (void *)dst);
+}
+
+/**
+ * Draws the pixbuf at x, y, scaled to width and height and 
+ * optionally composited with a given background color.
+ */
+JNIEXPORT void JNICALL
+Java_gnu_java_awt_peer_gtk_GtkImage_drawPixelsScaled 
+  (JNIEnv *env, jobject obj, jobject gc_obj,
+   jint bg_red, jint bg_green, jint bg_blue, 
+   jint x, jint y, jint width, jint height, jboolean composite)
+{
+  GdkPixbuf* dst;
+  struct graphics *g;
+  guint32 bgColor;
+
+  bgColor = ((bg_red & 0xFF) << 16) |
+    ((bg_green & 0xFF) << 8) | (bg_blue & 0xFF);
+    
+  gdk_threads_enter ();
+  
+  g = (struct graphics *) NSA_GET_PTR (env, gc_obj);
+  
+  if (!g || !GDK_IS_DRAWABLE (g->drawable))
+    {
+      gdk_threads_leave ();
+      return;
+    }
+
+  if (offScreen (env, obj) == JNI_FALSE)
+    {
+      GdkPixbuf* pixbuf = (GdkPixbuf *)getData (env, obj);
+
+      /* Scale and composite the image */
+      if (composite == JNI_TRUE)
+	dst = gdk_pixbuf_composite_color_simple (pixbuf,
+						 width,
+						 height,
+						 GDK_INTERP_BILINEAR,
+						 255,
+						 width,
+						 bgColor,
+						 bgColor);
+      else
+	dst = gdk_pixbuf_scale_simple(pixbuf,
+				      width, height,
+				      GDK_INTERP_BILINEAR);
+
+      gdk_draw_pixbuf (g->drawable,
+		       g->gc,
+		       dst,
+		       0, 0,
+		       x + g->x_offset, y + g->y_offset, 
+		       width, height,
+		       GDK_RGB_DITHER_NORMAL, 0, 0);
+      gdk_pixbuf_unref (dst);
+
+    } else {
+      /* Get a pixmap */
+      GdkPixmap* pixmap = (GdkPixmap *)getData (env, obj);
+      gdk_draw_drawable (g->drawable,
+			 g->gc,
+			 pixmap,
+			 0, 0, /* src x,y */
+			 x + g->x_offset, y + g->y_offset, 
+			 width, height);
+    }
+    
+  gdk_threads_leave ();
+}
+
+/**
+ * Draws the pixbuf at x, y, scaled to width and height and 
+ * optionally composited and/or flipped with a given background color.
+ */
+JNIEXPORT void JNICALL 
+Java_gnu_java_awt_peer_gtk_GtkImage_drawPixelsScaledFlipped 
+(JNIEnv *env, jobject obj, jobject gc_obj,
+ jint bg_red, jint bg_green, jint bg_blue, 
+ jboolean flipx, jboolean flipy,
+ jint srcx, jint srcy, jint srcwidth, jint srcheight, 
+ jint dstx, jint dsty, jint dstwidth, jint dstheight, 
+ jboolean composite)
+{
+  GdkPixbuf *pixbuf;
+  GdkPixbuf *tmp, *dst;
+  struct graphics *g;
+  guint32 bgColor;
+
+  bgColor = ((bg_red & 0xFF) << 16) |
+    ((bg_green & 0xFF) << 8) | (bg_blue & 0xFF);
+    
+  gdk_threads_enter ();
+  
+  g = (struct graphics *) NSA_GET_PTR (env, gc_obj);
+  
+  if (!g || !GDK_IS_DRAWABLE (g->drawable))
+    {
+      gdk_threads_leave ();
+      return;
+    }
+
+  if (offScreen (env, obj) == JNI_FALSE)
+    {
+      pixbuf = (GdkPixbuf *)getData (env, obj);
+
+      /* Get the source area */
+      tmp = gdk_pixbuf_new (GDK_COLORSPACE_RGB, 
+			    TRUE,
+			    8,
+			    srcwidth,
+			    srcheight);
+
+      gdk_pixbuf_copy_area (pixbuf, 
+			    srcx, srcy,
+			    srcwidth, srcheight,
+			    tmp, 
+			    0, 0); /* dst x , dst y */
+    } else {
+      /* Get a pixbuf from the pixmap */
+      GdkDrawable *pixmap = (GdkDrawable *)getData(env, obj);
+      tmp = gdk_pixbuf_get_from_drawable (NULL,
+					  pixmap,
+					  gdk_drawable_get_colormap( pixmap ),
+					  srcx, srcy,
+					  0, 0, /* dst x , dst y */
+					  srcwidth, srcheight);
+    }
+
+  /* FIXME: This #if should be discarded once I feel comfortable about
+     GTK 2.6 dependence */
+#if GTK_MINOR_VERSION > 4
+  /* Flip it if necessary. */
+  if (flipx == JNI_TRUE)
+    {
+      GdkPixbuf *tmp2 = gdk_pixbuf_flip (tmp, TRUE);
+      gdk_pixbuf_unref (tmp);
+      tmp = tmp2;
+    }
+  if (flipy == JNI_TRUE)
+    {
+      GdkPixbuf *tmp2 = gdk_pixbuf_flip (tmp, FALSE);
+      gdk_pixbuf_unref (tmp);
+      tmp = tmp2;
+    }
+#endif
+  
+  /* Scale and composite the image */
+  if (composite == JNI_TRUE)
+    dst = gdk_pixbuf_composite_color_simple (tmp,
+					     dstwidth,
+					     dstheight,
+					     GDK_INTERP_BILINEAR,
+					     255,
+					     dstwidth,
+					     bgColor,
+					     bgColor);
+  else
+    dst = gdk_pixbuf_scale_simple(tmp,
+				  dstwidth, dstheight,
+				  GDK_INTERP_BILINEAR);
+  gdk_pixbuf_unref (tmp);
+    
+  gdk_draw_pixbuf (g->drawable,
+		   g->gc,
+		   dst,
+		   0, 0,
+		   dstx + g->x_offset, dsty + g->y_offset, 
+		   dstwidth, dstheight,
+		   GDK_RGB_DITHER_NORMAL, 0, 0);
+  
+  gdk_pixbuf_unref (dst);
+  gdk_threads_leave ();
+}
+
+/**
+ * Used by GtkFramePeer
+ */
+GdkPixbuf *gnu_java_awt_peer_gtk_GtkImage_getPixbuf(JNIEnv *env, jobject obj)
+{
+  int width, height;
+  GdkPixbuf *pixbuf;
+  GdkPixmap* pixmap;
+  jclass cls;
+  jfieldID field;
+
+  if (offScreen (env, obj) == JNI_FALSE)
+    return (GdkPixbuf *)getData (env, obj);
+
+  cls = (*env)->GetObjectClass (env, obj);
+  field = (*env)->GetFieldID (env, cls, "width", "I");
+  g_assert (field != 0);
+  width = (*env)->GetIntField (env, obj, field);
+   
+  field = (*env)->GetFieldID (env, cls, "height", "I");
+  g_assert (field != 0);
+  height = (*env)->GetIntField (env, obj, field);
+
+  /* Get a pixmap */
+  pixmap = (GdkPixmap *)getData (env, obj);
+  pixbuf = gdk_pixbuf_get_from_drawable (NULL,
+					 pixmap,
+					 gdk_drawable_get_colormap( pixmap ),
+					 0, 0, /* src x , src y */
+					 0, 0, /* dst x , dst y */
+					 width, height);
+  return pixbuf;
+}
+
+/**
+ * Used by GdkGraphics
+ */
+GdkPixmap *gnu_java_awt_peer_gtk_GtkImage_getPixmap(JNIEnv *env, jobject obj)
+{
+  if (offScreen (env, obj) == JNI_FALSE)
+    return NULL;
+  return (GdkPixmap *)getData (env, obj);
+}
+
+jboolean gnu_java_awt_peer_gtk_GtkImage_isOffScreen(JNIEnv *env, jobject obj)
+{
+  return offScreen(env, obj);
+}
+
+/**
+ * Maps java.awt.Image scaling hints to the native GDK ones.
+ */
+static GdkInterpType mapHints(jint hints)
+{
+  switch ( hints ) 
+    {
+      /* For FAST, we use the nearest-neighbor. Fastest and lowest quality. */
+    case SCALE_FAST:
+    case SCALE_REPLICATE:
+      return GDK_INTERP_NEAREST;
+
+      /* Hyperbolic for smooth. Slowest too. */
+    case SCALE_SMOOTH:
+      return GDK_INTERP_HYPER;
+      
+      /* the inbetweenish method */
+    case SCALE_AREA_AVERAGING:
+      return GDK_INTERP_TILES;
+
+      /* default to bilinear */
+    }
+  return GDK_INTERP_BILINEAR;
+}
+
+/* Sets the width and height fields of a GtkImage object. */
+static void setWidthHeight (JNIEnv * env, jobject obj, int width, int height)
+{
+  jclass cls;
+  jfieldID field;
+  
+  cls = (*env)->GetObjectClass (env, obj);
+  g_assert (cls != 0);
+  field = (*env)->GetFieldID (env, cls, "width", "I");
+  g_assert (field != 0);
+  (*env)->SetIntField (env, obj, field, (jint)width);
+   
+  field = (*env)->GetFieldID (env, cls, "height", "I");
+  g_assert (field != 0);
+  (*env)->SetIntField (env, obj, field, (jint)height);
+}
+
+/* Returns the value of the offScreen field. */
+static jboolean offScreen (JNIEnv *env, jobject obj)
+{
+  jclass cls;
+  jfieldID field;
+
+  cls = (*env)->GetObjectClass (env, obj);
+  field = (*env)->GetFieldID (env, cls, "offScreen", "Z");
+  g_assert (field != 0);
+  return (*env)->GetBooleanField (env, obj, field);
+}
+
+/* Store and get the pixbuf pointer */
+static void
+createRawData (JNIEnv * env, jobject obj, void *ptr)
+{
+  jclass cls;
+  jmethodID method;
+  jobject data;
+  jfieldID data_fid;
+
+  cls = (*env)->GetObjectClass (env, obj);
+  data_fid = (*env)->GetFieldID (env, cls, "pixmap", 
+				 "Lgnu/classpath/RawData;");
+  g_assert (data_fid != 0);
+
+#if SIZEOF_VOID_P == 8
+  cls = (*env)->FindClass (env, "gnu/classpath/RawData64");
+  method = (*env)->GetMethodID (env, cls, "<init>", "(J)V");
+  data = (*env)->NewObject (env, cls, method, (jlong) ptr);
+#else
+  cls = (*env)->FindClass (env, "gnu/classpath/RawData32");
+  method = (*env)->GetMethodID (env, cls, "<init>", "(I)V");
+  data = (*env)->NewObject (env, cls, method, (jint) ptr);
+#endif
+
+  (*env)->SetObjectField (env, obj, data_fid, data);
+}
+
+static void *
+getData (JNIEnv * env, jobject obj)
+{
+  jclass cls;
+  jfieldID field;
+  jfieldID data_fid;
+  jobject data;
+
+  cls = (*env)->GetObjectClass (env, obj);
+  data_fid = (*env)->GetFieldID (env, cls, "pixmap", 
+				 "Lgnu/classpath/RawData;");
+  g_assert (data_fid != 0);
+  data = (*env)->GetObjectField (env, obj, data_fid);
+
+#if SIZEOF_VOID_P == 8
+  cls = (*env)->FindClass (env, "gnu/classpath/RawData64");
+  field = (*env)->GetFieldID (env, cls, "data", "J");
+  return (void *) (*env)->GetLongField (env, data, field);
+#else
+  cls = (*env)->FindClass (env, "gnu/classpath/RawData32");
+  field = (*env)->GetFieldID (env, cls, "data", "I");
+  return (void *) (*env)->GetIntField (env, data, field);
+#endif
+}
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.c
===================================================================
RCS file: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.c
diff -N libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.c	30 Nov 2004 23:59:12 -0000	1.5
+++ /dev/null	1 Jan 1970 00:00:00 -0000
@@ -1,168 +0,0 @@
-/* gtkimagepainter.c
-   Copyright (C) 1999, 2004 Free Software Foundation, Inc.
-
-This file is part of GNU Classpath.
-
-GNU Classpath is free software; you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation; either version 2, or (at your option)
-any later version.
-
-GNU Classpath is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
-
-Linking this library statically or dynamically with other modules is
-making a combined work based on this library.  Thus, the terms and
-conditions of the GNU General Public License cover the whole
-combination.
-
-As a special exception, the copyright holders of this library give you
-permission to link this library with independent modules to produce an
-executable, regardless of the license terms of these independent
-modules, and to copy and distribute the resulting executable under
-terms of your choice, provided that you also meet, for each linked
-independent module, the terms and conditions of the license of that
-module.  An independent module is a module which is not derived from
-or based on this library.  If you modify this library, you may extend
-this exception to your version of the library, but you are not
-obligated to do so.  If you do not wish to do so, delete this
-exception statement from your version. */
-
-#include "gtkpeer.h"
-#include "gnu_java_awt_peer_gtk_GtkImagePainter.h"
-#include <libart_lgpl/art_misc.h>
-#include <libart_lgpl/art_rgb_affine.h>
-
-
-JNIEXPORT void JNICALL
-Java_gnu_java_awt_peer_gtk_GtkImagePainter_drawPixels
-  (JNIEnv *env, jobject obj __attribute__((unused)), jobject gc_obj,
-   jint bg_red, jint bg_green, jint bg_blue, jint x, jint y, jint width,
-   jint height, jintArray jpixels, jint offset, jint scansize,
-   jdoubleArray jaffine)
-{
-  struct graphics *g;
-  jint *pixels, *elems;
-  guchar *packed;
-  int i;
-  jsize num_pixels;
-  guchar *j_rgba, *c_rgb;
-
-  g = (struct graphics *) NSA_GET_PTR (env, gc_obj);
-
-  if (!jpixels)
-    return;
-
-  elems = (*env)->GetIntArrayElements (env, jpixels, NULL);
-  num_pixels = (*env)->GetArrayLength (env, jpixels);
- 
-  /* get a copy of the pixel data so we can modify it */
-  pixels = malloc (sizeof (jint) * num_pixels);
-  memcpy (pixels, elems, sizeof (jint) * num_pixels);
- 
-  (*env)->ReleaseIntArrayElements (env, jpixels, elems, 0);
-
-#ifndef WORDS_BIGENDIAN
-  /* convert pixels from 0xBBGGRRAA to 0xAARRGGBB */
-  for (i = 0; i < num_pixels; i++)
-    pixels[i] = SWAPU32 ((unsigned)pixels[i]);
-#endif
-
-  packed = (guchar *) malloc (sizeof (guchar) * 3 * num_pixels);
-  j_rgba = (guchar *) pixels;
-  c_rgb = packed;
-
-  /* copy over pixels in DirectColorModel format to 24 bit RGB image data,
-     and process the alpha channel */
-  for (i = 0; i < num_pixels; i++)
-    {
-      jint ialpha = *j_rgba++;
-
-      switch (ialpha)
-	{
-	case 0:			/* full transparency */
-	  *c_rgb++ = bg_red;
-	  *c_rgb++ = bg_green;
-	  *c_rgb++ = bg_blue;
-	  j_rgba += 3;
-	  break;
-	case 255:		/* opaque */
-	  *c_rgb++ = *j_rgba++;
-	  *c_rgb++ = *j_rgba++;
-	  *c_rgb++ = *j_rgba++;
-	  break;
-	default:		/* compositing required */
-	  {
-	    jfloat alpha = ialpha / 255.0;
-	    jfloat comp_alpha = 1.0 - alpha;
-	    
-	    *c_rgb++ = *j_rgba++ * alpha + bg_red * comp_alpha;
-	    *c_rgb++ = *j_rgba++ * alpha + bg_green * comp_alpha;
-	    *c_rgb++ = *j_rgba++ * alpha + bg_blue * comp_alpha;
-	  }
-	  break;
-	}
-    }
-
-  if (jaffine)
-    {
-      jdouble *affine;
-      ArtAlphaGamma *alphagamma = NULL;
-      art_u8 *dst;
-      int new_width, new_height;
-
-      affine = (*env)->GetDoubleArrayElements (env, jaffine, NULL);
-
-      new_width = abs (width * affine[0]);
-      new_height = abs (height * affine[3]);
-
-      dst = (art_u8 *) malloc (sizeof (art_u8) * 3 * (new_width * new_height));
-      
-      art_rgb_affine (dst, 
-		      0, 0,
-		      new_width, new_height,
-		      new_width * 3,
-		      (art_u8 *) packed + offset * 3,
-		      width, height,
-		      scansize * 3,
-		      affine,
-		      ART_FILTER_NEAREST,
-		      alphagamma);
-
-      (*env)->ReleaseDoubleArrayElements (env, jaffine, affine, JNI_ABORT);
-      
-      free (packed);
-      packed = (guchar *) dst;
-
-      width = scansize = new_width;
-      height = new_height;
-      offset = 0;
-    }
-
-  gdk_threads_enter ();
-
-  if (!g || !GDK_IS_DRAWABLE (g->drawable))
-    {
-      gdk_threads_leave ();
-      return;
-    }
-
-  gdk_draw_rgb_image (g->drawable,
-		      g->gc,
-		      x + g->x_offset, 
-		      y + g->y_offset, 
-		      width, height, GDK_RGB_DITHER_NORMAL,
-		      packed + offset * 3, scansize * 3);
-
-  gdk_threads_leave ();
-
-  free (pixels); 
-  free (packed);
-}
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.c,v
retrieving revision 1.9
diff -u -r1.9 gnu_java_awt_peer_gtk_GtkLabelPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.c	30 Nov 2004 23:59:12 -0000	1.9
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.c	9 Jul 2005 22:10:22 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c,v
retrieving revision 1.12
diff -u -r1.12 gnu_java_awt_peer_gtk_GtkListPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c	16 Feb 2005 20:03:25 -0000	1.12
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c	9 Jul 2005 22:10:23 -0000
@@ -15,8 +15,8 @@
 
    You should have received a copy of the GNU General Public License
    along with GNU Classpath; see the file COPYING.  If not, write to the
-   Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-   02111-1307 USA.
+   Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+   02110-1301 USA.
 
    Linking this library statically or dynamically with other modules is
    making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.c,v
retrieving revision 1.5
diff -u -r1.5 gnu_java_awt_peer_gtk_GtkMenuBarPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.c	30 Nov 2004 23:59:12 -0000	1.5
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.c	9 Jul 2005 22:10:23 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuComponentPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuComponentPeer.c,v
retrieving revision 1.1
diff -u -r1.1 gnu_java_awt_peer_gtk_GtkMenuComponentPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuComponentPeer.c	27 Jan 2004 19:29:57 -0000	1.1
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuComponentPeer.c	9 Jul 2005 22:10:23 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuItemPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuItemPeer.c,v
retrieving revision 1.8
diff -u -r1.8 gnu_java_awt_peer_gtk_GtkMenuItemPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuItemPeer.c	16 Feb 2005 20:03:26 -0000	1.8
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuItemPeer.c	9 Jul 2005 22:10:23 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuPeer.c,v
retrieving revision 1.10
diff -u -r1.10 gnu_java_awt_peer_gtk_GtkMenuPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuPeer.c	30 Nov 2004 23:59:12 -0000	1.10
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuPeer.c	9 Jul 2005 22:10:23 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPanelPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPanelPeer.c,v
retrieving revision 1.7
diff -u -r1.7 gnu_java_awt_peer_gtk_GtkPanelPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPanelPeer.c	30 Nov 2004 23:59:12 -0000	1.7
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPanelPeer.c	9 Jul 2005 22:10:23 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -40,6 +40,13 @@
 #include "gnu_java_awt_peer_gtk_GtkComponentPeer.h"
 #include "gnu_java_awt_peer_gtk_GtkPanelPeer.h"
 
+static gboolean panel_focus_in_cb (GtkWidget * widget,
+                                   GdkEventFocus *event,
+                                   jobject peer);
+static gboolean panel_focus_out_cb (GtkWidget * widget,
+                                    GdkEventFocus *event,
+                                    jobject peer);
+
 JNIEXPORT void JNICALL 
 Java_gnu_java_awt_peer_gtk_GtkPanelPeer_create
   (JNIEnv *env, jobject obj)
@@ -49,7 +56,7 @@
   NSA_SET_GLOBAL_REF (env, obj);
 
   gdk_threads_enter ();
-  
+
   widget = gtk_fixed_new ();
 
   gtk_fixed_set_has_window (GTK_FIXED (widget), TRUE);
@@ -60,3 +67,47 @@
 
   NSA_SET_PTR (env, obj, widget);
 }
+
+JNIEXPORT void JNICALL
+Java_gnu_java_awt_peer_gtk_GtkPanelPeer_connectSignals
+  (JNIEnv *env, jobject obj)
+{
+  void *ptr;
+  jobject *gref;
+
+  ptr = NSA_GET_PTR (env, obj);
+  gref = NSA_GET_GLOBAL_REF (env, obj);
+
+  gdk_threads_enter ();
+
+  g_signal_connect (GTK_OBJECT (ptr), "event",
+                    G_CALLBACK (pre_event_handler), *gref);
+
+  g_signal_connect (G_OBJECT (ptr), "focus-in-event",
+                    G_CALLBACK (panel_focus_in_cb), *gref);
+
+  g_signal_connect (G_OBJECT (ptr), "focus-out-event",
+                    G_CALLBACK (panel_focus_out_cb), *gref);
+
+  g_signal_connect_after (G_OBJECT (ptr), "realize",
+                          G_CALLBACK (connect_awt_hook_cb), *gref);
+
+  gdk_threads_leave ();
+}
+
+static gboolean
+panel_focus_in_cb (GtkWidget * widget  __attribute__((unused)),
+		    GdkEventFocus *event  __attribute__((unused)),
+		    jobject peer __attribute__((unused)))
+{
+  return TRUE;
+}
+
+static gboolean
+panel_focus_out_cb (GtkWidget * widget __attribute__((unused)),
+		     GdkEventFocus *event __attribute__((unused)),
+		     jobject peer __attribute__((unused)))
+{
+  return TRUE;
+}
+
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPopupMenuPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPopupMenuPeer.c,v
retrieving revision 1.9
diff -u -r1.9 gnu_java_awt_peer_gtk_GtkPopupMenuPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPopupMenuPeer.c	30 Nov 2004 23:59:12 -0000	1.9
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkPopupMenuPeer.c	9 Jul 2005 22:10:23 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.c,v
retrieving revision 1.9
diff -u -r1.9 gnu_java_awt_peer_gtk_GtkScrollBarPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.c	16 Feb 2005 20:03:26 -0000	1.9
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollBarPeer.c	9 Jul 2005 22:10:23 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -36,16 +36,25 @@
 exception statement from your version. */
 
 
+#include <math.h>
 #include "gtkpeer.h"
 #include "gnu_java_awt_peer_gtk_GtkComponentPeer.h"
 #include "gnu_java_awt_peer_gtk_GtkScrollbarPeer.h"
 
-static void post_change_event (GtkRange *range, jobject peer);
+#if GTK_MINOR_VERSION > 4
+static gboolean slider_moved_cb (GtkRange *range,
+                                 GtkScrollType scroll,
+                                 gdouble value,
+                                 jobject obj);
+#else
+static void post_change_event (GtkRange *range,
+			       jobject peer);
+#endif
 
-JNIEXPORT void JNICALL 
+JNIEXPORT void JNICALL
 Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_create
-(JNIEnv *env, jobject obj, jint orientation, jint value, 
- jint min, jint max, jint step_incr, jint page_incr, jint visible_amount)
+  (JNIEnv *env, jobject obj, jint orientation, jint value,
+   jint min, jint max, jint step_incr, jint page_incr, jint visible_amount)
 {
   GtkWidget *scrollbar;
   GtkObject *adj;
@@ -54,7 +63,7 @@
   NSA_SET_GLOBAL_REF (env, obj);
 
   gdk_threads_enter ();
-  
+
   adj = gtk_adjustment_new ((gdouble) value,
                             (gdouble) min,
                             (gdouble) max,
@@ -62,8 +71,9 @@
                             (gdouble) page_incr,
 			    (gdouble) visible_amount);
 
-  scrollbar = (orientation) ? gtk_vscrollbar_new (GTK_ADJUSTMENT (adj)) :
-                       gtk_hscrollbar_new (GTK_ADJUSTMENT (adj));
+  scrollbar = orientation
+    ? gtk_vscrollbar_new (GTK_ADJUSTMENT (adj))
+    : gtk_hscrollbar_new (GTK_ADJUSTMENT (adj));
 
   GTK_RANGE (scrollbar)->round_digits = 0;
   /* These calls seem redundant but they are not.  They clamp values
@@ -87,8 +97,13 @@
 
   gdk_threads_enter ();
 
+#if GTK_MINOR_VERSION > 4
+  g_signal_connect (G_OBJECT (ptr), "change-value",
+                    GTK_SIGNAL_FUNC (slider_moved_cb), *gref);
+#else
   g_signal_connect (G_OBJECT (ptr), "value-changed",
                     G_CALLBACK (post_change_event), *gref);
+#endif
 
   gdk_threads_leave ();
 
@@ -96,10 +111,9 @@
   Java_gnu_java_awt_peer_gtk_GtkComponentPeer_connectSignals (env, obj);
 }
 
-
-JNIEXPORT void JNICALL 
+JNIEXPORT void JNICALL
 Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_setLineIncrement
-    (JNIEnv *env, jobject obj, jint amount)
+  (JNIEnv *env, jobject obj, jint amount)
 {
   void *ptr;
   GtkAdjustment *adj;
@@ -115,9 +129,9 @@
   gdk_threads_leave ();
 }
 
-JNIEXPORT void JNICALL 
+JNIEXPORT void JNICALL
 Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_setPageIncrement
-    (JNIEnv *env, jobject obj, jint amount)
+  (JNIEnv *env, jobject obj, jint amount)
 {
   void *ptr;
   GtkAdjustment *adj;
@@ -133,9 +147,9 @@
   gdk_threads_leave ();
 }
 
-JNIEXPORT void JNICALL 
+JNIEXPORT void JNICALL
 Java_gnu_java_awt_peer_gtk_GtkScrollbarPeer_setValues
-    (JNIEnv *env, jobject obj, jint value, jint visible, jint min, jint max)
+  (JNIEnv *env, jobject obj, jint value, jint visible, jint min, jint max)
 {
   void *ptr;
   GtkAdjustment *adj;
@@ -150,16 +164,72 @@
   gtk_range_set_range (GTK_RANGE (ptr), (gdouble) min, (gdouble) max);
   gtk_range_set_value (GTK_RANGE (ptr), (gdouble) value);
 
-  gtk_adjustment_changed (adj);
-
   gdk_threads_leave ();
 }
 
+#if GTK_MINOR_VERSION > 4
+static gboolean
+slider_moved_cb (GtkRange *range,
+                 GtkScrollType scroll,
+                 gdouble value,
+                 jobject obj)
+{
+  GtkAdjustment *adj = gtk_range_get_adjustment (GTK_RANGE (range));
+
+  value = CLAMP (value, adj->lower,
+                 (adj->upper - adj->page_size));
+
+  if (range->round_digits >= 0)
+    {
+      gdouble power;
+      gint i;
+
+      i = range->round_digits;
+      power = 1;
+      while (i--)
+        power *= 10;
+      
+      value = floor ((value * power) + 0.5) / power;
+    }
+  
+  switch (scroll)
+    {
+    case GTK_SCROLL_STEP_BACKWARD:
+      (*gdk_env())->CallVoidMethod (gdk_env(), obj, postAdjustmentEventID,
+                                    AWT_ADJUSTMENT_UNIT_DECREMENT,
+                                    (jint) value);
+      break;
+    case GTK_SCROLL_STEP_FORWARD:
+      (*gdk_env())->CallVoidMethod (gdk_env(), obj, postAdjustmentEventID,
+                                    AWT_ADJUSTMENT_UNIT_INCREMENT,
+                                    (jint) value);
+      break;
+    case GTK_SCROLL_PAGE_BACKWARD:
+      (*gdk_env())->CallVoidMethod (gdk_env(), obj, postAdjustmentEventID,
+                                    AWT_ADJUSTMENT_BLOCK_DECREMENT,
+                                    (jint) value);
+      break;
+    case GTK_SCROLL_PAGE_FORWARD:
+      (*gdk_env())->CallVoidMethod (gdk_env(), obj, postAdjustmentEventID,
+                                    AWT_ADJUSTMENT_BLOCK_INCREMENT,
+                                    (jint) value);
+      break;
+    default:
+      /* GTK_SCROLL_JUMP: */
+      (*gdk_env())->CallVoidMethod (gdk_env(), obj, postAdjustmentEventID,
+                                    AWT_ADJUSTMENT_TRACK,
+                                    (jint) value);
+      break;
+    }
+  return FALSE;
+}
+#else
 static void
 post_change_event (GtkRange *range, jobject peer)
 {
   GtkAdjustment *adj;
   adj = gtk_range_get_adjustment (range);
   (*gdk_env())->CallVoidMethod (gdk_env(), peer, postAdjustmentEventID,
-                              AWT_ADJUSTMENT_TRACK, (jint) adj->value);
+				AWT_ADJUSTMENT_TRACK, (jint) adj->value);
 }
+#endif
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollPanePeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollPanePeer.c,v
retrieving revision 1.4
diff -u -r1.4 gnu_java_awt_peer_gtk_GtkScrollPanePeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollPanePeer.c	5 Jan 2004 21:35:33 -0000	1.4
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkScrollPanePeer.c	9 Jul 2005 22:10:23 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextAreaPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextAreaPeer.c,v
retrieving revision 1.15
diff -u -r1.15 gnu_java_awt_peer_gtk_GtkTextAreaPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextAreaPeer.c	30 Nov 2004 23:59:12 -0000	1.15
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextAreaPeer.c	9 Jul 2005 22:10:23 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextFieldPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextFieldPeer.c,v
retrieving revision 1.13
diff -u -r1.13 gnu_java_awt_peer_gtk_GtkTextFieldPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextFieldPeer.c	30 Nov 2004 23:59:12 -0000	1.13
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkTextFieldPeer.c	9 Jul 2005 22:10:23 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -39,6 +39,12 @@
 #include "gtkpeer.h"
 #include "gnu_java_awt_peer_gtk_GtkTextFieldPeer.h"
 
+/* the color used for highlighting when the foreground is black,
+   since black highlights aren't a Good Idea. */
+#define BB_RED    16962
+#define BB_GREEN  26985
+#define BB_BLUE   31611
+
 static jint
 get_border_width (GtkWidget *entry);
 
@@ -94,10 +100,17 @@
   color.red = (red / 255.0) * 65535;
   color.green = (green / 255.0) * 65535;
   color.blue = (blue / 255.0) * 65535;
-
+  
   gdk_threads_enter ();
 
   gtk_widget_modify_text (GTK_WIDGET (ptr), GTK_STATE_NORMAL, &color);
+
+  if ( red == 0 && green == 0 && blue == 0)
+    {
+      color.red = BB_RED;
+      color.green = BB_GREEN;
+      color.blue = BB_BLUE;
+    }
   gtk_widget_modify_base (GTK_WIDGET (ptr), GTK_STATE_SELECTED, &color);
 
   gdk_threads_leave ();
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkToolkit.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkToolkit.c,v
retrieving revision 1.5.2.1
diff -u -r1.5.2.1 gnu_java_awt_peer_gtk_GtkToolkit.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkToolkit.c	6 May 2005 03:35:59 -0000	1.5.2.1
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkToolkit.c	9 Jul 2005 22:10:23 -0000
@@ -1,5 +1,5 @@
 /* gtktoolkit.c -- Native portion of GtkToolkit
-   Copyright (C) 1998, 1999 Free Software Foundation, Inc.
+   Copyright (C) 1998, 1999, 2005  Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c,v
retrieving revision 1.33
diff -u -r1.33 gnu_java_awt_peer_gtk_GtkWindowPeer.c
--- libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c	22 Feb 2005 06:13:03 -0000	1.33
+++ libjava/jni/gtk-peer/gnu_java_awt_peer_gtk_GtkWindowPeer.c	9 Jul 2005 22:10:23 -0000
@@ -1,5 +1,5 @@
 /* gtkwindowpeer.c -- Native implementation of GtkWindowPeer
-   Copyright (C) 1998, 1999, 2002, 2004 Free Software Foundation, Inc.
+   Copyright (C) 1998, 1999, 2002, 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -56,7 +56,7 @@
                                        XEvent  *xevent,
                                        XPointer arg);
 
-static void window_delete_cb (GtkWidget *widget, GdkEvent *event,
+static gboolean window_delete_cb (GtkWidget *widget, GdkEvent *event,
 			      jobject peer);
 static void window_destroy_cb (GtkWidget *widget, GdkEvent *event,
 			       jobject peer);
@@ -252,6 +252,13 @@
   g_signal_connect_after (G_OBJECT (ptr), "realize",
                           G_CALLBACK (connect_awt_hook_cb), *gref);
 
+
+  /* Realize the window here so that its frame extents are known now.
+     That way Window.pack can operate with the accurate insets
+     returned by the window manager rather than the default
+     estimates. */
+  gtk_widget_realize (GTK_WIDGET (ptr));
+
   gdk_threads_leave ();
 }
 
@@ -458,7 +465,7 @@
     return False;
 }
 
-static void
+static gboolean
 window_delete_cb (GtkWidget *widget __attribute__((unused)),
 		  GdkEvent *event __attribute__((unused)),
 		  jobject peer)
@@ -469,6 +476,12 @@
 			      (jint) AWT_WINDOW_CLOSING,
 			      (jobject) NULL, (jint) 0);
   gdk_threads_enter ();
+
+  /* Prevents that the Window dissappears ("destroy"
+     not being signalled). This is necessary because it
+     should be up to a WindowListener implementation
+     how the AWT Frame responds to close requests. */
+  return TRUE;
 }
 
 static void
@@ -548,8 +561,6 @@
                               postWindowEventID,
                               (jint) AWT_WINDOW_GAINED_FOCUS,
                               (jobject) NULL, (jint) 0);
-  /* FIXME: somewhere after this is handled, the child window is
-     getting an expose event. */
   gdk_threads_enter ();
   return FALSE;
 }
@@ -564,8 +575,6 @@
                               postWindowEventID,
                               (jint) AWT_WINDOW_LOST_FOCUS,
                               (jobject) NULL, (jint) 0);
-  /* FIXME: somewhere after this is handled, the child window is
-     getting an expose event. */
   gdk_threads_enter ();
   return FALSE;
 }
Index: libjava/jni/gtk-peer/gthread-jni.c
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gthread-jni.c,v
retrieving revision 1.8
diff -u -r1.8 gthread-jni.c
--- libjava/jni/gtk-peer/gthread-jni.c	20 Feb 2005 04:14:24 -0000	1.8
+++ libjava/jni/gtk-peer/gthread-jni.c	9 Jul 2005 22:10:24 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gthread-jni.h
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gthread-jni.h,v
retrieving revision 1.3
diff -u -r1.3 gthread-jni.h
--- libjava/jni/gtk-peer/gthread-jni.h	2 Sep 2004 05:10:34 -0000	1.3
+++ libjava/jni/gtk-peer/gthread-jni.h	9 Jul 2005 22:10:24 -0000
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
Index: libjava/jni/gtk-peer/gtkcairopeer.h
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gtkcairopeer.h,v
retrieving revision 1.3
diff -u -r1.3 gtkcairopeer.h
--- libjava/jni/gtk-peer/gtkcairopeer.h	16 Feb 2005 20:03:29 -0000	1.3
+++ libjava/jni/gtk-peer/gtkcairopeer.h	9 Jul 2005 22:10:24 -0000
@@ -18,8 +18,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
@@ -86,6 +86,7 @@
   jintArray jarray;
   jint width, height;
   jint *javabuf;
+  jint *javabuf_copy;
   jboolean isCopy;
 };
 
Index: libjava/jni/gtk-peer/gtkpeer.h
===================================================================
RCS file: /cvs/gcc/gcc/libjava/jni/gtk-peer/gtkpeer.h,v
retrieving revision 1.19
diff -u -r1.19 gtkpeer.h
--- libjava/jni/gtk-peer/gtkpeer.h	22 Feb 2005 06:13:04 -0000	1.19
+++ libjava/jni/gtk-peer/gtkpeer.h	9 Jul 2005 22:10:25 -0000
@@ -1,5 +1,5 @@
 /* gtkpeer.h -- Some global variables and #defines
-   Copyright (C) 1998, 1999, 2004 Free Software Foundation, Inc.
+   Copyright (C) 1998, 1999, 2004, 2005 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -15,8 +15,8 @@
 
 You should have received a copy of the GNU General Public License
 along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
-02111-1307 USA.
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
 
 Linking this library statically or dynamically with other modules is
 making a combined work based on this library.  Thus, the terms and
--- libjava.old/Makefile.in	2005-08-18 20:19:53.547415000 +0200
+++ libjava/Makefile.in	2005-08-18 20:22:55.459779378 +0200
@@ -144,7 +144,7 @@
 	jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c \
 	jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFramePeer.c \
 	jni/gtk-peer/gnu_java_awt_peer_gtk_GtkGenericPeer.c \
-	jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.c \
+	jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImage.c \
 	jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.c \
 	jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c \
 	jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.c \
@@ -185,7 +185,7 @@
 	jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkFileDialogPeer.lo \
 	jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkFramePeer.lo \
 	jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkGenericPeer.lo \
-	jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImagePainter.lo \
+	jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImage.lo \
 	jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkLabelPeer.lo \
 	jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkListPeer.lo \
 	jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkMenuBarPeer.lo \
@@ -869,7 +869,7 @@
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c \
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFramePeer.c \
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkGenericPeer.c \
-jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.c \
+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImage.c \
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.c \
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c \
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.c \
@@ -917,14 +917,13 @@
 gnu/java/awt/peer/gtk/GtkFramePeer.java	\
 gnu/java/awt/peer/gtk/GtkGenericPeer.java \
 gnu/java/awt/peer/gtk/GtkImage.java \
-gnu/java/awt/peer/gtk/GtkImagePainter.java \
+gnu/java/awt/peer/gtk/GtkImageConsumer.java \
 gnu/java/awt/peer/gtk/GtkLabelPeer.java	\
 gnu/java/awt/peer/gtk/GtkListPeer.java \
 gnu/java/awt/peer/gtk/GtkMenuBarPeer.java \
 gnu/java/awt/peer/gtk/GtkMenuComponentPeer.java	\
 gnu/java/awt/peer/gtk/GtkMenuItemPeer.java \
 gnu/java/awt/peer/gtk/GtkMenuPeer.java \
-gnu/java/awt/peer/gtk/GtkOffScreenImage.java \
 gnu/java/awt/peer/gtk/GtkPanelPeer.java	\
 gnu/java/awt/peer/gtk/GtkPopupMenuPeer.java \
 gnu/java/awt/peer/gtk/GtkScrollPanePeer.java \
@@ -935,7 +934,8 @@
 gnu/java/awt/peer/gtk/GtkToolkit.java \
 gnu/java/awt/peer/gtk/GtkWindowPeer.java \
 gnu/java/awt/peer/gtk/GThreadMutex.java \
-gnu/java/awt/peer/gtk/GThreadNativeMethodRunner.java
+gnu/java/awt/peer/gtk/GThreadNativeMethodRunner.java \
+gnu/java/awt/peer/gtk/GtkVolatileImage.java
 
 gtk_jni_headers = $(patsubst %.java,jniinclude/%.h,$(subst /,_,$(gtk_awt_peer_source_files)))
 lib_gnu_java_awt_peer_gtk_la_SOURCES = \
@@ -1151,6 +1151,7 @@
 gnu/java/awt/EmbeddedWindow.java \
 gnu/java/awt/EmbeddedWindowSupport.java \
 gnu/java/awt/EventModifier.java \
+gnu/java/awt/GradientPaintContext.java \
 gnu/java/awt/color/CieXyzConverter.java \
 gnu/java/awt/color/ClutProfileConverter.java \
 gnu/java/awt/color/ColorLookUpTable.java \
@@ -1573,7 +1574,9 @@
 javax/swing/plaf/basic/BasicComboPopup.java \
 javax/swing/plaf/basic/BasicDesktopIconUI.java \
 javax/swing/plaf/basic/BasicDesktopPaneUI.java \
+javax/swing/plaf/basic/BasicDirectoryModel.java \
 javax/swing/plaf/basic/BasicEditorPaneUI.java \
+javax/swing/plaf/basic/BasicFileChooserUI.java \
 javax/swing/plaf/basic/BasicFormattedTextFieldUI.java \
 javax/swing/plaf/basic/BasicGraphicsUtils.java \
 javax/swing/plaf/basic/BasicInternalFrameTitlePane.java \
@@ -1617,6 +1620,7 @@
 javax/swing/plaf/basic/BasicBorders.java \
 javax/swing/plaf/basic/BasicIconFactory.java \
 javax/swing/plaf/basic/ComboPopup.java \
+javax/swing/plaf/basic/DefaultMenuLayout.java \
 javax/swing/plaf/BorderUIResource.java \
 javax/swing/plaf/UIResource.java \
 javax/swing/plaf/ButtonUI.java \
@@ -1631,8 +1635,30 @@
 javax/swing/plaf/TreeUI.java \
 javax/swing/plaf/ViewportUI.java \
 javax/swing/plaf/metal/DefaultMetalTheme.java \
+javax/swing/plaf/metal/MetalBorders.java \
+javax/swing/plaf/metal/MetalButtonUI.java \
+javax/swing/plaf/metal/MetalCheckBoxUI.java \
+javax/swing/plaf/metal/MetalComboBoxUI.java \
+javax/swing/plaf/metal/MetalDesktopIconUI.java \
+javax/swing/plaf/metal/MetalInternalFrameUI.java \
+javax/swing/plaf/metal/MetalLabelUI.java \
 javax/swing/plaf/metal/MetalLookAndFeel.java \
+javax/swing/plaf/metal/MetalPopupMenuSeparatorUI.java \
+javax/swing/plaf/metal/MetalProgressBarUI.java \
+javax/swing/plaf/metal/MetalRadioButtonUI.java \
+javax/swing/plaf/metal/MetalRootPaneUI.java \
+javax/swing/plaf/metal/MetalScrollBarUI.java \
+javax/swing/plaf/metal/MetalScrollPaneUI.java \
+javax/swing/plaf/metal/MetalSeparatorUI.java \
+javax/swing/plaf/metal/MetalSliderUI.java \
+javax/swing/plaf/metal/MetalSplitPaneUI.java \
+javax/swing/plaf/metal/MetalTabbedPaneUI.java \
+javax/swing/plaf/metal/MetalTextFieldUI.java \
 javax/swing/plaf/metal/MetalTheme.java \
+javax/swing/plaf/metal/MetalToggleButtonUI.java \
+javax/swing/plaf/metal/MetalToolBarUI.java \
+javax/swing/plaf/metal/MetalToolTipUI.java \
+javax/swing/plaf/metal/MetalTreeUI.java \
 javax/swing/plaf/ColorUIResource.java \
 javax/swing/plaf/DimensionUIResource.java \
 javax/swing/plaf/FontUIResource.java \
@@ -1673,6 +1699,7 @@
 javax/swing/filechooser/FileFilter.java \
 javax/swing/filechooser/FileSystemView.java \
 javax/swing/filechooser/FileView.java \
+javax/swing/filechooser/UnixFileSystemView.java \
 javax/swing/table/AbstractTableModel.java \
 javax/swing/table/DefaultTableColumnModel.java \
 javax/swing/table/DefaultTableModel.java \
@@ -1794,9 +1821,11 @@
 javax/swing/text/AttributeSet.java \
 javax/swing/text/BadLocationException.java \
 javax/swing/text/Caret.java \
+javax/swing/text/ChangedCharSetException.java \
 javax/swing/text/ComponentView.java \
 javax/swing/text/DefaultCaret.java \
 javax/swing/text/DefaultEditorKit.java \
+javax/swing/text/DefaultFormatter.java \
 javax/swing/text/DefaultHighlighter.java \
 javax/swing/text/DefaultStyledDocument.java \
 javax/swing/text/Document.java \
@@ -1806,6 +1835,7 @@
 javax/swing/text/FieldView.java \
 javax/swing/text/GapContent.java \
 javax/swing/text/Highlighter.java \
+javax/swing/text/InternationalFormatter.java \
 javax/swing/text/JTextComponent.java \
 javax/swing/text/Keymap.java \
 javax/swing/text/LayeredHighlighter.java \
@@ -1832,7 +1862,26 @@
 javax/swing/text/View.java \
 javax/swing/text/ViewFactory.java \
 javax/swing/text/html/HTML.java \
+javax/swing/text/html/HTMLDocument.java \
+javax/swing/text/html/HTMLEditorKit.java \
+javax/swing/text/html/HTMLFrameHyperlinkEvent.java \
+javax/swing/text/html/parser/AttributeList.java \
+javax/swing/text/html/parser/ContentModel.java \
+javax/swing/text/html/parser/DTD.java \
+javax/swing/text/html/parser/DTDConstants.java \
+javax/swing/text/html/parser/DocumentParser.java \
+javax/swing/text/html/parser/Element.java \
+javax/swing/text/html/parser/Entity.java \
+javax/swing/text/html/parser/Parser.java \
 javax/swing/text/html/parser/ParserDelegator.java \
+javax/swing/text/html/parser/TagElement.java \
+javax/swing/text/rtf/ControlWordToken.java \
+javax/swing/text/rtf/RTFEditorKit.java \
+javax/swing/text/rtf/RTFParseException.java \
+javax/swing/text/rtf/RTFParser.java \
+javax/swing/text/rtf/RTFScanner.java \
+javax/swing/text/rtf/TextToken.java \
+javax/swing/text/rtf/Token.java \
 javax/swing/tree/TreeNode.java \
 javax/swing/tree/AbstractLayoutCache.java \
 javax/swing/tree/DefaultMutableTreeNode.java \
@@ -2010,7 +2059,30 @@
 gnu/java/rmi/server/UnicastRemoteCall.java \
 gnu/java/rmi/server/UnicastRemoteStub.java \
 gnu/java/rmi/server/UnicastServer.java \
-gnu/java/rmi/server/UnicastServerRef.java
+gnu/java/rmi/server/UnicastServerRef.java \
+gnu/javax/swing/text/html/parser/gnuDTD.java \
+gnu/javax/swing/text/html/parser/HTML_401F.java \
+gnu/javax/swing/text/html/parser/htmlAttributeSet.java \
+gnu/javax/swing/text/html/parser/htmlValidator.java \
+gnu/javax/swing/text/html/parser/models/list.java \
+gnu/javax/swing/text/html/parser/models/node.java \
+gnu/javax/swing/text/html/parser/models/noTagModel.java \
+gnu/javax/swing/text/html/parser/models/PCDATAonly_model.java \
+gnu/javax/swing/text/html/parser/models/TableRowContentModel.java \
+gnu/javax/swing/text/html/parser/models/transformer.java \
+gnu/javax/swing/text/html/parser/support/gnuStringIntMapper.java \
+gnu/javax/swing/text/html/parser/support/low/Buffer.java \
+gnu/javax/swing/text/html/parser/support/low/Constants.java \
+gnu/javax/swing/text/html/parser/support/low/Location.java \
+gnu/javax/swing/text/html/parser/support/low/node.java \
+gnu/javax/swing/text/html/parser/support/low/ParseException.java \
+gnu/javax/swing/text/html/parser/support/low/pattern.java \
+gnu/javax/swing/text/html/parser/support/low/Queue.java \
+gnu/javax/swing/text/html/parser/support/low/ReaderTokenizer.java \
+gnu/javax/swing/text/html/parser/support/low/Token.java \
+gnu/javax/swing/text/html/parser/support/parameterDefaulter.java \
+gnu/javax/swing/text/html/parser/support/Parser.java \
+gnu/javax/swing/text/html/parser/support/textPreProcessor.java
 
 javax_imageio_source_files = \
 javax/imageio/ImageWriteParam.java \
@@ -2631,6 +2703,104 @@
 gnu/xml/dom/DomEntity.java \
 gnu/xml/dom/DomCDATASection.java \
 gnu/xml/dom/DomDOMException.java \
+gnu/xml/dom/html2/DomHTMLAnchorElement.java \
+gnu/xml/dom/html2/DomHTMLAppletElement.java \
+gnu/xml/dom/html2/DomHTMLAreaElement.java \
+gnu/xml/dom/html2/DomHTMLBRElement.java \
+gnu/xml/dom/html2/DomHTMLBaseElement.java \
+gnu/xml/dom/html2/DomHTMLBaseFontElement.java \
+gnu/xml/dom/html2/DomHTMLBodyElement.java \
+gnu/xml/dom/html2/DomHTMLButtonElement.java \
+gnu/xml/dom/html2/DomHTMLCollection.java \
+gnu/xml/dom/html2/DomHTMLDocument.java \
+gnu/xml/dom/html2/DomHTMLElement.java \
+gnu/xml/dom/html2/DomHTMLDListElement.java \
+gnu/xml/dom/html2/DomHTMLDirectoryElement.java \
+gnu/xml/dom/html2/DomHTMLDivElement.java \
+gnu/xml/dom/html2/DomHTMLFieldSetElement.java \
+gnu/xml/dom/html2/DomHTMLFontElement.java \
+gnu/xml/dom/html2/DomHTMLFormElement.java \
+gnu/xml/dom/html2/DomHTMLFrameElement.java \
+gnu/xml/dom/html2/DomHTMLFrameSetElement.java \
+gnu/xml/dom/html2/DomHTMLHRElement.java \
+gnu/xml/dom/html2/DomHTMLHeadElement.java \
+gnu/xml/dom/html2/DomHTMLHeadingElement.java \
+gnu/xml/dom/html2/DomHTMLHtmlElement.java \
+gnu/xml/dom/html2/DomHTMLIFrameElement.java \
+gnu/xml/dom/html2/DomHTMLImageElement.java \
+gnu/xml/dom/html2/DomHTMLInputElement.java \
+gnu/xml/dom/html2/DomHTMLIsIndexElement.java \
+gnu/xml/dom/html2/DomHTMLLIElement.java \
+gnu/xml/dom/html2/DomHTMLLabelElement.java \
+gnu/xml/dom/html2/DomHTMLLegendElement.java \
+gnu/xml/dom/html2/DomHTMLLinkElement.java \
+gnu/xml/dom/html2/DomHTMLMapElement.java \
+gnu/xml/dom/html2/DomHTMLMenuElement.java \
+gnu/xml/dom/html2/DomHTMLMetaElement.java \
+gnu/xml/dom/html2/DomHTMLModElement.java \
+gnu/xml/dom/html2/DomHTMLOListElement.java \
+gnu/xml/dom/html2/DomHTMLObjectElement.java \
+gnu/xml/dom/html2/DomHTMLOptGroupElement.java \
+gnu/xml/dom/html2/DomHTMLOptionElement.java \
+gnu/xml/dom/html2/DomHTMLParagraphElement.java \
+gnu/xml/dom/html2/DomHTMLParamElement.java \
+gnu/xml/dom/html2/DomHTMLPreElement.java \
+gnu/xml/dom/html2/DomHTMLQuoteElement.java \
+gnu/xml/dom/html2/DomHTMLScriptElement.java \
+gnu/xml/dom/html2/DomHTMLSelectElement.java \
+gnu/xml/dom/html2/DomHTMLStyleElement.java \
+gnu/xml/dom/html2/DomHTMLTableCaptionElement.java \
+gnu/xml/dom/html2/DomHTMLTableCellElement.java \
+gnu/xml/dom/html2/DomHTMLTableColElement.java \
+gnu/xml/dom/html2/DomHTMLTableElement.java \
+gnu/xml/dom/html2/DomHTMLTableRowElement.java \
+gnu/xml/dom/html2/DomHTMLTableSectionElement.java \
+gnu/xml/dom/html2/DomHTMLTextAreaElement.java \
+gnu/xml/dom/html2/DomHTMLTitleElement.java \
+gnu/xml/dom/html2/DomHTMLUListElement.java \
+gnu/xml/dom/html2/DomHTMLImpl.java \
+gnu/xml/dom/html2/DomHTMLParser.java \
+gnu/xml/libxmlj/dom/GnomeAttr.java \
+gnu/xml/libxmlj/dom/GnomeCDATASection.java \
+gnu/xml/libxmlj/dom/GnomeCharacterData.java \
+gnu/xml/libxmlj/dom/GnomeComment.java \
+gnu/xml/libxmlj/dom/GnomeDOMException.java \
+gnu/xml/libxmlj/dom/GnomeDOMStringList.java \
+gnu/xml/libxmlj/dom/GnomeDocument.java \
+gnu/xml/libxmlj/dom/GnomeDocumentBuilder.java \
+gnu/xml/libxmlj/dom/GnomeDocumentBuilderFactory.java \
+gnu/xml/libxmlj/dom/GnomeDocumentFragment.java \
+gnu/xml/libxmlj/dom/GnomeDocumentType.java \
+gnu/xml/libxmlj/dom/GnomeElement.java \
+gnu/xml/libxmlj/dom/GnomeEntity.java \
+gnu/xml/libxmlj/dom/GnomeEntityReference.java \
+gnu/xml/libxmlj/dom/GnomeNamedNodeMap.java \
+gnu/xml/libxmlj/dom/GnomeNode.java \
+gnu/xml/libxmlj/dom/GnomeNodeList.java \
+gnu/xml/libxmlj/dom/GnomeNotation.java \
+gnu/xml/libxmlj/dom/GnomeProcessingInstruction.java \
+gnu/xml/libxmlj/dom/GnomeText.java \
+gnu/xml/libxmlj/dom/GnomeTypeInfo.java \
+gnu/xml/libxmlj/dom/GnomeXPathExpression.java \
+gnu/xml/libxmlj/dom/GnomeXPathNSResolver.java \
+gnu/xml/libxmlj/dom/GnomeXPathNodeList.java \
+gnu/xml/libxmlj/dom/GnomeXPathResult.java \
+gnu/xml/libxmlj/sax/GnomeLocator.java \
+gnu/xml/libxmlj/sax/GnomeSAXParser.java \
+gnu/xml/libxmlj/sax/GnomeSAXParserFactory.java \
+gnu/xml/libxmlj/sax/GnomeXMLReader.java \
+gnu/xml/libxmlj/sax/Namespaces.java \
+gnu/xml/libxmlj/sax/StringArrayAttributes.java \
+gnu/xml/libxmlj/sax/XMLName.java \
+gnu/xml/libxmlj/transform/ErrorListenerErrorHandler.java \
+gnu/xml/libxmlj/transform/GnomeTransformer.java \
+gnu/xml/libxmlj/transform/GnomeTransformerFactory.java \
+gnu/xml/libxmlj/transform/URIResolverEntityResolver.java \
+gnu/xml/libxmlj/util/EmptyNodeList.java \
+gnu/xml/libxmlj/util/NamedInputStream.java \
+gnu/xml/libxmlj/util/StandaloneDocumentType.java \
+gnu/xml/libxmlj/util/StandaloneLocator.java \
+gnu/xml/libxmlj/util/XMLJ.java \
 gnu/xml/transform/GenerateIdFunction.java \
 gnu/xml/transform/FormatNumberFunction.java \
 gnu/xml/transform/ValueOfNode.java \
@@ -2656,7 +2826,6 @@
 gnu/xml/transform/TransformerFactoryImpl.java \
 gnu/xml/transform/TextNode.java	\
 gnu/xml/transform/CopyNode.java	\
-gnu/xml/transform/SystemPropertyFunction.java \
 gnu/xml/transform/Stylesheet.java \
 gnu/xml/transform/ProcessingInstructionNode.java \
 gnu/xml/transform/UnparsedEntityUriFunction.java \
@@ -4081,7 +4250,7 @@
 jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkGenericPeer.lo:  \
 	jni/gtk-peer/$(am__dirstamp) \
 	jni/gtk-peer/$(DEPDIR)/$(am__dirstamp)
-jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImagePainter.lo:  \
+jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImage.lo:  \
 	jni/gtk-peer/$(am__dirstamp) \
 	jni/gtk-peer/$(DEPDIR)/$(am__dirstamp)
 jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkLabelPeer.lo:  \
@@ -4869,8 +5038,8 @@
 	-rm -f jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkFramePeer.lo
 	-rm -f jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkGenericPeer.$(OBJEXT)
 	-rm -f jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkGenericPeer.lo
-	-rm -f jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImagePainter.$(OBJEXT)
-	-rm -f jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImagePainter.lo
+	-rm -f jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImage.$(OBJEXT)
+	-rm -f jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImage.lo
 	-rm -f jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkLabelPeer.$(OBJEXT)
 	-rm -f jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkLabelPeer.lo
 	-rm -f jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkListPeer.$(OBJEXT)
@@ -5072,7 +5241,7 @@
 @AMDEP_TRUE@@am__include@ @am__quote@jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkFileDialogPeer.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkFramePeer.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkGenericPeer.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImagePainter.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImage.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkLabelPeer.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkListPeer.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkMenuBarPeer.Plo@am__quote@
@@ -5256,12 +5425,12 @@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_gnu_java_awt_peer_gtk_la_CFLAGS) $(CFLAGS) -c -o jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkGenericPeer.lo `test -f 'jni/gtk-peer/gnu_java_awt_peer_gtk_GtkGenericPeer.c' || echo '$(srcdir)/'`jni/gtk-peer/gnu_java_awt_peer_gtk_GtkGenericPeer.c
 
-jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImagePainter.lo: jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.c
-@am__fastdepCC_TRUE@	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_gnu_java_awt_peer_gtk_la_CFLAGS) $(CFLAGS) -MT jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImagePainter.lo -MD -MP -MF "jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImagePainter.Tpo" -c -o jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImagePainter.lo `test -f 'jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.c' || echo '$(srcdir)/'`jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.c; \
-@am__fastdepCC_TRUE@	then mv -f "jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImagePainter.Tpo" "jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImagePainter.Plo"; else rm -f "jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImagePainter.Tpo"; exit 1; fi
-@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.c' object='jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImagePainter.lo' libtool=yes @AMDEPBACKSLASH@
+jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImage.lo: jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImage.c
+@am__fastdepCC_TRUE@	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_gnu_java_awt_peer_gtk_la_CFLAGS) $(CFLAGS) -MT jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImage.lo -MD -MP -MF "jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImage.Tpo" -c -o jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImage.lo `test -f 'jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImage.c' || echo '$(srcdir)/'`jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImage.c; \
+@am__fastdepCC_TRUE@	then mv -f "jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImage.Tpo" "jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImage.Plo"; else rm -f "jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImage.Tpo"; exit 1; fi
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImage.c' object='jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImage.lo' libtool=yes @AMDEPBACKSLASH@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
-@am__fastdepCC_FALSE@	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_gnu_java_awt_peer_gtk_la_CFLAGS) $(CFLAGS) -c -o jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImagePainter.lo `test -f 'jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.c' || echo '$(srcdir)/'`jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.c
+@am__fastdepCC_FALSE@	$(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_gnu_java_awt_peer_gtk_la_CFLAGS) $(CFLAGS) -c -o jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkImage.lo `test -f 'jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImage.c' || echo '$(srcdir)/'`jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImage.c
 
 jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkLabelPeer.lo: jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.c
 @am__fastdepCC_TRUE@	if $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(lib_gnu_java_awt_peer_gtk_la_CFLAGS) $(CFLAGS) -MT jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkLabelPeer.lo -MD -MP -MF "jni/gtk-peer/$(DEPDIR)/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkLabelPeer.Tpo" -c -o jni/gtk-peer/lib_gnu_java_awt_peer_gtk_la-gnu_java_awt_peer_gtk_GtkLabelPeer.lo `test -f 'jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.c' || echo '$(srcdir)/'`jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.c; \
@@ -5817,7 +5986,7 @@
 distdir: $(DISTFILES)
 	$(am__remove_distdir)
 	mkdir $(distdir)
-	$(mkdir_p) $(distdir)/. $(distdir)/.. $(distdir)/../config $(distdir)/gnu/awt $(distdir)/gnu/awt/j2d $(distdir)/gnu/awt/xlib $(distdir)/gnu/classpath $(distdir)/gnu/gcj $(distdir)/gnu/gcj/convert $(distdir)/gnu/gcj/io $(distdir)/gnu/gcj/runtime $(distdir)/gnu/gcj/tools/gcj_dbtool $(distdir)/gnu/gcj/util $(distdir)/gnu/gcj/xlib $(distdir)/gnu/java/awt $(distdir)/gnu/java/awt/color $(distdir)/gnu/java/awt/image $(distdir)/gnu/java/awt/peer $(distdir)/gnu/java/awt/peer/gtk $(distdir)/gnu/java/beans $(distdir)/gnu/java/beans/decoder $(distdir)/gnu/java/beans/editors $(distdir)/gnu/java/io $(distdir)/gnu/java/lang $(distdir)/gnu/java/lang/reflect $(distdir)/gnu/java/locale $(distdir)/gnu/java/math $(distdir)/gnu/java/net $(distdir)/gnu/java/net/protocol/core $(distdir)/gnu/java/net/protocol/file $(distdir)/gnu/java/net/protocol/ftp $(distdir)/gnu/java/net/protocol/gcjlib $(distdir)/gnu/java/net/protocol/http $(distdir)/gnu/java/net/protocol/http/event $(distdir)/gnu/java/net/protocol/https $(distdir)/gnu/java/net/protocol/jar $(distdir)/gnu/java/nio $(distdir)/gnu/java/nio/channels $(distdir)/gnu/java/nio/charset $(distdir)/gnu/java/rmi $(distdir)/gnu/java/rmi/dgc $(distdir)/gnu/java/rmi/registry $(distdir)/gnu/java/rmi/rmic $(distdir)/gnu/java/rmi/server $(distdir)/gnu/java/security $(distdir)/gnu/java/security/action $(distdir)/gnu/java/security/ber $(distdir)/gnu/java/security/der $(distdir)/gnu/java/security/pkcs $(distdir)/gnu/java/security/provider $(distdir)/gnu/java/security/util $(distdir)/gnu/java/security/x509 $(distdir)/gnu/java/security/x509/ext $(distdir)/gnu/java/text $(distdir)/gnu/java/util $(distdir)/gnu/java/util/prefs $(distdir)/gnu/regexp $(distdir)/gnu/xml/aelfred2 $(distdir)/gnu/xml/dom $(distdir)/gnu/xml/dom/ls $(distdir)/gnu/xml/pipeline $(distdir)/gnu/xml/transform $(distdir)/gnu/xml/util $(distdir)/gnu/xml/xpath $(distdir)/java/applet $(distdir)/java/awt $(distdir)/java/awt/color $(distdir)/java/awt/datatransfer $(distdir)/java/awt/dnd $(distdir)/java/awt/dnd/peer $(distdir)/java/awt/event $(distdir)/java/awt/font $(distdir)/java/awt/geom $(distdir)/java/awt/im $(distdir)/java/awt/im/spi $(distdir)/java/awt/image $(distdir)/java/awt/image/renderable $(distdir)/java/awt/peer $(distdir)/java/awt/print $(distdir)/java/beans $(distdir)/java/beans/beancontext $(distdir)/java/io $(distdir)/java/lang $(distdir)/java/lang/ref $(distdir)/java/lang/reflect $(distdir)/java/math $(distdir)/java/net $(distdir)/java/nio $(distdir)/java/nio/channels $(distdir)/java/nio/channels/spi $(distdir)/java/nio/charset $(distdir)/java/nio/charset/spi $(distdir)/java/rmi $(distdir)/java/rmi/activation $(distdir)/java/rmi/dgc $(distdir)/java/rmi/registry $(distdir)/java/rmi/server $(distdir)/java/security $(distdir)/java/security/acl $(distdir)/java/security/cert $(distdir)/java/security/interfaces $(distdir)/java/security/spec $(distdir)/java/sql $(distdir)/java/text $(distdir)/java/util $(distdir)/java/util/jar $(distdir)/java/util/logging $(distdir)/java/util/prefs $(distdir)/java/util/regex $(distdir)/java/util/zip $(distdir)/javax/accessibility $(distdir)/javax/crypto $(distdir)/javax/crypto/interfaces $(distdir)/javax/crypto/spec $(distdir)/javax/imageio $(distdir)/javax/imageio/event $(distdir)/javax/imageio/metadata $(distdir)/javax/imageio/spi $(distdir)/javax/imageio/stream $(distdir)/javax/naming $(distdir)/javax/naming/directory $(distdir)/javax/naming/event $(distdir)/javax/naming/ldap $(distdir)/javax/naming/spi $(distdir)/javax/net $(distdir)/javax/net/ssl $(distdir)/javax/print $(distdir)/javax/print/attribute $(distdir)/javax/print/attribute/standard $(distdir)/javax/print/event $(distdir)/javax/security/auth $(distdir)/javax/security/auth/callback $(distdir)/javax/security/auth/login $(distdir)/javax/security/auth/spi $(distdir)/javax/security/auth/x500 $(distdir)/javax/security/cert $(distdir)/javax/security/sasl $(distdir)/javax/sql $(distdir)/javax/swing $(distdir)/javax/swing/border $(distdir)/javax/swing/colorchooser $(distdir)/javax/swing/event $(distdir)/javax/swing/filechooser $(distdir)/javax/swing/plaf $(distdir)/javax/swing/plaf/basic $(distdir)/javax/swing/plaf/metal $(distdir)/javax/swing/table $(distdir)/javax/swing/text $(distdir)/javax/swing/text/html $(distdir)/javax/swing/text/html/parser $(distdir)/javax/swing/tree $(distdir)/javax/swing/undo $(distdir)/javax/transaction $(distdir)/javax/transaction/xa $(distdir)/javax/xml $(distdir)/javax/xml/datatype $(distdir)/javax/xml/namespace $(distdir)/javax/xml/parsers $(distdir)/javax/xml/transform $(distdir)/javax/xml/transform/dom $(distdir)/javax/xml/transform/sax $(distdir)/javax/xml/transform/stream $(distdir)/javax/xml/validation $(distdir)/javax/xml/xpath $(distdir)/org/ietf/jgss
+	$(mkdir_p) $(distdir)/. $(distdir)/.. $(distdir)/../config $(distdir)/gnu/awt $(distdir)/gnu/awt/j2d $(distdir)/gnu/awt/xlib $(distdir)/gnu/classpath $(distdir)/gnu/gcj $(distdir)/gnu/gcj/convert $(distdir)/gnu/gcj/io $(distdir)/gnu/gcj/runtime $(distdir)/gnu/gcj/tools/gcj_dbtool $(distdir)/gnu/gcj/util $(distdir)/gnu/gcj/xlib $(distdir)/gnu/java/awt $(distdir)/gnu/java/awt/color $(distdir)/gnu/java/awt/image $(distdir)/gnu/java/awt/peer $(distdir)/gnu/java/awt/peer/gtk $(distdir)/gnu/java/beans $(distdir)/gnu/java/beans/decoder $(distdir)/gnu/java/beans/editors $(distdir)/gnu/java/io $(distdir)/gnu/java/lang $(distdir)/gnu/java/lang/reflect $(distdir)/gnu/java/locale $(distdir)/gnu/java/math $(distdir)/gnu/java/net $(distdir)/gnu/java/net/protocol/core $(distdir)/gnu/java/net/protocol/file $(distdir)/gnu/java/net/protocol/ftp $(distdir)/gnu/java/net/protocol/gcjlib $(distdir)/gnu/java/net/protocol/http $(distdir)/gnu/java/net/protocol/http/event $(distdir)/gnu/java/net/protocol/https $(distdir)/gnu/java/net/protocol/jar $(distdir)/gnu/java/nio $(distdir)/gnu/java/nio/channels $(distdir)/gnu/java/nio/charset $(distdir)/gnu/java/rmi $(distdir)/gnu/java/rmi/dgc $(distdir)/gnu/java/rmi/registry $(distdir)/gnu/java/rmi/rmic $(distdir)/gnu/java/rmi/server $(distdir)/gnu/java/security $(distdir)/gnu/java/security/action $(distdir)/gnu/java/security/ber $(distdir)/gnu/java/security/der $(distdir)/gnu/java/security/pkcs $(distdir)/gnu/java/security/provider $(distdir)/gnu/java/security/util $(distdir)/gnu/java/security/x509 $(distdir)/gnu/java/security/x509/ext $(distdir)/gnu/java/text $(distdir)/gnu/java/util $(distdir)/gnu/java/util/prefs $(distdir)/gnu/javax/swing/text/html/parser $(distdir)/gnu/javax/swing/text/html/parser/models $(distdir)/gnu/javax/swing/text/html/parser/support $(distdir)/gnu/javax/swing/text/html/parser/support/low $(distdir)/gnu/regexp $(distdir)/gnu/xml/aelfred2 $(distdir)/gnu/xml/dom $(distdir)/gnu/xml/dom/html2 $(distdir)/gnu/xml/dom/ls $(distdir)/gnu/xml/libxmlj/dom $(distdir)/gnu/xml/libxmlj/sax $(distdir)/gnu/xml/libxmlj/transform $(distdir)/gnu/xml/libxmlj/util $(distdir)/gnu/xml/pipeline $(distdir)/gnu/xml/transform $(distdir)/gnu/xml/util $(distdir)/gnu/xml/xpath $(distdir)/java/applet $(distdir)/java/awt $(distdir)/java/awt/color $(distdir)/java/awt/datatransfer $(distdir)/java/awt/dnd $(distdir)/java/awt/dnd/peer $(distdir)/java/awt/event $(distdir)/java/awt/font $(distdir)/java/awt/geom $(distdir)/java/awt/im $(distdir)/java/awt/im/spi $(distdir)/java/awt/image $(distdir)/java/awt/image/renderable $(distdir)/java/awt/peer $(distdir)/java/awt/print $(distdir)/java/beans $(distdir)/java/beans/beancontext $(distdir)/java/io $(distdir)/java/lang $(distdir)/java/lang/ref $(distdir)/java/lang/reflect $(distdir)/java/math $(distdir)/java/net $(distdir)/java/nio $(distdir)/java/nio/channels $(distdir)/java/nio/channels/spi $(distdir)/java/nio/charset $(distdir)/java/nio/charset/spi $(distdir)/java/rmi $(distdir)/java/rmi/activation $(distdir)/java/rmi/dgc $(distdir)/java/rmi/registry $(distdir)/java/rmi/server $(distdir)/java/security $(distdir)/java/security/acl $(distdir)/java/security/cert $(distdir)/java/security/interfaces $(distdir)/java/security/spec $(distdir)/java/sql $(distdir)/java/text $(distdir)/java/util $(distdir)/java/util/jar $(distdir)/java/util/logging $(distdir)/java/util/prefs $(distdir)/java/util/regex $(distdir)/java/util/zip $(distdir)/javax/accessibility $(distdir)/javax/crypto $(distdir)/javax/crypto/interfaces $(distdir)/javax/crypto/spec $(distdir)/javax/imageio $(distdir)/javax/imageio/event $(distdir)/javax/imageio/metadata $(distdir)/javax/imageio/spi $(distdir)/javax/imageio/stream $(distdir)/javax/naming $(distdir)/javax/naming/directory $(distdir)/javax/naming/event $(distdir)/javax/naming/ldap $(distdir)/javax/naming/spi $(distdir)/javax/net $(distdir)/javax/net/ssl $(distdir)/javax/print $(distdir)/javax/print/attribute $(distdir)/javax/print/attribute/standard $(distdir)/javax/print/event $(distdir)/javax/security/auth $(distdir)/javax/security/auth/callback $(distdir)/javax/security/auth/login $(distdir)/javax/security/auth/spi $(distdir)/javax/security/auth/x500 $(distdir)/javax/security/cert $(distdir)/javax/security/sasl $(distdir)/javax/sql $(distdir)/javax/swing $(distdir)/javax/swing/border $(distdir)/javax/swing/colorchooser $(distdir)/javax/swing/event $(distdir)/javax/swing/filechooser $(distdir)/javax/swing/plaf $(distdir)/javax/swing/plaf/basic $(distdir)/javax/swing/plaf/metal $(distdir)/javax/swing/table $(distdir)/javax/swing/text $(distdir)/javax/swing/text/html $(distdir)/javax/swing/text/html/parser $(distdir)/javax/swing/text/rtf $(distdir)/javax/swing/tree $(distdir)/javax/swing/undo $(distdir)/javax/transaction $(distdir)/javax/transaction/xa $(distdir)/javax/xml $(distdir)/javax/xml/datatype $(distdir)/javax/xml/namespace $(distdir)/javax/xml/parsers $(distdir)/javax/xml/transform $(distdir)/javax/xml/transform/dom $(distdir)/javax/xml/transform/sax $(distdir)/javax/xml/transform/stream $(distdir)/javax/xml/validation $(distdir)/javax/xml/xpath $(distdir)/org/ietf/jgss
 	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
 	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
 	list='$(DISTFILES)'; for file in $$list; do \
@@ -6186,7 +6355,6 @@
 jniinclude/gnu_java_awt_peer_gtk_GtkFramePeer.h: gnu/java/awt/peer/gtk/GtkFramePeer.java
 jniinclude/gnu_java_awt_peer_gtk_GtkGenericPeer.h: gnu/java/awt/peer/gtk/GtkGenericPeer.java
 jniinclude/gnu_java_awt_peer_gtk_GtkImage.h: gnu/java/awt/peer/gtk/GtkImage.java
-jniinclude/gnu_java_awt_peer_gtk_GtkImagePainter.h: gnu/java/awt/peer/gtk/GtkImagePainter.java
 jniinclude/gnu_java_awt_peer_gtk_GtkLabelPeer.h: gnu/java/awt/peer/gtk/GtkLabelPeer.java
 jniinclude/gnu_java_awt_peer_gtk_GtkListPeer.h: gnu/java/awt/peer/gtk/GtkListPeer.java
 jniinclude/gnu_java_awt_peer_gtk_GtkMenuBarPeer.h: gnu/java/awt/peer/gtk/GtkMenuBarPeer.java
@@ -6232,7 +6400,7 @@
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.lo: $(top_builddir)/jniinclude/gnu_java_awt_peer_gtk_GtkFileDialogPeer.h
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFramePeer.lo: $(top_builddir)/jniinclude/gnu_java_awt_peer_gtk_GtkFramePeer.h
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkGenericPeer.lo: $(top_builddir)/jniinclude/gnu_java_awt_peer_gtk_GtkGenericPeer.h
-jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.lo: $(top_builddir)/jniinclude/gnu_java_awt_peer_gtk_GtkImagePainter.h
+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImage.lo: $(top_builddir)/jniinclude/gnu_java_awt_peer_gtk_GtkImage.h
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.lo: $(top_builddir)/jniinclude/gnu_java_awt_peer_gtk_GtkLabelPeer.h
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.lo: $(top_builddir)/jniinclude/gnu_java_awt_peer_gtk_GtkListPeer.h
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.lo: $(top_builddir)/jniinclude/gnu_java_awt_peer_gtk_GtkMenuBarPeer.h
--- libjava.old/Makefile.am	2005-08-18 20:19:53.542416000 +0200
+++ libjava/Makefile.am	2005-08-18 20:21:41.364033325 +0200
@@ -386,7 +386,7 @@
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.c \
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFramePeer.c \
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkGenericPeer.c \
-jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.c \
+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImage.c \
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.c \
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.c \
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.c \
@@ -435,14 +435,13 @@
 gnu/java/awt/peer/gtk/GtkFramePeer.java	\
 gnu/java/awt/peer/gtk/GtkGenericPeer.java \
 gnu/java/awt/peer/gtk/GtkImage.java \
-gnu/java/awt/peer/gtk/GtkImagePainter.java \
+gnu/java/awt/peer/gtk/GtkImageConsumer.java \
 gnu/java/awt/peer/gtk/GtkLabelPeer.java	\
 gnu/java/awt/peer/gtk/GtkListPeer.java \
 gnu/java/awt/peer/gtk/GtkMenuBarPeer.java \
 gnu/java/awt/peer/gtk/GtkMenuComponentPeer.java	\
 gnu/java/awt/peer/gtk/GtkMenuItemPeer.java \
 gnu/java/awt/peer/gtk/GtkMenuPeer.java \
-gnu/java/awt/peer/gtk/GtkOffScreenImage.java \
 gnu/java/awt/peer/gtk/GtkPanelPeer.java	\
 gnu/java/awt/peer/gtk/GtkPopupMenuPeer.java \
 gnu/java/awt/peer/gtk/GtkScrollPanePeer.java \
@@ -453,7 +452,8 @@
 gnu/java/awt/peer/gtk/GtkToolkit.java \
 gnu/java/awt/peer/gtk/GtkWindowPeer.java \
 gnu/java/awt/peer/gtk/GThreadMutex.java \
-gnu/java/awt/peer/gtk/GThreadNativeMethodRunner.java
+gnu/java/awt/peer/gtk/GThreadNativeMethodRunner.java \
+gnu/java/awt/peer/gtk/GtkVolatileImage.java
 
 
 gtk_jni_headers = $(patsubst %.java,jniinclude/%.h,$(subst /,_,$(gtk_awt_peer_source_files)))
@@ -478,7 +478,6 @@
 jniinclude/gnu_java_awt_peer_gtk_GtkFramePeer.h: gnu/java/awt/peer/gtk/GtkFramePeer.java
 jniinclude/gnu_java_awt_peer_gtk_GtkGenericPeer.h: gnu/java/awt/peer/gtk/GtkGenericPeer.java
 jniinclude/gnu_java_awt_peer_gtk_GtkImage.h: gnu/java/awt/peer/gtk/GtkImage.java
-jniinclude/gnu_java_awt_peer_gtk_GtkImagePainter.h: gnu/java/awt/peer/gtk/GtkImagePainter.java
 jniinclude/gnu_java_awt_peer_gtk_GtkLabelPeer.h: gnu/java/awt/peer/gtk/GtkLabelPeer.java
 jniinclude/gnu_java_awt_peer_gtk_GtkListPeer.h: gnu/java/awt/peer/gtk/GtkListPeer.java
 jniinclude/gnu_java_awt_peer_gtk_GtkMenuBarPeer.h: gnu/java/awt/peer/gtk/GtkMenuBarPeer.java
@@ -524,7 +523,7 @@
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFileDialogPeer.lo: $(top_builddir)/jniinclude/gnu_java_awt_peer_gtk_GtkFileDialogPeer.h
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkFramePeer.lo: $(top_builddir)/jniinclude/gnu_java_awt_peer_gtk_GtkFramePeer.h
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkGenericPeer.lo: $(top_builddir)/jniinclude/gnu_java_awt_peer_gtk_GtkGenericPeer.h
-jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImagePainter.lo: $(top_builddir)/jniinclude/gnu_java_awt_peer_gtk_GtkImagePainter.h
+jni/gtk-peer/gnu_java_awt_peer_gtk_GtkImage.lo: $(top_builddir)/jniinclude/gnu_java_awt_peer_gtk_GtkImage.h
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkLabelPeer.lo: $(top_builddir)/jniinclude/gnu_java_awt_peer_gtk_GtkLabelPeer.h
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkListPeer.lo: $(top_builddir)/jniinclude/gnu_java_awt_peer_gtk_GtkListPeer.h
 jni/gtk-peer/gnu_java_awt_peer_gtk_GtkMenuBarPeer.lo: $(top_builddir)/jniinclude/gnu_java_awt_peer_gtk_GtkMenuBarPeer.h
@@ -1254,6 +1253,7 @@
 gnu/java/awt/EmbeddedWindow.java \
 gnu/java/awt/EmbeddedWindowSupport.java \
 gnu/java/awt/EventModifier.java \
+gnu/java/awt/GradientPaintContext.java \
 gnu/java/awt/color/CieXyzConverter.java \
 gnu/java/awt/color/ClutProfileConverter.java \
 gnu/java/awt/color/ColorLookUpTable.java \
@@ -1676,7 +1676,9 @@
 javax/swing/plaf/basic/BasicComboPopup.java \
 javax/swing/plaf/basic/BasicDesktopIconUI.java \
 javax/swing/plaf/basic/BasicDesktopPaneUI.java \
+javax/swing/plaf/basic/BasicDirectoryModel.java \
 javax/swing/plaf/basic/BasicEditorPaneUI.java \
+javax/swing/plaf/basic/BasicFileChooserUI.java \
 javax/swing/plaf/basic/BasicFormattedTextFieldUI.java \
 javax/swing/plaf/basic/BasicGraphicsUtils.java \
 javax/swing/plaf/basic/BasicInternalFrameTitlePane.java \
@@ -1720,6 +1722,7 @@
 javax/swing/plaf/basic/BasicBorders.java \
 javax/swing/plaf/basic/BasicIconFactory.java \
 javax/swing/plaf/basic/ComboPopup.java \
+javax/swing/plaf/basic/DefaultMenuLayout.java \
 javax/swing/plaf/BorderUIResource.java \
 javax/swing/plaf/UIResource.java \
 javax/swing/plaf/ButtonUI.java \
@@ -1734,8 +1737,30 @@
 javax/swing/plaf/TreeUI.java \
 javax/swing/plaf/ViewportUI.java \
 javax/swing/plaf/metal/DefaultMetalTheme.java \
+javax/swing/plaf/metal/MetalBorders.java \
+javax/swing/plaf/metal/MetalButtonUI.java \
+javax/swing/plaf/metal/MetalCheckBoxUI.java \
+javax/swing/plaf/metal/MetalComboBoxUI.java \
+javax/swing/plaf/metal/MetalDesktopIconUI.java \
+javax/swing/plaf/metal/MetalInternalFrameUI.java \
+javax/swing/plaf/metal/MetalLabelUI.java \
 javax/swing/plaf/metal/MetalLookAndFeel.java \
+javax/swing/plaf/metal/MetalPopupMenuSeparatorUI.java \
+javax/swing/plaf/metal/MetalProgressBarUI.java \
+javax/swing/plaf/metal/MetalRadioButtonUI.java \
+javax/swing/plaf/metal/MetalRootPaneUI.java \
+javax/swing/plaf/metal/MetalScrollBarUI.java \
+javax/swing/plaf/metal/MetalScrollPaneUI.java \
+javax/swing/plaf/metal/MetalSeparatorUI.java \
+javax/swing/plaf/metal/MetalSliderUI.java \
+javax/swing/plaf/metal/MetalSplitPaneUI.java \
+javax/swing/plaf/metal/MetalTabbedPaneUI.java \
+javax/swing/plaf/metal/MetalTextFieldUI.java \
 javax/swing/plaf/metal/MetalTheme.java \
+javax/swing/plaf/metal/MetalToggleButtonUI.java \
+javax/swing/plaf/metal/MetalToolBarUI.java \
+javax/swing/plaf/metal/MetalToolTipUI.java \
+javax/swing/plaf/metal/MetalTreeUI.java \
 javax/swing/plaf/ColorUIResource.java \
 javax/swing/plaf/DimensionUIResource.java \
 javax/swing/plaf/FontUIResource.java \
@@ -1776,6 +1801,7 @@
 javax/swing/filechooser/FileFilter.java \
 javax/swing/filechooser/FileSystemView.java \
 javax/swing/filechooser/FileView.java \
+javax/swing/filechooser/UnixFileSystemView.java \
 javax/swing/table/AbstractTableModel.java \
 javax/swing/table/DefaultTableColumnModel.java \
 javax/swing/table/DefaultTableModel.java \
@@ -1897,9 +1923,11 @@
 javax/swing/text/AttributeSet.java \
 javax/swing/text/BadLocationException.java \
 javax/swing/text/Caret.java \
+javax/swing/text/ChangedCharSetException.java \
 javax/swing/text/ComponentView.java \
 javax/swing/text/DefaultCaret.java \
 javax/swing/text/DefaultEditorKit.java \
+javax/swing/text/DefaultFormatter.java \
 javax/swing/text/DefaultHighlighter.java \
 javax/swing/text/DefaultStyledDocument.java \
 javax/swing/text/Document.java \
@@ -1909,6 +1937,7 @@
 javax/swing/text/FieldView.java \
 javax/swing/text/GapContent.java \
 javax/swing/text/Highlighter.java \
+javax/swing/text/InternationalFormatter.java \
 javax/swing/text/JTextComponent.java \
 javax/swing/text/Keymap.java \
 javax/swing/text/LayeredHighlighter.java \
@@ -1935,7 +1964,26 @@
 javax/swing/text/View.java \
 javax/swing/text/ViewFactory.java \
 javax/swing/text/html/HTML.java \
+javax/swing/text/html/HTMLDocument.java \
+javax/swing/text/html/HTMLEditorKit.java \
+javax/swing/text/html/HTMLFrameHyperlinkEvent.java \
+javax/swing/text/html/parser/AttributeList.java \
+javax/swing/text/html/parser/ContentModel.java \
+javax/swing/text/html/parser/DTD.java \
+javax/swing/text/html/parser/DTDConstants.java \
+javax/swing/text/html/parser/DocumentParser.java \
+javax/swing/text/html/parser/Element.java \
+javax/swing/text/html/parser/Entity.java \
+javax/swing/text/html/parser/Parser.java \
 javax/swing/text/html/parser/ParserDelegator.java \
+javax/swing/text/html/parser/TagElement.java \
+javax/swing/text/rtf/ControlWordToken.java \
+javax/swing/text/rtf/RTFEditorKit.java \
+javax/swing/text/rtf/RTFParseException.java \
+javax/swing/text/rtf/RTFParser.java \
+javax/swing/text/rtf/RTFScanner.java \
+javax/swing/text/rtf/TextToken.java \
+javax/swing/text/rtf/Token.java \
 javax/swing/tree/TreeNode.java \
 javax/swing/tree/AbstractLayoutCache.java \
 javax/swing/tree/DefaultMutableTreeNode.java \
@@ -2113,7 +2161,30 @@
 gnu/java/rmi/server/UnicastRemoteCall.java \
 gnu/java/rmi/server/UnicastRemoteStub.java \
 gnu/java/rmi/server/UnicastServer.java \
-gnu/java/rmi/server/UnicastServerRef.java
+gnu/java/rmi/server/UnicastServerRef.java \
+gnu/javax/swing/text/html/parser/gnuDTD.java \
+gnu/javax/swing/text/html/parser/HTML_401F.java \
+gnu/javax/swing/text/html/parser/htmlAttributeSet.java \
+gnu/javax/swing/text/html/parser/htmlValidator.java \
+gnu/javax/swing/text/html/parser/models/list.java \
+gnu/javax/swing/text/html/parser/models/node.java \
+gnu/javax/swing/text/html/parser/models/noTagModel.java \
+gnu/javax/swing/text/html/parser/models/PCDATAonly_model.java \
+gnu/javax/swing/text/html/parser/models/TableRowContentModel.java \
+gnu/javax/swing/text/html/parser/models/transformer.java \
+gnu/javax/swing/text/html/parser/support/gnuStringIntMapper.java \
+gnu/javax/swing/text/html/parser/support/low/Buffer.java \
+gnu/javax/swing/text/html/parser/support/low/Constants.java \
+gnu/javax/swing/text/html/parser/support/low/Location.java \
+gnu/javax/swing/text/html/parser/support/low/node.java \
+gnu/javax/swing/text/html/parser/support/low/ParseException.java \
+gnu/javax/swing/text/html/parser/support/low/pattern.java \
+gnu/javax/swing/text/html/parser/support/low/Queue.java \
+gnu/javax/swing/text/html/parser/support/low/ReaderTokenizer.java \
+gnu/javax/swing/text/html/parser/support/low/Token.java \
+gnu/javax/swing/text/html/parser/support/parameterDefaulter.java \
+gnu/javax/swing/text/html/parser/support/Parser.java \
+gnu/javax/swing/text/html/parser/support/textPreProcessor.java
 
 javax_imageio_source_files = \
 javax/imageio/ImageWriteParam.java \
@@ -2734,6 +2805,104 @@
 gnu/xml/dom/DomEntity.java \
 gnu/xml/dom/DomCDATASection.java \
 gnu/xml/dom/DomDOMException.java \
+gnu/xml/dom/html2/DomHTMLAnchorElement.java \
+gnu/xml/dom/html2/DomHTMLAppletElement.java \
+gnu/xml/dom/html2/DomHTMLAreaElement.java \
+gnu/xml/dom/html2/DomHTMLBRElement.java \
+gnu/xml/dom/html2/DomHTMLBaseElement.java \
+gnu/xml/dom/html2/DomHTMLBaseFontElement.java \
+gnu/xml/dom/html2/DomHTMLBodyElement.java \
+gnu/xml/dom/html2/DomHTMLButtonElement.java \
+gnu/xml/dom/html2/DomHTMLCollection.java \
+gnu/xml/dom/html2/DomHTMLDocument.java \
+gnu/xml/dom/html2/DomHTMLElement.java \
+gnu/xml/dom/html2/DomHTMLDListElement.java \
+gnu/xml/dom/html2/DomHTMLDirectoryElement.java \
+gnu/xml/dom/html2/DomHTMLDivElement.java \
+gnu/xml/dom/html2/DomHTMLFieldSetElement.java \
+gnu/xml/dom/html2/DomHTMLFontElement.java \
+gnu/xml/dom/html2/DomHTMLFormElement.java \
+gnu/xml/dom/html2/DomHTMLFrameElement.java \
+gnu/xml/dom/html2/DomHTMLFrameSetElement.java \
+gnu/xml/dom/html2/DomHTMLHRElement.java \
+gnu/xml/dom/html2/DomHTMLHeadElement.java \
+gnu/xml/dom/html2/DomHTMLHeadingElement.java \
+gnu/xml/dom/html2/DomHTMLHtmlElement.java \
+gnu/xml/dom/html2/DomHTMLIFrameElement.java \
+gnu/xml/dom/html2/DomHTMLImageElement.java \
+gnu/xml/dom/html2/DomHTMLInputElement.java \
+gnu/xml/dom/html2/DomHTMLIsIndexElement.java \
+gnu/xml/dom/html2/DomHTMLLIElement.java \
+gnu/xml/dom/html2/DomHTMLLabelElement.java \
+gnu/xml/dom/html2/DomHTMLLegendElement.java \
+gnu/xml/dom/html2/DomHTMLLinkElement.java \
+gnu/xml/dom/html2/DomHTMLMapElement.java \
+gnu/xml/dom/html2/DomHTMLMenuElement.java \
+gnu/xml/dom/html2/DomHTMLMetaElement.java \
+gnu/xml/dom/html2/DomHTMLModElement.java \
+gnu/xml/dom/html2/DomHTMLOListElement.java \
+gnu/xml/dom/html2/DomHTMLObjectElement.java \
+gnu/xml/dom/html2/DomHTMLOptGroupElement.java \
+gnu/xml/dom/html2/DomHTMLOptionElement.java \
+gnu/xml/dom/html2/DomHTMLParagraphElement.java \
+gnu/xml/dom/html2/DomHTMLParamElement.java \
+gnu/xml/dom/html2/DomHTMLPreElement.java \
+gnu/xml/dom/html2/DomHTMLQuoteElement.java \
+gnu/xml/dom/html2/DomHTMLScriptElement.java \
+gnu/xml/dom/html2/DomHTMLSelectElement.java \
+gnu/xml/dom/html2/DomHTMLStyleElement.java \
+gnu/xml/dom/html2/DomHTMLTableCaptionElement.java \
+gnu/xml/dom/html2/DomHTMLTableCellElement.java \
+gnu/xml/dom/html2/DomHTMLTableColElement.java \
+gnu/xml/dom/html2/DomHTMLTableElement.java \
+gnu/xml/dom/html2/DomHTMLTableRowElement.java \
+gnu/xml/dom/html2/DomHTMLTableSectionElement.java \
+gnu/xml/dom/html2/DomHTMLTextAreaElement.java \
+gnu/xml/dom/html2/DomHTMLTitleElement.java \
+gnu/xml/dom/html2/DomHTMLUListElement.java \
+gnu/xml/dom/html2/DomHTMLImpl.java \
+gnu/xml/dom/html2/DomHTMLParser.java \
+gnu/xml/libxmlj/dom/GnomeAttr.java \
+gnu/xml/libxmlj/dom/GnomeCDATASection.java \
+gnu/xml/libxmlj/dom/GnomeCharacterData.java \
+gnu/xml/libxmlj/dom/GnomeComment.java \
+gnu/xml/libxmlj/dom/GnomeDOMException.java \
+gnu/xml/libxmlj/dom/GnomeDOMStringList.java \
+gnu/xml/libxmlj/dom/GnomeDocument.java \
+gnu/xml/libxmlj/dom/GnomeDocumentBuilder.java \
+gnu/xml/libxmlj/dom/GnomeDocumentBuilderFactory.java \
+gnu/xml/libxmlj/dom/GnomeDocumentFragment.java \
+gnu/xml/libxmlj/dom/GnomeDocumentType.java \
+gnu/xml/libxmlj/dom/GnomeElement.java \
+gnu/xml/libxmlj/dom/GnomeEntity.java \
+gnu/xml/libxmlj/dom/GnomeEntityReference.java \
+gnu/xml/libxmlj/dom/GnomeNamedNodeMap.java \
+gnu/xml/libxmlj/dom/GnomeNode.java \
+gnu/xml/libxmlj/dom/GnomeNodeList.java \
+gnu/xml/libxmlj/dom/GnomeNotation.java \
+gnu/xml/libxmlj/dom/GnomeProcessingInstruction.java \
+gnu/xml/libxmlj/dom/GnomeText.java \
+gnu/xml/libxmlj/dom/GnomeTypeInfo.java \
+gnu/xml/libxmlj/dom/GnomeXPathExpression.java \
+gnu/xml/libxmlj/dom/GnomeXPathNSResolver.java \
+gnu/xml/libxmlj/dom/GnomeXPathNodeList.java \
+gnu/xml/libxmlj/dom/GnomeXPathResult.java \
+gnu/xml/libxmlj/sax/GnomeLocator.java \
+gnu/xml/libxmlj/sax/GnomeSAXParser.java \
+gnu/xml/libxmlj/sax/GnomeSAXParserFactory.java \
+gnu/xml/libxmlj/sax/GnomeXMLReader.java \
+gnu/xml/libxmlj/sax/Namespaces.java \
+gnu/xml/libxmlj/sax/StringArrayAttributes.java \
+gnu/xml/libxmlj/sax/XMLName.java \
+gnu/xml/libxmlj/transform/ErrorListenerErrorHandler.java \
+gnu/xml/libxmlj/transform/GnomeTransformer.java \
+gnu/xml/libxmlj/transform/GnomeTransformerFactory.java \
+gnu/xml/libxmlj/transform/URIResolverEntityResolver.java \
+gnu/xml/libxmlj/util/EmptyNodeList.java \
+gnu/xml/libxmlj/util/NamedInputStream.java \
+gnu/xml/libxmlj/util/StandaloneDocumentType.java \
+gnu/xml/libxmlj/util/StandaloneLocator.java \
+gnu/xml/libxmlj/util/XMLJ.java \
 gnu/xml/transform/GenerateIdFunction.java \
 gnu/xml/transform/FormatNumberFunction.java \
 gnu/xml/transform/ValueOfNode.java \
@@ -2759,7 +2928,6 @@
 gnu/xml/transform/TransformerFactoryImpl.java \
 gnu/xml/transform/TextNode.java	\
 gnu/xml/transform/CopyNode.java	\
-gnu/xml/transform/SystemPropertyFunction.java \
 gnu/xml/transform/Stylesheet.java \
 gnu/xml/transform/ProcessingInstructionNode.java \
 gnu/xml/transform/UnparsedEntityUriFunction.java \
