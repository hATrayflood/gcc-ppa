#! /bin/sh -e

# DP: PR middle-end/26557 (ice-on-vaild-code, regression), gcc-4_0-branch

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p0 < $0
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p0 < $0
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

2006-03-15  Roger Sayle  <roger@eyesopen.com>

        PR middle-end/26557
        * stmt.c (emit_case_nodes): Handle the case where the index is a
        CONST_INT, where the comparison mode is specified by the index type.

2006-03-15  Roger Sayle  <roger@eyesopen.com>

	PR middle-end/26557
	* gcc.c-torture/compile/switch-1.c: New test case.


Index: gcc/testsuite/gcc.c-torture/compile/switch-1.c
===================================================================
--- gcc/testsuite/gcc.c-torture/compile/switch-1.c	(revision 0)
+++ gcc/testsuite/gcc.c-torture/compile/switch-1.c	(revision 112111)
@@ -0,0 +1,9 @@
+/* PR middle-end/26557.  */
+const int struct_test[1] = {1};
+void g();
+void f() {
+  switch(struct_test[0]) {
+    case 1: g();
+  }
+}
+
Index: gcc/stmt.c
===================================================================
--- gcc/stmt.c	(revision 112110)
+++ gcc/stmt.c	(revision 112111)
@@ -2938,6 +2938,10 @@
   enum machine_mode mode = GET_MODE (index);
   enum machine_mode imode = TYPE_MODE (index_type);
 
+  /* Handle indices detected as constant during RTL expansion.  */
+  if (mode == VOIDmode)
+    mode = imode;
+
   /* See if our parents have already tested everything for us.
      If they have, emit an unconditional jump for this node.  */
   if (node_is_bounded (node, index_type))
