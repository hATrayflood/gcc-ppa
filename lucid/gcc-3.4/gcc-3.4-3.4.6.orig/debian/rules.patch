# -*- makefile -*-
# rules to patch the unpacked files in the source directory
# ---------------------------------------------------------------------------
# various rules to unpack addons and (un)apply patches.
# 	- patch / apply-patches
#	- unpatch / reverse-patches

.NOTPARALLEL:

patchdir	= debian/patches

# which patches should be applied?
debian_patches = \
	gcc-textdomain \

ifneq ($(GFDL_INVARIANT_FREE),yes)
  debian_patches += \
	rename-info-files
endif

debian_patches += \
	libstdc++-pic \
	libstdc++-doclink \
	libstdc++-doxygen-syntax \
	amd64-specs \
	gccbug \
	gccbug-posix \
	hppa-toplevel hppa-libffi hppa-libjava hppa-libjava-update \
	fastjar-update \
	fastjar-version \
	boehm-gc-nocheck \
	libltdl \
	m68k-update \
	libf2c-mxunit \
	arm-bigendian \
	makeinfo-version-check \

ifneq ($(DEB_TARGET_ARCH),lpia)
  debian_patches += cpu-default-i486
endif

ifeq ($(GFDL_INVARIANT_FREE),yes)
  debian_patches += \
	fastjar-doc
endif

#	svn-updates \
#	disable-gnat-testsuite \

ifeq ($(with_multiarch_lib),yes)
  debian_patches += multiarch-lib
endif

ifeq ($(with_java),yes)
  debian_patches += gcj-without-rpath
endif

debian_patches += libffi-soversion # package disabled, but patch needed
ifeq ($(with_libffi),yes)
  #debian_patches += libffi-soversion
  ifneq ($(with_java),yes)
    debian_patches += libffi-without-libgcj
  endif
endif

ifeq ($(with_proto),yes)
  debian_patches += deb-protoize
endif

ifeq ($(with_objc),yes)
  debian_patches += # libobjc
endif

ifeq ($(with_ada),yes)
  ifeq ($(with_libgnat),yes)
    debian_patches += ada-link-lib
  endif
  debian_patches += ada-gcc-name #ada-names
  #debian_patches += ignore-comp-fail
endif

ifeq ($(with_pascal),yes)
  debian_patches += gpc-20060215-20060322 gpc-3.x gpc-doc gpc-updates gpc-bison-2.2
  debian_patches += gpc-names
  ifneq ($(with_gpidump),yes)
    debian_patches += gpc-no-gpidump
  endif
endif

ifeq ($(DEB_TARGET_ARCH_OS),hurd)
  debian_patches += hurd-changes
endif

ifeq ($(DEB_TARGET_GNU_CPU),m32r)
  debian_patches += m32r-gotoff m32r-stack m32r-libffi \
	m32r-fixes m32r-limits m32r-pie m32r-remove-addsi3 m32r-auto
endif
ifeq ($(DEB_TARGET_ARCH),alpha)
  debian_patches += alpha-ieee
endif

ifeq (,$(findstring /$(DEB_TARGET_ARCH)/,/mips/mipsel/))
  debian_patches += libffi-mips libjava-mips libstdc++-mips-atomic
endif

ifeq ($(biarch),yes)
  debian_patches += biarch-include config-ml

  ifeq ($(DEB_TARGET_ARCH),i386)
    debian_patches += i386-biarch
  endif
  ifeq ($(DEB_TARGET_ARCH),s390)
    debian_patches += s390-biarch
  endif
  ifeq ($(DEB_TARGET_ARCH),sparc)
    debian_patches += sparc-biarch
  endif
  ifneq ($(with_64bit_check),yes)
    debian_patches += libstdc++-disable-run-check
  endif
endif

ifeq ($(biarch32),yes)
  debian_patches += biarch-include config-ml

  ifeq ($(DEB_TARGET_ARCH),amd64)
    debian_patches += amd64-biarch
  endif
  ifeq ($(DEB_TARGET_ARCH),ppc64)
    debian_patches += ppc64-biarch
  endif
  ifneq ($(with_32bit_check),yes)
    debian_patches += libstdc++-disable-run-check
  endif
endif

ifeq (,$(findstring yes, $(biarch)$(biarch32)))
  debian_patches += multiarch-include
endif

ifeq ($(DEB_TARGET_ARCH_OS),kfreebsd)
  debian_patches += kbsd-gnu kbsd-gnu-ada
endif
ifeq ($(DEB_TARGET_ARCH_OS),knetbsd)
  debian_patches += kbsd-gnu
endif
ifeq ($(DEB_TARGET_ARCH_OS),netbsd)
  debian_patches += # netbsd-all-gcc netbsd-archs-gcc
endif

ifdef DEB_CROSS
  debian_patches += cross-configure
endif

# not applied by default
#debian_patches += protector

debian_patches += link-libs reporting gcc-version

ifeq ($(DEB_TARGET_ARCH_OS),linux)
  debian_patches += configure-deplibs_check_method # applied last
endif


patch: $(patch_stamp)
$(patch_stamp): $(unpack_stamp) pre-patch \
    $(foreach p,$(debian_patches),$(patch_stamp)-$(p))
	echo -e "\nPatches that $(distribution) applied in this version:" > pxxx
	for i in $(debian_patches); do \
	  echo -e "\n$$i:" >> pxxx; \
	  sed -n 's/^# *DP: */  /p' $(patchdir)/$$i.dpatch >> pxxx; \
	done
	mv -f pxxx $@

pre-patch:
	@if [ -x /usr/bin/automake-1.4 ]; then \
	  : ; \
	else \
	  mkdir -p $(PWD)/bin; \
	  ln -sf /usr/bin/automake $(PWD)/bin/automake-1.4; \
	fi

unpatch:
	for stamp in none `ls -1t $(patch_stamp)-*`; do \
	  case "$$stamp" in none|patched-stamp|patched-\*) continue; esac; \
	  patch=`echo $$stamp | sed -e 's,$(patch_stamp)-,,'`; \
	  echo "trying to revert patch $$patch ..."; \
	  if [ -x $(patchdir)/$$patch.dpatch ]; then true; else \
	    chmod +x $(patchdir)/$$patch.dpatch; fi; \
	  if $(patchdir)/$$patch.dpatch -unpatch -d $(srcdir); then \
	    echo "reverted $$patch patch."; \
	    rm -f $$stamp; \
	  else \
	    echo "error in reverting $$patch patch."; \
	    exit 1; \
	  fi; \
	done
	rm -f patched-stamp

# debian/rules.conf isn't yet sourced
SOURCE_VERSION := $(shell dpkg-parsechangelog | awk '/^Version:/ {print $$NF}')
DEB_VERSION := $(shell echo $(SOURCE_VERSION) | sed 's/ds[0-9]*//')

$(patch_stamp)-%: $(patchdir)/%.dpatch
	if [ -x $< ]; then true; else chmod +x $<; fi
	if [ -f $@ ]; then \
	  echo "$* patches already applied."; exit 1; \
	fi
	DEB_VERSION='$(DEB_VERSION)'; export DEB_VERSION; \
	$< -patch -d $(srcdir)
	echo "$* patches applied." > $@
