#! /bin/sh -e

# All lines beginning with `# DPATCH:' are a description of the patch.
# DP: Enable libjava support for hppa

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p1 < $0
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p1 < $0
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

2004-02-10  Randolph Chung  <tausq@debian.org>
 
	* configure.in: Build java for hppa target.
	* libjava/configure.host (hppa-*): Add target.
	* libjava/sysdeps/pa/lock.h: New file.

diff -uNr src.orig/configure.in src/configure.in
--- src.orig/configure.in	2004-02-11 21:34:27.418499952 -0800
+++ src/configure.in	2004-02-11 21:37:17.619625448 -0800
@@ -487,7 +487,6 @@
   hppa*-*-lites* | \
   hppa*-*-openbsd* | \
   hppa*64*-*-*)
-    noconfigdirs="$noconfigdirs ${libgcj}"
     # Do configure ld/binutils/gas for this case.
     ;;
   hppa*-*-*)
diff -uNr src.orig/libjava/configure.host src/libjava/configure.host
--- src.orig/libjava/configure.host	2004-02-11 21:34:26.638618512 -0800
+++ src/libjava/configure.host	2004-02-11 21:38:59.687108832 -0800
@@ -115,6 +115,11 @@
 	enable_hash_synchronization_default=yes
 	IEEESPEC=-mieee
 	;;
+  hppa-*)
+	sysdeps_dir=pa
+	libgcj_interpreter=yes
+	enable_hash_synchronization_default=yes
+	;;
   powerpc64*-*)
 	sysdeps_dir=powerpc
 	libgcj_interpreter=yes
diff -uNr src.orig/libjava/sysdep/pa/locks.h src/libjava/sysdep/pa/locks.h
--- src.orig/libjava/sysdep/pa/locks.h	1969-12-31 16:00:00.000000000 -0800
+++ src/libjava/sysdep/pa/locks.h	2004-02-11 21:40:03.542401352 -0800
@@ -0,0 +1,78 @@
+// locks.h - Thread synchronization primitives. PARISC implementation.
+
+/* Copyright (C) 2002  Free Software Foundation
+
+   This file is part of libgcj.
+
+This software is copyrighted work licensed under the terms of the
+Libgcj License.  Please consult the file "LIBGCJ_LICENSE" for
+details.  */
+
+#ifndef __SYSDEP_LOCKS_H__
+#define __SYSDEP_LOCKS_H__
+
+typedef size_t obj_addr_t;	/* Integer type big enough for object	*/
+				/* address.				*/
+
+// Atomically replace *addr by new_val if it was initially equal to old.
+// Return true if the comparison succeeded.
+// Assumed to have acquire semantics, i.e. later memory operations
+// cannot execute before the compare_and_swap finishes.
+inline static bool
+compare_and_swap(volatile obj_addr_t *addr,
+	 	 obj_addr_t old,
+		 obj_addr_t new_val) 
+{
+  /* FIXME: not atomic */
+  obj_addr_t prev;
+
+  if ((prev = *addr) == old)
+    {
+      *addr = new_val;
+      return true;
+    }
+  else
+    {
+      return false;
+    }
+}
+
+// Set *addr to new_val with release semantics, i.e. making sure
+// that prior loads and stores complete before this
+// assignment.
+inline static void
+release_set(volatile obj_addr_t *addr, obj_addr_t new_val)
+{
+  __asm__ __volatile__(" " : : : "memory");
+  *(addr) = new_val;
+}
+
+// Compare_and_swap with release semantics instead of acquire semantics.
+// On many architecture, the operation makes both guarantees, so the
+// implementation can be the same.
+inline static bool
+compare_and_swap_release(volatile obj_addr_t *addr,
+	 				             obj_addr_t old,
+						     obj_addr_t new_val) 
+{
+  return compare_and_swap(addr, old, new_val);
+}
+
+// Ensure that subsequent instructions do not execute on stale
+// data that was loaded from memory before the barrier.
+inline static void
+read_barrier()
+{
+  __asm__ __volatile__(" " : : : "memory");
+}
+
+// Ensure that prior stores to memory are completed with respect to other
+// processors.
+inline static void
+write_barrier()
+{
+  __asm__ __volatile__(" " : : : "memory");
+}
+
+#endif
+
