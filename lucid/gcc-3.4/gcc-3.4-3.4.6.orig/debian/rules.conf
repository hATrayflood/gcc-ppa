# -*- makefile -*-
# rules.conf
#	- used to build debian/control and debian/rules.parameters
#	- assumes unpacked sources

include debian/rules.defs

# The binutils version needed.
# The oldest suitable versions for the various platforms can be found in
# INSTALL/specific.html ; we take a tighter dependency if possible to be on
# the safe side (something like newest( version in stable, versions for the
# various platforms in INSTALL/specific.html) ).
BINUTILSV = 2.16.1-3
ifdef DEB_CROSS
  BINUTILS_BUILD_DEP = binutils$(TS) (>= $(BINUTILSV))
else
  BINUTILS_BUILD_DEP = binutils (>= $(BINUTILSV)) | binutils-multiarch (>= $(BINUTILSV))
endif

# libc-dev dependencies
libc_ver := 2.3.5-10
ifeq ($(findstring linux, $(DEB_TARGET_GNU_SYSTEM)),linux)
  ifeq ($(DEB_TARGET_GNU_CPU), $(findstring $(DEB_TARGET_GNU_CPU),alpha ia64))
    LIBC_DEV_DEP = libc6.1-dev$(LS) (>= $(libc_ver))
  else
    LIBC_DEV_DEP = libc6-dev$(LS) (>= $(libc_ver))
  endif
else
  ifeq ($(DEB_TARGET_GNU_SYSTEM),gnu)
    LIBC_DEV_DEP = libc0.3-dev$(LS)
  endif
  ifeq ($(DEB_TARGET_GNU_SYSTEM),kfreebsd-gnu)
    LIBC_DEV_DEP = libc0.1-dev
  endif
  ifeq ($(DEB_TARGET_GNU_SYSTEM),knetbsd-gnu)
    LIBC_DEV_DEP = libc0.1-dev$(LS)
  endif
  ifeq ($(DEB_TARGET_GNU_SYSTEM),netbsd-elf-gnu)
    LIBC_DEV_DEP = libc12-dev$(LS)
  endif
endif

LIBC_BUILD_DEP := libc6.1-dev (>= $(libc_ver)) [alpha ia64] | libc0.3-dev (>= $(libc_ver)) [hurd-i386] | libc0.1-dev (>= $(libc_ver)) [kfreebsd-i386 knetbsd-gnu] | libc12-dev (>= $(libc_ver)) [netbsd-elf-gnu] | libc6-dev (>= $(libc_ver))
LIBC_BIARCH_BUILD_DEP = libc6-dev-amd64 [i386], libc6-dev-sparc64 [sparc], libc6-dev-s390x [s390], libc6-dev-i386 [amd64], libc6-dev-powerpc [ppc64], libc6-dev-ppc64 [powerpc], lib32gcc1 [amd64 ppc64], lib64gcc1 [powerpc i386 sparc s390],

#GNAT_BUILD_DEP := gnat-3.4 [ada_no_archs],
#JAVA_BUILD_DEP := libxtst-dev [java_no_archs], libgtk2.0-dev (>= 2.4.4-2) [java_no_archs], libart-2.0-dev [java_no_archs],
PASCAL_BUILD_DEP := libncurses5-dev [pascal_no_archs], texlive-latex-base [pascal_no_archs], libgmp3-dev [pascal_no_archs], help2man [pascal_no_archs],

ifeq ($(PKGSOURCE),gcc-snapshot)
  LIBC_BIARCH_BUILD_DEP =
endif

LIBC_BIARCH_DEP :=
LIBC_BIARCH_DEV_DEP :=
LIBCXX_BIARCH_DEP :=
ifeq ($(biarch),yes)
  ifeq ($(DEB_TARGET_ARCH),i386)
    LIBC_BIARCH_DEP := libc6-amd64 (>= $(libc_ver))
    LIBC_BIARCH_DEV_DEP := libc6-dev-amd64
  endif
  ifeq ($(DEB_TARGET_ARCH),powerpc)
    LIBC_BIARCH_DEP := libc6-ppc64 (>= $(libc_ver))
    LIBC_BIARCH_DEV_DEP := libc6-dev-ppc64 (>= $(libc_ver))
  endif
  ifeq ($(DEB_TARGET_ARCH),sparc)
    LIBC_BIARCH_DEP := libc6-sparc64 (>= $(libc_ver))
    LIBC_BIARCH_DEV_DEP := libc6-dev-sparc64 (>= $(libc_ver))
  endif
  ifeq ($(DEB_TARGET_ARCH),s390)
    LIBC_BIARCH_DEP := libc6-s390x (>= $(libc_ver))
    LIBC_BIARCH_DEV_DEP := libc6-dev-s390x (>= $(libc_ver))
  endif
  LIBCXX_BIARCH_DEP = lib64stdc++$(CXX_SONAME)
endif
ifeq ($(biarch32),yes)
  ifeq ($(DEB_TARGET_ARCH),amd64)
    LIBC_BIARCH_DEV_DEP := libc6-dev-i386 (>= $(libc_ver))
    LIBC_BIARCH_DEP := libc6-i386 (>= $(libc_ver))
  endif
  ifeq ($(DEB_TARGET_ARCH),ppc64)
    LIBC_BIARCH_DEP := libc6-powerpc (>= $(libc_ver))
    LIBC_BIARCH_DEV_DEP := libc6-dev-powerpc (>= $(libc_ver))
  endif
  LIBCXX_BIARCH_DEP = lib32stdc++$(CXX_SONAME)
endif

LIBUNWIND_DEV_DEP :=
ifeq ($(DEB_TARGET_ARCH),ia64)
  LIBUNWIND_DEV_DEP := libunwind7-dev (>= 0.98.5-6)
endif

ifdef DEB_CROSS
  # When building a cross compiler, the libc-dev build dependancy must be
  # sensitive to the target architecture; the host architecture is irrelevant.
  LIBC_BUILD_DEP = $(LIBC_DEV_DEP)
  LIBC_BIARCH_BUILD_DEP =
  LIBUNWIND_DEV_DEP =
endif

SOURCE_VERSION := $(shell dpkg-parsechangelog | awk '/^Version:/ {print $$NF}')
DEB_VERSION := $(shell echo $(SOURCE_VERSION) \
	| sed -e 's/.*://' -e 's/ds[0-9]*//')
# epoch used for gcc versions up to 3.3.x, now used for some remaining
# libraries: libgcc1, libobjc1, libffi2, libffi2-dev, libg2c0
EPOCH := 1
DEB_EVERSION := $(EPOCH):$(DEB_VERSION)
DEB_VERSION_NOREL := $(shell echo $(DEB_VERSION) | sed 's/-[^-]*$$//')
BASE_VERSION := $(shell echo $(DEB_VERSION) | sed -e 's/\([1-9]\.[0-9]\).*-.*/\1/')

# The version number can be found in gcc/version.c e.g.
# char *version_string = "2.95 19990710 (prerelease)";
VER := $(strip $(shell grep version_string $(srcdir)/gcc/version.c \
			| sed -e 's/^.*= *"//' -e 's/ .*$$//' -e 's/".*$$//'))
# The numeric part of the gcc version number (x.yy.zz)
NEXTVER := $(shell echo $(VER) | \
		awk -F. '{OFS="."; if (NF==2) $$3=1; else $$NF += 1; print}')
# first version with a new path component in gcc_lib_dir (i.e. GCC_VERSION
# or TARGET_ALIAS changes)
BREAKS_VERSION = 3.4.4-1
GPC_DATE := $(shell sed -n 's/^.define GPC_VERSION_STRING "\(.*\)"/\1/p' $(srcdir)/gcc/p/version.h || true)
DEB_GPC_VERSION := $(shell echo $(DEB_VERSION) \
			   | sed 's/.*:\(.*\)-\(.*\)/2:\1.$(GPC_DATE)-\2/')
# semiautomatic ...
DEB_SOVERSION := $(VER)-1
DEB_SOVERSION := $(DEB_VERSION)
DEB_SOVERSION := 3.4.4
DEB_SOEVERSION := $(EPOCH):3.4.4
DEB_STDCXX_SOVERSION := 3.4.4
DEB_FFI_SOVERSION := $(DEB_SOVERSION)
DEB_F2C_SOVERSION := 1:3.4.4-5

# manual ...
ifeq ($(DEB_TARGET_GNU_CPU), $(findstring $(DEB_TARGET_GNU_CPU),hppa m68k))
  GCC_SONAME := 2
  DEB_LIBGCC_SOVERSION := $(DEB_SOVERSION)
  DEB_LIBGCC_VERSION := $(DEB_VERSION)
else
  GCC_SONAME := 1
  DEB_LIBGCC_SOVERSION := $(DEB_SOEVERSION)
  DEB_LIBGCC_VERSION :=  $(DEB_EVERSION)
endif

LIBGCC_DEP := libgcc$(GCC_SONAME) (>= $(DEB_LIBGCC_VERSION))
LIBGCC_BIARCH_DEP := 
ifeq ($(biarch),yes)
  LIBGCC_BIARCH_DEP := lib64gcc$(GCC_SONAME) (>= $(DEB_LIBGCC_VERSION))
endif
ifeq ($(biarch32),yes)
  LIBGCC_BIARCH_DEP := lib32gcc$(GCC_SONAME) (>= $(DEB_LIBGCC_VERSION))
endif

CXX_SONAME := $(strip $(shell awk -F= \
			'/^libtool_VERSION/ {split($$2,v,":"); print v[1]}' \
			$(srcdir)/libstdc++-v3/configure.ac))

OBJC_SONAME := $(strip $(shell awk '/^LIBOBJC_VERSION/ \
					{split($$3,v,":"); print v[1]}' \
				$(srcdir)/libobjc/Makefile.in))

F77_SONAME := $(strip $(shell awk -F= \
			'/^VERSION_MAJOR/ {split($$2,v,":"); print v[1]}' \
				$(srcdir)/libf2c/Makefile.in))

GCJ_SONAME := $(strip $(shell tail -1 $(srcdir)/libjava/libtool-version \
				  | awk -F: '{ print $$1 }' ))

FFI_SONAME := $(strip $(shell tail -1 $(srcdir)/libffi/libtool-version \
				  | awk -F: '{ print $$1 }' ))

GNAT_SONAME := $(strip $(shell \
		grep '[^_]Library_Version.*:' $(srcdir)/gcc/ada/gnatvsn.ads \
		  | sed -e 's/.*"\([^"]*\)".*/\1/'))

GNAT_VERSION := $(BASE_VERSION)

LIBGNAT_DEP :=
ifeq ($(with_libgnat),yes)
  LIBGNAT_DEP := libgnat-$(GNAT_VERSION) (= $(DEB_VERSION))
endif

GPC_BASE_VERSION := 2.1

pkg_ver := -$(BASE_VERSION)
gpc_pkg_ver := -$(GPC_BASE_VERSION)$(pkg_ver)

ctrl_flags = \
	-DBINUTILSV=$(BINUTILSV) \
	-DSRCNAME=$(PKGSOURCE) \
	-D__$(DEB_TARGET_GNU_CPU)__ \
	-DARCH=$(DEB_TARGET_ARCH) \
	-DDIST=$(distribution)
ifeq ($(with_objc)-$(with_objc_gc),yes-yes)
  ctrl_flags +=	-DOBJC_GC
endif
ctrl_flags +=	-DG2C_CEV=1:3.3.4-4

ctrl_flags += \
	-DLIBC_DEV_DEP="$(LIBC_DEV_DEP)" \
	-DLIBC_BIARCH_BUILD_DEP="$(LIBC_BIARCH_BUILD_DEP)" \
	-DBINUTILS_BUILD_DEP="$(BINUTILS_BUILD_DEP)" \
	-DLIBC_BUILD_DEP="$(LIBC_BUILD_DEP)" \
	-DGNAT_BUILD_DEP="$(GNAT_BUILD_DEP)" \
	-DJAVA_BUILD_DEP="$(JAVA_BUILD_DEP)" \
	-DPASCAL_BUILD_DEP="$(PASCAL_BUILD_DEP)" \
	-DTP=$(TP) \
	-DTS=$(TS) \
	-DLS=$(LS)

ifdef DEB_CROSS
  ifeq ($(DEB_TARGET_ARCH),sparc)
    TARGETBD = , libc6-dev-sparc64-sparc-cross
  endif
  ifeq ($(DEB_TARGET_ARCH),s390)
    TARGETBD = , libc6-dev-s390x-s390-cross
  endif
  ifeq ($(DEB_TARGET_ARCH),ia64)
    TARGETBD = , libunwind7-dev-ia64-cross (>= 0.98.3-3), libatomic-ops-dev-ia64-cross
  endif
  ctrl_flags += \
	-DTARGET=$(DEB_TARGET_ARCH) \
	-DTARGETBD="$(TARGETBD)"
else
  # add '-DPRI=optional' to ctrl_flags if this is not the default compiler
  ctrl_flags += \
	-DPRI=optional
endif

ifeq ($(with_base_only),yes)
  ctrl_flags += \
	-DBASE_ONLY=yes
endif

control: control-file parameters-file substvars-file versioned-files

ifdef DEB_CROSS
  languages = c c++
  addons = libgcc lib64gcc libcxx lib64cxx cdev c++dev
else
  languages = c c++ f77 pascal
  addons = cdev c++dev fdev libg2c lib64g2c lib32g2c libs \
	   # libcxx lib64cxx \
	   # lib64objc lib64gcc libgcc objcdev proto # libnof
  languages += objc
  addons += gccbase objcdev
  #languages += java treelang ada objc
  #addons += fixincl fastjar javadev libffi libgcj lib64ffi lib64gcj
  #addons += libgnat libobjc 
endif

ifneq ($(GFDL_INVARIANT_FREE),yes)
  addons += gfdldoc
endif

control-file:
	echo "addons: $(addons)"; \
	m4 $(ctrl_flags) \
	  -DPV=$(pkg_ver) \
	  -DGPC_PV=$(gpc_pkg_ver) \
	  -DCXX_SO=$(CXX_SONAME) \
	  -DGCC_SO=$(GCC_SONAME) \
	  -DOBJC_SO=$(OBJC_SONAME) \
	  -DG2C_SO=$(F77_SONAME) \
	  -DGCJ_SO=$(GCJ_SONAME) \
	  -DGNAT_SO=$(GNAT_SONAME) \
	  -DGNAT_V=$(GNAT_VERSION) \
	  -DFFI_SO=$(FFI_SONAME) \
	  -Denabled_languages="$(languages) $(addons)" \
	  -Dada_no_archs="$(foreach arch,$(ada_no_cpus) $(ada_no_systems),!$(arch))" \
	  -Djava_no_archs="$(foreach arch,$(java_no_cpus) $(java_no_systems),!$(arch))" \
	  -Dpascal_no_archs="$(foreach arch,$(pascal_no_cpus) $(pascal_no_systems),!$(arch))" \
	  -Dlibgc_no_archs="$(foreach arch,$(libgc_no_cpus) $(libgc_no_systems),!$(arch))" \
	  -Dcheck_no_archs="$(foreach arch,$(check_no_cpus) $(check_no_systems),!$(arch))" \
	  -Dlocale_no_archs="$(foreach arch,$(locale_no_cpus) $(locale_no_systems),!$(arch))" \
	  -Dbiarch32_archs="$(strip $(subst /, ,$(biarch32_archs)))" \
	  -Dbiarch64_archs="$(strip $(subst /, ,$(biarch_archs)))" \
		debian/control.m4 > debian/control.tmp2
	uniq debian/control.tmp2 > debian/control.tmp
	rm -f debian/control.tmp2
	[ -e debian/control ] \
	  && cmp -s debian/control debian/control.tmp \
	  && rm -f debian/control.tmp && exit 0; \
	  mv debian/control.tmp debian/control; touch $(control_stamp)

substvars-file:
	rm -f debian/substvars.local.tmp
	( \
		echo 'gcc:Version=$(DEB_VERSION)'; \
		echo 'gcc:SoftVersion=$(DEB_VERSION_NOREL)'; \
		echo 'gcc:EpochVersion=$(DEB_EVERSION)'; \
		echo 'gpc:Version=$(DEB_GPC_VERSION)'; \
		echo 'binutils:Version=$(BINUTILSV)'; \
		echo 'dep:libgcc=$(LIBGCC_DEP)'; \
		echo 'dep:libgccbiarch=$(LIBGCC_BIARCH_DEP)'; \
		echo 'dep:libcdev=$(LIBC_DEV_DEP)'; \
		echo 'dep:libcbiarch=$(LIBC_BIARCH_DEP)'; \
		echo 'dep:libcbiarchdev=$(LIBC_BIARCH_DEV_DEP)'; \
		echo 'dep:libunwinddev=$(LIBUNWIND_DEV_DEP)'; \
		echo 'dep:libcxxbiarch=$(LIBCXX_BIARCH_DEP)'; \
		echo 'dep:libgnat=$(LIBGNAT_DEP)'; \
	) > debian/substvars.local.tmp
	[ -e debian/substvars.local ] \
	  && cmp -s debian/substvars.local debian/substvars.local.tmp \
	  && rm -f debian/substvars.local.tmp && exit 0; \
	  mv debian/substvars.local.tmp debian/substvars.local; \
	  touch $(control_stamp)

parameters-file:
	rm -f debian/rules.parameters.tmp
	( \
		echo '# configuration parameters taken from upstream source files'; \
		echo 'VER		:= $(VER)'; \
		echo 'BASE_VERSION	:= $(BASE_VERSION)'; \
		echo 'SOURCE_VERSION	:= $(SOURCE_VERSION)'; \
		echo 'DEB_VERSION	:= $(DEB_VERSION)'; \
		echo 'DEB_VERSION_NOREL	:= $(DEB_VERSION_NOREL)'; \
		echo 'DEB_EVERSION	:= $(DEB_EVERSION)'; \
		echo 'GPC_BASE_VERSION	:= $(GPC_BASE_VERSION)'; \
		echo 'DEB_GPC_VERSION	:= $(DEB_GPC_VERSION)'; \
		echo 'DEB_SOVERSION	:= $(DEB_SOVERSION)'; \
		echo 'DEB_SOEVERSION	:= $(DEB_SOEVERSION)'; \
		echo 'DEB_LIBGCC_SOVERSION	:= $(DEB_LIBGCC_SOVERSION)'; \
		echo 'DEB_LIBGCC_VERSION	:= $(DEB_LIBGCC_VERSION)'; \
		echo 'DEB_STDCXX_SOVERSION	:= $(DEB_STDCXX_SOVERSION)'; \
		echo 'DEB_FFI_SOVERSION	:= $(DEB_FFI_SOVERSION)'; \
		echo 'DEB_F2C_SOVERSION	:= $(DEB_F2C_SOVERSION)'; \
		echo 'GCC_SONAME	:= $(GCC_SONAME)'; \
		echo 'CXX_SONAME	:= $(CXX_SONAME)'; \
		echo 'F77_SONAME	:= $(F77_SONAME)'; \
		echo 'OBJC_SONAME	:= $(OBJC_SONAME)'; \
		echo 'GCJ_SONAME	:= $(GCJ_SONAME)'; \
		echo 'GNAT_VERSION	:= $(GNAT_VERSION)'; \
		echo 'GNAT_SONAME	:= $(GNAT_SONAME)'; \
		echo 'FFI_SONAME	:= $(FFI_SONAME)'; \
		echo 'LIBC_DEP		:= $(LIBC_DEP)'; \
	) > debian/rules.parameters.tmp
	[ -e debian/rules.parameters ] \
	  && cmp -s debian/rules.parameters debian/rules.parameters.tmp \
	  && rm -f debian/rules.parameters.tmp && exit 0; \
	  mv debian/rules.parameters.tmp debian/rules.parameters; \
	  touch $(control_stamp)

versioned-files:
	for f in debian/*-BV*; do \
	  f2=$$(echo $$f \
		| sed 's/BV/$(BASE_VERSION)/;s/PV/$(GPC_BASE_VERSION)/'); \
	  sed -e 's/@BV@/$(BASE_VERSION)/g' \
	      -e 's/@PV@/$(GPC_BASE_VERSION)/g' \
	      -e 's/@GFDL@/$(if $(filter yes,$(GFDL_INVARIANT_FREE)),#)/g' \
	    $$f > $$f2; \
	  touch -r $$f $$f2; \
	done
