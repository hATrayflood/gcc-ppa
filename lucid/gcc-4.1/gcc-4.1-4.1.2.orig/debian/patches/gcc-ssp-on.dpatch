#! /bin/sh -e

# DP: Turn on -fstack-protector by default.

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p0 < $0
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p0 < $0
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

--- gcc/common.opt	(Revision 114807)
+++ gcc/common.opt	(Arbeitskopie)
@@ -817,7 +817,7 @@
 -fstack-limit-symbol=<name>	Trap if the stack goes past symbol <name>
 
 fstack-protector
-Common Report Var(flag_stack_protect, 1)
+Common Report Var(flag_stack_protect, 1) Init(1)
 Use propolice as a stack protection method
 
 fstack-protector-all
--- gcc/doc/invoke.texi~	2006-06-20 15:04:53.383303032 +0000
+++ gcc/doc/invoke.texi	2006-06-20 21:55:24.687921672 +0000
@@ -5700,6 +5700,8 @@
 functions with buffers larger than 8 bytes.  The guards are initialized
 when a function is entered and then checked when the function exits.
 If a guard check fails, an error message is printed and the program exits.
+On Ubuntu the default is @option{-fstack-protector}, to turn it off use
+@option{-fno-stack-protector}.
 
 @item -fstack-protector-all
 Like @option{-fstack-protector} except that all functions are protected.
