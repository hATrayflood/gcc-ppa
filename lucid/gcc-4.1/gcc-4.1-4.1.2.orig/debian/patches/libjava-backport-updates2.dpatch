#! /bin/sh -e

# DP: SVN updates from the gcc-4_1-rh-branch branch upto 20070428.

last_updated()
{
	cat > ${dir}LAST_UPDATED <<EOF
Sat Apr 28 23:18:01 CEST 2007
Sat Apr 28 21:18:01 UTC 2007 (revision 124261)
EOF
}

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch ${pdir} -f --no-backup-if-mismatch -p0 < $0
	touch ${dir}libjava/testsuite/libjava.jni/PR28178.out
	find ${dir}libjava \( -name '*.java' -o -name '*.cc' \) -type f -size 0 | xargs -r rm -f
	#last_updated
        #cd ${dir}gcc && autoconf2.59
        ;;
    -unpatch)
        patch ${pdir} -f --no-backup-if-mismatch -R -p0 < $0
        #rm ${dir}gcc/configure
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

--- boehm-gc/ChangeLog~	2007-04-20 12:44:36.000000000 +0200
+++ boehm-gc/ChangeLog	2007-04-20 12:50:10.000000000 +0200
@@ -1,3 +1,7 @@
+2007-02-13  Release Manager
+
+	* GCC 4.1.2 released.
+
 2006-08-21  Bryce McKinlay  <mckinlay@redhat.com>
 	
 	PR libgcj/13212:
Index: libffi/ChangeLog
===================================================================
--- libffi/ChangeLog	(revision 122231)
+++ libffi/ChangeLog	(working copy)
@@ -1,3 +1,74 @@
+2007-04-03  Jakub Jelinek  <jakub@redhat.com>
+
+	* src/closures.c: Include sys/statfs.h.
+	(_GNU_SOURCE): Define on Linux.
+	(FFI_MMAP_EXEC_SELINUX): Define.
+	(selinux_enabled): New variable.
+	(selinux_enabled_check): New function.
+	(is_selinux_enabled): Define.
+	(dlmmap): Use it.
+
+2007-03-08  Alexandre Oliva  <aoliva@redhat.com>
+
+	* src/powerpc/ffi.c (flush_icache): Fix left-over from previous
+	patch.
+	(ffi_prep_closure_loc): Remove unneeded casts.  Add needed ones.
+
+2007-03-07  Alexandre Oliva  <aoliva@redhat.com>
+
+	* include/ffi.h.in (ffi_closure_alloc, ffi_closure_free): New.
+	(ffi_prep_closure_loc): New.
+	(ffi_prep_raw_closure_loc): New.
+	(ffi_prep_java_raw_closure_loc): New.
+	* src/closures.c: New file.
+	* src/dlmalloc.c [FFI_MMAP_EXEC_WRIT] (struct malloc_segment):
+	Replace sflags with exec_offset.
+	[FFI_MMAP_EXEC_WRIT] (mmap_exec_offset, add_segment_exec_offset,
+	sub_segment_exec_offset): New macros.
+	(get_segment_flags, set_segment_flags, check_segment_merge): New
+	macros.
+	(is_mmapped_segment, is_extern_segment): Use get_segment_flags.
+	(add_segment, sys_alloc, create_mspace, create_mspace_with_base,
+	destroy_mspace): Use new macros.
+	(sys_alloc): Silence warning.
+	* Makefile.am (libffi_la_SOURCES): Add src/closures.c.
+	* Makefile.in: Rebuilt.
+	* src/prep_cif [FFI_CLOSURES] (ffi_prep_closure): Implement in
+	terms of ffi_prep_closure_loc.
+	* src/raw_api.c (ffi_prep_raw_closure_loc): Renamed and adjusted
+	from...
+	(ffi_prep_raw_closure): ... this.  Re-implement in terms of the
+	renamed version.
+	* src/java_raw_api (ffi_prep_java_raw_closure_loc): Renamed and
+	adjusted from...
+	(ffi_prep_java_raw_closure): ... this.  Re-implement in terms of
+	the renamed version.
+	* src/alpha/ffi.c (ffi_prep_closure_loc): Renamed from
+	(ffi_prep_closure): ... this.
+	* src/pa/ffi.c: Likewise.
+	* src/cris/ffi.c: Likewise.  Adjust.
+	* src/frv/ffi.c: Likewise.
+	* src/ia64/ffi.c: Likewise.
+	* src/mips/ffi.c: Likewise.
+	* src/powerpc/ffi_darwin.c: Likewise.
+	* src/s390/ffi.c: Likewise.
+	* src/sh/ffi.c: Likewise.
+	* src/sh64/ffi.c: Likewise.
+	* src/sparc/ffi.c: Likewise.
+	* src/x86/ffi64.c: Likewise.
+	* src/x86/ffi.c: Likewise.
+	(FFI_INIT_TRAMPOLINE): Adjust.
+	(ffi_prep_raw_closure_loc): Renamed and adjusted from...
+	(ffi_prep_raw_closure): ... this.
+	* src/powerpc/ffi.c (ffi_prep_closure_loc): Renamed from
+	(ffi_prep_closure): ... this.
+	(flush_icache): Adjust.
+
+2007-03-07  Alexandre Oliva  <aoliva@redhat.com>
+
+	* src/dlmalloc.c: New file, imported version 2.8.3 of Doug
+	Lea's malloc.
+
 2007-04-20  Richard Henderson  <rth@redhat.com>
 
 	* configure.ac (alpha*-*-*): Define HAVE_LONG_DOUBLE.


# diff -urN --exclude=.svn gcc_4_1_2_release gcc-4_1-branch
# svn diff -r122231 svn://gcc.gnu.org/svn/gcc/branches/redhat/gcc-4_1-branch gcc/java libjava boehm-gc libffi contrib/texi2pod.pl
# svn diff -r122231 gcc/java libjava boehm-gc libffi contrib/texi2pod.pl

Index: gcc/java/Make-lang.in
===================================================================
--- gcc/java/Make-lang.in	(revision 122231)
+++ gcc/java/Make-lang.in	(working copy)
@@ -212,7 +212,6 @@
 	-rm -f $(docobjdir)/gij.1
 	-rm -f $(docobjdir)/jv-convert.1
 	-rm -f $(docobjdir)/grmic.1
-	-rm -f $(docobjdir)/grmiregistry.1
 	-rm -f $(docobjdir)/gcj-dbtool.1
 #
 # Stage hooks:
@@ -324,7 +323,7 @@
 	$(TEXI2HTML) -I $(docdir)/include -I $(srcdir)/java -o $(@D) $<
 
 .INTERMEDIATE: gcj.pod jcf-dump.pod gij.pod \
-  jv-convert.pod grmic.pod grmiregistry.pod gcj-dbtool.pod
+  jv-convert.pod grmic.pod gcj-dbtool.pod
 
 gcj.pod: java/gcj.texi
 	-$(TEXI2POD) -D gcj < $< > $@
@@ -336,8 +335,6 @@
 	-$(TEXI2POD) -D jv-convert < $< > $@
 grmic.pod: java/gcj.texi
 	-$(TEXI2POD) -D grmic < $< > $@
-grmiregistry.pod: java/gcj.texi
-	-$(TEXI2POD) -D grmiregistry < $< > $@
 gcj-dbtool.pod: java/gcj.texi
 	-$(TEXI2POD) -D gcj-dbtool < $< > $@
 
@@ -345,10 +342,10 @@
 java.install-man: installdirs \
                   $(DESTDIR)$(man1dir)/$(JAVA_INSTALL_NAME)$(man1ext) \
 		  $(JAVA_TARGET_INDEPENDENT_BIN_TOOLS:%=doc/%.1) \
-		  doc/gij.1 doc/jv-convert.1 doc/grmic.1 doc/grmiregistry.1 \
+		  doc/gij.1 doc/jv-convert.1 doc/grmic.1 \
 		  doc/gcj-dbtool.1
 	for tool in $(JAVA_TARGET_INDEPENDENT_BIN_TOOLS) \
-		gij jv-convert grmic grmiregistry gcj-dbtool ; do \
+		gij jv-convert grmic gcj-dbtool ; do \
 	  tool_transformed_name=`echo $$tool|sed '$(program_transform_name)'`; \
 	  man_name=$(DESTDIR)$(man1dir)/$${tool_transformed_name}$(man1ext); \
 	  rm -f $$man_name ; \
Index: gcc/java/ChangeLog
===================================================================
--- gcc/java/ChangeLog	(revision 122231)
+++ gcc/java/ChangeLog	(working copy)
@@ -1,3 +1,17 @@
+2007-03-26  Tom Tromey  <tromey@redhat.com>
+
+	* Make-lang.in (JAVA_MANFILES): Removed grmiregistry.1.
+	(java.maintainer-clean): Likewise.
+	(java.install-man): Likewise.
+	(.INTERMEDIATE): Removed grmiregistry.pod.
+	(grmiregistry.pod): Removed.
+	* gcj.texi (Invoking gcjh): Removed.
+	(Invoking gjnih): Likewise.
+	(Invoking grmiregistry): Likewise.
+	(direntry): Updated.
+	(Top): Likewise.
+	(which-gcj): Removed.
+
 2007-02-13  Release Manager
 
 	* GCC 4.1.2 released.
Index: libjava/Makefile.in
===================================================================
--- libjava/Makefile.in	(revision 122231)
+++ libjava/Makefile.in	(working copy)
@@ -48,7 +48,7 @@
 @NATIVE_TRUE@	grmic$(EXEEXT) grmiregistry$(EXEEXT) \
 @NATIVE_TRUE@	gcj-dbtool$(EXEEXT) gappletviewer$(EXEEXT) \
 @NATIVE_TRUE@	gjarsigner$(EXEEXT) gkeytool$(EXEEXT) \
-@NATIVE_TRUE@	gjar$(EXEEXT) gjavah$(EXEEXT) \
+@NATIVE_TRUE@	gjar$(EXEEXT) gcjh$(EXEEXT) gjavah$(EXEEXT) \
 @NATIVE_TRUE@	gnative2ascii$(EXEEXT) gorbd$(EXEEXT) \
 @NATIVE_TRUE@	grmid$(EXEEXT) gserialver$(EXEEXT) \
 @NATIVE_TRUE@	gtnameserv$(EXEEXT)
@@ -427,6 +427,8 @@
 gappletviewer_OBJECTS = $(am_gappletviewer_OBJECTS)
 am_gcj_dbtool_OBJECTS = gnu/gcj/tools/gcj_dbtool/natMain.$(OBJEXT)
 gcj_dbtool_OBJECTS = $(am_gcj_dbtool_OBJECTS)
+am_gcjh_OBJECTS =
+gcjh_OBJECTS = $(am_gcjh_OBJECTS)
 am__gen_from_JIS_SOURCES_DIST = gnu/gcj/convert/gen-from-JIS.c \
 	gnu/gcj/convert/make-trie.c
 @MAINTAINER_MODE_TRUE@@NATIVE_TRUE@am_gen_from_JIS_OBJECTS = gnu/gcj/convert/gen-from-JIS.$(OBJEXT) \
@@ -488,17 +490,17 @@
 	$(libgcj_la_SOURCES) $(EXTRA_libgcj_la_SOURCES) \
 	$(libgcj_bc_la_SOURCES) $(libgij_la_SOURCES) \
 	$(libjvm_la_SOURCES) $(ecjx_SOURCES) $(gappletviewer_SOURCES) \
-	$(gcj_dbtool_SOURCES) $(gen_from_JIS_SOURCES) $(gij_SOURCES) \
-	$(gjar_SOURCES) $(gjarsigner_SOURCES) $(gjavah_SOURCES) \
-	$(gkeytool_SOURCES) $(gnative2ascii_SOURCES) $(gorbd_SOURCES) \
-	$(grmic_SOURCES) $(grmid_SOURCES) $(grmiregistry_SOURCES) \
-	$(gserialver_SOURCES) $(gtnameserv_SOURCES) \
-	$(jv_convert_SOURCES)
+	$(gcj_dbtool_SOURCES) $(gcjh_SOURCES) $(gen_from_JIS_SOURCES) \
+	$(gij_SOURCES) $(gjar_SOURCES) $(gjarsigner_SOURCES) \
+	$(gjavah_SOURCES) $(gkeytool_SOURCES) $(gnative2ascii_SOURCES) \
+	$(gorbd_SOURCES) $(grmic_SOURCES) $(grmid_SOURCES) \
+	$(grmiregistry_SOURCES) $(gserialver_SOURCES) \
+	$(gtnameserv_SOURCES) $(jv_convert_SOURCES)
 DIST_SOURCES = $(lib_gnu_awt_xlib_la_SOURCES) \
 	$(libgcj_tools_la_SOURCES) $(am__libgcj_la_SOURCES_DIST) \
 	$(EXTRA_libgcj_la_SOURCES) $(libgcj_bc_la_SOURCES) \
 	$(libgij_la_SOURCES) $(libjvm_la_SOURCES) $(ecjx_SOURCES) \
-	$(gappletviewer_SOURCES) $(gcj_dbtool_SOURCES) \
+	$(gappletviewer_SOURCES) $(gcj_dbtool_SOURCES) $(gcjh_SOURCES) \
 	$(am__gen_from_JIS_SOURCES_DIST) $(gij_SOURCES) \
 	$(gjar_SOURCES) $(gjarsigner_SOURCES) $(gjavah_SOURCES) \
 	$(gkeytool_SOURCES) $(gnative2ascii_SOURCES) $(gorbd_SOURCES) \
@@ -830,6 +832,7 @@
 	-DGCJ_ENDORSED_DIRS="\"$(jardir)/gcj-endorsed\"" \
 	-DGCJ_VERSIONED_LIBDIR="\"$(dbexecdir)\"" \
 	-DPATH_SEPARATOR="\"$(CLASSPATH_SEPARATOR)\"" \
+	-DECJ_JAR_FILE="\"$(ECJ_JAR)\"" \
 	-DLIBGCJ_DEFAULT_DATABASE="\"$(dbexecdir)/$(db_name)\"" \
 	-DLIBGCJ_DEFAULT_DATABASE_PATH_TAIL="\"$(db_pathtail)\""
 
@@ -2377,7 +2380,8 @@
 gnu_java_util_source_files = \
 classpath/gnu/java/util/DoubleEnumeration.java \
 classpath/gnu/java/util/EmptyEnumeration.java \
-classpath/gnu/java/util/WeakIdentityHashMap.java
+classpath/gnu/java/util/WeakIdentityHashMap.java \
+classpath/gnu/java/util/ZoneInfo.java
 
 gnu_java_util_header_files = $(patsubst classpath/%,%,$(patsubst %.java,%.h,$(gnu_java_util_source_files)))
 gnu_java_util_jar_source_files = \
@@ -4840,7 +4844,7 @@
 classpath/java/util/FormattableFlags.java \
 classpath/java/util/Formatter.java \
 classpath/java/util/FormatterClosedException.java \
-java/util/GregorianCalendar.java \
+classpath/java/util/GregorianCalendar.java \
 classpath/java/util/HashMap.java \
 classpath/java/util/HashSet.java \
 classpath/java/util/Hashtable.java \
@@ -7156,7 +7160,7 @@
 
 sun_reflect_header_files = $(patsubst %.java,%.h,$(sun_reflect_source_files))
 sun_reflect_annotation_source_files = \
-classpath/sun/reflect/annotation/AnnotationInvocationHandler.java \
+sun/reflect/annotation/AnnotationInvocationHandler.java \
 classpath/sun/reflect/annotation/AnnotationParser.java \
 classpath/sun/reflect/annotation/AnnotationType.java \
 classpath/sun/reflect/annotation/EnumConstantNotPresentExceptionProxy.java \
@@ -7705,16 +7709,13 @@
   classpath/resource/java/util/iso4217.properties \
   classpath/resource/javax/imageio/plugins/jpeg/MessagesBundle.properties \
   classpath/resource/org/ietf/jgss/MessagesBundle.properties \
+  classpath/resource/sun/rmi/rmic/messages.properties \
+  classpath/resource/com/sun/tools/javac/messages.properties \
   classpath/resource/META-INF/services/java.util.prefs.PreferencesFactory.in \
   classpath/resource/META-INF/services/javax.sound.midi.spi.MidiDeviceProvider \
   classpath/resource/META-INF/services/javax.sound.midi.spi.MidiFileReader \
   classpath/resource/META-INF/services/javax.sound.midi.spi.MidiFileWriter \
-  classpath/resource/META-INF/services/javax.sound.sampled.spi.AudioFileReader \
-  classpath/resource/META-INF/services/javax.xml.parsers.DocumentBuilderFactory \
-  classpath/resource/META-INF/services/javax.xml.parsers.SAXParserFactory \
-  classpath/resource/META-INF/services/javax.xml.parsers.TransformerFactory \
-  classpath/resource/META-INF/services/org.relaxng.datatype.DatatypeLibraryFactory \
-  classpath/resource/META-INF/services/org.xml.sax.driver
+  classpath/resource/META-INF/services/javax.sound.sampled.spi.AudioFileReader
 
 omitted_headers = java/lang/ClassLoader.h java/lang/Thread.h \
 	java/lang/String.h java/lang/reflect/Constructor.h \
@@ -7823,6 +7824,13 @@
 gjavah_LINK = $(GCJLINK)
 gjavah_LDADD = -L$(here)/.libs libgcj-tools.la
 gjavah_DEPENDENCIES = libgcj-tools.la
+gcjh_SOURCES = 
+gcjh_LDFLAGS = --main=gnu.classpath.tools.javah.GcjhMain \
+	-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)
+
+gcjh_LINK = $(GCJLINK)
+gcjh_LDADD = -L$(here)/.libs libgcj-tools.la
+gcjh_DEPENDENCIES = libgcj-tools.la
 gnative2ascii_SOURCES = 
 gnative2ascii_LDFLAGS = --main=gnu.classpath.tools.native2ascii.Native2ASCII \
 	-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)
@@ -8008,6 +8016,7 @@
 	"exec_prefix=$(exec_prefix)" \
 	"infodir=$(infodir)" \
 	"libdir=$(libdir)" \
+	"mandir=$(mandir)" \
 	"prefix=$(prefix)" \
 	"gxx_include_dir=$(gxx_include_dir)" \
 	"AR=$(AR)" \
@@ -8648,6 +8657,9 @@
 gcj-dbtool$(EXEEXT): $(gcj_dbtool_OBJECTS) $(gcj_dbtool_DEPENDENCIES) 
 	@rm -f gcj-dbtool$(EXEEXT)
 	$(gcj_dbtool_LINK) $(gcj_dbtool_LDFLAGS) $(gcj_dbtool_OBJECTS) $(gcj_dbtool_LDADD) $(LIBS)
+gcjh$(EXEEXT): $(gcjh_OBJECTS) $(gcjh_DEPENDENCIES) 
+	@rm -f gcjh$(EXEEXT)
+	$(gcjh_LINK) $(gcjh_LDFLAGS) $(gcjh_OBJECTS) $(gcjh_LDADD) $(LIBS)
 gnu/gcj/convert/gen-from-JIS.$(OBJEXT):  \
 	gnu/gcj/convert/$(am__dirstamp) \
 	gnu/gcj/convert/$(DEPDIR)/$(am__dirstamp)
Index: libjava/scripts/makemake.tcl
===================================================================
--- libjava/scripts/makemake.tcl	(revision 122231)
+++ libjava/scripts/makemake.tcl	(working copy)
@@ -106,6 +106,14 @@
 # We haven't merged locale resources yet.
 set properties_map(gnu/java/locale) _
 
+# We want to be able to load xerces if it is on the class path.  So,
+# we have to avoid compiling in the XML-related service files.
+set properties_map(META-INF/services/javax.xml.parsers.DocumentBuilderFactory) _
+set properties_map(META-INF/services/javax.xml.parsers.SAXParserFactory) _
+set properties_map(META-INF/services/javax.xml.parsers.TransformerFactory) _
+set properties_map(META-INF/services/org.relaxng.datatype.DatatypeLibraryFactory) _
+set properties_map(META-INF/services/org.w3c.dom.DOMImplementationSourceList) _
+set properties_map(META-INF/services/org.xml.sax.driver) _
 
 # List of all properties files.
 set properties_files {}
@@ -206,8 +214,10 @@
     } elseif {[file isdirectory $file]} {
       lappend subdirs $subdir/$file
     } elseif {$subdir == "META-INF/services"} {
-      # All service files are included as properties.
-      lappend properties_files $basedir/$subdir/$file
+      # Service files are generally included as properties.
+      if {! [info exists properties_map($subdir/$file)]} {
+	lappend properties_files $basedir/$subdir/$file
+      }
     }
   }
   cd $here
@@ -225,7 +235,7 @@
 # Scan known packages beneath the base directory for .java source
 # files.
 proc scan_packages {basedir} {
-  foreach subdir {gnu java javax org sun META-INF} {
+  foreach subdir {gnu java javax org sun com META-INF} {
     if {[file exists $basedir/$subdir]} {
       scan_directory $basedir $subdir
     }
Index: libjava/interpret.cc
===================================================================
--- libjava/interpret.cc	(revision 122231)
+++ libjava/interpret.cc	(working copy)
@@ -1234,10 +1234,10 @@
 }
 
 #if FFI_NATIVE_RAW_API
-#   define FFI_PREP_RAW_CLOSURE ffi_prep_raw_closure
+#   define FFI_PREP_RAW_CLOSURE ffi_prep_raw_closure_loc
 #   define FFI_RAW_SIZE ffi_raw_size
 #else
-#   define FFI_PREP_RAW_CLOSURE ffi_prep_java_raw_closure
+#   define FFI_PREP_RAW_CLOSURE ffi_prep_java_raw_closure_loc
 #   define FFI_RAW_SIZE ffi_java_raw_size
 #endif
 
@@ -1248,6 +1248,7 @@
 
 typedef struct {
   ffi_raw_closure  closure;
+  _Jv_ClosureList list;
   ffi_cif   cif;
   ffi_type *arg_types[0];
 } ncode_closure;
@@ -1255,7 +1256,7 @@
 typedef void (*ffi_closure_fun) (ffi_cif*,void*,ffi_raw*,void*);
 
 void *
-_Jv_InterpMethod::ncode ()
+_Jv_InterpMethod::ncode (jclass klass)
 {
   using namespace java::lang::reflect;
 
@@ -1265,9 +1266,12 @@
   jboolean staticp = (self->accflags & Modifier::STATIC) != 0;
   int arg_count = _Jv_count_arguments (self->signature, staticp);
 
+  void *code;
   ncode_closure *closure =
-    (ncode_closure*)_Jv_AllocBytes (sizeof (ncode_closure)
-					+ arg_count * sizeof (ffi_type*));
+    (ncode_closure*)ffi_closure_alloc (sizeof (ncode_closure)
+				       + arg_count * sizeof (ffi_type*),
+				       &code);
+  closure->list.registerClosure (klass, closure);
 
   _Jv_init_cif (self->signature,
 		arg_count,
@@ -1320,9 +1324,11 @@
   FFI_PREP_RAW_CLOSURE (&closure->closure,
 		        &closure->cif, 
 		        fun,
-		        (void*)this);
+		        (void*)this,
+			code);
 
-  self->ncode = (void*)closure;
+  self->ncode = code;
+
   return self->ncode;
 }
 
@@ -1450,7 +1456,7 @@
 }
 
 void *
-_Jv_JNIMethod::ncode ()
+_Jv_JNIMethod::ncode (jclass klass)
 {
   using namespace java::lang::reflect;
 
@@ -1460,9 +1466,12 @@
   jboolean staticp = (self->accflags & Modifier::STATIC) != 0;
   int arg_count = _Jv_count_arguments (self->signature, staticp);
 
+  void *code;
   ncode_closure *closure =
-    (ncode_closure*)_Jv_AllocBytes (sizeof (ncode_closure)
-				    + arg_count * sizeof (ffi_type*));
+    (ncode_closure*)ffi_closure_alloc (sizeof (ncode_closure)
+				       + arg_count * sizeof (ffi_type*),
+				       &code);
+  closure->list.registerClosure (klass, closure);
 
   ffi_type *rtype;
   _Jv_init_cif (self->signature,
@@ -1504,9 +1513,10 @@
   FFI_PREP_RAW_CLOSURE (&closure->closure,
 			&closure->cif, 
 			fun,
-			(void*) this);
+			(void*) this,
+			code);
 
-  self->ncode = (void *) closure;
+  self->ncode = code;
   return self->ncode;
 }
 
@@ -1567,16 +1577,27 @@
 	  // cases.  Well, we can't, because we don't allocate these
 	  // objects using `new', and thus they don't get a vtable.
 	  _Jv_JNIMethod *jnim = reinterpret_cast<_Jv_JNIMethod *> (imeth);
-	  klass->methods[i].ncode = jnim->ncode ();
+	  klass->methods[i].ncode = jnim->ncode (klass);
 	}
       else if (imeth != 0)		// it could be abstract
 	{
 	  _Jv_InterpMethod *im = reinterpret_cast<_Jv_InterpMethod *> (imeth);
-	  klass->methods[i].ncode = im->ncode ();
+	  klass->methods[i].ncode = im->ncode (klass);
 	}
     }
 }
 
+_Jv_ClosureList **
+_Jv_InterpreterEngine::do_get_closure_list (jclass klass)
+{
+  _Jv_InterpClass *iclass = (_Jv_InterpClass *) klass->aux_info;
+
+  if (!iclass->closures)
+    iclass->closures = _Jv_ClosureListFinalizer ();
+
+  return iclass->closures;
+}
+
 void
 _Jv_InterpreterEngine::do_allocate_static_fields (jclass klass,
 						  int pointer_size,
Index: libjava/configure.ac
===================================================================
--- libjava/configure.ac	(revision 122231)
+++ libjava/configure.ac	(working copy)
@@ -1299,6 +1299,7 @@
       -e "s,@default_toolkit@,$TOOLKIT," \
       -e "s,@JAVA_LANG_SYSTEM_EXPLICIT_INITIALIZATION@,false," \
       -e "s,@GTK_CAIRO_ENABLED@,false," \
+      -e "s,@ECJ_JAR@,," \
 	< $srcdir/classpath/gnu/classpath/Configuration.java.in \
 	> gnu/classpath/Configuration.java
   # We do not want to redirect the output of the grep below to /dev/null,
Index: libjava/libgcj_bc.c
===================================================================
--- libjava/libgcj_bc.c	(revision 122231)
+++ libjava/libgcj_bc.c	(working copy)
@@ -58,6 +58,7 @@
 /* Symbols used by jvgenmain (-fmain).  */
 
 void JvRunMain () {}
+void JvRunMainName () {}
 const char **_Jv_Compiler_Properties;
 
 /* Functions used by -fjni.  */
Index: libjava/classpath/configure
===================================================================
--- libjava/classpath/configure	(revision 122231)
+++ libjava/classpath/configure	(working copy)
@@ -312,7 +312,7 @@
 # include <unistd.h>
 #endif"
 
-ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os JAVA_MAINTAINER_MODE_TRUE JAVA_MAINTAINER_MODE_FALSE LIBVERSION CLASSPATH_MODULE CLASSPATH_CONVENIENCE INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar CREATE_COLLECTIONS_TRUE CREATE_COLLECTIONS_FALSE CREATE_JNI_LIBRARIES_TRUE CREATE_JNI_LIBRARIES_FALSE CREATE_CORE_JNI_LIBRARIES_TRUE CREATE_CORE_JNI_LIBRARIES_FALSE CREATE_GCONF_PEER_LIBRARIES_TRUE CREATE_GCONF_PEER_LIBRARIES_FALSE default_toolkit CREATE_XMLJ_LIBRARY_TRUE CREATE_XMLJ_LIBRARY_FALSE CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT DEPDIR am__include am__quote AMDEP_TRUE AMDEP_FALSE AMDEPBACKSLASH CCDEPMODE am__fastdepCC_TRUE am__fastdepCC_FALSE CPP EGREP CREATE_ALSA_LIBRARIES_TRUE CREATE_ALSA_LIBRARIES_FALSE CREATE_DSSI_LIBRARIES_TRUE CREATE_DSSI_LIBRARIES_FALSE CREATE_GTK_PEER_LIBRARIES_TRUE CREATE_GTK_PEER_LIBRARIES_FALSE CREATE_QT_PEER_LIBRARIES_TRUE CREATE_QT_PEER_LIBRARIES_FALSE CREATE_PLUGIN_TRUE CREATE_PLUGIN_FALSE toolexeclibdir nativeexeclibdir glibjdir VM_BINARY FOUND_CACAO_TRUE FOUND_CACAO_FALSE CREATE_JNI_HEADERS_TRUE CREATE_JNI_HEADERS_FALSE CREATE_WRAPPERS_TRUE CREATE_WRAPPERS_FALSE LN_S RANLIB ac_ct_RANLIB LIBTOOL CXX CXXFLAGS ac_ct_CXX CXXDEPMODE am__fastdepCXX_TRUE am__fastdepCXX_FALSE CXXCPP PERL COLLECTIONS_PREFIX LIBMAGIC LIBICONV LTLIBICONV WARNING_CFLAGS STRICT_WARNING_CFLAGS ERROR_CFLAGS PKG_CONFIG XML_CFLAGS XML_LIBS XSLT_CFLAGS XSLT_LIBS X_CFLAGS X_PRE_LIBS X_LIBS X_EXTRA_LIBS GTK_CFLAGS GTK_LIBS FREETYPE2_CFLAGS FREETYPE2_LIBS PANGOFT2_CFLAGS PANGOFT2_LIBS XTEST_LIBS GCONF_CFLAGS GCONF_LIBS GDK_CFLAGS GDK_LIBS QT_CFLAGS QT_LIBS MOC MOZILLA_CFLAGS MOZILLA_LIBS GLIB_CFLAGS GLIB_LIBS PLUGIN_DIR USER_JAVAH USER_SPECIFIED_JAVAH_TRUE USER_SPECIFIED_JAVAH_FALSE CLASSPATH_INCLUDES GCJ JIKES JIKESENCODING JIKESWARNINGS KJC GCJX ECJ FOUND_GCJ_TRUE FOUND_GCJ_FALSE FOUND_JIKES_TRUE FOUND_JIKES_FALSE FOUND_ECJ_TRUE FOUND_ECJ_FALSE FOUND_KJC_TRUE FOUND_KJC_FALSE FOUND_GCJX_TRUE FOUND_GCJX_FALSE USER_CLASSLIB USER_SPECIFIED_CLASSLIB_TRUE USER_SPECIFIED_CLASSLIB_FALSE vm_classes MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBDEBUG INIT_LOAD_LIBRARY JAVA_LANG_SYSTEM_EXPLICIT_INITIALIZATION REMOVE MKDIR CP DATE FIND ZIP FASTJAR INSTALL_GLIBJ_ZIP_TRUE INSTALL_GLIBJ_ZIP_FALSE INSTALL_CLASS_FILES_TRUE INSTALL_CLASS_FILES_FALSE BUILD_CLASS_FILES_TRUE BUILD_CLASS_FILES_FALSE EXAMPLESDIR GJDOC CREATE_API_DOCS_TRUE CREATE_API_DOCS_FALSE JAY JAY_SKELETON REGEN_PARSERS_TRUE REGEN_PARSERS_FALSE USE_PREBUILT_GLIBJ_ZIP_TRUE USE_PREBUILT_GLIBJ_ZIP_FALSE PATH_TO_GLIBJ_ZIP USE_ESCHER_TRUE USE_ESCHER_FALSE PATH_TO_ESCHER ENABLE_LOCAL_SOCKETS_TRUE ENABLE_LOCAL_SOCKETS_FALSE DEFAULT_PREFS_PEER LIBOBJS LTLIBOBJS'
+ac_subst_vars='SHELL PATH_SEPARATOR PACKAGE_NAME PACKAGE_TARNAME PACKAGE_VERSION PACKAGE_STRING PACKAGE_BUGREPORT exec_prefix prefix program_transform_name bindir sbindir libexecdir datadir sysconfdir sharedstatedir localstatedir libdir includedir oldincludedir infodir mandir build_alias host_alias target_alias DEFS ECHO_C ECHO_N ECHO_T LIBS build build_cpu build_vendor build_os host host_cpu host_vendor host_os target target_cpu target_vendor target_os JAVA_MAINTAINER_MODE_TRUE JAVA_MAINTAINER_MODE_FALSE LIBVERSION CLASSPATH_MODULE CLASSPATH_CONVENIENCE INSTALL_PROGRAM INSTALL_SCRIPT INSTALL_DATA CYGPATH_W PACKAGE VERSION ACLOCAL AUTOCONF AUTOMAKE AUTOHEADER MAKEINFO install_sh STRIP ac_ct_STRIP INSTALL_STRIP_PROGRAM mkdir_p AWK SET_MAKE am__leading_dot AMTAR am__tar am__untar CREATE_COLLECTIONS_TRUE CREATE_COLLECTIONS_FALSE CREATE_JNI_LIBRARIES_TRUE CREATE_JNI_LIBRARIES_FALSE CREATE_CORE_JNI_LIBRARIES_TRUE CREATE_CORE_JNI_LIBRARIES_FALSE CREATE_GCONF_PEER_LIBRARIES_TRUE CREATE_GCONF_PEER_LIBRARIES_FALSE default_toolkit CREATE_XMLJ_LIBRARY_TRUE CREATE_XMLJ_LIBRARY_FALSE CC CFLAGS LDFLAGS CPPFLAGS ac_ct_CC EXEEXT OBJEXT DEPDIR am__include am__quote AMDEP_TRUE AMDEP_FALSE AMDEPBACKSLASH CCDEPMODE am__fastdepCC_TRUE am__fastdepCC_FALSE CPP EGREP CREATE_ALSA_LIBRARIES_TRUE CREATE_ALSA_LIBRARIES_FALSE CREATE_DSSI_LIBRARIES_TRUE CREATE_DSSI_LIBRARIES_FALSE CREATE_GTK_PEER_LIBRARIES_TRUE CREATE_GTK_PEER_LIBRARIES_FALSE CREATE_QT_PEER_LIBRARIES_TRUE CREATE_QT_PEER_LIBRARIES_FALSE CREATE_PLUGIN_TRUE CREATE_PLUGIN_FALSE toolexeclibdir nativeexeclibdir glibjdir VM_BINARY FOUND_CACAO_TRUE FOUND_CACAO_FALSE CREATE_JNI_HEADERS_TRUE CREATE_JNI_HEADERS_FALSE CREATE_WRAPPERS_TRUE CREATE_WRAPPERS_FALSE LN_S RANLIB ac_ct_RANLIB LIBTOOL CXX CXXFLAGS ac_ct_CXX CXXDEPMODE am__fastdepCXX_TRUE am__fastdepCXX_FALSE CXXCPP PERL COLLECTIONS_PREFIX LIBMAGIC LIBICONV LTLIBICONV WARNING_CFLAGS STRICT_WARNING_CFLAGS ERROR_CFLAGS PKG_CONFIG XML_CFLAGS XML_LIBS XSLT_CFLAGS XSLT_LIBS X_CFLAGS X_PRE_LIBS X_LIBS X_EXTRA_LIBS GTK_CFLAGS GTK_LIBS FREETYPE2_CFLAGS FREETYPE2_LIBS PANGOFT2_CFLAGS PANGOFT2_LIBS XTEST_LIBS GCONF_CFLAGS GCONF_LIBS GDK_CFLAGS GDK_LIBS QT_CFLAGS QT_LIBS MOC MOZILLA_CFLAGS MOZILLA_LIBS GLIB_CFLAGS GLIB_LIBS PLUGIN_DIR USER_JAVAH USER_SPECIFIED_JAVAH_TRUE USER_SPECIFIED_JAVAH_FALSE CLASSPATH_INCLUDES GCJ JIKES JIKESENCODING JIKESWARNINGS KJC GCJX ECJ FOUND_GCJ_TRUE FOUND_GCJ_FALSE FOUND_JIKES_TRUE FOUND_JIKES_FALSE FOUND_ECJ_TRUE FOUND_ECJ_FALSE FOUND_KJC_TRUE FOUND_KJC_FALSE FOUND_GCJX_TRUE FOUND_GCJX_FALSE USER_CLASSLIB USER_SPECIFIED_CLASSLIB_TRUE USER_SPECIFIED_CLASSLIB_FALSE vm_classes MAINTAINER_MODE_TRUE MAINTAINER_MODE_FALSE MAINT LIBDEBUG INIT_LOAD_LIBRARY ECJ_JAR JAVA_LANG_SYSTEM_EXPLICIT_INITIALIZATION REMOVE MKDIR CP DATE FIND ZIP FASTJAR INSTALL_GLIBJ_ZIP_TRUE INSTALL_GLIBJ_ZIP_FALSE INSTALL_CLASS_FILES_TRUE INSTALL_CLASS_FILES_FALSE BUILD_CLASS_FILES_TRUE BUILD_CLASS_FILES_FALSE EXAMPLESDIR GJDOC CREATE_API_DOCS_TRUE CREATE_API_DOCS_FALSE JAY JAY_SKELETON REGEN_PARSERS_TRUE REGEN_PARSERS_FALSE USE_PREBUILT_GLIBJ_ZIP_TRUE USE_PREBUILT_GLIBJ_ZIP_FALSE PATH_TO_GLIBJ_ZIP USE_ESCHER_TRUE USE_ESCHER_FALSE PATH_TO_ESCHER ENABLE_LOCAL_SOCKETS_TRUE ENABLE_LOCAL_SOCKETS_FALSE DEFAULT_PREFS_PEER LIBOBJS LTLIBOBJS'
 ac_subst_files=''
 
 # Initialize some variables set by options.
@@ -945,6 +945,8 @@
   --with-ecj              bytecode compilation with ecj
   --with-classpath        specify path to a classes.zip like file
   --with-vm-classes       specify path to VM override source files
+  --with-ecj-jar=ABS.PATH specify jar file containing the Eclipse Java
+                          Compiler
   --with-fastjar=PATH     define to use a fastjar style tool
   --with-glibj            define what to install (zip|flat|both|none|build)
                           [default=zip]
@@ -5564,7 +5566,7 @@
 case $host in
 *-*-irix6*)
   # Find out which ABI we are using.
-  echo '#line 5567 "configure"' > conftest.$ac_ext
+  echo '#line 5569 "configure"' > conftest.$ac_ext
   if { (eval echo "$as_me:$LINENO: \"$ac_compile\"") >&5
   (eval $ac_compile) 2>&5
   ac_status=$?
@@ -10643,7 +10645,7 @@
 /usr/openwin/share/include'
 
 if test "$ac_x_includes" = no; then
-  # Guess where to find include files, by looking for Intrinsic.h.
+  # Guess where to find include files, by looking for Xlib.h.
   # First, try using that file with no special directory specified.
   cat >conftest.$ac_ext <<_ACEOF
 /* confdefs.h.  */
@@ -10651,7 +10653,7 @@
 cat confdefs.h >>conftest.$ac_ext
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
-#include <X11/Intrinsic.h>
+#include <X11/Xlib.h>
 _ACEOF
 if { (eval echo "$as_me:$LINENO: \"$ac_cpp conftest.$ac_ext\"") >&5
   (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1
@@ -10678,7 +10680,7 @@
 sed 's/^/| /' conftest.$ac_ext >&5
 
   for ac_dir in $ac_x_header_dirs; do
-  if test -r "$ac_dir/X11/Intrinsic.h"; then
+  if test -r "$ac_dir/X11/Xlib.h"; then
     ac_x_includes=$ac_dir
     break
   fi
@@ -10692,7 +10694,7 @@
   # See if we find them without any special options.
   # Don't add to $LIBS permanently.
   ac_save_LIBS=$LIBS
-  LIBS="-lXt $LIBS"
+  LIBS="-lX11 $LIBS"
   if test x$gcc_no_link = xyes; then
   { { echo "$as_me:$LINENO: error: Link tests are not allowed after GCC_NO_EXECUTABLES." >&5
 echo "$as_me: error: Link tests are not allowed after GCC_NO_EXECUTABLES." >&2;}
@@ -10704,11 +10706,11 @@
 cat confdefs.h >>conftest.$ac_ext
 cat >>conftest.$ac_ext <<_ACEOF
 /* end confdefs.h.  */
-#include <X11/Intrinsic.h>
+#include <X11/Xlib.h>
 int
 main ()
 {
-XtMalloc (0)
+XrmInitialize ()
   ;
   return 0;
 }
@@ -13330,23 +13332,23 @@
   else
      PKG_CONFIG_MIN_VERSION=0.9.0
      if $PKG_CONFIG --atleast-pkgconfig-version $PKG_CONFIG_MIN_VERSION; then
-        echo "$as_me:$LINENO: checking for firefox-plugin" >&5
-echo $ECHO_N "checking for firefox-plugin... $ECHO_C" >&6
+        echo "$as_me:$LINENO: checking for firefox-plugin firefox-xpcom" >&5
+echo $ECHO_N "checking for firefox-plugin firefox-xpcom... $ECHO_C" >&6
 
-        if $PKG_CONFIG --exists "firefox-plugin" ; then
+        if $PKG_CONFIG --exists "firefox-plugin firefox-xpcom" ; then
             echo "$as_me:$LINENO: result: yes" >&5
 echo "${ECHO_T}yes" >&6
             succeeded=yes
 
             echo "$as_me:$LINENO: checking MOZILLA_CFLAGS" >&5
 echo $ECHO_N "checking MOZILLA_CFLAGS... $ECHO_C" >&6
-            MOZILLA_CFLAGS=`$PKG_CONFIG --cflags "firefox-plugin"`
+            MOZILLA_CFLAGS=`$PKG_CONFIG --cflags "firefox-plugin firefox-xpcom"`
             echo "$as_me:$LINENO: result: $MOZILLA_CFLAGS" >&5
 echo "${ECHO_T}$MOZILLA_CFLAGS" >&6
 
             echo "$as_me:$LINENO: checking MOZILLA_LIBS" >&5
 echo $ECHO_N "checking MOZILLA_LIBS... $ECHO_C" >&6
-            MOZILLA_LIBS=`$PKG_CONFIG --libs "firefox-plugin"`
+            MOZILLA_LIBS=`$PKG_CONFIG --libs "firefox-plugin firefox-xpcom"`
             echo "$as_me:$LINENO: result: $MOZILLA_LIBS" >&5
 echo "${ECHO_T}$MOZILLA_LIBS" >&6
         else
@@ -13354,7 +13356,7 @@
             MOZILLA_LIBS=""
             ## If we have a custom action on failure, don't print errors, but
             ## do set a variable so people can do so.
-            MOZILLA_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "firefox-plugin"`
+            MOZILLA_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "firefox-plugin firefox-xpcom"`
 
         fi
 
@@ -13428,23 +13430,23 @@
   else
      PKG_CONFIG_MIN_VERSION=0.9.0
      if $PKG_CONFIG --atleast-pkgconfig-version $PKG_CONFIG_MIN_VERSION; then
-        echo "$as_me:$LINENO: checking for xulrunner-plugin" >&5
-echo $ECHO_N "checking for xulrunner-plugin... $ECHO_C" >&6
+        echo "$as_me:$LINENO: checking for xulrunner-plugin xulrunner-xpcom" >&5
+echo $ECHO_N "checking for xulrunner-plugin xulrunner-xpcom... $ECHO_C" >&6
 
-        if $PKG_CONFIG --exists "xulrunner-plugin" ; then
+        if $PKG_CONFIG --exists "xulrunner-plugin xulrunner-xpcom" ; then
             echo "$as_me:$LINENO: result: yes" >&5
 echo "${ECHO_T}yes" >&6
             succeeded=yes
 
             echo "$as_me:$LINENO: checking MOZILLA_CFLAGS" >&5
 echo $ECHO_N "checking MOZILLA_CFLAGS... $ECHO_C" >&6
-            MOZILLA_CFLAGS=`$PKG_CONFIG --cflags "xulrunner-plugin"`
+            MOZILLA_CFLAGS=`$PKG_CONFIG --cflags "xulrunner-plugin xulrunner-xpcom"`
             echo "$as_me:$LINENO: result: $MOZILLA_CFLAGS" >&5
 echo "${ECHO_T}$MOZILLA_CFLAGS" >&6
 
             echo "$as_me:$LINENO: checking MOZILLA_LIBS" >&5
 echo $ECHO_N "checking MOZILLA_LIBS... $ECHO_C" >&6
-            MOZILLA_LIBS=`$PKG_CONFIG --libs "xulrunner-plugin"`
+            MOZILLA_LIBS=`$PKG_CONFIG --libs "xulrunner-plugin xulrunner-xpcom"`
             echo "$as_me:$LINENO: result: $MOZILLA_LIBS" >&5
 echo "${ECHO_T}$MOZILLA_LIBS" >&6
         else
@@ -13452,7 +13454,7 @@
             MOZILLA_LIBS=""
             ## If we have a custom action on failure, don't print errors, but
             ## do set a variable so people can do so.
-            MOZILLA_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "xulrunner-plugin"`
+            MOZILLA_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "xulrunner-plugin xulrunner-xpcom"`
 
         fi
 
@@ -13526,23 +13528,23 @@
   else
      PKG_CONFIG_MIN_VERSION=0.9.0
      if $PKG_CONFIG --atleast-pkgconfig-version $PKG_CONFIG_MIN_VERSION; then
-        echo "$as_me:$LINENO: checking for mozilla-firefox-plugin" >&5
-echo $ECHO_N "checking for mozilla-firefox-plugin... $ECHO_C" >&6
+        echo "$as_me:$LINENO: checking for mozilla-firefox-plugin mozilla-firefox-xpcom" >&5
+echo $ECHO_N "checking for mozilla-firefox-plugin mozilla-firefox-xpcom... $ECHO_C" >&6
 
-        if $PKG_CONFIG --exists "mozilla-firefox-plugin" ; then
+        if $PKG_CONFIG --exists "mozilla-firefox-plugin mozilla-firefox-xpcom" ; then
             echo "$as_me:$LINENO: result: yes" >&5
 echo "${ECHO_T}yes" >&6
             succeeded=yes
 
             echo "$as_me:$LINENO: checking MOZILLA_CFLAGS" >&5
 echo $ECHO_N "checking MOZILLA_CFLAGS... $ECHO_C" >&6
-            MOZILLA_CFLAGS=`$PKG_CONFIG --cflags "mozilla-firefox-plugin"`
+            MOZILLA_CFLAGS=`$PKG_CONFIG --cflags "mozilla-firefox-plugin mozilla-firefox-xpcom"`
             echo "$as_me:$LINENO: result: $MOZILLA_CFLAGS" >&5
 echo "${ECHO_T}$MOZILLA_CFLAGS" >&6
 
             echo "$as_me:$LINENO: checking MOZILLA_LIBS" >&5
 echo $ECHO_N "checking MOZILLA_LIBS... $ECHO_C" >&6
-            MOZILLA_LIBS=`$PKG_CONFIG --libs "mozilla-firefox-plugin"`
+            MOZILLA_LIBS=`$PKG_CONFIG --libs "mozilla-firefox-plugin mozilla-firefox-xpcom"`
             echo "$as_me:$LINENO: result: $MOZILLA_LIBS" >&5
 echo "${ECHO_T}$MOZILLA_LIBS" >&6
         else
@@ -13550,7 +13552,7 @@
             MOZILLA_LIBS=""
             ## If we have a custom action on failure, don't print errors, but
             ## do set a variable so people can do so.
-            MOZILLA_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "mozilla-firefox-plugin"`
+            MOZILLA_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "mozilla-firefox-plugin mozilla-firefox-xpcom"`
 
         fi
 
@@ -13624,23 +13626,23 @@
   else
      PKG_CONFIG_MIN_VERSION=0.9.0
      if $PKG_CONFIG --atleast-pkgconfig-version $PKG_CONFIG_MIN_VERSION; then
-        echo "$as_me:$LINENO: checking for seamonkey-plugin" >&5
-echo $ECHO_N "checking for seamonkey-plugin... $ECHO_C" >&6
+        echo "$as_me:$LINENO: checking for seamonkey-plugin seamonkey-xpcom" >&5
+echo $ECHO_N "checking for seamonkey-plugin seamonkey-xpcom... $ECHO_C" >&6
 
-        if $PKG_CONFIG --exists "seamonkey-plugin" ; then
+        if $PKG_CONFIG --exists "seamonkey-plugin seamonkey-xpcom" ; then
             echo "$as_me:$LINENO: result: yes" >&5
 echo "${ECHO_T}yes" >&6
             succeeded=yes
 
             echo "$as_me:$LINENO: checking MOZILLA_CFLAGS" >&5
 echo $ECHO_N "checking MOZILLA_CFLAGS... $ECHO_C" >&6
-            MOZILLA_CFLAGS=`$PKG_CONFIG --cflags "seamonkey-plugin"`
+            MOZILLA_CFLAGS=`$PKG_CONFIG --cflags "seamonkey-plugin seamonkey-xpcom"`
             echo "$as_me:$LINENO: result: $MOZILLA_CFLAGS" >&5
 echo "${ECHO_T}$MOZILLA_CFLAGS" >&6
 
             echo "$as_me:$LINENO: checking MOZILLA_LIBS" >&5
 echo $ECHO_N "checking MOZILLA_LIBS... $ECHO_C" >&6
-            MOZILLA_LIBS=`$PKG_CONFIG --libs "seamonkey-plugin"`
+            MOZILLA_LIBS=`$PKG_CONFIG --libs "seamonkey-plugin seamonkey-xpcom"`
             echo "$as_me:$LINENO: result: $MOZILLA_LIBS" >&5
 echo "${ECHO_T}$MOZILLA_LIBS" >&6
         else
@@ -13648,7 +13650,7 @@
             MOZILLA_LIBS=""
             ## If we have a custom action on failure, don't print errors, but
             ## do set a variable so people can do so.
-            MOZILLA_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "seamonkey-plugin"`
+            MOZILLA_PKG_ERRORS=`$PKG_CONFIG --errors-to-stdout --print-errors "seamonkey-plugin seamonkey-xpcom"`
 
         fi
 
@@ -15924,6 +15926,18 @@
 
 
 
+
+# Check whether --with-ecj-jar or --without-ecj-jar was given.
+if test "${with_ecj_jar+set}" = set; then
+  withval="$with_ecj_jar"
+  ECJ_JAR=$withval
+else
+  if test -f $multi_basedir/ecj.jar; then
+	       ECJ_JAR='$(jardir)/ecj.jar'
+	     fi
+fi;
+
+
 # Check whether --enable-java-lang-system-explicit-initialization or --disable-java-lang-system-explicit-initialization was given.
 if test "${enable_java_lang_system_explicit_initialization+set}" = set; then
   enableval="$enable_java_lang_system_explicit_initialization"
@@ -20905,6 +20919,7 @@
 s,@MAINT@,$MAINT,;t t
 s,@LIBDEBUG@,$LIBDEBUG,;t t
 s,@INIT_LOAD_LIBRARY@,$INIT_LOAD_LIBRARY,;t t
+s,@ECJ_JAR@,$ECJ_JAR,;t t
 s,@JAVA_LANG_SYSTEM_EXPLICIT_INITIALIZATION@,$JAVA_LANG_SYSTEM_EXPLICIT_INITIALIZATION,;t t
 s,@REMOVE@,$REMOVE,;t t
 s,@MKDIR@,$MKDIR,;t t
Index: libjava/classpath/Makefile.in
===================================================================
--- libjava/classpath/Makefile.in	(revision 122231)
+++ libjava/classpath/Makefile.in	(working copy)
@@ -146,6 +146,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/native/jni/midi-dssi/Makefile.in
===================================================================
--- libjava/classpath/native/jni/midi-dssi/Makefile.in	(revision 122231)
+++ libjava/classpath/native/jni/midi-dssi/Makefile.in	(working copy)
@@ -145,6 +145,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/native/jni/classpath/Makefile.in
===================================================================
--- libjava/classpath/native/jni/classpath/Makefile.in	(revision 122231)
+++ libjava/classpath/native/jni/classpath/Makefile.in	(working copy)
@@ -134,6 +134,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/native/jni/Makefile.in
===================================================================
--- libjava/classpath/native/jni/Makefile.in	(revision 122231)
+++ libjava/classpath/native/jni/Makefile.in	(working copy)
@@ -124,6 +124,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/native/jni/gconf-peer/Makefile.in
===================================================================
--- libjava/classpath/native/jni/gconf-peer/Makefile.in	(revision 122231)
+++ libjava/classpath/native/jni/gconf-peer/Makefile.in	(working copy)
@@ -144,6 +144,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/native/jni/java-io/Makefile.in
===================================================================
--- libjava/classpath/native/jni/java-io/Makefile.in	(revision 122231)
+++ libjava/classpath/native/jni/java-io/Makefile.in	(working copy)
@@ -145,6 +145,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/native/jni/native-lib/Makefile.in
===================================================================
--- libjava/classpath/native/jni/native-lib/Makefile.in	(revision 122231)
+++ libjava/classpath/native/jni/native-lib/Makefile.in	(working copy)
@@ -134,6 +134,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/native/jni/java-util/Makefile.in
===================================================================
--- libjava/classpath/native/jni/java-util/Makefile.in	(revision 122231)
+++ libjava/classpath/native/jni/java-util/Makefile.in	(working copy)
@@ -142,6 +142,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/native/jni/midi-alsa/Makefile.in
===================================================================
--- libjava/classpath/native/jni/midi-alsa/Makefile.in	(revision 122231)
+++ libjava/classpath/native/jni/midi-alsa/Makefile.in	(working copy)
@@ -145,6 +145,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/native/jni/java-lang/Makefile.in
===================================================================
--- libjava/classpath/native/jni/java-lang/Makefile.in	(revision 122231)
+++ libjava/classpath/native/jni/java-lang/Makefile.in	(working copy)
@@ -151,6 +151,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/native/jni/java-nio/Makefile.in
===================================================================
--- libjava/classpath/native/jni/java-nio/Makefile.in	(revision 122231)
+++ libjava/classpath/native/jni/java-nio/Makefile.in	(working copy)
@@ -153,6 +153,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/native/jni/java-net/Makefile.in
===================================================================
--- libjava/classpath/native/jni/java-net/Makefile.in	(revision 122231)
+++ libjava/classpath/native/jni/java-net/Makefile.in	(working copy)
@@ -155,6 +155,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/native/jni/xmlj/Makefile.in
===================================================================
--- libjava/classpath/native/jni/xmlj/Makefile.in	(revision 122231)
+++ libjava/classpath/native/jni/xmlj/Makefile.in	(working copy)
@@ -144,6 +144,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/native/jni/qt-peer/Makefile.in
===================================================================
--- libjava/classpath/native/jni/qt-peer/Makefile.in	(revision 122231)
+++ libjava/classpath/native/jni/qt-peer/Makefile.in	(working copy)
@@ -160,6 +160,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/native/jni/gtk-peer/Makefile.in
===================================================================
--- libjava/classpath/native/jni/gtk-peer/Makefile.in	(revision 122231)
+++ libjava/classpath/native/jni/gtk-peer/Makefile.in	(working copy)
@@ -183,6 +183,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/native/jni/gtk-peer/gnu_java_awt_peer_gtk_CairoGraphics2D.c
===================================================================
--- libjava/classpath/native/jni/gtk-peer/gnu_java_awt_peer_gtk_CairoGraphics2D.c	(revision 122231)
+++ libjava/classpath/native/jni/gtk-peer/gnu_java_awt_peer_gtk_CairoGraphics2D.c	(working copy)
@@ -87,7 +87,11 @@
     return;
 
   if (gr->cr)
-    cairo_destroy (gr->cr);
+    {
+      gdk_threads_enter();
+      cairo_destroy (gr->cr);
+      gdk_threads_leave();
+    }
 
   if (gr->pattern)
     cairo_pattern_destroy (gr->pattern);
@@ -343,9 +347,11 @@
   (*env)->ReleaseFloatArrayElements (env, java_positions, native_positions, 0);
   (*env)->ReleaseIntArrayElements (env, java_codes, native_codes, 0);
 
+  gdk_threads_enter ();
   pango_fc_font_lock_face( (PangoFcFont *)pfont->font );
   cairo_show_glyphs (gr->cr, glyphs, n);
   pango_fc_font_unlock_face( (PangoFcFont *)pfont->font );
+  gdk_threads_leave ();
 
   g_free(glyphs);
 }
@@ -367,6 +373,7 @@
   pfont = (struct peerfont *)NSA_GET_FONT_PTR (env, font);
   g_assert (pfont != NULL);
 
+  gdk_threads_enter();
   face = pango_fc_font_lock_face( (PangoFcFont *)pfont->font );
   g_assert (face != NULL);
 
@@ -380,6 +387,7 @@
                        
   cairo_font_face_destroy (ft);
   pango_fc_font_unlock_face((PangoFcFont *)pfont->font);
+  gdk_threads_leave();
 }
 
 JNIEXPORT void JNICALL
@@ -609,40 +617,6 @@
 }
 
 JNIEXPORT void JNICALL
-Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelMoveTo 
-(JNIEnv *env __attribute__((unused)), jobject obj __attribute__((unused)),
- jlong pointer, jdouble dx, jdouble dy)
-{
-  struct cairographics2d *gr = JLONG_TO_PTR(struct cairographics2d, pointer);
-  g_assert (gr != NULL);
-
-  cairo_rel_move_to (gr->cr, dx, dy);
-}
-
-JNIEXPORT void JNICALL
-Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelLineTo 
-(JNIEnv *env __attribute__((unused)), jobject obj __attribute__((unused)),
- jlong pointer, jdouble dx, jdouble dy)
-{
-  struct cairographics2d *gr = JLONG_TO_PTR(struct cairographics2d, pointer);
-  g_assert (gr != NULL);
-
-  cairo_rel_line_to (gr->cr, dx, dy);
-}
-
-JNIEXPORT void JNICALL
-Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelCurveTo 
-(JNIEnv *env __attribute__((unused)), jobject obj __attribute__((unused)),
- jlong pointer, jdouble dx1, jdouble dy1,
- jdouble dx2, jdouble dy2, jdouble dx3, jdouble dy3)
-{
-  struct cairographics2d *gr = JLONG_TO_PTR(struct cairographics2d, pointer);
-  g_assert (gr != NULL);
-
-  cairo_rel_curve_to (gr->cr, dx1, dy1, dx2, dy2, dx3, dy3);
-}
-
-JNIEXPORT void JNICALL
 Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRectangle 
 (JNIEnv *env __attribute__((unused)), jobject obj __attribute__((unused)),
  jlong pointer, jdouble x, jdouble y, jdouble width, jdouble height)
@@ -726,57 +700,6 @@
   cairo_reset_clip( gr->cr );
 }
 
-JNIEXPORT void JNICALL 
-Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoPreserveClip 
-(JNIEnv *env __attribute__((unused)), jobject obj __attribute__((unused)),
- jlong pointer)
-{
-  struct cairographics2d *gr = JLONG_TO_PTR(struct cairographics2d, pointer);
-  g_assert (gr != NULL);
-
-  cairo_clip_preserve( gr->cr );
-}
-
-JNIEXPORT void JNICALL
-Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoDrawLine
-(JNIEnv *env __attribute__ ((unused)), jobject obj __attribute__ ((unused)),
- jlong pointer, jdouble x1, jdouble y1, jdouble x2, jdouble y2)
-{
-  struct cairographics2d *gr = JLONG_TO_PTR(struct cairographics2d, pointer);
-  g_assert (gr != NULL);
-
-  cairo_new_path(gr->cr);
-  cairo_move_to(gr->cr, x1, y1);
-  cairo_line_to(gr->cr, x2, y2);
-  cairo_stroke(gr->cr);
-}
-
-JNIEXPORT void JNICALL
-Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoDrawRect
-(JNIEnv *env __attribute__ ((unused)), jobject obj __attribute__ ((unused)),
- jlong pointer, jdouble x, jdouble y, jdouble w, jdouble h)
-{
-  struct cairographics2d *gr = JLONG_TO_PTR(struct cairographics2d, pointer);
-  g_assert (gr != NULL);
-
-  cairo_new_path(gr->cr);
-  cairo_rectangle(gr->cr, x, y, w, h);
-  cairo_stroke(gr->cr);
-}
-
-JNIEXPORT void JNICALL
-Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoFillRect
-(JNIEnv *env __attribute__ ((unused)), jobject obj __attribute__ ((unused)),
- jlong pointer, jdouble x, jdouble y, jdouble w, jdouble h)
-{
-  struct cairographics2d *gr = JLONG_TO_PTR(struct cairographics2d, pointer);
-  g_assert (gr != NULL);
-
-  cairo_new_path(gr->cr);
-  cairo_rectangle(gr->cr, x, y, w, h);
-  cairo_fill(gr->cr);
-}
-
 static void 
 update_pattern_transform (struct cairographics2d *gr)
 {
Index: libjava/classpath/native/jni/gtk-peer/gnu_java_awt_peer_gtk_ComponentGraphics.c
===================================================================
--- libjava/classpath/native/jni/gtk-peer/gnu_java_awt_peer_gtk_ComponentGraphics.c	(revision 122231)
+++ libjava/classpath/native/jni/gtk-peer/gnu_java_awt_peer_gtk_ComponentGraphics.c	(working copy)
@@ -1,5 +1,5 @@
 /* gnu_java_awt_peer_gtk_ComponentGraphics.c
-   Copyright (C) 2006 Free Software Foundation, Inc.
+   Copyright (C) 2006, 2007 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -159,40 +159,13 @@
 
   cr = cairo_create (surface);
   g_assert(cr != NULL);
+  cairo_surface_destroy(surface);
 
   gdk_threads_leave();
 
   return PTR_TO_JLONG(cr);
 }
 
-/**
- * Disposes of the surface
- */
-JNIEXPORT void JNICALL
-Java_gnu_java_awt_peer_gtk_ComponentGraphics_disposeSurface
-  (JNIEnv *env __attribute__((unused)), jobject obj __attribute__((unused)),
-   jlong value)
-{
-  struct cairographics2d *gr;
-  cairo_surface_t *surface;
-
-  gr = JLONG_TO_PTR(struct cairographics2d, value);
-
-  if (gr == NULL)
-    return;
-
-  if (gr->cr == NULL)
-    return;
-
-  surface = cairo_get_target (gr->cr);
-  if (surface != NULL)
-    {
-      gdk_threads_enter();
-      cairo_surface_destroy (surface);
-      gdk_threads_leave();
-    }
-}
-
 JNIEXPORT jlong JNICALL 
 Java_gnu_java_awt_peer_gtk_ComponentGraphics_initFromVolatile
   (JNIEnv *env  __attribute__ ((unused)), jobject obj __attribute__ ((unused)),
@@ -224,6 +197,7 @@
 
   cr = cairo_create (surface);
   g_assert(cr != NULL);
+  cairo_surface_destroy(surface);
 
   gdk_threads_leave();
 
Index: libjava/classpath/native/Makefile.in
===================================================================
--- libjava/classpath/native/Makefile.in	(revision 122231)
+++ libjava/classpath/native/Makefile.in	(working copy)
@@ -124,6 +124,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/native/jawt/Makefile.in
===================================================================
--- libjava/classpath/native/jawt/Makefile.in	(revision 122231)
+++ libjava/classpath/native/jawt/Makefile.in	(working copy)
@@ -143,6 +143,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/native/fdlibm/Makefile.in
===================================================================
--- libjava/classpath/native/fdlibm/Makefile.in	(revision 122231)
+++ libjava/classpath/native/fdlibm/Makefile.in	(working copy)
@@ -143,6 +143,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/native/plugin/Makefile.in
===================================================================
--- libjava/classpath/native/plugin/Makefile.in	(revision 122231)
+++ libjava/classpath/native/plugin/Makefile.in	(working copy)
@@ -142,6 +142,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/resource/sun/rmi/rmic/messages.properties
===================================================================
--- libjava/classpath/resource/sun/rmi/rmic/messages.properties	(revision 0)
+++ libjava/classpath/resource/sun/rmi/rmic/messages.properties	(revision 124261)
@@ -0,0 +1,38 @@
+# messages.properties -- English language messages
+# Copyright (C) 2007 Free Software Foundation, Inc.
+#
+# This file is part of GNU Classpath.
+#
+# GNU Classpath is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2, or (at your option)
+# any later version.
+#
+# GNU Classpath is distributed in the hope that it will be useful, but
+# WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with GNU Classpath; see the file COPYING.  If not, write to the
+# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+# 02110-1301 USA.
+#
+# Linking this library statically or dynamically with other modules is
+# making a combined work based on this library.  Thus, the terms and
+# conditions of the GNU General Public License cover the whole
+# combination.
+#
+# As a special exception, the copyright holders of this library give you
+# permission to link this library with independent modules to produce an
+# executable, regardless of the license terms of these independent
+# modules, and to copy and distribute the resulting executable under
+# terms of your choice, provided that you also meet, for each linked
+# independent module, the terms and conditions of the license of that
+# module.  An independent module is a module which is not derived from
+# or based on this library.  If you modify this library, you may extend
+# this exception to your version of the library, but you are not
+# obligated to do so.  If you do not wish to do so, delete this
+# exception statement from your version.
+
+Main.InternalError:sun.rmi.rmic: failed to run rmic main method
Index: libjava/classpath/resource/com/sun/tools/javac/messages.properties
===================================================================
--- libjava/classpath/resource/com/sun/tools/javac/messages.properties	(revision 0)
+++ libjava/classpath/resource/com/sun/tools/javac/messages.properties	(revision 124261)
@@ -0,0 +1,42 @@
+# messages.properties -- English language messages
+# Copyright (C) 2007 Free Software Foundation, Inc.
+#
+# This file is part of GNU Classpath.
+#
+# GNU Classpath is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 2, or (at your option)
+# any later version.
+#
+# GNU Classpath is distributed in the hope that it will be useful, but
+# WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+# General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with GNU Classpath; see the file COPYING.  If not, write to the
+# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+# 02110-1301 USA.
+#
+# Linking this library statically or dynamically with other modules is
+# making a combined work based on this library.  Thus, the terms and
+# conditions of the GNU General Public License cover the whole
+# combination.
+#
+# As a special exception, the copyright holders of this library give you
+# permission to link this library with independent modules to produce an
+# executable, regardless of the license terms of these independent
+# modules, and to copy and distribute the resulting executable under
+# terms of your choice, provided that you also meet, for each linked
+# independent module, the terms and conditions of the license of that
+# module.  An independent module is a module which is not derived from
+# or based on this library.  If you modify this library, you may extend
+# this exception to your version of the library, but you are not
+# obligated to do so.  If you do not wish to do so, delete this
+# exception statement from your version.
+
+Main.FailedToRead:failed to read ecj.jar (reconfigure with --with-ecj-jar): {0}
+Main.MalformedURL:malformed URL for ecj.jar: {0}
+Main.FailedToLoad:failed to load {0} from ecj.jar: {1}
+Main.FailedConstructor:failed to find ecj constructor
+Main.FailedCompile:failed to find ecj compile method
Index: libjava/classpath/resource/META-INF/services/org.w3c.dom.DOMImplementationSourceList
===================================================================
--- libjava/classpath/resource/META-INF/services/org.w3c.dom.DOMImplementationSourceList	(revision 0)
+++ libjava/classpath/resource/META-INF/services/org.w3c.dom.DOMImplementationSourceList	(revision 124261)
@@ -0,0 +1 @@
+gnu.xml.dom.ImplementationSource
Index: libjava/classpath/resource/Makefile.in
===================================================================
--- libjava/classpath/resource/Makefile.in	(revision 122231)
+++ libjava/classpath/resource/Makefile.in	(working copy)
@@ -127,6 +127,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/scripts/Makefile.in
===================================================================
--- libjava/classpath/scripts/Makefile.in	(revision 122231)
+++ libjava/classpath/scripts/Makefile.in	(working copy)
@@ -117,6 +117,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/gnu/xml/dom/ls/SAXEventSink.java
===================================================================
--- libjava/classpath/gnu/xml/dom/ls/SAXEventSink.java	(revision 122231)
+++ libjava/classpath/gnu/xml/dom/ls/SAXEventSink.java	(working copy)
@@ -144,37 +144,40 @@
     final String PROPERTIES = "http://xml.org/sax/properties/";
     final String GNU_PROPERTIES = "http://gnu.org/sax/properties/";
 
-    boolean standalone = reader.getFeature(FEATURES + "is-standalone");
-    doc.setXmlStandalone(standalone);
-    try
+    if (reader != null)
       {
-        String version = (String) reader.getProperty(PROPERTIES +
-                                                     "document-xml-version");
-        doc.setXmlVersion(version);
+        boolean standalone = reader.getFeature(FEATURES + "is-standalone");
+        doc.setXmlStandalone(standalone);
+        try
+          {
+            String version = (String) reader.getProperty(PROPERTIES +
+                    "document-xml-version");
+            doc.setXmlVersion(version);
+          }
+        catch (SAXNotRecognizedException e)
+          {
+          }
+        catch (SAXNotSupportedException e)
+          {
+          }
+        try
+          {
+              String encoding = (String) reader.getProperty(GNU_PROPERTIES +
+                      "document-xml-encoding");
+              doc.setXmlEncoding(encoding);
+          }
+        catch (SAXNotRecognizedException e)
+          {
+          }
+        catch (SAXNotSupportedException e)
+          {
+          }
       }
-    catch (SAXNotRecognizedException e)
-      {
-      }
-    catch (SAXNotSupportedException e)
-      {
-      }
     if (locator != null && locator instanceof Locator2)
       {
         String encoding = ((Locator2) locator).getEncoding();
         doc.setInputEncoding(encoding);
       }
-    try
-      {
-        String encoding = (String) reader.getProperty(GNU_PROPERTIES +
-                                                      "document-xml-encoding");
-        doc.setXmlEncoding(encoding);
-      }
-    catch (SAXNotRecognizedException e)
-      {
-      }
-    catch (SAXNotSupportedException e)
-      {
-      }
   }
 
   public void endDocument()
Index: libjava/classpath/gnu/xml/dom/ls/DomLSParser.java
===================================================================
--- libjava/classpath/gnu/xml/dom/ls/DomLSParser.java	(revision 122231)
+++ libjava/classpath/gnu/xml/dom/ls/DomLSParser.java	(working copy)
@@ -363,22 +363,6 @@
         source = new InputSource(in);
         source.setSystemId(systemId);
       }
-    if (source == null && entityResolver != null)
-      {
-        String publicId = input.getPublicId();
-        try
-          {
-            source = entityResolver.resolveEntity(publicId, systemId);
-          }
-        catch (SAXException e)
-          {
-            throw new DomLSException(LSException.PARSE_ERR, e);
-          } 
-        catch (IOException e)
-          {
-            throw new DomLSException(LSException.PARSE_ERR, e);
-          } 
-      }
     if (source == null)
       {
         URL url = null;
Index: libjava/classpath/gnu/java/awt/peer/gtk/CairoGraphics2D.java
===================================================================
--- libjava/classpath/gnu/java/awt/peer/gtk/CairoGraphics2D.java	(revision 122231)
+++ libjava/classpath/gnu/java/awt/peer/gtk/CairoGraphics2D.java	(working copy)
@@ -302,7 +302,7 @@
    * Allocate the cairographics2d structure and set the cairo_t pointer in it.
    * @param pointer - a cairo_t pointer, casted to a long.
    */
-  private native long init(long pointer);
+  protected native long init(long pointer);
 
   /**
    * These are declared abstract as there may be context-specific issues.
@@ -335,56 +335,56 @@
    * @param stride - stride of the array width
    * @param i2u - affine transform array
    */
-  private native void drawPixels(long pointer, int[] pixels, int w, int h,
+  protected native void drawPixels(long pointer, int[] pixels, int w, int h,
                                  int stride, double[] i2u, double alpha,
                                  int interpolation);
 
-  private native void setGradient(long pointer, double x1, double y1,
+  protected native void setGradient(long pointer, double x1, double y1,
                                   double x2, double y2,
                                   int r1, int g1, int b1, int a1, int r2,
                                   int g2, int b2, int a2, boolean cyclic);
   
-  private native void setPaintPixels(long pointer, int[] pixels, int w,
+  protected native void setPaintPixels(long pointer, int[] pixels, int w,
                                        int h, int stride, boolean repeat,
                                        int x, int y);
 
   /**
    * Set the current transform matrix
    */
-  private native void cairoSetMatrix(long pointer, double[] m);
+  protected native void cairoSetMatrix(long pointer, double[] m);
   
   /**
    * Scaling method
    */
-  private native void cairoScale(long pointer, double x, double y);
+  protected native void cairoScale(long pointer, double x, double y);
 
   /**
    * Set the compositing operator
    */
-  private native void cairoSetOperator(long pointer, int cairoOperator);
+  protected native void cairoSetOperator(long pointer, int cairoOperator);
 
   /**
    * Sets the current color in RGBA as a 0.0-1.0 double
    */
-  private native void cairoSetRGBAColor(long pointer, double red, double green,
+  protected native void cairoSetRGBAColor(long pointer, double red, double green,
                                         double blue, double alpha);
 
   /**
    * Sets the current winding rule in Cairo
    */
-  private native void cairoSetFillRule(long pointer, int cairoFillRule);
+  protected native void cairoSetFillRule(long pointer, int cairoFillRule);
 
   /**
    * Set the line style, cap, join and miter limit.
    * Cap and join parameters are in the BasicStroke enumerations.
    */
-  private native void cairoSetLine(long pointer, double width, int cap,
+  protected native void cairoSetLine(long pointer, double width, int cap,
                                    int join, double miterLimit);
 
   /**
    * Set the dash style
    */
-  private native void cairoSetDash(long pointer, double[] dashes, int ndash,
+  protected native void cairoSetDash(long pointer, double[] dashes, int ndash,
                                    double offset);
 
   /*
@@ -397,122 +397,67 @@
   /**
    * Set the font in cairo.
    */
-  private native void cairoSetFont(long pointer, GdkFontPeer font);
+  protected native void cairoSetFont(long pointer, GdkFontPeer font);
 
-  private native void cairoRelCurveTo(long pointer, double dx1, double dy1,
-                                      double dx2, double dy2, double dx3,
-                                      double dy3);
-
   /**
    * Appends a rectangle to the current path
    */
-  private native void cairoRectangle(long pointer, double x, double y,
+  protected native void cairoRectangle(long pointer, double x, double y,
                                      double width, double height);
   
   /**
    * Appends an arc to the current path
    */
-  private native void cairoArc(long pointer, double x, double y,
+  protected native void cairoArc(long pointer, double x, double y,
                                double radius, double angle1, double angle2);
 
   /**
    * Save / restore a cairo path
    */
-  private native void cairoSave(long pointer);
-  private native void cairoRestore(long pointer);
+  protected native void cairoSave(long pointer);
+  protected native void cairoRestore(long pointer);
 
   /**
    * New current path
    */
-  private native void cairoNewPath(long pointer);
+  protected native void cairoNewPath(long pointer);
 
   /** 
    * Close current path
    */
-  private native void cairoClosePath(long pointer);
+  protected native void cairoClosePath(long pointer);
 
   /** moveTo */
-  private native void cairoMoveTo(long pointer, double x, double y);
+  protected native void cairoMoveTo(long pointer, double x, double y);
 
-  /** relative moveTo */
-  private native void cairoRelMoveTo(long pointer, double dx, double dy);
-
   /** lineTo */
-  private native void cairoLineTo(long pointer, double x, double y);
+  protected native void cairoLineTo(long pointer, double x, double y);
 
-  /** relative lineTo */
-  private native void cairoRelLineTo(long pointer, double dx, double dy);
-
   /** Cubic curve-to */
-  private native void cairoCurveTo(long pointer, double x1, double y1,
+  protected native void cairoCurveTo(long pointer, double x1, double y1,
                                    double x2, double y2,
                                    double x3, double y3);
 
   /**
    * Stroke current path
    */
-  private native void cairoStroke(long pointer);
+  protected native void cairoStroke(long pointer);
 
   /**
    * Fill current path
    */
-  private native void cairoFill(long pointer, double alpha);
+  protected native void cairoFill(long pointer, double alpha);
 
   /** 
    * Clip current path
    */
-  private native void cairoClip(long pointer);
+  protected native void cairoClip(long pointer);
 
   /** 
    * Save clip
    */
-  private native void cairoPreserveClip(long pointer);
+  protected native void cairoResetClip(long pointer);
 
-  /** 
-   * Save clip
-   */
-  private native void cairoResetClip(long pointer);
-
-  /**
-   * Draws a line from (x1,y1) to (x2,y2).
-   *
-   * @param pointer the native pointer
-   *
-   * @param x1 the x coordinate of the starting point
-   * @param y1 the y coordinate of the starting point
-   * @param x2 the x coordinate of the end point
-   * @param y2 the y coordinate of the end point
-   */
-  private native void cairoDrawLine(long pointer, double x1, double y1,
-                                    double x2, double y2);
-
-  /**
-   * Draws a rectangle at starting point (x,y) and with the specified width
-   * and height.
-   *
-   * @param pointer the native pointer
-   * @param x the x coordinate of the upper left corner
-   * @param y the y coordinate of the upper left corner
-   * @param w the width of the rectangle
-   * @param h the height of the rectangle
-   */
-  private native void cairoDrawRect(long pointer, double x, double y, double w,
-                                    double h);
-
-  /**
-   * Fills a rectangle at starting point (x,y) and with the specified width
-   * and height.
-   *
-   * @param pointer the native pointer
-   * @param x the x coordinate of the upper left corner
-   * @param y the y coordinate of the upper left corner
-   * @param w the width of the rectangle
-   * @param h the height of the rectangle
-   */
-  private native void cairoFillRect(long pointer, double x, double y, double w,
-                                    double h);
-
-
   ///////////////////////// TRANSFORMS ///////////////////////////////////
   /**
    * Set the current transform
@@ -2054,4 +1999,4 @@
 
     return rect;
   }
-}
\ No newline at end of file
+}
Index: libjava/classpath/gnu/java/awt/peer/gtk/ComponentGraphics.java
===================================================================
--- libjava/classpath/gnu/java/awt/peer/gtk/ComponentGraphics.java	(revision 122231)
+++ libjava/classpath/gnu/java/awt/peer/gtk/ComponentGraphics.java	(working copy)
@@ -112,6 +112,14 @@
    */
   private native long initState(GtkComponentPeer component);
 
+  /**
+   * Obtain and hold a GDK lock, which is required for all drawing operations
+   * in this graphics context (since it is backed by an X surface).
+   * 
+   * This method causes the GDK locking behaviour to be re-entrant.  No race
+   * conditions are caused since a ThreadLocal is used and each thread has its
+   * own lock counter.
+   */
   private void lock()
   {
     Integer i = (Integer) hasLock.get();
@@ -124,6 +132,9 @@
       hasLock.set(Integer.valueOf(i.intValue() + 1));
   }
 
+  /**
+   * Release the re-entrant GDK lock.
+   */
   private void unlock()
   {
     Integer i = (Integer) hasLock.get();
@@ -139,21 +150,6 @@
   }
 
   /**
-   * Destroys the component surface and calls dispose on the cairo
-   * graphics2d to destroy any super class resources.
-   */
-  public void dispose()
-  {
-    super.dispose();
-    disposeSurface(nativePointer);
-  }
-
-  /**
-   * Destroys the component surface.
-   */
-  private native void disposeSurface(long nativePointer);
-
-  /**
    * Creates a cairo_t for a volatile image
    */
   protected native long initFromVolatile( long pixmapPtr, int width, int height);
@@ -234,161 +230,121 @@
    */
   public void draw(Shape s)
   {
-    lock();
-    try
+    if (comp == null || comp instanceof AlphaComposite)
+      super.draw(s);
+        
+    else
       {
-        if (comp == null || comp instanceof AlphaComposite)
-          super.draw(s);
-        
-        else
-          {
-            createBuffer();
+        createBuffer();
             
-            Graphics2D g2d = (Graphics2D)buffer.getGraphics();
-            g2d.setStroke(this.getStroke());
-            g2d.setColor(this.getColor());
-            g2d.draw(s);
+        Graphics2D g2d = (Graphics2D)buffer.getGraphics();
+        g2d.setStroke(this.getStroke());
+        g2d.setColor(this.getColor());
+        g2d.draw(s);
             
-            drawComposite(s.getBounds2D(), null);
-          }
+        drawComposite(s.getBounds2D(), null);
       }
-    finally
-      {
-	unlock();
-      }
   }
 
   public void fill(Shape s)
   {
-    lock();
-    try
+    if (comp == null || comp instanceof AlphaComposite)
+      super.fill(s);
+        
+    else
       {
-        if (comp == null || comp instanceof AlphaComposite)
-          super.fill(s);
-        
-        else
-          {
-            createBuffer();
+        createBuffer();
             
-            Graphics2D g2d = (Graphics2D)buffer.getGraphics();
-            g2d.setPaint(this.getPaint());
-            g2d.setColor(this.getColor());
-            g2d.fill(s);
+        Graphics2D g2d = (Graphics2D)buffer.getGraphics();
+        g2d.setPaint(this.getPaint());
+        g2d.setColor(this.getColor());
+        g2d.fill(s);
             
-            drawComposite(s.getBounds2D(), null);
-          }
+        drawComposite(s.getBounds2D(), null);
       }
-    finally
-      {
-	unlock();
-      }
   }
 
   public void drawRenderedImage(RenderedImage image, AffineTransform xform)
   {
-    lock();
-    try
+    if (comp == null || comp instanceof AlphaComposite)
+      super.drawRenderedImage(image, xform);
+        
+    else
       {
-        if (comp == null || comp instanceof AlphaComposite)
-          super.drawRenderedImage(image, xform);
-        
-        else
-          {
-            createBuffer();
+        createBuffer();
 
-            Graphics2D g2d = (Graphics2D)buffer.getGraphics();
-            g2d.setRenderingHints(this.getRenderingHints());
-            g2d.drawRenderedImage(image, xform);
+        Graphics2D g2d = (Graphics2D)buffer.getGraphics();
+        g2d.setRenderingHints(this.getRenderingHints());
+        g2d.drawRenderedImage(image, xform);
             
-            drawComposite(buffer.getRaster().getBounds(), null);
-          }
+        drawComposite(buffer.getRaster().getBounds(), null);
       }
-    finally
-      {
-	unlock();
-      }
   }
 
   protected boolean drawImage(Image img, AffineTransform xform,
 			      Color bgcolor, ImageObserver obs)
   {
     boolean rv;
-    lock();
-    try
+    if (comp == null || comp instanceof AlphaComposite)
+      rv = super.drawImage(img, xform, bgcolor, obs);
+        
+    else
       {
-        if (comp == null || comp instanceof AlphaComposite)
-          rv = super.drawImage(img, xform, bgcolor, obs);
-        
-        else
+        // Get buffered image of source
+        if( !(img instanceof BufferedImage) )
           {
-            // Get buffered image of source
-            if( !(img instanceof BufferedImage) )
-              {
-                ImageProducer source = img.getSource();
-                if (source == null)
-                  return false;
-                img = Toolkit.getDefaultToolkit().createImage(source);
-              }
-            BufferedImage bImg = (BufferedImage) img;
+            ImageProducer source = img.getSource();
+            if (source == null)
+              return false;
+            img = Toolkit.getDefaultToolkit().createImage(source);
+          }
+        BufferedImage bImg = (BufferedImage) img;
             
-            // Find translated bounds
-            Point2D origin = new Point2D.Double(bImg.getMinX(), bImg.getMinY());
-            Point2D pt = new Point2D.Double(bImg.getWidth() + bImg.getMinX(),
-                                            bImg.getHeight() + bImg.getMinY());
-            if (xform != null)
-              {
-                origin = xform.transform(origin, origin);
-                pt = xform.transform(pt, pt);
-              }
+        // Find translated bounds
+        Point2D origin = new Point2D.Double(bImg.getMinX(), bImg.getMinY());
+        Point2D pt = new Point2D.Double(bImg.getWidth() + bImg.getMinX(),
+                                        bImg.getHeight() + bImg.getMinY());
+        if (xform != null)
+          {
+            origin = xform.transform(origin, origin);
+            pt = xform.transform(pt, pt);
+          }
             
-            // Create buffer and draw image
-            createBuffer();
+        // Create buffer and draw image
+        createBuffer();
             
-            Graphics2D g2d = (Graphics2D)buffer.getGraphics();
-            g2d.setRenderingHints(this.getRenderingHints());
-            g2d.drawImage(img, xform, obs);
+        Graphics2D g2d = (Graphics2D)buffer.getGraphics();
+        g2d.setRenderingHints(this.getRenderingHints());
+        g2d.drawImage(img, xform, obs);
 
-            // Perform compositing
-            rv = drawComposite(new Rectangle2D.Double(origin.getX(),
-                                                        origin.getY(),
-                                                        pt.getX(), pt.getY()),
-                                 obs);
-          }
+        // Perform compositing
+        rv = drawComposite(new Rectangle2D.Double(origin.getX(),
+                                                  origin.getY(),
+                                                  pt.getX(), pt.getY()),
+                           obs);
       }
-    finally
-      {
-	unlock();
-      }
     return rv;
   }
 
   public void drawGlyphVector(GlyphVector gv, float x, float y)
   {
-    lock();
-    try
+    if (comp == null || comp instanceof AlphaComposite)
+      super.drawGlyphVector(gv, x, y);
+        
+    else
       {
-        if (comp == null || comp instanceof AlphaComposite)
-          super.drawGlyphVector(gv, x, y);
-        
-        else
-          {
-            createBuffer();
+        createBuffer();
 
-            Graphics2D g2d = (Graphics2D)buffer.getGraphics();
-            g2d.setPaint(this.getPaint());
-            g2d.setStroke(this.getStroke());
-            g2d.drawGlyphVector(gv, x, y);
+        Graphics2D g2d = (Graphics2D)buffer.getGraphics();
+        g2d.setPaint(this.getPaint());
+        g2d.setStroke(this.getStroke());
+        g2d.drawGlyphVector(gv, x, y);
             
-            Rectangle2D bounds = gv.getLogicalBounds();
-            bounds = new Rectangle2D.Double(x + bounds.getX(), y + bounds.getY(),
-                                            bounds.getWidth(), bounds.getHeight());
-            drawComposite(bounds, null);
-          }
+        Rectangle2D bounds = gv.getLogicalBounds();
+        bounds = new Rectangle2D.Double(x + bounds.getX(), y + bounds.getY(),
+                                        bounds.getWidth(), bounds.getHeight());
+        drawComposite(bounds, null);
       }
-    finally
-      {
-	unlock();
-      }
   }
   
   public boolean drawImage(Image img, int x, int y, ImageObserver observer)
@@ -481,20 +437,6 @@
     return super.drawImage(bimg, x, y, width, height, observer);
   }
 
-  public void setClip(Shape s)
-  {
-    lock();
-    try
-      {
-	super.setClip(s);
-      }
-    finally
-      {
-	unlock();
-      }
-  }
-
-  
   private boolean drawComposite(Rectangle2D bounds, ImageObserver observer)
   {
     // Clip source to visible areas that need updating
@@ -522,12 +464,10 @@
     Rectangle2D.intersect(deviceBounds, this.getClipInDevSpace(), deviceBounds);
     
     // Get current image on the component
-    unlock();
     GtkImage img = grab(component);
     Graphics gr = componentBuffer.createGraphics();
     gr.drawImage(img, 0, 0, null);
     gr.dispose();
-    lock();
     
     BufferedImage cBuffer = componentBuffer;
     if (!deviceBounds.equals(cBuffer.getRaster().getBounds()))
@@ -588,5 +528,384 @@
   {
     return GtkVolatileImage.gdkColorModel;
   }
+  
+  /* --- START OVERRIDDEN NATIVE METHODS ----
+   * All native methods in CairoGraphics2D should be overridden here and
+   * enclosed in locks, since the cairo surface is backed by an X surface
+   * in this graphics context and the X surface requires external locking.
+   * 
+   * We lock everything "just in case", since it's difficult to know which
+   * calls are and aren't thread-safe.  Overriding and locking the native
+   * methods allows superclass code in CairoGraphics2D to execute properly, 
+   * without the need to override every single method.
+   * 
+   * CAVEAT: if native code obtains a lock (using gdk_threads_enter(), not the
+   * lock() method provided here) and then calls back into Java and one of these
+   * methods ends up being called, we will deadlock.  The lock is only reentrant
+   * when called via our lock() method. 
+   */
+  
+  /* These methods are already locked in the superclass CairoGraphics2D
+   * so they do not need to be overridden:
+   * 
+   * public void disposeNative
+   *
+   * protected void cairoDrawGlyphVector
+   * 
+   * protected void cairoSetFont
+   */
+  
+  @Override
+  protected long init(long pointer)
+  {
+    long ret;
+    
+    try
+    {
+      lock();
+      ret = super.init(pointer);
+    }
+    finally
+    {
+      unlock();
+    }
+    
+    return ret;
+  }
+  
+  @Override
+  protected void drawPixels(long pointer, int[] pixels, int w, int h,
+                            int stride, double[] i2u, double alpha,
+                            int interpolation)
+  {
+    try
+    {
+      lock();
+      super.drawPixels(pointer, pixels, w, h, stride, i2u, alpha,
+                       interpolation);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void setGradient(long pointer, double x1, double y1, 
+                             double x2, double y2, 
+                             int r1, int g1, int b1, int a1,
+                             int r2, int g2, int b2, int a2, boolean cyclic)
+  {
+    try
+    {
+      lock();
+      super.setGradient(pointer, x1, y1, x2, y2, r1, g1, b1, a1, r2, g2, b2, a2,
+                        cyclic);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void setPaintPixels(long pointer, int[] pixels, int w, int h,
+                                int stride, boolean repeat, int x, int y)
+  {
+    try
+    {
+      lock();
+      super.setPaintPixels(pointer, pixels, w, h, stride, repeat, x, y);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void cairoSetMatrix(long pointer, double[] m)
+  {
+    try
+    {
+      lock();
+      super.cairoSetMatrix(pointer, m);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void cairoScale(long pointer, double x, double y)
+  {
+    try
+    {
+      lock();
+      super.cairoScale(pointer, x, y);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void cairoSetOperator(long pointer, int cairoOperator)
+  {
+    try
+    {
+      lock();
+      super.cairoSetOperator(pointer, cairoOperator);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void cairoSetRGBAColor(long pointer, double red, double green,
+                                   double blue, double alpha)
+  {
+    try
+    {
+      lock();
+      super.cairoSetRGBAColor(pointer, red, green, blue, alpha);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void cairoSetFillRule(long pointer, int cairoFillRule)
+  {
+    try
+    {
+      lock();
+      super.cairoSetFillRule(pointer, cairoFillRule);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void cairoSetLine(long pointer, double width, int cap, int join,
+                              double miterLimit)
+  {
+    try
+    {
+      lock();
+      super.cairoSetLine(pointer, width, cap, join, miterLimit);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void cairoSetDash(long pointer, double[] dashes, int ndash, 
+                              double offset)
+  {
+    try
+    {
+      lock();
+      super.cairoSetDash(pointer, dashes, ndash, offset);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void cairoRectangle(long pointer, double x, double y,
+                                double width, double height)
+  {
+    try
+    {
+      lock();
+      super.cairoRectangle(pointer, x, y, width, height);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void cairoArc(long pointer, double x, double y, 
+                          double radius, double angle1, double angle2)
+  {
+    try
+    {
+      lock();
+      super.cairoArc(pointer, x, y, radius, angle1, angle2);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void cairoSave(long pointer)
+  {
+    try
+    {
+      lock();
+      super.cairoSave(pointer);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void cairoRestore(long pointer)
+  {
+    try
+    {
+      lock();
+      super.cairoRestore(pointer);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void cairoNewPath(long pointer)
+  {
+    try
+    {
+      lock();
+      super.cairoNewPath(pointer);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void cairoClosePath(long pointer)
+  {
+    try
+    {
+      lock();
+      super.cairoClosePath(pointer);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void cairoMoveTo(long pointer, double x, double y)
+  {
+    try
+    {
+      lock();
+      super.cairoMoveTo(pointer, x, y);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void cairoLineTo(long pointer, double x, double y)
+  {
+    try
+    {
+      lock();
+      super.cairoLineTo(pointer, x, y);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void cairoCurveTo(long pointer, double x1, double y1, double x2,
+                              double y2, double x3, double y3)
+  {
+    try
+    {
+      lock();
+      super.cairoCurveTo(pointer, x1, y1, x2, y2, x3, y3);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void cairoStroke(long pointer)
+  {
+    try
+    {
+      lock();
+      super.cairoStroke(pointer);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void cairoFill(long pointer, double alpha)
+  {
+    try
+    {
+      lock();
+      super.cairoFill(pointer, alpha);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void cairoClip(long pointer)
+  {
+    try
+    {
+      lock();
+      super.cairoClip(pointer);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
+  
+  @Override
+  protected void cairoResetClip(long pointer)
+  {
+    try
+    {
+      lock();
+      super.cairoResetClip(pointer);
+    }
+    finally
+    {
+      unlock();
+    }
+  }
 }
-
Index: libjava/classpath/gnu/java/util/ZoneInfo.java
===================================================================
--- libjava/classpath/gnu/java/util/ZoneInfo.java	(revision 0)
+++ libjava/classpath/gnu/java/util/ZoneInfo.java	(revision 124261)
@@ -0,0 +1,1160 @@
+/* gnu.java.util.ZoneInfo
+   Copyright (C) 2007 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package gnu.java.util;
+
+import java.io.BufferedInputStream;
+import java.io.DataInputStream;
+import java.io.EOFException;
+import java.io.FileInputStream;
+import java.io.InputStream;
+import java.io.IOException;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+import java.util.SimpleTimeZone;
+import java.util.TimeZone;
+
+/**
+ * This class represents more advanced variant of java.util.SimpleTimeZone.
+ * It can handle zic(8) compiled transition dates plus uses a SimpleTimeZone
+ * for years beyond last precomputed transition.  Before first precomputed
+ * transition it assumes no daylight saving was in effect.
+ * Timezones that never used daylight saving time should use just
+ * SimpleTimeZone instead of this class.
+ *
+ * This object is tightly bound to the Gregorian calendar.  It assumes
+ * a regular seven days week, and the month lengths are that of the
+ * Gregorian Calendar.
+ *
+ * @see Calendar
+ * @see GregorianCalendar
+ * @see SimpleTimeZone
+ * @author Jakub Jelinek
+ */
+public class ZoneInfo extends TimeZone
+{
+  private static final int SECS_SHIFT = 22;
+  private static final long OFFSET_MASK = (1 << 21) - 1;
+  private static final int OFFSET_SHIFT = 64 - 21;
+  private static final long IS_DST = 1 << 21;
+
+  /**
+   * The raw time zone offset in milliseconds to GMT, ignoring
+   * daylight savings.
+   * @serial
+   */
+  private int rawOffset;
+
+  /**
+   * Cached DST savings for the last transition rule.
+   */
+  private int dstSavings;
+
+  /**
+   * Cached flag whether last transition rule uses DST saving.
+   */
+  private boolean useDaylight;
+
+  /**
+   * Array of encoded transitions.
+   * Transition time in UTC seconds since epoch is in the most
+   * significant 64 - SECS_SHIFT bits, then one bit flag
+   * whether DST is active and the least significant bits
+   * containing offset relative to rawOffset.  Both the DST
+   * flag and relative offset apply to time before the transition
+   * and after or equal to previous transition if any.
+   * The array must be sorted.
+   */
+  private long[] transitions;
+
+  /**
+   * SimpleTimeZone rule which applies on or after the latest
+   * transition.  If the DST changes are not expresible as a
+   * SimpleTimeZone rule, then the rule should just contain
+   * the standard time and no DST time.
+   */
+  private SimpleTimeZone lastRule;
+
+  /**
+   * Cached GMT SimpleTimeZone object for internal use in
+   * getOffset method.
+   */
+  private static SimpleTimeZone gmtZone = null;
+
+  static final long serialVersionUID = -3740626706860383657L;
+
+  /**
+   * Create a <code>ZoneInfo</code> with the given time offset
+   * from GMT and with daylight savings.
+   *
+   * @param rawOffset The time offset from GMT in milliseconds.
+   * @param id  The identifier of this time zone.
+   * @param transitions  Array of transition times in UTC seconds since
+   * Epoch in topmost 42 bits, below that 1 boolean bit whether the time
+   * before that transition used daylight saving and in bottommost 21
+   * bits relative daylight saving offset against rawOffset in seconds
+   * that applies before this transition.
+   * @param endRule SimpleTimeZone class describing the daylight saving
+   * rules after the last transition.
+   */
+  public ZoneInfo(int rawOffset, String id, long[] transitions,
+		  SimpleTimeZone lastRule)
+  {
+    if (transitions == null || transitions.length < 1)
+      throw new IllegalArgumentException("transitions must not be null");
+    if (lastRule == null)
+      throw new IllegalArgumentException("lastRule must not be null");
+    this.rawOffset = rawOffset;
+    this.transitions = transitions;
+    this.lastRule = lastRule;
+    setID(id);
+    computeDSTSavings();
+  }
+
+  /**
+   * Gets the time zone offset, for current date, modified in case of
+   * daylight savings.  This is the offset to add to UTC to get the local
+   * time.
+   *
+   * The day must be a positive number and dayOfWeek must be a positive value
+   * from Calendar.  dayOfWeek is redundant, but must match the other values
+   * or an inaccurate result may be returned.
+   *
+   * @param era the era of the given date
+   * @param year the year of the given date
+   * @param month the month of the given date, 0 for January.
+   * @param day the day of month
+   * @param dayOfWeek the day of week; this must match the other fields.
+   * @param millis the millis in the day (in local standard time)
+   * @return the time zone offset in milliseconds.
+   * @throws IllegalArgumentException if arguments are incorrect.
+   */
+  public int getOffset(int era, int year, int month, int day, int dayOfWeek,
+		       int millis)
+  {
+    if (gmtZone == null)
+      gmtZone = new SimpleTimeZone(0, "GMT");
+
+    if (dayOfWeek < Calendar.SUNDAY || dayOfWeek > Calendar.SATURDAY)
+      throw new IllegalArgumentException("dayOfWeek out of range");
+    if (month < Calendar.JANUARY || month > Calendar.DECEMBER)
+      throw new IllegalArgumentException("month out of range:" + month);
+
+    if (era != GregorianCalendar.AD)
+      return (int) (((transitions[0] << OFFSET_SHIFT) >> OFFSET_SHIFT) * 1000);
+
+    GregorianCalendar cal = new GregorianCalendar((TimeZone) gmtZone);
+    cal.set(year, month, day, 0, 0, 0);
+    if (cal.get(Calendar.DAY_OF_MONTH) != day)
+      throw new IllegalArgumentException("day out of range");
+
+    return getOffset(cal.getTimeInMillis() - rawOffset + millis);
+  }
+
+  private long findTransition(long secs)
+  {
+    if (secs < (transitions[0] >> SECS_SHIFT))
+      return transitions[0];
+
+    if (secs >= (transitions[transitions.length-1] >> SECS_SHIFT))
+      return Long.MAX_VALUE;
+
+    long val = (secs + 1) << SECS_SHIFT;
+    int lo = 1;
+    int hi = transitions.length;
+    int mid = 1;
+    while (lo < hi)
+      {
+	mid = (lo + hi) / 2;
+	// secs < (transitions[mid-1] >> SECS_SHIFT)
+	if (val <= transitions[mid-1])
+	  hi = mid;
+	// secs >= (transitions[mid] >> SECS_SHIFT)
+	else if (val > transitions[mid])
+	  lo = mid + 1;
+	else
+	  break;
+      }
+    return transitions[mid];
+  }
+
+  /**
+   * Get the time zone offset for the specified date, modified in case of
+   * daylight savings.  This is the offset to add to UTC to get the local
+   * time.
+   * @param date the date represented in millisecends
+   * since January 1, 1970 00:00:00 GMT.
+   */
+  public int getOffset(long date)
+  {
+    long d = (date >= 0 ? date / 1000 : (date + 1) / 1000 - 1);
+    long transition = findTransition(d);
+
+    // For times on or after last transition use lastRule.
+    if (transition == Long.MAX_VALUE)
+      return lastRule.getOffset(date);
+
+    return (int) (((transition << OFFSET_SHIFT) >> OFFSET_SHIFT) * 1000);
+  }
+
+  /**
+   * Returns the time zone offset to GMT in milliseconds, ignoring
+   * day light savings.
+   * @return the time zone offset.
+   */
+  public int getRawOffset()
+  {
+    return rawOffset;
+  }
+
+  /**
+   * Sets the standard time zone offset to GMT.
+   * @param rawOffset The time offset from GMT in milliseconds.
+   */
+  public void setRawOffset(int rawOffset)
+  {
+    this.rawOffset = rawOffset;
+    lastRule.setRawOffset(rawOffset);
+  }
+
+  private void computeDSTSavings()
+  {
+    if (lastRule.useDaylightTime())
+      {
+	dstSavings = lastRule.getDSTSavings();
+	useDaylight = true;
+      }
+    else
+      {
+	dstSavings = 0;
+	useDaylight = false;
+	// lastRule might say no DST is in effect simply because
+	// the DST rules are too complex for SimpleTimeZone, say
+	// for Asia/Jerusalem.
+	// Look at the last DST offset if it is newer than current time.
+	long currentSecs = System.currentTimeMillis() / 1000;
+	int i;
+	for (i = transitions.length - 1;
+	     i >= 0 && currentSecs < (transitions[i] >> SECS_SHIFT);
+	     i--)
+	  if ((transitions[i] & IS_DST) != 0)
+	    {
+	      dstSavings = (int) (((transitions[i] << OFFSET_SHIFT)
+				   >> OFFSET_SHIFT) * 1000)
+			   - rawOffset;
+	      useDaylight = true;
+	      break;
+	    }
+      }
+  }
+
+  /**
+   * Gets the daylight savings offset.  This is a positive offset in
+   * milliseconds with respect to standard time.  Typically this
+   * is one hour, but for some time zones this may be half an our.
+   * @return the daylight savings offset in milliseconds.
+   */
+  public int getDSTSavings()
+  {
+    return dstSavings;
+  }
+
+  /**
+   * Returns if this time zone uses daylight savings time.
+   * @return true, if we use daylight savings time, false otherwise.
+   */
+  public boolean useDaylightTime()
+  {
+    return useDaylight;
+  }
+
+  /**
+   * Determines if the given date is in daylight savings time.
+   * @return true, if it is in daylight savings time, false otherwise.
+   */
+  public boolean inDaylightTime(Date date)
+  {
+    long d = date.getTime();
+    d = (d >= 0 ? d / 1000 : (d + 1) / 1000 - 1);
+    long transition = findTransition(d);
+
+    // For times on or after last transition use lastRule.
+    if (transition == Long.MAX_VALUE)
+      return lastRule.inDaylightTime(date);
+
+    return (transition & IS_DST) != 0;
+  }
+
+  /**
+   * Generates the hashCode for the SimpleDateFormat object.  It is
+   * the rawOffset, possibly, if useDaylightSavings is true, xored
+   * with startYear, startMonth, startDayOfWeekInMonth, ..., endTime.
+   */
+  public synchronized int hashCode()
+  {
+    int hash = lastRule.hashCode();
+    // FIXME - hash transitions?
+    return hash;
+  }
+
+  public synchronized boolean equals(Object o)
+  {
+    if (! hasSameRules((TimeZone) o))
+      return false;
+
+    ZoneInfo zone = (ZoneInfo) o;
+    return getID().equals(zone.getID());
+  }
+
+  /**
+   * Test if the other time zone uses the same rule and only
+   * possibly differs in ID.  This implementation for this particular
+   * class will return true if the other object is a ZoneInfo,
+   * the raw offsets and useDaylight are identical and if useDaylight
+   * is true, also the start and end datas are identical.
+   * @return true if this zone uses the same rule.
+   */
+  public boolean hasSameRules(TimeZone o)
+  {
+    if (this == o)
+      return true;
+    if (! (o instanceof ZoneInfo))
+      return false;
+    ZoneInfo zone = (ZoneInfo) o;
+    if (zone.hashCode() != hashCode() || rawOffset != zone.rawOffset)
+      return false;
+    if (! lastRule.equals(zone.lastRule))
+      return false;
+    // FIXME - compare transitions?
+    return true;
+  }
+
+  /**
+   * Returns a string representation of this ZoneInfo object.
+   * @return a string representation of this ZoneInfo object.
+   */
+  public String toString()
+  {
+    return getClass().getName() + "[" + "id=" + getID() + ",offset="
+	   + rawOffset + ",transitions=" + transitions.length
+	   + ",useDaylight=" + useDaylight
+	   + (useDaylight ? (",dstSavings=" + dstSavings) : "")
+	   + ",lastRule=" + lastRule.toString() + "]";
+  }
+
+  /**
+   * Reads zic(8) compiled timezone data file from file
+   * and returns a TimeZone class describing it, either
+   * SimpleTimeZone or ZoneInfo depending on whether
+   * it can be described by SimpleTimeZone rule or not.
+   */
+  public static TimeZone readTZFile(String id, String file)
+  {
+    DataInputStream dis = null;
+    try
+      {
+	FileInputStream fis = new FileInputStream(file);
+	BufferedInputStream bis = new BufferedInputStream(fis);
+	dis = new DataInputStream(bis);
+
+	// Make sure we are reading a tzfile.
+	byte[] tzif = new byte[5];
+	dis.readFully(tzif);
+	int tzif2 = 4;
+	if (tzif[0] == 'T' && tzif[1] == 'Z'
+	    && tzif[2] == 'i' && tzif[3] == 'f')
+	  {
+	    if (tzif[4] >= '2')
+	      tzif2 = 8;
+	    // Reserved bytes
+	    skipFully(dis, 16 - 1);
+	  }
+	else
+	  // Darwin has tzdata files that don't start with the TZif marker
+	  skipFully(dis, 16 - 5);
+
+	int ttisgmtcnt = dis.readInt();
+	int ttisstdcnt = dis.readInt();
+	int leapcnt = dis.readInt();
+	int timecnt = dis.readInt();
+	int typecnt = dis.readInt();
+	int charcnt = dis.readInt();
+	if (tzif2 == 8)
+	  {
+	    skipFully(dis, timecnt * (4 + 1) + typecnt * (4 + 1 + 1) + charcnt
+			   + leapcnt * (4 + 4) + ttisgmtcnt + ttisstdcnt);
+
+	    dis.readFully(tzif);
+	    if (tzif[0] != 'T' || tzif[1] != 'Z' || tzif[2] != 'i'
+		|| tzif[3] != 'f' || tzif[4] < '2')
+	      return null;
+
+	    // Reserved bytes
+	    skipFully(dis, 16 - 1);
+	    ttisgmtcnt = dis.readInt();
+	    ttisstdcnt = dis.readInt();
+	    leapcnt = dis.readInt();
+	    timecnt = dis.readInt();
+	    typecnt = dis.readInt();
+	    charcnt = dis.readInt();
+	  }
+
+	// Sanity checks
+	if (typecnt <= 0 || timecnt < 0 || charcnt < 0
+	    || leapcnt < 0 || ttisgmtcnt < 0 || ttisstdcnt < 0
+	    || ttisgmtcnt > typecnt || ttisstdcnt > typecnt)
+	  return null;
+
+	// Transition times
+	long[] times = new long[timecnt];
+	for (int i = 0; i < timecnt; i++)
+	  if (tzif2 == 8)
+	    times[i] = dis.readLong();
+	  else
+	    times[i] = (long) dis.readInt();
+
+	// Transition types
+	int[] types = new int[timecnt];
+	for (int i = 0; i < timecnt; i++)
+	  {
+	    types[i] = dis.readByte();
+	    if (types[i] < 0)
+	      types[i] += 256;
+	    if (types[i] >= typecnt)
+	      return null;
+	  }
+
+	// Types
+	int[] offsets = new int[typecnt];
+	int[] typeflags = new int[typecnt];
+	for (int i = 0; i < typecnt; i++)
+	  {
+	    offsets[i] = dis.readInt();
+	    if (offsets[i] >= IS_DST / 2 || offsets[i] <= -IS_DST / 2)
+	      return null;
+	    int dst = dis.readByte();
+	    int abbrind = dis.readByte();
+	    if (abbrind < 0)
+	      abbrind += 256;
+	    if (abbrind >= charcnt)
+	      return null;
+	    typeflags[i] = (dst != 0 ? (1 << 8) : 0) + abbrind;
+	  }
+
+	// Abbrev names
+	byte[] names = new byte[charcnt];
+	dis.readFully(names);
+
+	// Leap transitions, for now ignore
+	skipFully(dis, leapcnt * (tzif2 + 4) + ttisstdcnt + ttisgmtcnt);
+
+	// tzIf2 format has optional POSIX TZ env string
+	String tzstr = null;
+	if (tzif2 == 8 && dis.readByte() == '\n')
+	  {
+	    tzstr = dis.readLine();
+	    if (tzstr.length() <= 0)
+	      tzstr = null;
+	  }
+
+	// Get std/dst_offset and dst/non-dst time zone names.
+	int std_ind = -1;
+	int dst_ind = -1;
+	if (timecnt == 0)
+	  std_ind = 0;
+	else
+	  for (int i = timecnt - 1; i >= 0; i--)
+	    {
+	      if (std_ind == -1 && (typeflags[types[i]] & (1 << 8)) == 0)
+		std_ind = types[i];
+	      else if (dst_ind == -1 && (typeflags[types[i]] & (1 << 8)) != 0)
+		dst_ind = types[i];
+	      if (dst_ind != -1 && std_ind != -1)
+		break;
+	    }
+
+	if (std_ind == -1)
+	  return null;
+
+	int j = typeflags[std_ind] & 255;
+	while (j < charcnt && names[j] != 0)
+	  j++;
+	String std_zonename = new String(names, typeflags[std_ind] & 255,
+					 j - (typeflags[std_ind] & 255),
+					 "ASCII");
+
+	String dst_zonename = "";
+	if (dst_ind != -1)
+	  {
+	    j = typeflags[dst_ind] & 255;
+	    while (j < charcnt && names[j] != 0)
+	      j++;
+	    dst_zonename = new String(names, typeflags[dst_ind] & 255,
+				      j - (typeflags[dst_ind] & 255), "ASCII");
+	  }
+
+	// Only use gmt offset when necessary.
+	// Also special case GMT+/- timezones.
+	String std_offset_string = "";
+	String dst_offset_string = "";
+	if (tzstr == null
+	    && (dst_ind != -1
+		|| (offsets[std_ind] != 0
+		    && !std_zonename.startsWith("GMT+")
+		    && !std_zonename.startsWith("GMT-"))))
+	  {
+	    std_offset_string = Integer.toString(-offsets[std_ind] / 3600);
+	    int seconds = -offsets[std_ind] % 3600;
+	    if (seconds != 0)
+	      {
+		if (seconds < 0)
+		  seconds *= -1;
+		if (seconds < 600)
+		  std_offset_string += ":0" + Integer.toString(seconds / 60);
+		else
+		  std_offset_string += ":" + Integer.toString(seconds / 60);
+		seconds = seconds % 60;
+		if (seconds >= 10)
+		  std_offset_string += ":" + Integer.toString(seconds);
+		else if (seconds > 0)
+		  std_offset_string += ":0" + Integer.toString(seconds);
+	      }
+
+	    if (dst_ind != -1 && offsets[dst_ind] != offsets[std_ind] + 3600)
+	      {
+		dst_offset_string = Integer.toString(-offsets[dst_ind] / 3600);
+		seconds = -offsets[dst_ind] % 3600;
+		if (seconds != 0)
+		  {
+		    if (seconds < 0)
+		      seconds *= -1;
+		    if (seconds < 600)
+		      dst_offset_string
+			+= ":0" + Integer.toString(seconds / 60);
+		    else
+		      dst_offset_string
+			+= ":" + Integer.toString(seconds / 60);
+		    seconds = seconds % 60;
+		    if (seconds >= 10)
+		      dst_offset_string += ":" + Integer.toString(seconds);
+		    else if (seconds > 0)
+		      dst_offset_string += ":0" + Integer.toString(seconds);
+		  }
+	      }
+	  }
+
+	/*
+	 * If no tzIf2 POSIX TZ string is available and the timezone
+	 * uses DST, try to guess the last rule by trying to make
+	 * sense from transitions at 5 years in the future and onwards.
+	 * tzdata actually uses only 3 forms of rules:
+	 * fixed date within a month, e.g. change on April, 5th
+	 * 1st weekday on or after Nth: change on Sun>=15 in April
+	 * last weekday in a month: change on lastSun in April
+	 */
+	String[] change_spec = { null, null };
+	if (tzstr == null && dst_ind != -1 && timecnt > 10)
+	  {
+	    long nowPlus5y = System.currentTimeMillis() / 1000
+			     + 5 * 365 * 86400;
+	    int first;
+
+	    for (first = timecnt - 1; first >= 0; first--)
+	      if (times[first] < nowPlus5y
+		  || (types[first] != std_ind && types[first] != dst_ind)
+		  || types[first] != types[timecnt - 2 + ((first ^ timecnt) & 1)])
+		break;
+	    first++;
+
+	    if (timecnt - first >= 10 && types[timecnt - 1] != types[timecnt - 2])
+	      {
+		GregorianCalendar cal
+		  = new GregorianCalendar(new SimpleTimeZone(0, "GMT"));
+
+		int[] values = new int[2 * 11];
+		int i;
+		for (i = timecnt - 1; i >= first; i--)
+		  {
+		    int base = (i % 2) * 11;
+		    int offset = offsets[types[i > first ? i - 1 : i + 1]];
+		    cal.setTimeInMillis((times[i] + offset) * 1000);
+		    if (i >= timecnt - 2)
+		      {
+			values[base + 0] = cal.get(Calendar.YEAR);
+			values[base + 1] = cal.get(Calendar.MONTH);
+			values[base + 2] = cal.get(Calendar.DAY_OF_MONTH);
+			values[base + 3]
+			  = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
+			values[base + 4] = cal.get(Calendar.DAY_OF_WEEK);
+			values[base + 5] = cal.get(Calendar.HOUR_OF_DAY);
+			values[base + 6] = cal.get(Calendar.MINUTE);
+			values[base + 7] = cal.get(Calendar.SECOND);
+			values[base + 8] = values[base + 2]; // Range start
+			values[base + 9] = values[base + 2]; // Range end
+			values[base + 10] = 0; // Determined type
+		      }
+		    else
+		      {
+			int year = cal.get(Calendar.YEAR);
+			int month = cal.get(Calendar.MONTH);
+			int day_of_month = cal.get(Calendar.DAY_OF_MONTH);
+			int month_days
+			  = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
+			int day_of_week = cal.get(Calendar.DAY_OF_WEEK);
+			int hour = cal.get(Calendar.HOUR_OF_DAY);
+			int minute = cal.get(Calendar.MINUTE);
+			int second = cal.get(Calendar.SECOND);
+			if (year != values[base + 0] - 1
+			    || month != values[base + 1]
+			    || hour != values[base + 5]
+			    || minute != values[base + 6]
+			    || second != values[base + 7])
+			  break;
+			if (day_of_week == values[base + 4])
+			  {
+			    // Either a Sun>=8 or lastSun rule.
+			    if (day_of_month < values[base + 8])
+			      values[base + 8] = day_of_month;
+			    if (day_of_month > values[base + 9])
+			      values[base + 9] = day_of_month;
+			    if (values[base + 10] < 0)
+			      break;
+			    if (values[base + 10] == 0)
+			      {
+				values[base + 10] = 1;
+				// If day of month > 28, this is
+				// certainly lastSun rule.
+				if (values[base + 2] > 28)
+				  values[base + 2] = 3;
+				// If day of month isn't in the last
+				// week, it can't be lastSun rule.
+				else if (values[base + 2]
+					 <= values[base + 3] - 7)
+				  values[base + 3] = 2;
+			      }
+			    if (values[base + 10] == 1)
+			      {
+				// If day of month is > 28, this is
+				// certainly lastSun rule.
+				if (day_of_month > 28)
+				  values[base + 10] = 3;
+				// If day of month isn't in the last
+				// week, it can't be lastSun rule.
+				else if (day_of_month <= month_days - 7)
+				  values[base + 10] = 2;
+			      }
+			    else if ((values[base + 10] == 2
+				      && day_of_month > 28)
+				     || (values[base + 10] == 3
+					 && day_of_month <= month_days - 7))
+			      break;
+			  }
+			else
+			  {
+			    // Must be fixed day in month rule.
+			    if (day_of_month != values[base + 2]
+				|| values[base + 10] > 0)
+			      break;
+			    values[base + 4] = day_of_week;
+			    values[base + 10] = -1;
+			  }
+			values[base + 0] -= 1;
+		      }
+		  }
+
+		if (i < first)
+		  {
+		    for (i = 0; i < 2; i++)
+		      {
+			int base = 11 * i;
+			if (values[base + 10] == 0)
+			  continue;
+			if (values[base + 10] == -1)
+			  {
+			    int[] dayCount
+			      = { 0, 31, 59, 90, 120, 151,
+				  181, 212, 243, 273, 304, 334 };
+			    int d = dayCount[values[base + 1]
+					     - Calendar.JANUARY];
+			    d += values[base + 2];
+			    change_spec[i] = ",J" + Integer.toString(d);
+			  }
+			else if (values[base + 10] == 2)
+			  {
+			    // If we haven't seen all days of the week,
+			    // we can't be sure what the rule really is.
+			    if (values[base + 8] + 6 != values[base + 9])
+			      continue;
+
+			    int d;
+			    d = values[base + 1] - Calendar.JANUARY + 1;
+			    // E.g. Sun >= 5 is not representable in POSIX
+			    // TZ env string, use ",Am.n.d" extension
+			    // where m is month 1 .. 12, n is the date on
+			    // or after which it happens and d is day
+			    // of the week, 0 .. 6.  So Sun >= 5 in April
+			    // is ",A4.5.0".
+			    if ((values[base + 8] % 7) == 1)
+			      {
+				change_spec[i] = ",M" + Integer.toString(d);
+				d = (values[base + 8] + 6) / 7;
+			      }
+			    else
+			      {
+				change_spec[i] = ",A" + Integer.toString(d);
+				d = values[base + 8];
+			      }
+			    change_spec[i] += "." + Integer.toString(d);
+			    d = values[base + 4] - Calendar.SUNDAY;
+			    change_spec[i] += "." + Integer.toString(d);
+			  }
+			else
+			  {
+			    // If we don't know whether this is lastSun or
+			    // Sun >= 22 rule.  That can be either because
+			    // there was insufficient number of
+			    // transitions, or February, where it is quite
+			    // probable we haven't seen any 29th dates.
+			    // For February, assume lastSun rule, otherwise
+			    // punt.
+			    if (values[base + 10] == 1
+				&& values[base + 1] != Calendar.FEBRUARY)
+			      continue;
+
+			    int d;
+			    d = values[base + 1] - Calendar.JANUARY + 1;
+			    change_spec[i] = ",M" + Integer.toString(d);
+			    d = values[base + 4] - Calendar.SUNDAY;
+			    change_spec[i] += ".5." + Integer.toString(d);
+			  }
+
+			// Don't add time specification if time is
+			// 02:00:00.
+			if (values[base + 5] != 2
+			    || values[base + 6] != 0
+			    || values[base + 7] != 0)
+			  {
+			    int d = values[base + 5];
+			    change_spec[i] += "/" + Integer.toString(d);
+			    if (values[base + 6] != 0 || values[base + 7] != 0)
+			      {
+				d = values[base + 6];
+				if (d < 10)
+				  change_spec[i]
+				    += ":0" + Integer.toString(d);
+				else
+				  change_spec[i] += ":" + Integer.toString(d);
+				d = values[base + 7];
+				if (d >= 10)
+				   change_spec[i]
+				     += ":" + Integer.toString(d);
+				else if (d > 0)
+				  change_spec[i]
+				    += ":0" + Integer.toString(d);
+			      }
+			  }
+		      }
+		    if (types[(timecnt - 1) & -2] == std_ind)
+		      {
+			String tmp = change_spec[0];
+			change_spec[0] = change_spec[1];
+			change_spec[1] = tmp;
+		      }
+		  }
+	      }
+	  }
+
+	if (tzstr == null)
+	  {
+	    tzstr = std_zonename + std_offset_string;
+	    if (change_spec[0] != null && change_spec[1] != null)
+	      tzstr += dst_zonename + dst_offset_string
+		       + change_spec[0] + change_spec[1];
+	  }
+
+	if (timecnt == 0)
+	  return new SimpleTimeZone(offsets[std_ind] * 1000,
+				    id != null ? id : tzstr);
+
+	SimpleTimeZone endRule = createLastRule(tzstr);
+	if (endRule == null)
+	  return null;
+
+	/* Finally adjust the times array into the form the constructor
+	 * expects.  times[0] is special, the offset and DST flag there
+	 * are for all times before that transition.  Use the first non-DST
+	 * type.  For all other transitions, the data file has the type
+	 * (<offset, isdst, zonename>) for the time interval starting
+	 */
+	for (int i = 0; i < typecnt; i++)
+	  if ((typeflags[i] & (1 << 8)) == 0)
+	    {
+	      times[0] = (times[0] << SECS_SHIFT) | (offsets[i] & OFFSET_MASK);
+	      break;
+	    }
+
+	for (int i = 1; i < timecnt; i++)
+	  times[i] = (times[i] << SECS_SHIFT)
+		     | (offsets[types[i - 1]] & OFFSET_MASK)
+		     | ((typeflags[types[i - 1]] & (1 << 8)) != 0 ? IS_DST : 0);
+
+	return new ZoneInfo(offsets[std_ind] * 1000, id != null ? id : tzstr,
+			    times, endRule);
+      }
+    catch (IOException ioe)
+      {
+	// Parse error, not a proper tzfile.
+	return null;
+      }
+    finally
+      {
+	try
+	  {
+	    if (dis != null)
+	      dis.close();
+	  }
+	catch(IOException ioe)
+	  {
+	    // Error while close, nothing we can do.
+	  }
+      }
+  }
+
+  /**
+   * Skips the requested number of bytes in the given InputStream.
+   * Throws EOFException if not enough bytes could be skipped.
+   * Negative numbers of bytes to skip are ignored.
+   */
+  private static void skipFully(InputStream is, long l) throws IOException
+  {
+    while (l > 0)
+      {
+	long k = is.skip(l);
+	if (k <= 0)
+	  throw new EOFException();
+	l -= k;
+      }
+  }
+
+  /**
+   * Create a SimpleTimeZone from a POSIX TZ environment string,
+   * see http://www.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap08.html
+   * for details.
+   * It supports also an extension, where Am.n.d rule (m 1 .. 12, n 1 .. 25, d
+   * 0 .. 6) describes day of week d on or after nth day of month m.
+   * Say A4.5.0 is Sun>=5 in April.
+   */
+  private static SimpleTimeZone createLastRule(String tzstr)
+  {
+    String stdName = null;
+    int stdOffs;
+    int dstOffs;
+    try
+      {
+	int idLength = tzstr.length();
+
+	int index = 0;
+	int prevIndex;
+	char c;
+
+	// get std
+	do
+	  c = tzstr.charAt(index);
+	while (c != '+' && c != '-' && c != ',' && c != ':'
+	       && ! Character.isDigit(c) && c != '\0' && ++index < idLength);
+
+	if (index >= idLength)
+	  return new SimpleTimeZone(0, tzstr);
+
+	stdName = tzstr.substring(0, index);
+	prevIndex = index;
+
+	// get the std offset
+	do
+	  c = tzstr.charAt(index++);
+	while ((c == '-' || c == '+' || c == ':' || Character.isDigit(c))
+	       && index < idLength);
+	if (index < idLength)
+	  index--;
+
+	{ // convert the dst string to a millis number
+	    String offset = tzstr.substring(prevIndex, index);
+	    prevIndex = index;
+
+	    if (offset.charAt(0) == '+' || offset.charAt(0) == '-')
+	      stdOffs = parseTime(offset.substring(1));
+	    else
+	      stdOffs = parseTime(offset);
+
+	    if (offset.charAt(0) == '-')
+	      stdOffs = -stdOffs;
+
+	    // TZ timezone offsets are positive when WEST of the meridian.
+	    stdOffs = -stdOffs;
+	}
+
+	// Done yet? (Format: std offset)
+	if (index >= idLength)
+	  return new SimpleTimeZone(stdOffs, stdName);
+
+	// get dst
+	do
+	  c = tzstr.charAt(index);
+	while (c != '+' && c != '-' && c != ',' && c != ':'
+	       && ! Character.isDigit(c) && c != '\0' && ++index < idLength);
+
+	// Done yet? (Format: std offset dst)
+	if (index >= idLength)
+	  return new SimpleTimeZone(stdOffs, stdName);
+
+	// get the dst offset
+	prevIndex = index;
+	do
+	  c = tzstr.charAt(index++);
+	while ((c == '-' || c == '+' || c == ':' || Character.isDigit(c))
+	       && index < idLength);
+	if (index < idLength)
+	  index--;
+
+	if (index == prevIndex && (c == ',' || c == ';'))
+	  {
+	    // Missing dst offset defaults to one hour ahead of standard
+	    // time.
+	    dstOffs = stdOffs + 60 * 60 * 1000;
+	  }
+	else
+	  { // convert the dst string to a millis number
+	    String offset = tzstr.substring(prevIndex, index);
+	    prevIndex = index;
+
+	    if (offset.charAt(0) == '+' || offset.charAt(0) == '-')
+	      dstOffs = parseTime(offset.substring(1));
+	    else
+	      dstOffs = parseTime(offset);
+
+	    if (offset.charAt(0) == '-')
+	      dstOffs = -dstOffs;
+
+	    // TZ timezone offsets are positive when WEST of the meridian.
+	    dstOffs = -dstOffs;
+	  }
+
+	// Done yet? (Format: std offset dst offset)
+	if (index >= idLength)
+	  return new SimpleTimeZone(stdOffs, stdName);
+
+	// get the DST rule
+	if (tzstr.charAt(index) == ','
+	    || tzstr.charAt(index) == ';')
+	  {
+	    index++;
+	    int offs = index;
+	    while (tzstr.charAt(index) != ','
+		   && tzstr.charAt(index) != ';')
+	      index++;
+	    String startTime = tzstr.substring(offs, index);
+	    index++;
+	    String endTime = tzstr.substring(index);
+
+	    index = startTime.indexOf('/');
+	    int startMillis;
+	    int endMillis;
+	    String startDate;
+	    String endDate;
+	    if (index != -1)
+	      {
+		startDate = startTime.substring(0, index);
+		startMillis = parseTime(startTime.substring(index + 1));
+	      }
+	    else
+	      {
+		startDate = startTime;
+		// if time isn't given, default to 2:00:00 AM.
+		startMillis = 2 * 60 * 60 * 1000;
+	      }
+	    index = endTime.indexOf('/');
+	    if (index != -1)
+	      {
+		endDate = endTime.substring(0, index);
+		endMillis = parseTime(endTime.substring(index + 1));
+	      }
+	    else
+	      {
+		endDate = endTime;
+		// if time isn't given, default to 2:00:00 AM.
+		endMillis = 2 * 60 * 60 * 1000;
+	      }
+
+	    int[] start = getDateParams(startDate);
+	    int[] end = getDateParams(endDate);
+	    return new SimpleTimeZone(stdOffs, tzstr, start[0], start[1],
+				      start[2], startMillis, end[0], end[1],
+				      end[2], endMillis, (dstOffs - stdOffs));
+	  }
+      }
+
+    catch (IndexOutOfBoundsException _)
+      {
+      }
+    catch (NumberFormatException _)
+      {
+      }
+
+    return null;
+  }
+
+  /**
+   * Parses and returns the params for a POSIX TZ date field,
+   * in the format int[]{ month, day, dayOfWeek }, following the
+   * SimpleTimeZone constructor rules.
+   */
+  private static int[] getDateParams(String date)
+  {
+    int[] dayCount = { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 };
+    int month;
+    int type = 0;
+
+    if (date.charAt(0) == 'M' || date.charAt(0) == 'm')
+      type = 1;
+    else if (date.charAt(0) == 'A' || date.charAt(0) == 'a')
+      type = 2;
+
+    if (type > 0)
+      {
+	int day;
+
+	// Month, week of month, day of week
+	// "Mm.w.d".  d is between 0 (Sunday) and 6.  Week w is
+	// between 1 and 5; Week 1 is the first week in which day d
+	// occurs and Week 5 specifies the last d day in the month.
+	// Month m is between 1 and 12.
+
+	// Month, day of month, day of week
+	// ZoneInfo extension, not in POSIX
+	// "Am.n.d".  d is between 0 (Sunday) and 6.  Day of month n is
+	// between 1 and 25.  Month m is between 1 and 12.
+
+	month = Integer.parseInt(date.substring(1, date.indexOf('.')));
+	int week = Integer.parseInt(date.substring(date.indexOf('.') + 1,
+						   date.lastIndexOf('.')));
+	int dayOfWeek = Integer.parseInt(date.substring(date.lastIndexOf('.')
+							+ 1));
+	dayOfWeek++; // Java day of week is one-based, Sunday is first day.
+
+	if (type == 2)
+	  {
+	    day = week;
+	    dayOfWeek = -dayOfWeek;
+	  }
+ 	else if (week == 5)
+ 	  day = -1; // last day of month is -1 in java, 5 in TZ
+ 	else
+	  {
+	    // First day of week starting on or after.  For example,
+	    // to specify the second Sunday of April, set month to
+	    // APRIL, day-of-month to 8, and day-of-week to -SUNDAY.
+	    day = (week - 1) * 7 + 1;
+	    dayOfWeek = -dayOfWeek;
+	  }
+
+	month--; // Java month is zero-based.
+	return new int[] { month, day, dayOfWeek };
+      }
+
+    // julian day, either zero-based 0<=n<=365 (incl feb 29)
+    // or one-based 1<=n<=365 (no feb 29)
+    int julianDay; // Julian day
+
+    if (date.charAt(0) != 'J' || date.charAt(0) != 'j')
+      {
+	julianDay = Integer.parseInt(date.substring(1));
+	julianDay++; // make 1-based
+	// Adjust day count to include feb 29.
+	dayCount = new int[]
+		   {
+		     0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335
+		   };
+      }
+    else
+      // 1-based julian day
+      julianDay = Integer.parseInt(date);
+
+    int i = 11;
+    while (i > 0)
+      if (dayCount[i] < julianDay)
+	break;
+      else
+	i--;
+    julianDay -= dayCount[i];
+    month = i;
+    return new int[] { month, julianDay, 0 };
+  }
+
+  /**
+   * Parses a time field hh[:mm[:ss]], returning the result
+   * in milliseconds. No leading sign.
+   */
+  private static int parseTime(String time)
+  {
+    int millis = 0;
+    int i = 0;
+
+    while (i < time.length())
+      if (time.charAt(i) == ':')
+	break;
+      else
+	i++;
+    millis = 60 * 60 * 1000 * Integer.parseInt(time.substring(0, i));
+    if (i >= time.length())
+      return millis;
+
+    int iprev = ++i;
+    while (i < time.length())
+      if (time.charAt(i) == ':')
+	break;
+      else
+	i++;
+    millis += 60 * 1000 * Integer.parseInt(time.substring(iprev, i));
+    if (i >= time.length())
+      return millis;
+
+    millis += 1000 * Integer.parseInt(time.substring(++i));
+    return millis;
+  }
+}
Index: libjava/classpath/gnu/java/util/jar/JarUtils.java
===================================================================
--- libjava/classpath/gnu/java/util/jar/JarUtils.java	(revision 122231)
+++ libjava/classpath/gnu/java/util/jar/JarUtils.java	(working copy)
@@ -1,5 +1,5 @@
 /* JarUtils.java -- Utility methods for reading/writing Manifest[-like] files
-   Copyright (C) 2006 Free Software Foundation, Inc.
+   Copyright (C) 2006, 2007 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -62,7 +62,10 @@
  */
 public abstract class JarUtils
 {
-  private static final Logger log = Logger.getLogger(JarUtils.class.getName());
+  // We used to log here, but this causes problems during bootstrap,
+  // and it didn't seem worthwhile to preserve this.  Still, this
+  // might be useful for debugging.
+  // private static final Logger log = Logger.getLogger(JarUtils.class.getName());
   public static final String META_INF = "META-INF/";
   public static final String DSA_SUFFIX = ".DSA";
   public static final String SF_SUFFIX = ".SF";
@@ -112,9 +115,10 @@
       {
         String version = expectHeader(version_header, br);
         attr.putValue(SIGNATURE_VERSION, version);
-        if (! DEFAULT_SF_VERSION.equals(version))
-          log.warning("Unexpected version number: " + version
-                      + ". Continue (but may fail later)");
+	// This may cause problems during VM bootstrap.
+        // if (! DEFAULT_SF_VERSION.equals(version))
+        //  log.warning("Unexpected version number: " + version
+        //              + ". Continue (but may fail later)");
       }
     catch (IOException ioe)
       {
Index: libjava/classpath/gnu/classpath/Configuration.java.in
===================================================================
--- libjava/classpath/gnu/classpath/Configuration.java.in	(revision 122231)
+++ libjava/classpath/gnu/classpath/Configuration.java.in	(working copy)
@@ -95,4 +95,10 @@
    */
   boolean JAVA_LANG_SYSTEM_EXPLICIT_INITIALIZATION = 
 	  @JAVA_LANG_SYSTEM_EXPLICIT_INITIALIZATION@;
+
+  /**
+   * The Eclipse Java Compiler jar file for use by the
+   * com.sun.tools.javac implementation in tools.zip.
+   */
+  String ECJ_JAR = "@ECJ_JAR@";
 }
Index: libjava/classpath/gnu/javax/net/ssl/provider/SSLSocketImpl.java
===================================================================
--- libjava/classpath/gnu/javax/net/ssl/provider/SSLSocketImpl.java	(revision 122231)
+++ libjava/classpath/gnu/javax/net/ssl/provider/SSLSocketImpl.java	(working copy)
@@ -200,7 +200,7 @@
   
   public SSLSocketImpl(SSLContextImpl contextImpl, String host, int port)
   {
-    this(contextImpl, host, port, null, false);
+    this(contextImpl, host, port, new Socket(), true);
   }
   
   public SSLSocketImpl(SSLContextImpl contextImpl, String host, int port,
@@ -412,17 +412,8 @@
     ByteBuffer emptyBuffer = ByteBuffer.allocate(0);
     SSLEngineResult result = null;
     
-    DataInputStream sockIn = null;
-    if (underlyingSocket != null)
-      sockIn = new DataInputStream(underlyingSocket.getInputStream());
-    else
-      sockIn = new DataInputStream(super.getInputStream());
-
-    OutputStream sockOut = null;
-    if (underlyingSocket != null)
-      sockOut = underlyingSocket.getOutputStream();
-    else
-      sockOut = super.getOutputStream();
+    DataInputStream sockIn = new DataInputStream(underlyingSocket.getInputStream());
+    OutputStream sockOut = underlyingSocket.getOutputStream();
     
     try
       {
@@ -550,69 +541,48 @@
 
   @Override public void bind(SocketAddress bindpoint) throws IOException
   {
-    if (underlyingSocket != null)
-      underlyingSocket.bind(bindpoint);
-    else
-      super.bind(bindpoint);
+    underlyingSocket.bind(bindpoint);
   }
   
   @Override public void connect(SocketAddress endpoint) throws IOException
   {
-    if (underlyingSocket != null)
-      underlyingSocket.connect(endpoint);
-    else
-      super.connect(endpoint);
+    underlyingSocket.connect(endpoint);
   }
 
   @Override public void connect(SocketAddress endpoint, int timeout)
     throws IOException
   {
-    if (underlyingSocket != null)
-      underlyingSocket.connect(endpoint, timeout);
-    else
-      super.connect(endpoint, timeout);
+    underlyingSocket.connect(endpoint, timeout);
   }
 
   @Override public InetAddress getInetAddress()
   {
-    if (underlyingSocket != null)
-      return underlyingSocket.getInetAddress();
-    return super.getInetAddress();
+    return underlyingSocket.getInetAddress();
   }
   
   @Override public InetAddress getLocalAddress()
   {
-    if (underlyingSocket != null)
-      return underlyingSocket.getLocalAddress();
-    return super.getLocalAddress();
+    return underlyingSocket.getLocalAddress();
   }
   
   @Override public int getPort()
   {
-    if (underlyingSocket != null)
-      return underlyingSocket.getPort();
-    return super.getPort();
+    return underlyingSocket.getPort();
   }
 
   @Override public int getLocalPort()
   {
-    if (underlyingSocket != null)
-      return underlyingSocket.getLocalPort();
-    return super.getLocalPort();
+    return underlyingSocket.getLocalPort();
   }
 
   @Override public SocketAddress getRemoteSocketAddress()
   {
-    if (underlyingSocket != null)
-      return underlyingSocket.getRemoteSocketAddress();
-    return super.getRemoteSocketAddress();
+    return underlyingSocket.getRemoteSocketAddress();
   }
 
   public SocketAddress getLocalSocketAddress()
   {
-    if (underlyingSocket != null)
-      return underlyingSocket.getLocalSocketAddress();
-    return super.getLocalSocketAddress();
+    return underlyingSocket.getLocalSocketAddress();
   }
 
   @Override public SocketChannel getChannel()
@@ -632,32 +602,22 @@
 
   @Override public void setTcpNoDelay(boolean on) throws SocketException
   {
-    if (underlyingSocket != null)
-      underlyingSocket.setTcpNoDelay(on);
-    else
-      super.setTcpNoDelay(on);
+    underlyingSocket.setTcpNoDelay(on);
   }
 
   @Override public boolean getTcpNoDelay() throws SocketException
   {
-    if (underlyingSocket != null)
-      return underlyingSocket.getTcpNoDelay();
-    return super.getTcpNoDelay();
+    return underlyingSocket.getTcpNoDelay();
   }
 
   @Override public void setSoLinger(boolean on, int linger) throws SocketException
   {
-    if (underlyingSocket != null)
-      underlyingSocket.setSoLinger(on, linger);
-    else
-      super.setSoLinger(on, linger);
+    underlyingSocket.setSoLinger(on, linger);
   }
 
   public int getSoLinger() throws SocketException
   {
-    if (underlyingSocket != null)
-      return underlyingSocket.getSoLinger();
-    return super.getSoLinger();
+    return underlyingSocket.getSoLinger();
   }
 
   @Override public void sendUrgentData(int x) throws IOException
@@ -667,167 +627,114 @@
 
   @Override public void setOOBInline(boolean on) throws SocketException
   {
-    if (underlyingSocket != null)
-      underlyingSocket.setOOBInline(on);
-    else
-      super.setOOBInline(on);
+    underlyingSocket.setOOBInline(on);
   }
 
   @Override public boolean getOOBInline() throws SocketException
   {
-    if (underlyingSocket != null)
-      return underlyingSocket.getOOBInline();
-    return super.getOOBInline();
+    return underlyingSocket.getOOBInline();
   }
 
   @Override public void setSoTimeout(int timeout) throws SocketException
   {
-    if (underlyingSocket != null)
-      underlyingSocket.setSoTimeout(timeout);
-    else
-      super.setSoTimeout(timeout);
+    underlyingSocket.setSoTimeout(timeout);
   }
 
   @Override public int getSoTimeout() throws SocketException
   {
-    if (underlyingSocket != null)
-      return underlyingSocket.getSoTimeout();
-    return super.getSoTimeout();
+    return underlyingSocket.getSoTimeout();
   }
 
   @Override public void setSendBufferSize(int size) throws SocketException
   {
-    if (underlyingSocket != null)
-      underlyingSocket.setSendBufferSize(size);
-    else
-      super.setSendBufferSize(size);
+    underlyingSocket.setSendBufferSize(size);
   }
 
   @Override public int getSendBufferSize() throws SocketException
   {
-    if (underlyingSocket != null)
-      return underlyingSocket.getSendBufferSize();
-    return super.getSendBufferSize();
+    return underlyingSocket.getSendBufferSize();
   }
 
   @Override public void setReceiveBufferSize(int size) throws SocketException
   {
-    if (underlyingSocket != null)
-      underlyingSocket.setReceiveBufferSize(size);
-    else
-      underlyingSocket.setReceiveBufferSize(size);
+    underlyingSocket.setReceiveBufferSize(size);
   }
 
   @Override public int getReceiveBufferSize() throws SocketException
   {
-    if (underlyingSocket != null)
-      return underlyingSocket.getReceiveBufferSize();
-    return super.getReceiveBufferSize();
+    return underlyingSocket.getReceiveBufferSize();
   }
 
   @Override public void setKeepAlive(boolean on) throws SocketException
   {
-    if (underlyingSocket != null)
-      underlyingSocket.setKeepAlive(on);
-    else
-      super.setKeepAlive(on);
+    underlyingSocket.setKeepAlive(on);
   }
 
   @Override public boolean getKeepAlive() throws SocketException
   {
-    if (underlyingSocket != null)
-      return underlyingSocket.getKeepAlive();
-    return super.getKeepAlive();
+    return underlyingSocket.getKeepAlive();
   }
 
   @Override public void setTrafficClass(int tc) throws SocketException
   {
-    if (underlyingSocket != null)
-      underlyingSocket.setTrafficClass(tc);
-    else
-      super.setTrafficClass(tc);
+    underlyingSocket.setTrafficClass(tc);
   }
 
   @Override public int getTrafficClass() throws SocketException
   {
-    if (underlyingSocket != null)
-      return underlyingSocket.getTrafficClass();
-    return super.getTrafficClass();
+    return underlyingSocket.getTrafficClass();
   }
 
   @Override public void setReuseAddress(boolean reuseAddress)
     throws SocketException
   {
-    if (underlyingSocket != null)
-      underlyingSocket.setReuseAddress(reuseAddress);
-    else
-      super.setReuseAddress(reuseAddress);
+    underlyingSocket.setReuseAddress(reuseAddress);
   }
 
   @Override public boolean getReuseAddress() throws SocketException
   {
-    if (underlyingSocket != null)
-      return underlyingSocket.getReuseAddress();
-    return super.getReuseAddress();
+    return underlyingSocket.getReuseAddress();
   }
 
   @Override public void close() throws IOException
   {
     // XXX closure alerts.
-    if (underlyingSocket != null && autoClose)
+    if (autoClose)
       underlyingSocket.close();
-    else
-      super.close();
   }
 
   @Override public void shutdownInput() throws IOException
   {
-    if (underlyingSocket != null)
-      underlyingSocket.shutdownInput();
-    else
-      super.shutdownInput();
+    underlyingSocket.shutdownInput();
   }
 
   @Override public void shutdownOutput() throws IOException
   {
-    if (underlyingSocket != null)
-      underlyingSocket.shutdownOutput();
-    else
-      super.shutdownOutput();
+    underlyingSocket.shutdownOutput();
   }
 
   @Override public boolean isConnected()
   {
-    if (underlyingSocket != null)
-      return underlyingSocket.isConnected();
-    return super.isConnected();
+    return underlyingSocket.isConnected();
   }
 
   @Override public boolean isBound()
   {
-    if (underlyingSocket != null)
-      return underlyingSocket.isBound();
-    return super.isBound();
+    return underlyingSocket.isBound();
   }
 
   @Override public boolean isClosed()
   {
-    if (underlyingSocket != null)
-      return underlyingSocket.isClosed();
-    return super.isClosed();
+    return underlyingSocket.isClosed();
   }
 
   @Override public boolean isInputShutdown()
   {
-    if (underlyingSocket != null)
-      return underlyingSocket.isInputShutdown();
-    return super.isInputShutdown();
+    return underlyingSocket.isInputShutdown();
   }
 
   @Override public boolean isOutputShutdown()
   {
-    if (underlyingSocket != null)
-      return underlyingSocket.isOutputShutdown();
-    return super.isOutputShutdown();
+    return underlyingSocket.isOutputShutdown();
   }
 }
Index: libjava/classpath/gnu/javax/net/ssl/provider/SSLSocketFactoryImpl.java
===================================================================
--- libjava/classpath/gnu/javax/net/ssl/provider/SSLSocketFactoryImpl.java	(revision 122231)
+++ libjava/classpath/gnu/javax/net/ssl/provider/SSLSocketFactoryImpl.java	(working copy)
@@ -1,5 +1,5 @@
 /* SSLSocketFactoryImpl.java -- 
-   Copyright (C) 2006  Free Software Foundation, Inc.
+   Copyright (C) 2006, 2007  Free Software Foundation, Inc.
 
 This file is a part of GNU Classpath.
 
@@ -93,10 +93,7 @@
   @Override public SSLSocketImpl createSocket(String host, int port)
     throws IOException, UnknownHostException
   {
-    SSLSocketImpl socket = new SSLSocketImpl(contextImpl, host, port);
-    InetSocketAddress endpoint = new InetSocketAddress(host, port);
-    socket.connect(endpoint);
-    return socket;
+    return createSocket(host, port, null, 0);
   }
 
   /* (non-Javadoc)
@@ -106,8 +103,10 @@
                                               InetAddress localHost, int localPort)
     throws IOException, UnknownHostException
   {
-    SSLSocketImpl socket = createSocket(host, port);
+    SSLSocketImpl socket = new SSLSocketImpl(contextImpl, host, port);
+    InetSocketAddress endpoint = new InetSocketAddress(host, port);
     socket.bind(new InetSocketAddress(localHost, localPort));
+    socket.connect(endpoint);
     return socket;
   }
 
@@ -117,10 +116,7 @@
   @Override public SSLSocketImpl createSocket(InetAddress host, int port)
     throws IOException
   {
-    SSLSocketImpl socket = new SSLSocketImpl(contextImpl,
-                                             host.getCanonicalHostName(), port);
-    socket.connect(new InetSocketAddress(host, port));
-    return socket;
+    return createSocket(host, port, null, 0);
   }
 
   /* (non-Javadoc)
@@ -130,8 +126,18 @@
                                               InetAddress localHost, int localPort)
     throws IOException
   {
-    SSLSocketImpl socket = createSocket(host, port);
+    SSLSocketImpl socket = new SSLSocketImpl(contextImpl,
+                                             host.getCanonicalHostName(), port);
     socket.bind(new InetSocketAddress(localHost, localPort));
+    socket.connect(new InetSocketAddress(host, port));
     return socket;
   }
+
+  /* (non-Javadoc)
+   * @see javax.net.SocketFactory#createSocket()
+   */
+  @Override public Socket createSocket() throws IOException
+  {
+    return new SSLSocketImpl(contextImpl, null, -1, new Socket(), true);
+  }
 }
Index: libjava/classpath/gnu/javax/net/ssl/provider/ClientHandshake.java
===================================================================
--- libjava/classpath/gnu/javax/net/ssl/provider/ClientHandshake.java	(revision 122231)
+++ libjava/classpath/gnu/javax/net/ssl/provider/ClientHandshake.java	(working copy)
@@ -1082,7 +1082,13 @@
       Cipher rsa = Cipher.getInstance("RSA");
       java.security.cert.Certificate cert
         = engine.session().getPeerCertificates()[0];
-      rsa.init(Cipher.ENCRYPT_MODE, cert);
+      if (cert instanceof X509Certificate)
+        {
+          boolean[] keyUsage = ((X509Certificate) cert).getKeyUsage();
+          if (keyUsage != null && !keyUsage[2])
+            throw new InvalidKeyException("certificate's keyUsage does not permit keyEncipherment");
+        }
+      rsa.init(Cipher.ENCRYPT_MODE, cert.getPublicKey());
       encryptedPreMasterSecret = rsa.doFinal(preMasterSecret);
       
       // Generate our session keys, because we can.
Index: libjava/classpath/tools/sun/rmi/rmic/Main.java
===================================================================
--- libjava/classpath/tools/sun/rmi/rmic/Main.java	(revision 0)
+++ libjava/classpath/tools/sun/rmi/rmic/Main.java	(revision 124261)
@@ -0,0 +1,60 @@
+/* Main.java -- implement sun.rmi.rmic.Main
+   Copyright (C) 2007 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package sun.rmi.rmic;
+
+import java.io.OutputStream;
+
+public class Main
+{
+  // Ant calls this. What to do with stream and string?
+  public Main(OutputStream stream, String string) {}
+
+  public boolean compile(String[] args)
+  {
+    try
+      {
+        gnu.classpath.tools.rmic.Main.main(args);
+      }
+    catch (Exception e)
+      {
+        System.err.println(Messages.getString("Main.InternalError"));
+        e.printStackTrace();
+      }
+    return true;
+  }
+}
Index: libjava/classpath/tools/sun/rmi/rmic/Messages.java
===================================================================
--- libjava/classpath/tools/sun/rmi/rmic/Messages.java	(revision 0)
+++ libjava/classpath/tools/sun/rmi/rmic/Messages.java	(revision 124261)
@@ -0,0 +1,67 @@
+/* Messages.java -- localization support for sun.rmi.rmic
+   Copyright (C) 2007 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package sun.rmi.rmic;
+
+import java.util.MissingResourceException;
+import java.util.ResourceBundle;
+
+public class Messages
+{
+  private static final String BUNDLE_NAME
+    = "sun.rmi.rmic.messages"; //$NON-NLS-1$
+
+  private static final ResourceBundle RESOURCE_BUNDLE
+    = ResourceBundle.getBundle(BUNDLE_NAME);
+
+  private Messages()
+  {
+  }
+
+  public static String getString(String key)
+  {
+    try
+      {
+        return RESOURCE_BUNDLE.getString(key);
+      }
+    catch (MissingResourceException e)
+      {
+        return '!' + key + '!';
+      }
+  }
+}
Index: libjava/classpath/tools/com/sun/tools/javac/Main.java
===================================================================
--- libjava/classpath/tools/com/sun/tools/javac/Main.java	(revision 0)
+++ libjava/classpath/tools/com/sun/tools/javac/Main.java	(revision 124261)
@@ -0,0 +1,155 @@
+/* Main.java -- implement com.sun.tools.javac.Main
+   Copyright (C) 2007 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.tools.javac;
+
+import gnu.classpath.Configuration;
+import java.io.File;
+import java.io.PrintWriter;
+import java.lang.reflect.Constructor;
+import java.lang.reflect.Method;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.net.URLClassLoader;
+import java.text.MessageFormat;
+
+public class Main
+{
+  static Constructor ecjConstructor = null;
+  static Method ecjMethod = null;
+
+  static
+  {
+    String classname = "org.eclipse.jdt.internal.compiler.batch.Main";
+    Class klass = null;
+    try
+      {
+        klass = Class.forName(classname);
+      }
+    catch (ClassNotFoundException e)
+      {
+        File jar = new File(Configuration.ECJ_JAR);
+        if (!jar.exists() || !jar.canRead())
+          {
+            String message
+              = MessageFormat.format(Messages.getString("Main.FailedToRead"),
+                                     new Object[] { Configuration.ECJ_JAR });
+            System.err.println(message);
+          }
+
+        ClassLoader loader = null;
+        try
+          {
+            loader = new URLClassLoader(new URL[] {jar.toURL()});
+          }
+        catch (MalformedURLException f)
+          {
+            String message
+              = MessageFormat.format(Messages.getString("Main.MalformedURL"),
+                                     new Object[] { Configuration.ECJ_JAR });
+            System.err.println(message);
+            f.printStackTrace();
+          }
+
+        try
+          {
+            klass = loader.loadClass(classname);
+          }
+        catch (ClassNotFoundException g)
+          {
+            String message
+              = MessageFormat.format(Messages.getString("Main.FailedToLoad"),
+                                     new Object[] { classname,
+                                                    Configuration.ECJ_JAR });
+            System.err.println(message);
+            g.printStackTrace();
+          }
+      }
+
+    try
+      {
+        ecjConstructor = klass.getConstructor(new Class[] {
+                                                PrintWriter.class,
+                                                PrintWriter.class,
+                                                Boolean.TYPE});
+      }
+    catch (NoSuchMethodException h)
+      {
+        System.err.println(Messages.getString("Main.FailedConstructor"));
+        h.printStackTrace();
+      }
+
+    try
+      {
+        ecjMethod = klass.getMethod("compile", new Class[] {String[].class});
+      }
+    catch (NoSuchMethodException i)
+      {
+        System.err.println(Messages.getString("Main.FailedCompile"));
+        i.printStackTrace();
+      }
+  }
+
+  public static int compile(String[] args, PrintWriter p) throws Exception
+  {
+    /*
+     * This code depends on the patch in Comment #10 in this bug
+     * report:
+     *
+     * https://bugs.eclipse.org/bugs/show_bug.cgi?id=88364
+     */
+    Object ecjInstance = ecjConstructor.newInstance(new Object[]
+        {
+          p,
+          new PrintWriter(System.err),
+          Boolean.FALSE
+        });
+    return ((Boolean) ecjMethod.invoke(ecjInstance, new Object[]
+        { args })).booleanValue() ? 0 : -1;
+  }
+
+  public static int compile(String[] args) throws Exception
+  {
+    return compile(args, new PrintWriter(System.out));
+  }
+
+  public static void main(String[] args) throws Exception
+  {
+    Runtime.getRuntime().exit(Main.compile(args));
+  }
+}
Index: libjava/classpath/tools/com/sun/tools/javac/Messages.java
===================================================================
--- libjava/classpath/tools/com/sun/tools/javac/Messages.java	(revision 0)
+++ libjava/classpath/tools/com/sun/tools/javac/Messages.java	(revision 124261)
@@ -0,0 +1,67 @@
+/* Messages.java -- localization support for com.sun.tools.javac
+   Copyright (C) 2007 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.tools.javac;
+
+import java.util.MissingResourceException;
+import java.util.ResourceBundle;
+
+public class Messages
+{
+  private static final String BUNDLE_NAME
+    = "com.sun.tools.javac.messages"; //$NON-NLS-1$
+
+  private static final ResourceBundle RESOURCE_BUNDLE
+    = ResourceBundle.getBundle(BUNDLE_NAME);
+
+  private Messages()
+  {
+  }
+
+  public static String getString(String key)
+  {
+    try
+      {
+        return RESOURCE_BUNDLE.getString(key);
+      }
+    catch (MissingResourceException e)
+      {
+        return '!' + key + '!';
+      }
+  }
+}
Index: libjava/classpath/tools/com/sun/tools/doclets/Taglet.java
===================================================================
--- libjava/classpath/tools/com/sun/tools/doclets/Taglet.java	(revision 0)
+++ libjava/classpath/tools/com/sun/tools/doclets/Taglet.java	(revision 124261)
@@ -0,0 +1,63 @@
+/* com.sun.tools.doclets.Taglet
+   Copyright (C) 2001 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package com.sun.tools.doclets;
+
+import com.sun.javadoc.Tag;
+
+public interface Taglet {
+
+   public String getName();
+
+   public boolean inConstructor();
+
+   public boolean inField();
+
+   public boolean inMethod();
+
+   public boolean inOverview();
+
+   public boolean inPackage();
+
+   public boolean inType();
+
+   public boolean isInlineTag();
+
+   public String toString(Tag tag);
+
+   public String toString(Tag[] tagArray);
+}
Index: libjava/classpath/tools/com/sun/javadoc/ExecutableMemberDoc.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/ExecutableMemberDoc.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/ExecutableMemberDoc.java	(revision 124261)
@@ -0,0 +1,138 @@
+/* ExecutableMemberDoc.java -- Document methods and constructors
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.javadoc;
+
+/**
+  * This is the super-interface for interfaces describing constructors and
+  * methods.
+  */
+public interface ExecutableMemberDoc extends MemberDoc
+{
+
+/**
+  * This method returns a list of all the execeptions that are declared
+  * to be thrown in this method or constructor.
+  *
+  * @return The list of exceptions for this method.
+  */
+public abstract ClassDoc[]
+thrownExceptions();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not this method/constructor is native.
+  *
+  * @return <code>true</code> if the method is native, <code>false</code>
+  * otherwise.
+  */
+public abstract boolean
+isNative();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not this method/constructor is
+  * synchronized.
+  *
+  * @return <code>true</code> if the method is synchronized,
+  * <code>false</code> otherwise.
+  */
+public abstract boolean
+isSynchronized();
+
+/*************************************************************************/
+
+/**
+  * This method returns the list of parameters for this method/constructor.
+  *
+  * @return The list of parameters for this method.
+  */
+public abstract Parameter[]
+parameters();
+
+/*************************************************************************/
+
+/**
+  * This method returns the list of "@throws" and "@exception" tags in this
+  * method/constructor.
+  *
+  * @return The list of exception doc tags.
+  */
+public abstract ThrowsTag[]
+throwsTags();
+
+/*************************************************************************/
+
+/**
+  * This method return the list of "@param" tags in this method/constructor.
+  *
+  * @return The list of parameter doc tags for this method.
+  */
+public abstract ParamTag[]
+paramTags();
+
+/*************************************************************************/
+
+/**
+  * This method returns the signature of this method in pseudo-code format,
+  * with fully qualified class references.  For example, the method
+  * <code>read(String str, boolean bool)</code> would have the signature
+  * <code>(java.lang.String, boolean)</code> returned by this method.
+  *
+  * @return The signature for this method.
+  */
+public abstract String
+signature();
+
+/*************************************************************************/
+
+/**
+  * This method returns the signature of this method in pseudo-code format,
+  * with uqualified class references.  For example, the method
+  * <code>read(String str, boolean bool)</code> would have the signature
+  * <code>(String, boolean)</code> returned by this method.
+  *
+  * @return The signature for this method.
+  */
+public abstract String
+flatSignature();
+
+} // interface ExecutableMemberDoc
+
Index: libjava/classpath/tools/com/sun/javadoc/DocErrorReporter.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/DocErrorReporter.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/DocErrorReporter.java	(revision 124261)
@@ -0,0 +1,77 @@
+/* DocErrorReporter.java -- Log errors/warnings during doc generation.
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.javadoc;
+
+/**
+  * This interface provides a mechanism for a doclet to log messages
+  * during its run.
+  */
+public interface DocErrorReporter
+{
+
+/**
+  * This method prints the specified error message.
+  *
+  * @param err The error message to print.
+  */
+public abstract void
+printError(String err);
+
+/*************************************************************************/
+
+/**
+  * This method prints the specified warning message.
+  *
+  * @param warn The warning message to print.
+  */
+public abstract void
+printWarning(String warn);
+
+/*************************************************************************/
+
+/**
+  * This method prints the specifed message.
+  *
+  * @param msg The message to print.
+  */
+public abstract void
+printNotice(String notice);
+
+} // interface DocErrorReporter
+
Index: libjava/classpath/tools/com/sun/javadoc/Doc.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/Doc.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/Doc.java	(revision 124261)
@@ -0,0 +1,265 @@
+/* Doc.java -- Model of an item to document.
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.javadoc;
+
+/**
+  * This interface is the super-interface of all items that can have
+  * Javadoc comments associated with them.
+  */
+public interface Doc extends java.io.Serializable, Comparable
+{
+
+/**
+  * This method returns the text of the comment for this item, with all
+  * tags stripped.
+  *
+  * @return The comment text for this item.
+  */
+public abstract String
+commentText();
+
+/*************************************************************************/
+
+/**
+  * This method returns an array of all the tags in this item.
+  *
+  * @return An array of tags for this item.
+  */
+public abstract Tag[]
+tags();
+
+/*************************************************************************/
+
+/**
+  * This method returns an array of all the tags of the specified type
+  * in this item.
+  *
+  * @param tagtype The name of the tag type to return.
+  *
+  * @return A list of all tags of the specified type.
+  */
+public abstract Tag[]
+tags(String tagtype);
+
+/*************************************************************************/
+
+/**
+  * This method returns an array of all tags of the "@see" type.
+  *
+  * @return An array of tags of the "@see" type
+  */
+public abstract SeeTag[]
+seeTags();
+
+/*************************************************************************/
+
+/**
+  * This method returns the comment text as an array of tags.  This will
+  * include any inline tags, but no regular tags.  Regular text is returned
+  * as a type of <code>Text</code>.  Inline "@see" tags are returned as
+  * type <code>SeeTag</code>.
+  *
+  * @return The comment text as tags.
+  */
+public abstract Tag[]
+inlineTags();
+
+/*************************************************************************/
+
+/**
+  * This method returns the first sentence of the comment text as an array
+  * of tags.  This will include any inline tags, but no regular tags.
+  * Regular text is returned as a type of <code>Text</code>. Inline "@see"
+  * tags are returned as type <code>SeeTag</code>.
+  *
+  * @return An array of tags representing the first sentence of the comment
+  * text.
+  */
+public abstract Tag[]
+firstSentenceTags();
+
+/*************************************************************************/
+
+/**
+  * This method returns the text of the comment in an unprocessed format.
+  * Any Javadoc tags will remain as written in the text.
+  *
+  * @return The unprocessed comment text.
+  */
+public abstract String
+getRawCommentText();
+
+/*************************************************************************/
+
+/**
+  * This method sets the unprocessed comment text for this item.
+  *
+  * @param rawtext The unprocessed comment text for this itme.
+  */
+public abstract void
+setRawCommentText(String rawtext);
+
+/*************************************************************************/
+
+/**
+  * This method returns the name of this item.
+  *
+  * @return The name of this item.
+  */
+public abstract String
+name();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not this item is a field.
+  *
+  * @return <code>true</code> if this item is a field, <code>false</code>
+  * otherwise.
+  */
+public abstract boolean
+isField();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not this item is a method.
+  *
+  * @return <code>true</code> if this item is a method, <code>false</code>
+  * otherwise.
+  */
+public abstract boolean
+isMethod();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not this item is a constructor.
+  *
+  * @return <code>true</code> if this item is a constructor,
+  * <code>false</code> otherwise.
+  */
+public abstract boolean
+isConstructor();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not this item is an interface.
+  *
+  * @return <code>true</code> if this item is an interface,
+  * <code>false</code> otherwise.
+  */
+public abstract boolean
+isInterface();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not this item is an exception.
+  *
+  * @return <code>true</code> if this item is an exception,
+  * <code>false</code> otherwise.
+  */
+public abstract boolean
+isException();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not this item is an error.
+  *
+  * @return <code>true</code> if this item is an error,
+  * <code>false</code> otherwise.
+  */
+public abstract boolean
+isError();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not this item is a class.  Interfaces
+  * do not count as classes.
+  *
+  * @return <code>true</code> if this item is a class,
+  * <code>false</code> otherwise.
+  */
+public abstract boolean
+isClass();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not this item is an ordinary class.  An
+  * ordinary class is a class that is not an exception or an error.
+  * Interfaces also do not count because they are not considered classes at
+  * all.
+  *
+  * @return <code>true</code> if this item is an ordinary class,
+  * <code>false</code> otherwise.
+  */
+public abstract boolean
+isOrdinaryClass();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not this item is part of the active set,
+  * whatever that is.
+  *
+  * @return <code>true</code> if this item is part of the active set,
+  * <code>false</code> otherwise.
+  */
+public abstract boolean
+isIncluded();
+
+/*************************************************************************/
+
+/**
+  * This method returns the location of the item within the Java
+  * source code.
+  *
+  * @return an object describing the file, line and column where this
+  * item is defined.
+  */
+public abstract SourcePosition
+position();
+
+} // interface Doc
+
Index: libjava/classpath/tools/com/sun/javadoc/MethodDoc.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/MethodDoc.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/MethodDoc.java	(revision 124261)
@@ -0,0 +1,80 @@
+/* MethodDoc.java -- Document a method
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.javadoc;
+
+/**
+  * This interface is used for documenting ordinary (ie, non-constructor)
+  * methods.
+  */
+public interface MethodDoc extends ExecutableMemberDoc
+{
+
+/**
+  * This method tests whether or not the method to be documented is abstract.
+  *
+  * @return <code>true</code> if the method is abstract, <code>false</code>
+  * otherwise.
+  */
+public abstract boolean
+isAbstract();
+
+/*************************************************************************/
+
+/**
+  * This method returns the return type of the method to be documented.
+  *
+  * @return The return type of the method to be documented.
+  */
+public abstract Type
+returnType();
+
+/*************************************************************************/
+
+/**
+  * This method returns the class containing the method that this method is
+  * overriding.
+  *
+  * @return The class containing the method that this method is overriding,
+  * or <code>null</code> if this class is not overriding a method.
+  */
+public abstract ClassDoc
+overriddenClass();
+
+} // interface MethodDoc
+
Index: libjava/classpath/tools/com/sun/javadoc/ProgramElementDoc.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/ProgramElementDoc.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/ProgramElementDoc.java	(revision 124261)
@@ -0,0 +1,170 @@
+/* ProgramElementDoc.java -- Common ops for all program elements.
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.javadoc;
+
+/**
+  * This is the comment super-interface of all items that are "program
+  * elements".  This includes classes, interfaces, fields, constructors,
+  * and methods.
+  */
+public interface ProgramElementDoc extends Doc
+{
+
+/**
+  * This method returns the class which contains this element.  If this
+  * is a class that is not an inner class, <code>null</code> will be
+  * returned.
+  *
+  * @returned The class element that contains this item, or <code>null</code>
+  * if this item is a class that is not an inner class.
+  */
+public abstract ClassDoc
+containingClass();
+
+/*************************************************************************/
+
+/**
+  * This method returns the package which contains this element.  If this
+  * element is in the default generic package, then the name of the
+  * package element returned will be "".
+  *
+  * @return The package element that contains this item.
+  */
+public abstract PackageDoc
+containingPackage();
+
+/*************************************************************************/
+
+/**
+  * This method returns the fully qualified name of this element.
+  *
+  * @return The fully qualified name of this element.
+  */
+public abstract String
+qualifiedName();
+
+/*************************************************************************/
+
+/**
+  * This method returns the modifier specificier number, which is what?
+  *
+  * @return The modifier for this element.
+  */
+public abstract int
+modifierSpecifier();
+
+/*************************************************************************/
+
+/**
+  * This method returns a string with the element modifiers.  For example,
+  * the modifiers of a method declaration might be "protected abstract".
+  *
+  * @return The modifier string.
+  */
+public abstract String
+modifiers();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not this element is public.
+  *
+  * @return <code>true</code> if this element is public, <code>false</code>
+  * otherwise.
+  */
+public abstract boolean
+isPublic();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not this element is protected.
+  *
+  * @return <code>true</code> if this element is protected, <code>false</code>
+  * otherwise.
+  */
+public abstract boolean
+isProtected();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not this element is private.
+  *
+  * @return <code>true</code> if this element is private, <code>false</code>
+  * otherwise.
+  */
+public abstract boolean
+isPrivate();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not this element is package private.
+  *
+  * @return <code>true</code> if this element is package private,
+  * <code>false</code> otherwise.
+  */
+public abstract boolean
+isPackagePrivate();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not this element is static.
+  *
+  * @return <code>true</code> if this element is static, <code>false</code>
+  * otherwise.
+  */
+public abstract boolean
+isStatic();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not this element is final.
+  *
+  * @return <code>true</code> if this element is final, <code>false</code>
+  * otherwise.
+  */
+public abstract boolean
+isFinal();
+
+} // interface ProgramElementDoc
+
Index: libjava/classpath/tools/com/sun/javadoc/SeeTag.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/SeeTag.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/SeeTag.java	(revision 124261)
@@ -0,0 +1,109 @@
+/* SeeTag.java -- Information about "@see" tags.
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.javadoc;
+
+/**
+  * This interface models an "@see" tag.
+  */
+public interface SeeTag extends Tag
+{
+
+/**
+  * This method returns the label for this tag.  What is this????
+  *
+  * @return The label for this tag.
+  */
+public abstract String
+label();
+
+/*************************************************************************/
+
+/**
+  * This method returns the package of the referenced item.
+  *
+  * @return The package of the referenced item, or <code>null</code> if no
+  * package is found.
+  */
+public abstract PackageDoc
+referencedPackage();
+
+/*************************************************************************/
+
+/**
+  * This method returns the name of the class referenced in the tag.
+  *
+  * @return The name of the class referenced in the tag.
+  */
+public abstract String
+referencedClassName();
+
+/*************************************************************************/
+
+/**
+  * This method returns a <code>ClassDoc</code> instance for the class
+  * referenced in the tag.
+  *
+  * @return A <code>ClassDoc</code> for the class referenced in the tag.
+  */
+public abstract ClassDoc
+referencedClass();
+
+/*************************************************************************/
+
+/**
+  * This method returns the name of the member referenced in the tag.
+  *
+  * @return The name of the member referenced in the tag.
+  */
+public abstract String
+referencedMemberName();
+
+/*************************************************************************/
+
+/**
+  * This method returns a <code>MemberDoc</code> instance for the member
+  * referenced in the tag.
+  *
+  * @return A <code>MemberDoc</code> for the member referenced in the tag.
+  */
+public abstract MemberDoc
+referencedMember();
+
+} // interface SeeTag
+
Index: libjava/classpath/tools/com/sun/javadoc/FieldDoc.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/FieldDoc.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/FieldDoc.java	(revision 124261)
@@ -0,0 +1,113 @@
+/* FieldDoc.java -- Document a field
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.javadoc;
+
+/**
+  * This package is used for documenting fields.
+  */
+public interface FieldDoc extends MemberDoc
+{
+
+/**
+  * This method returns the type of this field.
+  *
+  * @return The type of this field.
+  */
+public abstract Type
+type();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not the field is transient.
+  *
+  * @return <code>true</code> if the field is transient, <code>false</code>
+  * otherwise.
+  */
+public abstract boolean
+isTransient();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not the field is volatile.
+  *
+  * @return <code>true</code> if the field is volatile, <code>false</code>
+  * otherwise.
+  */
+public abstract boolean
+isVolatile();
+
+/*************************************************************************/
+
+/**
+  * This method returns a list of all "@serialField" tags defined in this
+  * field.
+  *
+  * @return The list of "@serialField" tags for this field.
+  */
+public abstract SerialFieldTag[]
+serialFieldTags();
+
+/*************************************************************************/
+
+/**
+  * This method returns the value of this static field.
+  *
+  * @return The value of this static field.
+  */
+public abstract Object
+constantValue();
+
+
+/*************************************************************************/
+
+/**
+  * This method returns the value of this static field converted to a
+  * human-readable string.
+  *
+  * @return The value of this static field as a human-readable string.
+  */
+public abstract String
+constantValueExpression();
+
+
+
+} // interface FieldDoc
+
Index: libjava/classpath/tools/com/sun/javadoc/RootDoc.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/RootDoc.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/RootDoc.java	(revision 124261)
@@ -0,0 +1,112 @@
+/* RootDoc.java -- Information about a javadoc run.
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package com.sun.javadoc;
+
+/**
+ * This interface is the root of the javadoc application. All the properties and
+ * arguments are attached to the class that will implements this interface. You
+ * can retrieve all the options of the tool with this interface.
+ */
+public interface RootDoc extends Doc, DocErrorReporter
+{
+
+  /**
+   * This method returns the command line element used to invoke this instance
+   * of javadoc.
+   * 
+   * @return The command line arguments for this run.
+   */
+  public abstract String[][] options();
+
+  /** ********************************************************************** */
+
+  /**
+   * This method returns the list of packages that were specified on the command
+   * line.
+   * 
+   * @return The packages specified on the command line.
+   */
+  public abstract PackageDoc[] specifiedPackages();
+
+  /** ********************************************************************** */
+
+  /**
+   * This method returns the list of classes that were specified on the command
+   * line.
+   * 
+   * @return The classes specified on the command line.
+   */
+  public abstract ClassDoc[] specifiedClasses();
+
+  /** ********************************************************************** */
+
+  /**
+   * This method returns the list of classes and interfaces to be documented.
+   * 
+   * @return The list of classes and interfaces to be documented.
+   */
+  public abstract ClassDoc[] classes();
+
+  /** ********************************************************************** */
+
+  /**
+   * This method returns a <code>ClassDoc</code> instance for the name class
+   * or interface.
+   * 
+   * @param name
+   *          The class or interface to look up.
+   * @return The requested <code>ClassDoc</code>, or null if the specified
+   *         class is not part of this javadoc run.
+   */
+  public abstract ClassDoc classNamed(String name);
+
+  /** ********************************************************************** */
+
+  /**
+   * This method returns a <code>PackageDoc</code> instance for the named
+   * package.
+   * 
+   * @param name
+   *          The package to look up.
+   * @return The requested <code>PackageDoc</code>, or null if the specified
+   *         package is not part of this javadoc run.
+   */
+  public abstract PackageDoc packageNamed(String name);
+
+} // interface RootDoc
+
Index: libjava/classpath/tools/com/sun/javadoc/Doclet.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/Doclet.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/Doclet.java	(revision 124261)
@@ -0,0 +1,99 @@
+/* Doclet.java -- Doclet API
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.javadoc;
+
+/**
+  * This class documents the method that must be implemented by a doclet.
+  * It may be used as the superclass of a doclet, but this is not required.
+  * As long as the doclet implements the <code>start</code> method, all is ok.
+  */
+public abstract class Doclet
+{
+
+/**
+  * This is the entry point to a doclet.  All doclets must implement this
+  * method.
+  *
+  * @param rd The <code>RootDoc</code> instance for this javadoc run.
+  *
+  * @return <code>true</code> on success, <code>false</code> on failure.
+  */
+public static boolean
+start(RootDoc root)
+{
+  return(false);
+}
+
+/*************************************************************************/
+
+/**
+  * This method returns the number of arguments to the option, including
+  * the option itself.  This is not required of doclets.
+  *
+  * @param opt The option to check.
+  *
+  * @return The number of arguments to the option, or zero if the option is
+  * unknown, or a negative number if an error occurred.
+  */
+public static int
+optionLength(String opt)
+{
+  return(0);
+}
+
+/*************************************************************************/
+
+/**
+  * This method is called to verify that the options supplied by the caller
+  * are valid.  This is not required of doclets.
+  *
+  * @param opts The list of options supplied by the user.
+  * @param logger A mechanism for this method to report errors to the user.
+  *
+  * @return <code>true</code> if the options are valid, <code>false</code>
+  * otherwise.
+  */
+public static boolean
+validOptions(String[][] opts, DocErrorReporter logger)
+{
+  return(true);
+}
+
+} // class Doclet
+
Index: libjava/classpath/tools/com/sun/javadoc/Tag.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/Tag.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/Tag.java	(revision 124261)
@@ -0,0 +1,107 @@
+/* Tag.java -- Common operations on Javadoc tags.
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.javadoc;
+
+/**
+  * This is the super-interface for all Javadoc tags.
+  */
+public interface Tag extends java.io.Serializable
+{
+/**
+  * This method returns the name of the tag.
+  *
+  * @return The name of the tag.
+  */
+public abstract String
+name();
+
+/*************************************************************************/
+
+/**
+  * This method returns the kind of tag.  ????
+  *
+  * @return The kind of the tag.
+  */
+public abstract String
+kind();
+
+/*************************************************************************/
+
+/**
+  * This method returns the text for this tag.
+  *
+  * @return The text for this tag.
+  */
+public abstract String
+text();
+
+/*************************************************************************/
+
+/**
+  * This method returns the tag as a <code>String</code>.  What kind of
+  * string?
+  *
+  * @return This tag as a <code>String</code>.
+  */
+public abstract String
+toString();
+
+/*************************************************************************/
+
+/**
+  * This method returns the inline tags for this comment.
+  *
+  * @return The inline tags for this comment.
+  */
+public abstract Tag[]
+inlineTags();
+
+/*************************************************************************/
+
+/**
+  * This method returns the first sentence of the doc comment as an array
+  * of <code>Tag</code>'s.
+  *
+  * @return The first sentence of the comment as tags.
+  */
+public abstract Tag[]
+firstSentenceTags();
+
+} // interface Tag
+
Index: libjava/classpath/tools/com/sun/javadoc/ConstructorDoc.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/ConstructorDoc.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/ConstructorDoc.java	(revision 124261)
@@ -0,0 +1,57 @@
+/* ConstructorDoc.java -- Document a Java class constructor
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.javadoc;
+
+/**
+  * This interface is used for documenting constructors.
+  */
+public interface ConstructorDoc extends ExecutableMemberDoc
+{
+
+/**
+  * This method returns the qualified name of the constructor. What is this
+  * really?
+  *
+  * @return The qualified name of the constructor.
+  */
+public abstract String
+qualifiedName();
+
+} // interface ConstructorDoc
+
Index: libjava/classpath/tools/com/sun/javadoc/SerialFieldTag.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/SerialFieldTag.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/SerialFieldTag.java	(revision 124261)
@@ -0,0 +1,102 @@
+/* SerialFieldTag.java -- Information about the "@serialField" tag.
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.javadoc;
+
+/**
+  * This interface models the "@serialField" tag.
+  */
+public interface SerialFieldTag extends Tag, Comparable
+{
+
+/**
+  * This method returns the name of the field.
+  *
+  * @return The name of the field.
+  */
+public abstract String
+fieldName();
+
+/*************************************************************************/
+
+/**
+  * This method returns the type name of the field.
+  *
+  * @return The type name of the field.
+  */
+public abstract String
+fieldType();
+
+/*************************************************************************/
+
+/**
+  * This method returns a <code>ClassDoc</code> instance for the type of
+  * the field.  What about primitive types???
+  *
+  * @return A <code>ClassDoc</code> for the field type.
+  */
+public abstract ClassDoc
+fieldTypeDoc();
+
+/*************************************************************************/
+
+/**
+  * This method returns the description of the field.
+  *
+  * @return The description of the field.
+  */
+public abstract String
+description();
+
+/*************************************************************************/
+
+/**
+  * This method compares this object with the specified object in order to
+  * determine proper ordering.
+  *
+  * @param obj The object to compare against.
+  *
+  * @return A negative number if this object is less than the specified
+  * object, zero if the objects are equal, or a positive number if this object
+  * is greater than the specified object.
+  */
+public abstract int
+compareTo(Object obj);
+
+} // interface SerialFieldTag
+
Index: libjava/classpath/tools/com/sun/javadoc/Parameter.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/Parameter.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/Parameter.java	(revision 124261)
@@ -0,0 +1,88 @@
+/* Parameter.java -- Information about parameters to methods.
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.javadoc;
+
+/**
+  * This interface models a parameter to a method.
+  */
+public interface Parameter extends java.io.Serializable
+{
+
+/**
+  * This method returns the type of the parameter.
+  *
+  * @return The parameter type.
+  */
+public abstract Type
+type();
+
+/*************************************************************************/
+
+/**
+  * This method returns the name of the parameter.
+  *
+  * @return The parameter name.
+  */
+public abstract String
+name();
+
+/*************************************************************************/
+
+/**
+  * This method returns the name of the type of the parameter as a
+  * <code>String</code>.
+  *
+  * @return The name of the type of this parameter.
+  */
+public abstract String
+typeName();
+
+/*************************************************************************/
+
+/**
+  * This method returns this parameter as a <code>String</code> that
+  * contains both the type name and parameter name.
+  *
+  * @return This parameter as a <code>String</code>.
+  */
+public abstract String
+toString();
+
+} // interaface Parameter
+
Index: libjava/classpath/tools/com/sun/javadoc/Type.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/Type.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/Type.java	(revision 124261)
@@ -0,0 +1,120 @@
+/* Type.java -- Documentation information about Java types.
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.javadoc;
+
+/**
+  * This class is used for holding information about Java types needed for
+  * documentation.
+  */
+public interface Type extends java.io.Serializable
+{
+
+/**
+  * This method returns the unqualified name of the type, excluding any array
+  * dimension information or brackets.
+  *
+  * @return The unqualified type name, sans array information or brackets.
+  */
+public abstract String
+typeName();
+
+/*************************************************************************/
+
+/**
+  * This method returns the fully qualified name of the type, excluding any
+  * array dimension information or brackets.
+  *
+  * @return The fully qualified type name, sans array information or brackets.
+  */
+public abstract String
+qualifiedTypeName();
+
+/*************************************************************************/
+
+/**
+  * This method returns the array dimensions as brackets.
+  *
+  * @param The array dimensions.
+  */
+public abstract String
+dimension();
+
+/*************************************************************************/
+
+/**
+  * This method returns the unqualfied name of the type, and includes array
+  * dimension information.
+  *
+  * @return The unqualified name of the type, including array dimension info.
+  */
+public abstract String
+toString();
+
+/*************************************************************************/
+
+/**
+  * This method returns this type as a <code>ClassDoc</object>.  This is not
+  * a valid operation for primitive types.
+  *
+  * @return A <code>ClassDoc</code> for this type, or <code>null</code> if
+  * this is a primitive type.
+  */
+public abstract ClassDoc
+asClassDoc();
+
+/**
+  * This method returns whether this type represents one of the
+  * built-in Java primitive types.
+  */
+public abstract boolean
+isPrimitive();
+
+/**
+ * Returns this type as a <code>TypeVariable</code>, if it is an
+ * instance of the <code>TypeVariable</code> class.  Otherwise,
+ * it returns null.
+ *
+ * @return this cast to a <code>TypeVariable</code> instance, or null
+ *         if this is not a type variable.
+ */
+TypeVariable
+asTypeVariable();
+
+} // interface Type
+
Index: libjava/classpath/tools/com/sun/javadoc/PackageDoc.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/PackageDoc.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/PackageDoc.java	(revision 124261)
@@ -0,0 +1,109 @@
+/* PackageDoc.java -- Document a package
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.javadoc;
+
+public interface PackageDoc extends Doc
+{
+
+/**
+  * This method returns a list of all the classes and interfaces in
+  * this package.  This list will included exceptions and errors.
+  *
+  * @return The list of classes and interfaces for this package.
+  */
+public abstract ClassDoc[]
+allClasses();
+
+/*************************************************************************/
+
+/**
+  * This method returns the list of ordinary classes in this package.  This
+  * list will not include any interface, exceptions or errors.
+  *
+  * @return The list of ordinary classes in this package.
+  */
+public abstract ClassDoc[]
+ordinaryClasses();
+
+/*************************************************************************/
+
+/**
+  * This method returns the list of exceptions in this package.
+  *
+  * @return The list of exceptions in this package.
+  */
+public abstract ClassDoc[]
+exceptions();
+
+/*************************************************************************/
+
+/**
+  * This method returns the list of errors in this package.
+  *
+  * @return The list of errors in this package.
+  */
+public abstract ClassDoc[]
+errors();
+
+/*************************************************************************/
+
+/**
+  * This method returns the list of interfaces in this package.
+  *
+  * @return The list of interfaces in this package.
+  */
+public abstract ClassDoc[]
+interfaces();
+
+/*************************************************************************/
+
+/**
+  * This method returns a <code>ClassDoc</code> instance for the specified
+  * class.
+  *
+  * @param name The name of the class to return.
+  *
+  * @return The requested <code>ClassDoc</code> or <code>null</code> if
+  * this class not part of this javadoc run.
+  */
+public abstract ClassDoc
+findClass(String cls);
+
+} // interface PackageDoc
+
Index: libjava/classpath/tools/com/sun/javadoc/ThrowsTag.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/ThrowsTag.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/ThrowsTag.java	(revision 124261)
@@ -0,0 +1,76 @@
+/* ThrowsTag.java -- Information about "@throws" and "@exception" tags.
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.javadoc;
+
+/**
+  * This interface models an "@exception" or "@throws" tag.
+  */
+public interface ThrowsTag extends Tag
+{
+
+/**
+  * This method returns the name of the exception.
+  *
+  * @return The name of the exception.
+  */
+public abstract String
+exceptionName();
+
+/*************************************************************************/
+
+/**
+  * This method returns the comment text of the exception.
+  *
+  * @return The comment text of the exception.
+  */
+public abstract String
+exceptionComment();
+
+/*************************************************************************/
+
+/**
+  * This method returns the exception class as a <code>ClassDoc</code>.
+  *
+  * @return The exception class as a <code>ClassDoc</code>.
+  */
+public abstract ClassDoc
+exception();
+
+} // interface ThrowsTag
+
Index: libjava/classpath/tools/com/sun/javadoc/SourcePosition.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/SourcePosition.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/SourcePosition.java	(revision 124261)
@@ -0,0 +1,68 @@
+/* SourcePosition.java -- Model of a location in a source file.
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.javadoc;
+
+import java.io.File;
+
+/**
+ *  Represents a location in a source file. This is used by {@link
+ *  Doc} to specify at which location an item is defined.
+ */
+public interface SourcePosition
+{
+   /**
+    *  Return a File object pointing to the source file.
+    */
+   public File file();
+
+   /**
+    *  Return the 1-based line number within the source file.
+    */
+   public int line();
+
+   /**
+    *  Return the 1-based column number within the source file.
+    */
+   public int column();
+
+   /**
+    *  Return a string in the format "file.toString():line"
+    */
+   public String toString();
+}
Index: libjava/classpath/tools/com/sun/javadoc/TypeVariable.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/TypeVariable.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/TypeVariable.java	(revision 124261)
@@ -0,0 +1,73 @@
+/* TypeVariable.java -- Document a Java type variable.
+   Copyright (C) 2005 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.javadoc;
+
+/**
+ * This class represents a type variable, which is used to parameterize
+ * the types used in a method or class.  For example,
+ * <code>List&lt;E&gt;</code> has the type variable, <code>E</code>.  Type
+ * variables may have explicit bounds, such as <code>&lt;T extends
+ * Book&gt;</code>, which specifies that the type is a sub-class of
+ * <code>Book</code>.
+ *
+ * @since 1.5
+ * @author Andrew John Hughes (gnu_andrew@member.fsf.org)
+ */ 
+public interface TypeVariable 
+  extends Type
+{
+
+  /**
+   * Returns the bounds of this type variable.  These are the types
+   * represented in the <code>extends</code> clause.
+   *
+   * @return an array of types which specify the bounds of this variable.
+   *         The array is empty if there are no explicit bounds.
+   */
+  Type[] bounds();
+
+  /**
+   * Returns the class, interface, method or constructor in which this
+   * type variable was declared.
+   *
+   * @return the owning program element for this type variable.
+   */
+  ProgramElementDoc owner();
+
+}
Index: libjava/classpath/tools/com/sun/javadoc/ClassDoc.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/ClassDoc.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/ClassDoc.java	(revision 124261)
@@ -0,0 +1,322 @@
+/* ClassDoc.java -- Document a Java class or interface
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.javadoc;
+
+public interface ClassDoc extends ProgramElementDoc, Type
+{
+
+/**
+  * This method tests whether or not the class represented by this object
+  * is abstract.
+  *
+  * @return <code>true</code> if the class is abstract, <code>false</code>,
+  * otherwise.
+  */
+public abstract boolean
+isAbstract();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not the class represented by this object
+  * is serializable.  That is, whether or not the class implements the
+  * <code>java.io.Serializable</code> interface.  This includes classes
+  * which are externalizable.
+  *
+  * @return <code>true</code> if the class is serializable,
+  * <code>false</code> otherwise.
+  */
+public abstract boolean
+isSerializable();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not the class represented by this object
+  * is externalizable.  That is, whether or not the class implements the
+  * <code>java.io.Externalizable</code> interface.
+  *
+  * @return <code>true</code> if the class is externalizable,
+  * <code>false</code> otherwise.
+  */
+public abstract boolean
+isExternalizable();
+
+/*************************************************************************/
+
+/**
+  * This method returns the serialization methods for the class
+  * represented by this object.  Is the custom readObject/writeObject
+  * methods?
+  *
+  * @return The serialization methods for this class.
+  */
+public abstract MethodDoc[]
+serializationMethods();
+
+/*************************************************************************/
+
+/**
+  * This method returns the list of fields that are serialized in this
+  * class.  This will return either the list of fields with an
+  * "@serial" declaration, or, if it exists, the
+  * <code>serialPersistentField</code> field.
+  *
+  * @return The list of serializable fields.
+  */
+public abstract FieldDoc[]
+serializableFields();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not the class represented by this object
+  * specifically defines its serializable fields in a
+  * <code>serialPersistentFields</code> field.
+  *
+  * @return <code>true</code> if this class explicitly defines its
+  * serializable fields, <code>false</code> otherwise.
+  */
+public abstract boolean
+definesSerializableFields();
+
+/*************************************************************************/
+
+/**
+  * This method returns the superclass of the class represented by this
+  * object.
+  *
+  * @return The superclass of this class.
+  */
+public abstract ClassDoc
+superclass();
+
+/*************************************************************************/
+
+/**
+  * This method tests whether or not the class represented by this object is
+  * a subclass of the specified class.
+  *
+  * @param cls The <code>ClassDoc</code> object of the class to test against.
+  *
+  * @return <code>true</code> if this class is a subclass of the specified
+  * class, <code>false</code> otherwise.
+  */
+public abstract boolean
+subclassOf(ClassDoc cls);
+
+/*************************************************************************/
+
+/**
+  * This method returns this list of interfaces implemented (or in the case
+  * of interfaces, extended) by this class.  This list will only include
+  * interfaces directly implemented by this class, not those inherited by
+  * interfaced implemented in this class.
+  *
+  * @return The list of interfaces this class implements.
+  */
+public abstract ClassDoc[]
+interfaces();
+
+/*************************************************************************/
+
+/**
+  * This method returns the list of fields that are visible to the user in
+  * this class, or the list of all fields in this class.
+  *
+  * @param filtered if true, only return visible (included) fields;
+  * otherwise, return all fields.
+  *
+  * @return The list of visible fields in this class, or the list of
+  * all fields in this class.
+  */
+public abstract FieldDoc[]
+fields(boolean filtered);
+
+/*************************************************************************/
+
+/**
+  * This method returns the list of fields that are visible to the user in
+  * this class.  Does this depend on the -private -protected, etc flags
+  * passed to javadoc?
+  *
+  * @return The list of visible fields in this class.
+  */
+public abstract FieldDoc[]
+fields();
+
+/*************************************************************************/
+
+/**
+  * This method returns either the list of methods that are visible to
+  * the user in the class represented by this object, or a list of all
+  * methods, excluding constructor methods.
+  *
+  * @param filtered if true, only return visible (included) methods;
+  * otherwise, return all methods.
+  *
+  * @return The list of all methods in this class, or the list of
+  * visible methods in this class.
+  */
+public abstract MethodDoc[]
+methods(boolean filtered);
+
+/*************************************************************************/
+
+/**
+  * This method returns the list of methods that are visible to the user in
+  * the class represented by this object, excluding constructor methods.
+  *
+  * @return The list of visible methods in this class.
+  */
+public abstract MethodDoc[]
+methods();
+
+/*************************************************************************/
+
+/**
+  * This method returns either the list of constructors that are
+  * visible to the user in the class represented by this object, or
+  * the list of all constructors.
+  *
+  * @param filtered if true, only return visible (included)
+  * constructors; otherwise, return all constructors.
+  *
+  * @return The list of all constructors in this class, or the list
+  * of visible constructors in this class.
+  */
+public abstract ConstructorDoc[]
+constructors(boolean filtered);
+
+/*************************************************************************/
+
+/**
+  * This method returns the list of constructors that are visible to the user
+  * in the class represented by this object.
+  *
+  * @return The list visible constructors in this class.
+  */
+public abstract ConstructorDoc[]
+constructors();
+
+/*************************************************************************/
+
+/**
+  * This method returns the list of inner classes that are visible to
+  * the user within the class represented by this object.
+  *
+  * @return The list of visible inner classes for this object.
+  */
+public abstract ClassDoc[]
+innerClasses();
+
+/*************************************************************************/
+
+/**
+  * This method returns the list of all inner classes within the class
+  * represented by this object, or the list of visible inner classes
+  * in this class.
+  *
+  * @param filtered if true, only return visible (included) inner
+  * classes; otherwise, return all inner classes.
+  *
+  * @return The list of all inner classes for this object, or the list
+  * of visible inner classes.
+  */
+public abstract ClassDoc[]
+innerClasses(boolean filtered);
+
+/*************************************************************************/
+
+/**
+  * This method returns a <code>ClassDoc</code> for the named class.  The
+  * following search order is used:
+  * <p>
+  * <ol>
+  * <li>Fully qualified class name.
+  * <li>Inner classes within this class.
+  * <li>In the current package.
+  * <li>In the imports for this class.
+  * </ol>
+  *
+  * @param name The name of the class to find.
+  *
+  * @return The requested class, or <code>null</code> if the requested
+  * class cannot be found.
+  */
+public abstract ClassDoc
+findClass(String name);
+
+/*************************************************************************/
+
+/**
+  * This method returns the list of classes that are imported.  This
+  * excludes any imports of complete packages.
+  *
+  * @return The list of imported classes.
+  */
+public abstract ClassDoc[]
+importedClasses();
+
+/*************************************************************************/
+
+/**
+  * This method returns the list of packages that are imported. This
+  * excludes any individual class imports.
+  *
+  * @return The list of imported packages.
+  */
+public abstract PackageDoc[]
+importedPackages();
+
+/*************************************************************************/
+
+/**
+  * This method returns the formal type parameters of this class.
+  * The returned array is empty if the class does not represent a
+  * parameterized type.
+  *
+  * @return The list of type parameters.
+  * @since 1.5
+  */
+TypeVariable[]
+typeParameters();
+
+} // interface ClassDoc
+
Index: libjava/classpath/tools/com/sun/javadoc/ParamTag.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/ParamTag.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/ParamTag.java	(revision 124261)
@@ -0,0 +1,66 @@
+/* ParamTag.java -- Documentation tag for method parameters
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.javadoc;
+
+/**
+  * This interface represents an "@param" tag.
+  */
+public interface ParamTag extends Tag
+{
+
+/**
+  * This method returns the comment text for the parameter.
+  *
+  * @return The comment text for the parameter.
+  */
+public abstract String
+parameterComment();
+
+/*************************************************************************/
+
+/**
+  * This method returns the name of the parameter.
+  *
+  * @return The name of the parameter.
+  */
+public abstract String
+parameterName();
+
+} // interface ParamTag
+
Index: libjava/classpath/tools/com/sun/javadoc/MemberDoc.java
===================================================================
--- libjava/classpath/tools/com/sun/javadoc/MemberDoc.java	(revision 0)
+++ libjava/classpath/tools/com/sun/javadoc/MemberDoc.java	(revision 124261)
@@ -0,0 +1,60 @@
+/* MemberDoc.java -- Common ops for documenting fields, methods,
+   and constructors
+   Copyright (C) 1999 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+
+package com.sun.javadoc;
+
+/**
+  * This is the common super-interface for documentation about fields,
+  * methods, and constructors.
+  */
+public interface MemberDoc extends ProgramElementDoc
+{
+
+/**
+  * This method tests whether the member in question was created implicitly
+  * by the compiler.
+  *
+  * @return <code>true</code> if this member was synthesized by the compiler,
+  * </code>false</code> otherwise.
+  */
+public abstract boolean
+isSynthetic();
+
+} // interface MemberDoc
+
Index: libjava/classpath/tools/Makefile.in
===================================================================
--- libjava/classpath/tools/Makefile.in	(revision 122231)
+++ libjava/classpath/tools/Makefile.in	(working copy)
@@ -219,6 +219,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
@@ -470,6 +471,10 @@
 
 # All our example java source files
 TOOLS_JAVA_FILES = $(srcdir)/gnu/classpath/tools/*/*.java \
+	$(srcdir)/com/sun/javadoc/*.java \
+	$(srcdir)/com/sun/tools/doclets/*.java \
+	$(srcdir)/com/sun/tools/javac/*.java \
+	$(srcdir)/sun/rmi/rmic/*.java \
 	$(srcdir)/external/asm/org/objectweb/asm/*.java \
 	$(srcdir)/external/asm/org/objectweb/asm/attrs/*.java \
 	$(srcdir)/external/asm/org/objectweb/asm/commons/*.java \
@@ -1077,12 +1082,19 @@
 $(TOOLS_ZIP): $(TOOLS_JAVA_FILES)
 	abs_srcdir=`cd $(srcdir) && pwd` ; \
 	find $$abs_srcdir/external/asm -name '*.java' -print > asm.lst; \
-	find $$abs_srcdir/gnu/classpath/tools -name '*.java' -print > classes.lst
+	find $(srcdir)/gnu/classpath/tools \
+	     $(srcdir)/com/sun/javadoc \
+	     $(srcdir)/com/sun/tools/doclets \
+	     $(srcdir)/com/sun/tools/javac \
+	     $(srcdir)/sun/rmi/rmic \
+	     -name '*.java' -print > classes.lst
 	cat classes.lst asm.lst > all-classes.lst
 @JAVA_MAINTAINER_MODE_TRUE@	AC=`echo $(JCOMPILER) | sed -e 's/UTF-8/ISO-8859-1/g'`; \
 @JAVA_MAINTAINER_MODE_TRUE@	  $$AC -g -w -d $(srcdir)/asm @asm.lst
 @JAVA_MAINTAINER_MODE_TRUE@	$(JCOMPILER) -g -w -d $(srcdir)/classes @classes.lst
-@JAVA_MAINTAINER_MODE_TRUE@	@list=`cd $(top_srcdir)/resource && find gnu/classpath/tools -name \*.properties -print`; \
+@JAVA_MAINTAINER_MODE_TRUE@	@list=`cd $(top_srcdir)/resource && find gnu/classpath/tools \
+@JAVA_MAINTAINER_MODE_TRUE@	       com/sun/javadoc com/sun/tools/doclets com/sun/tools/javac \
+@JAVA_MAINTAINER_MODE_TRUE@	       sun/rmi/rmic -name \*.properties -print`; \
 @JAVA_MAINTAINER_MODE_TRUE@	for p in $$list; do \
 @JAVA_MAINTAINER_MODE_TRUE@	  dirname=classes/`dirname $$p`; \
 @JAVA_MAINTAINER_MODE_TRUE@	  if ! test -d "$$dirname"; then mkdir -p "$$dirname"; fi; \
Index: libjava/classpath/tools/gnu/classpath/tools/javah/GcjhMain.java
===================================================================
--- libjava/classpath/tools/gnu/classpath/tools/javah/GcjhMain.java	(revision 0)
+++ libjava/classpath/tools/gnu/classpath/tools/javah/GcjhMain.java	(revision 124261)
@@ -0,0 +1,152 @@
+/* GcjhMain.java - gcjh main program
+ Copyright (C) 2007 Free Software Foundation, Inc.
+
+ This file is part of GNU Classpath.
+
+ GNU Classpath is free software; you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation; either version 2, or (at your option)
+ any later version.
+
+ GNU Classpath is distributed in the hope that it will be useful, but
+ WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with GNU Classpath; see the file COPYING.  If not, write to the
+ Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ 02110-1301 USA.
+
+ Linking this library statically or dynamically with other modules is
+ making a combined work based on this library.  Thus, the terms and
+ conditions of the GNU General Public License cover the whole
+ combination.
+
+ As a special exception, the copyright holders of this library give you
+ permission to link this library with independent modules to produce an
+ executable, regardless of the license terms of these independent
+ modules, and to copy and distribute the resulting executable under
+ terms of your choice, provided that you also meet, for each linked
+ independent module, the terms and conditions of the license of that
+ module.  An independent module is a module which is not derived from
+ or based on this library.  If you modify this library, you may extend
+ this exception to your version of the library, but you are not
+ obligated to do so.  If you do not wish to do so, delete this
+ exception statement from your version. */
+
+
+package gnu.classpath.tools.javah;
+
+import gnu.classpath.tools.getopt.Option;
+import gnu.classpath.tools.getopt.OptionException;
+import gnu.classpath.tools.getopt.OptionGroup;
+import gnu.classpath.tools.getopt.Parser;
+
+import java.io.IOException;
+import java.util.ArrayList;
+
+public class GcjhMain extends Main
+{
+  ArrayList commands = new ArrayList();
+
+  public GcjhMain()
+  {
+    cni = true;
+  }
+
+  protected String getName()
+  {
+    return "gcjh";
+  }
+
+  protected Parser getParser()
+  {
+    Parser result = super.getParser();
+
+    result.setHeader("usage: gcjh [OPTION]... CLASS...");
+
+    OptionGroup text = new OptionGroup("CNI text options");
+    text.add(new Option("add", "Insert TEXT into class body", "TEXT")
+      {
+	public void parsed(String arg) throws OptionException
+	{
+	  commands.add(new Text(Text.ADD, arg));
+	}
+      });
+    text.add(new Option("append", "Append TEXT after class declaration",
+			"TEXT")
+      {
+	public void parsed(String arg) throws OptionException
+	{
+	  commands.add(new Text(Text.APPEND, arg));
+	}
+      });
+    text.add(new Option("friend", "Insert TEXT as a 'friend' declaration",
+			"TEXT")
+      {
+	public void parsed(String arg) throws OptionException
+	{
+	  commands.add(new Text(Text.FRIEND, arg));
+	}
+      });
+    text.add(new Option("prepend", "Insert TEXT before start of class", "TEXT")
+      {
+	public void parsed(String arg) throws OptionException
+	{
+	  commands.add(new Text(Text.PREPEND, arg));
+	}
+      });
+    result.add(text);
+
+    OptionGroup compat = new OptionGroup("Compatibility options (unused)");
+    // gcjh itself had compatibility options -old and -trace.  I
+    // didn't add them here since they should really be unused by now.
+    compat.add(new Option("td", "Unused compatibility option", "DIRECTORY")
+      {
+	public void parsed(String arg) throws OptionException
+	{
+	}
+      });
+    // I don't believe anyone ever used these options.
+    compat.add(new Option("M", "Unused compatibility option")
+      {
+	public void parsed(String arg) throws OptionException
+	{
+	}
+      });
+    compat.add(new Option("MM", "Unused compatibility option")
+      {
+	public void parsed(String arg) throws OptionException
+	{
+	}
+      });
+    compat.add(new Option("MD", "Unused compatibility option")
+      {
+	public void parsed(String arg) throws OptionException
+	{
+	}
+      });
+    compat.add(new Option("MMD", "Unused compatibility option")
+      {
+	public void parsed(String arg) throws OptionException
+	{
+	}
+      });
+
+    result.add(compat);
+
+    return result;
+  }
+
+  protected void postParse(String[] names)
+  {
+    for (int i = 0; i < names.length; ++i)
+      textMap.put(names[i].replace('.', '/'), commands);
+  }
+
+  public static void main(String[] args) throws IOException
+  {
+    new GcjhMain().run(args);
+  }
+}
Index: libjava/classpath/tools/gnu/classpath/tools/javah/ClassWrapper.java
===================================================================
--- libjava/classpath/tools/gnu/classpath/tools/javah/ClassWrapper.java	(revision 122231)
+++ libjava/classpath/tools/gnu/classpath/tools/javah/ClassWrapper.java	(working copy)
@@ -1,5 +1,5 @@
 /* ClassWrapper.java - wrap ASM class objects
- Copyright (C) 2006 Free Software Foundation, Inc.
+ Copyright (C) 2006, 2007 Free Software Foundation, Inc.
 
  This file is part of GNU Classpath.
 
@@ -43,6 +43,7 @@
 import java.io.PrintStream;
 import java.lang.reflect.Modifier;
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
 
@@ -68,6 +69,11 @@
   // A set of all the method names in this class.
   HashSet methodNames = new HashSet();
 
+  // This maps a method name + descriptor, e.g. "method()V", to the
+  // name chosen for the method.  This is used when computing the
+  // names of bridge method targets.
+  HashMap methodNameMap = new HashMap();
+
   public ClassWrapper(Main classpath)
   {
     this.classpath = classpath;
@@ -187,18 +193,24 @@
         superClass.makeVtable();
         vtable = new ArrayList(superClass.vtable);
         bridgeTargets = new HashSet(superClass.bridgeTargets);
+	methodNameMap = new HashMap(superClass.methodNameMap);
       }
     else
       {
         // Object.
         vtable = new ArrayList();
         bridgeTargets = new HashSet();
+	methodNameMap = new HashMap();
       }
     addLocalMethods();
     addInterfaces(this);
 
-    // Make a set of all the targets of bridge methods.
-    // We rename bridge methods to avoid problems with C++.
+    // Make a set of all the targets of bridge methods.  We rename
+    // bridge target methods to avoid problems with C++.  You might
+    // think we could rename the bridge methods themselves, but bridge
+    // methods by definition override a method from the superclass --
+    // and we have to consider the superclass' header as an
+    // unchangeable entity.
     Iterator i = methods.iterator();
     while (i.hasNext())
       {
@@ -232,8 +244,25 @@
     while (i.hasNext())
       {
         MethodNode m = (MethodNode) i.next();
-        boolean isTarget = bridgeTargets.contains(m.name + m.desc);
-        MethodHelper.print(out, m, this, isTarget);
+	String nameToUse;
+	String sum = m.name + m.desc;
+	if (bridgeTargets.contains(sum))
+	  {
+	    if (methodNameMap.containsKey(sum))
+	      nameToUse = (String) methodNameMap.get(sum);
+	    else
+	      {
+		// Bridge target that is new in this class.
+		String cname = this.name;
+		int index = cname.lastIndexOf('/');
+		cname = cname.substring(index + 1);
+		nameToUse = cname + "$" + m.name;
+	      }
+	  }
+	else
+	  nameToUse = Keywords.getCxxName(m.name);
+	methodNameMap.put(sum, nameToUse);
+        MethodHelper.print(out, m, this, nameToUse);
       }
   }
 
Index: libjava/classpath/tools/gnu/classpath/tools/javah/CniStubPrinter.java
===================================================================
--- libjava/classpath/tools/gnu/classpath/tools/javah/CniStubPrinter.java	(revision 122231)
+++ libjava/classpath/tools/gnu/classpath/tools/javah/CniStubPrinter.java	(working copy)
@@ -1,5 +1,5 @@
 /* CniStubPrinter.java - Generate a CNI stub file
- Copyright (C) 2006 Free Software Foundation, Inc.
+ Copyright (C) 2006, 2007 Free Software Foundation, Inc.
 
  This file is part of GNU Classpath.
 
@@ -90,12 +90,12 @@
     return new CniPrintStream(fos);
   }
 
-  public void printClass(ClassWrapper klass) throws IOException
+  public void printClass(File filename, ClassWrapper klass) throws IOException
   {
     if (! klass.hasNativeMethod())
       return;
     String className = klass.name.replaceAll("/", "::");
-    CniPrintStream out = (CniPrintStream) getPrintStream(klass.name + ".cc",
+    CniPrintStream out = (CniPrintStream) getPrintStream(filename + ".cc",
                                                          klass);
     if (out == null)
       return;
Index: libjava/classpath/tools/gnu/classpath/tools/javah/MethodHelper.java
===================================================================
--- libjava/classpath/tools/gnu/classpath/tools/javah/MethodHelper.java	(revision 122231)
+++ libjava/classpath/tools/gnu/classpath/tools/javah/MethodHelper.java	(working copy)
@@ -1,5 +1,5 @@
 /* MethodHelper.java - helper class for manipulating methods
- Copyright (C) 2006 Free Software Foundation, Inc.
+ Copyright (C) 2006, 2007 Free Software Foundation, Inc.
 
  This file is part of GNU Classpath.
 
@@ -76,7 +76,7 @@
   }
 
   public static void print(CniPrintStream out, MethodNode meth,
-                           ClassWrapper declarer, boolean isBridgeTarget)
+                           ClassWrapper declarer, String realMethodName)
   {
     if ("<clinit>".equals(meth.name))
       return;
@@ -97,15 +97,7 @@
       {
         out.print(Type.getReturnType(meth.desc));
         out.print(" ");
-        if (isBridgeTarget)
-          {
-            out.print("target$");
-            out.print(meth.name);
-          }
-        else
-          {
-            out.print(Keywords.getCxxName(meth.name));
-          }
+	out.print(realMethodName);
       }
     else
       {
Index: libjava/classpath/tools/gnu/classpath/tools/javah/CniIncludePrinter.java
===================================================================
--- libjava/classpath/tools/gnu/classpath/tools/javah/CniIncludePrinter.java	(revision 122231)
+++ libjava/classpath/tools/gnu/classpath/tools/javah/CniIncludePrinter.java	(working copy)
@@ -1,5 +1,5 @@
 /* CniIncludePrinter.java - generate CNI header files
- Copyright (C) 2006 Free Software Foundation, Inc.
+ Copyright (C) 2006, 2007 Free Software Foundation, Inc.
 
  This file is part of GNU Classpath.
 
@@ -63,14 +63,14 @@
     return new PrintStream(fos);
   }
 
-  public void printClass(ClassWrapper klass) throws IOException
+  public void printClass(File filename, ClassWrapper klass) throws IOException
   {
     // Never write Object or Class. This is a hack, maybe
     // the user would like to see what they look like...
     if (klass.name.equals("java/lang/Object")
         || klass.name.equals("java/lang/Class"))
       return;
-    PrintStream ps = getPrintStream(klass.name + ".h", klass);
+    PrintStream ps = getPrintStream(filename + ".h", klass);
     if (ps == null)
       return;
     ps.println();
Index: libjava/classpath/tools/gnu/classpath/tools/javah/JniStubPrinter.java
===================================================================
--- libjava/classpath/tools/gnu/classpath/tools/javah/JniStubPrinter.java	(revision 122231)
+++ libjava/classpath/tools/gnu/classpath/tools/javah/JniStubPrinter.java	(working copy)
@@ -1,5 +1,5 @@
 /* JniStubPrinter.java - Generate JNI stub files
- Copyright (C) 2006 Free Software Foundation, Inc.
+ Copyright (C) 2006, 2007 Free Software Foundation, Inc.
 
  This file is part of GNU Classpath.
 
@@ -71,8 +71,9 @@
     return new JniPrintStream(classpath, fos, klass);
   }
 
-  public void printClass(ClassWrapper klass) throws IOException
+  public void printClass(File filename, ClassWrapper klass) throws IOException
   {
+    // Note that we ignore the filename here.
     if (! klass.hasNativeMethod())
       return;
     String xname = JniHelper.mangle(klass.name);
Index: libjava/classpath/tools/gnu/classpath/tools/javah/Printer.java
===================================================================
--- libjava/classpath/tools/gnu/classpath/tools/javah/Printer.java	(revision 122231)
+++ libjava/classpath/tools/gnu/classpath/tools/javah/Printer.java	(working copy)
@@ -1,5 +1,5 @@
 /* Print.java - abstract base class for printing classes
- Copyright (C) 2006 Free Software Foundation, Inc.
+ Copyright (C) 2006, 2007 Free Software Foundation, Inc.
 
  This file is part of GNU Classpath.
 
@@ -95,7 +95,8 @@
     this.force = force;
   }
 
-  public abstract void printClass(ClassWrapper klass) throws IOException;
+  public abstract void printClass(File filename, ClassWrapper klass)
+    throws IOException;
 
   protected abstract void writePreambleImpl(PrintStream ps);
 
Index: libjava/classpath/tools/gnu/classpath/tools/javah/Main.java
===================================================================
--- libjava/classpath/tools/gnu/classpath/tools/javah/Main.java	(revision 122231)
+++ libjava/classpath/tools/gnu/classpath/tools/javah/Main.java	(working copy)
@@ -1,5 +1,5 @@
 /* Main.java - javah main program
- Copyright (C) 2006 Free Software Foundation, Inc.
+ Copyright (C) 2006, 2007 Free Software Foundation, Inc.
 
  This file is part of GNU Classpath.
 
@@ -58,6 +58,7 @@
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
+import java.util.Map;
 
 import org.objectweb.asm.ClassReader;
 
@@ -88,6 +89,9 @@
   // True if we're emitting CNI code.
   boolean cni;
 
+  // True if we've seen -cni or -jni.
+  boolean cniOrJniSeen;
+
   // True if output files should always be written.
   boolean force;
 
@@ -179,9 +183,14 @@
       results.addAll(Arrays.asList(files));
   }
 
-  private Parser getParser()
+  protected String getName()
   {
-    ClasspathToolParser result = new ClasspathToolParser("javah", true);
+    return "javah";
+  }
+
+  protected Parser getParser()
+  {
+    ClasspathToolParser result = new ClasspathToolParser(getName(), true);
     result.setHeader("usage: javah [OPTIONS] CLASS...");
     result.add(classpath);
     result.add(new Option('d', "Set output directory", "DIR")
@@ -237,8 +246,9 @@
     {
       public void parsed(String arg0) throws OptionException
       {
-        if (cni)
+        if (cniOrJniSeen && cni)
           throw new OptionException("only one of -jni or -cni may be used");
+	cniOrJniSeen = true;
         cni = false;
       }
     });
@@ -246,10 +256,13 @@
     {
       public void parsed(String arg0) throws OptionException
       {
+        if (cniOrJniSeen && ! cni)
+          throw new OptionException("only one of -jni or -cni may be used");
+	cniOrJniSeen = true;
         cni = true;
       }
     });
-    result.add(new Option("verbose", "Set verbose mode")
+    result.add(new Option("verbose", 'v', "Set verbose mode")
     {
       public void parsed(String arg0) throws OptionException
       {
@@ -304,23 +317,31 @@
     return result;
   }
 
-  private void writeHeaders(ArrayList klasses, Printer printer)
+  private void writeHeaders(HashMap klasses, Printer printer)
       throws IOException
   {
-    Iterator i = klasses.iterator();
+    Iterator i = klasses.entrySet().iterator();
     while (i.hasNext())
       {
-        ClassWrapper klass = (ClassWrapper) i.next();
+	Map.Entry e = (Map.Entry) i.next();
+	File filename = (File) e.getKey();
+        ClassWrapper klass = (ClassWrapper) e.getValue();
         if (verbose)
-          System.err.println("[writing " + klass + "]");
-        printer.printClass(klass);
+          System.err.println("[writing " + klass + " as " + filename + "]");
+        printer.printClass(filename, klass);
       }
   }
 
-  private void run(String[] args) throws IOException
+  protected void postParse(String[] names)
   {
+    // Nothing here.
+  }
+
+  protected void run(String[] args) throws IOException
+  {
     Parser p = getParser();
     String[] classNames = p.parse(args);
+    postParse(classNames);
     loader = classpath.getLoader();
 
     boolean isDirectory = outFileName == null;
@@ -365,19 +386,21 @@
       }
 
     Iterator i = klasses.iterator();
-    ArrayList results = new ArrayList();
+    HashMap results = new HashMap();
     while (i.hasNext())
       {
         // Let user specify either kind of class name or a
         // file name.
         Object item = i.next();
         ClassWrapper klass;
+	File filename;
         if (item instanceof File)
           {
             // Load class from file.
             if (verbose)
               System.err.println("[reading file " + item + "]");
             klass = getClass((File) item);
+	    filename = new File(klass.name);
           }
         else
           {
@@ -385,9 +408,12 @@
             String className = ((String) item).replace('.', '/');
             if (verbose)
               System.err.println("[reading class " + className + "]");
+	    // Use the name the user specified, even if it is
+	    // different from the ultimate class name.
+	    filename = new File(className);
             klass = getClass(className);
           }
-        results.add(klass);
+        results.put(filename, klass);
       }
 
     writeHeaders(results, printer);
@@ -425,7 +451,8 @@
         String resource = name.replace('.', '/') + ".class";
         URL url = loader.findResource(resource);
         if (url == null)
-          throw new IOException("can't find class file " + resource);
+          throw new IOException("can't find class file " + resource
+				+ " in " + loader);
         InputStream is = url.openStream();
         ClassWrapper result = readClass(is);
         classMap.put(name, result);
Index: libjava/classpath/tools/gnu/classpath/tools/javah/JniIncludePrinter.java
===================================================================
--- libjava/classpath/tools/gnu/classpath/tools/javah/JniIncludePrinter.java	(revision 122231)
+++ libjava/classpath/tools/gnu/classpath/tools/javah/JniIncludePrinter.java	(working copy)
@@ -107,8 +107,9 @@
     return new JniPrintStream(classpath, fos, klass);
   }
 
-  public void printClass(ClassWrapper klass) throws IOException
+  public void printClass(File filename, ClassWrapper klass) throws IOException
   {
+    // Note that we ignore the filename here.
     String xname = JniHelper.mangle(klass.name);
     JniPrintStream out 
       = (JniPrintStream) getPrintStream(klass.name.replace('/', '_') + ".h", 
Index: libjava/classpath/tools/classes/com/sun/tools/javac/Main.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: libjava/classpath/tools/classes/com/sun/tools/javac/Main.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: libjava/classpath/tools/classes/com/sun/tools/javac/Messages.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: libjava/classpath/tools/classes/com/sun/tools/javac/Messages.class
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Index: libjava/classpath/tools/Makefile.am
===================================================================
--- libjava/classpath/tools/Makefile.am	(revision 122231)
+++ libjava/classpath/tools/Makefile.am	(working copy)
@@ -101,6 +101,10 @@
 
 # All our example java source files
 TOOLS_JAVA_FILES = $(srcdir)/gnu/classpath/tools/*/*.java \
+	$(srcdir)/com/sun/javadoc/*.java \
+	$(srcdir)/com/sun/tools/doclets/*.java \
+	$(srcdir)/com/sun/tools/javac/*.java \
+	$(srcdir)/sun/rmi/rmic/*.java \
 	$(srcdir)/external/asm/org/objectweb/asm/*.java \
 	$(srcdir)/external/asm/org/objectweb/asm/attrs/*.java \
 	$(srcdir)/external/asm/org/objectweb/asm/commons/*.java \
@@ -155,7 +159,12 @@
 ##	mkdir classes asm
 	abs_srcdir=`cd $(srcdir) && pwd` ; \
 	find $$abs_srcdir/external/asm -name '*.java' -print > asm.lst; \
-	find $$abs_srcdir/gnu/classpath/tools -name '*.java' -print > classes.lst
+	find $(srcdir)/gnu/classpath/tools \
+	     $(srcdir)/com/sun/javadoc \
+	     $(srcdir)/com/sun/tools/doclets \
+	     $(srcdir)/com/sun/tools/javac \
+	     $(srcdir)/sun/rmi/rmic \
+	     -name '*.java' -print > classes.lst
 	cat classes.lst asm.lst > all-classes.lst
 if JAVA_MAINTAINER_MODE
 ## Compile ASM separately as it is latin-1 encoded.
@@ -163,7 +172,9 @@
 	  $$AC -g -w -d $(srcdir)/asm @asm.lst
 	$(JCOMPILER) -g -w -d $(srcdir)/classes @classes.lst
 ## Copy over tools resource files.
-	@list=`cd $(top_srcdir)/resource && find gnu/classpath/tools -name \*.properties -print`; \
+	@list=`cd $(top_srcdir)/resource && find gnu/classpath/tools \
+	       com/sun/javadoc com/sun/tools/doclets com/sun/tools/javac \
+	       sun/rmi/rmic -name \*.properties -print`; \
 	for p in $$list; do \
 	  dirname=classes/`dirname $$p`; \
 	  if ! test -d "$$dirname"; then mkdir -p "$$dirname"; fi; \
Index: libjava/classpath/configure.ac
===================================================================
--- libjava/classpath/configure.ac	(revision 122231)
+++ libjava/classpath/configure.ac	(working copy)
@@ -608,16 +608,16 @@
   if test "x${COMPILE_PLUGIN}" = xyes; then
     PKG_CHECK_MODULES(MOZILLA, mozilla-plugin, [MOZILLA_FOUND=yes], [MOZILLA_FOUND=no])
     if test "x${MOZILLA_FOUND}" = xno; then
-      PKG_CHECK_MODULES(MOZILLA, firefox-plugin, [MOZILLA_FOUND=yes], [MOZILLA_FOUND=no])
+      PKG_CHECK_MODULES(MOZILLA, firefox-plugin firefox-xpcom, [MOZILLA_FOUND=yes], [MOZILLA_FOUND=no])
     fi
     if test "x${MOZILLA_FOUND}" = xno; then
-      PKG_CHECK_MODULES(MOZILLA, xulrunner-plugin, [MOZILLA_FOUND=yes], [MOZILLA_FOUND=no])
+      PKG_CHECK_MODULES(MOZILLA, xulrunner-plugin xulrunner-xpcom, [MOZILLA_FOUND=yes], [MOZILLA_FOUND=no])
     fi
     if test "x${MOZILLA_FOUND}" = xno; then
-      PKG_CHECK_MODULES(MOZILLA, mozilla-firefox-plugin, [MOZILLA_FOUND=yes], [MOZILLA_FOUND=no])
+      PKG_CHECK_MODULES(MOZILLA, mozilla-firefox-plugin mozilla-firefox-xpcom, [MOZILLA_FOUND=yes], [MOZILLA_FOUND=no])
     fi
     if test "x${MOZILLA_FOUND}" = xno; then
-      PKG_CHECK_MODULES(MOZILLA, seamonkey-plugin, [MOZILLA_FOUND=yes], [MOZILLA_FOUND=no])
+      PKG_CHECK_MODULES(MOZILLA, seamonkey-plugin seamonkey-xpcom, [MOZILLA_FOUND=yes], [MOZILLA_FOUND=no])
     fi
     PKG_CHECK_MODULES(GLIB, glib-2.0)
 
@@ -705,6 +705,27 @@
 
 
 dnl -----------------------------------------------------------
+dnl Specify the jar file containing the Eclipse Java Compiler.  If
+dnl this option is not specified then the com.sun.tools.javac
+dnl implementation will not be included in tools.zip.
+dnl -----------------------------------------------------------
+dnl GCJ LOCAL: default to $multi_basedir/ecj.jar
+dnl In the default case where $multi_basedir/ecj.jar is found
+dnl $(jardir)/ecj.jar will not expand properly in GNU Classpath's
+dnl gnu/classpath/Configuration.java.  That is OK though since libjava's
+dnl gnu/classpath/Configuration.java overrides GNU Classpath's and
+dnl ECJ_JAR_FILE will be properly expanded in libjava's
+dnl gnu/classpath/natConfiguration.cc.
+AC_ARG_WITH([ecj-jar],
+  	    [AS_HELP_STRING([--with-ecj-jar=ABS.PATH],
+  	    [specify jar file containing the Eclipse Java Compiler])],
+  	    [ECJ_JAR=$withval],
+	    [if test -f $multi_basedir/ecj.jar; then
+	       ECJ_JAR='$(jardir)/ecj.jar'
+	     fi])
+AC_SUBST(ECJ_JAR)
+
+dnl -----------------------------------------------------------
 dnl Should the VM explicitly run class initialization subfunctions for
 dnl java.lang.System?   (default is false -- the subfunctions will be run 
 dnl automatically by the class initializer)
Index: libjava/classpath/doc/cp-hacking.texinfo
===================================================================
--- libjava/classpath/doc/cp-hacking.texinfo	(revision 0)
+++ libjava/classpath/doc/cp-hacking.texinfo	(revision 124261)
@@ -0,0 +1,1733 @@
+\input texinfo @c -*-texinfo-*-
+
+@c %**start of header
+@setfilename hacking.info
+@settitle GNU Classpath Hacker's Guide
+@c %**end of header
+
+@setchapternewpage off
+
+@ifinfo
+This file contains important information you will need to know if you
+are going to hack on the GNU Classpath project code.
+
+Copyright (C) 1998,1999,2000,2001,2002,2003,2004, 2005 Free Software Foundation, Inc.
+
+@ifnotplaintext
+@dircategory GNU Libraries
+@direntry
+* Classpath Hacking: (hacking).   GNU Classpath Hacker's Guide
+@end direntry
+@end ifnotplaintext
+@end ifinfo
+
+@titlepage
+@title GNU Classpath Hacker's Guide
+@author Aaron M. Renn
+@author Paul N. Fisher
+@author John Keiser
+@author C. Brian Jones
+@author Mark J. Wielaard
+
+@page
+@vskip 0pt plus 1filll
+Copyright @copyright{} 1998,1999,2000,2001,2002,2003,2004 Free Software Foundation, Inc.
+@sp 2
+Permission is granted to make and distribute verbatim copies of
+this document provided the copyright notice and this permission notice
+are preserved on all copies.
+
+Permission is granted to copy and distribute modified versions of this
+document under the conditions for verbatim copying, provided that the
+entire resulting derived work is distributed under the terms of a
+permission notice identical to this one.
+
+Permission is granted to copy and distribute translations of this manual
+into another language, under the above conditions for modified versions,
+except that this permission notice may be stated in a translation
+approved by the Free Software Foundation.
+
+@end titlepage
+
+@ifinfo
+@node Top, Introduction, (dir), (dir)
+@top GNU Classpath Hacker's Guide
+
+This document contains important information you'll want to know if
+you want to hack on GNU Classpath, Essential Libraries for Java, to
+help create free core class libraries for use with virtual machines
+and compilers for the java programming language.
+@end ifinfo
+
+@menu
+* Introduction::                An introduction to the GNU Classpath project
+* Requirements::                Very important rules that must be followed
+* Volunteering::                So you want to help out
+* Project Goals::               Goals of the GNU Classpath project
+* Needed Tools and Libraries::  A list of programs and libraries you will need
+* Programming Standards::       Standards to use when writing code
+* Hacking Code::                Working on code, Working with others
+* Programming Goals::           What to consider when writing code
+* API Compatibility::           How to handle serialization and deprecated methods
+* Specification Sources::       Where to find class library specs
+* Naming Conventions::          How files and directories are named
+* Character Conversions::       Working on Character conversions
+* Localization::                How to handle localization/internationalization
+
+@detailmenu
+ --- The Detailed Node Listing ---
+
+Programming Standards
+
+* Source Code Style Guide::     
+
+Working on the code, Working with others
+
+* Branches::                    
+* Writing ChangeLogs::          
+
+Working with branches
+
+* Writing ChangeLogs::          
+
+Programming Goals
+
+* Portability::                 Writing Portable Software                
+* Utility Classes::             Reusing Software
+* Robustness::                  Writing Robust Software               
+* Java Efficiency::             Writing Efficient Java            
+* Native Efficiency::           Writing Efficient JNI          
+* Security::                    Writing Secure Software
+
+API Compatibility
+
+* Serialization::               Serialization
+* Deprecated Methods::          Deprecated methods
+
+Localization
+
+* String Collation::            Sorting strings in different locales
+* Break Iteration::             Breaking up text into words, sentences, and lines
+* Date Formatting and Parsing::  Locale specific date handling
+* Decimal/Currency Formatting and Parsing::  Local specific number handling
+
+@end detailmenu
+@end menu
+
+@node Introduction, Requirements, Top, Top
+@comment node-name, next, previous, up
+@chapter Introduction
+
+The GNU Classpath Project is a dedicated to providing a 100% free,
+clean room implementation of the standard core class libraries for
+compilers and runtime environments for the java programming language.
+It offers free software developers an alternative core library
+implementation upon which larger java-like programming environments
+can be build.  The GNU Classpath Project was started in the Spring of
+1998 as an official Free Software Foundation project.  Most of the
+volunteers working on GNU Classpath do so in their spare time, but a
+couple of projects based on GNU Classpath have paid programmers to
+improve the core libraries.  We appreciate everyone's efforts in the
+past to improve and help the project and look forward to future
+contributions by old and new members alike.
+
+@node Requirements, Volunteering, Introduction, Top
+@comment node-name, next, previous, up
+@chapter Requirements
+
+Although GNU Classpath is following an open development model where input
+from developers is welcome, there are certain base requirements that
+need to be met by anyone who wants to contribute code to this project.
+They are mostly dictated by legal requirements and are not arbitrary
+restrictions chosen by the GNU Classpath team.
+
+You will need to adhere to the following things if you want to donate
+code to the GNU Classpath project:
+
+@itemize @bullet
+@item
+@strong{Never under any circumstances refer to proprietary code while
+working on GNU Classpath.}  It is best if you have never looked at
+alternative proprietary core library code at all.  To reduce
+temptation, it would be best if you deleted the @file{src.zip} file
+from your proprietary JDK distribution (note that recent versions of
+GNU Classpath and the compilers and environments build on it are
+mature enough to not need any proprietary implementation at all when
+working on GNU Classpath, except in exceptional cases where you need
+to test compatibility issues pointed out by users).  If you have
+signed Sun's non-disclosure statement, then you unfortunately cannot
+work on Classpath code at all.  If you have any reason to believe that
+your code might be ``tainted'', please say something on the mailing
+list before writing anything.  If it turns out that your code was not
+developed in a clean room environment, we could be very embarrassed
+someday in court.  Please don't let that happen.
+
+@item
+@strong{Never decompile proprietary class library implementations.}  While
+the wording of the license in Sun's Java 2 releases has changed, it is
+not acceptable, under any circumstances, for a person working on
+GNU Classpath to decompile Sun's class libraries.  Allowing the use of
+decompilation in the GNU Classpath project would open up a giant can of
+legal worms, which we wish to avoid.
+
+@item
+Classpath is licensed under the terms of the
+@uref{http://www.fsf.org/copyleft/gpl.html,GNU General Public
+License}, with a special exception included to allow linking with
+non-GPL licensed works as long as no other license would restrict such
+linking.  To preserve freedom for all users and to maintain uniform
+licensing of Classpath, we will not accept code into the main
+distribution that is not licensed under these terms.  The exact
+wording of the license of the current version of GNU Classpath can be
+found online from the
+@uref{http://www.gnu.org/software/classpath/license.html, GNU
+Classpath license page} and is of course distributed with current
+snapshot release from @uref{ftp://ftp.gnu.org/gnu/classpath/} or by
+obtaining a copy of the current CVS tree.
+
+@item
+GNU Classpath is GNU software and this project is being officially sponsored
+by the @uref{http://www.fsf.org/,Free Software Foundation}.  Because of
+this, the FSF will hold copyright to all code developed as part of
+GNU Classpath.  This will allow them to pursue copyright violators in court,
+something an individual developer may neither have the time nor
+resources to do.  Everyone contributing code to GNU Classpath will need to
+sign a copyright assignment statement.  Additionally, if you are
+employed as a programmer, your employer may need to sign a copyright
+waiver disclaiming all interest in the software.  This may sound harsh,
+but unfortunately, it is the only way to ensure that the code you write
+is legally yours to distribute.
+@end itemize
+
+@node Volunteering, Project Goals, Requirements, Top
+@comment node-name, next, previous, up
+@chapter Volunteering to Help
+
+The GNU Classpath project needs volunteers to help us out.  People are
+needed to write unimplemented core packages, to test GNU Classpath on
+free software programs written in the java programming language, to
+test it on various platforms, and to port it to platforms that are
+currently unsupported.
+
+While pretty much all contributions are welcome (but see 
+@pxref{Requirements}) it is always preferable that volunteers do the
+whole job when volunteering for a task.  So when you volunteer to write
+a Java package, please be willing to do the following:
+
+@itemize @bullet
+@item
+Implement a complete drop-in replacement for the particular package.
+That means implementing any ``internal'' classes.  For example, in the
+java.net package, there are non-public classes for implementing sockets.
+Without those classes, the public socket interface is useless.  But do
+not feel obligated to completely implement all of the functionality at
+once.  For example, in the java.net package, there are different types
+of protocol handlers for different types of URL's.  Not all of these
+need to be written at once.
+
+@item
+Please write complete and thorough API documentation comments for
+every public and protected method and variable.  These should be
+superior to Sun's and cover everything about the item being
+documented.
+
+@item
+Please write a regression test package that can be used to run tests
+of your package's functionality.  GNU Classpath uses the
+@uref{http://sources.redhat.com/mauve/,Mauve project} for testing the
+functionality of the core class libraries.  The Classpath Project is
+fast approaching the point in time where all modifications to the
+source code repository will require appropriate test cases in Mauve to
+ensure correctness and prevent regressions.  
+@end itemize
+
+Writing good documentation, tests and fixing bugs should be every
+developer's top priority in order to reach the elusive release of
+version 1.0.
+
+@node Project Goals, Needed Tools and Libraries, Volunteering, Top
+@comment node-name, next, previous, up
+@chapter Project Goals
+
+The goal of the Classpath project is to produce a
+@uref{http://www.fsf.org/philosophy/free-sw.html,free} implementation of
+the standard class library for Java.  However, there are other more
+specific goals as to which platforms should be supported.
+
+Classpath is targeted to support the following operating systems:
+
+@enumerate
+@item
+Free operating systems.  This includes GNU/Linux, GNU/Hurd, and the free
+BSDs.
+
+@item
+Other Unix-like operating systems.
+
+@item
+Platforms which currently have no Java support at all.
+
+@item 
+Other platforms such as MS-Windows.
+@end enumerate
+
+While free operating systems are the top priority, the other priorities
+can shift depending on whether or not there is a volunteer to port
+Classpath to those platforms and to test releases.
+
+Eventually we hope the Classpath will support all JVM's that provide
+JNI or CNI support.  However, the top priority is free JVM's.  A small
+list of Compiler/VM environments that are currently actively
+incorporating GNU Classpath is below.  A more complete overview of
+projects based on GNU classpath can be found online at
+@uref{http://www.gnu.org/software/classpath/stories.html,the GNU
+Classpath stories page}.
+
+@enumerate
+@item
+@uref{http://gcc.gnu.org/java/,GCJ}
+@item 
+@uref{http://jamvm.sourceforge.net/,jamvm}
+@item 
+@uref{http://kissme.sourceforge.net/,Kissme}
+@item
+@uref{http://www.ibm.com/developerworks/oss/jikesrvm/,Jikes RVM}
+@item
+@uref{http://www.sablevm.org/,SableVM}
+@item
+@uref{http://www.kaffe.org/,Kaffe}
+@end enumerate
+
+As with OS platform support, this priority list could change if a
+volunteer comes forward to port, maintain, and test releases for a
+particular JVM.  Since gcj is part of the GNU Compiler Collective it
+is one of the most important targets.  But since it doesn't currently
+work out of the box with GNU Classpath it is currently not the easiest
+target.  When hacking on GNU Classpath the easiest is to use
+compilers and runtime environments that that work out of the box with
+it, such as the jikes compiler and the runtime environments jamvm and
+kissme.  But you can also work directly with targets like gcj and
+kaffe that have their own copy of GNU Classpath currently.  In that
+case changes have to be merged back into GNU Classpath proper though,
+which is sometimes more work.  SableVM is starting to migrate from an
+integrated GNU Classpath version to being usable with GNU Classpath
+out of the box.
+
+
+The initial target version for Classpath is the 1.1 spec.  Higher
+versions can be implemented (and have been implemented, including lots
+of 1.4 functionality) if desired, but please do not create classes
+that depend on features in those packages unless GNU Classpath already
+contains those features.  GNU Classpath has been free of any
+proprietary dependencies for a long time now and we like to keep it
+that way.  But finishing, polishing up, documenting, testing and
+debugging current functionality is of higher priority then adding new
+functionality.
+
+@node Needed Tools and Libraries, Programming Standards, Project Goals, Top
+@comment node-name, next, previous, up
+@chapter Needed Tools and Libraries
+
+If you want to hack on Classpath, you should at least download and
+install the following tools.  And try to familiarize yourself with
+them.  Although in most cases having these tools installed will be all
+you really need to know about them.  Also note that when working on
+(snapshot) releases only GCC 3.3+ (plus a free VM from the list above
+and the libraries listed below) is needed.  The other tools are only
+needed when working directly on the CVS version.
+
+@itemize @bullet
+@item
+GCC 3.3+
+@item
+CVS 1.11+
+@item
+automake 1.7+
+@item
+autoconf 2.59+
+@item
+libtool 1.4.2+
+@item
+GNU m4 1.4
+@item
+texinfo 4.2+
+@end itemize
+
+All of these tools are available from
+@uref{ftp://gnudist.gnu.org/pub/gnu/,gnudist.gnu.org} via anonymous
+ftp, except CVS which is available from
+@uref{http://www.cvshome.org/,www.cvshome.org}.  They are fully
+documented with texinfo manuals.  Texinfo can be browsed with the
+Emacs editor, or with the text editor of your choice, or transformed
+into nicely printable Postscript.
+
+Here is a brief description of the purpose of those tools.
+
+@table @b
+
+@item GCC
+The GNU Compiler Collection. This contains a C compiler (gcc) for
+compiling the native C code and a compiler for the java programming
+language (gcj).  You will need at least gcj version 3.3 or higher.  If
+that version is not available for your platform you can try the
+@uref{http://www.jikes.org/, jikes compiler}.  We try to keep all code
+compilable with both gcj and jikes at all times.
+
+@item CVS  
+A version control system that maintains a centralized Internet
+repository of all code in the Classpath system.
+
+@item automake  
+This tool automatically creates Makefile.in files from Makefile.am
+files.  The Makefile.in is turned into a Makefile by autoconf.  Why
+use this?  Because it automatically generates every makefile target
+you would ever want (clean, install, dist, etc) in full compliance
+with the GNU coding standards.  It also simplifies Makefile creation
+in a number of ways that cannot be described here.  Read the docs for
+more info.
+
+@item autoconf  
+Automatically configures a package for the platform on which it is
+being built and generates the Makefile for that platform.
+
+@item libtool  
+Handles all of the zillions of hairy platform specific options needed
+to build shared libraries.
+
+@item m4
+The free GNU replacement for the standard Unix macro processor.
+Proprietary m4 programs are broken and so GNU m4 is required for
+autoconf to work though knowing a lot about GNU m4 is not required to
+work with autoconf.
+
+@item perl
+Larry Wall's scripting language.  It is used internally by automake.
+
+@item texinfo
+Manuals and documentation (like this guide) are written in texinfo.
+Texinfo is the official documentation format of the GNU project.
+Texinfo uses a single source file to produce output in a number of formats,
+both online and printed (dvi, info, html, xml, etc.). This means that
+instead of writing different documents for online information and another
+for a printed manual, you need write only one document. And when the work
+is revised, you need revise only that one document.
+
+@end table
+
+
+For compiling the native AWT libraries you need to have the following
+libraries installed:
+
+@table @b
+@item GTK+ 2.2.x
+@uref{http://www.gtk.org/,GTK+} is a multi-platform toolkit for
+creating graphical user interfaces.  It is used as the basis of the
+GNU desktop project GNOME.
+
+@item gdk-pixbuf
+@uref{http://www.gnome.org/start/,gdk-pixbuf} is a GNOME library for
+representing images.
+@end table
+
+
+GNU Classpath comes with a couple of libraries included in the source
+that are not part of GNU Classpath proper, but that have been included
+to provide certain needed functionality.  All these external libraries
+should be clearly marked as such.  In general we try to use as much as
+possible the clean upstream versions of these sources.  That way
+merging in new versions will be easiest.  You should always try to get
+bug fixes to these files accepted upstream first.  Currently we
+include the following 'external' libraries.  Most of these sources are
+included in the @file{external} directory.  That directory also
+contains a @file{README} file explaining how to import newer versions.
+
+@table @b
+
+@item GNU jaxp
+Can be found in @file{external/jaxp}.  Provides javax.xml, org.w3c and
+org.xml packages.  Upstream is
+@uref{http://www.gnu.org/software/classpathx/,GNU ClasspathX}.
+
+@item fdlibm
+Can be found in @file{native/fdlibm}.  Provides native implementations
+of some of the Float and Double operations.  Upstream is
+@uref{http://gcc.gnu.org/java/,libgcj}, they sync again with the
+'real' upstream @uref{http://www.netlib.org/fdlibm/readme}.  See also
+java.lang.StrictMath.
+
+@end table
+
+
+@node Programming Standards, Hacking Code, Needed Tools and Libraries, Top
+@comment node-name, next, previous, up
+@chapter Programming Standards
+
+For C source code, follow the
+@uref{http://www.gnu.org/prep/standards/,GNU Coding Standards}.
+The standards also specify various things like the install directory
+structure.  These should be followed if possible.
+
+For Java source code, please follow the
+@uref{http://www.gnu.org/prep/standards/,GNU Coding
+Standards}, as much as possible.  There are a number of exceptions to
+the GNU Coding Standards that we make for GNU Classpath as documented
+in this guide.  We will hopefully be providing developers with a code
+formatting tool that closely matches those rules soon.
+
+For API documentation comments, please follow
+@uref{http://java.sun.com/products/jdk/javadoc/writingdoccomments.html,How
+to Write Doc Comments for Javadoc}.  We would like to have a set of
+guidelines more tailored to GNU Classpath as part of this document.
+
+@menu
+* Source Code Style Guide::     
+@end menu
+
+@node Source Code Style Guide,  , Programming Standards, Programming Standards
+@comment node-name, next, previous, up
+@section Java source coding style
+
+Here is a list of some specific rules used when hacking on GNU
+Classpath java source code. We try to follow the standard
+@uref{http://www.gnu.org/prep/standards/,GNU Coding Standards}
+for that. There are lots of tools that can automatically generate it
+(although most tools assume C source, not java source code) and it
+seems as good a standard as any. There are a couple of exceptions and
+specific rules when hacking on GNU Classpath java source code however.
+The following lists how code is formatted (and some other code
+conventions):
+
+
+@itemize @bullet
+
+@item
+Java source files in GNU Classpath are encoded using UTF-8.  However,
+ordinarily it is considered best practice to use the ASCII subset of
+UTF-8 and write non-ASCII characters using \u escapes.
+
+@item
+If possible, generate specific imports (expand) over java.io.* type
+imports. Order by gnu, java, javax, org. There must be one blank line
+between each group. The imports themselves are ordered alphabetically by
+package name. Classes and interfaces occur before sub-packages. The
+classes/interfaces are then also sorted alphabetical. Note that uppercase
+characters occur before lowercase characters.
+
+@example
+import gnu.java.awt.EmbeddedWindow;
+
+import java.io.IOException;
+import java.io.InputStream;
+
+import javax.swing.JFrame;
+@end example
+
+@item
+Blank line after package statement, last import statement, classes,
+interfaces, methods.
+
+@item
+Opening/closing brace for class and method is at the same level of
+indent as the declaration.  All other braces are indented and content
+between braces indented again.
+
+@item
+Since method definitions don't start in column zero anyway (since they
+are always inside a class definition), the rational for easy grepping
+for ``^method_def'' is mostly gone already. Since it is customary for
+almost everybody who writes java source code to put modifiers, return
+value and method name on the same line, we do too.
+
+@c fixme Another rational for always indenting the method definition is that itmakes it a bit easier to distinguish methods in inner and anonymousclasses from code in their enclosing context. NEED EXAMPLE.
+
+@item
+Implements and extends on separate lines, throws too.  Indent extends,
+implements, throws.  Apply deep indentation for method arguments.
+
+@c fixme Needs example.
+
+@item
+Don't add a space between a method or constructor call/definition and
+the open-bracket. This is because often the return value is an object on
+which you want to apply another method or from which you want to access
+a field.
+        
+Don't write:
+
+@example
+  getToolkit ().createWindow (this);
+@end example
+
+But write:
+@example
+  getToolkit().createWindow(this);
+@end example
+
+@item
+The GNU Coding Standard it gives examples for almost every construct
+(if, switch, do, while, etc.).  One missing is the try-catch construct
+which should be formatted as:
+
+@example
+  try
+    @{
+      //
+    @}
+  catch (...)
+    @{
+      //
+    @}
+@end example
+
+@item
+Wrap lines at 80 characters after assignments and before operators.
+Wrap always before extends, implements, throws, and labels.
+
+@item
+Don't put multiple class definitions in the same file, except for
+inner classes. File names (plus .java) and class names should be the
+same.
+
+@item
+Don't catch a @code{NullPointerException} as an alternative to simply
+checking for @code{null}.  It is clearer and usually more efficient
+to simply write an explicit check.
+
+For instance, don't write:
+
+@example
+try
+  @{
+    return foo.doit();
+  @}
+catch (NullPointerException _)
+  @{
+    return 7;
+  @}
+@end example
+
+If your intent above is to check whether @samp{foo} is @code{null},
+instead write:
+
+@example
+if (foo == null)
+  return 7;
+else
+  return foo.doit();
+@end example
+
+@item
+Don't use redundant modifiers or other redundant constructs.  Here is
+some sample code that shows various redundant items in comments:
+
+@example
+/*import java.lang.Integer;*/
+/*abstract*/ interface I @{
+   /*public abstract*/ void m();
+   /*public static final*/ int i = 1;
+   /*public static*/ class Inner @{@}
+@}
+final class C /*extends Object*/ @{
+   /*final*/ void m() @{@}
+@}
+@end example
+
+Note that Jikes will generate warnings for redundant modifiers if you
+use @code{+Predundant-modifiers} on the command line.
+
+@item
+Modifiers should be listed in the standard order recommended by the
+JLS.  Jikes will warn for this when given @code{+Pmodifier-order}.
+
+@item
+Because the output of different compilers differs, we have
+standardized on explicitly specifying @code{serialVersionUID} in
+@code{Serializable} classes in Classpath.  This field should be
+declared as @code{private static final}.  Note that a class may be
+@code{Serializable} without being explicitly marked as such, due to
+inheritance.  For instance, all subclasses of @code{Throwable} need to
+have @code{serialVersionUID} declared.
+@c fixme index
+@c fixme link to the discussion
+
+@item
+Don't declare unchecked exceptions in the @code{throws} clause of a
+method.  However, if throwing an unchecked exception is part of the
+method's API, you should mention it in the Javadoc.  There is one
+important exception to this rule, which is that a stub method should
+be marked as throwing @code{gnu.classpath.NotImplementedException}.
+This will let our API comparison tools note that the method is not
+fully implemented.
+
+@item
+When overriding @code{Object.equals}, remember that @code{instanceof}
+filters out @code{null}, so an explicit check is not needed.
+
+@item
+When catching an exception and rethrowing a new exception you should
+``chain'' the Throwables.  Don't just add the String representation of
+the caught exception.
+
+@example
+  try
+    @{
+      // Some code that can throw
+    @}
+  catch (IOException ioe)
+    @{
+      throw (SQLException) new SQLException("Database corrupt").setCause(ioe);
+    @}
+@end example
+
+@item
+Avoid the use of reserved words for identifiers.  This is obvious with those
+such as @code{if} and @code{while} which have always been part of the Java
+programming language, but you should be careful about accidentally using
+words which have been added in later versions.  Notable examples are
+@code{assert} (added in 1.4) and @code{enum} (added in 1.5).  Jikes will warn
+of the use of the word @code{enum}, but, as it doesn't yet support the 1.5
+version of the language, it will still allow this usage through.  A
+compiler which supports 1.5 (e.g. the Eclipse compiler, ecj) will simply
+fail to compile the offending source code.
+
+@c fixme Describe Anonymous classes (example).
+@c fixme Descibe Naming conventions when different from GNU Coding Standards.
+@c fixme Describee API doc javadoc tags used.
+
+@end itemize
+
+Some things are the same as in the normal GNU Coding Standards:
+
+@itemize @bullet
+
+@item
+Unnecessary braces can be removed, one line after an if, for, while as
+examples.
+
+@item
+Space around operators (assignment, logical, relational, bitwise,
+mathematical, shift).
+
+@item
+Blank line before single-line comments, multi-line comments, javadoc
+comments.
+
+@item
+If more than 2 blank lines, trim to 2.
+
+@item
+Don't keep commented out code.  Just remove it or add a real comment
+describing what it used to do and why it is changed to the current
+implementation.
+@end itemize
+
+
+@node Hacking Code, Programming Goals, Programming Standards, Top
+@comment node-name, next, previous, up
+@chapter Working on the code, Working with others
+
+There are a lot of people helping out with GNU Classpath.  Here are a
+couple of practical guidelines to make working together on the code
+smoother.
+
+The main thing is to always discuss what you are up to on the
+mailinglist.  Making sure that everybody knows who is working on what
+is the most important thing to make sure we cooperate most
+effectively.
+
+We maintain a
+@uref{http://www.gnu.org/software/classpath/tasks.html,Task List}
+which contains items that you might want to work on.
+
+Before starting to work on something please make sure you read this
+complete guide.  And discuss it on list to make sure your work does
+not duplicate or interferes with work someone else is already doing.
+Always make sure that you submit things that are your own work.  And
+that you have paperwork on file (as stated in the requirements
+section) with the FSF authorizing the use of your additions.
+
+Technically the GNU Classpath project is hosted on
+@uref{http://savannah.gnu.org/,Savannah} a central point for
+development, distribution and maintenance of GNU Software.  Here you
+will find the
+@uref{https://savannah.gnu.org/projects/classpath/,project page}, bug
+reports, pending patches, links to mailing lists, news items and CVS.
+
+You can find instructions on getting a CVS checkout for classpath at
+@uref{https://savannah.gnu.org/cvs/?group=classpath}.
+
+You don't have to get CVS commit write access to contribute, but it is
+sometimes more convenient to be able to add your changes directly to
+the project CVS. Please contact the GNU Classpath savannah admins to
+arrange CVS access if you would like to have it.
+
+Make sure to be subscribed to the commit-classpath mailinglist while
+you are actively hacking on Classpath.  You have to send patches (cvs
+diff -uN) to this list before committing.
+
+We really want to have a pretty open check-in policy.  But this means
+that you should be extra careful if you check something in.  If at all
+in doubt or if you think that something might need extra explaining
+since it is not completely obvious please make a little announcement
+about the change on the mailinglist.  And if you do commit something
+without discussing it first and another GNU Classpath hackers asks for
+extra explanation or suggests to revert a certain commit then please
+reply to the request by explaining why something should be so or if
+you agree to revert it.  (Just reverting immediately is OK without
+discussion, but then please don't mix it with other changes and please
+say so on list.)
+
+Patches that are already approved for libgcj or also OK for Classpath.
+(But you still have to send a patch/diff to the list.)  All other
+patches require you to think whether or not they are really OK and
+non-controversial, or if you would like some feedback first on them
+before committing.  We might get real commit rules in the future, for
+now use your own judgment, but be a bit conservative.
+
+Always contact the GNU Classpath maintainer before adding anything
+non-trivial that you didn't write yourself and that does not come from
+libgcj or from another known GNU Classpath or libgcj hacker.  If you
+have been assigned to commit changes on behalf of another project or
+a company always make sure they come from people who have signed the
+papers for the FSF and/or fall under the arrangement your company made
+with the FSF for contributions.  Mention in the ChangeLog who actually
+wrote the patch.
+
+Commits for completely unrelated changes they should be committed
+separately (especially when doing a formatting change and a logical
+change, do them in two separate commits). But do try to do a commit of
+as much things/files that are done at the same time which can
+logically be seen as part of the same change/cleanup etc.
+
+When the change fixes an important bug or adds nice new functionality
+please write a short entry for inclusion in the @file{NEWS} file.  If it
+changes the VM interface you must mention that in both the @file{NEWS} file
+and the VM Integration Guide.
+
+All the ``rules'' are really meant to make sure that GNU Classpath
+will be maintainable in the long run and to give all the projects that
+are now using GNU Classpath an accurate view of the changes we make to
+the code and to see what changed when.  If you think the requirements
+are ``unworkable'' please try it first for a couple of weeks.  If you
+still feel the same after having some more experience with the project
+please feel free to bring up suggestions for improvements on the list.
+But don't just ignore the rules!  Other hackers depend on them being
+followed to be the most productive they can be (given the above
+constraints).
+
+@menu
+* Branches::                    
+* Writing ChangeLogs::          
+@end menu
+
+@node Branches, Writing ChangeLogs, Hacking Code, Hacking Code
+@comment node-name, next, previous, up
+@section Working with branches
+
+Sometimes it is necessary to create branch of the source for doing new
+work that is disruptive to the other hackers, or that needs new
+language or libraries not yet (easily) available.
+
+After discussing the need for a branch on the main mailinglist with
+the other hackers explaining the need of a branch and suggestion of
+the particular branch rules (what will be done on the branch, who will
+work on it, will there be different commit guidelines then for the
+mainline trunk and when is the branch estimated to be finished and
+merged back into the trunk) every GNU Classpath hacker with commit
+access should feel free to create a branch. There are however a couple
+of rules that every branch should follow:
+
+@itemize @bullet
+
+@item All branches ought to be documented in the developer wiki at
+@uref{http://developer.classpath.org/mediation/ClasspathBranches}, so
+we can know which are live, who owns them, and when they die.
+
+@item Some rules can be changed on a branch.  In particular the branch
+maintainer can change the review requirements, and the requirement of
+keeping things building, testing, etc, can also be lifted.  (These
+should be documented along with the branch name and owner if they
+differ from the trunk.)
+
+@item Requirements for patch email to classpath-patches and for paperwork
+@strong{cannot} be lifted. See @ref{Requirements}.
+
+@item A branch should not be seen as ``private'' or
+``may be completely broken''. It should be as much as possible
+something that you work on with a team (and if there is no team - yet
+- then there is nothing as bad as having a completely broken build to
+get others to help out). There can of course be occasional breakage, but
+it should be planned and explained. And you can certainly have a rule
+like ``please ask me before committing to this branch''.
+
+@item Merges from the trunk to a branch are at the discretion of the
+branch maintainer.
+
+@item A merge from a branch to the trunk is treated like any other patch.
+In particular, it has to go through review, it must satisfy all the
+trunk requirements (build, regression test, documentation).
+
+@item There may be additional timing requirements on merging a branch to
+the trunk depending on the release schedule, etc.  For instance we may
+not want to do a branch merge just before a release.
+
+@end itemize
+
+If any of these rules are unclear please discuss on the list first.
+
+@menu
+* Writing ChangeLogs::          
+@end menu
+
+@node Writing ChangeLogs,  , Branches, Hacking Code
+@comment node-name, next, previous, up
+@section Documenting what changed when with ChangeLog entries
+
+To keep track of who did what when we keep an explicit ChangeLog entry
+together with the code.  This mirrors the CVS commit messages and in
+general the ChangeLog entry is the same as the CVS commit message.
+This provides an easy way for people getting a (snapshot) release or
+without access to the CVS server to see what happened when.  We do not
+generate the ChangeLog file automatically from the CVS server since
+that is not reliable.
+
+A good ChangeLog entry guideline can be found in the Guile Manual at
+@uref{http://www.gnu.org/software/guile/changelogs/guile-changelogs_3.html}.
+
+Here are some example to explain what should or shouldn't be in a
+ChangeLog entry (and the corresponding commit message):
+
+@itemize @bullet
+
+@item
+The first line of a ChangeLog entry should be:
+
+@example
+[date] <two spaces> [full name] <two spaces> [email-contact]
+@end example
+
+The second line should be blank. All other lines should be indented
+with one tab.
+
+@item
+Just state what was changed.  Why something is done as it is done in
+the current code should be either stated in the code itself or be
+added to one of the documentation files (like this Hacking Guide).
+
+So don't write:
+
+@example
+        * java/awt/font/OpenType.java: Remove 'public static final'
+        from OpenType tags, reverting the change of 2003-08-11.  See
+        Classpath discussion list of 2003-08-11.
+@end example
+
+Just state:
+
+@example
+        * java/awt/font/OpenType.java: Remove 'public static final' from
+        all member fields.
+@end example
+
+In this case the reason for the change was added to this guide.
+
+@item
+Just as with the normal code style guide, don't make lines longer then
+80 characters.
+
+@item
+Just as with comments in the code. The ChangeLog entry should be a
+full sentence, starting with a captital and ending with a period.
+
+@item
+Be precise in what changed, not the effect of the change (which should
+be clear from the code/patch).  So don't write:
+
+@example
+ * java/io/ObjectOutputStream.java : Allow putFields be called more 
+ than once.
+@end example
+
+But explain what changed and in which methods it was changed:
+
+@example
+ * java/io/ObjectOutputStream.java (putFields): Don't call
+ markFieldsWritten(). Only create new PutField when
+ currentPutField is null.
+ (writeFields): Call markFieldsWritten().
+@end example
+
+@end itemize
+
+The above are all just guidelines.  We all appreciate the fact that writing
+ChangeLog entries, using a coding style that is not ``your own'' and the
+CVS, patch and diff tools do take some time to getting used to.  So don't
+feel like you have to do it perfect right away or that contributions
+aren't welcome if they aren't ``perfect''.  We all learn by doing and
+interacting with each other.
+
+
+@node Programming Goals, API Compatibility, Hacking Code, Top
+@comment node-name, next, previous, up
+@chapter Programming Goals
+
+When you write code for Classpath, write with three things in mind, and
+in the following order: portability, robustness, and efficiency.
+
+If efficiency breaks portability or robustness, then don't do it the
+efficient way.  If robustness breaks portability, then bye-bye robust
+code.  Of course, as a programmer you would probably like to find sneaky
+ways to get around the issue so that your code can be all three ... the
+following chapters will give some hints on how to do this.
+
+@menu
+* Portability::                 Writing Portable Software                
+* Utility Classes::             Reusing Software
+* Robustness::                  Writing Robust Software               
+* Java Efficiency::             Writing Efficient Java            
+* Native Efficiency::           Writing Efficient JNI          
+* Security::                    Writing Secure Software
+@end menu
+
+@node Portability, Utility Classes, Programming Goals, Programming Goals
+@comment node-name, next, previous, up
+@section Portability
+
+The portability goal for Classpath is the following:
+
+@enumerate
+@item
+native functions for each platform that work across all VMs on that
+platform
+@item
+a single classfile set that work across all VMs on all platforms that
+support the native functions.
+@end enumerate
+
+For almost all of Classpath, this is a very feasible goal, using a
+combination of JNI and native interfaces.  This is what you should shoot
+for.  For those few places that require knowledge of the Virtual Machine
+beyond that provided by the Java standards, the VM Interface was designed.
+Read the Virtual Machine Integration Guide for more information.
+
+Right now the only supported platform is Linux.  This will change as that
+version stabilizes and we begin the effort to port to many other
+platforms.  Jikes RVM runs Classpath on AIX, and generally the Jikes
+RVM team fixes Classpath to work on that platform. 
+
+@node Utility Classes, Robustness, Portability, Programming Goals
+@comment  node-name,  next,  previous,  up
+@section Utility Classes
+
+At the moment, we are not very good at reuse of the JNI code.  There
+have been some attempts, called @dfn{libclasspath}, to
+create generally useful utility classes.  The utility classes are in
+the directory @file{native/jni/classpath} and they are mostly declared
+in @file{native/jni/classpath/jcl.h}.  These utility classes are
+currently only discussed in @ref{Robustness} and in @ref{Native
+Efficiency}.
+
+There are more utility classes available that could be factored out if
+a volunteer wants something nice to hack on.  The error reporting and
+exception throwing functions and macros in
+@file{native/jni/gtk-peer/gthread-jni.c} might be good
+candidates for reuse.  There are also some generally useful utility
+functions in @file{gnu_java_awt_peer_gtk_GtkMainThread.c} that could
+be split out and put into libclasspath.
+
+@node Robustness, Java Efficiency, Utility Classes, Programming Goals
+@comment node-name, next, previous, up
+@section Robustness
+
+Native code is very easy to make non-robust.  (That's one reason Java is
+so much better!)  Here are a few hints to make your native code more
+robust.
+
+Always check return values for standard functions.  It's sometimes easy
+to forget to check that malloc() return for an error.  Don't make that
+mistake.  (In fact, use JCL_malloc() in the jcl library instead--it will
+check the return value and throw an exception if necessary.)
+
+Always check the return values of JNI functions, or call
+@code{ExceptionOccurred} to check whether an error occurred.  You must
+do this after @emph{every} JNI call.  JNI does not work well when an
+exception has been raised, and can have unpredictable behavior.
+
+Throw exceptions using @code{JCL_ThrowException}.  This guarantees that if
+something is seriously wrong, the exception text will at least get out
+somewhere (even if it is stderr).
+
+Check for null values of @code{jclass}es before you send them to JNI functions.
+JNI does not behave nicely when you pass a null class to it: it
+terminates Java with a "JNI Panic."
+
+In general, try to use functions in @file{native/jni/classpath/jcl.h}.  They
+check exceptions and return values and throw appropriate exceptions.
+
+@node Java Efficiency, Native Efficiency, Robustness, Programming Goals
+@comment node-name, next, previous, up
+@section Java Efficiency
+
+For methods which explicitly throw a @code{NullPointerException} when an
+argument is passed which is null, per a Sun specification, do not write
+code like:
+
+@example
+int 
+strlen (String foo) throws NullPointerException
+@{
+  if (foo == null)
+    throw new NullPointerException ("foo is null");
+  return foo.length ();
+@}
+@end example
+
+Instead, the code should be written as:
+
+@example
+int
+strlen (String foo) throws NullPointerException
+@{
+  return foo.length ();
+@}
+@end example
+
+Explicitly comparing foo to null is unnecessary, as the virtual machine
+will throw a NullPointerException when length() is invoked.  Classpath
+is designed to be as fast as possible -- every optimization, no matter
+how small, is important.
+
+@node Native Efficiency, Security, Java Efficiency, Programming Goals
+@comment node-name, next, previous, up
+@section Native Efficiency
+
+You might think that using native methods all over the place would give
+our implementation of Java speed, speed, blinding speed.  You'd be
+thinking wrong.  Would you believe me if I told you that an empty
+@emph{interpreted} Java method is typically about three and a half times
+@emph{faster} than the equivalent native method?
+
+Bottom line: JNI is overhead incarnate.  In Sun's implementation, even
+the JNI functions you use once you get into Java are slow.
+
+A final problem is efficiency of native code when it comes to things
+like method calls, fields, finding classes, etc.  Generally you should
+cache things like that in static C variables if you're going to use them
+over and over again.  GetMethodID(), GetFieldID(), and FindClass() are
+@emph{slow}.  Classpath provides utility libraries for caching methodIDs
+and fieldIDs in @file{native/jni/classpath/jnilink.h}.  Other native data can
+be cached between method calls using functions found in
+@file{native/jni/classpath/native_state.h}.
+
+Here are a few tips on writing native code efficiently:
+
+Make as few native method calls as possible.  Note that this is not the
+same thing as doing less in native method calls; it just means that, if
+given the choice between calling two native methods and writing a single
+native method that does the job of both, it will usually be better to
+write the single native method.  You can even call the other two native
+methods directly from your native code and not incur the overhead of a
+method call from Java to C.
+
+Cache @code{jmethodID}s and @code{jfieldID}s wherever you can.  String
+lookups are 
+expensive.  The best way to do this is to use the 
+@file{native/jni/classpath/jnilink.h}
+library.  It will ensure that @code{jmethodID}s are always valid, even if the
+class is unloaded at some point.  In 1.1, jnilink simply caches a
+@code{NewGlobalRef()} to the method's underlying class; however, when 1.2 comes
+along, it will use a weak reference to allow the class to be unloaded
+and then re-resolve the @code{jmethodID} the next time it is used.
+
+Cache classes that you need to access often.  jnilink will help with
+this as well.  The issue here is the same as the methodID and fieldID
+issue--how to make certain the class reference remains valid.
+
+If you need to associate native C data with your class, use Paul
+Fisher's native_state library (NSA).  It will allow you to get and set
+state fairly efficiently.  Japhar now supports this library, making
+native state get and set calls as fast as accessing a C variable
+directly.
+
+If you are using native libraries defined outside of Classpath, then
+these should be wrapped by a Classpath function instead and defined
+within a library of their own.  This makes porting Classpath's native
+libraries to new platforms easier in the long run.  It would be nice
+to be able to use Mozilla's NSPR or Apache's APR, as these libraries
+are already ported to numerous systems and provide all the necessary
+system functions as well.
+
+@node Security,  , Native Efficiency, Programming Goals
+@comment  node-name,  next,  previous,  up
+@section Security
+
+Security is such a huge topic it probably deserves its own chapter.
+Most of the current code needs to be audited for security to ensure
+all of the proper security checks are in place within the Java
+platform, but also to verify that native code is reasonably secure and
+avoids common pitfalls, buffer overflows, etc.  A good source for
+information on secure programming is the excellent HOWTO by David
+Wheeler,
+@uref{http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/index.html,Secure
+Programming for Linux and Unix HOWTO}.
+
+@node API Compatibility, Specification Sources, Programming Goals, Top
+@comment  node-name,  next,  previous,  up
+@chapter API Compatibility
+
+@menu
+* Serialization::               Serialization
+* Deprecated Methods::          Deprecated methods
+@end menu
+
+@node Serialization, Deprecated Methods, API Compatibility, API Compatibility
+@comment  node-name,  next,  previous,  up
+@section Serialization
+
+Sun has produced documentation concerning much of the information
+needed to make Classpath serializable compatible with Sun
+implementations.  Part of doing this is to make sure that every class
+that is Serializable actually defines a field named serialVersionUID
+with a value that matches the output of serialver on Sun's
+implementation.  The reason for doing this is below.
+
+If a class has a field (of any accessibility) named serialVersionUID
+of type long, that is what serialver uses. Otherwise it computes a
+value using some sort of hash function on the names of all method
+signatures in the .class file.  The fact that different compilers
+create different synthetic method signatures, such as access$0() if an
+inner class needs access to a private member of an enclosing class,
+make it impossible for two distinct compilers to reliably generate the
+same serial #, because their .class files differ. However, once you
+have a .class file, its serial # is unique, and the computation will
+give the same result no matter what platform you execute on.
+
+Serialization compatibility can be tested using tools provided with
+@uref{http://www.kaffe.org/~stuart/japi/,Japitools}.  These
+tools can test binary serialization compatibility and also provide
+information about unknown serialized formats by writing these in XML
+instead.  Japitools is also the primary means of checking API
+compatibility for GNU Classpath with Sun's Java Platform.
+
+@node Deprecated Methods,  , Serialization, API Compatibility
+@comment  node-name,  next,  previous,  up
+@section Deprecated Methods
+
+Sun has a practice of creating ``alias'' methods, where a public or
+protected method is deprecated in favor of a new one that has the same
+function but a different name.  Sun's reasons for doing this vary; as
+an example, the original name may contain a spelling error or it may
+not follow Java naming conventions.
+
+Unfortunately, this practice complicates class library code that calls
+these aliased methods.  Library code must still call the deprecated
+method so that old client code that overrides it continues to work.
+But library code must also call the new version, because new code is
+expected to override the new method.
+
+The correct way to handle this (and the way Sun does it) may seem
+counterintuitive because it means that new code is less efficient than
+old code: the new method must call the deprecated method, and throughout
+the library code calls to the old method must be replaced with calls to
+the new one.
+
+Take the example of a newly-written container laying out a component and
+wanting to know its preferred size.  The Component class has a
+deprecated preferredSize method and a new method, getPreferredSize. 
+Assume that the container is laying out an old component that overrides
+preferredSize and a new component that overrides getPreferredSize.  If
+the container calls getPreferredSize and the default implementation of
+getPreferredSize calls preferredSize, then the old component will have
+its preferredSize method called and new code will have its
+getPreferredSize method called.
+
+Even using this calling scheme, an old component may still be laid out
+improperly if it implements a method, getPreferredSize, that has the
+same signature as the new Component.getPreferredSize.  But that is a
+general problem -- adding new public or protected methods to a
+widely-used class that calls those methods internally is risky, because
+existing client code may have already declared methods with the same
+signature.
+
+The solution may still seem counterintuitive -- why not have the
+deprecated method call the new method, then have the library always call
+the old method?  One problem with that, using the preferred size example
+again, is that new containers, which will use the non-deprecated
+getPreferredSize, will not get the preferred size of old components.
+
+@node Specification Sources, Naming Conventions, API Compatibility, Top
+@comment node-name, next, previous, up
+@chapter Specification Sources
+
+There are a number of specification sources to use when working on
+Classpath.  In general, the only place you'll find your classes
+specified is in the JavaDoc documentation or possibly in the
+corresponding white paper.  In the case of java.lang, java.io and
+java.util, you should look at the Java Language Specification.
+
+Here, however, is a list of specs, in order of canonicality:
+
+@enumerate
+@item
+@uref{http://java.sun.com/docs/books/jls/clarify.html,Clarifications and Amendments to the JLS - 1.1}
+@item
+@uref{http://java.sun.com/docs/books/jls/html/1.1Update.html,JLS Updates
+- 1.1}
+@item
+@uref{http://java.sun.com/docs/books/jls/html/index.html,The 1.0 JLS}
+@item
+@uref{http://java.sun.com/docs/books/vmspec/index.html,JVM spec - 1.1}
+@item
+@uref{http://java.sun.com/products/jdk/1.1/docs/guide/jni/spec/jniTOC.doc.html,JNI spec - 1.1}
+@item
+@uref{http://java.sun.com/products/jdk/1.1/docs/api/packages.html,Sun's javadoc - 1.1}
+(since Sun's is the reference implementation, the javadoc is
+documentation for the Java platform itself.)
+@item
+@uref{http://java.sun.com/products/jdk/1.2/docs/guide/jvmdi/jvmdi.html,JVMDI spec - 1.2},
+@uref{http://java.sun.com/products/jdk/1.2/docs/guide/jni/jni-12.html,JNI spec - 1.2}
+(sometimes gives clues about unspecified things in 1.1; if
+it was not specified accurately in 1.1, then use the spec
+for 1.2; also, we are using JVMDI in this project.)
+@item
+@uref{http://java.sun.com/products/jdk/1.2/docs/api/frame.html,Sun's javadoc - 1.2}
+(sometimes gives clues about unspecified things in 1.1; if
+it was not specified accurately in 1.1, then use the spec
+for 1.2)
+@item
+@uref{http://developer.java.sun.com/developer/bugParade/index.html,The
+Bug Parade}: I have obtained a ton of useful information about how
+things do work and how they *should* work from the Bug Parade just by
+searching for related bugs.  The submitters are very careful about their
+use of the spec.  And if something is unspecified, usually you can find
+a request for specification or a response indicating how Sun thinks it
+should be specified here.
+@end enumerate
+
+You'll notice that in this document, white papers and specification
+papers are more canonical than the JavaDoc documentation.  This is true
+in general.
+
+
+@node Naming Conventions, Character Conversions, Specification Sources, Top
+@comment node-name, next, previous, up
+@chapter Directory and File Naming Conventions
+
+The Classpath directory structure is laid out in the following manner:
+
+@example
+classpath
+ |
+ |---->java
+ |       |
+ |       |-->awt
+ |       |-->io
+ |       |-->lang
+ |       |-->util
+ |       |     |
+ |       |     |--->zip
+ |       |     |--->jar
+ |       |-->net
+ |       |-->etc
+ |
+ |---->gnu
+ |       |
+ |       |-->java
+ |             |
+ |             |-->awt
+ |             |-->lang
+ |             |-->util
+ |             |     |
+ |             |     |-->zip
+ |             |-->etc
+ |
+ |---->native
+         |
+         |-->jni
+         |    |-->classpath
+         |    |-->gtk-peer
+         |    |-->java-io
+         |    |-->java-lang
+         |    |-->java-net
+         |    |-->java-util
+         |    |-->etc
+         |-->cni
+  
+@end example
+
+Here is a brief description of the toplevel directories and their contents.
+
+@table @b
+
+@item java
+Contains the source code to the Java packages that make up the core
+class library.  Because this is the public interface to Java, it is
+important that the public classes, interfaces, methods, and variables
+are exactly the same as specified in Sun's documentation.  The directory
+structure is laid out just like the java package names.  For example,
+the class java.util.zip would be in the directory java-util.
+
+@item gnu/java
+Internal classes (roughly analogous to Sun's sun.* classes) should go
+under the @file{gnu/java} directory.  Classes related to a particular public
+Java package should go in a directory named like that package.  For
+example, classes related to java.util.zip should go under a directory
+@file{gnu/java/util/zip}.  Sub-packages under the main package name are
+allowed.  For classes spanning multiple public Java packages, pick an
+appropriate name and see what everybody else thinks.
+
+@item native
+This directory holds native code needed by the public Java packages.
+Each package has its own subdirectory, which is the ``flattened'' name
+of the package.  For example, native method implementations for
+java.util.zip should go in @file{native/classpath/java-util}.  Classpath
+actually includes an all Java version of the zip classes, so no native
+code is required.
+
+@end table
+
+Each person working on a package get's his or her own ``directory
+space'' underneath each of the toplevel directories.  In addition to the
+general guidelines above, the following standards should be followed:
+
+@itemize @bullet
+
+@item
+Classes that need to load native code should load a library with the
+same name as the flattened package name, with all hyphens removed.  For
+example, the native library name specified in LoadLibrary for
+java-util would be ``javautil''.
+
+@item
+Each package has its own shared library for native code (if any).
+
+@item
+The main native method implementation for a given method in class should
+go in a file with the same name as the class with a ``.c'' extension.
+For example, the JNI implementation of the native methods in
+java.net.InetAddress would go in @file{native/jni/java-net/InetAddress.c}.
+``Internal'' native functions called from the main native method can
+reside in files of any name.
+@end itemize
+
+@node Character Conversions, Localization, Naming Conventions, Top
+@comment node-name, next, previous, up
+@chapter Character Conversions
+
+Java uses the Unicode character encoding system internally.  This is a
+sixteen bit (two byte) collection of characters encompassing most of the
+world's written languages.  However, Java programs must often deal with
+outside interfaces that are byte (eight bit) oriented.  For example, a
+Unix file, a stream of data from a network socket, etc.  Beginning with
+Java 1.1, the @code{Reader} and @code{Writer} classes provide functionality
+for dealing with character oriented streams.  The classes 
+@code{InputStreamReader} and @code{OutputStreamWriter} bridge the gap
+between byte streams and character streams by converting bytes to 
+Unicode characters and vice versa.
+
+In Classpath, @code{InputStreamReader} and @code{OutputStreamWriter}
+rely on an internal class called @code{gnu.java.io.EncodingManager} to load
+translaters that perform the actual conversion.  There are two types of
+converters, encoders and decoders.  Encoders are subclasses of
+@code{gnu.java.io.encoder.Encoder}.  This type of converter takes a Java
+(Unicode) character stream or buffer and converts it to bytes using
+a specified encoding scheme.  Decoders are a subclass of 
+@code{gnu.java.io.decoder.Decoder}.  This type of converter takes a 
+byte stream or buffer and converts it to Unicode characters.  The
+@code{Encoder} and @code{Decoder} classes are subclasses of
+@code{Writer} and @code{Reader} respectively, and so can be used in
+contexts that require character streams, but the Classpath implementation
+currently does not make use of them in this fashion.
+
+The @code{EncodingManager} class searches for requested encoders and
+decoders by name.  Since encoders and decoders are separate in Classpath,
+it is possible to have a decoder without an encoder for a particular 
+encoding scheme, or vice versa.  @code{EncodingManager} searches the
+package path specified by the @code{file.encoding.pkg} property.  The
+name of the encoder or decoder is appended to the search path to
+produce the required class name.  Note that @code{EncodingManager} knows
+about the default system encoding scheme, which it retrieves from the
+system property @code{file.encoding}, and it will return the proper
+translator for the default encoding if no scheme is specified.  Also, the 
+Classpath standard translator library, which is the @code{gnu.java.io} package, 
+is automatically appended to the end of the path.
+
+For efficiency, @code{EncodingManager} maintains a cache of translators
+that it has loaded.  This eliminates the need to search for a commonly
+used translator each time it is requested.
+
+Finally, @code{EncodingManager} supports aliasing of encoding scheme names.
+For example, the ISO Latin-1 encoding scheme can be referred to as
+''8859_1'' or ''ISO-8859-1''.  @code{EncodingManager} searches for 
+aliases by looking for the existence of a system property called
+@code{gnu.java.io.encoding_scheme_alias.<encoding name>}.  If such a
+property exists.  The value of that property is assumed to be the
+canonical name of the encoding scheme, and a translator with that name is 
+looked up instead of one with the original name.
+
+Here is an example of how @code{EncodingManager} works.  A class requests
+a decoder for the ''UTF-8'' encoding scheme by calling
+@code{EncodingManager.getDecoder("UTF-8")}.  First, an alias is searched
+for by looking for the system property 
+@code{gnu.java.io.encoding_scheme_alias.UTF-8}.  In our example, this
+property exists and has the value ''UTF8''.  That is the actual
+decoder that will be searched for.  Next, @code{EncodingManager} looks
+in its cache for this translator.  Assuming it does not find it, it
+searches the translator path, which is this example consists only of
+the default @code{gnu.java.io}.  The ''decoder'' package name is 
+appended since we are looking for a decoder.  (''encoder'' would be 
+used if we were looking for an encoder).  Then name name of the translator
+is appended.  So @code{EncodingManager} attempts to load a translator
+class called @code{gnu.java.io.decoder.UTF8}.  If that class is found,
+an instance of it is returned.  If it is not found, a
+@code{UnsupportedEncodingException}.
+
+To write a new translator, it is only necessary to subclass 
+@code{Encoder} and/or @code{Decoder}.  Only a handful of abstract
+methods need to be implemented.  In general, no methods need to be
+overridden.  The needed methods calculate the number of bytes/chars
+that the translation will generate, convert buffers to/from bytes,
+and read/write a requested number of characters to/from a stream.
+
+Many common encoding schemes use only eight bits to encode characters.
+Writing a translator for these encodings is very easy.  There are 
+abstract translator classes @code{gnu.java.io.decode.DecoderEightBitLookup}
+and @code{gnu.java.io.encode.EncoderEightBitLookup}.  These classes
+implement all of the necessary methods.  All that is necessary to
+create a lookup table array that maps bytes to Unicode characters and
+set the class variable @code{lookup_table} equal to it in a static
+initializer.  Also, a single constructor that takes an appropriate
+stream as an argument must be supplied.  These translators are
+exceptionally easy to create and there are several of them supplied
+in the Classpath distribution.
+
+Writing multi-byte or variable-byte encodings is more difficult, but
+often not especially challenging.  The Classpath distribution ships with
+translators for the UTF8 encoding scheme which uses from one to three
+bytes to encode Unicode characters.  This can serve as an example of
+how to write such a translator.
+
+Many more translators are needed.  All major character encodings should
+eventually be supported.
+
+@node Localization,  , Character Conversions, Top
+@comment node-name, next, previous, up
+@chapter Localization
+
+There are many parts of the Java standard runtime library that must
+be customized to the particular locale the program is being run in.
+These include the parsing and display of dates, times, and numbers;
+sorting words alphabetically; breaking sentences into words, etc.
+In general, Classpath uses general classes for performing these tasks,
+and customizes their behavior with configuration data specific to a
+given locale.
+
+@menu
+* String Collation::            Sorting strings in different locales
+* Break Iteration::             Breaking up text into words, sentences, and lines
+* Date Formatting and Parsing::  Locale specific date handling
+* Decimal/Currency Formatting and Parsing::  Local specific number handling
+@end menu
+
+In Classpath, all locale specific data is stored in a 
+@code{ListResourceBundle} class in the package @code{gnu/java/locale}.
+The basename of the bundle is @code{LocaleInformation}.  See the
+documentation for the @code{java.util.ResourceBundle} class for details
+on how the specific locale classes should be named.
+
+@code{ListResourceBundle}'s are used instead of 
+@code{PropertyResourceBundle}'s because data more complex than simple
+strings need to be provided to configure certain Classpath components.
+Because @code{ListResourceBundle} allows an arbitrary Java object to
+be associated with a given configuration option, it provides the
+needed flexibility to accomodate Classpath's needs.
+
+Each Java library component that can be localized requires that certain
+configuration options be specified in the resource bundle for it.  It is
+important that each and every option be supplied for a specific 
+component or a critical runtime error will most likely result.
+
+As a standard, each option should be assigned a name that is a string.
+If the value is stored in a class or instance variable, then the option
+should name should have the name name as the variable.  Also, the value
+associated with each option should be a Java object with the same name
+as the option name (unless a simple scalar value is used).  Here is an
+example:
+
+A class loads a value for the @code{format_string} variable from the
+resource bundle in the specified locale.  Here is the code in the
+library class:
+
+@example
+  ListResourceBundle lrb = 
+    ListResourceBundle.getBundle ("gnu/java/locale/LocaleInformation", locale);
+  String format_string = lrb.getString ("format_string");
+@end example
+
+In the actual resource bundle class, here is how the configuration option
+gets defined:
+
+@example
+/**
+  * This is the format string used for displaying values
+  */
+private static final String format_string = "%s %d %i";
+
+private static final Object[][] contents =
+@{
+  @{ "format_string", format_string @}
+@};
+@end example
+
+Note that each variable should be @code{private}, @code{final}, and
+@code{static}.  Each variable should also have a description of what it
+does as a documentation comment.  The @code{getContents()} method returns
+the @code{contents} array.
+
+There are many functional areas of the standard class library that are
+configured using this mechanism.  A given locale does not need to support
+each functional area.  But if a functional area is supported, then all
+of the specified entries for that area must be supplied.  In order to
+determine which functional areas are supported, there is a special key
+that is queried by the affected class or classes.  If this key exists, 
+and has a value that is a @code{Boolean} object wrappering the
+@code{true} value, then full support is assumed.  Otherwise it is
+assumed that no support exists for this functional area.  Every class
+using resources for configuration must use this scheme and define a special
+scheme that indicates the functional area is supported.  Simply checking
+for the resource bundle's existence is not sufficient to ensure that a
+given functional area is supported.
+
+The following sections define the functional areas that use resources
+for locale specific configuration in GNU Classpath.  Please refer to the 
+documentation for the classes mentioned for details on how these values 
+are used.  You may also wish to look at the source file for 
+@file{gnu/java/locale/LocaleInformation_en} as an example.
+
+@node String Collation, Break Iteration, Localization, Localization
+@comment node-name, next, previous, up
+@section String Collation
+
+Collation involves the sorting of strings.  The Java class library provides
+a public class called @code{java.text.RuleBasedCollator} that performs
+sorting based on a set of sorting rules.
+
+@itemize @bullet
+@item RuleBasedCollator - A @code{Boolean} wrappering @code{true} to indicate
+that this functional area is supported.
+@item collation_rules - The rules the specify how string collation is to
+be performed.
+@end itemize
+
+Note that some languages might be too complex for @code{RuleBasedCollator}
+to handle.  In this case an entirely new class might need to be written in
+lieu of defining this rule string.
+
+@node Break Iteration, Date Formatting and Parsing, String Collation, Localization
+@comment node-name, next, previous, up
+@section Break Iteration
+
+The class @code{java.text.BreakIterator} breaks text into words, sentences,
+and lines.  It is configured with the following resource bundle entries:
+
+@itemize @bullet
+@item BreakIterator - A @code{Boolean} wrappering @code{true} to indicate
+that this functional area is supported.
+@item word_breaks - A @code{String} array of word break character sequences.
+@item sentence_breaks - A @code{String} array of sentence break character
+sequences.
+@item line_breaks - A @code{String} array of line break character sequences.
+@end itemize
+
+@node Date Formatting and Parsing, Decimal/Currency Formatting and Parsing, Break Iteration, Localization
+@comment node-name, next, previous, up
+@section Date Formatting and Parsing
+
+Date formatting and parsing is handled by the 
+@code{java.text.SimpleDateFormat} class in most locales.  This class is
+configured by attaching an instance of the @code{java.text.DateFormatSymbols}
+class.  That class simply reads properties from our locale specific
+resource bundle.  The following items are required (refer to the 
+documentation of the @code{java.text.DateFormatSymbols} class for details
+io what the actual values should be):
+
+@itemize @bullet
+@item DateFormatSymbols - A @code{Boolean} wrappering @code{true} to indicate
+that this functional area is supported.
+@item months - A @code{String} array of month names.
+@item shortMonths - A @code{String} array of abbreviated month names.
+@item weekdays - A @code{String} array of weekday names.
+@item shortWeekdays - A @code{String} array of abbreviated weekday names.
+@item ampms - A @code{String} array containing AM/PM names.
+@item eras - A @code{String} array containing era (ie, BC/AD) names.
+@item zoneStrings - An array of information about valid timezones for this 
+locale.
+@item localPatternChars - A @code{String} defining date/time pattern symbols.
+@item shortDateFormat - The format string for dates used by 
+@code{DateFormat.SHORT}
+@item mediumDateFormat - The format string for dates used by 
+@code{DateFormat.MEDIUM}
+@item longDateFormat - The format string for dates used by 
+@code{DateFormat.LONG}
+@item fullDateFormat - The format string for dates used by 
+@code{DateFormat.FULL}
+@item shortTimeFormat - The format string for times used by 
+@code{DateFormat.SHORT}
+@item mediumTimeFormat - The format string for times used by 
+@code{DateFormat.MEDIUM}
+@item longTimeFormat - The format string for times used by 
+@code{DateFormat.LONG}
+@item fullTimeFormat - The format string for times used by 
+@code{DateFormat.FULL}
+@end itemize
+
+Note that it may not be possible to use this mechanism for all locales.
+In those cases a special purpose class may need to be written to handle 
+date/time processing.
+
+@node Decimal/Currency Formatting and Parsing,  , Date Formatting and Parsing, Localization
+@comment node-name, next, previous, up
+@section Decimal/Currency Formatting and Parsing
+
+@code{NumberFormat} is an abstract class for formatting and parsing numbers.
+The class @code{DecimalFormat} provides a concrete subclass that handles
+this is in a locale independent manner.  As with @code{SimpleDateFormat},
+this class gets information on how to format numbers from a class that
+wrappers a collection of locale specific formatting values.  In this case,
+the class is @code{DecimalFormatSymbols}.  That class reads its default
+values for a locale from the resource bundle.  The required entries are:
+
+@itemize @bullet
+@item DecimalFormatSymbols - A @code{Boolean} wrappering @code{true} to 
+indicate that this functional area is supported.
+@item currencySymbol - The string representing the local currency.
+@item intlCurrencySymbol - The string representing the local currency in an
+international context.
+@item decimalSeparator - The character to use as the decimal point as a
+@code{String}.
+@item digit - The character used to represent digits in a format string,
+as a @code{String}.
+@item exponential - The char used to represent the exponent separator of a 
+number written in scientific notation, as a @code{String}.
+@item groupingSeparator - The character used to separate groups of numbers
+in a large number, such as the ``,'' separator for thousands in the US, as
+a @code{String}.
+@item infinity - The string representing infinity.
+@item NaN - The string representing the Java not a number value.
+@item minusSign - The character representing the negative sign, as a 
+@code{String}.
+@item monetarySeparator - The decimal point used in currency values, as a
+@code{String}.
+@item patternSeparator - The character used to separate positive and 
+negative format patterns, as a @code{String}.
+@item percent - The percent sign, as a @code{String}.
+@item perMill - The per mille sign, as a @code{String}.
+@item zeroDigit - The character representing the digit zero, as a @code{String}.
+@end itemize
+
+Note that several of these values are an individual character.  These should
+be wrappered in a @code{String} at character position 0, not in a
+@code{Character} object.
+
+@bye
+
Index: libjava/classpath/doc/cp-vmintegration.texinfo
===================================================================
--- libjava/classpath/doc/cp-vmintegration.texinfo	(revision 0)
+++ libjava/classpath/doc/cp-vmintegration.texinfo	(revision 124261)
@@ -0,0 +1,1980 @@
+\input texinfo @c -*-texinfo-*-
+
+@c %**start of header
+@setfilename vmintegration.info
+@settitle GNU Classpath VM Integration Guide
+@c %**end of header
+
+@setchapternewpage off
+
+@ifinfo
+This file contains important information you will need to know if you
+are going to write an interface between GNU Classpath and a Virtual
+Machine.
+
+Copyright (C) 1998-2002, 2004, 2005, 2006 Free Software Foundation, Inc.
+
+@ifnotplaintext
+@dircategory GNU Libraries
+@direntry
+* VM Integration: (vmintegration).   GNU Classpath VM Integration Guide
+@end direntry
+@end ifnotplaintext
+@end ifinfo
+
+@titlepage
+@title GNU Classpath VM Integration Guide
+@author John Keiser
+@author C. Brian Jones
+@author Mark Wielaard
+
+@page
+@vskip 0pt plus 1filll
+Copyright @copyright{} 1998-2002 Free Software Foundation, Inc.
+@sp 2
+Permission is granted to make and distribute verbatim copies of
+this document provided the copyright notice and this permission notice
+are preserved on all copies.
+
+Permission is granted to copy and distribute modified versions of this
+document under the conditions for verbatim copying, provided that the
+entire resulting derived work is distributed under the terms of a
+permission notice identical to this one.
+
+Permission is granted to copy and distribute translations of this manual
+into another language, under the above conditions for modified versions,
+except that this permission notice may be stated in a translation
+approved by the Free Software Foundation.
+
+@end titlepage
+
+@ifinfo
+@node Top, Introduction, (dir), (dir)
+@top GNU Classpath Hacker's Guide
+
+This file contains important information you will need to know if you
+are going to write an interface between GNU Classpath and a Virtual
+Machine.
+
+This document is incomplete, as we are still in alpha with the interface.
+
+@end ifinfo
+
+@menu
+* Introduction::                An introduction to the Classpath project
+* Initialization::              Initializing the classes
+* Classpath Hooks::             Hooks from Classpath to the VM
+* VM Hooks::                    Hooks from the underlying VM to Classpath
+* JNI Implementation::		Hooking the VM to jni.h
+* JVMTI Implementation::        Hooking the VM to jvmti.h
+* Miscellaneous VM Requirements::  
+@end menu
+
+@node Introduction, Initialization, Top, Top
+@comment node-name, next, previous, up
+@chapter Introduction
+
+The Classpath Project's ambition to be a 100% clean room implementation
+of the standard Java class libraries cannot be fulfilled without some
+level of integration with the Virtual Machine, the underlying machinery
+that actually runs Java.
+
+There are several VMs out there, here is a small list.
+
+@itemize @bullet
+@item @uref{http://www.hungry.com/old-hungry/products/japhar/,Japhar}
+Japhar was the first VM to use GNU Classpath.  Today you can see that
+sort of relationship in the source tree which denotes several Japhar
+specific files as a reference implementation of those pieces.  This VM
+has been primarily tested against Linux and lacks garbage collections, a
+JIT, and suffers recently from slow development.
+
+@item @uref{http://www.intel.com/research/mrl/orp/,Intel's Open Runtime Platform}
+Intel surprised us not long ago with the release of this rather advanced
+VM that uses GNU Classpath for a set of class libraries and works on
+Linux and Windows 2000.  As of June, 2004, it does not appear that ORP
+is under active development.
+
+@item @uref{http://www.sablevm.org/,SableVM}
+SableVM is a robust, extremely portable, efficient, and
+specifications-compliant Java Virtual Machine that aims to be easy to
+maintain and to extend. It features a state-of-the-art, efficient
+interpreter engine. Its source code is very accessible and easy to
+understand, and has many robustness features that have been the object
+of careful design.
+
+@item @uref{http://www.kaffe.org,Kaffe}
+Kaffe is an advanced VM and together with its own class libraries
+provides a Java 1.1 compatible environment.
+
+@item @uref{http://www.mozilla.org/projects/ef,Electrical Fire}
+The Electrical File VM continues to be listed as a Mozilla project
+though development has been somewhat quiet.  A number of concepts from
+EF were expected at one point to be rolled into Japhar, but that
+development has not occurred as of yet.
+
+@item @uref{http://latte.snu.ac.kr/,LaTTe}
+This VM project so far supports only Sun UltraSparc processors using the
+proprietary Solaris 2.5.1 or higher operating system.  LaTTe was derived
+from Kaffe but claims a number of improvements.
+
+@item @uref{http://gcc.gnu.org/java/,GNU Compiler for Java (GCJ)}
+This is a portable, optimizing, ahead-of-time compiler for the Java
+Programming Language. It can compile Java source code directly to native
+machine code, Java source code to Java bytecode (class files), and Java
+bytecode to native machine code. Compiled applications are linked with the
+GCJ runtime, libgcj which is based on the GNU Classpath code, which provides
+the core class libraries, a garbage collector, and a bytecode interpreter.
+libgcj can dynamically load and interpret class files, resulting in mixed
+compiled/interpreted applications.
+GCJ is part of the GNU Compiler Collection (@uref{http://gcc.gnu.org/,GCC}).
+On March 6 2000 the libgcj and GNU Classpath projects were officially merged
+and there is active work on merging all the classes between the projects.
+Licensed under GPL+exception, just as GNU Classpath is.
+
+@item @uref{http://kissme.sourceforge.net/,Kissme}
+This is a free Java Virtual Machine that is being developed on GNU/Linux
+and can run console Java applications.  Kissme also provides support for
+orthogonally persistent Java.
+@c I don't know what ``orthogonally persistent Java'' is, and I bet
+@c there are other people don't know either. -- Steve Augart, 4 June 2004
+
+@item @uref{http://jamvm.sourceforge.net/,JamVM}
+A simple, small bytecode interpreter that works out-of-the-box with
+pure GNU Classpath; it is emerging as the preferred platform for
+quickly testing a new build of GNU Classpath.  Licensed under the GPL.
+
+@item @uref{http://jikesrvm.sourceforge.net/,Jikes RVM}
+A free runtime environment for Java, written in Java.  Works
+out-of-the-box with pure GNU Classpath.  Features an optimizing JIT.
+Runs on the x86 and PowerPC architectures, on the AIX, Linux, and Mac
+OS/X operating systems.  Licensed under the CPL (Common Public
+License).  Extensively documented.  Actively developed as of June,
+2004.
+
+@end itemize
+
+In the past integration efforts were focused mainly on Japhar with an eye
+towards getting Electrical Fire to work.  Most information contained in
+this document is gleaned from these efforts. Recently more work has been
+done on getting gcj, orp and kissme to work out of the box with GNU Classpath
+but there is much to do before that becomes a reality.
+
+
+@node Initialization, Classpath Hooks, Introduction, Top
+@comment node-name, next, previous, up
+@chapter Initialization
+
+The order of initialization, as far as I can tell, doesn't matter just
+yet.  However, when we move to 1.2 support, it probably will matter, so
+we'll have a note in here at that time.
+
+The initialization order is currently documented in the
+@file{Runtime.java} source file.
+
+@node Classpath Hooks, VM Hooks, Initialization, Top
+@comment node-name, next, previous, up
+@chapter Classpath Hooks
+
+The primary method of interaction between Classpath and the VM is via
+the helper classes, which are named after the relevant core library
+class, but include an additional `VM' prefix.  The library classes from
+Classpath call out to these to get certain VM-specific dirty work done.
+A reference copy of each VM class exists.  The majority consist of a
+series of static methods, some of which are simply declared
+@code{native}, and some which provide a default implementation.  VMs may
+either use these as is, or create their own local variations.  When
+using the default implementations, the VM is responsible for
+implementing any of the code marked as @code{native} which corresponds
+to functionality they wish their VM to provide.  When using their own
+versions of the classes, VM implementors may choose to change the mix of
+native and non-native methods from that below, so as to best suit their
+implementation.
+
+@menu
+* java.lang::
+* gnu.classpath::
+* java.util::
+* java.io::
+* java.security::
+* java.net::
+* java.nio::
+* java.nio.channels::
+* gnu.java.nio::
+* java.lang.reflect::
+* gnu.java.lang::
+* gnu.java.lang.management::
+* java.lang.management::
+* Classpath Callbacks::
+@end menu
+
+@node java.lang, gnu.classpath, Classpath Hooks, Classpath Hooks
+@comment  node-name,  next,  previous,  up
+
+@section @code{java.lang}
+
+@code{java.lang} is the core Java package, being imported automatically by all
+classes.  It includes basic classes as @code{Object} and @code{String}.
+A VM must implement at least some parts of this package in order to
+become operable.
+
+@menu
+* java.lang.VMClass::
+* java.lang.VMObject::
+* java.lang.VMClassLoader::
+* java.lang.VMSystem::
+* java.lang.VMThrowable::
+* java.lang.VMCompiler::
+* java.lang.VMDouble::
+* java.lang.VMFloat::
+* java.lang.VMProcess::
+* java.lang.VMRuntime::
+* java.lang.VMString::
+* java.lang.VMThread::
+* java.lang.VMMath::
+@end menu
+
+@node java.lang.VMClass, java.lang.VMObject ,java.lang,java.lang
+@subsection @code{java.lang.VMClass}
+
+The core class, @code{java.lang.Class}, and the corresponding VM class,
+@code{java.lang.VMClass}, provide two main functions within GNU Classpath.
+
+@enumerate
+@item For basic VM operation, @code{java.lang.Class} provides the link between
+the Java-based representation of a class it embodies and the VM's own
+internal structure for a class.  @xref{VM Hooks}.
+
+@item As far as the user is concerned, the main function of
+@code{java.lang.Class} is as an entry point to the reflection
+facilities, and so it also provides this functionality, backed by the
+VM class.
+@end enumerate
+
+This VM class lists the following methods, organized by the version of the
+Java specification in which they occur.  All are @code{native}, unless
+otherwise specified, and pertain to reflection.  As a result, the VM only
+needs to implement these methods in order to provide reflection support,
+and then only to the degree required.
+
+@itemize @bullet
+@item 1.0
+@itemize @bullet
+@item @code{isInterface(Class)} -- This is simply a property test, and matches
+the presence of an appropriate flag within the class file.
+@item @code{getName(Class)} -- Returns the fully-qualified name of the class.
+@item @code{getSuperclass(Class)} -- Returns a @code{Class} instance which
+represents the superclass.  Again, the class file contains an element directly
+relating to this.  @code{null} is returned for primitives, interfaces and
+@code{Object}.
+@item @code{getInterfaces(Class)} -- Same as the above, but the implemented
+or extended interfaces rather than the superclass.  An empty array should
+be returned, rather than @code{null}.
+@item @code{getDeclaredClasses(Class,boolean)} -- Returns the internal classes
+this instance declares directly.  The flag determines whether or not the
+VM should filter out non-public classes.
+@item @code{getDeclaredFields(Class,boolean)} -- The same for fields.
+@item @code{getDeclaredMethods(Class,boolean)} -- And for methods.
+@item @code{getDeclaredConstructors(Class,boolean)} -- And constructors.
+@item @code{getClassLoader(Class)} -- Returns the @code{ClassLoader} instance
+which is responsible for the specified class.
+@item @code{forName(String, boolean, ClassLoader)} -- The VM should create a
+@code{Class} instance corresponding to the named class.  As noted in
+@ref{VM Hooks}, the internal content of the instance is the
+responsibility of the VM.  The supplied class loader is recorded as that
+which loaded the class, and the boolean specifies whether or not to
+run the class initializer.
+@item @code{isArray(Class)} -- Another property test, corresponding to a
+class file flag.
+@item @code{initialize(Class)} -- The VM should initialize the class fully,
+if it has not already done so.
+@item @code{loadArrayClass(String,ClassLoader)} -- This is called if
+@code{forName} returns @code{null} and the string specifies an array class.
+The specified array class should be loaded with the supplied class loader.
+@item @code{throwException(Throwable)} -- The VM should throw the supplied
+checked exception, without declaring it.
+@end itemize
+@item 1.1
+@itemize @bullet
+@item @code{isInstance(Class,Object)} -- This is a reflection-based equivalent
+of the @code{instanceof} operator.
+@item @code{isAssignableFrom(Class,Class)} -- Mainly a shorthand for the above,
+removing the need to create an instance to test assignability.  
+@item @code{isPrimitive(Class)} -- Returns true if this class is simply
+a representation of one of the primitive types: @code{boolean}, @code{byte},
+@code{char}, @code{short}, @code{int}, @code{long}, @code{float},
+@code{double} and @code{void}.
+@item @code{getComponentType(Class)} -- Produces a @code{Class} instance which
+represents the type of the members of the array the class instance represents.
+Classes which don't represent an array type return @code{null}.
+@item @code{getModifiers(Class,boolean)} -- Returns an integer which encodes
+the class' modifiers, such as @code{public}.  Again, this relates to
+information stored in the class file.
+@item @code{getDeclaringClass(Class)} -- Returns the class that declared
+an inner or member class, or @code{null} if the instance refers to a top-level
+class.
+@end itemize
+@item 1.5
+@itemize @bullet
+@item @code{isSynthetic(Class)} -- Returns true if the flags for this class
+mark it as synthetic.
+@item @code{isAnnotation(Class)} -- Returns true if the flags for this class
+mark it as an annotation.
+@item @code{isEnum(Class)} -- Returns true if the flags for this class
+mark it as an enumeration.
+@item @code{getSimpleName(Class)} -- Returns the simple name of the class.
+A default implementation is provided, but a more efficient version may instead
+be provided by the VM.
+@item @code{getCanonicalName(Class)} -- Returns the canonical name of the
+class.  A default implementation is provided, but a more efficient
+version may instead be provided by the VM.
+@item @code{getEnclosingClass(Class)} -- Returns the immediately enclosing
+class (null for a top-level class).
+@item @code{getEnclosingConstructor(Class)} -- Returns the constructor
+which immediately encloses the supplied class.
+@item @code{getEnclosingMethod(Class)} -- Returns the method
+which immediately encloses the supplied class.
+@item @code{getClassSignature(Class)} -- Returns the generic signature of
+the class or null if there isn't one.
+@item @code{isAnonymousClass(Class)} -- Returns true if the class is an
+anonymous class.
+@item @code{isLocalClass(Class)} -- Returns true if the class is an
+local class.
+@item @code{isMemberClass(Class)} -- Returns true if the class is an
+member class.
+@end itemize
+@end itemize
+
+@node java.lang.VMObject, java.lang.VMClassLoader, java.lang.VMClass, java.lang
+@subsection @code{java.lang.VMObject}
+
+@code{VMObject} is the bridge between the low level @code{Object}
+facilities such as making a clone, getting the class of the object and
+the wait/notify semantics.  This is accomplished using the following
+@code{native} methods.
+
+@itemize @bullet
+@item @code{getClass(Object)} -- Returns the @code{Class} instance for the
+object.  @code{Class} objects are produced by the VM, as described in
+@ref{VM Hooks}.
+@item @code{clone(Cloneable)} -- The VM should produce a low-level clone of the
+specified object, creating a field-by-field shallow copy of the original.
+The only difference between the two is that the new object should still be
+@code{finalizable}, even if the original is not.
+@item @code{notify(Object)} -- The VM should choose one of the threads waiting
+for a lock on the specified object arbitrarily, and wake it.  If the current
+thread does not currently hold the lock on the object, then an
+@code{IllegalMonitorStateException} should be thrown.
+@item @code{notifyAll(Object)} -- Same as the above, but all threads are
+awakened.
+@item @code{wait(Object,long,int)} -- The VM should set the current thread
+into a waiting state, which persists until it receives a notify signal or the
+specified time (in milliseconds and nanoseconds) is exceeded.  The nanoseconds
+restriction may be ignored if such granularity is not available, and a
+@code{IllegalMonitorStateException} should be thrown if the current thread
+doesn't own the object.
+@end itemize
+
+@node java.lang.VMClassLoader, java.lang.VMSystem, java.lang.VMObject, java.lang
+@subsection @code{java.lang.VMClassLoader}
+@code{VMClassLoader} provides methods for defining and resolving core and
+primitive classes, as well as handling resources, packages and assertions.
+The class is a mixture of @code{native} methods and Java-based
+implementations, with some of the latter being @emph{stubs}.
+
+@itemize @bullet
+@item Native Methods
+@itemize @bullet
+@item @code{defineClass(ClassLoader,String,byte[],int,int,ProtectionDomain)}
+-- The VM should create a @code{Class} instance from the supplied byte array.
+@item @code{resolveClass(Class)} -- Resolve references to other classes in the
+supplied class.
+@item @code{loadClass(name,boolean)} -- Load a class using the bootstrap
+loader.
+@item @code{getPrimitiveClass(char)} -- The VM should provide a @code{Class}
+implementation for one of the primitive classes.  The supplied character
+matches the JNI code for the primitive class e.g. `B' for byte and
+`Z' for boolean.
+@end itemize
+@item Java Methods
+@itemize @bullet
+@item @code{getResource(String)} -- The default implementation calls
+@code{getResources} and returns the first element in the returned enumeration,
+or @code{null} if there are no elements.
+@item @code{getResources(String)} -- By default, this compiles a list of
+URLs via the boot class path.  Any matching files within a zip file are added,
+and directories on the boot class path are automatically converted to file
+URLs that refer to join the directory with the resource name (whether or not
+it actually exists).
+@item @code{getPackage(String)} -- Always returns null, which may be suitable
+if the VM does not wish to return a @code{Package} implementation. Otherwise,
+it may be necessary to make this a @code{native} method.
+@item @code{getPackages()} -- As with the last, a default stub implementation
+exists (returning an empty array) which may be replaced if support is
+required. 
+@item @code{defaultAssertionStatus()} -- A stub which can be implemented
+by VMs providing assertion support.  At present, it always returns @code{true}.
+@item @code{packageAssertionStatus()} -- Much the same status as the above.
+The method should return a map converting package names to boolean status
+values.  The stub implementation provides an empty map.
+@item @code{classAssertionStatus()} -- Same as the last, but for classes.
+@item @code{getSystemClassLoader()} -- The default calls @code{ClassLoader}
+to create a new auxillary class loader with a system and extension class
+loader.  The VM may wish to replace it if it wishes to supply its own custom
+system class loader.
+@end itemize
+@end itemize
+@node java.lang.VMSystem, java.lang.VMThrowable, java.lang.VMClassLoader, java.lang
+@subsection @code{java.lang.VMSystem}
+@code{VMSystem} handles the default I/O streams, provides access to the
+system clock and environment variables and provides methods for
+@code{System.arraycopy} and the @code{identityHashCode} of an
+@code{Object}.  It consists of @code{native} methods, but the default
+implementation also provides some helper methods to simplify stream
+creation.  
+
+@itemize @bullet
+@item Native Methods
+@itemize @bullet
+@item @code{arraycopy(Object,int,Object,int,int)} -- The VM should copy
+a specified number of array objects from one array to another, with 
+appropriate checks for compatible typing, available elements and space.
+The VM should be able to perform this more efficiently using native code
+and direct memory manipulation than would have been achieved by using Java.
+@item @code{identityHashCode(Object)} -- This is the hashcode for
+@code{Object}, which relates to the actual location of the object in memory.
+@item @code{setIn(InputStream)} -- Set the system input stream.
+@item @code{setOut(PrintStream)} -- Set the system output stream.
+@item @code{setErr(PrintStream)} -- Set the system error stream.
+@item @code{currentTimeMillis()} -- Gets the system time in milliseconds.
+@item @code{getenv(String)} -- Returns the value of the specified environment
+variable.
+@item @code{getenv()} -- Returns a list of `name=value' pairs which correspond
+to the environment variables.
+@end itemize
+@item Java Methods
+@itemize @bullet
+@item @code{makeStandardInputStream()} -- Helps provide the functionality of
+@code{System.in} by wrapping the appropriate file descriptor in a
+buffered file input stream.  VMs may choose to create the stream from
+the descriptor differently rather than using this method.
+@item @code{makeStandardOutputStream()} -- Helps provide the functionality of
+@code{System.out} by wrapping the appropriate file descriptor in a buffered
+file output stream.  VMs may choose to create the stream from the descriptor
+differently rather than using this method.
+@item @code{makeStandardErrorStream()} -- Helps provide the functionality of
+@code{System.err} by wrapping the appropriate file descriptor in a buffered
+file output stream.  VMs may choose to create the stream from the descriptor
+differently rather than using this method.
+@end itemize
+@end itemize
+
+Classpath also provides native implementations of
+
+@itemize @bullet
+@item @code{setIn(InputStream)} 
+@item @code{setOut(PrintStream)} 
+@item @code{setErr(PrintStream)} 
+@item @code{currentTimeMillis()} 
+@item @code{getenv(String)}
+@end itemize
+
+making a VM implementation optional.
+
+@node java.lang.VMThrowable, java.lang.VMCompiler, java.lang.VMSystem, java.lang
+@subsection @code{java.lang.VMThrowable}
+@code{VMThrowable} is used to hold the VM state of a throwable, created either
+when a @code{Throwable} is created or the @code{fillInStackTrace()} method is
+called (i.e. when the actual stack trace is needed, as a lot of exceptions are
+never actually used).  The actual class has two @code{native} methods,
+one (@code{fillInStackTrace()}) being a method of the class used to obtain
+instances, and the other an instance method, @code{getStackTrace()}.
+@itemize @bullet
+@item @code{fillInStackTrace(Throwable)} -- The VM should return the current
+execution state of the @code{Throwable} in the form of a @code{VMThrowable}
+instance.  The VM may also return @code{null} if it does not support this
+functionality.
+@item @code{getStackTrace()} -- This is used to create a real
+@code{StackTraceElement} array for the exception, using the state data
+stored during creation of the instance.
+@end itemize
+
+@node java.lang.VMCompiler, java.lang.VMDouble, java.lang.VMThrowable, java.lang
+@subsection @code{java.lang.VMCompiler}
+
+@code{VMCompiler} provides an interface for VMs which wish to provide
+JIT compilation support.  The default implementation is simply a series
+of stubs. The property, @code{java.compiler}, should point to a library
+containing the function @code{java_lang_Compiler_start()} if such support
+is to be provided.
+
+@itemize @bullet
+@item @code{compileClass(Class)} -- Invoke the compiler to compile the specific
+class, returning @code{true} if successful.
+@item @code{compileClasses(String)} -- The compiler should compile the classes
+matching the specified string, again returning @code{true} on success.
+@item @code{command(Object)} -- The object represents a command given to the
+compiler, and is specific to the compiler implementation.
+@item @code{enable} -- Enable the operation of the compiler.
+@item @code{disable} -- Disable compiler operation.
+@end itemize
+
+@node java.lang.VMDouble, java.lang.VMFloat, java.lang.VMCompiler, java.lang
+@subsection @code{java.lang.VMDouble}
+
+@code{VMDouble} provides native support for the conversion and parsing
+of doubles.
+
+@itemize @bullet
+@item @code{doubleToLongBits(double)} -- Converts the double to the IEEE 754
+bit layout, collapsing NaNs to @code{0x7ff8000000000000L}.
+@item @code{doubleToRawLongBits(double)} -- Same as the above, but preserves
+NaNs.
+@item @code{longBitsToDouble(long)} -- This is the inverse of the last method,
+preserving NaNs so that the output of one can be fed into the other without
+data loss.
+@item @code{toString(double,boolean)} -- Converts the double to a string,
+giving a shorter value if the flag @code{isFloat} is @code{true}, indicating
+that the conversion was requested by @code{java.lang.Float} rather than
+@code{java.lang.Double}.
+@item @code{initIDs} -- Used by JNI-based solutions to initialize the cache
+of the static field IDs.  The default @code{VMDouble} implementation has a
+static initializer which loads the JNI library and calls this method.
+@item @code{parseDouble} -- Turn the string into a usable double value.
+@end itemize
+
+Classpath provides native implementations of all these, making VM
+implementation optional.
+
+@node java.lang.VMFloat, java.lang.VMProcess, java.lang.VMDouble, java.lang
+@subsection @code{java.lang.VMFloat}
+
+@code{VMFloat} provides native support for the conversion of floats.
+
+@itemize @bullet
+@item @code{floatToIntBits(float)} -- Converts the float to the IEEE 754
+bit layout, collapsing NaNs to @code{0x7fc00000}.
+@item @code{floatToRawIntBits(float)} -- Same as the above, but preserves
+NaNs.
+@item @code{intBitsToFloat(int)} -- This is the inverse of the last method,
+preserving NaNs so that the output of one can be fed into the other without
+data loss.
+@end itemize
+
+Classpath provides native implementations of all these, making VM
+implementation optional.
+
+@node java.lang.VMProcess, java.lang.VMRuntime, java.lang.VMFloat, java.lang
+@subsection @code{java.lang.VMProcess}
+
+@code{VMProcess} handles the execution of external processes.  In the
+default implementation, threads are spawned and reaped by @code{ProcessThread}.
+A constructor creates a new @code{VMProcess}, which extends rather than
+complements @code{Process}, using an array of arguments, an array of
+environment variables and a working directory.  The instance maintains
+system input, output and error streams linked to the external process.
+Three @code{native} methods are used, and implementations are provided
+for all three by Classpath, making VM implementation optional.  These use
+the POSIX functions, @code{fork()}, @code{waitpid()} and @code{kill()}.
+
+@itemize @bullet
+@item @code{nativeSpawn(String[],String[],File,boolean)} -- The VM should
+create a new process which uses the specified command-line arguments,
+environment variables and working directory.  Unlike the other two
+methods, this method is linked to an instance, and must call
+@code{setProcessInfo()} with the results before returning.  The
+boolean argument maps to the @code{redirectErrorStream} property of
+@code{java.lang.ProcessBuilder}.  When true, the output and error streams
+are merged.
+@item @code{nativeReap()} -- This is called to perform a reap of any
+zombie processes, and should not block, instead returning a boolean as to
+whether reaping actually took place.
+@item @code{nativeKill(long)} -- The VM should terminate the specified PID.
+@end itemize
+
+@node java.lang.VMRuntime, java.lang.VMString, java.lang.VMProcess, java.lang
+@subsection @code{java.lang.VMRuntime}
+
+The @code{VMRuntime} class provides a series of native methods
+which divulge information about the runtime or invoke certain
+operations.  This includes retrieving the amount of available memory,
+and scheduling the garbage collector.  There are two exceptions: the
+@code{enableShutdownHooks} method, which allows the VM to put in its own
+shutdown hooks when @code{Runtime.addShutdownHook()} is first invoked,
+and @code{exec(String[],String[],File)} which spawns an external process.
+These are Java-based static methods instead.  The first is simply a stub by
+default, while the second simply links to the functionality of
+@code{VMProcess} (and should be changed if a different @code{Process}
+implementation is used).
+
+@itemize @bullet
+@item @code{availableProcessors()} -- Returns the number of processors 
+available to the VM.
+@item @code{freeMemory()} -- Returns the amount of memory the VM has available
+on the heap for allocating.
+@item @code{totalMemory()} -- Returns the size of the heap.
+@item @code{maxMemory()} -- Returns the maximum memory block the VM will
+attempt to allocate.  May be simply @code{Long.MAX_VALUE} (8 exabytes!)
+@item @code{gc()} -- Allows users to explicitly invoke the garbage collector.
+This is a suggestion to the VM, rather than a command, and the garbage
+collector should run anyway @emph{without} it being invoked.
+@item @code{runFinalization()} -- Like the above, but related to the
+finalilzation of objects rather than the garbage collector.
+@item @code{runFinalizationForExit()} -- Called immediately prior to VM
+shutdown in order to finalize all objects (including `live' ones)
+@item @code{traceInstructions(boolean)} -- This turns on and off the optional
+VM functionality of printing a trace of executed bytecode instructions.
+@item @code{traceMethodCalls(boolean)} -- This turns on and off the optional
+VM functionality of printing a trace of methods called.
+@item @code{runFinalizersOnExit(boolean)} -- A toggleable setting for
+running the finalization process at exit.
+@item @code{exit(int)} -- The VM should shutdown with the specified exit code.
+@item @code{nativeLoad(String,ClassLoader)} -- Attempts to load a file,
+returning an integer which is non-zero for success.  Nothing happens if the
+file has already been loaded.
+@item @code{mapLibraryName(String)} -- The VM should map the system-independent
+library name supplied to the platform-dependent equivalent (e.g. a @code{.so}
+or @code{.dll} file)
+@end itemize
+
+@node java.lang.VMString, java.lang.VMThread, java.lang.VMRuntime, java.lang
+@subsection @code{java.lang.VMString}
+@code{VMString} is responsible for handling interned strings.  If two strings
+are equal (using the @code{equals()} method), then the results of calling
+the @code{intern()} method on each of them makes them equal
+(using @code{==}).  Thus, the same string object is always returned by
+@code{intern} if the two strings are equal.  The default implementation
+is Java-based and implements @code{intern(String)} by maintaining a
+@code{WeakHashMap} which links the strings to their @code{WeakReference}.
+A new mapping is created for each new string being @code{intern}ed.  
+A VM may implement this differently by implementing this method,
+which is @code{static} and the only one in @code{VMString}.
+
+@node java.lang.VMThread, java.lang.VMMath, java.lang.VMString, java.lang
+@subsection @code{java.lang.VMThread}
+
+@code{VMThread} provides the link between Java's threads and the platform
+threading support.  A @code{VMThread} is created via a private constructor
+and linked to a @code{Thread} instance.  This occurs when the @code{Thread}
+instance is started by the static @code{create(Thread,long)} method (the second
+argument requests a certain stack size, usually zero).  The thread itself is
+executed via the @code{run()} method, which handles any problems with the
+running of the thread and its eventual death.
+
+@code{VMThread} provides the following accessors and mutators for accessing
+the thread state via @code{VMThread},
+
+@itemize @bullet
+@item @code{getName()}
+@item @code{setName(String)}
+@item @code{getPriority()}
+@item @code{setPriotity(int)}
+@item @code{isDaemon()}
+@end itemize
+
+all of which refer to the @code{Thread} instance. @code{setPriority(int)} also
+calls the appropriate native method.  @code{stop(Throwable)} similarly wraps
+a native method, merely adding in a check for the state of the thread.
+
+The default implementation also provides Java-based implementations of
+@code{join(long,int)}, @code{sleep(long,int)} and
+@code{holdsLock(Object)}.  @code{join} and @code{sleep} simply wait for
+the appropriate amount of time, with @code{join} additionally waiting
+for the thread instance to become @code{null}.  @code{holdsLock} simply
+checks if an object is locked by the current thread by trying to invoke
+the @code{notify} method, and catching the failing exception if this is
+not the case.
+
+The remainder of the class is a series of @code{native} methods, some of
+which are mandatory for VM implementation and others which provide optional
+or deprecated functionality.
+
+@itemize @bullet
+@item Mandatory Instance Methods
+@itemize @bullet
+@item @code{start(long)} -- The VM should create the native thread and start
+it running using the @code{run} method of the @code{VMThread} instance on
+which this method is called.
+@item @code{interrupt()} -- The VM should interrupt the running thread and
+throw an appropriate exception.
+@item @code{isInterrupted()} -- Checks the interrupted state of the thread.
+@item @code{suspend()} -- The thread should be suspended until resumed.
+@item @code{resume()} -- The thread should be resumed from its suspended state.
+This pair of methods are deprecated, due to the possibility of a deadlock
+occuring when a thread with locks is suspended.
+@item @code{nativeSetPriority(int)} -- Called by @code{setPriority}
+to allow the setting to flow down to the native thread.
+@item @code{nativeStop(Throwable)} -- The VM should stop the thread abnormally
+and throw the specified exception.  This is clearly deprecated, due to the
+ambiguous state an abruptly-stopped thread may leave.
+@item @code{getState()} -- Returns the VM's impression of the current state
+of the thread.  The applicable states are supplied by the @code{State}
+enumeration in @code{java.lang.Thread}.
+@end itemize
+@item Mandatory Class Methods
+@itemize @bullet
+@item @code{currentThread()} -- Return a reference to the thread currently
+being executed.
+@item @code{yield()} -- The VM should allow some other thread to run.
+The current thread maintains its locks even though it stops executing for
+the time being.
+@item @code{interrupted()} -- A shortcut to obtaining the interrupted state
+of the current thread.
+@end itemize
+@item Other Methods
+@itemize @bullet
+@item @code{countStackFrames()} -- Returns a count of the number of stack
+frames in the thread.  This depends on the deprecated method @code{suspend()}
+having returned true, and is thus deprecated as a result.
+@end itemize
+@end itemize
+
+@node java.lang.VMMath,, java.lang.VMThread, java.lang
+@subsection @code{java.lang.VMMath}
+
+The @code{VMMath} class provides a series of native methods
+for some of the mathematical functions present in @code{java.lang.Math}.
+Classpath provides a default implementation of these which maps the
+functions to those provided by @code{fdlibm}.  VM implementors are welcome
+to replace this with more efficent implementations, as long as the accuracy
+contract of these methods, specified in @code{java.lang.Math}, is maintained.
+
+@itemize @bullet
+@item 1.0
+@itemize @bullet
+@item @code{sin(double)} -- Returns the sine value for the given angle.
+@item @code{cos(double)} -- Returns the cosine value for the given angle.
+@item @code{tan(double)} -- Returns the tangent value for the given angle.
+@item @code{asin(double)} -- Returns the arc sine value for the given angle.
+@item @code{acos(double)} -- Returns the arc cosine value for the given angle.
+@item @code{atan(double)} -- Returns the arc tangent value for the given angle.
+@item @code{atan2(double,double)} -- Returns the arc tangent of the ratio of
+the two arguments.
+@item @code{exp(double)} -- Returns the exponent raised to the given power.
+@item @code{log(double)} -- Returns the natural logarithm for the given value.
+@item @code{sqrt(double)} -- Returns the square root of the value.
+@item @code{pow(double,double)} -- Returns x to the power of y.
+@item @code{IEEEremainder(double,double)} -- Returns the IEEE 754 remainder
+for the two values.
+@item @code{ceil(double)} -- Returns the nearest integer >= the value.
+@item @code{floor(double)} -- Returns the nearest integer <= the value.
+@item @code{rint(double)} -- Returns the nearest integer or the even one
+if the distance between the two is equal.
+@end itemize
+@item 1.5
+@itemize @bullet
+@item @code{cbrt(double)} -- Returns the cube root of the value.
+@item @code{cosh(double)} -- Returns the hyperbolic cosine value for the given
+angle.
+@item @code{expm1(double)} -- Returns the exponent of the value minus one.
+@item @code{hypot(double,double)} -- Returns the hypotenuse corresponding to
+x and y.
+@item @code{log10(double)} -- Returns the base 10 logarithm of the given value.
+@item @code{log1p(double)} -- Returns the natural logarithm of the value plus
+one.
+@item @code{sinh(double)} -- Returns the hyperbolic sine value for the given
+angle.
+@item @code{tanh(double)} -- Returns the hyperbolic tangent value for the given angle.
+@end itemize
+@end itemize
+
+@node gnu.classpath, java.util, java.lang, Classpath Hooks
+@section @code{gnu.classpath}
+
+The @code{gnu.classpath} package provides Classpath-specific functionality,
+primarily relating to the features in @code{java.lang}.  At present, this
+includes the context of a class (the stack) and the system properties.
+
+@menu
+* gnu.classpath.VMStackWalker::
+* gnu.classpath.VMSystemProperties::
+* gnu.classpath.Unsafe::
+@end menu
+
+@node gnu.classpath.VMStackWalker,gnu.classpath.VMSystemProperties,gnu.classpath,gnu.classpath
+@subsection @code{gnu.classpath.VMStackWalker}
+
+@code{VMStackWalker} provides access to the class context or stack.  The
+default implementation consists of a @code{native} @code{static} method,
+@code{getClassContext()}, which obtains the class context, and two helper
+methods which obtain the calling class (the 3rd element in the context array)
+and its class loader, respectively.
+
+@itemize @bullet
+@item @code{getClassContext()} -- The VM should return an array of
+@code{Class} objects, each of which relates to the method currently being
+executed at that point on the stack.  Thus, the first item (index 0) is the
+class that contains this method.
+@item @code{getCallingClass()} -- A Java-based helper method which returns
+the @code{Class} object which contains the method that called the method
+accessing @code{getCallingClass()}. 
+@item @code{getCallingClassLoader()} -- Like the last, but returning the class
+loader of the class.
+@end itemize
+
+@node gnu.classpath.VMSystemProperties,gnu.classpath.Unsafe,gnu.classpath.VMStackWalker,gnu.classpath
+@subsection @code{gnu.classpath.VMSystemProperties}
+
+@code{VMSystemProperties} allows the VM to hook into the property creation
+process, both before and after the system properties are added by GNU
+Classpath.  The default implementation assumes that the VM will add its
+properties first, by making the pre-initialisation method @code{native},
+and that the Classpath properties may then be altered by a Java-based
+post-initialisation method.
+
+As these methods are called as part of the bootstrap process, caution should
+be used as to what classes are used, and properties should only be set
+using @code{Properties.setProperty()}.  Specifically, I/O classes should be
+avoided at this early stage.
+
+@itemize @bullet
+@item @code{preInit(Properties)} -- Allows the VM to add properties
+@emph{before} the Classpath properties are added. The default implementation
+includes a full list of properties that @emph{must} be added by the VM, but
+additional VM-specific ones may also be added.  
+@item @code{postInit(Properties)} -- Same as the last, but called after the
+Classpath properties have been added.  The main purpose of this is to allow
+the VM to alter the properties added by GNU Classpath to suit it.
+@end itemize
+
+@node gnu.classpath.Unsafe,,gnu.classpath.VMSystemProperties,gnu.classpath
+@subsection @code{gnu.classpath.Unsafe}
+
+The @code{Unsafe} class provides access to some low-level unsafe operations
+as required by the addition of the java.util.concurrent classes.  These
+focus on direct memory access to the fields within the VM and providing
+atomic update methods.
+
+@itemize @bullet
+@item @code{objectFieldOffset(Field)} -- Provides the caller with the memory
+offset of a particular field.
+@item @code{compareAndSwap*(Object,long,*,*)} -- One of these methods is
+provided for each of int, long and Object (hence the *s).  The value of
+a field pointed to by the given Object and offset is compared with the
+first value and replaced with the second if they are the same.  The reason
+for this method is to make this change operation atomic.
+@item @code{put/get*(Object,long,*)} -- These are like the last set of
+methods, handling integers, longs and Objects, but the field is always
+changed on a put.  Different methods are provided for different semantics.
+Ordered variants perform a lazy put, in that the change does not
+immediately propogate to other threads, while the others provide
+volatile or 'normal' semantics.
+@item @code{arrayBaseOffset(Class)} and @code{arrayIndexScale(Class)} --
+These two methods allow an array class to be traversed by pointer
+arithmetic, by gaining the address of the first element and then
+scaling appropriately for the later ones.
+@item @code{park(boolean,long)} and @code{unpark(Thread)} -- These methods
+block and unblock threads respectively, with an optional timeout being
+provided for the blocking.  @code{unpark} is unsafe as the thread may have
+been destroyed by native code. 
+@end itemize
+
+@node java.util, java.io, gnu.classpath, Classpath Hooks
+@section java.util
+
+The @code{java.util} VM hooks provide links between the mix of functionality
+present in that package, which includes collections, date and time handling
+and parsing.  At present, there is only one hook, which connects GNU Classpath
+to the timezone information provided by the underlying platform.
+
+@menu
+* java.util.VMTimeZone::
+@end menu
+
+@node java.util.VMTimeZone,,java.util,java.util
+@subsection @code{java.util.VMTimeZone}
+
+@code{VMTimeZone} joins @code{TimeZone} to the platform timezone information
+via the static method, @code{getDefaultTimeZoneId()}.  The VM hook is
+expected to return a @code{TimeZone} instance that represents the current
+timezone in use by the platform.  The default implementation provides
+this functionality for POSIX or GNU-like systems, and VMs that want this
+functionality can keep this implementation and implement the native
+method, @code{getSystemTimeZoneId()}.  This method is only called when
+obtaining the timezone name from the @code{TZ} environment variable,
+@code{/etc/timezone} and @code{/etc/localtime} all fail.  This fallback
+mechanism also means that a system which doesn't provide the above three
+methods, but does provide a timezone in string form, can still use this
+implementation.
+
+@node java.io, java.security, java.util, Classpath Hooks
+@section java.io
+
+The @code{java.io} package is heavily reliant on access to the I/O facilities
+of the underlying platform.  As far as its VM hooks go, they provide two
+areas of functionality to GNU Classpath, these being
+
+@itemize @bullet
+@item File and directory queries and manipulation
+@item Serialization of objects
+@end itemize
+
+The first corresponds directly to most of the @code{File} class, while
+the latter underlies the functionality provided by the
+@code{ObjectInputStream} and @code{ObjectOutputStream}.  More low-level I/O
+is provided by @ref{java.nio}.
+
+@menu
+* java.io.VMFile::
+* java.io.VMObjectInputStream::
+* java.io.VMObjectStreamClass::
+@end menu
+
+@node java.io.VMFile,java.io.VMObjectInputStream,java.io,java.io
+@subsection @code{java.io.VMFile}
+
+@code{VMFile} allows GNU Classpath's @code{File} representations to
+probe and modify the file system using the native functions of the
+platform.  The default implementation (which consists of both a
+@code{VMFile} class and the native methods) is primarily UNIX-centric,
+working with POSIX functions and assuming case-sensitive filenames,
+without the restriction of the 8.3 format.  It consists mainly of
+@code{static} @code{native} methods, with a few Java helper methods.
+The native methods represent the file as a string containing its path,
+rather than using the object itself.
+
+@itemize @bullet
+@item Native Methods
+@itemize @bullet
+@item @code{lastModified(String)} -- The native method should return a
+@code{long} value that represents the last modified date of the file.
+@item @code{setReadOnly(String)} -- Sets the file's permissions to read only,
+in whichever way this is realised by the platform.
+@item @code{create(String)} -- Create the named file.
+@item @code{list(String)} -- The native method opens the named directory,
+reads the contents and returns them as a Java @code{String} array.
+@item @code{renameTo(String,String)} -- Renames the first file to the second.
+@item @code{length(String)} -- Returns a @code{long} value representing
+the file size.
+@item @code{exists(String)} -- Tests for the existence of the named file
+or directory.
+@item @code{delete(String)} -- Deletes the file or directory.
+@item @code{setLastModified(String,long)} -- Change the last modified time.
+@item @code{mkdir(String)} -- Creates the named directory.
+@item @code{isFile(String)} -- Tests that the named path references a file.
+@item @code{canWrite(String)} -- Tests that the file can be written to.
+This method is @code{synchronized}, so the object is locked during the check.
+@item @code{canRead(String)} -- Complement of the last method.
+@item @code{isDirectory(String)} -- Tests that the named path references
+a directory.
+@end itemize
+@item Java Helper Methods
+@itemize @bullet
+@item @code{canWriteDirectory(File)} -- Checks that the directory can be
+written to, by trying to create a temporary file in it.
+@item @code{listRoots()} -- Returns the root of a GNU filesystem i.e. `/'
+in an array.
+@item @code{isHidden(String)} -- Checks whether the file starts with `.',
+which is how files are hidden on UNIX-style systems.
+@item @code{getName(String)} -- Pulls the actual filename from the end of
+the path, by breaking off the characters after the last occurrence of the
+platform's file separator.
+@item @code{getCanonicalForm(String)} -- This converts a UNIX path to
+its canonical form by removing the `.' and `..' sections that occur within.
+@end itemize
+@end itemize
+
+@node java.io.VMObjectInputStream,java.io.VMObjectStreamClass,java.io.VMFile,java.io
+@subsection @code{java.io.VMObjectInputStream}
+
+This class consists of two methods which provide functionality used in
+deserializing an object.  @code{currentClassLoader()} provides the first
+user-defined class loader from the class context
+(@xref{gnu.classpath.VMStackWalker},) via a @code{PrivilegedAction}.
+@code{allocateObject(Class,Class,Constructor)} is a @code{native} method
+(a reference implementation is provided) which creates an object but
+calls the constructor of another class, which is a superclass of the
+object's class.
+
+@node java.io.VMObjectStreamClass,,java.io.VMObjectInputStream,java.io
+@subsection @code{java.io.VMObjectStreamClass}
+
+@code{VMObjectStreamClass} is a series of @code{static} @code{native}
+methods that provide some of the groundwork for @code{ObjectStreamClass}
+and @code{ObjectStreamField}.  @code{hasClassInitializer(Class)} works
+with the former, and checks for the presence of a static initializer.
+The remaining methods are of the form @code{setXXXNative(Field,Object,XXX)}
+and support @code{ObjectStreamField}.  One exists for each of the main types
+(boolean, float, double, long, int, short, char, byte and object) and is used
+to set the specified field in the supplied instance to the given value.
+
+A default implementation is provided for all of them, so a VM implementation
+is optional.
+
+@node java.security, java.net, java.io, Classpath Hooks
+@section java.security
+
+The @code{java.security} package provides support for Java's security
+architecture.  
+
+@menu
+* java.security.VMAccessController::
+* java.security.VMSecureRandom::
+@end menu
+
+@node java.security.VMAccessController,java.security.VMSecureRandom,java.security,java.security
+@subsection @code{java.security.VMAccessController}
+
+The @code{AccessController} is used to perform privileged actions.  Its
+hook class, @code{VMAccessController}, maintains the
+@code{AccessControlContext} and the default implementation is purely
+Java-based.  The VM may choose to replace this with their own.
+The methods in the reference version are as follows:
+
+@itemize @bullet
+@item @code{pushContext(AccessControlContext)} -- Adds a new context to the
+stack for the current thread.  This is called before a privileged action
+takes place.
+@item @code{popContext()} -- Removes the top context from the stack.  This
+is performed after the privileged action takes place.
+@item @code{getContext()} -- Either derives a context based on the 
+@code{ProtectionDomain}s of the call stack (see the next method) or returns
+the top of the context stack.
+@item @code{getStack()} -- Provides access to the call stack as a pair of
+arrays of classes and method names.  The actual implementation returns
+an empty array, indicating that there are no permissions.
+@end itemize
+
+@node java.security.VMSecureRandom,,java.security.VMAccessController,java.security
+@subsection @code{java.security.VMSecureRandom}
+
+The @code{VMSecureRandom} class is used to provide access to
+cryptographically secure random numbers.  The default implementation
+of the class runs eight threads that increment counters in a tight
+loop, and XORs each counter to produce one byte of seed data. This is
+not very efficient, and is not guaranteed to be random (the thread
+scheduler is probably deterministic, after all). VM implementors
+should provide a version of this class, which implements the method
+@code{generateSeed(byte[],int,int)}, so that it fills the buffer using
+a random seed from a system facility, such as a system entropy
+gathering device or hardware random number generator.  The parameters
+are the usual set of buffer, offset and length and the method returns
+the number of bytes actually generated, which may be less than that
+requested.
+
+@node java.net, java.nio, java.security, Classpath Hooks
+@section java.net
+
+The @code{java.net} package is heavily reliant on access to the networking
+facilities of the underlying platform.  The VM hooks provide information
+about the available network interfaces, and access to lookup facilities
+for network addresses.
+
+@menu
+* java.net.VMInetAddress::
+* java.net.VMNetworkInterface::
+@end menu
+
+@node java.net.VMInetAddress,java.net.VMNetworkInterface,java.net,java.net
+@subsection @code{java.net.VMInetAddress}
+
+@code{VMInetAddress} is a series of @code{static} @code{native} methods
+which provide access to the platform's lookup facilities.  All the methods
+are implemented by GNU Classpath, making VM implementation optional, and
+are as follows:
+
+@itemize @bullet
+@item @code{getLocalHostname()} -- Wraps the @code{gethostname} function, and
+falls back on `localhost'.
+@item @code{lookupInaddrAny()} -- Returns the value of @code{INADDR_ANY}.
+@item @code{getHostByAddr(byte[])} -- Looks up the hostname based on an IP
+address.
+@item @code{getHostByName(String)} -- The reverse of the last method, it
+returns the IP addresses which the given host name resolves to.
+@end itemize
+
+@node java.net.VMNetworkInterface,,java.net.VMInetAddress,java.net
+@subsection @code{java.net.VMNetworkInterface}
+
+@code{VMNetworkInterface} currently consists of a single @code{static}
+@code{native} method, @code{getInterfaces()}, which retrieves the
+network interfaces available on the underlying platform as a @code{Vector}.
+The current GNU Classpath implementation is a native stub.
+
+@node java.nio, java.nio.channels, java.net, Classpath Hooks
+@section java.nio
+
+The @code{java.nio} package is part of the New I/O framework added in
+Java 1.4.  This splits I/O into the concepts of @emph{buffers},
+@emph{charsets}, @emph{channels} and @emph{selectors}, and
+@code{java.nio} defines the buffer classes.  As far as native and VM
+code is concerned, the new package needs support for low-level efficient
+buffer operations.
+
+@menu
+* java.nio.VMDirectByteBuffer::
+@end menu
+
+@node java.nio.VMDirectByteBuffer,,java.nio,java.nio
+@subsection @code{java.nio.VMDirectByteBuffer}
+
+A @code{ByteBuffer} maintains a buffer of bytes, and allows it to be
+manipulated using primitive operations such as @code{get}, @code{put},
+@code{allocate} and @code{free}.  A direct buffer avoids intermediate
+copying, and uses native data which shouldn't be manipulated by a
+garbage collector.  The VM class consists of @code{static} @code{native}
+methods, all of which are given default implementations by GNU
+Classpath.
+
+@itemize @bullet
+@item @code{init()} -- Creates an instance of an appropriate
+@code{gnu.classpath.RawData} class.  This class is not garbage
+collected, is created natively and is used in the other methods to reference
+the buffered data.
+@item @code{allocate(int)} -- Allocates the memory for the buffer using
+@code{malloc} and returns a reference to the @code{RawData} class.
+@item @code{free(RawData)} -- Frees the memory used by the buffer.
+@item @code{get(RawData,int)}  -- Returns the data at the specified index.
+@item @code{get(RawData,int,byte[],int,int)} -- Copies a section of the
+data into a byte array using @code{memcpy}.
+@item @code{put(RawData,int,byte)} -- Puts the given data in the buffer
+at the specified index.
+@item @code{adjustAddress(RawData,int)} -- Adjusts the pointer into the buffer.
+@item @code{shiftDown(RawData,int,int,int)} -- Moves the content of the buffer
+at an offset down to a new offset using @code{memmove}.
+@end itemize
+ 
+@node java.nio.channels, gnu.java.nio, java.nio, Classpath Hooks
+@section java.nio.channels
+
+Channels provide the data for the buffers with the New I/O packages.
+For example, a channel may wrap a file or a socket.  The VM hooks,
+at the moment, simply allow the channels to be accessed by @code{java.io}
+streams.
+
+@menu
+* java.nio.channels.VMChannels::
+@end menu
+
+@node java.nio.channels.VMChannels,,java.nio.channels,java.nio.channels
+@subsection @code{java.nio.channels.VMChannels}
+
+@code{VMChannels} provides the methods that create the channels or
+streams.  The default implementation is in pure Java and simply wraps
+the channels in standard I/O classes from @code{java.io}.
+
+@itemize @bullet
+@item @code{createStream(Class,Channel)} -- Creates a @code{FileChannel}
+which wraps an instance of the specified stream class, created by reflection.
+This method is private, and is used by the other two.
+@item @code{newInputStream(ReadableByteChannel)} -- Wraps the channel
+in a @code{FileInputStream}.
+@item @code{newOutputStream(WritableByteChannel)} -- Wraps the channel
+in a @code{FileOutputStream}.
+@end itemize
+
+@node gnu.java.nio, java.lang.reflect, java.nio.channels, Classpath Hooks
+@section gnu.java.nio
+
+The @code{gnu.java.nio} class provides Classpath implementations of the
+interfaces provided by @code{java.nio}.  The VM classes provide the native
+support necessary to implement @emph{pipes} and @emph{selectors}.
+
+@menu
+* gnu.java.nio.VMPipe::
+* gnu.java.nio.VMSelector::
+@end menu
+
+@node gnu.java.nio.VMPipe,gnu.java.nio.VMSelector,gnu.java.nio,gnu.java.nio
+@subsection @code{gnu.java.nio.VMPipe}
+
+@code{VMPipe} provides the native functionality for a uni-directional pipe
+between a source and a destination (sink) channel.  It consists of one 
+@code{static} @code{native} method, @code{init(PipeImpl,SelectorProvider)},
+the reference implementation of which is currently a native stub.  Ideally,
+this should initialise the pipe at the native level.
+
+@node gnu.java.nio.VMSelector,,gnu.java.nio.VMPipe,gnu.java.nio
+@subsection @code{gnu.java.nio.VMSelector}
+
+A @code{Selector} selects between multiple @code{SelectableChannel}s based
+on their readiness and a key set.  The VM hook for the Classpath implementation
+of this is @code{VMSelector}, and this allows the actual @code{select()}
+operation to be performed.  This is represented by the @code{static}
+@code{native} method, @code{select(int[],int[],int[],long)}, and a default
+implementation of this is provided.
+
+@node java.lang.reflect, gnu.java.lang, gnu.java.nio, Classpath Hooks
+@section @code{java.lang.reflect}
+@code{java.lang.reflect} provides the interface to Java's reflection
+facilities.  Via reflection, programmers can obtain type information about
+a particular instance at runtime or dynamically create new instances.
+
+@menu
+* java.lang.reflect.VMArray::
+@end menu
+
+@node java.lang.reflect.VMArray,,,java.lang.reflect
+@subsection @code{java.lang.reflect.VMArray}
+
+The @code{VMArray} class provides a hook, @code{createObjectArray},
+which the VM uses to generate a new non-primitive array of a
+particular class and size.  The default implementation simply passes
+the job down to the standard JNI function, @code{NewObjectArray}.
+
+@node gnu.java.lang, gnu.java.lang.management, java.lang.reflect, Classpath Hooks
+@section @code{gnu.java.lang}
+
+@code{gnu.java.lang} provides VM interfaces for the GNU
+implementations of features in java.lang.  Currently, this includes the
+implementation of instrumentation.
+
+@menu
+* gnu.java.lang.VMInstrumentationImpl::
+@end menu
+
+@node gnu.java.lang.VMInstrumentationImpl,,,gnu.java.lang
+@subsection @code{gnu.java.lang.VMInstrumentationImpl}
+
+The @code{gnu.java.lang.VMInstrumentationImpl} and
+@code{gnu.java.lang.InstrumentationImpl} classes provide an implementation of the
+@code{java.lang.instrument.Instrument} interface. 
+A @code{InstrumentationImpl} object should be created by the VM when agents
+are given in the command line (see the @code{java.lang.instrument} package
+documentation). The VM has to set the static field
+@code{VMClassLoader.instrumenter} to this object. The VM should implement the
+static native methods of the @code{VMInstrumentationImpl} class.
+
+@itemize @bullet
+@item @code{isRedefineClassesSupported()} -- Returns true if the JVM supports
+class redefinition.
+@item @code{redefineClasses()} -- Gives a set of classes with new bytecodes.
+The VM must redefine the classes by reading the new bytecodes.
+@item @code{getAllLoadedClass()} -- Returns an array of all loaded classes.
+@item @code{getInitiatedClass()} -- Returns an array of all classes loaded
+by a specific class loader.
+@item @code{getObjectSize()} -- Gives the size of an object.
+@end itemize
+
+Instrumentation allows to modify the bytecode of a class before it gets read
+by the VM. In GNU Classpath, the @code{ClassLoader.defineClass} method calls
+the @code{VMClassLoader.defineClassWithTransformers} method which first checks
+if @code{VMClassLoader.instrumenter} is @code{null}. If it's the case, it
+directly calls @code{VMClassLoader.defineClass}. If it's not the case, the
+method calls at first the @code{InstrumentationImpl.callTransformers} method,
+which calls each transformer registered to the @code{InstrumentationImpl}
+object and returns a new bytecode array. Then, it calls the
+@code{VMClassLoader.defineClass} method with this new bytecode array.
+
+The second use of instrumentation is to redefine a class after it has been
+loaded by the VM. This is done in the Java application by calling the
+@code{Instrumentation.redefineClasses} method of the standard interface on
+a @code{Instrumentation} object. The @code{InstrumentationImpl.redefineClasses}
+method calls the @code{VMInstrumentationImpl.redefineClasses} native method
+which must be implemented by the VM. The implementation should call the
+@code{InstrumentationImpl.callTransformers} method.
+
+@node gnu.java.lang.management, java.lang.management, gnu.java.lang, Classpath Hooks
+@section @code{gnu.java.lang.management}
+
+@code{gnu.java.lang.management} provides the VM interfaces for the GNU
+implementations of the management beans.  
+
+@menu
+* gnu.java.lang.management.VMRuntimeMXBeanImpl::
+* gnu.java.lang.management.VMClassLoadingMXBeanImpl::
+* gnu.java.lang.management.VMThreadMXBeanImpl::
+* gnu.java.lang.management.VMMemoryMXBeanImpl::
+* gnu.java.lang.management.VMCompilationMXBeanImpl::
+* gnu.java.lang.management.VMMemoryPoolMXBeanImpl::
+* gnu.java.lang.management.VMMemoryManagerMXBeanImpl::
+* gnu.java.lang.management.VMGarbageCollectorMXBeanImpl::
+@end menu
+
+@node gnu.java.lang.management.VMRuntimeMXBeanImpl,gnu.java.lang.management.VMClassLoadingMXBeanImpl,,gnu.java.lang.management
+@subsection @code{gnu.java.lang.management.VMRuntimeMXBeanImpl}
+
+The @code{gnu.java.lang.management.RuntimeMXBeanImpl} provides an
+implementation of the @code{java.lang.management.RuntimeMXBean} interface,
+and is supported by VM functionality in the form of
+@code{gnu.java.lang.management.VMRuntimeMXBeanImpl}.  This provides a
+series of methods, which should be implemented by the virtual machine
+in order to provide the required information for the bean.  The VM
+methods are generally representative of information that is only
+available from the virtual machine, such as the command-line arguments
+it was given at startup.
+
+The methods are as follows:
+
+@itemize @bullet
+@item @code{(getInputArguments())} -- The VM should supply
+a @code{String} array containing each of the command-line
+arguments, excluding those that are directed at the
+@code{main()} method.  The reference implementation expects
+this to be a native method.
+@item @code{(getName())} -- The VM developer should choose
+an appropriate name for the virtual machine.  This name can
+be instance-specific e.g. it can include things like the
+process identifier or host name of the machine, which only
+apply to the current running instance.  Thus, the intention is
+that this name refers to the entity that the other information
+refers to, rather than the VM in general.  The reference
+implementation supplies a default concatenation of the VM
+name and version.
+@item @code{(getStartTime())} -- This should return the number
+of milliseconds at which the virtual machine was started.
+The uptime property of the bean is provided relative to this
+value.  Again, the reference implementation also expects
+this method to be native.
+@end itemize
+
+The virtual machine also needs to provide either the
+@code{sun.boot.class.path} or @code{java.boot.class.path}
+property in order to support the optional boot class path
+retrieval functionality.
+
+@node gnu.java.lang.management.VMClassLoadingMXBeanImpl,gnu.java.lang.management.VMThreadMXBeanImpl,gnu.java.lang.management.VMRuntimeMXBeanImpl,gnu.java.lang.management
+@subsection @code{gnu.java.lang.management.VMClassLoadingMXBeanImpl}
+
+The @code{gnu.java.lang.management.ClassLoadingMXBeanImpl} provides an
+implementation of the @code{java.lang.management.ClassLoadingMXBean} interface,
+and is supported by VM functionality in the form of
+@code{gnu.java.lang.management.VMClassLoadingMXBeanImpl}.  This provides a
+series of methods, which should be implemented by the virtual machine
+in order to provide the required information for the bean.  Implementing
+this bean requires the VM to monitor when classes are loaded and unloaded,
+and provide the option of verbose class loading output.
+
+The methods are as follows:
+
+@itemize @bullet
+@item @code{(getLoadedClassCount())} -- This should return
+the number of classes that are currently loaded by the VM.
+@item @code{(getUnloadedClassCount())} -- This should return
+the number of classes that have been loaded by the VM, but
+have since been unloaded.
+@item @code{(isVerbose())} -- This should return @code{true}
+or @code{false}, depending on whether verbose class loading
+output is turned or not, respectively.
+@item @code{(setVerbose(boolean))} -- This should allow the
+verbose class loading output to be turned on and off.
+@end itemize
+
+@node gnu.java.lang.management.VMThreadMXBeanImpl,gnu.java.lang.management.VMMemoryMXBeanImpl,gnu.java.lang.management.VMClassLoadingMXBeanImpl,gnu.java.lang.management
+@subsection @code{gnu.java.lang.management.VMThreadMXBeanImpl}
+
+The @code{gnu.java.lang.management.ThreadMXBeanImpl} provides an
+implementation of the @code{java.lang.management.ThreadMXBean} interface,
+and is supported by VM functionality in the form of
+@code{gnu.java.lang.management.VMThreadMXBeanImpl}.  This provides a
+series of methods, which should be implemented by the virtual machine
+in order to provide the required information for the bean.  Implementing
+this bean requires the VM to monitor thread-related statistics such as
+how often the blocked and waiting states have been entered, as well as
+additional optional support for time and contention monitoring.
+
+Optional support is determined by the following properties:
+
+@itemize @bullet
+@item @code{gnu.java.lang.management.CurrentThreadTimeSupport} --
+This property should be present if the VM supports monitoring the
+time used by the current thread.  If time monitoring for all threads
+is supported, this need not be provided.
+@item @code{gnu.java.lang.management.ThreadTimeSupport} --
+This property should be present if the VM supports monitoring the
+time used by all threads.
+@item @code{gnu.java.lang.management.ThreadContentionSupport} --
+This property should be present if the VM supports thread contention
+monitoring.
+@end itemize
+
+In addition, the property
+@code{gnu.java.lang.management.ThreadTimeInitallyEnabled} may be
+set to the @code{String} value, @code{"true"}, if time monitoring
+is enabled at startup.
+
+The methods are as follows:
+
+@itemize @bullet
+@item @code{(findMonitorDeadlockedThreads())} -- This should return
+an array of thread identifiers which match threads involved in
+deadlock cycles (where each thread is waiting to obtain a lock
+held by one of the others).  This is specified as a native method
+in the reference implementation.
+@item @code{(getAllThreads())} -- This should return an array of
+all live threads and set the @code{filled} variable to the number
+found.  A default implementation is provided.
+@item @code{(getAllThreadIds())} -- This should return an array of
+all live thread identifiers.  An implementation is provided against
+@code{getAllThreads()} by default.
+@item @code{(getCurrentThreadCpuTime())} -- This should return the
+approximate number of nanoseconds of CPU time the current thread
+has used.  This is an optional native method, which is used by VMs
+supporting time monitoring.
+@item @code{(getCurrentThreadUserTime())} -- This should return the
+approximate number of nanoseconds of user time the current thread
+has used.  This is an optional native method, which is used by VMs
+supporting time monitoring.
+@item @code{(getDaemonThreadCount())} -- This should return the number
+of live daemon threads.  A default implementation is provided, based
+on @code{getAllThreads()}.
+@item @code{(getPeakThreadCount())} -- The VM should maintain a record
+of the peak number of live threads, and return it when this method is
+called.  This is specified as a native method in the reference
+implementation.
+@item @code{(resetPeakThreadCount())} -- This should reset the record
+of the peak number of live threads to the current number of live
+threads.  This is specified as a native method in the reference
+implementation.
+@item @code{(getThreadCount())} -- This should return the number of
+live threads.  A default implementation is provided, based on
+@code{getAllThreads()}.
+@item @code{(getThreadCpuTime(long))} -- This should return the
+approximate number of nanoseconds of CPU time the specified thread
+has used.  This is an optional native method, which is used by VMs
+supporting time monitoring.
+@item @code{(getThreadUserTime(long))} -- This should return the
+approximate number of nanoseconds of CPU time the specified thread
+has used.  This is an optional native method, which is used by VMs
+supporting time monitoring.
+@item @code{(getThreadInfoForId(long, int))} -- This return an instance
+of @code{java.lang.management.ThreadInfo} for the specified thread.
+The class includes a private constructor which VMs should use to initialise
+it with the appropriate values for the thread.  The second argument
+given here specifies the depth of the stack trace supplied on construction
+of the instance.  Special values are 0 (return an empty array) and
+@code{Integer.MAX_VALUE} (return the maximum depth possible).  This
+is specified as a native method in the reference implementation.
+@item @code{(getTotalStartedThreadCount())} -- This should return the
+total number of threads that have been started by the VM, including ones
+that have died.  This is specified as a native method in the reference
+implementation.
+@end itemize
+
+@node gnu.java.lang.management.VMMemoryMXBeanImpl,gnu.java.lang.management.VMCompilationMXBeanImpl,gnu.java.lang.management.VMThreadMXBeanImpl,gnu.java.lang.management
+@subsection @code{gnu.java.lang.management.VMMemoryMXBeanImpl}
+
+The @code{gnu.java.lang.management.MemoryMXBeanImpl} provides an
+implementation of the @code{java.lang.management.MemoryMXBean} interface,
+and is supported by VM functionality in the form of
+@code{gnu.java.lang.management.VMMemoryMXBeanImpl}.  This provides a
+series of methods, which should be implemented by the virtual machine
+in order to provide the required information for the bean.  Implementing
+this bean requires the VM to monitor the levels of heap and non-heap
+memory, and provide the number of objects which are eligible for garbage
+collection.
+
+The methods are as follows:
+
+@itemize @bullet
+@item @code{(getHeapMemoryUsage())} -- This should return
+an instance of @code{java.lang.management.MemoryUsage} with
+values pertaining to the heap.  A default implementation is
+provided, based on @code{java.lang.Runtime}'s methods.
+@item @code{(getNonHeapMemoryUsage())} -- This should return
+an instance of @code{java.lang.management.MemoryUsage} with
+values pertaining to non-heap memory.
+@item @code{(getObjectPendingFinalizationCount())} -- Returns
+the number of objects which are no longer referenced, and which
+will thus be garbage collected on the next run of the garbage
+collector.
+@item @code{(isVerbose())} -- This should return @code{true}
+or @code{false}, depending on whether verbose memory management
+output is turned or not, respectively.
+@item @code{(setVerbose(boolean))} -- This should allow the
+verbose memory management output to be turned on and off.
+@end itemize
+
+@node gnu.java.lang.management.VMCompilationMXBeanImpl,gnu.java.lang.management.VMMemoryPoolMXBeanImpl,gnu.java.lang.management.VMMemoryMXBeanImpl,gnu.java.lang.management
+@subsection @code{gnu.java.lang.management.VMCompilationMXBeanImpl}
+
+The @code{gnu.java.lang.management.CompilationMXBeanImpl} provides an
+implementation of the optional @code{java.lang.management.CompilationMXBean}
+interface, and is supported by VM functionality in the form of
+@code{gnu.java.lang.management.VMCompilationMXBeanImpl}.  This provides a
+single method for returning the number of milliseconds the virtual
+machine's Just-In-Time (JIT) compiler has spent compiling.  Even if
+a JIT compiler is available and an instance of the bean supplied, this
+method is still optional.
+
+Optional support is determined by the following properties:
+
+@itemize @bullet
+@item @code{gnu.java.lang.compiler.name} -- This property should
+specify the name of the JIT compiler.  Classpath also uses this,
+within @code{java.lang.management.ManagementFactory}, to determine
+whether a bean should be created.  If this property is set to a
+non-null value, a bean will be created and its @code{getName()}
+method will return this value.
+@item @code{gnu.java.lang.management.CompilationTimeSupport} --
+This property should be present if the VM supports monitoring the
+time spent compiling.
+@end itemize
+
+Time support is implemented by the following method:
+
+@itemize @bullet
+@item @code{(getTotalCompilationTime())} -- This should return the
+number of milliseconds the JIT compiler has spent compiling.
+@end itemize
+
+@node gnu.java.lang.management.VMMemoryPoolMXBeanImpl,gnu.java.lang.management.VMMemoryManagerMXBeanImpl,gnu.java.lang.management.VMCompilationMXBeanImpl,gnu.java.lang.management
+@subsection @code{gnu.java.lang.management.VMMemoryPoolMXBeanImpl}
+
+The @code{gnu.java.lang.management.MemoryPoolMXBeanImpl} provides an
+implementation of the optional @code{java.lang.management.MemoryPoolMXBean}
+interface, and is supported by VM functionality in the form of
+@code{gnu.java.lang.management.VMMemoryPoolMXBeanImpl}.  Providing
+this interface requires implementing a number of methods for each supported
+pool.  These return statistics on memory usage, and, optionally, allows
+monitoring of when memory usage exceedes a preset threshold.
+
+Optional support is determined by the following properties:
+
+@itemize @bullet
+@item @code{gnu.java.lang.management.CollectionUsageThresholdSupport} --
+This property should be present if the VM supports setting a collection
+usage threshold and monitoring when it is matched or exceeded.  Collection
+usage thresholds are related to the remaining memory usage following a
+garbage collection cycle.
+@item @code{gnu.java.lang.management.UsageThresholdSupport} --
+This property should be present if the VM supports setting a 
+usage threshold and monitoring when it is matched or exceeded.  
+@end itemize
+
+The methods are as follows (all take a pool name as their
+first parameter):
+
+@itemize @bullet
+@item @code{(getCollectionUsage(String))} -- Returns a
+@code{java.lang.management.MemoryUsage} object, containing the
+memory usage statistics following a garbage collection cycle
+for the specified pool.  This may also return @code{null} if
+the pool isn't an appropriate pool for this particular task.
+@item @code{(getCollectionUsageThreshold(String))} -- Returns
+the pool's collection usage threshold, if supported.
+@item @code{(getCollectionUsageThresholdCount(String))} -- Returns
+the number of times the specified pool has matched or exceeded
+its collection usage threshold, if supported.
+@item @code{(getMemoryManagerNames(String))} -- Returns a list
+of names of memory managers which manage the specified pool.
+@item @code{(getPeakUsage(String))} -- Returns a
+@code{java.lang.management.MemoryUsage} object for the peak
+usage level of the specified pool.
+@item @code{(getType(String))} -- Returns a string containing
+either @code{"HEAP"} or @code{"NON_HEAP"} which indicates the type of
+memory used by the specified pool.
+@item @code{(getUsage(String))} -- Returns a
+@code{java.lang.management.MemoryUsage} object for the current
+usage level of the specified pool.
+@item @code{(getUsageThreshold(String))} -- Returns
+the pool's usage threshold, if supported.
+@item @code{(getUsageThresholdCount(String))} -- Returns
+the number of times the specified pool has matched or exceeded
+its usage threshold, if supported.
+@item @code{(isValid(String))} -- Returns true if the pool
+is still in use by the virtual machine.
+@item @code{(resetPeakUsage(String))} -- Resets the peak usage
+levels to the current usage levels for the specified pool.
+@item @code{(setCollectionUsageThreshold(String, long))} -- Sets
+the pool's collection usage threshold, if supported.
+@item @code{(setUsageThreshold(String, long))} -- Sets
+the pool's usage threshold, if supported.
+@end itemize
+
+@node gnu.java.lang.management.VMMemoryManagerMXBeanImpl,gnu.java.lang.management.VMGarbageCollectorMXBeanImpl,gnu.java.lang.management.VMMemoryPoolMXBeanImpl,gnu.java.lang.management
+@subsection @code{gnu.java.lang.management.VMMemoryManagerMXBeanImpl}
+
+The @code{gnu.java.lang.management.MemoryManagerMXBeanImpl} provides an
+implementation of the optional @code{java.lang.management.MemoryManagerMXBean}
+interface, and is supported by VM functionality in the form of
+@code{gnu.java.lang.management.VMMemoryManagerMXBeanImpl}.  Providing
+this interface requires implementing two methods (each takes the name
+of the manager as the first argument):
+
+@itemize @bullet
+@item @code{(getMemoryPoolNames(String))} -- Returns a list of the
+memory pools that the manager maintains.  A default implementation
+which scans the results of @code{getMemoryManagerNames()} for each
+pool is provided.
+@item @code{(isValid(String))} -- Returns true if the specified
+manager is still valid i.e. it is still in use by the virtual machine.
+@end itemize
+
+@node gnu.java.lang.management.VMGarbageCollectorMXBeanImpl,,gnu.java.lang.management.VMMemoryManagerMXBeanImpl,gnu.java.lang.management
+@subsection @code{gnu.java.lang.management.VMGarbageCollectorMXBeanImpl}
+
+The @code{gnu.java.lang.management.GarbageCollectorMXBeanImpl} provides an
+implementation of the optional @code{java.lang.management.GarbageCollectorMXBean}
+interface, and is supported by VM functionality in the form of
+@code{gnu.java.lang.management.VMGarbageCollectorMXBeanImpl}.  Providing
+this interface requires implementing two methods (each takes the name
+of the garbage collector as the first argument):
+
+@itemize @bullet
+@item @code{(getCollectionCount(String))} -- Returns the number of
+times the specified garbage collector has run.
+@item @code{(getCollectionTime(String))} -- Returns the accumulated
+number of milliseconds for which the garbage collector has run.
+@end itemize
+
+Note that each garbage collector is also a memory manager, and so an
+implementation of the @code{gnu.java.lang.management.VMMemoryManagerMXBeanImpl}
+methods for its name should also be provided.
+
+@node java.lang.management, Classpath Callbacks, gnu.java.lang.management, Classpath Hooks
+@section @code{java.lang.management}
+
+@code{gnu.java.lang.management} provides the VM interfaces for the GNU
+implementations of the management beans.  
+
+@menu
+* java.lang.management.VMManagementFactory::
+@end menu
+
+@node java.lang.management.VMManagementFactory,,,java.lang.management
+@subsection @code{java.lang.management.VMManagementFactory}
+
+This VM interface provides the names of the memory pools, memory managers
+and garbage collectors for use by the @code{java.lang.management.ManagementFactory}
+in creating lists of appropriate beans for these types of managed object.
+
+The methods are as follows:
+
+@itemize @bullet
+@item @code{(getMemoryPoolNames())} -- Returns a list of the names
+of the current memory pools in use by the virtual machine.
+@item @code{(getMemoryManagerNames())} -- Returns a list of the names
+of the current memory managers in use by the virtual machine.  This
+should not include those that are also garbage collectors.
+@item @code{(getGarbageCollectorNames())} -- Returns a list of the names
+of the current garbage collectors in use by the virtual machine.
+@end itemize
+
+@node Classpath Callbacks, , java.lang.management, Classpath Hooks
+Some of the classes you implement for the VM will need to call back to
+package-private methods in Classpath:
+
+@itemize @bullet
+@item @code{java.lang.ThreadGroup.addThread(Thread)}
+Call this method from @code{Thread} when a new @code{Thread} is created, to add it to
+the group.
+
+@item @code{java.lang.ThreadGroup.removeThread(Thread)}
+Call this method from @code{Thread} when a @code{Thread} is stopped or destroyed.
+
+@item @code{gnu.java.lang.management.MemoryMXBeanImpl.fireThresholdExceededNotification(String, long, long, long, long)}
+If the monitoring of memory usage thresholds is supported, this method
+should be called when the normal usage of a memory pool crosses the
+threshold, in order to emit a notification.  Another notification
+should not be emitted until there is an intermittent period where the
+usage is again below the threshold.  The parameters are the memory
+pool name, the usage levels (init, used, committed and max) and the
+number of times the threshold has been crossed.
+
+@item @code{gnu.java.lang.management.MemoryMXBeanImpl.fireCollectionThresholdExceededNotification(String, long, long, long, long)}
+If the monitoring of memory usage thresholds is supported, this method
+should be called when the usage of a memory pool after a garbage
+collection cycle crosses the threshold, in order to emit a
+notification.  Another notification should not be emitted until there
+is an intermittent period where the usage is again below the
+threshold.  The parameters are the memory pool name, the usage levels
+(init, used, committed and max) and the number of times the threshold
+has been crossed.
+
+@end itemize
+
+@node VM Hooks, JNI Implementation, Classpath Hooks, Top
+@comment node-name, next, previous, up
+@chapter VM Hooks
+
+VMs need to do some dirty work; there are some things in the VM that
+unfortunately are dependent on the internal structure of various
+classes.  This is a guide to all of the things the VM itself needs to
+know about classes.
+
+Some of the core classes, while being implemented by GNU Classpath,
+provide space for state (in the form of a @code{vmdata} object) to be
+stored by the VM, and can not be constructed normally.
+
+@itemize @bullet
+@item java.lang.Class
+@item java.lang.ClassLoader
+@end itemize
+
+The default implementations of some VM classes also follow this methodology,
+when it is intended that most VMs will keep the default.
+
+@itemize @bullet
+@item java.lang.VMThread
+@item java.lang.VMThrowable
+@end itemize
+
+Several core classes must be completely implemented by the VM for Classpath to
+work, although reference implementations are provided.  These classes are:
+
+@itemize @bullet
+@item java.lang.reflect.Constructor
+@item java.lang.reflect.Method
+@item java.lang.reflect.Field
+@end itemize
+
+The following issues are of note;
+
+@itemize @bullet
+@item @code{java.lang.Class} @*
+The GNU Classpath implementation of @code{java.lang.Class} provides an
+object for storing the internal state of the class maintained by the VM.
+This is the only known place where this matters.  The class is
+constructed with this data by the VM.  Some VMs do not create the
+@code{Class} object at the point where the class is defined; instead,
+they wait until a @code{Class} object is actually used.
+
+@item Array Classes @*
+When you are creating an array class, you should set the
+@code{ClassLoader} of the array class to the @code{ClassLoader} of its
+component type.  Whenever you add a class to a @code{ClassLoader}, you
+need to notify the @code{ClassLoader} and add the new @code{Class} to
+its internal cache of classes.  To do this, call
+@code{ClassLoader.addVMCreatedClass(Class)}.  @emph{Note: this is
+written in anticipation of 1.2 support and does not apply just yet.}
+
+@item Primordial Class Loader @*
+When the primordial class loader loads a class, it needs to tell
+Classpath what it has done in order for security stuff to work right.
+To do this, call the static method
+@code{ClassLoader.newPrimordialClass(Class)}.
+
+Even the first few core classes need to do this; in order to do it,
+simply call this method @emph{after} the initial class loading has been
+done.  No harm will come, as long as you follow the guidelines in the
+@pxref{Initialization} section.
+
+@emph{Note: this is written in anticipation of 1.2 support and does not
+apply just yet.}
+
+@item Top-level Exception Handler @*
+Exceptions take care of themselves in Classpath; all you need to do in
+the top-level exception handler is call @code{Throwable.printStackTrace()}.
+
+@item Security and Traces @*
+There will eventually be a feature in the 1.2 security that keeps the
+@code{AccessController} from having to evaluate @emph{all} of the
+@code{ProtectionDomain}s every time a security check is made.  I think a common
+case is a single method doing a lot of things that require security
+checks.  However, I don't want to bog down the method stack too much, so
+this feature of the VM will have the @code{AccessController} for a thread
+calling out to the VM to tell it how high it was on the stack when it
+made the last security request.  Every time the stack goes lower than
+that number, the VM will decrement the number.  The @code{AccessController}
+will remember what the accumulated protection status was at every stack
+level (an @code{AccessControlContext}) and use that aggregated information to
+do the check.  I am not sure, however, whether the savings are
+substantial enough to outweigh the integer check and set after every
+method call.  I will investigate.
+
+@item Threading @*
+I figured I'd put this here because a VM guy might be wondering about it.
+We implement @code{ThreadGroup}, but that class is almost entirely
+VM-independent.  The root @code{ThreadGroup}, a static field called
+@code{ThreadGroup.root}, should be initialized by Classpath, but if you wish to
+reinitialize it yourself, there should be no harm.
+
+@end itemize
+
+@node JNI Implementation, JVMTI Implementation, VM Hooks, Top
+@comment  node-name,  next,  previous,  up
+@chapter JNI Implementation
+
+Classpath comes with its own implementation of @file{jni.h}.  This
+file can be customized by the VM in a few ways, by defining macros
+that affect the interpretation of the file.  These macros are all
+intended for use by a VM which uses GNU Classpath and which wants to
+use a single copy of @file{jni.h} for both internal and external use.
+
+@itemize @bullet
+@item _CLASSPATH_VM_JNI_TYPES_DEFINED
+Some VMs like to define JNI ``object'' types in a special way.  If
+this macro is defined, the Classpath @file{jni.h} will avoid defining
+these types.  By default, these types are defined in @file{jni.h}.
+The full list of types and macros treated this way is: @samp{jobject},
+@samp{jclass}, @samp{jstring}, @samp{jthrowable}, @samp{jweak},
+@samp{jarray}, @samp{jobjectArray}, @samp{jbyteArray},
+@samp{jshortArray}, @samp{jintArray}, @samp{jlongArray},
+@samp{jbooleanArray}, @samp{jcharArray}, @samp{jfloatArray},
+@samp{jdoubleArray}, @samp{JNIEnv}, @samp{JavaVM}, @samp{JNI_TRUE}
+(macro), @samp{JNI_FALSE} (macro).
+
+@item _CLASSPATH_VM_INTERNAL_TYPES_DEFINED
+If the VM has its own definitions for @samp{jfieldID} and
+@samp{jmethodID}, then it should define this macro.  Otherwise,
+@file{jni.h} will provide definitions for these types.
+
+@item _CLASSPATH_JNIIMPEXP
+Three functions -- @samp{JNI_GetDefaultJavaVMInitArgs},
+@samp{JNI_CreateJavaVM}, and @samp{JNI_GetCreatedJavaVMs} -- must be
+marked as @samp{JNIIMPORT} when seen by user code, but most likely
+should be marked as @samp{JNIEXPORT} when defined in the VM
+implementation.  This macro can be defined to one or the other by the
+VM as appropriate.  If this macro is not defined, it defaults to
+@samp{JNIIMPORT}.
+
+@item _CLASSPATH_JNIENV_CONTENTS
+A VM can add fields to the @samp{JNIEnv} structure by defining this to
+be a sequence of field declarations.
+
+@end itemize
+
+@node JVMTI Implementation, Miscellaneous VM Requirements, JNI Implementation, Top
+@comment node-name, next, previous, up
+@chapter JVMTI Implementation
+
+Classpath comes with its own implementation of @file{jvmti.h}.  This
+file can be customized by the VM in a few ways by defining macros that
+affect the interpretation of the file.  These macros are all intended
+for use for use by a VM which uses GNU Classpath and which wants to
+use a single copy of @file{jvmti.h} for both internal and external use.
+
+@itemize @bullet
+@item _CLASSPATH_VM_JVMTI_TYPES_DEFINED
+Some VMs like to define JVMTI ``object'' types in a special way.  If
+this macro is defined, the Classpath @file{jvmti.h} will avoid defining
+these types.  By default these types are defined in @file{jvmti.h}.  
+The full list of types and macros treated this way is: @samp{jthread},
+@samp{jthreadGroup}, @samp{jlocation}, and @samp{jrawMonitorID}.  By
+default @samp{jrawMonitorID} is defined as an opaque pointer which
+must be defined by the VM.
+
+@item _CLASSPATH_JVMTIENV_CONTENTS
+A VM can add fields to the @samp{jvmtiEnv} structure by defining this
+to be a sequence of field declarations.
+
+@end itemize
+
+@node Miscellaneous VM Requirements,  , JVMTI Implementation, Top
+@comment  node-name,  next,  previous,  up
+@chapter Miscellaneous VM Requirements
+
+Classpath places a few requirements on the VM that uses it.
+
+@menu
+* JNI Version::                 
+* VM Threading Model::          
+* Boot Library Path Property::
+@end menu
+
+@node JNI Version, VM Threading Model, Miscellaneous VM Requirements, Miscellaneous VM Requirements
+@comment  node-name,  next,  previous,  up
+@section JNI Version
+
+Classpath currently uses only JNI 1.1, except for one JNI 1.2 function
+in the JNI Invocation API: GetEnv().  And GetEnv() is only used in the
+now deprecated ``portable native sync'' code.
+
+A future direction will probably be to require that all VMs provide
+JNI 1.2.  If this poses problems, please raise them on the classpath
+mailing list. 
+
+@node VM Threading Model, Boot Library Path Property, JNI Version, Miscellaneous VM Requirements
+@comment  node-name,  next,  previous,  up
+@section VM Threading Model
+
+VM authors can implement a number of different threading models. When
+native code is also threaded there is the potential for one threading
+model to deadlock the other. The
+@uref{http://java.sun.com/docs/books/jni/html/other.html#29406,Java
+Native Interface Programmer's Guide and Specification} suggests
+consulting VM documentation in such situations. Classpath uses
+existing libraries, for example the AWT peers can use the GTK+
+graphics library. As these libraries assume a different threading
+model, there is the potential for the native code to deadlock a VM.
+
+The different threading models available to a VM author are:
+@enumerate
+@item
+@i{Native threads}: Map a Java thread to an underlying operating system
+thread (normally a POSIX compatible pthread). This approach reduces
+the potential for deadlock as there is only one thread scheduling
+mechanism.
+@item
+@i{Green threads 1}: Green threads are threads scheduled by the VM,
+typically by switching swapping registers. In early VMs green threads
+were seen as advantageous as they didn't require the operating system
+to resechedule, save and swap all of a threads registers. The green
+thread 1 model switches thread on an externally created event, such as
+a timer interrupt. An example of a VM using this approach is Kaffe
+configured with its jthreads model.
+@item
+@i{Green threads 2}: The essential difference with this model is to
+not switch threads on an event, but at fixed points in the code being
+executed by the VM. Points chosen could be backward branches (loops)
+or method calls. This approach can be advantageous to nonconservative
+garbage collectors, as non-running threads would be at known points
+and can have fixed register maps. It can also reduce the number of
+registers it is necessary to swap when switching threads.
+@item
+@i{M:N threading}: a flaw to green threading is that it is unable to
+use multiple processors. @i{M}:@i{N} threading fixes this problem by
+running groups of green threads on multiple underlying native
+threads. An example of a VM using this approach is the Jikes RVM,
+which uses @i{M}:@i{N} threading combined with the green thread 2
+model.
+@end enumerate
+
+An example of the problem of mixing threading models is:
+@itemize @bullet
+@item
+A Java thread calls a native method. The native method aquires a lock.
+@item
+The native method calls back into the VM.
+@item
+An event triggers the VM to reschedule the currently running thread.
+@item
+A new VM thread, executing on the same underlying native thread, calls
+a native method.
+@item
+The native method tries to aquire the lock already aquired earlier. As
+the lock is busy the thread waits and allows the operating system to
+reschedule native threads.
+@item
+The operating system reschedules the VM thread again, but the lock is
+still busy and in some threading models will remain busy forever
+(the VM is deadlocked).
+@end itemize
+
+VMs that don't use the underlying operating system thread scheduling
+mechanism need to avoid deadlock. One now deprecated approach was to
+build Classpath and VMs on top of a wrapper thread library (aka
+portable native sync). The wrapper thread library used was GLIB's
+@dfn{gthreads}. This approach has been deprecated because:
+@enumerate
+@item
+The wrapper library is only in use by some native libraries. For
+example, GTK+ uses the gthread library but QT does not.
+@item
+The wrapper library can't be in use prior to the VM starting as the VM
+must replace the wrapper libraries functions with its own. This
+prevents the VM from running as a plugin in an application that
+already uses the wrapper library.
+@end enumerate
+
+An alternative approach is for the VM to detect deadlocked native code
+and swap Java threads off of that native thread. The VM can't,
+however, swap two blocked native threads that are potentially
+deadlocking each other on a lock. The lock will be associated with the
+native thread. To prevent this from happening the VM must hijack
+functions that operate on locks. This is done by redifining the lock
+functions inside the VM and configuring the linker so that it uses the
+VMs symbol in preference to that of the external thread support
+library. The VM's lock function can then reschedule Java threads if it
+must wait for the lock.
+
+@node Boot Library Path Property,  , VM Threading Model, Miscellaneous VM Requirements
+@comment  node-name,  next,  previous,  up
+@section Boot Library Path Property
+
+As of GNU Classpath 0.15 a system property named @code{gnu.classpath.boot.library.path}
+can be set by the VM to specify the directories which contain GNU Classpath's native
+libraries. Usually this value is given at configuration time and is then hardcoded
+in the VM. However for development purposes it is handy to switch to another installation
+by overriding the properties' value on the command line.
+
+A VM that does not support this feature can simply ignore the property.
+
+For compatibility reasons we suggest to set the default value of @code{java.library.path}
+to the value of the @code{LD_LIBRARY_PATH} environment if it exists on your platform.
+
+@bye
+
+
+
Index: libjava/classpath/doc/cp-tools.texinfo
===================================================================
--- libjava/classpath/doc/cp-tools.texinfo	(revision 0)
+++ libjava/classpath/doc/cp-tools.texinfo	(revision 124261)
@@ -0,0 +1,1875 @@
+\input texinfo @c -*-texinfo-*-
+
+@c %**start of header
+@setfilename cp-tools.info
+@settitle GNU Classpath Tools Guide
+@c %**end of header
+
+@setchapternewpage on
+
+@c Common macros to support generating man pages:
+
+@macro gcctabopt{body}
+@code{\body\}
+@end macro
+@macro gccoptlist{body}
+@smallexample
+\body\
+@end smallexample
+@end macro
+
+@ifinfo
+This file documents the Tools included in a standard distribution of the GNU
+Classpath project deliverables.
+
+Copyright (C) 2006, 2007 Free Software Foundation, Inc.
+
+@ifnotplaintext
+@dircategory GNU Libraries
+@direntry
+* Classpath Tools: (tools).       GNU Classpath Tools Guide
+@end direntry
+@end ifnotplaintext
+@end ifinfo
+
+@titlepage
+@title GNU Classpath Tools Guide
+@author The GNU Classpath Team
+
+@page
+@vskip 0pt plus 1filll
+Copyright @copyright{} 2006 Free Software Foundation, Inc.
+@sp 2
+Permission is granted to make and distribute verbatim copies of this document provided the copyright notice and this permission notice are preserved on all copies.
+
+Permission is granted to copy and distribute modified versions of this document under the conditions for verbatim copying, provided that the entire resulting derived work is distributed under the terms of a permission notice identical to this one.
+
+Permission is granted to copy and distribute translations of this manual into another language, under the above conditions for modified versions, except that this permission notice may be stated in a translation approved by the Free Software Foundation.
+
+@end titlepage
+
+@contents
+
+@ifinfo
+@node Top, Applet Tools, (dir), (dir)
+@top GNU Classpath Tools Guide
+
+This document contains important information you need to know in order to use
+the tools included in the GNU Classpath project deliverables.
+
+The Tools aim at providing a free replacement, similar in their behavior, to
+their counter-parts found in the Reference Implementation (RI) of the Java
+Software Development Kit (SDK).
+
+@end ifinfo
+
+@menu
+* Applet Tools::               Work with applets
+* Security Tools::             Work securely with Java applications
+* Other Tools::                Other tools in classpath
+* I18N Issues::                How to add support for non-English languages
+
+@detailmenu
+ --- The Detailed Node Listing ---
+
+Applet Tools
+
+* appletviewer Tool::          Load applets
+* gcjwebplugin::               Load applets in a web browser
+
+Security Tools
+
+* jarsigner Tool::             Sign and verify .JAR files
+* keytool Tool::               Manage private keys and public certificates
+
+jarsigner Tool
+
+* Common jarsigner Options::   Options used when signing or verifying a file
+* Signing Options::            Options only used when signing a .JAR file
+* Verification Options::       Options only used when verifying a .JAR file
+
+keytool Tool
+
+* Getting Help::               How to get help with keytool commands
+* Common keytool Options::     Options used in more than one command
+* Distinguished Names::        X.500 Distinguished Names used in certificates
+* Add/Update Commands::        Commands for adding data to a Key Store
+* Export Commands::            Commands for exporting data from a Key Store
+* Display Commands::           Commands for displaying data in a Key Store
+* Management Commands::        Commands for managing a Key Store
+
+Add/Update Commands
+
+* Command -genkey::            Generate private key and self-signed certificate
+* Command -import::            Import certificates and certificate replies
+* Command -selfcert::          Generate self-signed certificate
+* Command -cacert::            Import a CA Trusted Certificate
+* Command -identitydb::        Import JDK-1 style identities
+
+Export Commands
+
+* Command -certreq::           Generate Certificate Signing Requests (CSR)
+* Command -export::            Export a certificate in a Key Store
+
+Display Commands
+
+* Command -list::              Display information about one or all Aliases
+* Command -printcert::         Print a certificate or a certificate fingerprint
+
+Management Commands
+
+* Command -keyclone::          Clone a Key Entry in a Key Store
+* Command -storepasswd::       Change the password protecting a Key Store
+* Command -keypasswd::         Change the password protecting a Key Entry
+* Command -delete::            Remove an entry in a Key Store
+
+Other Tools
+
+* jar Tool::                   Archive tool for Java archives
+* javah Tool::                 A java header compiler
+* gcjh Tool::                  A java header compiler (old version)
+* native2ascii Tool::          An encoding converter
+* orbd Tool::                  An object request broker daemon
+* serialver Tool::             A serial version command
+* rmid Tool::                  RMI activation daemon
+* rmiregistry Tool::           Remote object registry
+* tnameserv Tool::             Naming service
+
+I18N Issues
+
+* Language Resources::         Where resources are located
+* Message Formats::            How messages are internationalized
+
+@end detailmenu
+@end menu
+
+@comment ----------------------------------------------------------------------
+
+@node Applet Tools, Security Tools, Top, Top
+@comment node-name, next, previous, up
+@chapter Applet Tools
+
+Two Applet Tools are available with GNU Classpath: @b{appletviewer}
+and @b{gcjwebplugin}.
+
+To avoid conflicts with other implementations, the appletviewer
+executable is called ``gappletviewer''.
+
+@menu
+* appletviewer Tool::          Load applets
+* gcjwebplugin::               Load applets in a web browser
+@end menu
+
+If while using these tools you think you found a bug, then please report it at @uref{http://www.gnu.org/software/classpath/bugs.html,classpath-bugs}.
+
+@comment ----------------------------------------------------------------------
+
+@node appletviewer Tool, gcjwebplugin, Applet Tools, Applet Tools
+@comment node-name, next, previous, up
+@section The @code{appletviewer} Tool
+@c man title gappletviewer Load and runs an applet
+
+SYNOPSIS
+
+@c man begin SYNOPSIS gappletviewer
+appletviewer [@var{OPTION}]@dots{} @var{URL}@dots{} @var{@*}
+
+appletviewer [@var{OPTION}]@dots{} @option{-code} @var{CODE} @var{@*}
+
+appletviewer [@var{OPTION}]@dots{} @option{-plugin} @var{INPUT},@var{OUTPUT}
+@c man end
+
+DESCRIPTION
+@c man begin DESCRIPTION gappletviewer
+The @command{appletviewer} tool loads and runs an applet.
+
+Use the first form to test applets specified by tag.  The URL should
+resolve to an HTML document from which the @command{appletviewer} will
+extract applet tags.  The APPLET, EMBED and OBJECT tags are supported.
+If a given document contains multiple applet tags, all the applets
+will be loaded, with each applet appearing in its own window.
+Likewise, when multiple URLs are specified, each applet tag instance
+is given its own window.  If a given document contains no recognized
+tags the @command{appletviewer} does nothing.
+
+@smallexample
+appletviewer http://www.gnu.org/software/classpath/
+@end smallexample
+
+Use the second form to test an applet in development.  This form
+allows applet tag attributes to be supplied on the command line.  Only
+one applet may be specified using the @option{-code} option.  The
+@option{-code} option overrides the URL form -- any URLs specified will
+be ignored.
+
+@smallexample
+appletviewer -code Test.class -param datafile,data.txt
+@end smallexample
+
+@command{gcjwebplugin} uses the third form to communicate with the
+@command{appletviewer} through named pipes.
+@c man end
+
+@c man begin OPTIONS gappletviewer
+URL OPTIONS
+@table @gcctabopt
+@item -debug
+This option is not yet implemented but is provided for compatibility.
+
+@item -encoding @var{CHARSET}
+Use this option to specify an alternate character encoding for the
+specified HTML page.
+
+@end table
+
+APPLET TAG OPTIONS
+@table @gcctabopt
+@item -code @var{CODE}
+Use the @option{-code} option to specify the value of the applet tag
+@var{CODE} attribute.
+
+@item -codebase @var{CODEBASE}
+Use the @option{-codebase} option to specify the value of the applet tag
+@var{CODEBASE} attribute.
+
+@item -archive @var{ARCHIVE}
+Use the @option{-archive} option to specify the value of the applet tag
+@var{ARCHIVE} attribute.
+
+@item -width @var{WIDTH}
+Use the @option{-width} option to specify the value of the applet tag
+@var{WIDTH} attribute.
+
+@item -height @var{HEIGHT}
+Use the @option{-height} option to specify the value of the applet tag
+@var{HEIGHT} attribute.
+
+@item -param @var{NAME},@var{VALUE}
+Use the @option{-param} option to specify values for the @var{NAME}
+and @var{VALUE} attributes of an applet PARAM tag.
+
+@end table
+
+PLUGIN OPTION
+@table @gcctabopt
+@item -plugin @var{INPUT},@var{OUTPUT}
+@command{gcjwebplugin} uses the @option{-plugin} option to specify the
+named pipe the @command{appletviewer} should use for receiving commands
+(@var{INPUT}) and the one it should use for sending commands to
+@command{gcjwebplugin} (@var{OUTPUT}).
+
+@end table
+
+DEBUGGING OPTION
+@table @gcctabopt
+@item -verbose
+Use the @option{-verbose} option to have the @command{appletviewer} print
+debugging messages.
+
+@end table
+
+STANDARD OPTIONS
+
+@table @gcctabopt
+@item -help
+Use the @option{-help} option to have the @command{appletviewer} print a
+usage message, then exit.
+
+@item -version
+Use the @option{-version} option to have the @command{appletviewer} print
+its version, then exit.
+
+@item -J@var{OPTION}
+Use the @option{-J} option to pass @var{OPTION} to the virtual machine that
+will run the @command{appletviewer}.  Unlike other options, there must
+not be a space between the @option{-J} and @var{OPTION}.
+
+@end table
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node gcjwebplugin, , appletviewer Tool, Applet Tools
+@comment node-name, next, previous, up
+@section The @code{gcjwebplugin} Tool
+
+@code{gcjwebplugin} is a plugin that adds applet support to web
+browsers.  Currently @code{gcjwebplugin} only supports Mozilla-based
+browsers (e.g., Firefox, Galeon, Mozilla).
+
+@comment ----------------------------------------------------------------------
+
+@node Security Tools, Other Tools, Applet Tools, Top
+@comment node-name, next, previous, up
+@chapter Security Tools
+
+Two Security Tools are available with GNU Classpath:
+@command{jarsigner} and @command{keytool}.
+
+To avoid conflicts with other implementations, the jarsigner
+executable is called @command{gjarsigner} and the keytool executable is
+called @command{gkeytool}.
+
+@menu
+* jarsigner Tool::             Sign and verify .JAR files
+* keytool Tool::               Manage private keys and public certificates
+@end menu
+
+If while using these tools you think you found a bug, then please report it at @uref{http://www.gnu.org/software/classpath/bugs.html,classpath-bugs}.
+
+@comment ----------------------------------------------------------------------
+
+@node jarsigner Tool, keytool Tool, Security Tools, Security Tools
+@comment node-name, next, previous, up
+@section The @code{jarsigner} Tool
+@c man title gjarsigner Java ARchive (JAR) file signing and verification tool
+
+The @command{jarsigner} tool is invoked from the command line, in one
+of two forms, as follows:
+
+@example
+@c man begin SYNOPSIS gjarsigner
+jarsigner [@var{OPTION}]@dots{} @var{FILE} @var{ALIAS}
+
+jarsigner @option{-verify} [@var{OPTION}]@dots{} @var{FILE}
+@c man end
+@end example
+
+@c man begin DESCRIPTION gjarsigner
+When the first form is used, the tool signs the designated JAR file. The second form, on the other hand, is used to verify a previously signed JAR file.
+
+@var{FILE} is the .JAR file to process; i.e. to sign if the first syntax form is used, or to verify if the second syntax form is used instead.
+
+@var{ALIAS} must be a known @i{Alias} of a @i{Key Entry} in the designated @i{Key Store}. The private key material associated with this @i{Alias} is then used for signing the designated .JAR file.
+@c man end
+
+@menu
+* Common jarsigner Options::   Options used when signing or verifying a file
+* Signing Options::            Options only used when signing a .JAR file
+* Verification Options::       Options only used when verifying a .JAR file
+@end menu
+
+@comment ----------------------------------------------------------------------
+
+@node Common jarsigner Options, Signing Options, jarsigner Tool, jarsigner Tool
+@comment node-name, next, previous, up
+@c man begin OPTIONS gjarsigner
+@subsection Common options
+
+The following options may be used when the tool is used for either signing, or verifying, a .JAR file.
+
+@table @gcctabopt
+@item -verbose
+Use this option to force the tool to generate more verbose messages, during its processing.
+
+@item -internalsf
+When present, the tool will include --which otherwise it does not-- the @code{.SF} file in the @code{.DSA} generated file.
+
+@item -sectionsonly
+When present, the tool will include in the @code{.SF} generated file --which otherwise it does not-- a header containing a hash of the whole manifest file.  When that header is included, the tool can quickly check, during verification, if the hash (in the header) matches or not the manifest file.
+
+@item -provider PROVIDER_CLASS_NAME
+A fully qualified class name of a @i{Security Provider} to add to the current list of @i{Security Providers} already installed in the JVM in-use. If a provider class is specified with this option, and was successfully added to the runtime --i.e. it was not already installed-- then the tool will attempt to remove this @i{Security Provider} before exiting.
+
+@item -help
+Prints a help text similar to this one.
+
+@end table
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node Signing Options, Verification Options, Common jarsigner Options, jarsigner Tool
+@comment node-name, next, previous, up
+@c man begin OPTIONS gjarsigner
+@subsection Signing options
+
+The following options may be specified when using the tool for signing purposes.
+
+@table @gcctabopt
+@item -keystore @var{URL}
+Use this option to specify the location of the key store to use. The default value is a file URL referencing the file named @file{.keystore} located in the path returned by the call to @code{java.lang.System#getProperty(String)} using @code{user.home} as argument.
+
+If a URL was specified, but was found to be malformed --e.g. missing protocol element-- the tool will attempt to use the URL value as a file-name (with absolute or relative path-name) of a key store --as if the protocol was @code{file:}.
+
+@item -storetype @var{STORE_TYPE}
+Use this option to specify the type of the key store to use. The default value, if this option is omitted, is that of the property @code{keystore.type} in the security properties file, which is obtained by invoking the static method call @code{getDefaultType()} in @code{java.security.KeyStore}.
+
+@item -storepass @var{PASSWORD}
+Use this option to specify the password which will be used to unlock the key store. If this option is missing, the User will be prompted to provide a password.
+
+@item -keypass @var{PASSWORD}
+Use this option to specify the password which the tool will use to unlock the @i{Key Entry} associated with the designated @i{Alias}.
+
+If this option is omitted, the tool will first attempt to unlock the @i{Key Entry} using the same password protecting the key store. If this fails, you will then be prompted to provide a password.
+
+@item -sigfile @var{NAME}
+Use this option to designate a literal that will be used to construct file names for both the @code{.SF} and @code{.DSA} signature files. These files  will be generated, by the tool, and placed in the @file{META-INF} directory of the signed JAR.  Permissible characters for @var{NAME} must be in the range "a-zA-Z0-9_-".  All characters will be converted to upper-case ones.
+
+If this option is missing, the first eight characters of the @var{ALIAS} argument will be used. When this is the case, any character in @var{ALIAS} that is outside the permissible range of characters will be replaced by an underscore.
+
+@item -signedjar @var{FILE}
+Use this option to specify the file name of the signed JAR. If this option is omitted, then the signed JAR will be named the same as @var{FILE}; i.e. the input JAR file will be replaced with the signed copy.
+
+@end table
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node Verification Options, , Signing Options, jarsigner Tool
+@comment node-name, next, previous, up
+@c man begin OPTIONS gjarsigner
+@subsection Verification options
+
+The following options may be specified when using the tool for verification purposes.
+
+@table @gcctabopt
+@item -verify
+Use this option to indicate that the tool is to be used for verification purposes.
+
+@item -certs
+This option is used in conjunction with the @option{-verbose} option. When present, along with the @option{-verbose} option, the tool will print more detailed information about the certificates of the signer(s) being processed.
+
+@end table
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node keytool Tool, , jarsigner Tool, Security Tools
+@comment node-name, next, previous, up
+@section The @code{keytool} Tool
+@c man title gkeytool Manage private keys and public certificates
+
+@ignore
+@c man begin SYNOPSIS gkeytool
+keytool [@var{COMMAND}] @dots{}
+@c man end
+@end ignore
+
+@c man begin DESCRIPTION gkeytool
+Cryptographic credentials, in a Java environment, are usually stored in a @i{Key Store}. The Java SDK specifies a @i{Key Store} as a persistent container of two types of objects: @i{Key Entries} and @i{Trusted Certificates}. The security tool @command{keytool} is a Java-based application for managing those types of objects.
+
+A @i{Key Entry} represents the private key part of a key-pair used in Public-Key Cryptography, and a signed X.509 certificate which authenticates the public key part for a known entity; i.e. the owner of the key-pair. The X.509 certificate itself contains the public key part of the key-pair.
+
+A @i{Trusted Certificate} is a signed X.509 certificate issued by a trusted entity. The @i{Trust} in this context is relative to the User of the @command{keytool}. In other words, the existence of a @i{Trusted Certificate} in the @i{Key Store} processed by a @command{keytool} command implies that the User trusts the @i{Issuer} of that @i{Trusted Certificate} to also sign, and hence authenticates, other @i{Subjects} the tool may process.
+
+@i{Trusted Certificates} are important because they allow the tool to mechanically construct @i{Chains of Trust} starting from one of the @i{Trusted Certificates} in a @i{Key Store} and ending with a certificate whose @i{Issuer} is potentially unknown. A valid chain is an ordered list, starting with a @i{Trusted Certificate} (also called the @i{anchor}), ending with the target certificate, and satisfying the condition that the @i{Subject} of certificate @code{#i} is the @i{Issuer} of certificate @code{#i + 1}.
+
+The @command{keytool} is invoked from the command line as follows:
+
+@smallexample
+keytool [COMMAND] ...
+@end smallexample
+
+Multiple @var{COMMAND}s may be specified at once, each complete with its own options. @command{keytool} will parse all the arguments, before processing, and executing, each @code{COMMAND}. If an exception occurs while executing one @var{COMMAND} @command{keytool} will abort. Note however that because the implementation of the tool uses code to parse command line options that also supports GNU-style options, you have to separate each command group with a double-hyphen; e.g
+
+@smallexample
+keytool -list -- -printcert -alias mykey
+@end smallexample
+@c man end
+
+Here is a summary of the commands supported by the tool:
+
+@c man begin OPTIONS gkeytool
+@enumerate
+@item Add/Update commands
+@table @gcctabopt
+@item -genkey [@var{OPTION}]@dots{}
+Generate a new @i{Key Entry}, eventually creating a new key store.
+
+@item -import [@var{OPTION}]@dots{}
+Add, to a key store, @i{Key Entries} (private keys and certificate chains authenticating the public keys) and @i{Trusted Certificates} (3rd party certificates which can be used as @i{Trust Anchors} when building chains-of-trust).
+
+@item -selfcert [@var{OPTION}]@dots{}
+Generate a new self-signed @i{Trusted Certificate}.
+
+@item -cacert [@var{OPTION}]@dots{}
+Import a CA @i{Trusted Certificate}.
+
+@item -identitydb [@var{OPTION}]@dots{}
+@b{NOT IMPLEMENTED YET}.@*
+Import a JDK 1.1 style Identity Database.
+@end table
+
+@item Export commands
+@table @gcctabopt
+@item -certreq [@var{OPTION}]@dots{}
+Issue a @i{Certificate Signing Request} (CSR) which can be then sent to a @i{Certification Authority} (CA) to issue a certificate signed (by the CA) and authenticating the @i{Subject} of the request.
+
+@item -export [@var{OPTION}]@dots{}
+Export a certificate from a key store.
+@end table
+
+@item  Display commands
+@table @gcctabopt
+@item -list [@var{OPTION}]@dots{}
+Print one or all certificates in a key store to @code{STDOUT}.
+
+@item -printcert [@var{OPTION}]@dots{}
+Print a human-readable form of a certificate, in a designated file, to @code{STDOUT}.
+@end table
+
+@item Management commands
+@table @gcctabopt
+@item -keyclone [@var{OPTION}]@dots{}
+Clone a @i{Key Entry} in a key store.
+
+@item -storepasswd [@var{OPTION}]@dots{}
+Change the password protecting a key store.
+
+@item -keypasswd [@var{OPTION}]@dots{}
+Change the password protecting a @i{Key Entry} in a key store.
+
+@item -delete [@var{OPTION}]@dots{}
+Delete a @i{Key Entry} or a @i{Trusted Certificate} from a key store.
+@end table
+@end enumerate
+@c man end
+
+@menu
+* Getting Help::               How to get help with keytool commands
+* Common keytool Options::     Options used in more than one command
+* Distinguished Names::        X.500 Distinguished Names used in certificates
+* Add/Update Commands::        Commands for adding data to a Key Store
+* Export Commands::            Commands for exporting data from a Key Store
+* Display Commands::           Commands for displaying data in a Key Store
+* Management Commands::        Commands for managing a Key Store
+@end menu
+
+@comment ----------------------------------------------------------------------
+
+@node Getting Help, Common keytool Options, keytool Tool, keytool Tool
+@comment node-name, next, previous, up
+@subsection Getting help
+
+To get a general help text about the tool, use the @code{-help} option; e.g.
+
+@example
+@code{keytool -help}
+@end example
+
+To get more specific help text about one of the tool's command use the @code{-help} option for that command; e.g.
+
+@example
+@code{keytool -genkey -help}
+@end example
+
+In both instances, the tool will print a help text and then will exit the running JVM.
+
+It is worth noting here that the help messages printed by the tool are I18N-ready. This means that if/when the contents of the tool's @i{Message Bundle} properties file are available in languages other than English, you may see those messages in that language.
+
+@comment ----------------------------------------------------------------------
+
+@node Common keytool Options, Distinguished Names, Getting Help, keytool Tool
+@comment node-name, next, previous, up
+@c man begin OPTIONS gkeytool
+@subsection Common options
+
+The following @option{OPTION}s are used in more than one @command{COMMAND}. They are described here to reduce redundancy.
+
+@table @gcctabopt
+@anchor{alias}
+@item -alias @var{Alias}
+Every entry, be it a @i{Key Entry} or a @i{Trusted Certificate}, in a key store is uniquely identified by a user-defined @var{Alias} string. Use this option to specify the @var{Alias} to use when referring to an entry in the key store. Unless specified otherwise, a default value of @code{mykey} shall be used when this option is omitted from the command line.
+
+@anchor{keyalg}
+@item -keyalg @var{ALGORITHM}
+Use this option to specify the canonical name of the key-pair generation algorithm. The default value for this option is @code{DSS} (a synonym for the Digital Signature Algorithm also known as DSA).
+
+@anchor{keysize}
+@item -keysize @var{SIZE}
+Use this option to specify the number of bits of the shared modulus (for both the public and private keys) to use when generating new keys. A default value of @code{1024} will be used if this option is omitted from the command line.
+
+@anchor{validity}
+@item -validity @var{DAY_COUNT}
+Use this option to specify the number of days a newly generated certificate will be valid for. The default value is @code{90} (days) if this option is omitted from the command line.
+
+@anchor{storetype}
+@item -storetype @var{STORE_TYPE}
+Use this option to specify the type of the key store to use. The default value, if this option is omitted, is that of the property @code{keystore.type} in the security properties file, which is obtained by invoking the static method call @code{getDefaultType()} in @code{java.security.KeyStore}.
+
+@anchor{storepass}
+@item -storepass @var{PASSWORD}
+Use this option to specify the password protecting the key store. If this option is omitted from the command line, you will be prompted to provide a password.
+
+@anchor{keystore}
+@item -keystore @var{URL}
+Use this option to specify the location of the key store to use. The default value is a file URL referencing the file named @file{.keystore} located in the path returned by the call to @code{java.lang.System#getProperty(String)} using @code{user.home} as argument.
+
+If a URL was specified, but was found to be malformed --e.g. missing protocol element-- the tool will attempt to use the URL value as a file-name (with absolute or relative path-name) of a key store --as if the protocol was @code{file:}.
+
+@anchor{provider}
+@item -provider @var{PROVIDER_CLASS_NAME}
+A fully qualified class name of a @i{Security Provider} to add to the current list of @i{Security Providers} already installed in the JVM in-use. If a provider class is specified with this option, and was successfully added to the runtime --i.e. it was not already installed-- then the tool will attempt to removed this @i{Security Provider} before exiting.
+
+@anchor{file}
+@item -file @var{FILE}
+Use this option to designate a file to use with a command. When specified with this option, the value is expected to be the fully qualified path of a file accessible by the File System. Depending on the command, the file may be used as input or as output. When this option is omitted from the command line, @code{STDIN} will be used instead, as the source of input, and @code{STDOUT} will be used instead as the output destination.
+
+@anchor{verbose}
+@item -v
+Unless specified otherwise, use this option to enable more verbose output.
+
+@end table
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node Distinguished Names, Add/Update Commands, Common keytool Options, keytool Tool
+@comment node-name, next, previous, up
+@subsection X.500 Distinguished Names
+
+@anchor{dn}
+A @i{Distinguished Name} (or DN) MUST be supplied with some of the @code{COMMAND}s using a @code{-dname} option. The syntax of a valid value for this option MUST follow RFC-2253 specifications. Namely the following components (with their accepted meaning) will be recognized. Note that the component name is case-insensitive:
+
+@ftable @var
+@item CN
+The Common Name; e.g. @kbd{host.domain.com}
+@item OU
+The Organizational Unit; e.g. @kbd{IT Department}
+@item O
+The Organization Name; e.g. @kbd{The Sample Company}
+@item L
+The Locality Name; e.g. @kbd{Sydney}
+@item ST
+The State Name; e.g. @kbd{New South Wales}
+@item C
+The 2-letter Country identifier; e.g. @kbd{AU}
+@end ftable
+
+When specified with a @code{-dname} option, each pair of component/value will be separated from the other with a comma. Each component and value pair MUST be separated by an equal sign. For example, the following is a valid DN value:@*
+
+@format
+CN=host.domain.com, O=The Sample Company, L=Sydney, ST=NSW, C=AU
+@end format
+@*
+If the @i{Distinguished Name} is required, and no valid default value can be used, the tool will prompt you to enter the information through the console.
+
+@comment ----------------------------------------------------------------------
+
+@node Add/Update Commands, Export Commands, Distinguished Names, keytool Tool
+@comment node-name, next, previous, up
+@c man begin OPTIONS gkeytool
+@subsection Add/Update commands
+@c man end
+
+@menu
+* Command -genkey::            Generate private key and self-signed certificate
+* Command -import::            Import certificates and certificate replies
+* Command -selfcert::          Generate self-signed certificate
+* Command -cacert::            Import a CA Trusted Certificate
+* Command -identitydb::        Import JDK-1 style identities
+@end menu
+
+@comment ----------------------------------------------------------------------
+
+@node Command -genkey, Command -import, Add/Update Commands, Add/Update Commands
+@comment node-name, next, previous, up
+@c man begin OPTIONS gkeytool
+@subsubsection The @option{-genkey} command
+
+Use this command to generate a new key-pair (both private and public keys), and save these credentials in the key store as a @i{Key Entry}, associated with the designated (if was specified with the @option{-alias} option) or default (if the @option{-alias} option is omitted) @i{Alias}.
+
+The private key material will be protected with a user-defined password (see @option{-keypass} option). The public key on the other hand will be part of a self-signed X.509 certificate, which will form a 1-element chain and will be saved in the key store.
+
+@table @gcctabopt
+@item -alias @var{ALIAS}
+For more details @pxref{alias,, ALIAS}.
+
+@item -keyalg @var{ALGORITHM}
+For more details @pxref{keyalg,, ALGORITHM}.
+
+@item -keysize @var{KEY_SIZE}
+For more details @pxref{keysize,, KEY_SIZE}.
+
+@item -sigalg @var{ALGORITHM}
+The canonical name of the digital signature algorithm to use for signing certificates. If this option is omitted, a default value will be chosen based on the type of the key-pair; i.e. the algorithm that ends up being used by the -keyalg option. If the key-pair generation algorithm is @code{DSA}, the value for the signature algorithm will be @code{SHA1withDSA}. If on the other hand the key-pair generation algorithm is @code{RSA}, then the tool will use @code{MD5withRSA} as the signature algorithm.
+
+@item -dname @var{NAME}
+This a mandatory value for the command. If no value is specified --i.e. the @option{-dname} option is omitted-- the tool will prompt you to enter a @i{Distinguished Name} to use as both the @i{Owner} and @i{Issuer} of the generated self-signed certificate.
+
+For more details @pxref{dn,, X.500 DISTINGUISHED NAME}.
+
+@item -keypass @var{PASSWORD}
+Use this option to specify the password which the tool will use to protect the newly created @i{Key Entry}.
+
+If this option is omitted, you will be prompted to provide a password.
+
+@item -validity @var{DAY_COUNT}
+For more details @pxref{validity,, DAY_COUNT}.
+
+@item -storetype @var{STORE_TYPE}
+For more details @pxref{storetype,, STORE_TYPE}.
+
+@item -keystore @var{URL}
+For more details @pxref{keystore,, URL}.
+
+@item -storepass @var{PASSWORD}
+For more details @pxref{storepass,, PASSWORD}.
+
+@item -provider @var{PROVIDER_CLASS_NAME}
+For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
+
+@item -v
+For more details @pxref{verbose}.
+
+@end table
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node Command -import, Command -selfcert, Command -genkey, Add/Update Commands
+@comment node-name, next, previous, up
+@c man begin OPTIONS gkeytool
+@subsubsection The @option{-import} command
+
+Use this command to read an X.509 certificate, or a PKCS#7 @i{Certificate Reply} from a designated input source and incorporate the certificates into the key store.
+
+If the @i{Alias} does not already exist in the key store, the tool treats the certificate read from the input source as a new @i{Trusted Certificate}. It then attempts to discover a chain-of-trust, starting from that certificate and ending at another @i{Trusted Certificate}, already stored in the key store. If the @option{-trustcacerts} option is present, an additional key store, of type @code{JKS} named @file{cacerts}, and assumed to be present in @file{$@{JAVA_HOME@}/lib/security} will also be consulted if found --@code{$@{JAVA_HOME@}} refers to the location of an installed @i{Java Runtime Environment} (JRE). If no chain-of-trust can be established, and unless the @code{-noprompt} option has been specified, the certificate is printed to @code{STDOUT} and the user is prompted for a confirmation.
+
+If @i{Alias} exists in the key store, the tool will treat the certificate(s) read from the input source as a @i{Certificate Reply}, which can be a chain of certificates, that eventually would replace the chain of certificates associated with the @i{Key Entry} of that @i{Alias}. The substitution of the certificates only occurs if a chain-of-trust can be established between the bottom certificate of the chain read from the input file and the @i{Trusted Certificates} already present in the key store. Again, if the @option{-trustcacerts} option is specified, additional @i{Trusted Certificates} in the same @file{cacerts} key store will be considered. If no chain-of-trust can be established, the operation will abort.
+
+@table @gcctabopt
+@item -alias @var{ALIAS}
+For more details @pxref{alias,, ALIAS}.
+
+@item -file @var{FILE}
+For more details @pxref{file,, FILE}.
+
+@item -keypass @var{PASSWORD}
+Use this option to specify the password which the tool will use to protect the @i{Key Entry} associated with the designated @i{Alias}, when replacing this @i{Alias}' chain of certificates with that found in the certificate reply.
+
+If this option is omitted, and the chain-of-trust for the certificate reply has been established, the tool will first attempt to unlock the @i{Key Entry} using the same password protecting the key store. If this fails, you will then be prompted to provide a password.
+
+@item -noprompt
+Use this option to prevent the tool from prompting the user.
+
+@item -trustcacerts
+Use this option to indicate to the tool that a key store, of type @code{JKS}, named @file{cacerts}, and usually located in @file{lib/security} in an installed @i{Java Runtime Environment} should be considered when trying to establish chain-of-trusts.
+
+@item -storetype @var{STORE_TYPE}
+For more details @pxref{storetype,, STORE_TYPE}.
+
+@item -keystore @var{URL}
+For more details @pxref{keystore,, URL}.
+
+@item -storepass @var{PASSWORD}
+For more details @pxref{storepass,, PASSWORD}.
+
+@item -provider @var{PROVIDER_CLASS_NAME}
+For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
+
+@item -v
+For more details @pxref{verbose}.
+
+@end table
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node Command -selfcert, Command -cacert, Command -import, Add/Update Commands
+@comment node-name, next, previous, up
+@c man begin OPTIONS gkeytool
+@subsubsection The @option{-selfcert} command
+
+Use this command to generate a self-signed X.509 version 1 certificate. The newly generated certificate will form a chain of one element which will replace the previous chain associated with the designated @i{Alias} (if @option{-alias} option was specified), or the default @i{Alias} (if @option{-alias} option was omitted).
+
+@table @gcctabopt
+@item -alias @var{ALIAS}
+For more details @pxref{alias,, ALIAS}.
+
+@item -sigalg @var{ALGORITHM}
+The canonical name of the digital signature algorithm to use for signing the certificate. If this option is omitted, a default value will be chosen based on the type of the private key associated with the designated @i{Alias}. If the private key is a @code{DSA} one, the value for the signature algorithm will be @code{SHA1withDSA}. If on the other hand the private key is an @code{RSA} one, then the tool will use @code{MD5withRSA} as the signature algorithm.
+
+@item -dname @var{NAME}
+Use this option to specify the @i{Distinguished Name} of the newly generated self-signed certificate. If this option is omitted, the existing @i{Distinguished Name} of the base certificate in the chain associated with the designated @i{Alias} will be used instead.
+
+For more details @pxref{dn,, X.500 DISTINGUISHED NAME}.
+
+@item -validity @var{DAY_COUNT}
+For more details @pxref{validity,, DAY_COUNT}.
+
+@item -keypass @var{PASSWORD}
+Use this option to specify the password which the tool will use to unlock the @i{Key Entry} associated with the designated @i{Alias}.
+
+If this option is omitted, the tool will first attempt to unlock the @i{Key Entry} using the same password protecting the key store. If this fails, you will then be prompted to provide a password.
+
+@item -storetype @var{STORE_TYPE}
+For more details @pxref{storetype,, STORE_TYPE}.
+
+@item -keystore @var{URL}
+For more details @pxref{keystore,, URL}.
+
+@item -storepass @var{PASSWORD}
+For more details @pxref{storepass,, PASSWORD}.
+
+@item -provider @var{PROVIDER_CLASS_NAME}
+For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
+
+@item -v
+For more details @pxref{verbose}.
+
+@end table
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node Command -cacert, Command -identitydb, Command -selfcert, Add/Update Commands
+@comment node-name, next, previous, up
+@c man begin OPTIONS gkeytool
+@subsubsection The @option{-cacert} command
+
+Use this command to import, a CA certificate and add it to the key store as a @i{Trusted Certificate}. The @i{Alias} for this new entry will be constructed from the FILE's base-name after replacing hyphens and dots with underscores.
+
+This command is useful when used in a script that recursively visits a directory of CA certificates to populate a @code{cacerts.gkr} @i{Key Store} of trusted certificates which can then be used commands that specify the @option{-trustcacerts} option.
+
+@table @gcctabopt
+@item -file @var{FILE}
+For more details @pxref{file,, FILE}.
+
+@item -storetype @var{STORE_TYPE}
+For more details @pxref{storetype,, STORE_TYPE}.
+
+@item -keystore @var{URL}
+For more details @pxref{keystore,, URL}.
+
+@item -storepass @var{PASSWORD}
+For more details @pxref{storepass,, PASSWORD}.
+
+@item -provider @var{PROVIDER_CLASS_NAME}
+For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
+
+@item -v
+For more details @pxref{verbose}.
+
+@end table
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node Command -identitydb, , Command -cacert, Add/Update Commands
+@comment node-name, next, previous, up
+@c man begin OPTIONS gkeytool
+@subsubsection The @option{-identitydb} command
+
+@b{NOT IMPLEMENTED YET}.
+
+Use this command to import a JDK 1.1 style Identity Database.
+
+@table @gcctabopt
+@item -file @var{FILE}
+For more details @pxref{file,, FILE}.
+
+@item -storetype @var{STORE_TYPE}
+For more details @pxref{storetype,, STORE_TYPE}.
+
+@item -keystore @var{URL}
+For more details @pxref{keystore,, URL}.
+
+@item -storepass @var{PASSWORD}
+For more details @pxref{storepass,, PASSWORD}.
+
+@item -provider @var{PROVIDER_CLASS_NAME}
+For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
+
+@item -v
+For more details @pxref{verbose}.
+
+@end table
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node Export Commands, Display Commands, Add/Update Commands, keytool Tool
+@comment node-name, next, previous, up
+@c man begin OPTIONS gkeytool
+@subsection Export commands
+@c man end
+
+@menu
+* Command -certreq::           Generate Certificate Signing Requests (CSR)
+* Command -export::            Export a certificate in a Key Store
+@end menu
+
+@comment ----------------------------------------------------------------------
+
+@node Command -certreq, Command -export, Export Commands, Export Commands
+@comment node-name, next, previous, up
+@c man begin OPTIONS gkeytool
+@subsubsection The @option{-certreq} command
+
+Use this command to generate a PKCS#10 @i{Certificate Signing Request} (CSR) and write it to a designated output destination. The contents of the destination should look something like the following:
+
+@example
+-----BEGIN NEW CERTIFICATE REQUEST-----
+MI...QAwXzEUMBIGA1UEAwwLcnNuQGdudS5vcmcxGzAZBgNVBAoMElUg
+Q2...A0GA1UEBwwGU3lkbmV5MQwwCgYDVQQIDANOU1cxCzAJBgNVBACC
+...
+FC...IVwNVOfQLRX+O5kAhQ/a4RTZme2L8PnpvgRwrf7Eg8D6w==
+-----END NEW CERTIFICATE REQUEST-----
+@end example
+
+@b{IMPORTANT}: Some documentation (e.g. RSA examples) claims that the @code{Attributes} field, in the CSR is @code{OPTIONAL} while RFC-2986 implies the opposite. This implementation considers this field, by default, as @code{OPTIONAL}, unless the option @option{-attributes} is specified on the command line.
+
+@table @gcctabopt
+@item -alias @var{ALIAS}
+For more details @pxref{alias,, ALIAS}.
+
+@item -sigalg @var{ALGORITHM}
+The canonical name of the digital signature algorithm to use for signing the certificate. If this option is omitted, a default value will be chosen based on the type of the private key associated with the designated @i{Alias}. If the private key is a @code{DSA} one, the value for the signature algorithm will be @code{SHA1withDSA}. If on the other hand the private key is an @code{RSA} one, then the tool will use @code{MD5withRSA} as the signature algorithm.
+
+@item -file @var{FILE}
+For more details @pxref{file,, FILE}.
+
+@item -keypass @var{PASSWORD}
+Use this option to specify the password which the tool will use to unlock the @i{Key Entry} associated with the designated @i{Alias}.
+
+If this option is omitted, the tool will first attempt to unlock the @i{Key Entry} using the same password protecting the key store. If this fails, you will then be prompted to provide a password.
+
+@item -storetype @var{STORE_TYPE}
+For more details @pxref{storetype,, STORE_TYPE}.
+
+@item -keystore @var{URL}
+For more details @pxref{keystore,, URL}.
+
+@item -storepass @var{PASSWORD}
+For more details @pxref{storepass,, PASSWORD}.
+
+@item -provider @var{PROVIDER_CLASS_NAME}
+For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
+
+@item -v
+For more details @pxref{verbose}.
+
+@item -attributes
+Use this option to force the tool to encode a @code{NULL} DER value in the CSR as the value of the @code{Attributes} field.
+
+@end table
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node Command -export, , Command -certreq, Export Commands
+@comment node-name, next, previous, up
+@c man begin OPTIONS gkeytool
+@subsubsection The @option{-export} command
+
+Use this command to export a certificate stored in a key store to a designated output destination, either in binary format (if the @option{-v} option is specified), or in RFC-1421 compliant encoding (if the @option{-rfc} option is specified instead).
+
+@table @gcctabopt
+@item -alias @var{ALIAS}
+For more details @pxref{alias,, ALIAS}.
+
+@item -file @var{FILE}
+For more details @pxref{file,, FILE}.
+
+@item -storetype @var{STORE_TYPE}
+For more details @pxref{storetype,, STORE_TYPE}.
+
+@item -keystore @var{URL}
+For more details @pxref{keystore,, URL}.
+
+@item -storepass @var{PASSWORD}
+For more details @pxref{storepass,, PASSWORD}.
+
+@item -provider @var{PROVIDER_CLASS_NAME}
+For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
+
+@item -rfc
+Use RFC-1421 specifications when encoding the output.
+
+@item -v
+Output the certificate in binary DER encoding. This is the default output format of the command if neither @option{-rfc} nor @code{-v} options were detected on the command line. If both this option and the @option{-rfc} option are detected on the command line, the tool will opt for the RFC-1421 style encoding.
+
+@end table
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node Display Commands, Management Commands, Export Commands, keytool Tool
+@comment node-name, next, previous, up
+@c man begin OPTIONS gkeytool
+@subsection Display commands
+@c man end
+
+@menu
+* Command -list::              Display information about one or all Aliases
+* Command -printcert::         Print a certificate or a certificate fingerprint
+@end menu
+
+@comment ----------------------------------------------------------------------
+
+@node Command -list, Command -printcert, Display Commands, Display Commands
+@comment node-name, next, previous, up
+@c man begin OPTIONS gkeytool
+@subsubsection The @option{-list} command
+
+Use this command to print one or all of a key store entries to @code{STDOUT}. Usually this command will only print a @i{fingerprint} of the certificate, unless either the @option{-rfc} or the @option{-v} option is specified.
+
+@table @gcctabopt
+@item -alias @var{ALIAS}
+If this option is omitted, the tool will print ALL the entries found in the key store.
+
+For more details @pxref{alias,, ALIAS}.
+
+@item -storetype @var{STORE_TYPE}
+For more details @pxref{storetype,, STORE_TYPE}.
+
+@item -keystore @var{URL}
+For more details @pxref{keystore,, URL}.
+
+@item -storepass @var{PASSWORD}
+For more details @pxref{storepass,, PASSWORD}.
+
+@item -provider @var{PROVIDER_CLASS_NAME}
+For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
+
+@item -rfc
+Use RFC-1421 specifications when encoding the output.
+
+@item -v
+Output the certificate in human-readable format. If both this option and the @option{-rfc} option are detected on the command line, the tool will opt for the human-readable form and will not abort the command.
+
+@end table
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node Command -printcert, , Command -list, Display Commands
+@comment node-name, next, previous, up
+@c man begin OPTIONS gkeytool
+@subsubsection The @option{-printcert} command
+
+Use this command to read a certificate from a designated input source and print it to @code{STDOUT} in a human-readable form.
+
+@table @gcctabopt
+@item -file @var{FILE}
+For more details @pxref{file,, FILE}.
+
+@item -v
+For more details @pxref{verbose}.
+
+@end table
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node Management Commands, , Display Commands, keytool Tool
+@comment node-name, next, previous, up
+@c man begin OPTIONS gkeytool
+@subsection Management commands
+@c man end
+
+@menu
+* Command -keyclone::          Clone a Key Entry in a Key Store
+* Command -storepasswd::       Change the password protecting a Key Store
+* Command -keypasswd::         Change the password protecting a Key Entry
+* Command -delete::            Remove an entry in a Key Store
+@end menu
+
+@comment ----------------------------------------------------------------------
+
+@node Command -keyclone, Command -storepasswd, Management Commands, Management Commands
+@comment node-name, next, previous, up
+@c man begin OPTIONS gkeytool
+@subsubsection The @option{-keyclone} command
+
+Use this command to clone an existing @i{Key Entry} and store it under a new (different) @i{Alias} protecting, its private key material with possibly a new password.
+
+@table @gcctabopt
+@item -alias @var{ALIAS}
+For more details @pxref{alias,, ALIAS}.
+
+@item -dest @var{ALIAS}
+Use this option to specify the new @i{Alias} which will be used to identify the cloned copy of the @i{Key Entry}.
+
+@item -keypass @var{PASSWORD}
+Use this option to specify the password which the tool will use to unlock the @i{Key Entry} associated with the designated @i{Alias}.
+
+If this option is omitted, the tool will first attempt to unlock the @i{Key Entry} using the same password protecting the key store. If this fails, you will then be prompted to provide a password.
+
+@item -new @var{PASSWORD}
+Use this option to specify the password protecting the private key material of the newly cloned copy of the @i{Key Entry}.
+
+@item -storetype @var{STORE_TYPE}
+For more details @pxref{storetype,, STORE_TYPE}.
+
+@item -keystore @var{URL}
+For more details @pxref{keystore,, URL}.
+
+@item -storepass @var{PASSWORD}
+For more details @pxref{storepass,, PASSWORD}.
+
+@item -provider @var{PROVIDER_CLASS_NAME}
+For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
+
+@item -v
+For more details @pxref{verbose}.
+
+@end table
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node Command -storepasswd, Command -keypasswd, Command -keyclone, Management Commands
+@comment node-name, next, previous, up
+@c man begin OPTIONS gkeytool
+@subsubsection The @option{-storepasswd} command
+
+Use this command to change the password protecting a key store.
+
+@table @gcctabopt
+@item -new @var{PASSWORD}
+The new, and different, password which will be used to protect the designated key store.
+
+@item -storetype @var{STORE_TYPE}
+For more details @pxref{storetype,, STORE_TYPE}.
+
+@item -keystore @var{URL}
+For more details @pxref{keystore,, URL}.
+
+@item -storepass @var{PASSWORD}
+For more details @pxref{storepass,, PASSWORD}.
+
+@item -provider @var{PROVIDER_CLASS_NAME}
+For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
+
+@item -v
+For more details @pxref{verbose}.
+
+@end table
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node Command -keypasswd, Command -delete, Command -storepasswd, Management Commands
+@comment node-name, next, previous, up
+@c man begin OPTIONS gkeytool
+@subsubsection The @option{-keypasswd} command
+
+Use this command to change the password protecting the private key material of a designated @i{Key Entry}.
+
+@table @gcctabopt
+@item -alias @var{ALIAS}
+For more details @pxref{alias,, ALIAS}.
+
+Use this option to specify the password which the tool will use to unlock the @i{Key Entry} associated with the designated @i{Alias}.
+
+If this option is omitted, the tool will first attempt to unlock the @i{Key Entry} using the same password protecting the key store. If this fails, you will then be prompted to provide a password.
+
+@item -new @var{PASSWORD}
+The new, and different, password which will be used to protect the private key material of the designated @i{Key Entry}.
+
+@item -storetype @var{STORE_TYPE}
+For more details @pxref{storetype,, STORE_TYPE}.
+
+@item -keystore @var{URL}
+For more details @pxref{keystore,, URL}.
+
+@item -storepass @var{PASSWORD}
+For more details @pxref{storepass,, PASSWORD}.
+
+@item -provider @var{PROVIDER_CLASS_NAME}
+For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
+
+@item -v
+For more details @pxref{verbose}.
+
+@end table
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node Command -delete, , Command -keypasswd, Management Commands
+@comment node-name, next, previous, up
+@c man begin OPTIONS gkeytool
+@subsubsection The @option{-delete} command
+
+Use this command to delete a designated key store entry.
+
+@table @gcctabopt
+@item -alias @var{ALIAS}
+For more details @pxref{alias,, ALIAS}.
+
+@item -storetype @var{STORE_TYPE}
+For more details @pxref{storetype,, STORE_TYPE}.
+
+@item -keystore @var{URL}
+For more details @pxref{keystore,, URL}.
+
+@item -storepass @var{PASSWORD}
+For more details @pxref{storepass,, PASSWORD}.
+
+@item -provider @var{PROVIDER_CLASS_NAME}
+For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
+
+@item -v
+For more details @pxref{verbose}.
+
+@end table
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node Other Tools, I18N Issues, Security Tools, Top
+@comment node-name, next, previous, up
+@chapter Other Tools
+
+This is a list of currently undocumented classpath tools: @b{jar},
+@b{javah}, @b{gcjh}, @b{native2ascii}, @b{orbd}, @b{serialver}, @b{rmid}, @b{rmiregistry}
+and @b{tnameserv}.
+
+@menu
+* jar Tool::                   Archive tool for Java archives
+* javah Tool::                 A java header compiler
+* gcjh Tool::                  A java header compiler (old version)
+* native2ascii Tool::          An encoding converter
+* orbd Tool::                  An object request broker daemon
+* serialver Tool::             A serial version command
+* rmid Tool::                  RMI activation daemon
+* rmiregistry Tool::           Remote object registry
+* tnameserv Tool::             Naming service
+@end menu
+
+@comment ----------------------------------------------------------------------
+
+@node jar Tool, javah Tool, , Other Tools
+@comment node-name, next, previous, up
+@section The @command{jar} Tool
+@c man title gjar - Archive tool for Java archives
+
+@c man begin DESCRIPTION gjar
+
+@command{gjar} is an implementation of Sun's jar utility that comes with
+the JDK.
+
+If any file is a directory then it is processed recursively.  The
+manifest file name and the archive file name needs to be specified in
+the same order the @option{-m} and @option{-f} flags are specified.
+
+@c man end
+
+@ignore
+@c man begin SYNOPSIS gjar
+gjar @option{-ctxui} [@var{OPTIONS}] @var{jar-file} [@option{-C} @var{DIR} @var{FILE}] @var{FILE}@dots{}
+@c man end
+@end ignore
+
+@c man begin OPTIONS gjar
+
+Operation mode:
+
+@table @gcctabopt
+@item -c
+Create new archive.
+
+@item -t
+List table of contents for archive.
+
+@item -x
+Extract named (or all) files from archive.
+
+@item -u
+Update existing archive.
+
+@item -i @var{FILE}
+Compute archive index.
+@end table
+
+Operation modifiers:
+
+@table @gcctabopt
+@item -f @var{FILE}
+Specify archive file name.
+
+@item -0
+Store only; use no ZIP compression.
+
+@item -v
+Generate verbose output on standard output.
+
+@item -M
+Do not create a manifest file for the entries.
+
+@item -m @var{manifest}
+Include manifest information from specified @var{manifest} file.
+@end table
+
+File name selection:
+
+@table @gcctabopt
+@item -C @var{DIR} @var{FILE}
+Change to the @var{DIR} and include the following @var{FILE}.
+
+@item -@@
+Read the names of the files to add to the archive from stdin.  This
+option is supported only in combination with @option{-c} or @option{-u}.
+Non standard option added in the GCC version.
+@end table
+
+Standard options:
+
+@table @gcctabopt
+@item -help
+Print help text, then exit.
+@item -version
+Print version number, then exit.
+@item -J@var{OPTION}
+Pass argument to the Java runtime.
+@end table
+
+@c man end
+
+@c man begin SEEALSO gjar
+java(1), @dots{}
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node javah Tool, gcjh Tool, jar Tool, Other Tools
+@comment node-name, next, previous, up
+@section The @command{javah} Tool
+@c man title gjavah - generate header files from Java class files
+
+@c man begin DESCRIPTION gjavah
+
+The @command{gjavah} program is used to generate header files from class
+files.  It can generate both CNI and JNI header files, as well as stub
+implementation files which can be used as a basis for implementing the
+required native methods.
+
+@c man end
+
+@ignore
+@c man begin SYNOPSIS gjavah
+gjavah @dots{}
+@c man end
+@end ignore
+
+@c man begin OPTIONS gjavah
+
+@table @gcctabopt
+@item -d @var{DIR}
+Set output directory.
+
+@item -o @var{FILE}
+Set output file (only one of @option{-d} or @option{-o} may be used).
+
+@item -cmdfile @var{FILE}
+Read command file.
+
+@item -all @var{DIR}
+Operate on all class files under directory @var{DIR}.
+
+@item -stubs
+Emit stub implementation.
+
+@item -jni
+Emit JNI stubs or header (default).
+
+@item -cni
+Emit CNI stubs or header (default JNI).
+
+@item -verbose
+Set verbose mode.
+
+@item -force
+Output files should always be written.
+@end table
+
+Class path options:
+@table @gcctabopt
+@item -classpath @var{PATH}
+Set the class path.
+
+@item -I@var{DIR}
+Add directory to class path.
+
+@item -bootclasspath @var{PATH}
+Set the boot class path.
+
+@item -extdirs @var{PATH}
+Set the extension directory path.
+@end table
+
+Standard options:
+@table @gcctabopt
+@item -help
+Print help text, then exit.
+@item -version
+Print version number, then exit.
+@item -J@var{OPTION}
+Pass argument to the Java runtime.
+@end table
+@c man end
+
+@c man begin SEEALSO gjavah
+javac(1), @dots{}
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node gcjh Tool, native2ascii Tool, javah Tool, Other Tools
+@comment node-name, next, previous, up
+@section The @command{gcjh} Tool
+@c man title gcjh - generate header files from Java class files
+
+@c man begin DESCRIPTION gcjh
+
+The @code{gcjh} program is used to generate header files from class
+files.  It can generate both CNI and JNI header files, as well as stub
+implementation files which can be used as a basis for implementing the
+required native methods.  It is similar to @code{javah} but has
+slightly different command line options, and defaults to CNI.
+
+@c man end
+
+@ignore
+@c man begin SYNOPSIS gcjh
+gcjh [@var{OPTIONS}]@dots{} @var{CLASS}@dots{}
+@c man end
+@end ignore
+
+@c man begin OPTIONS gcjh
+
+See @code{javah} for a full description; this page only lists the
+additional options provided by @code{gcjh}.
+
+CNI text options
+@table @gcctabopt
+@item -add @var{text}
+Insert @var{text} into class body.
+@item -append @var{text}
+Append @var{text} after class declaration.
+@item -friend @var{text}
+Insert @var{text} as a @code{friend} declaration.
+@item -prepend @var{text}
+Insert @var{text} before start of class.
+@end table
+
+Compatibility options (unused)
+@table @gcctabopt
+@item -td @var{DIR}
+@itemx -M
+@itemx -MM
+@itemx -MD
+@itemx -MMD
+Unused compatibility option.
+@end table
+
+
+Standard options:
+@table @gcctabopt
+@item -help
+Print help text, then exit.
+@item -version
+Print version number, then exit.
+@item -J@var{OPTION}
+Pass argument to the Java runtime.
+@end table
+@c man end
+
+@c man begin SEEALSO gcjh
+javac(1), javah(1), @dots{}
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node native2ascii Tool, orbd Tool, gcjh Tool, Other Tools
+@comment node-name, next, previous, up
+@section The @command{native2ascii} Tool
+@c man title gnative2ascii - An encoding converter
+
+@c man begin DESCRIPTION gnative2ascii
+
+To be written @dots{}
+
+@c man end
+
+@ignore
+@c man begin SYNOPSIS gnative2ascii
+gnative2ascii [@var{OPTIONS}]@dots{} [@var{INPUTFILE} [@var{OUTPUTFILE}]]
+@c man end
+@end ignore
+
+@c man begin OPTIONS gnative2ascii
+
+@table @gcctabopt
+@item -encoding @var{NAME}
+Set the encoding to use.
+
+@item -reversed
+Convert from encoding to native.
+@end table
+
+Standard options:
+@table @gcctabopt
+@item -help
+Print help text, then exit.
+@item -version
+Print version number, then exit.
+@item -J@var{OPTION}
+Pass argument to the Java runtime.
+@end table
+
+@c man end
+
+@c man begin SEEALSO gnative2ascii
+javac(1), @dots{}
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node orbd Tool, serialver Tool, native2ascii Tool, Other Tools
+@comment node-name, next, previous, up
+@section The @command{orbd} object request broker daemon
+@c man title gorbd - An object request broker daemon
+
+@c man begin DESCRIPTION gorbd
+
+To be written @dots{}
+
+@c man end
+
+@ignore
+@c man begin SYNOPSIS gorbd
+gorbd @dots{}
+@c man end
+@end ignore
+
+@c man begin OPTIONS gorbd
+
+@table @gcctabopt
+@item -ORBInitialPort @var{PORT}
+Port on which persistent naming service is to be started.
+
+@item -ior @var{FILE}
+File in which to store persistent naming service's IOR reference
+
+@item -directory @var{DIR}
+Directory in which to store persistent data.
+
+@item -restart
+Restart persistent naming service, clearing persistent naming
+database.
+@end table
+
+Standard options:
+@table @gcctabopt
+@item -help
+Print help text, then exit.
+@item -version
+Print version number, then exit.
+@item -J@var{OPTION}
+Pass argument to the Java runtime.
+@end table
+
+@c man end
+
+@c man begin SEEALSO gorbd
+java(1), @dots{}
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node serialver Tool, rmid Tool, orbd Tool, Other Tools
+@comment node-name, next, previous, up
+@section The @command{serialver} version command
+@c man title gserialver version command
+
+@c man begin DESCRIPTION gserialver
+
+Print the serialVersionUID of the specified classes.
+
+@c man end
+
+@ignore
+@c man begin SYNOPSIS gserialver
+gserialver [@var{OPTIONS}]@dots{} @var{CLASS}@dots{}
+@c man end
+@end ignore
+
+@c man begin OPTIONS gserialver
+
+@table @gcctabopt
+@item -classpath @var{PATH}
+Class path to use to find classes.
+@end table
+
+Standard options:
+@table @gcctabopt
+@item -help
+Print help text, then exit.
+@item -version
+Print version number, then exit.
+@item -J@var{OPTION}
+Pass argument to the Java runtime.
+@end table
+
+@c man end
+
+@c man begin SEEALSO gserialver
+javac(1), @dots{}
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node rmid Tool, rmiregistry Tool, serialver Tool, Other Tools
+@comment node-name, next, previous, up
+@section The @command{rmid} RMI activation system daemon
+@c man title grmid - RMI activation system daemon
+
+@c man begin DESCRIPTION grmid
+
+@command{rmiregistry} starts a remote object registry on the current
+host.  If no port number is specified, then port 1099 is used.
+
+@c man end
+
+@ignore
+@c man begin SYNOPSIS grmid
+grmid [@var{OPTIONS}]@dots{}
+@c man end
+@end ignore
+
+@c man begin OPTIONS grmid
+
+Activation process control:
+@table @gcctabopt
+@item -port @var{PORT}
+Port on which activation system is to be started.
+
+@item -restart
+Restart activation system, clearing persistent naming database, if
+any.
+
+@item -stop
+Stop activation system.
+@end table
+
+Persistence:
+@table @gcctabopt
+@item -persistent
+Make activation system persistent.
+
+@item -directory @var{DIR}
+Directory in which to store persistent data.
+@end table
+
+Debugging:
+@table @gcctabopt
+@item -verbose
+Log binding events to standard out.
+@end table
+
+Standard options:
+@table @gcctabopt
+@item -help
+Print help text, then exit.
+@item -version
+Print version number, then exit.
+@item -J@var{OPTION}
+Pass argument to the Java runtime.
+@end table
+
+@c man end
+
+@c man begin SEEALSO grmid
+java(1), @dots{}
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node rmiregistry Tool, tnameserv Tool, rmid Tool, Other Tools
+@comment node-name, next, previous, up
+@section The @command{rmiregistry} Tool
+@c man title grmiregistry - Remote object registry
+
+@c man begin DESCRIPTION grmiregistry
+
+@command{grmiregistry} starts a remote object registry on the current
+host.  If no port number is specified, then port 1099 is used.
+
+@c man end
+
+@ignore
+@c man begin SYNOPSIS grmiregistry
+grmiregistry [@var{OPTIONS}]@dots{} @var{PORT}
+@c man end
+@end ignore
+
+@c man begin OPTIONS grmiregistry
+
+Registry process control:
+@table @gcctabopt
+@item -restart
+Restart RMI naming service, clearing persistent naming database, if
+any.
+
+@item -stop
+Stop RMI naming service.
+@end table
+
+Persistence:
+@table @gcctabopt
+@item -persistent
+Make RMI naming service persistent.
+
+@item -directory @var{DIR}
+Directory in which to store persistent data.
+@end table
+
+Debugging:
+@table @gcctabopt
+@item -verbose
+Log binding events to standard out.
+@end table
+
+Standard options:
+@table @gcctabopt
+@item -help
+Print help text, then exit.
+@item -version
+Print version number, then exit.
+@item -J@var{OPTION}
+Pass argument to the Java runtime.
+@end table
+
+@c man end
+
+@c man begin SEEALSO grmiregistry
+java(1), @dots{}
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node tnameserv Tool, , rmiregistry Tool, Other Tools
+@comment node-name, next, previous, up
+@section The @command{tnameserv} Tool
+@c man title gtnameserv Naming service
+
+@c man begin DESCRIPTION gtnameserv
+
+To be written @dots{}
+
+@c man end
+
+@ignore
+@c man begin SYNOPSIS gtnameserv
+tnameserv [@var{OPTIONS}]
+@c man end
+@end ignore
+
+@c man begin OPTIONS gtnameserv
+
+@table @gcctabopt
+@item -ORBInitialPort @var{PORT}
+Port on which naming service is to be started.
+
+@item -ior @var{FILE}
+File in which to store naming service's IOR reference.
+@end table
+
+Standard options:
+@table @gcctabopt
+@item -help
+Print help text, then exit.
+@item -version
+Print version number, then exit.
+@item -J@var{OPTION}
+Pass argument to the Java runtime.
+@end table
+
+@c man end
+
+@c man begin SEEALSO gtnameserv
+java(1), @dots{}
+@c man end
+
+@comment ----------------------------------------------------------------------
+
+@node I18N Issues, , Other Tools, Top
+@comment node-name, next, previous, up
+@chapter I18N Issues
+
+Some tools --@pxref{Security Tools}-- allow using other than the English language when prompting the User for input, and outputing messages. This chapter describes the elements used to offer this support and how they can be adapted for use with specific languages.
+
+@menu
+* Language Resources::         Where resources are located
+* Message Formats::            How messages are internationalized
+@end menu
+
+@comment ----------------------------------------------------------------------
+
+@node Language Resources, Message Formats, I18N Issues, I18N Issues
+@comment node-name, next, previous, up
+@section Language-specific resources
+
+The Tools use Java @code{ResourceBundle}s to store messages, and message templates they use at runtime to generate the message text itself, depending on the locale in use at the time.
+
+The @i{Resource Bundles} these tools use are essentially Java @i{Properties} files consisting of a set of @i{Name/Value} pairs. The @i{Name} is the @i{Propery Name} and the @i{Value} is a substitution string that is used when the code references the associated @i{Name}. For example the following is a line in a @i{Resource Bundle} used by the @code{keytool} Tool:
+
+@example
+Command.23=A correct key password MUST be provided
+@end example
+
+When the tool needs to signal a mandatory but missing key password, it would reference the property named @code{Command.23} and the message "@kbd{A correct key password MUST be provided}" will be used instead. This indirect referencing of "resources" permits replacing, as late as possible, the English strings with strings in other languages, provided of course @i{Resource Bundles} in those languages are provided.
+
+For the GNU Classpath Tools described in this Guide, the @i{Resource Bundles} are files named @file{messages[_ll[_CC[_VV]]].properties} where:
+
+@ftable @var
+@item ll
+Is the 2-letter code for the Language,
+@item CC
+Is the 2-letter code for the Region, and
+@item VV
+Is the 2-letter code for the Variant of the language.
+@end ftable
+
+The complete list of language codes can be found at @uref{http://ftp.ics.uci.edu/pub/ietf/http/related/iso639.txt, Code for the representation of names of languages}. A similar list for the region codes can be found at @uref{http://userpage.chemie.fu-berlin.de/diverse/doc/ISO_3166.html, ISO 3166 Codes (Countries)}.
+
+The location of the @i{Resource Bundles} for the GNU Classpath Tools is specific to each tool. The next table shows where these files are found in a standard GNU Classpath distribution:
+
+@ftable @code
+@item jarsigner
+@file{gnu/classpath/tools/jarsigner}
+@item keytool
+@file{gnu/classpath/tools/keytool}
+@end ftable
+
+The collection of @i{Resource Bundles} in a location act as an inverted tree with a parent-child relationship. For example suppose in the @file{gnu/classpath/tools/keytool} there are 3 message bundles named:
+
+@enumerate
+@item @code{messages.properties}
+@item @code{messages_fr.properties}
+@item @code{messages_fr_FR.properties}
+@end enumerate
+
+In the above example, bundle #1 will act as the parent of bundle #2, which in turn will act as the parent for bundle #3. This ordering is used by the Java runtime to choose which file to load based on the set Locale. For example if the Locale is @code{fr_CH}, @code{messages_fr.properties} will be used because (a) @code{messages_fr_CH.properties} does not exist, but (b) @code{messages_fr.properties} is the parent for the required bundle, and it exists. As another example, suppose the Locale was set to @code{en_AU}; then the tool will end up using @code{messages.properties} because (a) @code{messages_en_AU.properties} does not exist, (b) @code{messages_en.properties} which is the parent for the required bundle does not exist, but (c) @code{messages.properties} exists and is the root of the hierarchy.
+
+You can see from the examples above that @file{messages.properties} is the safety net that the Java runtime falls back to when failing to find a specific bunlde and its parent(s). This file is always provided with the Tool. In time, more localized versions will be included to cater for other languages.
+
+In the meantime, if you are willing to contribute localized versions of these resources, grab the @file{messages.properties} for a specific tool; translate it; save it with the appropriate language and region suffix and mail it to @code{classpath@@gnu.org}.
+
+@comment ----------------------------------------------------------------------
+
+@node Message Formats, , Language Resources, I18N Issues
+@comment node-name, next, previous, up
+@section Message formats
+
+If you open any of the @file{messages.properties} described in the previous section, you may see properties that look like so:
+
+@example
+Command.67=Issuer: @{0@}
+Command.68=Serial number: @{0,number@}
+Command.69=Valid from: @{0,date,full@} - @{0,time,full@}
+Command.70=\ \ \ \ \ until: @{0,date,full@} - @{0,time,full@}
+@end example
+
+These are @i{Message Formats} used by the tools to customize a text string that will then be used either as a prompt for User input or as output.
+
+If you are translating a @file{messages.properties} be careful not to alter text between curly braces.
+
+@comment ----------------------------------------------------------------------
+
+@bye
Index: libjava/classpath/doc/hacking.texinfo
===================================================================
--- libjava/classpath/doc/hacking.texinfo	(revision 122231)
+++ libjava/classpath/doc/hacking.texinfo	(working copy)
@@ -1,1733 +0,0 @@
-\input texinfo @c -*-texinfo-*-
-
-@c %**start of header
-@setfilename hacking.info
-@settitle GNU Classpath Hacker's Guide
-@c %**end of header
-
-@setchapternewpage off
-
-@ifinfo
-This file contains important information you will need to know if you
-are going to hack on the GNU Classpath project code.
-
-Copyright (C) 1998,1999,2000,2001,2002,2003,2004, 2005 Free Software Foundation, Inc.
-
-@ifnotplaintext
-@dircategory GNU Libraries
-@direntry
-* Classpath Hacking: (hacking).   GNU Classpath Hacker's Guide
-@end direntry
-@end ifnotplaintext
-@end ifinfo
-
-@titlepage
-@title GNU Classpath Hacker's Guide
-@author Aaron M. Renn
-@author Paul N. Fisher
-@author John Keiser
-@author C. Brian Jones
-@author Mark J. Wielaard
-
-@page
-@vskip 0pt plus 1filll
-Copyright @copyright{} 1998,1999,2000,2001,2002,2003,2004 Free Software Foundation, Inc.
-@sp 2
-Permission is granted to make and distribute verbatim copies of
-this document provided the copyright notice and this permission notice
-are preserved on all copies.
-
-Permission is granted to copy and distribute modified versions of this
-document under the conditions for verbatim copying, provided that the
-entire resulting derived work is distributed under the terms of a
-permission notice identical to this one.
-
-Permission is granted to copy and distribute translations of this manual
-into another language, under the above conditions for modified versions,
-except that this permission notice may be stated in a translation
-approved by the Free Software Foundation.
-
-@end titlepage
-
-@ifinfo
-@node Top, Introduction, (dir), (dir)
-@top GNU Classpath Hacker's Guide
-
-This document contains important information you'll want to know if
-you want to hack on GNU Classpath, Essential Libraries for Java, to
-help create free core class libraries for use with virtual machines
-and compilers for the java programming language.
-@end ifinfo
-
-@menu
-* Introduction::                An introduction to the GNU Classpath project
-* Requirements::                Very important rules that must be followed
-* Volunteering::                So you want to help out
-* Project Goals::               Goals of the GNU Classpath project
-* Needed Tools and Libraries::  A list of programs and libraries you will need
-* Programming Standards::       Standards to use when writing code
-* Hacking Code::                Working on code, Working with others
-* Programming Goals::           What to consider when writing code
-* API Compatibility::           How to handle serialization and deprecated methods
-* Specification Sources::       Where to find class library specs
-* Naming Conventions::          How files and directories are named
-* Character Conversions::       Working on Character conversions
-* Localization::                How to handle localization/internationalization
-
-@detailmenu
- --- The Detailed Node Listing ---
-
-Programming Standards
-
-* Source Code Style Guide::     
-
-Working on the code, Working with others
-
-* Branches::                    
-* Writing ChangeLogs::          
-
-Working with branches
-
-* Writing ChangeLogs::          
-
-Programming Goals
-
-* Portability::                 Writing Portable Software                
-* Utility Classes::             Reusing Software
-* Robustness::                  Writing Robust Software               
-* Java Efficiency::             Writing Efficient Java            
-* Native Efficiency::           Writing Efficient JNI          
-* Security::                    Writing Secure Software
-
-API Compatibility
-
-* Serialization::               Serialization
-* Deprecated Methods::          Deprecated methods
-
-Localization
-
-* String Collation::            Sorting strings in different locales
-* Break Iteration::             Breaking up text into words, sentences, and lines
-* Date Formatting and Parsing::  Locale specific date handling
-* Decimal/Currency Formatting and Parsing::  Local specific number handling
-
-@end detailmenu
-@end menu
-
-@node Introduction, Requirements, Top, Top
-@comment node-name, next, previous, up
-@chapter Introduction
-
-The GNU Classpath Project is a dedicated to providing a 100% free,
-clean room implementation of the standard core class libraries for
-compilers and runtime environments for the java programming language.
-It offers free software developers an alternative core library
-implementation upon which larger java-like programming environments
-can be build.  The GNU Classpath Project was started in the Spring of
-1998 as an official Free Software Foundation project.  Most of the
-volunteers working on GNU Classpath do so in their spare time, but a
-couple of projects based on GNU Classpath have paid programmers to
-improve the core libraries.  We appreciate everyone's efforts in the
-past to improve and help the project and look forward to future
-contributions by old and new members alike.
-
-@node Requirements, Volunteering, Introduction, Top
-@comment node-name, next, previous, up
-@chapter Requirements
-
-Although GNU Classpath is following an open development model where input
-from developers is welcome, there are certain base requirements that
-need to be met by anyone who wants to contribute code to this project.
-They are mostly dictated by legal requirements and are not arbitrary
-restrictions chosen by the GNU Classpath team.
-
-You will need to adhere to the following things if you want to donate
-code to the GNU Classpath project:
-
-@itemize @bullet
-@item
-@strong{Never under any circumstances refer to proprietary code while
-working on GNU Classpath.}  It is best if you have never looked at
-alternative proprietary core library code at all.  To reduce
-temptation, it would be best if you deleted the @file{src.zip} file
-from your proprietary JDK distribution (note that recent versions of
-GNU Classpath and the compilers and environments build on it are
-mature enough to not need any proprietary implementation at all when
-working on GNU Classpath, except in exceptional cases where you need
-to test compatibility issues pointed out by users).  If you have
-signed Sun's non-disclosure statement, then you unfortunately cannot
-work on Classpath code at all.  If you have any reason to believe that
-your code might be ``tainted'', please say something on the mailing
-list before writing anything.  If it turns out that your code was not
-developed in a clean room environment, we could be very embarrassed
-someday in court.  Please don't let that happen.
-
-@item
-@strong{Never decompile proprietary class library implementations.}  While
-the wording of the license in Sun's Java 2 releases has changed, it is
-not acceptable, under any circumstances, for a person working on
-GNU Classpath to decompile Sun's class libraries.  Allowing the use of
-decompilation in the GNU Classpath project would open up a giant can of
-legal worms, which we wish to avoid.
-
-@item
-Classpath is licensed under the terms of the
-@uref{http://www.fsf.org/copyleft/gpl.html,GNU General Public
-License}, with a special exception included to allow linking with
-non-GPL licensed works as long as no other license would restrict such
-linking.  To preserve freedom for all users and to maintain uniform
-licensing of Classpath, we will not accept code into the main
-distribution that is not licensed under these terms.  The exact
-wording of the license of the current version of GNU Classpath can be
-found online from the
-@uref{http://www.gnu.org/software/classpath/license.html, GNU
-Classpath license page} and is of course distributed with current
-snapshot release from @uref{ftp://ftp.gnu.org/gnu/classpath/} or by
-obtaining a copy of the current CVS tree.
-
-@item
-GNU Classpath is GNU software and this project is being officially sponsored
-by the @uref{http://www.fsf.org/,Free Software Foundation}.  Because of
-this, the FSF will hold copyright to all code developed as part of
-GNU Classpath.  This will allow them to pursue copyright violators in court,
-something an individual developer may neither have the time nor
-resources to do.  Everyone contributing code to GNU Classpath will need to
-sign a copyright assignment statement.  Additionally, if you are
-employed as a programmer, your employer may need to sign a copyright
-waiver disclaiming all interest in the software.  This may sound harsh,
-but unfortunately, it is the only way to ensure that the code you write
-is legally yours to distribute.
-@end itemize
-
-@node Volunteering, Project Goals, Requirements, Top
-@comment node-name, next, previous, up
-@chapter Volunteering to Help
-
-The GNU Classpath project needs volunteers to help us out.  People are
-needed to write unimplemented core packages, to test GNU Classpath on
-free software programs written in the java programming language, to
-test it on various platforms, and to port it to platforms that are
-currently unsupported.
-
-While pretty much all contributions are welcome (but see 
-@pxref{Requirements}) it is always preferable that volunteers do the
-whole job when volunteering for a task.  So when you volunteer to write
-a Java package, please be willing to do the following:
-
-@itemize @bullet
-@item
-Implement a complete drop-in replacement for the particular package.
-That means implementing any ``internal'' classes.  For example, in the
-java.net package, there are non-public classes for implementing sockets.
-Without those classes, the public socket interface is useless.  But do
-not feel obligated to completely implement all of the functionality at
-once.  For example, in the java.net package, there are different types
-of protocol handlers for different types of URL's.  Not all of these
-need to be written at once.
-
-@item
-Please write complete and thorough API documentation comments for
-every public and protected method and variable.  These should be
-superior to Sun's and cover everything about the item being
-documented.
-
-@item
-Please write a regression test package that can be used to run tests
-of your package's functionality.  GNU Classpath uses the
-@uref{http://sources.redhat.com/mauve/,Mauve project} for testing the
-functionality of the core class libraries.  The Classpath Project is
-fast approaching the point in time where all modifications to the
-source code repository will require appropriate test cases in Mauve to
-ensure correctness and prevent regressions.  
-@end itemize
-
-Writing good documentation, tests and fixing bugs should be every
-developer's top priority in order to reach the elusive release of
-version 1.0.
-
-@node Project Goals, Needed Tools and Libraries, Volunteering, Top
-@comment node-name, next, previous, up
-@chapter Project Goals
-
-The goal of the Classpath project is to produce a
-@uref{http://www.fsf.org/philosophy/free-sw.html,free} implementation of
-the standard class library for Java.  However, there are other more
-specific goals as to which platforms should be supported.
-
-Classpath is targeted to support the following operating systems:
-
-@enumerate
-@item
-Free operating systems.  This includes GNU/Linux, GNU/Hurd, and the free
-BSDs.
-
-@item
-Other Unix-like operating systems.
-
-@item
-Platforms which currently have no Java support at all.
-
-@item 
-Other platforms such as MS-Windows.
-@end enumerate
-
-While free operating systems are the top priority, the other priorities
-can shift depending on whether or not there is a volunteer to port
-Classpath to those platforms and to test releases.
-
-Eventually we hope the Classpath will support all JVM's that provide
-JNI or CNI support.  However, the top priority is free JVM's.  A small
-list of Compiler/VM environments that are currently actively
-incorporating GNU Classpath is below.  A more complete overview of
-projects based on GNU classpath can be found online at
-@uref{http://www.gnu.org/software/classpath/stories.html,the GNU
-Classpath stories page}.
-
-@enumerate
-@item
-@uref{http://gcc.gnu.org/java/,GCJ}
-@item 
-@uref{http://jamvm.sourceforge.net/,jamvm}
-@item 
-@uref{http://kissme.sourceforge.net/,Kissme}
-@item
-@uref{http://www.ibm.com/developerworks/oss/jikesrvm/,Jikes RVM}
-@item
-@uref{http://www.sablevm.org/,SableVM}
-@item
-@uref{http://www.kaffe.org/,Kaffe}
-@end enumerate
-
-As with OS platform support, this priority list could change if a
-volunteer comes forward to port, maintain, and test releases for a
-particular JVM.  Since gcj is part of the GNU Compiler Collective it
-is one of the most important targets.  But since it doesn't currently
-work out of the box with GNU Classpath it is currently not the easiest
-target.  When hacking on GNU Classpath the easiest is to use
-compilers and runtime environments that that work out of the box with
-it, such as the jikes compiler and the runtime environments jamvm and
-kissme.  But you can also work directly with targets like gcj and
-kaffe that have their own copy of GNU Classpath currently.  In that
-case changes have to be merged back into GNU Classpath proper though,
-which is sometimes more work.  SableVM is starting to migrate from an
-integrated GNU Classpath version to being usable with GNU Classpath
-out of the box.
-
-
-The initial target version for Classpath is the 1.1 spec.  Higher
-versions can be implemented (and have been implemented, including lots
-of 1.4 functionality) if desired, but please do not create classes
-that depend on features in those packages unless GNU Classpath already
-contains those features.  GNU Classpath has been free of any
-proprietary dependencies for a long time now and we like to keep it
-that way.  But finishing, polishing up, documenting, testing and
-debugging current functionality is of higher priority then adding new
-functionality.
-
-@node Needed Tools and Libraries, Programming Standards, Project Goals, Top
-@comment node-name, next, previous, up
-@chapter Needed Tools and Libraries
-
-If you want to hack on Classpath, you should at least download and
-install the following tools.  And try to familiarize yourself with
-them.  Although in most cases having these tools installed will be all
-you really need to know about them.  Also note that when working on
-(snapshot) releases only GCC 3.3+ (plus a free VM from the list above
-and the libraries listed below) is needed.  The other tools are only
-needed when working directly on the CVS version.
-
-@itemize @bullet
-@item
-GCC 3.3+
-@item
-CVS 1.11+
-@item
-automake 1.7+
-@item
-autoconf 2.59+
-@item
-libtool 1.4.2+
-@item
-GNU m4 1.4
-@item
-texinfo 4.2+
-@end itemize
-
-All of these tools are available from
-@uref{ftp://gnudist.gnu.org/pub/gnu/,gnudist.gnu.org} via anonymous
-ftp, except CVS which is available from
-@uref{http://www.cvshome.org/,www.cvshome.org}.  They are fully
-documented with texinfo manuals.  Texinfo can be browsed with the
-Emacs editor, or with the text editor of your choice, or transformed
-into nicely printable Postscript.
-
-Here is a brief description of the purpose of those tools.
-
-@table @b
-
-@item GCC
-The GNU Compiler Collection. This contains a C compiler (gcc) for
-compiling the native C code and a compiler for the java programming
-language (gcj).  You will need at least gcj version 3.3 or higher.  If
-that version is not available for your platform you can try the
-@uref{http://www.jikes.org/, jikes compiler}.  We try to keep all code
-compilable with both gcj and jikes at all times.
-
-@item CVS  
-A version control system that maintains a centralized Internet
-repository of all code in the Classpath system.
-
-@item automake  
-This tool automatically creates Makefile.in files from Makefile.am
-files.  The Makefile.in is turned into a Makefile by autoconf.  Why
-use this?  Because it automatically generates every makefile target
-you would ever want (clean, install, dist, etc) in full compliance
-with the GNU coding standards.  It also simplifies Makefile creation
-in a number of ways that cannot be described here.  Read the docs for
-more info.
-
-@item autoconf  
-Automatically configures a package for the platform on which it is
-being built and generates the Makefile for that platform.
-
-@item libtool  
-Handles all of the zillions of hairy platform specific options needed
-to build shared libraries.
-
-@item m4
-The free GNU replacement for the standard Unix macro processor.
-Proprietary m4 programs are broken and so GNU m4 is required for
-autoconf to work though knowing a lot about GNU m4 is not required to
-work with autoconf.
-
-@item perl
-Larry Wall's scripting language.  It is used internally by automake.
-
-@item texinfo
-Manuals and documentation (like this guide) are written in texinfo.
-Texinfo is the official documentation format of the GNU project.
-Texinfo uses a single source file to produce output in a number of formats,
-both online and printed (dvi, info, html, xml, etc.). This means that
-instead of writing different documents for online information and another
-for a printed manual, you need write only one document. And when the work
-is revised, you need revise only that one document.
-
-@end table
-
-
-For compiling the native AWT libraries you need to have the following
-libraries installed:
-
-@table @b
-@item GTK+ 2.2.x
-@uref{http://www.gtk.org/,GTK+} is a multi-platform toolkit for
-creating graphical user interfaces.  It is used as the basis of the
-GNU desktop project GNOME.
-
-@item gdk-pixbuf
-@uref{http://www.gnome.org/start/,gdk-pixbuf} is a GNOME library for
-representing images.
-@end table
-
-
-GNU Classpath comes with a couple of libraries included in the source
-that are not part of GNU Classpath proper, but that have been included
-to provide certain needed functionality.  All these external libraries
-should be clearly marked as such.  In general we try to use as much as
-possible the clean upstream versions of these sources.  That way
-merging in new versions will be easiest.  You should always try to get
-bug fixes to these files accepted upstream first.  Currently we
-include the following 'external' libraries.  Most of these sources are
-included in the @file{external} directory.  That directory also
-contains a @file{README} file explaining how to import newer versions.
-
-@table @b
-
-@item GNU jaxp
-Can be found in @file{external/jaxp}.  Provides javax.xml, org.w3c and
-org.xml packages.  Upstream is
-@uref{http://www.gnu.org/software/classpathx/,GNU ClasspathX}.
-
-@item fdlibm
-Can be found in @file{native/fdlibm}.  Provides native implementations
-of some of the Float and Double operations.  Upstream is
-@uref{http://gcc.gnu.org/java/,libgcj}, they sync again with the
-'real' upstream @uref{http://www.netlib.org/fdlibm/readme}.  See also
-java.lang.StrictMath.
-
-@end table
-
-
-@node Programming Standards, Hacking Code, Needed Tools and Libraries, Top
-@comment node-name, next, previous, up
-@chapter Programming Standards
-
-For C source code, follow the
-@uref{http://www.gnu.org/prep/standards/,GNU Coding Standards}.
-The standards also specify various things like the install directory
-structure.  These should be followed if possible.
-
-For Java source code, please follow the
-@uref{http://www.gnu.org/prep/standards/,GNU Coding
-Standards}, as much as possible.  There are a number of exceptions to
-the GNU Coding Standards that we make for GNU Classpath as documented
-in this guide.  We will hopefully be providing developers with a code
-formatting tool that closely matches those rules soon.
-
-For API documentation comments, please follow
-@uref{http://java.sun.com/products/jdk/javadoc/writingdoccomments.html,How
-to Write Doc Comments for Javadoc}.  We would like to have a set of
-guidelines more tailored to GNU Classpath as part of this document.
-
-@menu
-* Source Code Style Guide::     
-@end menu
-
-@node Source Code Style Guide,  , Programming Standards, Programming Standards
-@comment node-name, next, previous, up
-@section Java source coding style
-
-Here is a list of some specific rules used when hacking on GNU
-Classpath java source code. We try to follow the standard
-@uref{http://www.gnu.org/prep/standards/,GNU Coding Standards}
-for that. There are lots of tools that can automatically generate it
-(although most tools assume C source, not java source code) and it
-seems as good a standard as any. There are a couple of exceptions and
-specific rules when hacking on GNU Classpath java source code however.
-The following lists how code is formatted (and some other code
-conventions):
-
-
-@itemize @bullet
-
-@item
-Java source files in GNU Classpath are encoded using UTF-8.  However,
-ordinarily it is considered best practice to use the ASCII subset of
-UTF-8 and write non-ASCII characters using \u escapes.
-
-@item
-If possible, generate specific imports (expand) over java.io.* type
-imports. Order by gnu, java, javax, org. There must be one blank line
-between each group. The imports themselves are ordered alphabetically by
-package name. Classes and interfaces occur before sub-packages. The
-classes/interfaces are then also sorted alphabetical. Note that uppercase
-characters occur before lowercase characters.
-
-@example
-import gnu.java.awt.EmbeddedWindow;
-
-import java.io.IOException;
-import java.io.InputStream;
-
-import javax.swing.JFrame;
-@end example
-
-@item
-Blank line after package statement, last import statement, classes,
-interfaces, methods.
-
-@item
-Opening/closing brace for class and method is at the same level of
-indent as the declaration.  All other braces are indented and content
-between braces indented again.
-
-@item
-Since method definitions don't start in column zero anyway (since they
-are always inside a class definition), the rational for easy grepping
-for ``^method_def'' is mostly gone already. Since it is customary for
-almost everybody who writes java source code to put modifiers, return
-value and method name on the same line, we do too.
-
-@c fixme Another rational for always indenting the method definition is that itmakes it a bit easier to distinguish methods in inner and anonymousclasses from code in their enclosing context. NEED EXAMPLE.
-
-@item
-Implements and extends on separate lines, throws too.  Indent extends,
-implements, throws.  Apply deep indentation for method arguments.
-
-@c fixme Needs example.
-
-@item
-Don't add a space between a method or constructor call/definition and
-the open-bracket. This is because often the return value is an object on
-which you want to apply another method or from which you want to access
-a field.
-        
-Don't write:
-
-@example
-  getToolkit ().createWindow (this);
-@end example
-
-But write:
-@example
-  getToolkit().createWindow(this);
-@end example
-
-@item
-The GNU Coding Standard it gives examples for almost every construct
-(if, switch, do, while, etc.).  One missing is the try-catch construct
-which should be formatted as:
-
-@example
-  try
-    @{
-      //
-    @}
-  catch (...)
-    @{
-      //
-    @}
-@end example
-
-@item
-Wrap lines at 80 characters after assignments and before operators.
-Wrap always before extends, implements, throws, and labels.
-
-@item
-Don't put multiple class definitions in the same file, except for
-inner classes. File names (plus .java) and class names should be the
-same.
-
-@item
-Don't catch a @code{NullPointerException} as an alternative to simply
-checking for @code{null}.  It is clearer and usually more efficient
-to simply write an explicit check.
-
-For instance, don't write:
-
-@example
-try
-  @{
-    return foo.doit();
-  @}
-catch (NullPointerException _)
-  @{
-    return 7;
-  @}
-@end example
-
-If your intent above is to check whether @samp{foo} is @code{null},
-instead write:
-
-@example
-if (foo == null)
-  return 7;
-else
-  return foo.doit();
-@end example
-
-@item
-Don't use redundant modifiers or other redundant constructs.  Here is
-some sample code that shows various redundant items in comments:
-
-@example
-/*import java.lang.Integer;*/
-/*abstract*/ interface I @{
-   /*public abstract*/ void m();
-   /*public static final*/ int i = 1;
-   /*public static*/ class Inner @{@}
-@}
-final class C /*extends Object*/ @{
-   /*final*/ void m() @{@}
-@}
-@end example
-
-Note that Jikes will generate warnings for redundant modifiers if you
-use @code{+Predundant-modifiers} on the command line.
-
-@item
-Modifiers should be listed in the standard order recommended by the
-JLS.  Jikes will warn for this when given @code{+Pmodifier-order}.
-
-@item
-Because the output of different compilers differs, we have
-standardized on explicitly specifying @code{serialVersionUID} in
-@code{Serializable} classes in Classpath.  This field should be
-declared as @code{private static final}.  Note that a class may be
-@code{Serializable} without being explicitly marked as such, due to
-inheritance.  For instance, all subclasses of @code{Throwable} need to
-have @code{serialVersionUID} declared.
-@c fixme index
-@c fixme link to the discussion
-
-@item
-Don't declare unchecked exceptions in the @code{throws} clause of a
-method.  However, if throwing an unchecked exception is part of the
-method's API, you should mention it in the Javadoc.  There is one
-important exception to this rule, which is that a stub method should
-be marked as throwing @code{gnu.classpath.NotImplementedException}.
-This will let our API comparison tools note that the method is not
-fully implemented.
-
-@item
-When overriding @code{Object.equals}, remember that @code{instanceof}
-filters out @code{null}, so an explicit check is not needed.
-
-@item
-When catching an exception and rethrowing a new exception you should
-``chain'' the Throwables.  Don't just add the String representation of
-the caught exception.
-
-@example
-  try
-    @{
-      // Some code that can throw
-    @}
-  catch (IOException ioe)
-    @{
-      throw (SQLException) new SQLException("Database corrupt").setCause(ioe);
-    @}
-@end example
-
-@item
-Avoid the use of reserved words for identifiers.  This is obvious with those
-such as @code{if} and @code{while} which have always been part of the Java
-programming language, but you should be careful about accidentally using
-words which have been added in later versions.  Notable examples are
-@code{assert} (added in 1.4) and @code{enum} (added in 1.5).  Jikes will warn
-of the use of the word @code{enum}, but, as it doesn't yet support the 1.5
-version of the language, it will still allow this usage through.  A
-compiler which supports 1.5 (e.g. the Eclipse compiler, ecj) will simply
-fail to compile the offending source code.
-
-@c fixme Describe Anonymous classes (example).
-@c fixme Descibe Naming conventions when different from GNU Coding Standards.
-@c fixme Describee API doc javadoc tags used.
-
-@end itemize
-
-Some things are the same as in the normal GNU Coding Standards:
-
-@itemize @bullet
-
-@item
-Unnecessary braces can be removed, one line after an if, for, while as
-examples.
-
-@item
-Space around operators (assignment, logical, relational, bitwise,
-mathematical, shift).
-
-@item
-Blank line before single-line comments, multi-line comments, javadoc
-comments.
-
-@item
-If more than 2 blank lines, trim to 2.
-
-@item
-Don't keep commented out code.  Just remove it or add a real comment
-describing what it used to do and why it is changed to the current
-implementation.
-@end itemize
-
-
-@node Hacking Code, Programming Goals, Programming Standards, Top
-@comment node-name, next, previous, up
-@chapter Working on the code, Working with others
-
-There are a lot of people helping out with GNU Classpath.  Here are a
-couple of practical guidelines to make working together on the code
-smoother.
-
-The main thing is to always discuss what you are up to on the
-mailinglist.  Making sure that everybody knows who is working on what
-is the most important thing to make sure we cooperate most
-effectively.
-
-We maintain a
-@uref{http://www.gnu.org/software/classpath/tasks.html,Task List}
-which contains items that you might want to work on.
-
-Before starting to work on something please make sure you read this
-complete guide.  And discuss it on list to make sure your work does
-not duplicate or interferes with work someone else is already doing.
-Always make sure that you submit things that are your own work.  And
-that you have paperwork on file (as stated in the requirements
-section) with the FSF authorizing the use of your additions.
-
-Technically the GNU Classpath project is hosted on
-@uref{http://savannah.gnu.org/,Savannah} a central point for
-development, distribution and maintenance of GNU Software.  Here you
-will find the
-@uref{https://savannah.gnu.org/projects/classpath/,project page}, bug
-reports, pending patches, links to mailing lists, news items and CVS.
-
-You can find instructions on getting a CVS checkout for classpath at
-@uref{https://savannah.gnu.org/cvs/?group=classpath}.
-
-You don't have to get CVS commit write access to contribute, but it is
-sometimes more convenient to be able to add your changes directly to
-the project CVS. Please contact the GNU Classpath savannah admins to
-arrange CVS access if you would like to have it.
-
-Make sure to be subscribed to the commit-classpath mailinglist while
-you are actively hacking on Classpath.  You have to send patches (cvs
-diff -uN) to this list before committing.
-
-We really want to have a pretty open check-in policy.  But this means
-that you should be extra careful if you check something in.  If at all
-in doubt or if you think that something might need extra explaining
-since it is not completely obvious please make a little announcement
-about the change on the mailinglist.  And if you do commit something
-without discussing it first and another GNU Classpath hackers asks for
-extra explanation or suggests to revert a certain commit then please
-reply to the request by explaining why something should be so or if
-you agree to revert it.  (Just reverting immediately is OK without
-discussion, but then please don't mix it with other changes and please
-say so on list.)
-
-Patches that are already approved for libgcj or also OK for Classpath.
-(But you still have to send a patch/diff to the list.)  All other
-patches require you to think whether or not they are really OK and
-non-controversial, or if you would like some feedback first on them
-before committing.  We might get real commit rules in the future, for
-now use your own judgment, but be a bit conservative.
-
-Always contact the GNU Classpath maintainer before adding anything
-non-trivial that you didn't write yourself and that does not come from
-libgcj or from another known GNU Classpath or libgcj hacker.  If you
-have been assigned to commit changes on behalf of another project or
-a company always make sure they come from people who have signed the
-papers for the FSF and/or fall under the arrangement your company made
-with the FSF for contributions.  Mention in the ChangeLog who actually
-wrote the patch.
-
-Commits for completely unrelated changes they should be committed
-separately (especially when doing a formatting change and a logical
-change, do them in two separate commits). But do try to do a commit of
-as much things/files that are done at the same time which can
-logically be seen as part of the same change/cleanup etc.
-
-When the change fixes an important bug or adds nice new functionality
-please write a short entry for inclusion in the @file{NEWS} file.  If it
-changes the VM interface you must mention that in both the @file{NEWS} file
-and the VM Integration Guide.
-
-All the ``rules'' are really meant to make sure that GNU Classpath
-will be maintainable in the long run and to give all the projects that
-are now using GNU Classpath an accurate view of the changes we make to
-the code and to see what changed when.  If you think the requirements
-are ``unworkable'' please try it first for a couple of weeks.  If you
-still feel the same after having some more experience with the project
-please feel free to bring up suggestions for improvements on the list.
-But don't just ignore the rules!  Other hackers depend on them being
-followed to be the most productive they can be (given the above
-constraints).
-
-@menu
-* Branches::                    
-* Writing ChangeLogs::          
-@end menu
-
-@node Branches, Writing ChangeLogs, Hacking Code, Hacking Code
-@comment node-name, next, previous, up
-@section Working with branches
-
-Sometimes it is necessary to create branch of the source for doing new
-work that is disruptive to the other hackers, or that needs new
-language or libraries not yet (easily) available.
-
-After discussing the need for a branch on the main mailinglist with
-the other hackers explaining the need of a branch and suggestion of
-the particular branch rules (what will be done on the branch, who will
-work on it, will there be different commit guidelines then for the
-mainline trunk and when is the branch estimated to be finished and
-merged back into the trunk) every GNU Classpath hacker with commit
-access should feel free to create a branch. There are however a couple
-of rules that every branch should follow:
-
-@itemize @bullet
-
-@item All branches ought to be documented in the developer wiki at
-@uref{http://developer.classpath.org/mediation/ClasspathBranches}, so
-we can know which are live, who owns them, and when they die.
-
-@item Some rules can be changed on a branch.  In particular the branch
-maintainer can change the review requirements, and the requirement of
-keeping things building, testing, etc, can also be lifted.  (These
-should be documented along with the branch name and owner if they
-differ from the trunk.)
-
-@item Requirements for patch email to classpath-patches and for paperwork
-@strong{cannot} be lifted. See @ref{Requirements}.
-
-@item A branch should not be seen as ``private'' or
-``may be completely broken''. It should be as much as possible
-something that you work on with a team (and if there is no team - yet
-- then there is nothing as bad as having a completely broken build to
-get others to help out). There can of course be occasional breakage, but
-it should be planned and explained. And you can certainly have a rule
-like ``please ask me before committing to this branch''.
-
-@item Merges from the trunk to a branch are at the discretion of the
-branch maintainer.
-
-@item A merge from a branch to the trunk is treated like any other patch.
-In particular, it has to go through review, it must satisfy all the
-trunk requirements (build, regression test, documentation).
-
-@item There may be additional timing requirements on merging a branch to
-the trunk depending on the release schedule, etc.  For instance we may
-not want to do a branch merge just before a release.
-
-@end itemize
-
-If any of these rules are unclear please discuss on the list first.
-
-@menu
-* Writing ChangeLogs::          
-@end menu
-
-@node Writing ChangeLogs,  , Branches, Hacking Code
-@comment node-name, next, previous, up
-@section Documenting what changed when with ChangeLog entries
-
-To keep track of who did what when we keep an explicit ChangeLog entry
-together with the code.  This mirrors the CVS commit messages and in
-general the ChangeLog entry is the same as the CVS commit message.
-This provides an easy way for people getting a (snapshot) release or
-without access to the CVS server to see what happened when.  We do not
-generate the ChangeLog file automatically from the CVS server since
-that is not reliable.
-
-A good ChangeLog entry guideline can be found in the Guile Manual at
-@uref{http://www.gnu.org/software/guile/changelogs/guile-changelogs_3.html}.
-
-Here are some example to explain what should or shouldn't be in a
-ChangeLog entry (and the corresponding commit message):
-
-@itemize @bullet
-
-@item
-The first line of a ChangeLog entry should be:
-
-@example
-[date] <two spaces> [full name] <two spaces> [email-contact]
-@end example
-
-The second line should be blank. All other lines should be indented
-with one tab.
-
-@item
-Just state what was changed.  Why something is done as it is done in
-the current code should be either stated in the code itself or be
-added to one of the documentation files (like this Hacking Guide).
-
-So don't write:
-
-@example
-        * java/awt/font/OpenType.java: Remove 'public static final'
-        from OpenType tags, reverting the change of 2003-08-11.  See
-        Classpath discussion list of 2003-08-11.
-@end example
-
-Just state:
-
-@example
-        * java/awt/font/OpenType.java: Remove 'public static final' from
-        all member fields.
-@end example
-
-In this case the reason for the change was added to this guide.
-
-@item
-Just as with the normal code style guide, don't make lines longer then
-80 characters.
-
-@item
-Just as with comments in the code. The ChangeLog entry should be a
-full sentence, starting with a captital and ending with a period.
-
-@item
-Be precise in what changed, not the effect of the change (which should
-be clear from the code/patch).  So don't write:
-
-@example
- * java/io/ObjectOutputStream.java : Allow putFields be called more 
- than once.
-@end example
-
-But explain what changed and in which methods it was changed:
-
-@example
- * java/io/ObjectOutputStream.java (putFields): Don't call
- markFieldsWritten(). Only create new PutField when
- currentPutField is null.
- (writeFields): Call markFieldsWritten().
-@end example
-
-@end itemize
-
-The above are all just guidelines.  We all appreciate the fact that writing
-ChangeLog entries, using a coding style that is not ``your own'' and the
-CVS, patch and diff tools do take some time to getting used to.  So don't
-feel like you have to do it perfect right away or that contributions
-aren't welcome if they aren't ``perfect''.  We all learn by doing and
-interacting with each other.
-
-
-@node Programming Goals, API Compatibility, Hacking Code, Top
-@comment node-name, next, previous, up
-@chapter Programming Goals
-
-When you write code for Classpath, write with three things in mind, and
-in the following order: portability, robustness, and efficiency.
-
-If efficiency breaks portability or robustness, then don't do it the
-efficient way.  If robustness breaks portability, then bye-bye robust
-code.  Of course, as a programmer you would probably like to find sneaky
-ways to get around the issue so that your code can be all three ... the
-following chapters will give some hints on how to do this.
-
-@menu
-* Portability::                 Writing Portable Software                
-* Utility Classes::             Reusing Software
-* Robustness::                  Writing Robust Software               
-* Java Efficiency::             Writing Efficient Java            
-* Native Efficiency::           Writing Efficient JNI          
-* Security::                    Writing Secure Software
-@end menu
-
-@node Portability, Utility Classes, Programming Goals, Programming Goals
-@comment node-name, next, previous, up
-@section Portability
-
-The portability goal for Classpath is the following:
-
-@enumerate
-@item
-native functions for each platform that work across all VMs on that
-platform
-@item
-a single classfile set that work across all VMs on all platforms that
-support the native functions.
-@end enumerate
-
-For almost all of Classpath, this is a very feasible goal, using a
-combination of JNI and native interfaces.  This is what you should shoot
-for.  For those few places that require knowledge of the Virtual Machine
-beyond that provided by the Java standards, the VM Interface was designed.
-Read the Virtual Machine Integration Guide for more information.
-
-Right now the only supported platform is Linux.  This will change as that
-version stabilizes and we begin the effort to port to many other
-platforms.  Jikes RVM runs Classpath on AIX, and generally the Jikes
-RVM team fixes Classpath to work on that platform. 
-
-@node Utility Classes, Robustness, Portability, Programming Goals
-@comment  node-name,  next,  previous,  up
-@section Utility Classes
-
-At the moment, we are not very good at reuse of the JNI code.  There
-have been some attempts, called @dfn{libclasspath}, to
-create generally useful utility classes.  The utility classes are in
-the directory @file{native/jni/classpath} and they are mostly declared
-in @file{native/jni/classpath/jcl.h}.  These utility classes are
-currently only discussed in @ref{Robustness} and in @ref{Native
-Efficiency}.
-
-There are more utility classes available that could be factored out if
-a volunteer wants something nice to hack on.  The error reporting and
-exception throwing functions and macros in
-@file{native/jni/gtk-peer/gthread-jni.c} might be good
-candidates for reuse.  There are also some generally useful utility
-functions in @file{gnu_java_awt_peer_gtk_GtkMainThread.c} that could
-be split out and put into libclasspath.
-
-@node Robustness, Java Efficiency, Utility Classes, Programming Goals
-@comment node-name, next, previous, up
-@section Robustness
-
-Native code is very easy to make non-robust.  (That's one reason Java is
-so much better!)  Here are a few hints to make your native code more
-robust.
-
-Always check return values for standard functions.  It's sometimes easy
-to forget to check that malloc() return for an error.  Don't make that
-mistake.  (In fact, use JCL_malloc() in the jcl library instead--it will
-check the return value and throw an exception if necessary.)
-
-Always check the return values of JNI functions, or call
-@code{ExceptionOccurred} to check whether an error occurred.  You must
-do this after @emph{every} JNI call.  JNI does not work well when an
-exception has been raised, and can have unpredictable behavior.
-
-Throw exceptions using @code{JCL_ThrowException}.  This guarantees that if
-something is seriously wrong, the exception text will at least get out
-somewhere (even if it is stderr).
-
-Check for null values of @code{jclass}es before you send them to JNI functions.
-JNI does not behave nicely when you pass a null class to it: it
-terminates Java with a "JNI Panic."
-
-In general, try to use functions in @file{native/jni/classpath/jcl.h}.  They
-check exceptions and return values and throw appropriate exceptions.
-
-@node Java Efficiency, Native Efficiency, Robustness, Programming Goals
-@comment node-name, next, previous, up
-@section Java Efficiency
-
-For methods which explicitly throw a @code{NullPointerException} when an
-argument is passed which is null, per a Sun specification, do not write
-code like:
-
-@example
-int 
-strlen (String foo) throws NullPointerException
-@{
-  if (foo == null)
-    throw new NullPointerException ("foo is null");
-  return foo.length ();
-@}
-@end example
-
-Instead, the code should be written as:
-
-@example
-int
-strlen (String foo) throws NullPointerException
-@{
-  return foo.length ();
-@}
-@end example
-
-Explicitly comparing foo to null is unnecessary, as the virtual machine
-will throw a NullPointerException when length() is invoked.  Classpath
-is designed to be as fast as possible -- every optimization, no matter
-how small, is important.
-
-@node Native Efficiency, Security, Java Efficiency, Programming Goals
-@comment node-name, next, previous, up
-@section Native Efficiency
-
-You might think that using native methods all over the place would give
-our implementation of Java speed, speed, blinding speed.  You'd be
-thinking wrong.  Would you believe me if I told you that an empty
-@emph{interpreted} Java method is typically about three and a half times
-@emph{faster} than the equivalent native method?
-
-Bottom line: JNI is overhead incarnate.  In Sun's implementation, even
-the JNI functions you use once you get into Java are slow.
-
-A final problem is efficiency of native code when it comes to things
-like method calls, fields, finding classes, etc.  Generally you should
-cache things like that in static C variables if you're going to use them
-over and over again.  GetMethodID(), GetFieldID(), and FindClass() are
-@emph{slow}.  Classpath provides utility libraries for caching methodIDs
-and fieldIDs in @file{native/jni/classpath/jnilink.h}.  Other native data can
-be cached between method calls using functions found in
-@file{native/jni/classpath/native_state.h}.
-
-Here are a few tips on writing native code efficiently:
-
-Make as few native method calls as possible.  Note that this is not the
-same thing as doing less in native method calls; it just means that, if
-given the choice between calling two native methods and writing a single
-native method that does the job of both, it will usually be better to
-write the single native method.  You can even call the other two native
-methods directly from your native code and not incur the overhead of a
-method call from Java to C.
-
-Cache @code{jmethodID}s and @code{jfieldID}s wherever you can.  String
-lookups are 
-expensive.  The best way to do this is to use the 
-@file{native/jni/classpath/jnilink.h}
-library.  It will ensure that @code{jmethodID}s are always valid, even if the
-class is unloaded at some point.  In 1.1, jnilink simply caches a
-@code{NewGlobalRef()} to the method's underlying class; however, when 1.2 comes
-along, it will use a weak reference to allow the class to be unloaded
-and then re-resolve the @code{jmethodID} the next time it is used.
-
-Cache classes that you need to access often.  jnilink will help with
-this as well.  The issue here is the same as the methodID and fieldID
-issue--how to make certain the class reference remains valid.
-
-If you need to associate native C data with your class, use Paul
-Fisher's native_state library (NSA).  It will allow you to get and set
-state fairly efficiently.  Japhar now supports this library, making
-native state get and set calls as fast as accessing a C variable
-directly.
-
-If you are using native libraries defined outside of Classpath, then
-these should be wrapped by a Classpath function instead and defined
-within a library of their own.  This makes porting Classpath's native
-libraries to new platforms easier in the long run.  It would be nice
-to be able to use Mozilla's NSPR or Apache's APR, as these libraries
-are already ported to numerous systems and provide all the necessary
-system functions as well.
-
-@node Security,  , Native Efficiency, Programming Goals
-@comment  node-name,  next,  previous,  up
-@section Security
-
-Security is such a huge topic it probably deserves its own chapter.
-Most of the current code needs to be audited for security to ensure
-all of the proper security checks are in place within the Java
-platform, but also to verify that native code is reasonably secure and
-avoids common pitfalls, buffer overflows, etc.  A good source for
-information on secure programming is the excellent HOWTO by David
-Wheeler,
-@uref{http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/index.html,Secure
-Programming for Linux and Unix HOWTO}.
-
-@node API Compatibility, Specification Sources, Programming Goals, Top
-@comment  node-name,  next,  previous,  up
-@chapter API Compatibility
-
-@menu
-* Serialization::               Serialization
-* Deprecated Methods::          Deprecated methods
-@end menu
-
-@node Serialization, Deprecated Methods, API Compatibility, API Compatibility
-@comment  node-name,  next,  previous,  up
-@section Serialization
-
-Sun has produced documentation concerning much of the information
-needed to make Classpath serializable compatible with Sun
-implementations.  Part of doing this is to make sure that every class
-that is Serializable actually defines a field named serialVersionUID
-with a value that matches the output of serialver on Sun's
-implementation.  The reason for doing this is below.
-
-If a class has a field (of any accessibility) named serialVersionUID
-of type long, that is what serialver uses. Otherwise it computes a
-value using some sort of hash function on the names of all method
-signatures in the .class file.  The fact that different compilers
-create different synthetic method signatures, such as access$0() if an
-inner class needs access to a private member of an enclosing class,
-make it impossible for two distinct compilers to reliably generate the
-same serial #, because their .class files differ. However, once you
-have a .class file, its serial # is unique, and the computation will
-give the same result no matter what platform you execute on.
-
-Serialization compatibility can be tested using tools provided with
-@uref{http://www.kaffe.org/~stuart/japi/,Japitools}.  These
-tools can test binary serialization compatibility and also provide
-information about unknown serialized formats by writing these in XML
-instead.  Japitools is also the primary means of checking API
-compatibility for GNU Classpath with Sun's Java Platform.
-
-@node Deprecated Methods,  , Serialization, API Compatibility
-@comment  node-name,  next,  previous,  up
-@section Deprecated Methods
-
-Sun has a practice of creating ``alias'' methods, where a public or
-protected method is deprecated in favor of a new one that has the same
-function but a different name.  Sun's reasons for doing this vary; as
-an example, the original name may contain a spelling error or it may
-not follow Java naming conventions.
-
-Unfortunately, this practice complicates class library code that calls
-these aliased methods.  Library code must still call the deprecated
-method so that old client code that overrides it continues to work.
-But library code must also call the new version, because new code is
-expected to override the new method.
-
-The correct way to handle this (and the way Sun does it) may seem
-counterintuitive because it means that new code is less efficient than
-old code: the new method must call the deprecated method, and throughout
-the library code calls to the old method must be replaced with calls to
-the new one.
-
-Take the example of a newly-written container laying out a component and
-wanting to know its preferred size.  The Component class has a
-deprecated preferredSize method and a new method, getPreferredSize. 
-Assume that the container is laying out an old component that overrides
-preferredSize and a new component that overrides getPreferredSize.  If
-the container calls getPreferredSize and the default implementation of
-getPreferredSize calls preferredSize, then the old component will have
-its preferredSize method called and new code will have its
-getPreferredSize method called.
-
-Even using this calling scheme, an old component may still be laid out
-improperly if it implements a method, getPreferredSize, that has the
-same signature as the new Component.getPreferredSize.  But that is a
-general problem -- adding new public or protected methods to a
-widely-used class that calls those methods internally is risky, because
-existing client code may have already declared methods with the same
-signature.
-
-The solution may still seem counterintuitive -- why not have the
-deprecated method call the new method, then have the library always call
-the old method?  One problem with that, using the preferred size example
-again, is that new containers, which will use the non-deprecated
-getPreferredSize, will not get the preferred size of old components.
-
-@node Specification Sources, Naming Conventions, API Compatibility, Top
-@comment node-name, next, previous, up
-@chapter Specification Sources
-
-There are a number of specification sources to use when working on
-Classpath.  In general, the only place you'll find your classes
-specified is in the JavaDoc documentation or possibly in the
-corresponding white paper.  In the case of java.lang, java.io and
-java.util, you should look at the Java Language Specification.
-
-Here, however, is a list of specs, in order of canonicality:
-
-@enumerate
-@item
-@uref{http://java.sun.com/docs/books/jls/clarify.html,Clarifications and Amendments to the JLS - 1.1}
-@item
-@uref{http://java.sun.com/docs/books/jls/html/1.1Update.html,JLS Updates
-- 1.1}
-@item
-@uref{http://java.sun.com/docs/books/jls/html/index.html,The 1.0 JLS}
-@item
-@uref{http://java.sun.com/docs/books/vmspec/index.html,JVM spec - 1.1}
-@item
-@uref{http://java.sun.com/products/jdk/1.1/docs/guide/jni/spec/jniTOC.doc.html,JNI spec - 1.1}
-@item
-@uref{http://java.sun.com/products/jdk/1.1/docs/api/packages.html,Sun's javadoc - 1.1}
-(since Sun's is the reference implementation, the javadoc is
-documentation for the Java platform itself.)
-@item
-@uref{http://java.sun.com/products/jdk/1.2/docs/guide/jvmdi/jvmdi.html,JVMDI spec - 1.2},
-@uref{http://java.sun.com/products/jdk/1.2/docs/guide/jni/jni-12.html,JNI spec - 1.2}
-(sometimes gives clues about unspecified things in 1.1; if
-it was not specified accurately in 1.1, then use the spec
-for 1.2; also, we are using JVMDI in this project.)
-@item
-@uref{http://java.sun.com/products/jdk/1.2/docs/api/frame.html,Sun's javadoc - 1.2}
-(sometimes gives clues about unspecified things in 1.1; if
-it was not specified accurately in 1.1, then use the spec
-for 1.2)
-@item
-@uref{http://developer.java.sun.com/developer/bugParade/index.html,The
-Bug Parade}: I have obtained a ton of useful information about how
-things do work and how they *should* work from the Bug Parade just by
-searching for related bugs.  The submitters are very careful about their
-use of the spec.  And if something is unspecified, usually you can find
-a request for specification or a response indicating how Sun thinks it
-should be specified here.
-@end enumerate
-
-You'll notice that in this document, white papers and specification
-papers are more canonical than the JavaDoc documentation.  This is true
-in general.
-
-
-@node Naming Conventions, Character Conversions, Specification Sources, Top
-@comment node-name, next, previous, up
-@chapter Directory and File Naming Conventions
-
-The Classpath directory structure is laid out in the following manner:
-
-@example
-classpath
- |
- |---->java
- |       |
- |       |-->awt
- |       |-->io
- |       |-->lang
- |       |-->util
- |       |     |
- |       |     |--->zip
- |       |     |--->jar
- |       |-->net
- |       |-->etc
- |
- |---->gnu
- |       |
- |       |-->java
- |             |
- |             |-->awt
- |             |-->lang
- |             |-->util
- |             |     |
- |             |     |-->zip
- |             |-->etc
- |
- |---->native
-         |
-         |-->jni
-         |    |-->classpath
-         |    |-->gtk-peer
-         |    |-->java-io
-         |    |-->java-lang
-         |    |-->java-net
-         |    |-->java-util
-         |    |-->etc
-         |-->cni
-  
-@end example
-
-Here is a brief description of the toplevel directories and their contents.
-
-@table @b
-
-@item java
-Contains the source code to the Java packages that make up the core
-class library.  Because this is the public interface to Java, it is
-important that the public classes, interfaces, methods, and variables
-are exactly the same as specified in Sun's documentation.  The directory
-structure is laid out just like the java package names.  For example,
-the class java.util.zip would be in the directory java-util.
-
-@item gnu/java
-Internal classes (roughly analogous to Sun's sun.* classes) should go
-under the @file{gnu/java} directory.  Classes related to a particular public
-Java package should go in a directory named like that package.  For
-example, classes related to java.util.zip should go under a directory
-@file{gnu/java/util/zip}.  Sub-packages under the main package name are
-allowed.  For classes spanning multiple public Java packages, pick an
-appropriate name and see what everybody else thinks.
-
-@item native
-This directory holds native code needed by the public Java packages.
-Each package has its own subdirectory, which is the ``flattened'' name
-of the package.  For example, native method implementations for
-java.util.zip should go in @file{native/classpath/java-util}.  Classpath
-actually includes an all Java version of the zip classes, so no native
-code is required.
-
-@end table
-
-Each person working on a package get's his or her own ``directory
-space'' underneath each of the toplevel directories.  In addition to the
-general guidelines above, the following standards should be followed:
-
-@itemize @bullet
-
-@item
-Classes that need to load native code should load a library with the
-same name as the flattened package name, with all hyphens removed.  For
-example, the native library name specified in LoadLibrary for
-java-util would be ``javautil''.
-
-@item
-Each package has its own shared library for native code (if any).
-
-@item
-The main native method implementation for a given method in class should
-go in a file with the same name as the class with a ``.c'' extension.
-For example, the JNI implementation of the native methods in
-java.net.InetAddress would go in @file{native/jni/java-net/InetAddress.c}.
-``Internal'' native functions called from the main native method can
-reside in files of any name.
-@end itemize
-
-@node Character Conversions, Localization, Naming Conventions, Top
-@comment node-name, next, previous, up
-@chapter Character Conversions
-
-Java uses the Unicode character encoding system internally.  This is a
-sixteen bit (two byte) collection of characters encompassing most of the
-world's written languages.  However, Java programs must often deal with
-outside interfaces that are byte (eight bit) oriented.  For example, a
-Unix file, a stream of data from a network socket, etc.  Beginning with
-Java 1.1, the @code{Reader} and @code{Writer} classes provide functionality
-for dealing with character oriented streams.  The classes 
-@code{InputStreamReader} and @code{OutputStreamWriter} bridge the gap
-between byte streams and character streams by converting bytes to 
-Unicode characters and vice versa.
-
-In Classpath, @code{InputStreamReader} and @code{OutputStreamWriter}
-rely on an internal class called @code{gnu.java.io.EncodingManager} to load
-translaters that perform the actual conversion.  There are two types of
-converters, encoders and decoders.  Encoders are subclasses of
-@code{gnu.java.io.encoder.Encoder}.  This type of converter takes a Java
-(Unicode) character stream or buffer and converts it to bytes using
-a specified encoding scheme.  Decoders are a subclass of 
-@code{gnu.java.io.decoder.Decoder}.  This type of converter takes a 
-byte stream or buffer and converts it to Unicode characters.  The
-@code{Encoder} and @code{Decoder} classes are subclasses of
-@code{Writer} and @code{Reader} respectively, and so can be used in
-contexts that require character streams, but the Classpath implementation
-currently does not make use of them in this fashion.
-
-The @code{EncodingManager} class searches for requested encoders and
-decoders by name.  Since encoders and decoders are separate in Classpath,
-it is possible to have a decoder without an encoder for a particular 
-encoding scheme, or vice versa.  @code{EncodingManager} searches the
-package path specified by the @code{file.encoding.pkg} property.  The
-name of the encoder or decoder is appended to the search path to
-produce the required class name.  Note that @code{EncodingManager} knows
-about the default system encoding scheme, which it retrieves from the
-system property @code{file.encoding}, and it will return the proper
-translator for the default encoding if no scheme is specified.  Also, the 
-Classpath standard translator library, which is the @code{gnu.java.io} package, 
-is automatically appended to the end of the path.
-
-For efficiency, @code{EncodingManager} maintains a cache of translators
-that it has loaded.  This eliminates the need to search for a commonly
-used translator each time it is requested.
-
-Finally, @code{EncodingManager} supports aliasing of encoding scheme names.
-For example, the ISO Latin-1 encoding scheme can be referred to as
-''8859_1'' or ''ISO-8859-1''.  @code{EncodingManager} searches for 
-aliases by looking for the existence of a system property called
-@code{gnu.java.io.encoding_scheme_alias.<encoding name>}.  If such a
-property exists.  The value of that property is assumed to be the
-canonical name of the encoding scheme, and a translator with that name is 
-looked up instead of one with the original name.
-
-Here is an example of how @code{EncodingManager} works.  A class requests
-a decoder for the ''UTF-8'' encoding scheme by calling
-@code{EncodingManager.getDecoder("UTF-8")}.  First, an alias is searched
-for by looking for the system property 
-@code{gnu.java.io.encoding_scheme_alias.UTF-8}.  In our example, this
-property exists and has the value ''UTF8''.  That is the actual
-decoder that will be searched for.  Next, @code{EncodingManager} looks
-in its cache for this translator.  Assuming it does not find it, it
-searches the translator path, which is this example consists only of
-the default @code{gnu.java.io}.  The ''decoder'' package name is 
-appended since we are looking for a decoder.  (''encoder'' would be 
-used if we were looking for an encoder).  Then name name of the translator
-is appended.  So @code{EncodingManager} attempts to load a translator
-class called @code{gnu.java.io.decoder.UTF8}.  If that class is found,
-an instance of it is returned.  If it is not found, a
-@code{UnsupportedEncodingException}.
-
-To write a new translator, it is only necessary to subclass 
-@code{Encoder} and/or @code{Decoder}.  Only a handful of abstract
-methods need to be implemented.  In general, no methods need to be
-overridden.  The needed methods calculate the number of bytes/chars
-that the translation will generate, convert buffers to/from bytes,
-and read/write a requested number of characters to/from a stream.
-
-Many common encoding schemes use only eight bits to encode characters.
-Writing a translator for these encodings is very easy.  There are 
-abstract translator classes @code{gnu.java.io.decode.DecoderEightBitLookup}
-and @code{gnu.java.io.encode.EncoderEightBitLookup}.  These classes
-implement all of the necessary methods.  All that is necessary to
-create a lookup table array that maps bytes to Unicode characters and
-set the class variable @code{lookup_table} equal to it in a static
-initializer.  Also, a single constructor that takes an appropriate
-stream as an argument must be supplied.  These translators are
-exceptionally easy to create and there are several of them supplied
-in the Classpath distribution.
-
-Writing multi-byte or variable-byte encodings is more difficult, but
-often not especially challenging.  The Classpath distribution ships with
-translators for the UTF8 encoding scheme which uses from one to three
-bytes to encode Unicode characters.  This can serve as an example of
-how to write such a translator.
-
-Many more translators are needed.  All major character encodings should
-eventually be supported.
-
-@node Localization,  , Character Conversions, Top
-@comment node-name, next, previous, up
-@chapter Localization
-
-There are many parts of the Java standard runtime library that must
-be customized to the particular locale the program is being run in.
-These include the parsing and display of dates, times, and numbers;
-sorting words alphabetically; breaking sentences into words, etc.
-In general, Classpath uses general classes for performing these tasks,
-and customizes their behavior with configuration data specific to a
-given locale.
-
-@menu
-* String Collation::            Sorting strings in different locales
-* Break Iteration::             Breaking up text into words, sentences, and lines
-* Date Formatting and Parsing::  Locale specific date handling
-* Decimal/Currency Formatting and Parsing::  Local specific number handling
-@end menu
-
-In Classpath, all locale specific data is stored in a 
-@code{ListResourceBundle} class in the package @code{gnu/java/locale}.
-The basename of the bundle is @code{LocaleInformation}.  See the
-documentation for the @code{java.util.ResourceBundle} class for details
-on how the specific locale classes should be named.
-
-@code{ListResourceBundle}'s are used instead of 
-@code{PropertyResourceBundle}'s because data more complex than simple
-strings need to be provided to configure certain Classpath components.
-Because @code{ListResourceBundle} allows an arbitrary Java object to
-be associated with a given configuration option, it provides the
-needed flexibility to accomodate Classpath's needs.
-
-Each Java library component that can be localized requires that certain
-configuration options be specified in the resource bundle for it.  It is
-important that each and every option be supplied for a specific 
-component or a critical runtime error will most likely result.
-
-As a standard, each option should be assigned a name that is a string.
-If the value is stored in a class or instance variable, then the option
-should name should have the name name as the variable.  Also, the value
-associated with each option should be a Java object with the same name
-as the option name (unless a simple scalar value is used).  Here is an
-example:
-
-A class loads a value for the @code{format_string} variable from the
-resource bundle in the specified locale.  Here is the code in the
-library class:
-
-@example
-  ListResourceBundle lrb = 
-    ListResourceBundle.getBundle ("gnu/java/locale/LocaleInformation", locale);
-  String format_string = lrb.getString ("format_string");
-@end example
-
-In the actual resource bundle class, here is how the configuration option
-gets defined:
-
-@example
-/**
-  * This is the format string used for displaying values
-  */
-private static final String format_string = "%s %d %i";
-
-private static final Object[][] contents =
-@{
-  @{ "format_string", format_string @}
-@};
-@end example
-
-Note that each variable should be @code{private}, @code{final}, and
-@code{static}.  Each variable should also have a description of what it
-does as a documentation comment.  The @code{getContents()} method returns
-the @code{contents} array.
-
-There are many functional areas of the standard class library that are
-configured using this mechanism.  A given locale does not need to support
-each functional area.  But if a functional area is supported, then all
-of the specified entries for that area must be supplied.  In order to
-determine which functional areas are supported, there is a special key
-that is queried by the affected class or classes.  If this key exists, 
-and has a value that is a @code{Boolean} object wrappering the
-@code{true} value, then full support is assumed.  Otherwise it is
-assumed that no support exists for this functional area.  Every class
-using resources for configuration must use this scheme and define a special
-scheme that indicates the functional area is supported.  Simply checking
-for the resource bundle's existence is not sufficient to ensure that a
-given functional area is supported.
-
-The following sections define the functional areas that use resources
-for locale specific configuration in GNU Classpath.  Please refer to the 
-documentation for the classes mentioned for details on how these values 
-are used.  You may also wish to look at the source file for 
-@file{gnu/java/locale/LocaleInformation_en} as an example.
-
-@node String Collation, Break Iteration, Localization, Localization
-@comment node-name, next, previous, up
-@section String Collation
-
-Collation involves the sorting of strings.  The Java class library provides
-a public class called @code{java.text.RuleBasedCollator} that performs
-sorting based on a set of sorting rules.
-
-@itemize @bullet
-@item RuleBasedCollator - A @code{Boolean} wrappering @code{true} to indicate
-that this functional area is supported.
-@item collation_rules - The rules the specify how string collation is to
-be performed.
-@end itemize
-
-Note that some languages might be too complex for @code{RuleBasedCollator}
-to handle.  In this case an entirely new class might need to be written in
-lieu of defining this rule string.
-
-@node Break Iteration, Date Formatting and Parsing, String Collation, Localization
-@comment node-name, next, previous, up
-@section Break Iteration
-
-The class @code{java.text.BreakIterator} breaks text into words, sentences,
-and lines.  It is configured with the following resource bundle entries:
-
-@itemize @bullet
-@item BreakIterator - A @code{Boolean} wrappering @code{true} to indicate
-that this functional area is supported.
-@item word_breaks - A @code{String} array of word break character sequences.
-@item sentence_breaks - A @code{String} array of sentence break character
-sequences.
-@item line_breaks - A @code{String} array of line break character sequences.
-@end itemize
-
-@node Date Formatting and Parsing, Decimal/Currency Formatting and Parsing, Break Iteration, Localization
-@comment node-name, next, previous, up
-@section Date Formatting and Parsing
-
-Date formatting and parsing is handled by the 
-@code{java.text.SimpleDateFormat} class in most locales.  This class is
-configured by attaching an instance of the @code{java.text.DateFormatSymbols}
-class.  That class simply reads properties from our locale specific
-resource bundle.  The following items are required (refer to the 
-documentation of the @code{java.text.DateFormatSymbols} class for details
-io what the actual values should be):
-
-@itemize @bullet
-@item DateFormatSymbols - A @code{Boolean} wrappering @code{true} to indicate
-that this functional area is supported.
-@item months - A @code{String} array of month names.
-@item shortMonths - A @code{String} array of abbreviated month names.
-@item weekdays - A @code{String} array of weekday names.
-@item shortWeekdays - A @code{String} array of abbreviated weekday names.
-@item ampms - A @code{String} array containing AM/PM names.
-@item eras - A @code{String} array containing era (ie, BC/AD) names.
-@item zoneStrings - An array of information about valid timezones for this 
-locale.
-@item localPatternChars - A @code{String} defining date/time pattern symbols.
-@item shortDateFormat - The format string for dates used by 
-@code{DateFormat.SHORT}
-@item mediumDateFormat - The format string for dates used by 
-@code{DateFormat.MEDIUM}
-@item longDateFormat - The format string for dates used by 
-@code{DateFormat.LONG}
-@item fullDateFormat - The format string for dates used by 
-@code{DateFormat.FULL}
-@item shortTimeFormat - The format string for times used by 
-@code{DateFormat.SHORT}
-@item mediumTimeFormat - The format string for times used by 
-@code{DateFormat.MEDIUM}
-@item longTimeFormat - The format string for times used by 
-@code{DateFormat.LONG}
-@item fullTimeFormat - The format string for times used by 
-@code{DateFormat.FULL}
-@end itemize
-
-Note that it may not be possible to use this mechanism for all locales.
-In those cases a special purpose class may need to be written to handle 
-date/time processing.
-
-@node Decimal/Currency Formatting and Parsing,  , Date Formatting and Parsing, Localization
-@comment node-name, next, previous, up
-@section Decimal/Currency Formatting and Parsing
-
-@code{NumberFormat} is an abstract class for formatting and parsing numbers.
-The class @code{DecimalFormat} provides a concrete subclass that handles
-this is in a locale independent manner.  As with @code{SimpleDateFormat},
-this class gets information on how to format numbers from a class that
-wrappers a collection of locale specific formatting values.  In this case,
-the class is @code{DecimalFormatSymbols}.  That class reads its default
-values for a locale from the resource bundle.  The required entries are:
-
-@itemize @bullet
-@item DecimalFormatSymbols - A @code{Boolean} wrappering @code{true} to 
-indicate that this functional area is supported.
-@item currencySymbol - The string representing the local currency.
-@item intlCurrencySymbol - The string representing the local currency in an
-international context.
-@item decimalSeparator - The character to use as the decimal point as a
-@code{String}.
-@item digit - The character used to represent digits in a format string,
-as a @code{String}.
-@item exponential - The char used to represent the exponent separator of a 
-number written in scientific notation, as a @code{String}.
-@item groupingSeparator - The character used to separate groups of numbers
-in a large number, such as the ``,'' separator for thousands in the US, as
-a @code{String}.
-@item infinity - The string representing infinity.
-@item NaN - The string representing the Java not a number value.
-@item minusSign - The character representing the negative sign, as a 
-@code{String}.
-@item monetarySeparator - The decimal point used in currency values, as a
-@code{String}.
-@item patternSeparator - The character used to separate positive and 
-negative format patterns, as a @code{String}.
-@item percent - The percent sign, as a @code{String}.
-@item perMill - The per mille sign, as a @code{String}.
-@item zeroDigit - The character representing the digit zero, as a @code{String}.
-@end itemize
-
-Note that several of these values are an individual character.  These should
-be wrappered in a @code{String} at character position 0, not in a
-@code{Character} object.
-
-@bye
-
Index: libjava/classpath/doc/vmintegration.texinfo
===================================================================
--- libjava/classpath/doc/vmintegration.texinfo	(revision 122231)
+++ libjava/classpath/doc/vmintegration.texinfo	(working copy)
@@ -1,1980 +0,0 @@
-\input texinfo @c -*-texinfo-*-
-
-@c %**start of header
-@setfilename vmintegration.info
-@settitle GNU Classpath VM Integration Guide
-@c %**end of header
-
-@setchapternewpage off
-
-@ifinfo
-This file contains important information you will need to know if you
-are going to write an interface between GNU Classpath and a Virtual
-Machine.
-
-Copyright (C) 1998-2002, 2004, 2005, 2006 Free Software Foundation, Inc.
-
-@ifnotplaintext
-@dircategory GNU Libraries
-@direntry
-* VM Integration: (vmintegration).   GNU Classpath VM Integration Guide
-@end direntry
-@end ifnotplaintext
-@end ifinfo
-
-@titlepage
-@title GNU Classpath VM Integration Guide
-@author John Keiser
-@author C. Brian Jones
-@author Mark Wielaard
-
-@page
-@vskip 0pt plus 1filll
-Copyright @copyright{} 1998-2002 Free Software Foundation, Inc.
-@sp 2
-Permission is granted to make and distribute verbatim copies of
-this document provided the copyright notice and this permission notice
-are preserved on all copies.
-
-Permission is granted to copy and distribute modified versions of this
-document under the conditions for verbatim copying, provided that the
-entire resulting derived work is distributed under the terms of a
-permission notice identical to this one.
-
-Permission is granted to copy and distribute translations of this manual
-into another language, under the above conditions for modified versions,
-except that this permission notice may be stated in a translation
-approved by the Free Software Foundation.
-
-@end titlepage
-
-@ifinfo
-@node Top, Introduction, (dir), (dir)
-@top GNU Classpath Hacker's Guide
-
-This file contains important information you will need to know if you
-are going to write an interface between GNU Classpath and a Virtual
-Machine.
-
-This document is incomplete, as we are still in alpha with the interface.
-
-@end ifinfo
-
-@menu
-* Introduction::                An introduction to the Classpath project
-* Initialization::              Initializing the classes
-* Classpath Hooks::             Hooks from Classpath to the VM
-* VM Hooks::                    Hooks from the underlying VM to Classpath
-* JNI Implementation::		Hooking the VM to jni.h
-* JVMTI Implementation::        Hooking the VM to jvmti.h
-* Miscellaneous VM Requirements::  
-@end menu
-
-@node Introduction, Initialization, Top, Top
-@comment node-name, next, previous, up
-@chapter Introduction
-
-The Classpath Project's ambition to be a 100% clean room implementation
-of the standard Java class libraries cannot be fulfilled without some
-level of integration with the Virtual Machine, the underlying machinery
-that actually runs Java.
-
-There are several VMs out there, here is a small list.
-
-@itemize @bullet
-@item @uref{http://www.hungry.com/old-hungry/products/japhar/,Japhar}
-Japhar was the first VM to use GNU Classpath.  Today you can see that
-sort of relationship in the source tree which denotes several Japhar
-specific files as a reference implementation of those pieces.  This VM
-has been primarily tested against Linux and lacks garbage collections, a
-JIT, and suffers recently from slow development.
-
-@item @uref{http://www.intel.com/research/mrl/orp/,Intel's Open Runtime Platform}
-Intel surprised us not long ago with the release of this rather advanced
-VM that uses GNU Classpath for a set of class libraries and works on
-Linux and Windows 2000.  As of June, 2004, it does not appear that ORP
-is under active development.
-
-@item @uref{http://www.sablevm.org/,SableVM}
-SableVM is a robust, extremely portable, efficient, and
-specifications-compliant Java Virtual Machine that aims to be easy to
-maintain and to extend. It features a state-of-the-art, efficient
-interpreter engine. Its source code is very accessible and easy to
-understand, and has many robustness features that have been the object
-of careful design.
-
-@item @uref{http://www.kaffe.org,Kaffe}
-Kaffe is an advanced VM and together with its own class libraries
-provides a Java 1.1 compatible environment.
-
-@item @uref{http://www.mozilla.org/projects/ef,Electrical Fire}
-The Electrical File VM continues to be listed as a Mozilla project
-though development has been somewhat quiet.  A number of concepts from
-EF were expected at one point to be rolled into Japhar, but that
-development has not occurred as of yet.
-
-@item @uref{http://latte.snu.ac.kr/,LaTTe}
-This VM project so far supports only Sun UltraSparc processors using the
-proprietary Solaris 2.5.1 or higher operating system.  LaTTe was derived
-from Kaffe but claims a number of improvements.
-
-@item @uref{http://gcc.gnu.org/java/,GNU Compiler for Java (GCJ)}
-This is a portable, optimizing, ahead-of-time compiler for the Java
-Programming Language. It can compile Java source code directly to native
-machine code, Java source code to Java bytecode (class files), and Java
-bytecode to native machine code. Compiled applications are linked with the
-GCJ runtime, libgcj which is based on the GNU Classpath code, which provides
-the core class libraries, a garbage collector, and a bytecode interpreter.
-libgcj can dynamically load and interpret class files, resulting in mixed
-compiled/interpreted applications.
-GCJ is part of the GNU Compiler Collection (@uref{http://gcc.gnu.org/,GCC}).
-On March 6 2000 the libgcj and GNU Classpath projects were officially merged
-and there is active work on merging all the classes between the projects.
-Licensed under GPL+exception, just as GNU Classpath is.
-
-@item @uref{http://kissme.sourceforge.net/,Kissme}
-This is a free Java Virtual Machine that is being developed on GNU/Linux
-and can run console Java applications.  Kissme also provides support for
-orthogonally persistent Java.
-@c I don't know what ``orthogonally persistent Java'' is, and I bet
-@c there are other people don't know either. -- Steve Augart, 4 June 2004
-
-@item @uref{http://jamvm.sourceforge.net/,JamVM}
-A simple, small bytecode interpreter that works out-of-the-box with
-pure GNU Classpath; it is emerging as the preferred platform for
-quickly testing a new build of GNU Classpath.  Licensed under the GPL.
-
-@item @uref{http://jikesrvm.sourceforge.net/,Jikes RVM}
-A free runtime environment for Java, written in Java.  Works
-out-of-the-box with pure GNU Classpath.  Features an optimizing JIT.
-Runs on the x86 and PowerPC architectures, on the AIX, Linux, and Mac
-OS/X operating systems.  Licensed under the CPL (Common Public
-License).  Extensively documented.  Actively developed as of June,
-2004.
-
-@end itemize
-
-In the past integration efforts were focused mainly on Japhar with an eye
-towards getting Electrical Fire to work.  Most information contained in
-this document is gleaned from these efforts. Recently more work has been
-done on getting gcj, orp and kissme to work out of the box with GNU Classpath
-but there is much to do before that becomes a reality.
-
-
-@node Initialization, Classpath Hooks, Introduction, Top
-@comment node-name, next, previous, up
-@chapter Initialization
-
-The order of initialization, as far as I can tell, doesn't matter just
-yet.  However, when we move to 1.2 support, it probably will matter, so
-we'll have a note in here at that time.
-
-The initialization order is currently documented in the
-@file{Runtime.java} source file.
-
-@node Classpath Hooks, VM Hooks, Initialization, Top
-@comment node-name, next, previous, up
-@chapter Classpath Hooks
-
-The primary method of interaction between Classpath and the VM is via
-the helper classes, which are named after the relevant core library
-class, but include an additional `VM' prefix.  The library classes from
-Classpath call out to these to get certain VM-specific dirty work done.
-A reference copy of each VM class exists.  The majority consist of a
-series of static methods, some of which are simply declared
-@code{native}, and some which provide a default implementation.  VMs may
-either use these as is, or create their own local variations.  When
-using the default implementations, the VM is responsible for
-implementing any of the code marked as @code{native} which corresponds
-to functionality they wish their VM to provide.  When using their own
-versions of the classes, VM implementors may choose to change the mix of
-native and non-native methods from that below, so as to best suit their
-implementation.
-
-@menu
-* java.lang::
-* gnu.classpath::
-* java.util::
-* java.io::
-* java.security::
-* java.net::
-* java.nio::
-* java.nio.channels::
-* gnu.java.nio::
-* java.lang.reflect::
-* gnu.java.lang::
-* gnu.java.lang.management::
-* java.lang.management::
-* Classpath Callbacks::
-@end menu
-
-@node java.lang, gnu.classpath, Classpath Hooks, Classpath Hooks
-@comment  node-name,  next,  previous,  up
-
-@section @code{java.lang}
-
-@code{java.lang} is the core Java package, being imported automatically by all
-classes.  It includes basic classes as @code{Object} and @code{String}.
-A VM must implement at least some parts of this package in order to
-become operable.
-
-@menu
-* java.lang.VMClass::
-* java.lang.VMObject::
-* java.lang.VMClassLoader::
-* java.lang.VMSystem::
-* java.lang.VMThrowable::
-* java.lang.VMCompiler::
-* java.lang.VMDouble::
-* java.lang.VMFloat::
-* java.lang.VMProcess::
-* java.lang.VMRuntime::
-* java.lang.VMString::
-* java.lang.VMThread::
-* java.lang.VMMath::
-@end menu
-
-@node java.lang.VMClass, java.lang.VMObject ,java.lang,java.lang
-@subsection @code{java.lang.VMClass}
-
-The core class, @code{java.lang.Class}, and the corresponding VM class,
-@code{java.lang.VMClass}, provide two main functions within GNU Classpath.
-
-@enumerate
-@item For basic VM operation, @code{java.lang.Class} provides the link between
-the Java-based representation of a class it embodies and the VM's own
-internal structure for a class.  @xref{VM Hooks}.
-
-@item As far as the user is concerned, the main function of
-@code{java.lang.Class} is as an entry point to the reflection
-facilities, and so it also provides this functionality, backed by the
-VM class.
-@end enumerate
-
-This VM class lists the following methods, organized by the version of the
-Java specification in which they occur.  All are @code{native}, unless
-otherwise specified, and pertain to reflection.  As a result, the VM only
-needs to implement these methods in order to provide reflection support,
-and then only to the degree required.
-
-@itemize @bullet
-@item 1.0
-@itemize @bullet
-@item @code{isInterface(Class)} -- This is simply a property test, and matches
-the presence of an appropriate flag within the class file.
-@item @code{getName(Class)} -- Returns the fully-qualified name of the class.
-@item @code{getSuperclass(Class)} -- Returns a @code{Class} instance which
-represents the superclass.  Again, the class file contains an element directly
-relating to this.  @code{null} is returned for primitives, interfaces and
-@code{Object}.
-@item @code{getInterfaces(Class)} -- Same as the above, but the implemented
-or extended interfaces rather than the superclass.  An empty array should
-be returned, rather than @code{null}.
-@item @code{getDeclaredClasses(Class,boolean)} -- Returns the internal classes
-this instance declares directly.  The flag determines whether or not the
-VM should filter out non-public classes.
-@item @code{getDeclaredFields(Class,boolean)} -- The same for fields.
-@item @code{getDeclaredMethods(Class,boolean)} -- And for methods.
-@item @code{getDeclaredConstructors(Class,boolean)} -- And constructors.
-@item @code{getClassLoader(Class)} -- Returns the @code{ClassLoader} instance
-which is responsible for the specified class.
-@item @code{forName(String, boolean, ClassLoader)} -- The VM should create a
-@code{Class} instance corresponding to the named class.  As noted in
-@ref{VM Hooks}, the internal content of the instance is the
-responsibility of the VM.  The supplied class loader is recorded as that
-which loaded the class, and the boolean specifies whether or not to
-run the class initializer.
-@item @code{isArray(Class)} -- Another property test, corresponding to a
-class file flag.
-@item @code{initialize(Class)} -- The VM should initialize the class fully,
-if it has not already done so.
-@item @code{loadArrayClass(String,ClassLoader)} -- This is called if
-@code{forName} returns @code{null} and the string specifies an array class.
-The specified array class should be loaded with the supplied class loader.
-@item @code{throwException(Throwable)} -- The VM should throw the supplied
-checked exception, without declaring it.
-@end itemize
-@item 1.1
-@itemize @bullet
-@item @code{isInstance(Class,Object)} -- This is a reflection-based equivalent
-of the @code{instanceof} operator.
-@item @code{isAssignableFrom(Class,Class)} -- Mainly a shorthand for the above,
-removing the need to create an instance to test assignability.  
-@item @code{isPrimitive(Class)} -- Returns true if this class is simply
-a representation of one of the primitive types: @code{boolean}, @code{byte},
-@code{char}, @code{short}, @code{int}, @code{long}, @code{float},
-@code{double} and @code{void}.
-@item @code{getComponentType(Class)} -- Produces a @code{Class} instance which
-represents the type of the members of the array the class instance represents.
-Classes which don't represent an array type return @code{null}.
-@item @code{getModifiers(Class,boolean)} -- Returns an integer which encodes
-the class' modifiers, such as @code{public}.  Again, this relates to
-information stored in the class file.
-@item @code{getDeclaringClass(Class)} -- Returns the class that declared
-an inner or member class, or @code{null} if the instance refers to a top-level
-class.
-@end itemize
-@item 1.5
-@itemize @bullet
-@item @code{isSynthetic(Class)} -- Returns true if the flags for this class
-mark it as synthetic.
-@item @code{isAnnotation(Class)} -- Returns true if the flags for this class
-mark it as an annotation.
-@item @code{isEnum(Class)} -- Returns true if the flags for this class
-mark it as an enumeration.
-@item @code{getSimpleName(Class)} -- Returns the simple name of the class.
-A default implementation is provided, but a more efficient version may instead
-be provided by the VM.
-@item @code{getCanonicalName(Class)} -- Returns the canonical name of the
-class.  A default implementation is provided, but a more efficient
-version may instead be provided by the VM.
-@item @code{getEnclosingClass(Class)} -- Returns the immediately enclosing
-class (null for a top-level class).
-@item @code{getEnclosingConstructor(Class)} -- Returns the constructor
-which immediately encloses the supplied class.
-@item @code{getEnclosingMethod(Class)} -- Returns the method
-which immediately encloses the supplied class.
-@item @code{getClassSignature(Class)} -- Returns the generic signature of
-the class or null if there isn't one.
-@item @code{isAnonymousClass(Class)} -- Returns true if the class is an
-anonymous class.
-@item @code{isLocalClass(Class)} -- Returns true if the class is an
-local class.
-@item @code{isMemberClass(Class)} -- Returns true if the class is an
-member class.
-@end itemize
-@end itemize
-
-@node java.lang.VMObject, java.lang.VMClassLoader, java.lang.VMClass, java.lang
-@subsection @code{java.lang.VMObject}
-
-@code{VMObject} is the bridge between the low level @code{Object}
-facilities such as making a clone, getting the class of the object and
-the wait/notify semantics.  This is accomplished using the following
-@code{native} methods.
-
-@itemize @bullet
-@item @code{getClass(Object)} -- Returns the @code{Class} instance for the
-object.  @code{Class} objects are produced by the VM, as described in
-@ref{VM Hooks}.
-@item @code{clone(Cloneable)} -- The VM should produce a low-level clone of the
-specified object, creating a field-by-field shallow copy of the original.
-The only difference between the two is that the new object should still be
-@code{finalizable}, even if the original is not.
-@item @code{notify(Object)} -- The VM should choose one of the threads waiting
-for a lock on the specified object arbitrarily, and wake it.  If the current
-thread does not currently hold the lock on the object, then an
-@code{IllegalMonitorStateException} should be thrown.
-@item @code{notifyAll(Object)} -- Same as the above, but all threads are
-awakened.
-@item @code{wait(Object,long,int)} -- The VM should set the current thread
-into a waiting state, which persists until it receives a notify signal or the
-specified time (in milliseconds and nanoseconds) is exceeded.  The nanoseconds
-restriction may be ignored if such granularity is not available, and a
-@code{IllegalMonitorStateException} should be thrown if the current thread
-doesn't own the object.
-@end itemize
-
-@node java.lang.VMClassLoader, java.lang.VMSystem, java.lang.VMObject, java.lang
-@subsection @code{java.lang.VMClassLoader}
-@code{VMClassLoader} provides methods for defining and resolving core and
-primitive classes, as well as handling resources, packages and assertions.
-The class is a mixture of @code{native} methods and Java-based
-implementations, with some of the latter being @emph{stubs}.
-
-@itemize @bullet
-@item Native Methods
-@itemize @bullet
-@item @code{defineClass(ClassLoader,String,byte[],int,int,ProtectionDomain)}
--- The VM should create a @code{Class} instance from the supplied byte array.
-@item @code{resolveClass(Class)} -- Resolve references to other classes in the
-supplied class.
-@item @code{loadClass(name,boolean)} -- Load a class using the bootstrap
-loader.
-@item @code{getPrimitiveClass(char)} -- The VM should provide a @code{Class}
-implementation for one of the primitive classes.  The supplied character
-matches the JNI code for the primitive class e.g. `B' for byte and
-`Z' for boolean.
-@end itemize
-@item Java Methods
-@itemize @bullet
-@item @code{getResource(String)} -- The default implementation calls
-@code{getResources} and returns the first element in the returned enumeration,
-or @code{null} if there are no elements.
-@item @code{getResources(String)} -- By default, this compiles a list of
-URLs via the boot class path.  Any matching files within a zip file are added,
-and directories on the boot class path are automatically converted to file
-URLs that refer to join the directory with the resource name (whether or not
-it actually exists).
-@item @code{getPackage(String)} -- Always returns null, which may be suitable
-if the VM does not wish to return a @code{Package} implementation. Otherwise,
-it may be necessary to make this a @code{native} method.
-@item @code{getPackages()} -- As with the last, a default stub implementation
-exists (returning an empty array) which may be replaced if support is
-required. 
-@item @code{defaultAssertionStatus()} -- A stub which can be implemented
-by VMs providing assertion support.  At present, it always returns @code{true}.
-@item @code{packageAssertionStatus()} -- Much the same status as the above.
-The method should return a map converting package names to boolean status
-values.  The stub implementation provides an empty map.
-@item @code{classAssertionStatus()} -- Same as the last, but for classes.
-@item @code{getSystemClassLoader()} -- The default calls @code{ClassLoader}
-to create a new auxillary class loader with a system and extension class
-loader.  The VM may wish to replace it if it wishes to supply its own custom
-system class loader.
-@end itemize
-@end itemize
-@node java.lang.VMSystem, java.lang.VMThrowable, java.lang.VMClassLoader, java.lang
-@subsection @code{java.lang.VMSystem}
-@code{VMSystem} handles the default I/O streams, provides access to the
-system clock and environment variables and provides methods for
-@code{System.arraycopy} and the @code{identityHashCode} of an
-@code{Object}.  It consists of @code{native} methods, but the default
-implementation also provides some helper methods to simplify stream
-creation.  
-
-@itemize @bullet
-@item Native Methods
-@itemize @bullet
-@item @code{arraycopy(Object,int,Object,int,int)} -- The VM should copy
-a specified number of array objects from one array to another, with 
-appropriate checks for compatible typing, available elements and space.
-The VM should be able to perform this more efficiently using native code
-and direct memory manipulation than would have been achieved by using Java.
-@item @code{identityHashCode(Object)} -- This is the hashcode for
-@code{Object}, which relates to the actual location of the object in memory.
-@item @code{setIn(InputStream)} -- Set the system input stream.
-@item @code{setOut(PrintStream)} -- Set the system output stream.
-@item @code{setErr(PrintStream)} -- Set the system error stream.
-@item @code{currentTimeMillis()} -- Gets the system time in milliseconds.
-@item @code{getenv(String)} -- Returns the value of the specified environment
-variable.
-@item @code{getenv()} -- Returns a list of `name=value' pairs which correspond
-to the environment variables.
-@end itemize
-@item Java Methods
-@itemize @bullet
-@item @code{makeStandardInputStream()} -- Helps provide the functionality of
-@code{System.in} by wrapping the appropriate file descriptor in a
-buffered file input stream.  VMs may choose to create the stream from
-the descriptor differently rather than using this method.
-@item @code{makeStandardOutputStream()} -- Helps provide the functionality of
-@code{System.out} by wrapping the appropriate file descriptor in a buffered
-file output stream.  VMs may choose to create the stream from the descriptor
-differently rather than using this method.
-@item @code{makeStandardErrorStream()} -- Helps provide the functionality of
-@code{System.err} by wrapping the appropriate file descriptor in a buffered
-file output stream.  VMs may choose to create the stream from the descriptor
-differently rather than using this method.
-@end itemize
-@end itemize
-
-Classpath also provides native implementations of
-
-@itemize @bullet
-@item @code{setIn(InputStream)} 
-@item @code{setOut(PrintStream)} 
-@item @code{setErr(PrintStream)} 
-@item @code{currentTimeMillis()} 
-@item @code{getenv(String)}
-@end itemize
-
-making a VM implementation optional.
-
-@node java.lang.VMThrowable, java.lang.VMCompiler, java.lang.VMSystem, java.lang
-@subsection @code{java.lang.VMThrowable}
-@code{VMThrowable} is used to hold the VM state of a throwable, created either
-when a @code{Throwable} is created or the @code{fillInStackTrace()} method is
-called (i.e. when the actual stack trace is needed, as a lot of exceptions are
-never actually used).  The actual class has two @code{native} methods,
-one (@code{fillInStackTrace()}) being a method of the class used to obtain
-instances, and the other an instance method, @code{getStackTrace()}.
-@itemize @bullet
-@item @code{fillInStackTrace(Throwable)} -- The VM should return the current
-execution state of the @code{Throwable} in the form of a @code{VMThrowable}
-instance.  The VM may also return @code{null} if it does not support this
-functionality.
-@item @code{getStackTrace()} -- This is used to create a real
-@code{StackTraceElement} array for the exception, using the state data
-stored during creation of the instance.
-@end itemize
-
-@node java.lang.VMCompiler, java.lang.VMDouble, java.lang.VMThrowable, java.lang
-@subsection @code{java.lang.VMCompiler}
-
-@code{VMCompiler} provides an interface for VMs which wish to provide
-JIT compilation support.  The default implementation is simply a series
-of stubs. The property, @code{java.compiler}, should point to a library
-containing the function @code{java_lang_Compiler_start()} if such support
-is to be provided.
-
-@itemize @bullet
-@item @code{compileClass(Class)} -- Invoke the compiler to compile the specific
-class, returning @code{true} if successful.
-@item @code{compileClasses(String)} -- The compiler should compile the classes
-matching the specified string, again returning @code{true} on success.
-@item @code{command(Object)} -- The object represents a command given to the
-compiler, and is specific to the compiler implementation.
-@item @code{enable} -- Enable the operation of the compiler.
-@item @code{disable} -- Disable compiler operation.
-@end itemize
-
-@node java.lang.VMDouble, java.lang.VMFloat, java.lang.VMCompiler, java.lang
-@subsection @code{java.lang.VMDouble}
-
-@code{VMDouble} provides native support for the conversion and parsing
-of doubles.
-
-@itemize @bullet
-@item @code{doubleToLongBits(double)} -- Converts the double to the IEEE 754
-bit layout, collapsing NaNs to @code{0x7ff8000000000000L}.
-@item @code{doubleToRawLongBits(double)} -- Same as the above, but preserves
-NaNs.
-@item @code{longBitsToDouble(long)} -- This is the inverse of the last method,
-preserving NaNs so that the output of one can be fed into the other without
-data loss.
-@item @code{toString(double,boolean)} -- Converts the double to a string,
-giving a shorter value if the flag @code{isFloat} is @code{true}, indicating
-that the conversion was requested by @code{java.lang.Float} rather than
-@code{java.lang.Double}.
-@item @code{initIDs} -- Used by JNI-based solutions to initialize the cache
-of the static field IDs.  The default @code{VMDouble} implementation has a
-static initializer which loads the JNI library and calls this method.
-@item @code{parseDouble} -- Turn the string into a usable double value.
-@end itemize
-
-Classpath provides native implementations of all these, making VM
-implementation optional.
-
-@node java.lang.VMFloat, java.lang.VMProcess, java.lang.VMDouble, java.lang
-@subsection @code{java.lang.VMFloat}
-
-@code{VMFloat} provides native support for the conversion of floats.
-
-@itemize @bullet
-@item @code{floatToIntBits(float)} -- Converts the float to the IEEE 754
-bit layout, collapsing NaNs to @code{0x7fc00000}.
-@item @code{floatToRawIntBits(float)} -- Same as the above, but preserves
-NaNs.
-@item @code{intBitsToFloat(int)} -- This is the inverse of the last method,
-preserving NaNs so that the output of one can be fed into the other without
-data loss.
-@end itemize
-
-Classpath provides native implementations of all these, making VM
-implementation optional.
-
-@node java.lang.VMProcess, java.lang.VMRuntime, java.lang.VMFloat, java.lang
-@subsection @code{java.lang.VMProcess}
-
-@code{VMProcess} handles the execution of external processes.  In the
-default implementation, threads are spawned and reaped by @code{ProcessThread}.
-A constructor creates a new @code{VMProcess}, which extends rather than
-complements @code{Process}, using an array of arguments, an array of
-environment variables and a working directory.  The instance maintains
-system input, output and error streams linked to the external process.
-Three @code{native} methods are used, and implementations are provided
-for all three by Classpath, making VM implementation optional.  These use
-the POSIX functions, @code{fork()}, @code{waitpid()} and @code{kill()}.
-
-@itemize @bullet
-@item @code{nativeSpawn(String[],String[],File,boolean)} -- The VM should
-create a new process which uses the specified command-line arguments,
-environment variables and working directory.  Unlike the other two
-methods, this method is linked to an instance, and must call
-@code{setProcessInfo()} with the results before returning.  The
-boolean argument maps to the @code{redirectErrorStream} property of
-@code{java.lang.ProcessBuilder}.  When true, the output and error streams
-are merged.
-@item @code{nativeReap()} -- This is called to perform a reap of any
-zombie processes, and should not block, instead returning a boolean as to
-whether reaping actually took place.
-@item @code{nativeKill(long)} -- The VM should terminate the specified PID.
-@end itemize
-
-@node java.lang.VMRuntime, java.lang.VMString, java.lang.VMProcess, java.lang
-@subsection @code{java.lang.VMRuntime}
-
-The @code{VMRuntime} class provides a series of native methods
-which divulge information about the runtime or invoke certain
-operations.  This includes retrieving the amount of available memory,
-and scheduling the garbage collector.  There are two exceptions: the
-@code{enableShutdownHooks} method, which allows the VM to put in its own
-shutdown hooks when @code{Runtime.addShutdownHook()} is first invoked,
-and @code{exec(String[],String[],File)} which spawns an external process.
-These are Java-based static methods instead.  The first is simply a stub by
-default, while the second simply links to the functionality of
-@code{VMProcess} (and should be changed if a different @code{Process}
-implementation is used).
-
-@itemize @bullet
-@item @code{availableProcessors()} -- Returns the number of processors 
-available to the VM.
-@item @code{freeMemory()} -- Returns the amount of memory the VM has available
-on the heap for allocating.
-@item @code{totalMemory()} -- Returns the size of the heap.
-@item @code{maxMemory()} -- Returns the maximum memory block the VM will
-attempt to allocate.  May be simply @code{Long.MAX_VALUE} (8 exabytes!)
-@item @code{gc()} -- Allows users to explicitly invoke the garbage collector.
-This is a suggestion to the VM, rather than a command, and the garbage
-collector should run anyway @emph{without} it being invoked.
-@item @code{runFinalization()} -- Like the above, but related to the
-finalilzation of objects rather than the garbage collector.
-@item @code{runFinalizationForExit()} -- Called immediately prior to VM
-shutdown in order to finalize all objects (including `live' ones)
-@item @code{traceInstructions(boolean)} -- This turns on and off the optional
-VM functionality of printing a trace of executed bytecode instructions.
-@item @code{traceMethodCalls(boolean)} -- This turns on and off the optional
-VM functionality of printing a trace of methods called.
-@item @code{runFinalizersOnExit(boolean)} -- A toggleable setting for
-running the finalization process at exit.
-@item @code{exit(int)} -- The VM should shutdown with the specified exit code.
-@item @code{nativeLoad(String,ClassLoader)} -- Attempts to load a file,
-returning an integer which is non-zero for success.  Nothing happens if the
-file has already been loaded.
-@item @code{mapLibraryName(String)} -- The VM should map the system-independent
-library name supplied to the platform-dependent equivalent (e.g. a @code{.so}
-or @code{.dll} file)
-@end itemize
-
-@node java.lang.VMString, java.lang.VMThread, java.lang.VMRuntime, java.lang
-@subsection @code{java.lang.VMString}
-@code{VMString} is responsible for handling interned strings.  If two strings
-are equal (using the @code{equals()} method), then the results of calling
-the @code{intern()} method on each of them makes them equal
-(using @code{==}).  Thus, the same string object is always returned by
-@code{intern} if the two strings are equal.  The default implementation
-is Java-based and implements @code{intern(String)} by maintaining a
-@code{WeakHashMap} which links the strings to their @code{WeakReference}.
-A new mapping is created for each new string being @code{intern}ed.  
-A VM may implement this differently by implementing this method,
-which is @code{static} and the only one in @code{VMString}.
-
-@node java.lang.VMThread, java.lang.VMMath, java.lang.VMString, java.lang
-@subsection @code{java.lang.VMThread}
-
-@code{VMThread} provides the link between Java's threads and the platform
-threading support.  A @code{VMThread} is created via a private constructor
-and linked to a @code{Thread} instance.  This occurs when the @code{Thread}
-instance is started by the static @code{create(Thread,long)} method (the second
-argument requests a certain stack size, usually zero).  The thread itself is
-executed via the @code{run()} method, which handles any problems with the
-running of the thread and its eventual death.
-
-@code{VMThread} provides the following accessors and mutators for accessing
-the thread state via @code{VMThread},
-
-@itemize @bullet
-@item @code{getName()}
-@item @code{setName(String)}
-@item @code{getPriority()}
-@item @code{setPriotity(int)}
-@item @code{isDaemon()}
-@end itemize
-
-all of which refer to the @code{Thread} instance. @code{setPriority(int)} also
-calls the appropriate native method.  @code{stop(Throwable)} similarly wraps
-a native method, merely adding in a check for the state of the thread.
-
-The default implementation also provides Java-based implementations of
-@code{join(long,int)}, @code{sleep(long,int)} and
-@code{holdsLock(Object)}.  @code{join} and @code{sleep} simply wait for
-the appropriate amount of time, with @code{join} additionally waiting
-for the thread instance to become @code{null}.  @code{holdsLock} simply
-checks if an object is locked by the current thread by trying to invoke
-the @code{notify} method, and catching the failing exception if this is
-not the case.
-
-The remainder of the class is a series of @code{native} methods, some of
-which are mandatory for VM implementation and others which provide optional
-or deprecated functionality.
-
-@itemize @bullet
-@item Mandatory Instance Methods
-@itemize @bullet
-@item @code{start(long)} -- The VM should create the native thread and start
-it running using the @code{run} method of the @code{VMThread} instance on
-which this method is called.
-@item @code{interrupt()} -- The VM should interrupt the running thread and
-throw an appropriate exception.
-@item @code{isInterrupted()} -- Checks the interrupted state of the thread.
-@item @code{suspend()} -- The thread should be suspended until resumed.
-@item @code{resume()} -- The thread should be resumed from its suspended state.
-This pair of methods are deprecated, due to the possibility of a deadlock
-occuring when a thread with locks is suspended.
-@item @code{nativeSetPriority(int)} -- Called by @code{setPriority}
-to allow the setting to flow down to the native thread.
-@item @code{nativeStop(Throwable)} -- The VM should stop the thread abnormally
-and throw the specified exception.  This is clearly deprecated, due to the
-ambiguous state an abruptly-stopped thread may leave.
-@item @code{getState()} -- Returns the VM's impression of the current state
-of the thread.  The applicable states are supplied by the @code{State}
-enumeration in @code{java.lang.Thread}.
-@end itemize
-@item Mandatory Class Methods
-@itemize @bullet
-@item @code{currentThread()} -- Return a reference to the thread currently
-being executed.
-@item @code{yield()} -- The VM should allow some other thread to run.
-The current thread maintains its locks even though it stops executing for
-the time being.
-@item @code{interrupted()} -- A shortcut to obtaining the interrupted state
-of the current thread.
-@end itemize
-@item Other Methods
-@itemize @bullet
-@item @code{countStackFrames()} -- Returns a count of the number of stack
-frames in the thread.  This depends on the deprecated method @code{suspend()}
-having returned true, and is thus deprecated as a result.
-@end itemize
-@end itemize
-
-@node java.lang.VMMath,, java.lang.VMThread, java.lang
-@subsection @code{java.lang.VMMath}
-
-The @code{VMMath} class provides a series of native methods
-for some of the mathematical functions present in @code{java.lang.Math}.
-Classpath provides a default implementation of these which maps the
-functions to those provided by @code{fdlibm}.  VM implementors are welcome
-to replace this with more efficent implementations, as long as the accuracy
-contract of these methods, specified in @code{java.lang.Math}, is maintained.
-
-@itemize @bullet
-@item 1.0
-@itemize @bullet
-@item @code{sin(double)} -- Returns the sine value for the given angle.
-@item @code{cos(double)} -- Returns the cosine value for the given angle.
-@item @code{tan(double)} -- Returns the tangent value for the given angle.
-@item @code{asin(double)} -- Returns the arc sine value for the given angle.
-@item @code{acos(double)} -- Returns the arc cosine value for the given angle.
-@item @code{atan(double)} -- Returns the arc tangent value for the given angle.
-@item @code{atan2(double,double)} -- Returns the arc tangent of the ratio of
-the two arguments.
-@item @code{exp(double)} -- Returns the exponent raised to the given power.
-@item @code{log(double)} -- Returns the natural logarithm for the given value.
-@item @code{sqrt(double)} -- Returns the square root of the value.
-@item @code{pow(double,double)} -- Returns x to the power of y.
-@item @code{IEEEremainder(double,double)} -- Returns the IEEE 754 remainder
-for the two values.
-@item @code{ceil(double)} -- Returns the nearest integer >= the value.
-@item @code{floor(double)} -- Returns the nearest integer <= the value.
-@item @code{rint(double)} -- Returns the nearest integer or the even one
-if the distance between the two is equal.
-@end itemize
-@item 1.5
-@itemize @bullet
-@item @code{cbrt(double)} -- Returns the cube root of the value.
-@item @code{cosh(double)} -- Returns the hyperbolic cosine value for the given
-angle.
-@item @code{expm1(double)} -- Returns the exponent of the value minus one.
-@item @code{hypot(double,double)} -- Returns the hypotenuse corresponding to
-x and y.
-@item @code{log10(double)} -- Returns the base 10 logarithm of the given value.
-@item @code{log1p(double)} -- Returns the natural logarithm of the value plus
-one.
-@item @code{sinh(double)} -- Returns the hyperbolic sine value for the given
-angle.
-@item @code{tanh(double)} -- Returns the hyperbolic tangent value for the given angle.
-@end itemize
-@end itemize
-
-@node gnu.classpath, java.util, java.lang, Classpath Hooks
-@section @code{gnu.classpath}
-
-The @code{gnu.classpath} package provides Classpath-specific functionality,
-primarily relating to the features in @code{java.lang}.  At present, this
-includes the context of a class (the stack) and the system properties.
-
-@menu
-* gnu.classpath.VMStackWalker::
-* gnu.classpath.VMSystemProperties::
-* gnu.classpath.Unsafe::
-@end menu
-
-@node gnu.classpath.VMStackWalker,gnu.classpath.VMSystemProperties,gnu.classpath,gnu.classpath
-@subsection @code{gnu.classpath.VMStackWalker}
-
-@code{VMStackWalker} provides access to the class context or stack.  The
-default implementation consists of a @code{native} @code{static} method,
-@code{getClassContext()}, which obtains the class context, and two helper
-methods which obtain the calling class (the 3rd element in the context array)
-and its class loader, respectively.
-
-@itemize @bullet
-@item @code{getClassContext()} -- The VM should return an array of
-@code{Class} objects, each of which relates to the method currently being
-executed at that point on the stack.  Thus, the first item (index 0) is the
-class that contains this method.
-@item @code{getCallingClass()} -- A Java-based helper method which returns
-the @code{Class} object which contains the method that called the method
-accessing @code{getCallingClass()}. 
-@item @code{getCallingClassLoader()} -- Like the last, but returning the class
-loader of the class.
-@end itemize
-
-@node gnu.classpath.VMSystemProperties,gnu.classpath.Unsafe,gnu.classpath.VMStackWalker,gnu.classpath
-@subsection @code{gnu.classpath.VMSystemProperties}
-
-@code{VMSystemProperties} allows the VM to hook into the property creation
-process, both before and after the system properties are added by GNU
-Classpath.  The default implementation assumes that the VM will add its
-properties first, by making the pre-initialisation method @code{native},
-and that the Classpath properties may then be altered by a Java-based
-post-initialisation method.
-
-As these methods are called as part of the bootstrap process, caution should
-be used as to what classes are used, and properties should only be set
-using @code{Properties.setProperty()}.  Specifically, I/O classes should be
-avoided at this early stage.
-
-@itemize @bullet
-@item @code{preInit(Properties)} -- Allows the VM to add properties
-@emph{before} the Classpath properties are added. The default implementation
-includes a full list of properties that @emph{must} be added by the VM, but
-additional VM-specific ones may also be added.  
-@item @code{postInit(Properties)} -- Same as the last, but called after the
-Classpath properties have been added.  The main purpose of this is to allow
-the VM to alter the properties added by GNU Classpath to suit it.
-@end itemize
-
-@node gnu.classpath.Unsafe,,gnu.classpath.VMSystemProperties,gnu.classpath
-@subsection @code{gnu.classpath.Unsafe}
-
-The @code{Unsafe} class provides access to some low-level unsafe operations
-as required by the addition of the java.util.concurrent classes.  These
-focus on direct memory access to the fields within the VM and providing
-atomic update methods.
-
-@itemize @bullet
-@item @code{objectFieldOffset(Field)} -- Provides the caller with the memory
-offset of a particular field.
-@item @code{compareAndSwap*(Object,long,*,*)} -- One of these methods is
-provided for each of int, long and Object (hence the *s).  The value of
-a field pointed to by the given Object and offset is compared with the
-first value and replaced with the second if they are the same.  The reason
-for this method is to make this change operation atomic.
-@item @code{put/get*(Object,long,*)} -- These are like the last set of
-methods, handling integers, longs and Objects, but the field is always
-changed on a put.  Different methods are provided for different semantics.
-Ordered variants perform a lazy put, in that the change does not
-immediately propogate to other threads, while the others provide
-volatile or 'normal' semantics.
-@item @code{arrayBaseOffset(Class)} and @code{arrayIndexScale(Class)} --
-These two methods allow an array class to be traversed by pointer
-arithmetic, by gaining the address of the first element and then
-scaling appropriately for the later ones.
-@item @code{park(boolean,long)} and @code{unpark(Thread)} -- These methods
-block and unblock threads respectively, with an optional timeout being
-provided for the blocking.  @code{unpark} is unsafe as the thread may have
-been destroyed by native code. 
-@end itemize
-
-@node java.util, java.io, gnu.classpath, Classpath Hooks
-@section java.util
-
-The @code{java.util} VM hooks provide links between the mix of functionality
-present in that package, which includes collections, date and time handling
-and parsing.  At present, there is only one hook, which connects GNU Classpath
-to the timezone information provided by the underlying platform.
-
-@menu
-* java.util.VMTimeZone::
-@end menu
-
-@node java.util.VMTimeZone,,java.util,java.util
-@subsection @code{java.util.VMTimeZone}
-
-@code{VMTimeZone} joins @code{TimeZone} to the platform timezone information
-via the static method, @code{getDefaultTimeZoneId()}.  The VM hook is
-expected to return a @code{TimeZone} instance that represents the current
-timezone in use by the platform.  The default implementation provides
-this functionality for POSIX or GNU-like systems, and VMs that want this
-functionality can keep this implementation and implement the native
-method, @code{getSystemTimeZoneId()}.  This method is only called when
-obtaining the timezone name from the @code{TZ} environment variable,
-@code{/etc/timezone} and @code{/etc/localtime} all fail.  This fallback
-mechanism also means that a system which doesn't provide the above three
-methods, but does provide a timezone in string form, can still use this
-implementation.
-
-@node java.io, java.security, java.util, Classpath Hooks
-@section java.io
-
-The @code{java.io} package is heavily reliant on access to the I/O facilities
-of the underlying platform.  As far as its VM hooks go, they provide two
-areas of functionality to GNU Classpath, these being
-
-@itemize @bullet
-@item File and directory queries and manipulation
-@item Serialization of objects
-@end itemize
-
-The first corresponds directly to most of the @code{File} class, while
-the latter underlies the functionality provided by the
-@code{ObjectInputStream} and @code{ObjectOutputStream}.  More low-level I/O
-is provided by @ref{java.nio}.
-
-@menu
-* java.io.VMFile::
-* java.io.VMObjectInputStream::
-* java.io.VMObjectStreamClass::
-@end menu
-
-@node java.io.VMFile,java.io.VMObjectInputStream,java.io,java.io
-@subsection @code{java.io.VMFile}
-
-@code{VMFile} allows GNU Classpath's @code{File} representations to
-probe and modify the file system using the native functions of the
-platform.  The default implementation (which consists of both a
-@code{VMFile} class and the native methods) is primarily UNIX-centric,
-working with POSIX functions and assuming case-sensitive filenames,
-without the restriction of the 8.3 format.  It consists mainly of
-@code{static} @code{native} methods, with a few Java helper methods.
-The native methods represent the file as a string containing its path,
-rather than using the object itself.
-
-@itemize @bullet
-@item Native Methods
-@itemize @bullet
-@item @code{lastModified(String)} -- The native method should return a
-@code{long} value that represents the last modified date of the file.
-@item @code{setReadOnly(String)} -- Sets the file's permissions to read only,
-in whichever way this is realised by the platform.
-@item @code{create(String)} -- Create the named file.
-@item @code{list(String)} -- The native method opens the named directory,
-reads the contents and returns them as a Java @code{String} array.
-@item @code{renameTo(String,String)} -- Renames the first file to the second.
-@item @code{length(String)} -- Returns a @code{long} value representing
-the file size.
-@item @code{exists(String)} -- Tests for the existence of the named file
-or directory.
-@item @code{delete(String)} -- Deletes the file or directory.
-@item @code{setLastModified(String,long)} -- Change the last modified time.
-@item @code{mkdir(String)} -- Creates the named directory.
-@item @code{isFile(String)} -- Tests that the named path references a file.
-@item @code{canWrite(String)} -- Tests that the file can be written to.
-This method is @code{synchronized}, so the object is locked during the check.
-@item @code{canRead(String)} -- Complement of the last method.
-@item @code{isDirectory(String)} -- Tests that the named path references
-a directory.
-@end itemize
-@item Java Helper Methods
-@itemize @bullet
-@item @code{canWriteDirectory(File)} -- Checks that the directory can be
-written to, by trying to create a temporary file in it.
-@item @code{listRoots()} -- Returns the root of a GNU filesystem i.e. `/'
-in an array.
-@item @code{isHidden(String)} -- Checks whether the file starts with `.',
-which is how files are hidden on UNIX-style systems.
-@item @code{getName(String)} -- Pulls the actual filename from the end of
-the path, by breaking off the characters after the last occurrence of the
-platform's file separator.
-@item @code{getCanonicalForm(String)} -- This converts a UNIX path to
-its canonical form by removing the `.' and `..' sections that occur within.
-@end itemize
-@end itemize
-
-@node java.io.VMObjectInputStream,java.io.VMObjectStreamClass,java.io.VMFile,java.io
-@subsection @code{java.io.VMObjectInputStream}
-
-This class consists of two methods which provide functionality used in
-deserializing an object.  @code{currentClassLoader()} provides the first
-user-defined class loader from the class context
-(@xref{gnu.classpath.VMStackWalker},) via a @code{PrivilegedAction}.
-@code{allocateObject(Class,Class,Constructor)} is a @code{native} method
-(a reference implementation is provided) which creates an object but
-calls the constructor of another class, which is a superclass of the
-object's class.
-
-@node java.io.VMObjectStreamClass,,java.io.VMObjectInputStream,java.io
-@subsection @code{java.io.VMObjectStreamClass}
-
-@code{VMObjectStreamClass} is a series of @code{static} @code{native}
-methods that provide some of the groundwork for @code{ObjectStreamClass}
-and @code{ObjectStreamField}.  @code{hasClassInitializer(Class)} works
-with the former, and checks for the presence of a static initializer.
-The remaining methods are of the form @code{setXXXNative(Field,Object,XXX)}
-and support @code{ObjectStreamField}.  One exists for each of the main types
-(boolean, float, double, long, int, short, char, byte and object) and is used
-to set the specified field in the supplied instance to the given value.
-
-A default implementation is provided for all of them, so a VM implementation
-is optional.
-
-@node java.security, java.net, java.io, Classpath Hooks
-@section java.security
-
-The @code{java.security} package provides support for Java's security
-architecture.  
-
-@menu
-* java.security.VMAccessController::
-* java.security.VMSecureRandom::
-@end menu
-
-@node java.security.VMAccessController,java.security.VMSecureRandom,java.security,java.security
-@subsection @code{java.security.VMAccessController}
-
-The @code{AccessController} is used to perform privileged actions.  Its
-hook class, @code{VMAccessController}, maintains the
-@code{AccessControlContext} and the default implementation is purely
-Java-based.  The VM may choose to replace this with their own.
-The methods in the reference version are as follows:
-
-@itemize @bullet
-@item @code{pushContext(AccessControlContext)} -- Adds a new context to the
-stack for the current thread.  This is called before a privileged action
-takes place.
-@item @code{popContext()} -- Removes the top context from the stack.  This
-is performed after the privileged action takes place.
-@item @code{getContext()} -- Either derives a context based on the 
-@code{ProtectionDomain}s of the call stack (see the next method) or returns
-the top of the context stack.
-@item @code{getStack()} -- Provides access to the call stack as a pair of
-arrays of classes and method names.  The actual implementation returns
-an empty array, indicating that there are no permissions.
-@end itemize
-
-@node java.security.VMSecureRandom,,java.security.VMAccessController,java.security
-@subsection @code{java.security.VMSecureRandom}
-
-The @code{VMSecureRandom} class is used to provide access to
-cryptographically secure random numbers.  The default implementation
-of the class runs eight threads that increment counters in a tight
-loop, and XORs each counter to produce one byte of seed data. This is
-not very efficient, and is not guaranteed to be random (the thread
-scheduler is probably deterministic, after all). VM implementors
-should provide a version of this class, which implements the method
-@code{generateSeed(byte[],int,int)}, so that it fills the buffer using
-a random seed from a system facility, such as a system entropy
-gathering device or hardware random number generator.  The parameters
-are the usual set of buffer, offset and length and the method returns
-the number of bytes actually generated, which may be less than that
-requested.
-
-@node java.net, java.nio, java.security, Classpath Hooks
-@section java.net
-
-The @code{java.net} package is heavily reliant on access to the networking
-facilities of the underlying platform.  The VM hooks provide information
-about the available network interfaces, and access to lookup facilities
-for network addresses.
-
-@menu
-* java.net.VMInetAddress::
-* java.net.VMNetworkInterface::
-@end menu
-
-@node java.net.VMInetAddress,java.net.VMNetworkInterface,java.net,java.net
-@subsection @code{java.net.VMInetAddress}
-
-@code{VMInetAddress} is a series of @code{static} @code{native} methods
-which provide access to the platform's lookup facilities.  All the methods
-are implemented by GNU Classpath, making VM implementation optional, and
-are as follows:
-
-@itemize @bullet
-@item @code{getLocalHostname()} -- Wraps the @code{gethostname} function, and
-falls back on `localhost'.
-@item @code{lookupInaddrAny()} -- Returns the value of @code{INADDR_ANY}.
-@item @code{getHostByAddr(byte[])} -- Looks up the hostname based on an IP
-address.
-@item @code{getHostByName(String)} -- The reverse of the last method, it
-returns the IP addresses which the given host name resolves to.
-@end itemize
-
-@node java.net.VMNetworkInterface,,java.net.VMInetAddress,java.net
-@subsection @code{java.net.VMNetworkInterface}
-
-@code{VMNetworkInterface} currently consists of a single @code{static}
-@code{native} method, @code{getInterfaces()}, which retrieves the
-network interfaces available on the underlying platform as a @code{Vector}.
-The current GNU Classpath implementation is a native stub.
-
-@node java.nio, java.nio.channels, java.net, Classpath Hooks
-@section java.nio
-
-The @code{java.nio} package is part of the New I/O framework added in
-Java 1.4.  This splits I/O into the concepts of @emph{buffers},
-@emph{charsets}, @emph{channels} and @emph{selectors}, and
-@code{java.nio} defines the buffer classes.  As far as native and VM
-code is concerned, the new package needs support for low-level efficient
-buffer operations.
-
-@menu
-* java.nio.VMDirectByteBuffer::
-@end menu
-
-@node java.nio.VMDirectByteBuffer,,java.nio,java.nio
-@subsection @code{java.nio.VMDirectByteBuffer}
-
-A @code{ByteBuffer} maintains a buffer of bytes, and allows it to be
-manipulated using primitive operations such as @code{get}, @code{put},
-@code{allocate} and @code{free}.  A direct buffer avoids intermediate
-copying, and uses native data which shouldn't be manipulated by a
-garbage collector.  The VM class consists of @code{static} @code{native}
-methods, all of which are given default implementations by GNU
-Classpath.
-
-@itemize @bullet
-@item @code{init()} -- Creates an instance of an appropriate
-@code{gnu.classpath.RawData} class.  This class is not garbage
-collected, is created natively and is used in the other methods to reference
-the buffered data.
-@item @code{allocate(int)} -- Allocates the memory for the buffer using
-@code{malloc} and returns a reference to the @code{RawData} class.
-@item @code{free(RawData)} -- Frees the memory used by the buffer.
-@item @code{get(RawData,int)}  -- Returns the data at the specified index.
-@item @code{get(RawData,int,byte[],int,int)} -- Copies a section of the
-data into a byte array using @code{memcpy}.
-@item @code{put(RawData,int,byte)} -- Puts the given data in the buffer
-at the specified index.
-@item @code{adjustAddress(RawData,int)} -- Adjusts the pointer into the buffer.
-@item @code{shiftDown(RawData,int,int,int)} -- Moves the content of the buffer
-at an offset down to a new offset using @code{memmove}.
-@end itemize
- 
-@node java.nio.channels, gnu.java.nio, java.nio, Classpath Hooks
-@section java.nio.channels
-
-Channels provide the data for the buffers with the New I/O packages.
-For example, a channel may wrap a file or a socket.  The VM hooks,
-at the moment, simply allow the channels to be accessed by @code{java.io}
-streams.
-
-@menu
-* java.nio.channels.VMChannels::
-@end menu
-
-@node java.nio.channels.VMChannels,,java.nio.channels,java.nio.channels
-@subsection @code{java.nio.channels.VMChannels}
-
-@code{VMChannels} provides the methods that create the channels or
-streams.  The default implementation is in pure Java and simply wraps
-the channels in standard I/O classes from @code{java.io}.
-
-@itemize @bullet
-@item @code{createStream(Class,Channel)} -- Creates a @code{FileChannel}
-which wraps an instance of the specified stream class, created by reflection.
-This method is private, and is used by the other two.
-@item @code{newInputStream(ReadableByteChannel)} -- Wraps the channel
-in a @code{FileInputStream}.
-@item @code{newOutputStream(WritableByteChannel)} -- Wraps the channel
-in a @code{FileOutputStream}.
-@end itemize
-
-@node gnu.java.nio, java.lang.reflect, java.nio.channels, Classpath Hooks
-@section gnu.java.nio
-
-The @code{gnu.java.nio} class provides Classpath implementations of the
-interfaces provided by @code{java.nio}.  The VM classes provide the native
-support necessary to implement @emph{pipes} and @emph{selectors}.
-
-@menu
-* gnu.java.nio.VMPipe::
-* gnu.java.nio.VMSelector::
-@end menu
-
-@node gnu.java.nio.VMPipe,gnu.java.nio.VMSelector,gnu.java.nio,gnu.java.nio
-@subsection @code{gnu.java.nio.VMPipe}
-
-@code{VMPipe} provides the native functionality for a uni-directional pipe
-between a source and a destination (sink) channel.  It consists of one 
-@code{static} @code{native} method, @code{init(PipeImpl,SelectorProvider)},
-the reference implementation of which is currently a native stub.  Ideally,
-this should initialise the pipe at the native level.
-
-@node gnu.java.nio.VMSelector,,gnu.java.nio.VMPipe,gnu.java.nio
-@subsection @code{gnu.java.nio.VMSelector}
-
-A @code{Selector} selects between multiple @code{SelectableChannel}s based
-on their readiness and a key set.  The VM hook for the Classpath implementation
-of this is @code{VMSelector}, and this allows the actual @code{select()}
-operation to be performed.  This is represented by the @code{static}
-@code{native} method, @code{select(int[],int[],int[],long)}, and a default
-implementation of this is provided.
-
-@node java.lang.reflect, gnu.java.lang, gnu.java.nio, Classpath Hooks
-@section @code{java.lang.reflect}
-@code{java.lang.reflect} provides the interface to Java's reflection
-facilities.  Via reflection, programmers can obtain type information about
-a particular instance at runtime or dynamically create new instances.
-
-@menu
-* java.lang.reflect.VMArray::
-@end menu
-
-@node java.lang.reflect.VMArray,,,java.lang.reflect
-@subsection @code{java.lang.reflect.VMArray}
-
-The @code{VMArray} class provides a hook, @code{createObjectArray},
-which the VM uses to generate a new non-primitive array of a
-particular class and size.  The default implementation simply passes
-the job down to the standard JNI function, @code{NewObjectArray}.
-
-@node gnu.java.lang, gnu.java.lang.management, java.lang.reflect, Classpath Hooks
-@section @code{gnu.java.lang}
-
-@code{gnu.java.lang} provides VM interfaces for the GNU
-implementations of features in java.lang.  Currently, this includes the
-implementation of instrumentation.
-
-@menu
-* gnu.java.lang.VMInstrumentationImpl::
-@end menu
-
-@node gnu.java.lang.VMInstrumentationImpl,,,gnu.java.lang
-@subsection @code{gnu.java.lang.VMInstrumentationImpl}
-
-The @code{gnu.java.lang.VMInstrumentationImpl} and
-@code{gnu.java.lang.InstrumentationImpl} classes provide an implementation of the
-@code{java.lang.instrument.Instrument} interface. 
-A @code{InstrumentationImpl} object should be created by the VM when agents
-are given in the command line (see the @code{java.lang.instrument} package
-documentation). The VM has to set the static field
-@code{VMClassLoader.instrumenter} to this object. The VM should implement the
-static native methods of the @code{VMInstrumentationImpl} class.
-
-@itemize @bullet
-@item @code{isRedefineClassesSupported()} -- Returns true if the JVM supports
-class redefinition.
-@item @code{redefineClasses()} -- Gives a set of classes with new bytecodes.
-The VM must redefine the classes by reading the new bytecodes.
-@item @code{getAllLoadedClass()} -- Returns an array of all loaded classes.
-@item @code{getInitiatedClass()} -- Returns an array of all classes loaded
-by a specific class loader.
-@item @code{getObjectSize()} -- Gives the size of an object.
-@end itemize
-
-Instrumentation allows to modify the bytecode of a class before it gets read
-by the VM. In GNU Classpath, the @code{ClassLoader.defineClass} method calls
-the @code{VMClassLoader.defineClassWithTransformers} method which first checks
-if @code{VMClassLoader.instrumenter} is @code{null}. If it's the case, it
-directly calls @code{VMClassLoader.defineClass}. If it's not the case, the
-method calls at first the @code{InstrumentationImpl.callTransformers} method,
-which calls each transformer registered to the @code{InstrumentationImpl}
-object and returns a new bytecode array. Then, it calls the
-@code{VMClassLoader.defineClass} method with this new bytecode array.
-
-The second use of instrumentation is to redefine a class after it has been
-loaded by the VM. This is done in the Java application by calling the
-@code{Instrumentation.redefineClasses} method of the standard interface on
-a @code{Instrumentation} object. The @code{InstrumentationImpl.redefineClasses}
-method calls the @code{VMInstrumentationImpl.redefineClasses} native method
-which must be implemented by the VM. The implementation should call the
-@code{InstrumentationImpl.callTransformers} method.
-
-@node gnu.java.lang.management, java.lang.management, gnu.java.lang, Classpath Hooks
-@section @code{gnu.java.lang.management}
-
-@code{gnu.java.lang.management} provides the VM interfaces for the GNU
-implementations of the management beans.  
-
-@menu
-* gnu.java.lang.management.VMRuntimeMXBeanImpl::
-* gnu.java.lang.management.VMClassLoadingMXBeanImpl::
-* gnu.java.lang.management.VMThreadMXBeanImpl::
-* gnu.java.lang.management.VMMemoryMXBeanImpl::
-* gnu.java.lang.management.VMCompilationMXBeanImpl::
-* gnu.java.lang.management.VMMemoryPoolMXBeanImpl::
-* gnu.java.lang.management.VMMemoryManagerMXBeanImpl::
-* gnu.java.lang.management.VMGarbageCollectorMXBeanImpl::
-@end menu
-
-@node gnu.java.lang.management.VMRuntimeMXBeanImpl,gnu.java.lang.management.VMClassLoadingMXBeanImpl,,gnu.java.lang.management
-@subsection @code{gnu.java.lang.management.VMRuntimeMXBeanImpl}
-
-The @code{gnu.java.lang.management.RuntimeMXBeanImpl} provides an
-implementation of the @code{java.lang.management.RuntimeMXBean} interface,
-and is supported by VM functionality in the form of
-@code{gnu.java.lang.management.VMRuntimeMXBeanImpl}.  This provides a
-series of methods, which should be implemented by the virtual machine
-in order to provide the required information for the bean.  The VM
-methods are generally representative of information that is only
-available from the virtual machine, such as the command-line arguments
-it was given at startup.
-
-The methods are as follows:
-
-@itemize @bullet
-@item @code{(getInputArguments())} -- The VM should supply
-a @code{String} array containing each of the command-line
-arguments, excluding those that are directed at the
-@code{main()} method.  The reference implementation expects
-this to be a native method.
-@item @code{(getName())} -- The VM developer should choose
-an appropriate name for the virtual machine.  This name can
-be instance-specific e.g. it can include things like the
-process identifier or host name of the machine, which only
-apply to the current running instance.  Thus, the intention is
-that this name refers to the entity that the other information
-refers to, rather than the VM in general.  The reference
-implementation supplies a default concatenation of the VM
-name and version.
-@item @code{(getStartTime())} -- This should return the number
-of milliseconds at which the virtual machine was started.
-The uptime property of the bean is provided relative to this
-value.  Again, the reference implementation also expects
-this method to be native.
-@end itemize
-
-The virtual machine also needs to provide either the
-@code{sun.boot.class.path} or @code{java.boot.class.path}
-property in order to support the optional boot class path
-retrieval functionality.
-
-@node gnu.java.lang.management.VMClassLoadingMXBeanImpl,gnu.java.lang.management.VMThreadMXBeanImpl,gnu.java.lang.management.VMRuntimeMXBeanImpl,gnu.java.lang.management
-@subsection @code{gnu.java.lang.management.VMClassLoadingMXBeanImpl}
-
-The @code{gnu.java.lang.management.ClassLoadingMXBeanImpl} provides an
-implementation of the @code{java.lang.management.ClassLoadingMXBean} interface,
-and is supported by VM functionality in the form of
-@code{gnu.java.lang.management.VMClassLoadingMXBeanImpl}.  This provides a
-series of methods, which should be implemented by the virtual machine
-in order to provide the required information for the bean.  Implementing
-this bean requires the VM to monitor when classes are loaded and unloaded,
-and provide the option of verbose class loading output.
-
-The methods are as follows:
-
-@itemize @bullet
-@item @code{(getLoadedClassCount())} -- This should return
-the number of classes that are currently loaded by the VM.
-@item @code{(getUnloadedClassCount())} -- This should return
-the number of classes that have been loaded by the VM, but
-have since been unloaded.
-@item @code{(isVerbose())} -- This should return @code{true}
-or @code{false}, depending on whether verbose class loading
-output is turned or not, respectively.
-@item @code{(setVerbose(boolean))} -- This should allow the
-verbose class loading output to be turned on and off.
-@end itemize
-
-@node gnu.java.lang.management.VMThreadMXBeanImpl,gnu.java.lang.management.VMMemoryMXBeanImpl,gnu.java.lang.management.VMClassLoadingMXBeanImpl,gnu.java.lang.management
-@subsection @code{gnu.java.lang.management.VMThreadMXBeanImpl}
-
-The @code{gnu.java.lang.management.ThreadMXBeanImpl} provides an
-implementation of the @code{java.lang.management.ThreadMXBean} interface,
-and is supported by VM functionality in the form of
-@code{gnu.java.lang.management.VMThreadMXBeanImpl}.  This provides a
-series of methods, which should be implemented by the virtual machine
-in order to provide the required information for the bean.  Implementing
-this bean requires the VM to monitor thread-related statistics such as
-how often the blocked and waiting states have been entered, as well as
-additional optional support for time and contention monitoring.
-
-Optional support is determined by the following properties:
-
-@itemize @bullet
-@item @code{gnu.java.lang.management.CurrentThreadTimeSupport} --
-This property should be present if the VM supports monitoring the
-time used by the current thread.  If time monitoring for all threads
-is supported, this need not be provided.
-@item @code{gnu.java.lang.management.ThreadTimeSupport} --
-This property should be present if the VM supports monitoring the
-time used by all threads.
-@item @code{gnu.java.lang.management.ThreadContentionSupport} --
-This property should be present if the VM supports thread contention
-monitoring.
-@end itemize
-
-In addition, the property
-@code{gnu.java.lang.management.ThreadTimeInitallyEnabled} may be
-set to the @code{String} value, @code{"true"}, if time monitoring
-is enabled at startup.
-
-The methods are as follows:
-
-@itemize @bullet
-@item @code{(findMonitorDeadlockedThreads())} -- This should return
-an array of thread identifiers which match threads involved in
-deadlock cycles (where each thread is waiting to obtain a lock
-held by one of the others).  This is specified as a native method
-in the reference implementation.
-@item @code{(getAllThreads())} -- This should return an array of
-all live threads and set the @code{filled} variable to the number
-found.  A default implementation is provided.
-@item @code{(getAllThreadIds())} -- This should return an array of
-all live thread identifiers.  An implementation is provided against
-@code{getAllThreads()} by default.
-@item @code{(getCurrentThreadCpuTime())} -- This should return the
-approximate number of nanoseconds of CPU time the current thread
-has used.  This is an optional native method, which is used by VMs
-supporting time monitoring.
-@item @code{(getCurrentThreadUserTime())} -- This should return the
-approximate number of nanoseconds of user time the current thread
-has used.  This is an optional native method, which is used by VMs
-supporting time monitoring.
-@item @code{(getDaemonThreadCount())} -- This should return the number
-of live daemon threads.  A default implementation is provided, based
-on @code{getAllThreads()}.
-@item @code{(getPeakThreadCount())} -- The VM should maintain a record
-of the peak number of live threads, and return it when this method is
-called.  This is specified as a native method in the reference
-implementation.
-@item @code{(resetPeakThreadCount())} -- This should reset the record
-of the peak number of live threads to the current number of live
-threads.  This is specified as a native method in the reference
-implementation.
-@item @code{(getThreadCount())} -- This should return the number of
-live threads.  A default implementation is provided, based on
-@code{getAllThreads()}.
-@item @code{(getThreadCpuTime(long))} -- This should return the
-approximate number of nanoseconds of CPU time the specified thread
-has used.  This is an optional native method, which is used by VMs
-supporting time monitoring.
-@item @code{(getThreadUserTime(long))} -- This should return the
-approximate number of nanoseconds of CPU time the specified thread
-has used.  This is an optional native method, which is used by VMs
-supporting time monitoring.
-@item @code{(getThreadInfoForId(long, int))} -- This return an instance
-of @code{java.lang.management.ThreadInfo} for the specified thread.
-The class includes a private constructor which VMs should use to initialise
-it with the appropriate values for the thread.  The second argument
-given here specifies the depth of the stack trace supplied on construction
-of the instance.  Special values are 0 (return an empty array) and
-@code{Integer.MAX_VALUE} (return the maximum depth possible).  This
-is specified as a native method in the reference implementation.
-@item @code{(getTotalStartedThreadCount())} -- This should return the
-total number of threads that have been started by the VM, including ones
-that have died.  This is specified as a native method in the reference
-implementation.
-@end itemize
-
-@node gnu.java.lang.management.VMMemoryMXBeanImpl,gnu.java.lang.management.VMCompilationMXBeanImpl,gnu.java.lang.management.VMThreadMXBeanImpl,gnu.java.lang.management
-@subsection @code{gnu.java.lang.management.VMMemoryMXBeanImpl}
-
-The @code{gnu.java.lang.management.MemoryMXBeanImpl} provides an
-implementation of the @code{java.lang.management.MemoryMXBean} interface,
-and is supported by VM functionality in the form of
-@code{gnu.java.lang.management.VMMemoryMXBeanImpl}.  This provides a
-series of methods, which should be implemented by the virtual machine
-in order to provide the required information for the bean.  Implementing
-this bean requires the VM to monitor the levels of heap and non-heap
-memory, and provide the number of objects which are eligible for garbage
-collection.
-
-The methods are as follows:
-
-@itemize @bullet
-@item @code{(getHeapMemoryUsage())} -- This should return
-an instance of @code{java.lang.management.MemoryUsage} with
-values pertaining to the heap.  A default implementation is
-provided, based on @code{java.lang.Runtime}'s methods.
-@item @code{(getNonHeapMemoryUsage())} -- This should return
-an instance of @code{java.lang.management.MemoryUsage} with
-values pertaining to non-heap memory.
-@item @code{(getObjectPendingFinalizationCount())} -- Returns
-the number of objects which are no longer referenced, and which
-will thus be garbage collected on the next run of the garbage
-collector.
-@item @code{(isVerbose())} -- This should return @code{true}
-or @code{false}, depending on whether verbose memory management
-output is turned or not, respectively.
-@item @code{(setVerbose(boolean))} -- This should allow the
-verbose memory management output to be turned on and off.
-@end itemize
-
-@node gnu.java.lang.management.VMCompilationMXBeanImpl,gnu.java.lang.management.VMMemoryPoolMXBeanImpl,gnu.java.lang.management.VMMemoryMXBeanImpl,gnu.java.lang.management
-@subsection @code{gnu.java.lang.management.VMCompilationMXBeanImpl}
-
-The @code{gnu.java.lang.management.CompilationMXBeanImpl} provides an
-implementation of the optional @code{java.lang.management.CompilationMXBean}
-interface, and is supported by VM functionality in the form of
-@code{gnu.java.lang.management.VMCompilationMXBeanImpl}.  This provides a
-single method for returning the number of milliseconds the virtual
-machine's Just-In-Time (JIT) compiler has spent compiling.  Even if
-a JIT compiler is available and an instance of the bean supplied, this
-method is still optional.
-
-Optional support is determined by the following properties:
-
-@itemize @bullet
-@item @code{gnu.java.lang.compiler.name} -- This property should
-specify the name of the JIT compiler.  Classpath also uses this,
-within @code{java.lang.management.ManagementFactory}, to determine
-whether a bean should be created.  If this property is set to a
-non-null value, a bean will be created and its @code{getName()}
-method will return this value.
-@item @code{gnu.java.lang.management.CompilationTimeSupport} --
-This property should be present if the VM supports monitoring the
-time spent compiling.
-@end itemize
-
-Time support is implemented by the following method:
-
-@itemize @bullet
-@item @code{(getTotalCompilationTime())} -- This should return the
-number of milliseconds the JIT compiler has spent compiling.
-@end itemize
-
-@node gnu.java.lang.management.VMMemoryPoolMXBeanImpl,gnu.java.lang.management.VMMemoryManagerMXBeanImpl,gnu.java.lang.management.VMCompilationMXBeanImpl,gnu.java.lang.management
-@subsection @code{gnu.java.lang.management.VMMemoryPoolMXBeanImpl}
-
-The @code{gnu.java.lang.management.MemoryPoolMXBeanImpl} provides an
-implementation of the optional @code{java.lang.management.MemoryPoolMXBean}
-interface, and is supported by VM functionality in the form of
-@code{gnu.java.lang.management.VMMemoryPoolMXBeanImpl}.  Providing
-this interface requires implementing a number of methods for each supported
-pool.  These return statistics on memory usage, and, optionally, allows
-monitoring of when memory usage exceedes a preset threshold.
-
-Optional support is determined by the following properties:
-
-@itemize @bullet
-@item @code{gnu.java.lang.management.CollectionUsageThresholdSupport} --
-This property should be present if the VM supports setting a collection
-usage threshold and monitoring when it is matched or exceeded.  Collection
-usage thresholds are related to the remaining memory usage following a
-garbage collection cycle.
-@item @code{gnu.java.lang.management.UsageThresholdSupport} --
-This property should be present if the VM supports setting a 
-usage threshold and monitoring when it is matched or exceeded.  
-@end itemize
-
-The methods are as follows (all take a pool name as their
-first parameter):
-
-@itemize @bullet
-@item @code{(getCollectionUsage(String))} -- Returns a
-@code{java.lang.management.MemoryUsage} object, containing the
-memory usage statistics following a garbage collection cycle
-for the specified pool.  This may also return @code{null} if
-the pool isn't an appropriate pool for this particular task.
-@item @code{(getCollectionUsageThreshold(String))} -- Returns
-the pool's collection usage threshold, if supported.
-@item @code{(getCollectionUsageThresholdCount(String))} -- Returns
-the number of times the specified pool has matched or exceeded
-its collection usage threshold, if supported.
-@item @code{(getMemoryManagerNames(String))} -- Returns a list
-of names of memory managers which manage the specified pool.
-@item @code{(getPeakUsage(String))} -- Returns a
-@code{java.lang.management.MemoryUsage} object for the peak
-usage level of the specified pool.
-@item @code{(getType(String))} -- Returns a string containing
-either @code{"HEAP"} or @code{"NON_HEAP"} which indicates the type of
-memory used by the specified pool.
-@item @code{(getUsage(String))} -- Returns a
-@code{java.lang.management.MemoryUsage} object for the current
-usage level of the specified pool.
-@item @code{(getUsageThreshold(String))} -- Returns
-the pool's usage threshold, if supported.
-@item @code{(getUsageThresholdCount(String))} -- Returns
-the number of times the specified pool has matched or exceeded
-its usage threshold, if supported.
-@item @code{(isValid(String))} -- Returns true if the pool
-is still in use by the virtual machine.
-@item @code{(resetPeakUsage(String))} -- Resets the peak usage
-levels to the current usage levels for the specified pool.
-@item @code{(setCollectionUsageThreshold(String, long))} -- Sets
-the pool's collection usage threshold, if supported.
-@item @code{(setUsageThreshold(String, long))} -- Sets
-the pool's usage threshold, if supported.
-@end itemize
-
-@node gnu.java.lang.management.VMMemoryManagerMXBeanImpl,gnu.java.lang.management.VMGarbageCollectorMXBeanImpl,gnu.java.lang.management.VMMemoryPoolMXBeanImpl,gnu.java.lang.management
-@subsection @code{gnu.java.lang.management.VMMemoryManagerMXBeanImpl}
-
-The @code{gnu.java.lang.management.MemoryManagerMXBeanImpl} provides an
-implementation of the optional @code{java.lang.management.MemoryManagerMXBean}
-interface, and is supported by VM functionality in the form of
-@code{gnu.java.lang.management.VMMemoryManagerMXBeanImpl}.  Providing
-this interface requires implementing two methods (each takes the name
-of the manager as the first argument):
-
-@itemize @bullet
-@item @code{(getMemoryPoolNames(String))} -- Returns a list of the
-memory pools that the manager maintains.  A default implementation
-which scans the results of @code{getMemoryManagerNames()} for each
-pool is provided.
-@item @code{(isValid(String))} -- Returns true if the specified
-manager is still valid i.e. it is still in use by the virtual machine.
-@end itemize
-
-@node gnu.java.lang.management.VMGarbageCollectorMXBeanImpl,,gnu.java.lang.management.VMMemoryManagerMXBeanImpl,gnu.java.lang.management
-@subsection @code{gnu.java.lang.management.VMGarbageCollectorMXBeanImpl}
-
-The @code{gnu.java.lang.management.GarbageCollectorMXBeanImpl} provides an
-implementation of the optional @code{java.lang.management.GarbageCollectorMXBean}
-interface, and is supported by VM functionality in the form of
-@code{gnu.java.lang.management.VMGarbageCollectorMXBeanImpl}.  Providing
-this interface requires implementing two methods (each takes the name
-of the garbage collector as the first argument):
-
-@itemize @bullet
-@item @code{(getCollectionCount(String))} -- Returns the number of
-times the specified garbage collector has run.
-@item @code{(getCollectionTime(String))} -- Returns the accumulated
-number of milliseconds for which the garbage collector has run.
-@end itemize
-
-Note that each garbage collector is also a memory manager, and so an
-implementation of the @code{gnu.java.lang.management.VMMemoryManagerMXBeanImpl}
-methods for its name should also be provided.
-
-@node java.lang.management, Classpath Callbacks, gnu.java.lang.management, Classpath Hooks
-@section @code{java.lang.management}
-
-@code{gnu.java.lang.management} provides the VM interfaces for the GNU
-implementations of the management beans.  
-
-@menu
-* java.lang.management.VMManagementFactory::
-@end menu
-
-@node java.lang.management.VMManagementFactory,,,java.lang.management
-@subsection @code{java.lang.management.VMManagementFactory}
-
-This VM interface provides the names of the memory pools, memory managers
-and garbage collectors for use by the @code{java.lang.management.ManagementFactory}
-in creating lists of appropriate beans for these types of managed object.
-
-The methods are as follows:
-
-@itemize @bullet
-@item @code{(getMemoryPoolNames())} -- Returns a list of the names
-of the current memory pools in use by the virtual machine.
-@item @code{(getMemoryManagerNames())} -- Returns a list of the names
-of the current memory managers in use by the virtual machine.  This
-should not include those that are also garbage collectors.
-@item @code{(getGarbageCollectorNames())} -- Returns a list of the names
-of the current garbage collectors in use by the virtual machine.
-@end itemize
-
-@node Classpath Callbacks, , java.lang.management, Classpath Hooks
-Some of the classes you implement for the VM will need to call back to
-package-private methods in Classpath:
-
-@itemize @bullet
-@item @code{java.lang.ThreadGroup.addThread(Thread)}
-Call this method from @code{Thread} when a new @code{Thread} is created, to add it to
-the group.
-
-@item @code{java.lang.ThreadGroup.removeThread(Thread)}
-Call this method from @code{Thread} when a @code{Thread} is stopped or destroyed.
-
-@item @code{gnu.java.lang.management.MemoryMXBeanImpl.fireThresholdExceededNotification(String, long, long, long, long)}
-If the monitoring of memory usage thresholds is supported, this method
-should be called when the normal usage of a memory pool crosses the
-threshold, in order to emit a notification.  Another notification
-should not be emitted until there is an intermittent period where the
-usage is again below the threshold.  The parameters are the memory
-pool name, the usage levels (init, used, committed and max) and the
-number of times the threshold has been crossed.
-
-@item @code{gnu.java.lang.management.MemoryMXBeanImpl.fireCollectionThresholdExceededNotification(String, long, long, long, long)}
-If the monitoring of memory usage thresholds is supported, this method
-should be called when the usage of a memory pool after a garbage
-collection cycle crosses the threshold, in order to emit a
-notification.  Another notification should not be emitted until there
-is an intermittent period where the usage is again below the
-threshold.  The parameters are the memory pool name, the usage levels
-(init, used, committed and max) and the number of times the threshold
-has been crossed.
-
-@end itemize
-
-@node VM Hooks, JNI Implementation, Classpath Hooks, Top
-@comment node-name, next, previous, up
-@chapter VM Hooks
-
-VMs need to do some dirty work; there are some things in the VM that
-unfortunately are dependent on the internal structure of various
-classes.  This is a guide to all of the things the VM itself needs to
-know about classes.
-
-Some of the core classes, while being implemented by GNU Classpath,
-provide space for state (in the form of a @code{vmdata} object) to be
-stored by the VM, and can not be constructed normally.
-
-@itemize @bullet
-@item java.lang.Class
-@item java.lang.ClassLoader
-@end itemize
-
-The default implementations of some VM classes also follow this methodology,
-when it is intended that most VMs will keep the default.
-
-@itemize @bullet
-@item java.lang.VMThread
-@item java.lang.VMThrowable
-@end itemize
-
-Several core classes must be completely implemented by the VM for Classpath to
-work, although reference implementations are provided.  These classes are:
-
-@itemize @bullet
-@item java.lang.reflect.Constructor
-@item java.lang.reflect.Method
-@item java.lang.reflect.Field
-@end itemize
-
-The following issues are of note;
-
-@itemize @bullet
-@item @code{java.lang.Class} @*
-The GNU Classpath implementation of @code{java.lang.Class} provides an
-object for storing the internal state of the class maintained by the VM.
-This is the only known place where this matters.  The class is
-constructed with this data by the VM.  Some VMs do not create the
-@code{Class} object at the point where the class is defined; instead,
-they wait until a @code{Class} object is actually used.
-
-@item Array Classes @*
-When you are creating an array class, you should set the
-@code{ClassLoader} of the array class to the @code{ClassLoader} of its
-component type.  Whenever you add a class to a @code{ClassLoader}, you
-need to notify the @code{ClassLoader} and add the new @code{Class} to
-its internal cache of classes.  To do this, call
-@code{ClassLoader.addVMCreatedClass(Class)}.  @emph{Note: this is
-written in anticipation of 1.2 support and does not apply just yet.}
-
-@item Primordial Class Loader @*
-When the primordial class loader loads a class, it needs to tell
-Classpath what it has done in order for security stuff to work right.
-To do this, call the static method
-@code{ClassLoader.newPrimordialClass(Class)}.
-
-Even the first few core classes need to do this; in order to do it,
-simply call this method @emph{after} the initial class loading has been
-done.  No harm will come, as long as you follow the guidelines in the
-@pxref{Initialization} section.
-
-@emph{Note: this is written in anticipation of 1.2 support and does not
-apply just yet.}
-
-@item Top-level Exception Handler @*
-Exceptions take care of themselves in Classpath; all you need to do in
-the top-level exception handler is call @code{Throwable.printStackTrace()}.
-
-@item Security and Traces @*
-There will eventually be a feature in the 1.2 security that keeps the
-@code{AccessController} from having to evaluate @emph{all} of the
-@code{ProtectionDomain}s every time a security check is made.  I think a common
-case is a single method doing a lot of things that require security
-checks.  However, I don't want to bog down the method stack too much, so
-this feature of the VM will have the @code{AccessController} for a thread
-calling out to the VM to tell it how high it was on the stack when it
-made the last security request.  Every time the stack goes lower than
-that number, the VM will decrement the number.  The @code{AccessController}
-will remember what the accumulated protection status was at every stack
-level (an @code{AccessControlContext}) and use that aggregated information to
-do the check.  I am not sure, however, whether the savings are
-substantial enough to outweigh the integer check and set after every
-method call.  I will investigate.
-
-@item Threading @*
-I figured I'd put this here because a VM guy might be wondering about it.
-We implement @code{ThreadGroup}, but that class is almost entirely
-VM-independent.  The root @code{ThreadGroup}, a static field called
-@code{ThreadGroup.root}, should be initialized by Classpath, but if you wish to
-reinitialize it yourself, there should be no harm.
-
-@end itemize
-
-@node JNI Implementation, JVMTI Implementation, VM Hooks, Top
-@comment  node-name,  next,  previous,  up
-@chapter JNI Implementation
-
-Classpath comes with its own implementation of @file{jni.h}.  This
-file can be customized by the VM in a few ways, by defining macros
-that affect the interpretation of the file.  These macros are all
-intended for use by a VM which uses GNU Classpath and which wants to
-use a single copy of @file{jni.h} for both internal and external use.
-
-@itemize @bullet
-@item _CLASSPATH_VM_JNI_TYPES_DEFINED
-Some VMs like to define JNI ``object'' types in a special way.  If
-this macro is defined, the Classpath @file{jni.h} will avoid defining
-these types.  By default, these types are defined in @file{jni.h}.
-The full list of types and macros treated this way is: @samp{jobject},
-@samp{jclass}, @samp{jstring}, @samp{jthrowable}, @samp{jweak},
-@samp{jarray}, @samp{jobjectArray}, @samp{jbyteArray},
-@samp{jshortArray}, @samp{jintArray}, @samp{jlongArray},
-@samp{jbooleanArray}, @samp{jcharArray}, @samp{jfloatArray},
-@samp{jdoubleArray}, @samp{JNIEnv}, @samp{JavaVM}, @samp{JNI_TRUE}
-(macro), @samp{JNI_FALSE} (macro).
-
-@item _CLASSPATH_VM_INTERNAL_TYPES_DEFINED
-If the VM has its own definitions for @samp{jfieldID} and
-@samp{jmethodID}, then it should define this macro.  Otherwise,
-@file{jni.h} will provide definitions for these types.
-
-@item _CLASSPATH_JNIIMPEXP
-Three functions -- @samp{JNI_GetDefaultJavaVMInitArgs},
-@samp{JNI_CreateJavaVM}, and @samp{JNI_GetCreatedJavaVMs} -- must be
-marked as @samp{JNIIMPORT} when seen by user code, but most likely
-should be marked as @samp{JNIEXPORT} when defined in the VM
-implementation.  This macro can be defined to one or the other by the
-VM as appropriate.  If this macro is not defined, it defaults to
-@samp{JNIIMPORT}.
-
-@item _CLASSPATH_JNIENV_CONTENTS
-A VM can add fields to the @samp{JNIEnv} structure by defining this to
-be a sequence of field declarations.
-
-@end itemize
-
-@node JVMTI Implementation, Miscellaneous VM Requirements, JNI Implementation, Top
-@comment node-name, next, previous, up
-@chapter JVMTI Implementation
-
-Classpath comes with its own implementation of @file{jvmti.h}.  This
-file can be customized by the VM in a few ways by defining macros that
-affect the interpretation of the file.  These macros are all intended
-for use for use by a VM which uses GNU Classpath and which wants to
-use a single copy of @file{jvmti.h} for both internal and external use.
-
-@itemize @bullet
-@item _CLASSPATH_VM_JVMTI_TYPES_DEFINED
-Some VMs like to define JVMTI ``object'' types in a special way.  If
-this macro is defined, the Classpath @file{jvmti.h} will avoid defining
-these types.  By default these types are defined in @file{jvmti.h}.  
-The full list of types and macros treated this way is: @samp{jthread},
-@samp{jthreadGroup}, @samp{jlocation}, and @samp{jrawMonitorID}.  By
-default @samp{jrawMonitorID} is defined as an opaque pointer which
-must be defined by the VM.
-
-@item _CLASSPATH_JVMTIENV_CONTENTS
-A VM can add fields to the @samp{jvmtiEnv} structure by defining this
-to be a sequence of field declarations.
-
-@end itemize
-
-@node Miscellaneous VM Requirements,  , JVMTI Implementation, Top
-@comment  node-name,  next,  previous,  up
-@chapter Miscellaneous VM Requirements
-
-Classpath places a few requirements on the VM that uses it.
-
-@menu
-* JNI Version::                 
-* VM Threading Model::          
-* Boot Library Path Property::
-@end menu
-
-@node JNI Version, VM Threading Model, Miscellaneous VM Requirements, Miscellaneous VM Requirements
-@comment  node-name,  next,  previous,  up
-@section JNI Version
-
-Classpath currently uses only JNI 1.1, except for one JNI 1.2 function
-in the JNI Invocation API: GetEnv().  And GetEnv() is only used in the
-now deprecated ``portable native sync'' code.
-
-A future direction will probably be to require that all VMs provide
-JNI 1.2.  If this poses problems, please raise them on the classpath
-mailing list. 
-
-@node VM Threading Model, Boot Library Path Property, JNI Version, Miscellaneous VM Requirements
-@comment  node-name,  next,  previous,  up
-@section VM Threading Model
-
-VM authors can implement a number of different threading models. When
-native code is also threaded there is the potential for one threading
-model to deadlock the other. The
-@uref{http://java.sun.com/docs/books/jni/html/other.html#29406,Java
-Native Interface Programmer's Guide and Specification} suggests
-consulting VM documentation in such situations. Classpath uses
-existing libraries, for example the AWT peers can use the GTK+
-graphics library. As these libraries assume a different threading
-model, there is the potential for the native code to deadlock a VM.
-
-The different threading models available to a VM author are:
-@enumerate
-@item
-@i{Native threads}: Map a Java thread to an underlying operating system
-thread (normally a POSIX compatible pthread). This approach reduces
-the potential for deadlock as there is only one thread scheduling
-mechanism.
-@item
-@i{Green threads 1}: Green threads are threads scheduled by the VM,
-typically by switching swapping registers. In early VMs green threads
-were seen as advantageous as they didn't require the operating system
-to resechedule, save and swap all of a threads registers. The green
-thread 1 model switches thread on an externally created event, such as
-a timer interrupt. An example of a VM using this approach is Kaffe
-configured with its jthreads model.
-@item
-@i{Green threads 2}: The essential difference with this model is to
-not switch threads on an event, but at fixed points in the code being
-executed by the VM. Points chosen could be backward branches (loops)
-or method calls. This approach can be advantageous to nonconservative
-garbage collectors, as non-running threads would be at known points
-and can have fixed register maps. It can also reduce the number of
-registers it is necessary to swap when switching threads.
-@item
-@i{M:N threading}: a flaw to green threading is that it is unable to
-use multiple processors. @i{M}:@i{N} threading fixes this problem by
-running groups of green threads on multiple underlying native
-threads. An example of a VM using this approach is the Jikes RVM,
-which uses @i{M}:@i{N} threading combined with the green thread 2
-model.
-@end enumerate
-
-An example of the problem of mixing threading models is:
-@itemize @bullet
-@item
-A Java thread calls a native method. The native method aquires a lock.
-@item
-The native method calls back into the VM.
-@item
-An event triggers the VM to reschedule the currently running thread.
-@item
-A new VM thread, executing on the same underlying native thread, calls
-a native method.
-@item
-The native method tries to aquire the lock already aquired earlier. As
-the lock is busy the thread waits and allows the operating system to
-reschedule native threads.
-@item
-The operating system reschedules the VM thread again, but the lock is
-still busy and in some threading models will remain busy forever
-(the VM is deadlocked).
-@end itemize
-
-VMs that don't use the underlying operating system thread scheduling
-mechanism need to avoid deadlock. One now deprecated approach was to
-build Classpath and VMs on top of a wrapper thread library (aka
-portable native sync). The wrapper thread library used was GLIB's
-@dfn{gthreads}. This approach has been deprecated because:
-@enumerate
-@item
-The wrapper library is only in use by some native libraries. For
-example, GTK+ uses the gthread library but QT does not.
-@item
-The wrapper library can't be in use prior to the VM starting as the VM
-must replace the wrapper libraries functions with its own. This
-prevents the VM from running as a plugin in an application that
-already uses the wrapper library.
-@end enumerate
-
-An alternative approach is for the VM to detect deadlocked native code
-and swap Java threads off of that native thread. The VM can't,
-however, swap two blocked native threads that are potentially
-deadlocking each other on a lock. The lock will be associated with the
-native thread. To prevent this from happening the VM must hijack
-functions that operate on locks. This is done by redifining the lock
-functions inside the VM and configuring the linker so that it uses the
-VMs symbol in preference to that of the external thread support
-library. The VM's lock function can then reschedule Java threads if it
-must wait for the lock.
-
-@node Boot Library Path Property,  , VM Threading Model, Miscellaneous VM Requirements
-@comment  node-name,  next,  previous,  up
-@section Boot Library Path Property
-
-As of GNU Classpath 0.15 a system property named @code{gnu.classpath.boot.library.path}
-can be set by the VM to specify the directories which contain GNU Classpath's native
-libraries. Usually this value is given at configuration time and is then hardcoded
-in the VM. However for development purposes it is handy to switch to another installation
-by overriding the properties' value on the command line.
-
-A VM that does not support this feature can simply ignore the property.
-
-For compatibility reasons we suggest to set the default value of @code{java.library.path}
-to the value of the @code{LD_LIBRARY_PATH} environment if it exists on your platform.
-
-@bye
-
-
-
Index: libjava/classpath/doc/Makefile.in
===================================================================
--- libjava/classpath/doc/Makefile.in	(revision 122231)
+++ libjava/classpath/doc/Makefile.in	(working copy)
@@ -62,6 +62,10 @@
 	install-recursive installcheck-recursive installdirs-recursive \
 	pdf-recursive ps-recursive uninstall-info-recursive \
 	uninstall-recursive
+man1dir = $(mandir)/man1
+am__installdirs = "$(DESTDIR)$(man1dir)"
+NROFF = nroff
+MANS = $(man_MANS)
 ETAGS = etags
 CTAGS = ctags
 DIST_SUBDIRS = $(SUBDIRS)
@@ -125,6 +129,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
@@ -294,7 +299,27 @@
 toolexeclibdir = @toolexeclibdir@
 vm_classes = @vm_classes@
 SUBDIRS = api
-EXTRA_DIST = README.jaxp
+EXTRA_DIST = README.jaxp $(man_MANS)
+man_MANS = $(TOOLS_MANFILES)
+TOOLS_MANFILES = \
+	gappletviewer.1 \
+	gjar.1 \
+	gjarsigner.1 \
+	gjavah.1 \
+	gcjh.1 \
+	gkeytool.1 \
+	gnative2ascii.1 \
+	gorbd.1 \
+	grmid.1 \
+	grmiregistry.1 \
+	gserialver.1 \
+	gtnameserv.1
+
+BASEVER = $(top_srcdir)/../../gcc/BASE-VER
+DEVPHASE = $(top_srcdir)/../../gcc/DEV-PHASE
+POD2MAN = pod2man --center="GNU" --release="gcc-$(shell cat $(BASEVER))"
+TEXI2POD = perl $(top_srcdir)/../../contrib/texi2pod.pl
+STAMP = echo timestamp >
 all: all-recursive
 
 .SUFFIXES:
@@ -337,6 +362,51 @@
 distclean-libtool:
 	-rm -f libtool
 uninstall-info-am:
+install-man1: $(man1_MANS) $(man_MANS)
+	@$(NORMAL_INSTALL)
+	test -z "$(man1dir)" || $(mkdir_p) "$(DESTDIR)$(man1dir)"
+	@list='$(man1_MANS) $(dist_man1_MANS) $(nodist_man1_MANS)'; \
+	l2='$(man_MANS) $(dist_man_MANS) $(nodist_man_MANS)'; \
+	for i in $$l2; do \
+	  case "$$i" in \
+	    *.1*) list="$$list $$i" ;; \
+	  esac; \
+	done; \
+	for i in $$list; do \
+	  if test -f $(srcdir)/$$i; then file=$(srcdir)/$$i; \
+	  else file=$$i; fi; \
+	  ext=`echo $$i | sed -e 's/^.*\\.//'`; \
+	  case "$$ext" in \
+	    1*) ;; \
+	    *) ext='1' ;; \
+	  esac; \
+	  inst=`echo $$i | sed -e 's/\\.[0-9a-z]*$$//'`; \
+	  inst=`echo $$inst | sed -e 's/^.*\///'`; \
+	  inst=`echo $$inst | sed '$(transform)'`.$$ext; \
+	  echo " $(INSTALL_DATA) '$$file' '$(DESTDIR)$(man1dir)/$$inst'"; \
+	  $(INSTALL_DATA) "$$file" "$(DESTDIR)$(man1dir)/$$inst"; \
+	done
+uninstall-man1:
+	@$(NORMAL_UNINSTALL)
+	@list='$(man1_MANS) $(dist_man1_MANS) $(nodist_man1_MANS)'; \
+	l2='$(man_MANS) $(dist_man_MANS) $(nodist_man_MANS)'; \
+	for i in $$l2; do \
+	  case "$$i" in \
+	    *.1*) list="$$list $$i" ;; \
+	  esac; \
+	done; \
+	for i in $$list; do \
+	  ext=`echo $$i | sed -e 's/^.*\\.//'`; \
+	  case "$$ext" in \
+	    1*) ;; \
+	    *) ext='1' ;; \
+	  esac; \
+	  inst=`echo $$i | sed -e 's/\\.[0-9a-z]*$$//'`; \
+	  inst=`echo $$inst | sed -e 's/^.*\///'`; \
+	  inst=`echo $$inst | sed '$(transform)'`.$$ext; \
+	  echo " rm -f '$(DESTDIR)$(man1dir)/$$inst'"; \
+	  rm -f "$(DESTDIR)$(man1dir)/$$inst"; \
+	done
 
 # This directory's subdirectories are mostly independent; you can cd
 # into them and run `make' without going through this Makefile.
@@ -514,9 +584,12 @@
 	done
 check-am: all-am
 check: check-recursive
-all-am: Makefile
+all-am: Makefile $(MANS)
 installdirs: installdirs-recursive
 installdirs-am:
+	for dir in "$(DESTDIR)$(man1dir)"; do \
+	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
+	done
 install: install-recursive
 install-exec: install-exec-recursive
 install-data: install-data-recursive
@@ -560,13 +633,13 @@
 
 info-am:
 
-install-data-am:
+install-data-am: install-man
 
 install-exec-am:
 
 install-info: install-info-recursive
 
-install-man:
+install-man: install-man1
 
 installcheck-am:
 
@@ -586,22 +659,25 @@
 
 ps-am:
 
-uninstall-am: uninstall-info-am
+uninstall-am: uninstall-info-am uninstall-man
 
 uninstall-info: uninstall-info-recursive
 
+uninstall-man: uninstall-man1
+
 .PHONY: $(RECURSIVE_TARGETS) CTAGS GTAGS all all-am check check-am \
 	clean clean-generic clean-libtool clean-recursive ctags \
 	ctags-recursive distclean distclean-generic distclean-libtool \
 	distclean-recursive distclean-tags distdir dvi dvi-am html \
 	html-am info info-am install install-am install-data \
 	install-data-am install-exec install-exec-am install-info \
-	install-info-am install-man install-strip installcheck \
-	installcheck-am installdirs installdirs-am maintainer-clean \
-	maintainer-clean-generic maintainer-clean-recursive \
-	mostlyclean mostlyclean-generic mostlyclean-libtool \
-	mostlyclean-recursive pdf pdf-am ps ps-am tags tags-recursive \
-	uninstall uninstall-am uninstall-info-am
+	install-info-am install-man install-man1 install-strip \
+	installcheck installcheck-am installdirs installdirs-am \
+	maintainer-clean maintainer-clean-generic \
+	maintainer-clean-recursive mostlyclean mostlyclean-generic \
+	mostlyclean-libtool mostlyclean-recursive pdf pdf-am ps ps-am \
+	tags tags-recursive uninstall uninstall-am uninstall-info-am \
+	uninstall-man uninstall-man1
 
 
 %.dvi : %.texinfo
@@ -610,7 +686,66 @@
 %.ps : %.dvi
 	dvips -o $@ $<
 
-docs: hacking.ps vmintegration.ps tools.ps
+docs: cp-hacking.ps cp-vmintegration.ps cp-tools.ps
+
+# gcc-vers.texi is generated from the version files.
+gcc-vers.texi: $(BASEVER) $(DEVPHASE)
+	(echo "@set version-GCC $(shell cat $(BASEVER))"; \
+	 if [ "$(shell cat $(DEVPHASE))" = "experimental" ]; \
+	 then echo "@set DEVELOPMENT"; \
+	 else echo "@clear DEVELOPMENT"; \
+	 fi) > $@T
+	mv -f $@T $@
+
+%.1: %.pod
+	$(STAMP) $@
+	-($(POD2MAN) --section=1 $< > $(@).T$$$$ && \
+		mv -f $(@).T$$$$ $@) || \
+		(rm -f $(@).T$$$$ && exit 1)
+
+.INTERMEDIATE: gappletviewer.pod gjarsigner.pod gjar.pod gjavah.pod \
+	gkeytool.pod gnative2ascii.pod gorbd.pod grmid.pod grmiregistry.pod \
+	gserialver.pod gtnameserv.pod gcjh.pod
+
+gappletviewer.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D gappletviewer < $< > $@
+
+gjarsigner.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D gjarsigner < $< > $@
+
+gjar.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D gjar < $< > $@
+
+gcjh.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D gcjh < $< > $@
+
+gjavah.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D gjavah < $< > $@
+
+# hack around the cross references and the enumeration
+gkeytool.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D gkeytool < $< \
+	  | sed -e 's/^For more details.*/See I<Common Options> for more details./' \
+	    -e 's/1\.<\([^>]*\)>/- \1/' \
+		> $@
+
+gnative2ascii.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D gnative2ascii < $< > $@
+
+gorbd.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D gorbd < $< > $@
+
+grmid.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D grmid < $< > $@
+
+grmiregistry.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D grmiregistry < $< > $@
+
+gserialver.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D gserialver < $< > $@
+
+gtnameserv.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D gtnameserv < $< > $@
 # Tell versions [3.59,3.63) of GNU make to not export all variables.
 # Otherwise a system limit (for SysV at least) may be exceeded.
 .NOEXPORT:
Index: libjava/classpath/doc/Makefile.am
===================================================================
--- libjava/classpath/doc/Makefile.am	(revision 122231)
+++ libjava/classpath/doc/Makefile.am	(working copy)
@@ -1,9 +1,9 @@
 SUBDIRS = api
 
-EXTRA_DIST = README.jaxp
+EXTRA_DIST = README.jaxp $(man_MANS)
 
-## GCJ LOCAL: we don't want to install Classpath's info files.
-## info_TEXINFOS = hacking.texinfo vmintegration.texinfo
+## GCJ LOCAL: we don't want to install all of Classpath's info files.
+## info_TEXINFOS = cp-hacking.texinfo cp-vmintegration.texinfo cp-tools.texinfo
 
 %.dvi : %.texinfo
 	texi2dvi $<
@@ -11,4 +11,85 @@
 %.ps : %.dvi
 	dvips -o $@ $<
 
-docs: hacking.ps vmintegration.ps tools.ps
+docs: cp-hacking.ps cp-vmintegration.ps cp-tools.ps
+
+man_MANS = $(TOOLS_MANFILES)
+TOOLS_MANFILES = \
+	gappletviewer.1 \
+	gjar.1 \
+	gjarsigner.1 \
+	gjavah.1 \
+	gcjh.1 \
+	gkeytool.1 \
+	gnative2ascii.1 \
+	gorbd.1 \
+	grmid.1 \
+	grmiregistry.1 \
+	gserialver.1 \
+	gtnameserv.1
+
+BASEVER = $(top_srcdir)/../../gcc/BASE-VER
+DEVPHASE = $(top_srcdir)/../../gcc/DEV-PHASE
+
+POD2MAN = pod2man --center="GNU" --release="gcc-$(shell cat $(BASEVER))"
+TEXI2POD = perl $(top_srcdir)/../../contrib/texi2pod.pl
+STAMP = echo timestamp >
+
+# gcc-vers.texi is generated from the version files.
+gcc-vers.texi: $(BASEVER) $(DEVPHASE)
+	(echo "@set version-GCC $(shell cat $(BASEVER))"; \
+	 if [ "$(shell cat $(DEVPHASE))" = "experimental" ]; \
+	 then echo "@set DEVELOPMENT"; \
+	 else echo "@clear DEVELOPMENT"; \
+	 fi) > $@T
+	mv -f $@T $@
+
+%.1: %.pod
+	$(STAMP) $@
+	-($(POD2MAN) --section=1 $< > $(@).T$$$$ && \
+		mv -f $(@).T$$$$ $@) || \
+		(rm -f $(@).T$$$$ && exit 1)
+
+.INTERMEDIATE: gappletviewer.pod gjarsigner.pod gjar.pod gjavah.pod \
+	gkeytool.pod gnative2ascii.pod gorbd.pod grmid.pod grmiregistry.pod \
+	gserialver.pod gtnameserv.pod gcjh.pod
+
+gappletviewer.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D gappletviewer < $< > $@
+
+gjarsigner.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D gjarsigner < $< > $@
+
+gjar.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D gjar < $< > $@
+
+gcjh.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D gcjh < $< > $@
+
+gjavah.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D gjavah < $< > $@
+
+# hack around the cross references and the enumeration
+gkeytool.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D gkeytool < $< \
+	  | sed -e 's/^For more details.*/See I<Common Options> for more details./' \
+	    -e 's/1\.<\([^>]*\)>/- \1/' \
+		> $@
+
+gnative2ascii.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D gnative2ascii < $< > $@
+
+gorbd.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D gorbd < $< > $@
+
+grmid.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D grmid < $< > $@
+
+grmiregistry.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D grmiregistry < $< > $@
+
+gserialver.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D gserialver < $< > $@
+
+gtnameserv.pod: $(srcdir)/cp-tools.texinfo
+	-$(TEXI2POD) -D gtnameserv < $< > $@
Index: libjava/classpath/doc/api/Makefile.in
===================================================================
--- libjava/classpath/doc/api/Makefile.in	(revision 122231)
+++ libjava/classpath/doc/api/Makefile.in	(working copy)
@@ -118,6 +118,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/doc/tools.texinfo
===================================================================
--- libjava/classpath/doc/tools.texinfo	(revision 122231)
+++ libjava/classpath/doc/tools.texinfo	(working copy)
@@ -1,1206 +0,0 @@
-\input texinfo @c -*-texinfo-*-
-
-@c %**start of header
-@setfilename tools.info
-@settitle GNU Classpath Tools Guide
-@c %**end of header
-
-@setchapternewpage on
-
-@ifinfo
-This file documents the Tools included in a standard distribution of the GNU
-Classpath project deliverables.
-
-Copyright (C) 2006 Free Software Foundation, Inc.
-
-@ifnotplaintext
-@dircategory GNU Libraries
-@direntry
-* Classpath Tools: (tools).       GNU Classpath Tools Guide
-@end direntry
-@end ifnotplaintext
-@end ifinfo
-
-@titlepage
-@title GNU Classpath Tools Guide
-@author The GNU Classpath Team
-
-@page
-@vskip 0pt plus 1filll
-Copyright @copyright{} 2006 Free Software Foundation, Inc.
-@sp 2
-Permission is granted to make and distribute verbatim copies of this document provided the copyright notice and this permission notice are preserved on all copies.
-
-Permission is granted to copy and distribute modified versions of this document under the conditions for verbatim copying, provided that the entire resulting derived work is distributed under the terms of a permission notice identical to this one.
-
-Permission is granted to copy and distribute translations of this manual into another language, under the above conditions for modified versions, except that this permission notice may be stated in a translation approved by the Free Software Foundation.
-
-@end titlepage
-
-@contents
-
-@ifinfo
-@node Top, Applet Tools, (dir), (dir)
-@top GNU Classpath Tools Guide
-
-This document contains important information you need to know in order to use
-the tools included in the GNU Classpath project deliverables.
-
-The Tools aim at providing a free replacement, similar in their behavior, to
-their counter-parts found in the Reference Implementation (RI) of the Java
-Software Development Kit (SDK).
-
-@end ifinfo
-
-@menu
-* Applet Tools::               Work with applets
-* Security Tools::             Work securely with Java applications
-* I18N Issues::                How to add support for non-English languages
-
-@detailmenu
- --- The Detailed Node Listing ---
-
-Applet Tools
-
-* appletviewer Tool::          Load applets
-* gcjwebplugin::               Load applets in a web browser
-
-Security Tools
-
-* jarsigner Tool::             Sign and verify .JAR files
-* keytool Tool::               Manage private keys and public certificates
-
-jarsigner Tool
-
-* Common jarsigner Options::   Options used when signing or verifying a file
-* Signing Options::            Options only used when signing a .JAR file
-* Verification Options::       Options only used when verifying a .JAR file
-
-keytool Tool
-
-* Getting Help::               How to get help with keytool commands
-* Common keytool Options::     Options used in more than one command
-* Distinguished Names::        X.500 Distinguished Names used in certificates
-* Add/Update Commands::        Commands for adding data to a Key Store
-* Export Commands::            Commands for exporting data from a Key Store
-* Display Commands::           Commands for displaying data in a Key Store
-* Management Commands::        Commands for managing a Key Store
-
-Add/Update Commands
-
-* Command -genkey::            Generate private key and self-signed certificate
-* Command -import::            Import certificates and certificate replies
-* Command -selfcert::          Generate self-signed certificate
-* Command -cacert::            Import a CA Trusted Certificate
-* Command -identitydb::        Import JDK-1 style identities
-
-Export Commands
-
-* Command -certreq::           Generate Certificate Signing Requests (CSR)
-* Command -export::            Export a certificate in a Key Store
-
-Display Commands
-
-* Command -list::              Display information about one or all Aliases
-* Command -printcert::         Print a certificate or a certificate fingerprint
-
-Management Commands
-
-* Command -keyclone::          Clone a Key Entry in a Key Store
-* Command -storepasswd::       Change the password protecting a Key Store
-* Command -keypasswd::         Change the password protecting a Key Entry
-* Command -delete::            Remove an entry in a Key Store
-
-I18N Issues
-
-* Language Resources::         Where resources are located
-* Message Formats::            How messages are internationalized
-
-@end detailmenu
-@end menu
-
-@comment ----------------------------------------------------------------------
-
-@node Applet Tools, Security Tools, Top, Top
-@comment node-name, next, previous, up
-@chapter Applet Tools
-
-Two Applet Tools are available with GNU Classpath: @b{appletviewer}
-and @b{gcjwebplugin}.
-
-To avoid conflicts with other implementations, the appletviewer
-executable is called ``gappletviewer''.
-
-@menu
-* appletviewer Tool::          Load applets
-* gcjwebplugin::               Load applets in a web browser
-@end menu
-
-If while using these tools you think you found a bug, then please report it at @uref{http://www.gnu.org/software/classpath/bugs.html,classpath-bugs}.
-
-@comment ----------------------------------------------------------------------
-
-@node appletviewer Tool, gcjwebplugin, Applet Tools, Applet Tools
-@comment node-name, next, previous, up
-@section The @code{appletviewer} Tool
-
-@table @b
-
-@item SYNOPSIS
-@code{appletviewer [OPTION]... URL...}@*
-@code{appletviewer [OPTION]... -code CODE}@*
-@code{appletviewer [OPTION]... -plugin INPUT,OUTPUT}
-
-@item DESCRIPTION
-The @code{appletviewer} tool loads and runs an applet.
-
-Use the first form to test applets specified by tag.  The URL should
-resolve to an HTML document from which the @code{appletviewer} will
-extract applet tags.  The APPLET, EMBED and OBJECT tags are supported.
-If a given document contains multiple applet tags, all the applets
-will be loaded, with each applet appearing in its own window.
-Likewise, when multiple URLs are specified, each applet tag instance
-is given its own window.  If a given document contains no recognized
-tags the @code{appletviewer} does nothing.
-
-@example
-@code{appletviewer http://www.gnu.org/software/classpath/}
-@end example
-
-Use the second form to test an applet in development.  This form
-allows applet tag attributes to be supplied on the command line.  Only
-one applet may be specified using the @code{-code} option.  The
-@code{-code} option overrides the URL form -- any URLs specified will
-be ignored.
-
-@example
-@code{appletviewer -code Test.class -param datafile,data.txt}
-@end example
-
-@code{gcjwebplugin} uses the third form to communicate with the
-@code{appletviewer} through named pipes.
-
-@item URL OPTIONS
-@table @b
-@item -debug
-This option is not yet implemented but is provided for compatibility.
-
-@item -encoding CHARSET
-Use this option to specify an alternate character encoding for the
-specified HTML page.
-
-@end table
-
-@item APPLET TAG OPTIONS
-@table @b
-@item -code CODE
-Use the @code{-code} option to specify the value of the applet tag
-CODE attribute.
-
-@item -codebase CODEBASE
-Use the @code{-codebase} option to specify the value of the applet tag
-CODEBASE attribute.
-
-@item -archive ARCHIVE
-Use the @code{-archive} option to specify the value of the applet tag
-ARCHIVE attribute.
-
-@item -width WIDTH
-Use the @code{-width} option to specify the value of the applet tag
-WIDTH attribute.
-
-@item -height HEIGHT
-Use the @code{-height} option to specify the value of the applet tag
-HEIGHT attribute.
-
-@item -param NAME,VALUE
-Use the @code{-param} option to specify values for the NAME and VALUE
-attributes of an applet PARAM tag.
-
-@end table
-
-@item PLUGIN OPTION
-@table @b
-@item -plugin INPUT,OUTPUT
-@code{gcjwebplugin} uses the @code{-plugin} option to specify the
-named pipe the @code{appletviewer} should use for receiving commands
-(INPUT) and the one it should use for sending commands to
-@code{gcjwebplugin} (OUTPUT).
-
-@end table
-
-@item DEBUGGING OPTION
-@table @b
-@item -verbose
-Use the @code{-verbose} option to have the @code{appletviewer} print
-debugging messages.
-
-@end table
-
-@item STANDARD OPTIONS
-@table @b
-@item -help
-Use the @code{-help} option to have the @code{appletviewer} print a
-usage message, then exit.
-
-@item -version
-Use the @code{-version} option to have the @code{appletviewer} print
-its version, then exit.
-
-@item -JOPTION
-Use the @code{-J} option to pass OPTION to the virtual machine that
-will run the @code{appletviewer}.  Unlike other options, there must
-not be a space between the -J and OPTION.
-
-@end table
-@end table
-
-@comment ----------------------------------------------------------------------
-
-@node gcjwebplugin, , appletviewer Tool, Applet Tools
-@comment node-name, next, previous, up
-@section The @code{gcjwebplugin} Tool
-
-@code{gcjwebplugin} is a plugin that adds applet support to web
-browsers.  Currently @code{gcjwebplugin} only supports Mozilla-based
-browsers (e.g., Firefox, Galeon, Mozilla).
-
-@comment ----------------------------------------------------------------------
-
-@node Security Tools, I18N Issues, Applet Tools, Top
-@comment node-name, next, previous, up
-@chapter Security Tools
-
-Two Security Tools are available with GNU Classpath: @b{jarsigner} and @b{keytool}.
-
-To avoid conflicts with other implementations, the jarsigner
-executable is called ``gjarsigner'' and the keytool executable is
-called ``gkeytool''.
-
-@menu
-* jarsigner Tool::             Sign and verify .JAR files
-* keytool Tool::               Manage private keys and public certificates
-@end menu
-
-If while using these tools you think you found a bug, then please report it at @uref{http://www.gnu.org/software/classpath/bugs.html,classpath-bugs}.
-
-@comment ----------------------------------------------------------------------
-
-@node jarsigner Tool, keytool Tool, Security Tools, Security Tools
-@comment node-name, next, previous, up
-@section The @code{jarsigner} Tool
-
-The @b{jarsigner} tool is invoked from the command line, in one of two forms, as follows:
-
-@example
-@code{jarsigner [OPTION]... FILE ALIAS}
-@code{jarsigner -verify [OPTION]... FILE}
-@end example
-
-When the first form is used, the tool signs the designated JAR file. The second form, on the other hand, is used to verify a previously signed JAR file.
-
-@code{FILE} is the .JAR file to process; i.e. to sign if the first syntax form is used, or to verify if the second syntax form is used instead.
-
-@code{ALIAS} must be a known @i{Alias} of a @i{Key Entry} in the designated @i{Key Store}. The private key material associated with this @i{Alias} is then used for signing the designated .JAR file.
-
-@menu
-* Common jarsigner Options::   Options used when signing or verifying a file
-* Signing Options::            Options only used when signing a .JAR file
-* Verification Options::       Options only used when verifying a .JAR file
-@end menu
-
-@comment ----------------------------------------------------------------------
-
-@node Common jarsigner Options, Signing Options, jarsigner Tool, jarsigner Tool
-@comment node-name, next, previous, up
-@subsection Common options
-
-The following options may be used when the tool is used for either signing, or verifying, a .JAR file.
-
-@table @b
-@item -verbose
-Use this option to force the tool to generate more verbose messages, during its processing.
-
-@item -internalsf
-When present, the tool will include --which otherwise it does not-- the @code{.SF} file in the @code{.DSA} generated file.
-
-@item -sectionsonly
-When present, the tool will include in the @code{.SF} generated file --which otherwise it does not-- a header containing a hash of the whole manifest file.  When that header is included, the tool can quickly check, during verification, if the hash (in the header) matches or not the manifest file.
-
-@item -provider PROVIDER_CLASS_NAME
-A fully qualified class name of a @i{Security Provider} to add to the current list of @i{Security Providers} already installed in the JVM in-use. If a provider class is specified with this option, and was successfully added to the runtime --i.e. it was not already installed-- then the tool will attempt to remove this @i{Security Provider} before exiting.
-
-@item -help
-Prints a help text similar to this one.
-
-@end table
-
-@comment ----------------------------------------------------------------------
-
-@node Signing Options, Verification Options, Common jarsigner Options, jarsigner Tool
-@comment node-name, next, previous, up
-@subsection Signing options
-
-The following options may be specified when using the tool for signing purposes.
-
-@table @b
-@item -keystore URL
-Use this option to specify the location of the key store to use. The default value is a file URL referencing the file named @file{.keystore} located in the path returned by the call to @code{java.lang.System#getProperty(String)} using @code{user.home} as argument.
-
-If a URL was specified, but was found to be malformed --e.g. missing protocol element-- the tool will attempt to use the URL value as a file-name (with absolute or relative path-name) of a key store --as if the protocol was @code{file:}.
-
-@item -storetype STORE_TYPE
-Use this option to specify the type of the key store to use. The default value, if this option is omitted, is that of the property @code{keystore.type} in the security properties file, which is obtained by invoking the static method call @code{getDefaultType()} in @code{java.security.KeyStore}.
-
-@item -storepass PASSWORD
-Use this option to specify the password which will be used to unlock the key store. If this option is missing, the User will be prompted to provide a password.
-
-@item -keypass PASSWORD
-Use this option to specify the password which the tool will use to unlock the @i{Key Entry} associated with the designated @i{Alias}.
-
-If this option is omitted, the tool will first attempt to unlock the @i{Key Entry} using the same password protecting the key store. If this fails, you will then be prompted to provide a password.
-
-@item -sigfile NAME
-Use this option to designate a literal that will be used to construct file names for both the @code{.SF} and @code{.DSA} signature files. These files  will be generated, by the tool, and placed in the @file{META-INF} directory of the signed JAR.  Permissible characters for @code{NAME} must be in the range "a-zA-Z0-9_-".  All characters will be converted to upper-case ones.
-
-If this option is missing, the first eight characters of the @code{ALIAS} argument will be used. When this is the case, any character in @code{ALIAS} that is outside the permissible range of characters will be replaced by an underscore.
-
-@item -signedjar FILE
-Use this option to specify the file name of the signed JAR. If this option is omitted, then the signed JAR will be named the same as @code{FILE}; i.e. the input JAR file will be replaced with the signed copy.
-
-@end table
-
-@comment ----------------------------------------------------------------------
-
-@node Verification Options, , Signing Options, jarsigner Tool
-@comment node-name, next, previous, up
-@subsection Verification options
-
-The following options may be specified when using the tool for verification purposes.
-
-@table @b
-@item -verify
-Use this option to indicate that the tool is to be used for verification purposes.
-
-@item -certs
-This option is used in conjunction with the @code{-verbose} option. When present, along with the @code{-verbose} option, the tool will print more detailed information about the certificates of the signer(s) being processed.
-
-@end table
-
-@comment ----------------------------------------------------------------------
-
-@node keytool Tool, , jarsigner Tool, Security Tools
-@comment node-name, next, previous, up
-@section The @code{keytool} Tool
-
-Cryptographic credentials, in a Java environment, are usually stored in a @i{Key Store}. The Java SDK specifies a @i{Key Store} as a persistent container of two types of objects: @i{Key Entries} and @i{Trusted Certificates}. The security tool @b{keytool} is a Java-based application for managing those types of objects.
-
-A @i{Key Entry} represents the private key part of a key-pair used in Public-Key Cryptography, and a signed X.509 certificate which authenticates the public key part for a known entity; i.e. the owner of the key-pair. The X.509 certificate itself contains the public key part of the key-pair.
-
-A @i{Trusted Certificate} is a signed X.509 certificate issued by a trusted entity. The @i{Trust} in this context is relative to the User of the @b{keytool}. In other words, the existence of a @i{Trusted Certificate} in the @i{Key Store} processed by a @b{keytool} command implies that the User trusts the @i{Issuer} of that @i{Trusted Certificate} to also sign, and hence authenticates, other @i{Subjects} the tool may process.
-
-@i{Trusted Certificates} are important because they allow the tool to mechanically construct @i{Chains of Trust} starting from one of the @i{Trusted Certificates} in a @i{Key Store} and ending with a certificate whose @i{Issuer} is potentially unknown. A valid chain is an ordered list, starting with a @i{Trusted Certificate} (also called the @i{anchor}), ending with the target certificate, and satisfying the condition that the @i{Subject} of certificate @code{#i} is the @i{Issuer} of certificate @code{#i + 1}.
-
-The @b{keytool} is invoked from the command line as follows:
-
-@example
-@code{keytool [COMMAND]...}
-@end example
-
-Multiple @code{COMMAND}s may be specified at once, each complete with its own options. @b{keytool} will parse all the arguments, before processing, and executing, each @code{COMMAND}. If an exception occurs while executing one @code{COMMAND} @b{keytool} will abort. Note however that because the implementation of the tool uses code to parse command line options that also supports GNU-style options, you have to separate each command group with a double-hyphen; e.g
-
-@example
-@code{keytool -list -- -printcert -alias mykey}
-@end example
-
-Here is a summary of the commands supported by the tool:
-
-@enumerate
-@item Add/Update commands
-@itemize @bullet
-@item -genkey [OPTION]@dots{}
-Generate a new @i{Key Entry}, eventually creating a new key store.
-
-@item -import [OPTION]@dots{}
-Add, to a key store, @i{Key Entries} (private keys and certificate chains authenticating the public keys) and @i{Trusted Certificates} (3rd party certificates which can be used as @i{Trust Anchors} when building chains-of-trust).
-
-@item -selfcert [OPTION]@dots{}
-Generate a new self-signed @i{Trusted Certificate}.
-
-@item -cacert [OPTION]@dots{}
-Import a CA @i{Trusted Certificate}.
-
-@item -identitydb [OPTION]@dots{}
-@b{NOT IMPLEMENTED YET}.@*
-Import a JDK 1.1 style Identity Database.
-@end itemize
-
-@item Export commands
-@itemize @bullet
-@item -certreq [OPTION]@dots{}
-Issue a @i{Certificate Signing Request} (CSR) which can be then sent to a @i{Certification Authority} (CA) to issue a certificate signed (by the CA) and authenticating the @i{Subject} of the request.
-
-@item -export [OPTION]@dots{}
-Export a certificate from a key store.
-@end itemize
-
-@item Display commands
-@itemize @bullet
-@item -list [OPTION]@dots{}
-Print one or all certificates in a key store to @code{STDOUT}.
-
-@item -printcert [OPTION]@dots{}
-Print a human-readable form of a certificate, in a designated file, to @code{STDOUT}.
-@end itemize
-
-@item Management commands
-@itemize @bullet
-@item -keyclone [OPTION]@dots{}
-Clone a @i{Key Entry} in a key store.
-
-@item -storepasswd [OPTION]@dots{}
-Change the password protecting a key store.
-
-@item -keypasswd [OPTION]@dots{}
-Change the password protecting a @i{Key Entry} in a key store.
-
-@item -delete [OPTION]@dots{}
-Delete a @i{Key Entry} or a @i{Trusted Certificate} from a key store.
-@end itemize
-
-@end enumerate
-
-@menu
-* Getting Help::               How to get help with keytool commands
-* Common keytool Options::     Options used in more than one command
-* Distinguished Names::        X.500 Distinguished Names used in certificates
-* Add/Update Commands::        Commands for adding data to a Key Store
-* Export Commands::            Commands for exporting data from a Key Store
-* Display Commands::           Commands for displaying data in a Key Store
-* Management Commands::        Commands for managing a Key Store
-@end menu
-
-@comment ----------------------------------------------------------------------
-
-@node Getting Help, Common keytool Options, keytool Tool, keytool Tool
-@comment node-name, next, previous, up
-@subsection Getting help
-
-To get a general help text about the tool, use the @code{-help} option; e.g.
-
-@example
-@code{keytool -help}
-@end example
-
-To get more specific help text about one of the tool's command use the @code{-help} option for that command; e.g.
-
-@example
-@code{keytool -genkey -help}
-@end example
-
-In both instances, the tool will print a help text and then will exit the running JVM.
-
-It is worth noting here that the help messages printed by the tool are I18N-ready. This means that if/when the contents of the tool's @i{Message Bundle} properties file are available in languages other than English, you may see those messages in that language.
-
-@comment ----------------------------------------------------------------------
-
-@node Common keytool Options, Distinguished Names, Getting Help, keytool Tool
-@comment node-name, next, previous, up
-@subsection Common options
-
-The following @code{OPTION}s are used in more than one @code{COMMAND}. They are described here to reduce redundancy.
-
-@table @b
-@anchor{alias}
-@item -alias ALIAS
-Every entry, be it a @i{Key Entry} or a @i{Trusted Certificate}, in a key store is uniquely identified by a user-defined @i{Alias} string. Use this option to specify the @i{Alias} to use when referring to an entry in the key store. Unless specified otherwise, a default value of @code{mykey} shall be used when this option is omitted from the command line.
-
-@anchor{keyalg}
-@item -keyalg ALGORITHM
-Use this option to specify the canonical name of the key-pair generation algorithm. The default value for this option is @code{DSS} (a synonym for the Digital Signature Algorithm also known as DSA).
-
-@anchor{keysize}
-@item -keysize SIZE
-Use this option to specify the number of bits of the shared modulus (for both the public and private keys) to use when generating new keys. A default value of @code{1024} will be used if this option is omitted from the command line.
-
-@anchor{validity}
-@item -validity DAY_COUNT
-Use this option to specify the number of days a newly generated certificate will be valid for. The default value is @code{90} (days) if this option is omitted from the command line.
-
-@anchor{storetype}
-@item -storetype STORE_TYPE
-Use this option to specify the type of the key store to use. The default value, if this option is omitted, is that of the property @code{keystore.type} in the security properties file, which is obtained by invoking the static method call @code{getDefaultType()} in @code{java.security.KeyStore}.
-
-@anchor{storepass}
-@item -storepass PASSWORD
-Use this option to specify the password protecting the key store. If this option is omitted from the command line, you will be prompted to provide a password.
-
-@anchor{keystore}
-@item -keystore URL
-Use this option to specify the location of the key store to use. The default value is a file URL referencing the file named @file{.keystore} located in the path returned by the call to @code{java.lang.System#getProperty(String)} using @code{user.home} as argument.
-
-If a URL was specified, but was found to be malformed --e.g. missing protocol element-- the tool will attempt to use the URL value as a file-name (with absolute or relative path-name) of a key store --as if the protocol was @code{file:}.
-
-@anchor{provider}
-@item -provider PROVIDER_CLASS_NAME
-A fully qualified class name of a @i{Security Provider} to add to the current list of @i{Security Providers} already installed in the JVM in-use. If a provider class is specified with this option, and was successfully added to the runtime --i.e. it was not already installed-- then the tool will attempt to removed this @i{Security Provider} before exiting.
-
-@anchor{file}
-@item -file FILE
-Use this option to designate a file to use with a command. When specified with this option, the value is expected to be the fully qualified path of a file accessible by the File System. Depending on the command, the file may be used as input or as output. When this option is omitted from the command line, @code{STDIN} will be used instead, as the source of input, and @code{STDOUT} will be used instead as the output destination.
-
-@anchor{verbose}
-@item -v
-Unless specified otherwise, use this option to enable more verbose output.
-
-@end table
-
-@comment ----------------------------------------------------------------------
-
-@node Distinguished Names, Add/Update Commands, Common keytool Options, keytool Tool
-@comment node-name, next, previous, up
-@subsection X.500 Distinguished Names
-
-@anchor{dn}
-A @i{Distinguished Name} (or DN) MUST be supplied with some of the @code{COMMAND}s using a @code{-dname} option. The syntax of a valid value for this option MUST follow RFC-2253 specifications. Namely the following components (with their accepted meaning) will be recognized. Note that the component name is case-insensitive:
-
-@ftable @var
-@item CN
-The Common Name; e.g. @kbd{host.domain.com}
-@item OU
-The Organizational Unit; e.g. @kbd{IT Department}
-@item O
-The Organization Name; e.g. @kbd{The Sample Company}
-@item L
-The Locality Name; e.g. @kbd{Sydney}
-@item ST
-The State Name; e.g. @kbd{New South Wales}
-@item C
-The 2-letter Country identifier; e.g. @kbd{AU}
-@end ftable
-
-When specified with a @code{-dname} option, each pair of component/value will be separated from the other with a comma. Each component and value pair MUST be separated by an equal sign. For example, the following is a valid DN value:@*
-
-@format
-CN=host.domain.com, O=The Sample Company, L=Sydney, ST=NSW, C=AU
-@end format
-@*
-If the @i{Distinguished Name} is required, and no valid default value can be used, the tool will prompt you to enter the information through the console.
-
-@comment ----------------------------------------------------------------------
-
-@node Add/Update Commands, Export Commands, Distinguished Names, keytool Tool
-@comment node-name, next, previous, up
-@subsection Add/Update commands
-
-@menu
-* Command -genkey::            Generate private key and self-signed certificate
-* Command -import::            Import certificates and certificate replies
-* Command -selfcert::          Generate self-signed certificate
-* Command -cacert::            Import a CA Trusted Certificate
-* Command -identitydb::        Import JDK-1 style identities
-@end menu
-
-@comment ----------------------------------------------------------------------
-
-@node Command -genkey, Command -import, Add/Update Commands, Add/Update Commands
-@comment node-name, next, previous, up
-@subsubsection @code{-genkey} command
-
-Use this command to generate a new key-pair (both private and public keys), and save these credentials in the key store as a @i{Key Entry}, associated with the designated (if was specified with the @code{-alias} option) or default (if the @code{-alias} option is omitted) @i{Alias}.
-
-The private key material will be protected with a user-defined password (see @code{-keypass} option). The public key on the other hand will be part of a self-signed X.509 certificate, which will form a 1-element chain and will be saved in the key store.
-
-@table @b
-@item -alias ALIAS
-For more details @pxref{alias,, ALIAS}.
-
-@item -keyalg ALGORITHM
-For more details @pxref{keyalg,, ALGORITHM}.
-
-@item -keysize KEY_SIZE
-For more details @pxref{keysize,, KEY_SIZE}.
-
-@item -sigalg ALGORITHM
-The canonical name of the digital signature algorithm to use for signing certificates. If this option is omitted, a default value will be chosen based on the type of the key-pair; i.e. the algorithm that ends up being used by the -keyalg option. If the key-pair generation algorithm is @code{DSA}, the value for the signature algorithm will be @code{SHA1withDSA}. If on the other hand the key-pair generation algorithm is @code{RSA}, then the tool will use @code{MD5withRSA} as the signature algorithm.
-
-@item -dname NAME
-This a mandatory value for the command. If no value is specified --i.e. the @code{-dname} option is omitted-- the tool will prompt you to enter a @i{Distinguished Name} to use as both the @i{Owner} and @i{Issuer} of the generated self-signed certificate.
-
-For more details @pxref{dn,, X.500 DISTINGUISHED NAME}.
-
-@item -keypass PASSWORD
-Use this option to specify the password which the tool will use to protect the newly created @i{Key Entry}.
-
-If this option is omitted, you will be prompted to provide a password.
-
-@item -validity DAY_COUNT
-For more details @pxref{validity,, DAY_COUNT}.
-
-@item -storetype STORE_TYPE
-For more details @pxref{storetype,, STORE_TYPE}.
-
-@item -keystore URL
-For more details @pxref{keystore,, URL}.
-
-@item -storepass PASSWORD
-For more details @pxref{storepass,, PASSWORD}.
-
-@item -provider PROVIDER_CLASS_NAME
-For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
-
-@item -v
-For more details @pxref{verbose}.
-
-@end table
-
-@comment ----------------------------------------------------------------------
-
-@node Command -import, Command -selfcert, Command -genkey, Add/Update Commands
-@comment node-name, next, previous, up
-@subsubsection @code{-import} command
-
-Use this command to read an X.509 certificate, or a PKCS#7 @i{Certificate Reply} from a designated input source and incorporate the certificates into the key store.
-
-If the @i{Alias} does not already exist in the key store, the tool treats the certificate read from the input source as a new @i{Trusted Certificate}. It then attempts to discover a chain-of-trust, starting from that certificate and ending at another @i{Trusted Certificate}, already stored in the key store. If the @code{-trustcacerts} option is present, an additional key store, of type @code{JKS} named @file{cacerts}, and assumed to be present in @file{$@{JAVA_HOME@}/lib/security} will also be consulted if found --@code{$@{JAVA_HOME@}} refers to the location of an installed @i{Java Runtime Environment} (JRE). If no chain-of-trust can be established, and unless the @code{-noprompt} option has been specified, the certificate is printed to @code{STDOUT} and the user is prompted for a confirmation.
-
-If @i{Alias} exists in the key store, the tool will treat the certificate(s) read from the input source as a @i{Certificate Reply}, which can be a chain of certificates, that eventually would replace the chain of certificates associated with the @i{Key Entry} of that @i{Alias}. The substitution of the certificates only occurs if a chain-of-trust can be established between the bottom certificate of the chain read from the input file and the @i{Trusted Certificates} already present in the key store. Again, if the @code{-trustcacerts} option is specified, additional @i{Trusted Certificates} in the same @file{cacerts} key store will be considered. If no chain-of-trust can be established, the operation will abort.
-
-@table @b
-@item -alias ALIAS
-For more details @pxref{alias,, ALIAS}.
-
-@item -file FILE
-For more details @pxref{file,, FILE}.
-
-@item -keypass PASSWORD
-Use this option to specify the password which the tool will use to protect the @i{Key Entry} associated with the designated @i{Alias}, when replacing this @i{Alias}' chain of certificates with that found in the certificate reply.
-
-If this option is omitted, and the chain-of-trust for the certificate reply has been established, the tool will first attempt to unlock the @i{Key Entry} using the same password protecting the key store. If this fails, you will then be prompted to provide a password.
-
-@item -noprompt
-Use this option to prevent the tool from prompting the user.
-
-@item -trustcacerts
-Use this option to indicate to the tool that a key store, of type @code{JKS}, named @file{cacerts}, and usually located in @file{lib/security} in an installed @i{Java Runtime Environment} should be considered when trying to establish chain-of-trusts.
-
-@item -storetype STORE_TYPE
-For more details @pxref{storetype,, STORE_TYPE}.
-
-@item -keystore URL
-For more details @pxref{keystore,, URL}.
-
-@item -storepass PASSWORD
-For more details @pxref{storepass,, PASSWORD}.
-
-@item -provider PROVIDER_CLASS_NAME
-For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
-
-@item -v
-For more details @pxref{verbose}.
-
-@end table
-
-@comment ----------------------------------------------------------------------
-
-@node Command -selfcert, Command -cacert, Command -import, Add/Update Commands
-@comment node-name, next, previous, up
-@subsubsection @code{-selfcert} command
-
-Use this command to generate a self-signed X.509 version 1 certificate. The newly generated certificate will form a chain of one element which will replace the previous chain associated with the designated @i{Alias} (if @code{-alias} option was specified), or the default @i{Alias} (if @code{-alias} option was omitted).
-
-@table @b
-@item -alias ALIAS
-For more details @pxref{alias,, ALIAS}.
-
-@item -sigalg ALGORITHM
-The canonical name of the digital signature algorithm to use for signing the certificate. If this option is omitted, a default value will be chosen based on the type of the private key associated with the designated @i{Alias}. If the private key is a @code{DSA} one, the value for the signature algorithm will be @code{SHA1withDSA}. If on the other hand the private key is an @code{RSA} one, then the tool will use @code{MD5withRSA} as the signature algorithm.
-
-@item -dname NAME
-Use this option to specify the @i{Distinguished Name} of the newly generated self-signed certificate. If this option is omitted, the existing @i{Distinguished Name} of the base certificate in the chain associated with the designated @i{Alias} will be used instead.
-
-For more details @pxref{dn,, X.500 DISTINGUISHED NAME}.
-
-@item -validity DAY_COUNT
-For more details @pxref{validity,, DAY_COUNT}.
-
-@item -keypass PASSWORD
-Use this option to specify the password which the tool will use to unlock the @i{Key Entry} associated with the designated @i{Alias}.
-
-If this option is omitted, the tool will first attempt to unlock the @i{Key Entry} using the same password protecting the key store. If this fails, you will then be prompted to provide a password.
-
-@item -storetype STORE_TYPE
-For more details @pxref{storetype,, STORE_TYPE}.
-
-@item -keystore URL
-For more details @pxref{keystore,, URL}.
-
-@item -storepass PASSWORD
-For more details @pxref{storepass,, PASSWORD}.
-
-@item -provider PROVIDER_CLASS_NAME
-For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
-
-@item -v
-For more details @pxref{verbose}.
-
-@end table
-
-@comment ----------------------------------------------------------------------
-
-@node Command -cacert, Command -identitydb, Command -selfcert, Add/Update Commands
-@comment node-name, next, previous, up
-@subsubsection @code{-cacert} command
-
-Use this command to import, a CA certificate and add it to the key store as a @i{Trusted Certificate}. The @i{Alias} for this new entry will be constructed from the FILE's base-name after replacing hyphens and dots with underscores.
-
-This command is useful when used in a script that recursively visits a directory of CA certificates to populate a @code{cacerts.gkr} @i{Key Store} of trusted certificates which can then be used commands that specify the @code{-trustcacerts} option.
-
-@table @b
-@item -file FILE
-For more details @pxref{file,, FILE}.
-
-@item -storetype STORE_TYPE
-For more details @pxref{storetype,, STORE_TYPE}.
-
-@item -keystore URL
-For more details @pxref{keystore,, URL}.
-
-@item -storepass PASSWORD
-For more details @pxref{storepass,, PASSWORD}.
-
-@item -provider PROVIDER_CLASS_NAME
-For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
-
-@item -v
-For more details @pxref{verbose}.
-
-@end table
-
-@comment ----------------------------------------------------------------------
-
-@node Command -identitydb, , Command -cacert, Add/Update Commands
-@comment node-name, next, previous, up
-@subsubsection @code{-identitydb} command
-
-@b{NOT IMPLEMENTED YET}.
-
-Use this command to import a JDK 1.1 style Identity Database.
-
-@table @b
-@item -file FILE
-For more details @pxref{file,, FILE}.
-
-@item -storetype STORE_TYPE
-For more details @pxref{storetype,, STORE_TYPE}.
-
-@item -keystore URL
-For more details @pxref{keystore,, URL}.
-
-@item -storepass PASSWORD
-For more details @pxref{storepass,, PASSWORD}.
-
-@item -provider PROVIDER_CLASS_NAME
-For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
-
-@item -v
-For more details @pxref{verbose}.
-
-@end table
-
-@comment ----------------------------------------------------------------------
-
-@node Export Commands, Display Commands, Add/Update Commands, keytool Tool
-@comment node-name, next, previous, up
-@subsection Export commands
-
-@menu
-* Command -certreq::           Generate Certificate Signing Requests (CSR)
-* Command -export::            Export a certificate in a Key Store
-@end menu
-
-@comment ----------------------------------------------------------------------
-
-@node Command -certreq, Command -export, Export Commands, Export Commands
-@comment node-name, next, previous, up
-@subsubsection @code{-certreq} command
-
-Use this command to generate a PKCS#10 @i{Certificate Signing Request} (CSR) and write it to a designated output destination. The contents of the destination should look something like the following:
-
-@example
------BEGIN NEW CERTIFICATE REQUEST-----
-MI...QAwXzEUMBIGA1UEAwwLcnNuQGdudS5vcmcxGzAZBgNVBAoMElUg
-Q2...A0GA1UEBwwGU3lkbmV5MQwwCgYDVQQIDANOU1cxCzAJBgNVBACC
-...
-FC...IVwNVOfQLRX+O5kAhQ/a4RTZme2L8PnpvgRwrf7Eg8D6w==
------END NEW CERTIFICATE REQUEST-----
-@end example
-
-@b{IMPORTANT}: Some documentation (e.g. RSA examples) claims that the @code{Attributes} field, in the CSR is @code{OPTIONAL} while RFC-2986 implies the opposite. This implementation considers this field, by default, as @code{OPTIONAL}, unless the option @code{-attributes} is specified on the command line.
-
-@table @b
-@item -alias ALIAS
-For more details @pxref{alias,, ALIAS}.
-
-@item -sigalg ALGORITHM
-The canonical name of the digital signature algorithm to use for signing the certificate. If this option is omitted, a default value will be chosen based on the type of the private key associated with the designated @i{Alias}. If the private key is a @code{DSA} one, the value for the signature algorithm will be @code{SHA1withDSA}. If on the other hand the private key is an @code{RSA} one, then the tool will use @code{MD5withRSA} as the signature algorithm.
-
-@item -file FILE
-For more details @pxref{file,, FILE}.
-
-@item -keypass PASSWORD
-Use this option to specify the password which the tool will use to unlock the @i{Key Entry} associated with the designated @i{Alias}.
-
-If this option is omitted, the tool will first attempt to unlock the @i{Key Entry} using the same password protecting the key store. If this fails, you will then be prompted to provide a password.
-
-@item -storetype STORE_TYPE
-For more details @pxref{storetype,, STORE_TYPE}.
-
-@item -keystore URL
-For more details @pxref{keystore,, URL}.
-
-@item -storepass PASSWORD
-For more details @pxref{storepass,, PASSWORD}.
-
-@item -provider PROVIDER_CLASS_NAME
-For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
-
-@item -v
-For more details @pxref{verbose}.
-
-@item -attributes
-Use this option to force the tool to encode a @code{NULL} DER value in the CSR as the value of the @code{Attributes} field.
-
-@end table
-
-@comment ----------------------------------------------------------------------
-
-@node Command -export, , Command -certreq, Export Commands
-@comment node-name, next, previous, up
-@subsubsection @code{-export} command
-
-Use this command to export a certificate stored in a key store to a designated output destination, either in binary format (if the @code{-v} option is specified), or in RFC-1421 compliant encoding (if the @code{-rfc} option is specified instead).
-
-@table @b
-@item -alias ALIAS
-For more details @pxref{alias,, ALIAS}.
-
-@item -file FILE
-For more details @pxref{file,, FILE}.
-
-@item -storetype STORE_TYPE
-For more details @pxref{storetype,, STORE_TYPE}.
-
-@item -keystore URL
-For more details @pxref{keystore,, URL}.
-
-@item -storepass PASSWORD
-For more details @pxref{storepass,, PASSWORD}.
-
-@item -provider PROVIDER_CLASS_NAME
-For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
-
-@item -rfc
-Use RFC-1421 specifications when encoding the output.
-
-@item -v
-Output the certificate in binary DER encoding. This is the default output format of the command if neither @code{-rfc} nor @code{-v} options were detected on the command line. If both this option and the @code{-rfc} option are detected on the command line, the tool will opt for the RFC-1421 style encoding.
-
-@end table
-
-@comment ----------------------------------------------------------------------
-
-@node Display Commands, Management Commands, Export Commands, keytool Tool
-@comment node-name, next, previous, up
-@subsection Display commands
-
-@menu
-* Command -list::              Display information about one or all Aliases
-* Command -printcert::         Print a certificate or a certificate fingerprint
-@end menu
-
-@comment ----------------------------------------------------------------------
-
-@node Command -list, Command -printcert, Display Commands, Display Commands
-@comment node-name, next, previous, up
-@subsubsection @code{-list} command
-
-Use this command to print one or all of a key store entries to @code{STDOUT}. Usually this command will only print a @i{fingerprint} of the certificate, unless either the @code{-rfc} or the @code{-v} option is specified.
-
-@table @b
-@item -alias ALIAS
-If this option is omitted, the tool will print ALL the entries found in the key store.
-
-For more details @pxref{alias,, ALIAS}.
-
-@item -storetype STORE_TYPE
-For more details @pxref{storetype,, STORE_TYPE}.
-
-@item -keystore URL
-For more details @pxref{keystore,, URL}.
-
-@item -storepass PASSWORD
-For more details @pxref{storepass,, PASSWORD}.
-
-@item -provider PROVIDER_CLASS_NAME
-For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
-
-@item -rfc
-Use RFC-1421 specifications when encoding the output.
-
-@item -v
-Output the certificate in human-readable format. If both this option and the @code{-rfc} option are detected on the command line, the tool will opt for the human-readable form and will not abort the command.
-
-@end table
-
-@comment ----------------------------------------------------------------------
-
-@node Command -printcert, , Command -list, Display Commands
-@comment node-name, next, previous, up
-@subsubsection @code{-printcert} command
-
-Use this command to read a certificate from a designated input source and print it to @code{STDOUT} in a human-readable form.
-
-@table @b
-@item -file FILE
-For more details @pxref{file,, FILE}.
-
-@item -v
-For more details @pxref{verbose}.
-
-@end table
-
-@comment ----------------------------------------------------------------------
-
-@node Management Commands, , Display Commands, keytool Tool
-@comment node-name, next, previous, up
-@subsection Management commands
-
-@menu
-* Command -keyclone::          Clone a Key Entry in a Key Store
-* Command -storepasswd::       Change the password protecting a Key Store
-* Command -keypasswd::         Change the password protecting a Key Entry
-* Command -delete::            Remove an entry in a Key Store
-@end menu
-
-@comment ----------------------------------------------------------------------
-
-@node Command -keyclone, Command -storepasswd, Management Commands, Management Commands
-@comment node-name, next, previous, up
-@subsubsection @code{-keyclone} command
-
-Use this command to clone an existing @i{Key Entry} and store it under a new (different) @i{Alias} protecting, its private key material with possibly a new password.
-
-@table @b
-@item -alias ALIAS
-For more details @pxref{alias,, ALIAS}.
-
-@item -dest ALIAS
-Use this option to specify the new @i{Alias} which will be used to identify the cloned copy of the @i{Key Entry}.
-
-@item -keypass PASSWORD
-Use this option to specify the password which the tool will use to unlock the @i{Key Entry} associated with the designated @i{Alias}.
-
-If this option is omitted, the tool will first attempt to unlock the @i{Key Entry} using the same password protecting the key store. If this fails, you will then be prompted to provide a password.
-
-@item -new PASSWORD
-Use this option to specify the password protecting the private key material of the newly cloned copy of the @i{Key Entry}.
-
-@item -storetype STORE_TYPE
-For more details @pxref{storetype,, STORE_TYPE}.
-
-@item -keystore URL
-For more details @pxref{keystore,, URL}.
-
-@item -storepass PASSWORD
-For more details @pxref{storepass,, PASSWORD}.
-
-@item -provider PROVIDER_CLASS_NAME
-For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
-
-@item -v
-For more details @pxref{verbose}.
-
-@end table
-
-@comment ----------------------------------------------------------------------
-
-@node Command -storepasswd, Command -keypasswd, Command -keyclone, Management Commands
-@comment node-name, next, previous, up
-@subsubsection @code{-storepasswd} command
-
-Use this command to change the password protecting a key store.
-
-@table @b
-@item -new PASSWORD
-The new, and different, password which will be used to protect the designated key store.
-
-@item -storetype STORE_TYPE
-For more details @pxref{storetype,, STORE_TYPE}.
-
-@item -keystore URL
-For more details @pxref{keystore,, URL}.
-
-@item -storepass PASSWORD
-For more details @pxref{storepass,, PASSWORD}.
-
-@item -provider PROVIDER_CLASS_NAME
-For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
-
-@item -v
-For more details @pxref{verbose}.
-
-@end table
-
-@comment ----------------------------------------------------------------------
-
-@node Command -keypasswd, Command -delete, Command -storepasswd, Management Commands
-@comment node-name, next, previous, up
-@subsubsection @code{-keypasswd} command
-
-Use this command to change the password protecting the private key material of a designated @i{Key Entry}.
-
-@table @b
-@item -alias ALIAS
-For more details @pxref{alias,, ALIAS}.
-
-Use this option to specify the password which the tool will use to unlock the @i{Key Entry} associated with the designated @i{Alias}.
-
-If this option is omitted, the tool will first attempt to unlock the @i{Key Entry} using the same password protecting the key store. If this fails, you will then be prompted to provide a password.
-
-@item -new PASSWORD
-The new, and different, password which will be used to protect the private key material of the designated @i{Key Entry}.
-
-@item -storetype STORE_TYPE
-For more details @pxref{storetype,, STORE_TYPE}.
-
-@item -keystore URL
-For more details @pxref{keystore,, URL}.
-
-@item -storepass PASSWORD
-For more details @pxref{storepass,, PASSWORD}.
-
-@item -provider PROVIDER_CLASS_NAME
-For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
-
-@item -v
-For more details @pxref{verbose}.
-
-@end table
-
-@comment ----------------------------------------------------------------------
-
-@node Command -delete, , Command -keypasswd, Management Commands
-@comment node-name, next, previous, up
-@subsubsection @code{-delete} command
-
-Use this command to delete a designated key store entry.
-
-@table @b
-@item -alias ALIAS
-For more details @pxref{alias,, ALIAS}.
-
-@item -storetype STORE_TYPE
-For more details @pxref{storetype,, STORE_TYPE}.
-
-@item -keystore URL
-For more details @pxref{keystore,, URL}.
-
-@item -storepass PASSWORD
-For more details @pxref{storepass,, PASSWORD}.
-
-@item -provider PROVIDER_CLASS_NAME
-For more details @pxref{provider,, PROVIDER_CLASS_NAME}.
-
-@item -v
-For more details @pxref{verbose}.
-
-@end table
-
-@comment ----------------------------------------------------------------------
-
-@node I18N Issues, , Security Tools, Top
-@comment node-name, next, previous, up
-@chapter I18N Issues
-
-Some tools --@pxref{Security Tools}-- allow using other than the English language when prompting the User for input, and outputing messages. This chapter describes the elements used to offer this support and how they can be adapted for use with specific languages.
-
-@menu
-* Language Resources::         Where resources are located
-* Message Formats::            How messages are internationalized
-@end menu
-
-@comment ----------------------------------------------------------------------
-
-@node Language Resources, Message Formats, I18N Issues, I18N Issues
-@comment node-name, next, previous, up
-@section Language-specific resources
-
-The Tools use Java @code{ResourceBundle}s to store messages, and message templates they use at runtime to generate the message text itself, depending on the locale in use at the time.
-
-The @i{Resource Bundles} these tools use are essentially Java @i{Properties} files consisting of a set of @i{Name/Value} pairs. The @i{Name} is the @i{Propery Name} and the @i{Value} is a substitution string that is used when the code references the associated @i{Name}. For example the following is a line in a @i{Resource Bundle} used by the @code{keytool} Tool:
-
-@example
-Command.23=A correct key password MUST be provided
-@end example
-
-When the tool needs to signal a mandatory but missing key password, it would reference the property named @code{Command.23} and the message "@kbd{A correct key password MUST be provided}" will be used instead. This indirect referencing of "resources" permits replacing, as late as possible, the English strings with strings in other languages, provided of course @i{Resource Bundles} in those languages are provided.
-
-For the GNU Classpath Tools described in this Guide, the @i{Resource Bundles} are files named @file{messages[_ll[_CC[_VV]]].properties} where:
-
-@ftable @var
-@item ll
-Is the 2-letter code for the Language,
-@item CC
-Is the 2-letter code for the Region, and
-@item VV
-Is the 2-letter code for the Variant of the language.
-@end ftable
-
-The complete list of language codes can be found at @uref{http://ftp.ics.uci.edu/pub/ietf/http/related/iso639.txt, Code for the representation of names of languages}. A similar list for the region codes can be found at @uref{http://userpage.chemie.fu-berlin.de/diverse/doc/ISO_3166.html, ISO 3166 Codes (Countries)}.
-
-The location of the @i{Resource Bundles} for the GNU Classpath Tools is specific to each tool. The next table shows where these files are found in a standard GNU Classpath distribution:
-
-@ftable @code
-@item jarsigner
-@file{gnu/classpath/tools/jarsigner}
-@item keytool
-@file{gnu/classpath/tools/keytool}
-@end ftable
-
-The collection of @i{Resource Bundles} in a location act as an inverted tree with a parent-child relationship. For example suppose in the @file{gnu/classpath/tools/keytool} there are 3 message bundles named:
-
-@enumerate
-@item @code{messages.properties}
-@item @code{messages_fr.properties}
-@item @code{messages_fr_FR.properties}
-@end enumerate
-
-In the above example, bundle #1 will act as the parent of bundle #2, which in turn will act as the parent for bundle #3. This ordering is used by the Java runtime to choose which file to load based on the set Locale. For example if the Locale is @code{fr_CH}, @code{messages_fr.properties} will be used because (a) @code{messages_fr_CH.properties} does not exist, but (b) @code{messages_fr.properties} is the parent for the required bundle, and it exists. As another example, suppose the Locale was set to @code{en_AU}; then the tool will end up using @code{messages.properties} because (a) @code{messages_en_AU.properties} does not exist, (b) @code{messages_en.properties} which is the parent for the required bundle does not exist, but (c) @code{messages.properties} exists and is the root of the hierarchy.
-
-You can see from the examples above that @file{messages.properties} is the safety net that the Java runtime falls back to when failing to find a specific bunlde and its parent(s). This file is always provided with the Tool. In time, more localized versions will be included to cater for other languages.
-
-In the meantime, if you are willing to contribute localized versions of these resources, grab the @file{messages.properties} for a specific tool; translate it; save it with the appropriate language and region suffix and mail it to @code{classpath@@gnu.org}.
-
-@comment ----------------------------------------------------------------------
-
-@node Message Formats, , Language Resources, I18N Issues
-@comment node-name, next, previous, up
-@section Message formats
-
-If you open any of the @file{messages.properties} described in the previous section, you may see properties that look like so:
-
-@example
-Command.67=Issuer: @{0@}
-Command.68=Serial number: @{0,number@}
-Command.69=Valid from: @{0,date,full@} - @{0,time,full@}
-Command.70=\ \ \ \ \ until: @{0,date,full@} - @{0,time,full@}
-@end example
-
-These are @i{Message Formats} used by the tools to customize a text string that will then be used either as a prompt for User input or as output.
-
-If you are translating a @file{messages.properties} be careful not to alter text between curly braces.
-
-@comment ----------------------------------------------------------------------
-
-@bye
Index: libjava/classpath/INSTALL
===================================================================
--- libjava/classpath/INSTALL	(revision 122231)
+++ libjava/classpath/INSTALL	(working copy)
@@ -111,6 +111,9 @@
 	  - fluidsynth: a real-time SoundFont 2 based soft-synth
 	    http://www.fluidsynth.org/
 
+	For enabling the com.sun.tools.javac support in tools.zip you
+	will a need jar file containing the Eclipse Java Compiler.
+	Otherwise com.sun.tools.javac will not be included in tools.zip.
 
 This package was designed to use the GNU standard for configuration
 and makefiles.  To build and install do the following:
@@ -147,6 +150,8 @@
                           path to the jay executable
   --with-glibj-zip=ABS.PATH
                           use prebuilt glibj.zip class library
+  --with-ecj-jar=ABS.PATH specify jar file containing the Eclipse Java
+                          Compiler
 
 For more flags run configure --help.
 
Index: libjava/classpath/lib/Makefile.in
===================================================================
--- libjava/classpath/lib/Makefile.in	(revision 122231)
+++ libjava/classpath/lib/Makefile.in	(working copy)
@@ -121,6 +121,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/javax/management/ObjectName.java
===================================================================
--- libjava/classpath/javax/management/ObjectName.java	(revision 122231)
+++ libjava/classpath/javax/management/ObjectName.java	(working copy)
@@ -143,6 +143,9 @@
   public ObjectName(String name)
     throws MalformedObjectNameException
   {
+    if (name.length() == 0)
+      name = "*:*";
+
     int domainSep = name.indexOf(':');
     if (domainSep == -1)
       throw new MalformedObjectNameException("No domain separator was found.");
Index: libjava/classpath/javax/management/MBeanServerFactory.java
===================================================================
--- libjava/classpath/javax/management/MBeanServerFactory.java	(revision 122231)
+++ libjava/classpath/javax/management/MBeanServerFactory.java	(working copy)
@@ -370,7 +370,7 @@
     MBeanServerDelegate delegate = builder.newMBeanServerDelegate();
     if (delegate == null)
       throw new JMRuntimeException("A delegate could not be created.");
-    MBeanServer server = builder.newMBeanServer("DefaultDomain", null, delegate);
+    MBeanServer server = builder.newMBeanServer(domain, null, delegate);
     if (server == null)
       throw new JMRuntimeException("A server could not be created.");
     return server;
Index: libjava/classpath/java/io/ObjectInputStream.java
===================================================================
--- libjava/classpath/java/io/ObjectInputStream.java	(revision 122231)
+++ libjava/classpath/java/io/ObjectInputStream.java	(working copy)
@@ -223,6 +223,15 @@
        case TC_PROXYCLASSDESC:
  	{
  	  if(dump) dumpElementln("PROXYCLASS");
+
+/* GCJ LOCAL */
+	  // The grammar at this point is
+	  //   TC_PROXYCLASSDESC newHandle proxyClassDescInfo
+	  // i.e. we have to assign the handle immediately after
+	  // reading the marker.
+ 	  int handle = assignNewHandle("Dummy proxy");
+/* END GCJ LOCAL */
+
  	  int n_intf = this.realInputStream.readInt();
  	  String[] intfs = new String[n_intf];
  	  for (int i = 0; i < n_intf; i++)
@@ -250,7 +259,9 @@
                     new InternalError("Object ctor missing").initCause(x);
                 }
             }
- 	  assignNewHandle(osc);
+/* GCJ LOCAL */
+	  rememberHandle(osc,handle);
+/* END GCJ LOCAL */
  	  
  	  if (!is_consumed)
  	    {
Index: libjava/classpath/java/io/ObjectOutputStream.java
===================================================================
--- libjava/classpath/java/io/ObjectOutputStream.java	(revision 122231)
+++ libjava/classpath/java/io/ObjectOutputStream.java	(working copy)
@@ -1211,11 +1211,17 @@
   }
 
 
+/* GCJ LOCAL */
   // writes out FIELDS of OBJECT for the specified ObjectStreamClass.
-  // FIELDS are already in canonical order.
+  // FIELDS are already supposed already to be in canonical order, but
+  // under some circumstances (to do with Proxies) this isn't the
+  // case, so we call ensureFieldsSet().
   private void writeFields(Object obj, ObjectStreamClass osc)
     throws IOException
   {
+    osc.ensureFieldsSet(osc.forClass());
+/* END GCJ LOCAL */
+
     ObjectStreamField[] fields = osc.fields;
     boolean oldmode = setBlockDataMode(false);
 
Index: libjava/classpath/java/io/ObjectStreamClass.java
===================================================================
--- libjava/classpath/java/io/ObjectStreamClass.java	(revision 122231)
+++ libjava/classpath/java/io/ObjectStreamClass.java	(working copy)
@@ -654,11 +654,29 @@
       flags |= ObjectStreamConstants.SC_ENUM;
   }
 
+/* GCJ LOCAL */
+  // FIXME: This is a workaround for a fairly obscure bug that happens
+  // when reading a Proxy and then writing it back out again.  The
+  // result is that the ObjectStreamClass doesn't have its fields set,
+  // generating a NullPointerException.  Rather than this kludge we
+  // should probably fix the real bug, but it would require a fairly
+  // radical reorganization to do so.
+  final void ensureFieldsSet(Class cl)
+  {
+    if (! fieldsSet)
+      setFields(cl);
+  }
+/* END GCJ LOCAL */
 
+
   // Sets fields to be a sorted array of the serializable fields of
   // clazz.
   private void setFields(Class cl)
   {
+/* GCJ LOCAL */
+    fieldsSet = true;
+/* END GCJ LOCAL */
+
     SetAccessibleAction setAccessible = new SetAccessibleAction();
 
     if (!isSerializable() || isExternalizable() || isEnum())
@@ -1094,6 +1112,11 @@
 
   boolean isProxyClass = false;
 
+/* GCJ LOCAL */
+  // True after setFields() has been called
+  private boolean fieldsSet = false;
+/* END GCJ LOCAL */
+
   // This is probably not necessary because this class is special cased already
   // but it will avoid showing up as a discrepancy when comparing SUIDs.
   private static final long serialVersionUID = -6120832682080437368L;
Index: libjava/classpath/java/util/Arrays.java
===================================================================
--- libjava/classpath/java/util/Arrays.java	(revision 122231)
+++ libjava/classpath/java/util/Arrays.java	(working copy)
@@ -1040,7 +1040,7 @@
       }
 
     // Determine a good median element.
-    int mid = count / 2;
+    int mid = from + count / 2;
     int lo = from;
     int hi = from + count - 1;
 
@@ -1204,7 +1204,7 @@
       }
 
     // Determine a good median element.
-    int mid = count / 2;
+    int mid = from + count / 2;
     int lo = from;
     int hi = from + count - 1;
 
@@ -1368,7 +1368,7 @@
       }
 
     // Determine a good median element.
-    int mid = count / 2;
+    int mid = from + count / 2;
     int lo = from;
     int hi = from + count - 1;
 
@@ -1544,7 +1544,7 @@
       }
 
     // Determine a good median element.
-    int mid = count / 2;
+    int mid = from + count / 2;
     int lo = from;
     int hi = from + count - 1;
 
@@ -1720,7 +1720,7 @@
       }
 
     // Determine a good median element.
-    int mid = count / 2;
+    int mid = from + count / 2;
     int lo = from;
     int hi = from + count - 1;
 
@@ -1890,7 +1890,7 @@
       }
 
     // Determine a good median element.
-    int mid = count / 2;
+    int mid = from + count / 2;
     int lo = from;
     int hi = from + count - 1;
 
@@ -2060,7 +2060,7 @@
       }
 
     // Determine a good median element.
-    int mid = count / 2;
+    int mid = from + count / 2;
     int lo = from;
     int hi = from + count - 1;
 
Index: libjava/classpath/java/util/GregorianCalendar.java
===================================================================
--- libjava/classpath/java/util/GregorianCalendar.java	(revision 122231)
+++ libjava/classpath/java/util/GregorianCalendar.java	(working copy)
@@ -935,10 +935,11 @@
 	    fields[MONTH] += 12;
 	    fields[YEAR]--;
 	  }
-	isTimeSet = false;
 	int maxDay = getActualMaximum(DAY_OF_MONTH);
 	if (fields[DAY_OF_MONTH] > maxDay)
 	  fields[DAY_OF_MONTH] = maxDay;
+	set(YEAR, fields[YEAR]);
+	set(MONTH, fields[MONTH]);
 	break;
       case DAY_OF_MONTH:
       case DAY_OF_YEAR:
Index: libjava/classpath/java/util/Date.java
===================================================================
--- libjava/classpath/java/util/Date.java	(revision 122231)
+++ libjava/classpath/java/util/Date.java	(working copy)
@@ -754,6 +754,7 @@
 	  }
 	else if (firstch >= '0' && firstch <= '9')
 	  {
+	    int lastPunct = -1;
 	    while (tok != null && tok.length() > 0)
 	      {
 		int punctOffset = tok.length();
@@ -791,6 +792,13 @@
 		    else
 		      minute = num;
 		  }
+		else if (lastPunct == ':' && hour >= 0 && (minute < 0 || second < 0))
+		  {
+		    if (minute < 0)
+		      minute = num;
+		    else
+		      second = num;
+		  }
 	        else if ((num >= 70
 			  && (punct == ' ' || punct == ','
 			      || punct == '/' || punct < 0))
@@ -828,6 +836,7 @@
 		  tok = null;
 		else
 		  tok = tok.substring(punctOffset + 1);
+		lastPunct = punct;
 	      }
 	  }
 	else if (firstch >= 'A' && firstch <= 'Z')
Index: libjava/classpath/java/util/SimpleTimeZone.java
===================================================================
--- libjava/classpath/java/util/SimpleTimeZone.java	(revision 122231)
+++ libjava/classpath/java/util/SimpleTimeZone.java	(working copy)
@@ -1,5 +1,6 @@
 /* java.util.SimpleTimeZone
-   Copyright (C) 1998, 1999, 2000, 2003, 2004, 2005  Free Software Foundation, Inc.
+   Copyright (C) 1998, 1999, 2000, 2003, 2004, 2005, 2007
+   Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -141,8 +142,8 @@
 
   /**
    * This variable specifies the time of change to daylight savings.
-   * This time is given in milliseconds after midnight local
-   * standard time.
+   * This time is given in milliseconds after midnight in startTimeMode
+   * chosen time mode.
    * @serial
    */
   private int startTime;
@@ -187,8 +188,8 @@
 
   /**
    * This variable specifies the time of change back to standard time.
-   * This time is given in milliseconds after midnight local
-   * standard time.
+   * This time is given in milliseconds after midnight in endTimeMode
+   * chosen time mode.
    * @serial
    */
   private int endTime;
@@ -380,24 +381,17 @@
                         int endDayOfWeekInMonth, int endDayOfWeek,
                         int endTime, int endTimeMode, int dstSavings)
   {
-    this.rawOffset = rawOffset;
-    setID(id);
-    useDaylight = true;
+    this(rawOffset, id, startMonth, startDayOfWeekInMonth, startDayOfWeek,
+	 startTime, endMonth, endDayOfWeekInMonth, endDayOfWeek, endTime);
 
     if (startTimeMode < WALL_TIME || startTimeMode > UTC_TIME)
       throw new IllegalArgumentException("startTimeMode must be one of WALL_TIME, STANDARD_TIME, or UTC_TIME");
     if (endTimeMode < WALL_TIME || endTimeMode > UTC_TIME)
       throw new IllegalArgumentException("endTimeMode must be one of WALL_TIME, STANDARD_TIME, or UTC_TIME");
-    this.startTimeMode = startTimeMode;
-    this.endTimeMode = endTimeMode;
 
-    setStartRule(startMonth, startDayOfWeekInMonth, startDayOfWeek, startTime);
-    setEndRule(endMonth, endDayOfWeekInMonth, endDayOfWeek, endTime);
-    if (startMonth == endMonth)
-      throw new IllegalArgumentException("startMonth and endMonth must be different");
-    this.startYear = 0;
-
     this.dstSavings = dstSavings;
+    this.startTimeMode = startTimeMode;
+    this.endTimeMode = endTimeMode;
   }
 
   /**
@@ -477,12 +471,8 @@
     this.startMonth = month;
     this.startDay = day;
     this.startDayOfWeek = Math.abs(dayOfWeek);
-    if (this.startTimeMode == WALL_TIME || this.startTimeMode == STANDARD_TIME)
-      this.startTime = time;
-    else
-      // Convert from UTC to STANDARD
-      this.startTime = time + this.rawOffset;
-    useDaylight = true;
+    this.startTime = time;
+    this.startTimeMode = WALL_TIME;
   }
 
   /**
@@ -513,24 +503,10 @@
   public void setStartRule(int month, int day, int dayOfWeek, int time,
                            boolean after)
   {
-    // FIXME: XXX: Validate that checkRule and offset processing work with on
-    // or before mode.
-    this.startDay = after ? Math.abs(day) : -Math.abs(day);
-    this.startDayOfWeek = after ? Math.abs(dayOfWeek) : -Math.abs(dayOfWeek);
-    this.startMode = (dayOfWeek != 0)
-                     ? (after ? DOW_GE_DOM_MODE : DOW_LE_DOM_MODE)
-                     : checkRule(month, day, dayOfWeek);
-    this.startDay = Math.abs(this.startDay);
-    this.startDayOfWeek = Math.abs(this.startDayOfWeek);
-
-    this.startMonth = month;
-
-    if (this.startTimeMode == WALL_TIME || this.startTimeMode == STANDARD_TIME)
-      this.startTime = time;
+    if (after)
+      setStartRule(month, day, -dayOfWeek, time);
     else
-      // Convert from UTC to STANDARD
-      this.startTime = time + this.rawOffset;
-    useDaylight = true;
+      setStartRule(month, -day, -dayOfWeek, time);
   }
 
   /**
@@ -570,14 +546,8 @@
     this.endMonth = month;
     this.endDay = day;
     this.endDayOfWeek = Math.abs(dayOfWeek);
-    if (this.endTimeMode == WALL_TIME)
-      this.endTime = time;
-    else if (this.endTimeMode == STANDARD_TIME)
-      // Convert from STANDARD to DST
-      this.endTime = time + this.dstSavings;
-    else
-      // Convert from UTC to DST
-      this.endTime = time + this.rawOffset + this.dstSavings;
+    this.endTime = time;
+    this.endTimeMode = WALL_TIME;
     useDaylight = true;
   }
 
@@ -607,27 +577,10 @@
   public void setEndRule(int month, int day, int dayOfWeek, int time,
                          boolean after)
   {
-    // FIXME: XXX: Validate that checkRule and offset processing work with on
-    // or before mode.
-    this.endDay = after ? Math.abs(day) : -Math.abs(day);
-    this.endDayOfWeek = after ? Math.abs(dayOfWeek) : -Math.abs(dayOfWeek);
-    this.endMode = (dayOfWeek != 0)
-                   ? (after ? DOW_GE_DOM_MODE : DOW_LE_DOM_MODE)
-                   : checkRule(month, day, dayOfWeek);
-    this.endDay = Math.abs(this.endDay);
-    this.endDayOfWeek = Math.abs(endDayOfWeek);
-
-    this.endMonth = month;
-
-    if (this.endTimeMode == WALL_TIME)
-      this.endTime = time;
-    else if (this.endTimeMode == STANDARD_TIME)
-      // Convert from STANDARD to DST
-      this.endTime = time + this.dstSavings;
+    if (after)
+      setEndRule(month, day, -dayOfWeek, time);
     else
-      // Convert from UTC to DST
-      this.endTime = time + this.rawOffset + this.dstSavings;
-    useDaylight = true;
+      setEndRule(month, -day, -dayOfWeek, time);
   }
 
   /**
@@ -688,16 +641,37 @@
     int daylightSavings = 0;
     if (useDaylight && era == GregorianCalendar.AD && year >= startYear)
       {
+	int orig_year = year;
+	int time = startTime + (startTimeMode == UTC_TIME ? rawOffset : 0);
 	// This does only work for Gregorian calendars :-(
 	// This is mainly because setStartYear doesn't take an era.
 	boolean afterStart = ! isBefore(year, month, day, dayOfWeek, millis,
 	                                startMode, startMonth, startDay,
-	                                startDayOfWeek, startTime);
-	boolean beforeEnd = isBefore(year, month, day, dayOfWeek,
-				     millis + dstSavings,
-	                             endMode, endMonth, endDay, endDayOfWeek,
-	                             endTime);
+					startDayOfWeek, time);
+	millis += dstSavings;
+	if (millis >= 24 * 60 * 60 * 1000)
+	  {
+	    millis -= 24 * 60 * 60 * 1000;
+	    dayOfWeek = (dayOfWeek % 7) + 1;
+	    if (++day > daysInMonth)
+	      {
+		day = 1;
+		if (month++ == Calendar.DECEMBER)
+		  {
+		    month = Calendar.JANUARY;
+		    year++;
+		  }
+	      }
+	  }
+	time = endTime + (endTimeMode == UTC_TIME ? rawOffset : 0);
+	if (endTimeMode != WALL_TIME)
+	  time += dstSavings;
+	boolean beforeEnd = isBefore(year, month, day, dayOfWeek, millis,
+				     endMode, endMonth, endDay, endDayOfWeek,
+				     time);
 
+	if (year != orig_year)
+	  afterStart = false;
 	if (startMonth < endMonth)
 	  // use daylight savings, if the date is after the start of
 	  // savings, and before the end of savings.
Index: libjava/classpath/java/util/TimeZone.java
===================================================================
--- libjava/classpath/java/util/TimeZone.java	(revision 122231)
+++ libjava/classpath/java/util/TimeZone.java	(working copy)
@@ -39,6 +39,9 @@
 
 package java.util;
 
+import gnu.classpath.SystemProperties;
+import gnu.java.util.ZoneInfo;
+import java.io.File;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
 import java.text.DateFormatSymbols;
@@ -115,7 +118,7 @@
 		
 		// Fall back on GMT.
 		if (zone == null)
-		  zone = (TimeZone) timezones().get("GMT");
+		  zone = getTimeZone ("GMT");
 		
 		return zone;
 	      }
@@ -128,6 +131,22 @@
   private static final long serialVersionUID = 3581463369166924961L;
 
   /**
+   * Flag whether zoneinfo data should be used,
+   * otherwise builtin timezone data will be provided.
+   */
+  private static String zoneinfo_dir;
+
+  /**
+   * Cached copy of getAvailableIDs().
+   */
+  private static String[] availableIDs = null;
+
+  /**
+   * JDK 1.1.x compatibility aliases.
+   */
+  private static HashMap aliases0;
+
+  /**
    * HashMap for timezones by ID.  
    */
   private static HashMap timezones0;
@@ -135,13 +154,55 @@
    * it is not needed: 
    */
   // Package-private to avoid a trampoline.
-  static synchronized HashMap timezones()
+  static HashMap timezones()
   {
     if (timezones0 == null) 
       {
 	HashMap timezones = new HashMap();
 	timezones0 = timezones;
 
+	zoneinfo_dir = SystemProperties.getProperty("gnu.java.util.zoneinfo.dir");
+	if (zoneinfo_dir != null && !new File(zoneinfo_dir).isDirectory())
+	  zoneinfo_dir = null;
+
+	if (zoneinfo_dir != null)
+	  {
+	    aliases0 = new HashMap();
+
+	    // These deprecated aliases for JDK 1.1.x compatibility
+	    // should take precedence over data files read from
+	    // /usr/share/zoneinfo.
+	    aliases0.put("ACT", "Australia/Darwin");
+	    aliases0.put("AET", "Australia/Sydney");
+	    aliases0.put("AGT", "America/Argentina/Buenos_Aires");
+	    aliases0.put("ART", "Africa/Cairo");
+	    aliases0.put("AST", "America/Juneau");
+	    aliases0.put("BST", "Asia/Colombo");
+	    aliases0.put("CAT", "Africa/Gaborone");
+	    aliases0.put("CNT", "America/St_Johns");
+	    aliases0.put("CST", "CST6CDT");
+	    aliases0.put("CTT", "Asia/Brunei");
+	    aliases0.put("EAT", "Indian/Comoro");
+	    aliases0.put("ECT", "CET");
+	    aliases0.put("EST", "EST5EDT");
+	    aliases0.put("EST5", "EST5EDT");
+	    aliases0.put("IET", "EST5EDT");
+	    aliases0.put("IST", "Asia/Calcutta");
+	    aliases0.put("JST", "Asia/Seoul");
+	    aliases0.put("MIT", "Pacific/Niue");
+	    aliases0.put("MST", "MST7MDT");
+	    aliases0.put("MST7", "MST7MDT");
+	    aliases0.put("NET", "Indian/Mauritius");
+	    aliases0.put("NST", "Pacific/Auckland");
+	    aliases0.put("PLT", "Indian/Kerguelen");
+	    aliases0.put("PNT", "MST7MDT");
+	    aliases0.put("PRT", "America/Anguilla");
+	    aliases0.put("PST", "PST8PDT");
+	    aliases0.put("SST", "Pacific/Ponape");
+	    aliases0.put("VST", "Asia/Bangkok");
+	    return timezones;
+	  }
+
 	TimeZone tz;
 	// Automatically generated by scripts/timezones.pl
 	// XXX - Should we read this data from a file?
@@ -887,7 +948,6 @@
   static TimeZone getDefaultTimeZone(String sysTimeZoneId)
   {
     String stdName = null;
-    String dstName;
     int stdOffs;
     int dstOffs;
     try
@@ -900,14 +960,14 @@
 
 	// get std
 	do
-	  c = sysTimeZoneId.charAt(index++);
+	  c = sysTimeZoneId.charAt(index);
 	while (c != '+' && c != '-' && c != ',' && c != ':'
-	       && ! Character.isDigit(c) && c != '\0' && index < idLength);
+	       && ! Character.isDigit(c) && c != '\0' && ++index < idLength);
 
 	if (index >= idLength)
-	  return (TimeZone)timezones().get(sysTimeZoneId);
+	  return getTimeZoneInternal(sysTimeZoneId);
 
-	stdName = sysTimeZoneId.substring(0, --index);
+	stdName = sysTimeZoneId.substring(0, index);
 	prevIndex = index;
 
 	// get the std offset
@@ -938,7 +998,7 @@
 	if (index >= idLength)
 	  {
 	    // Do we have an existing timezone with that name and offset?
-	    TimeZone tz = (TimeZone) timezones().get(stdName);
+	    TimeZone tz = getTimeZoneInternal(stdName);
 	    if (tz != null)
 	      if (tz.getRawOffset() == stdOffs)
 		return tz;
@@ -949,16 +1009,16 @@
 
 	// get dst
 	do
-	  c = sysTimeZoneId.charAt(index++);
+	  c = sysTimeZoneId.charAt(index);
 	while (c != '+' && c != '-' && c != ',' && c != ':'
-	       && ! Character.isDigit(c) && c != '\0' && index < idLength);
+	       && ! Character.isDigit(c) && c != '\0' && ++index < idLength);
 
 	// Done yet? (Format: std offset dst)
 	if (index >= idLength)
 	  {
 	    // Do we have an existing timezone with that name and offset 
 	    // which has DST?
-	    TimeZone tz = (TimeZone) timezones().get(stdName);
+	    TimeZone tz = getTimeZoneInternal(stdName);
 	    if (tz != null)
 	      if (tz.getRawOffset() == stdOffs && tz.useDaylightTime())
 		return tz;
@@ -968,7 +1028,6 @@
 	  }
 
 	// get the dst offset
-	dstName = sysTimeZoneId.substring(prevIndex, --index);
 	prevIndex = index;
 	do
 	  c = sysTimeZoneId.charAt(index++);
@@ -1005,7 +1064,7 @@
 	if (index >= idLength)
 	  {
 	    // Time Zone existing with same name, dst and offsets?
-	    TimeZone tz = (TimeZone) timezones().get(stdName);
+	    TimeZone tz = getTimeZoneInternal(stdName);
 	    if (tz != null)
 	      if (tz.getRawOffset() == stdOffs && tz.useDaylightTime()
 	          && tz.getDSTSavings() == (dstOffs - stdOffs))
@@ -1171,10 +1230,10 @@
 	break;
       else
 	i++;
+    millis += 60 * 1000 * Integer.parseInt(time.substring(iprev, i));
     if (i >= time.length())
       return millis;
 
-    millis += 60 * 1000 * Integer.parseInt(time.substring(iprev, i));
     millis += 1000 * Integer.parseInt(time.substring(++i));
     return millis;
   }
@@ -1343,14 +1402,7 @@
 
   private String getDefaultDisplayName(boolean dst)
   {
-    int offset = getRawOffset();
-    if (dst && this instanceof SimpleTimeZone)
-      {
-	// ugly, but this is a design failure of the API:
-	// getDisplayName takes a dst parameter even though
-	// TimeZone knows nothing about daylight saving offsets.
-	offset += ((SimpleTimeZone) this).getDSTSavings();
-      }
+    int offset = getRawOffset() + (dst ? getDSTSavings() : 0);
 
     StringBuffer sb = new StringBuffer(9);
     sb.append("GMT");
@@ -1406,30 +1458,67 @@
    * @return The time zone for the identifier or GMT, if no such time
    * zone exists.
    */
-  // FIXME: XXX: JCL indicates this and other methods are synchronized.
-  public static TimeZone getTimeZone(String ID)
+  private static TimeZone getTimeZoneInternal(String ID)
   {
     // First check timezones hash
-    TimeZone tz = (TimeZone) timezones().get(ID);
-    if (tz != null)
+    TimeZone tz = null;
+    TimeZone tznew = null;
+    for (int pass = 0; pass < 2; pass++)
       {
-	if (tz.getID().equals(ID))
-	  return tz;
+	synchronized (TimeZone.class)
+	  {
+	    tz = (TimeZone) timezones().get(ID);
+	    if (tz != null)
+	      {
+		if (!tz.getID().equals(ID))
+		  {
+		    // We always return a timezone with the requested ID.
+		    // This is the same behaviour as with JDK1.2.
+		    tz = (TimeZone) tz.clone();
+		    tz.setID(ID);
+		    // We also save the alias, so that we return the same
+		    // object again if getTimeZone is called with the same
+		    // alias.
+		    timezones().put(ID, tz);
+		  }
+		return tz;
+	      }
+	    else if (tznew != null)
+	      {
+		timezones().put(ID, tznew);
+		return tznew;
+	      }
+	  }
 
-	// We always return a timezone with the requested ID.
-	// This is the same behaviour as with JDK1.2.
-	tz = (TimeZone) tz.clone();
-	tz.setID(ID);
-	// We also save the alias, so that we return the same
-	// object again if getTimeZone is called with the same
-	// alias.
-	timezones().put(ID, tz);
-	return tz;
+	if (pass == 1 || zoneinfo_dir == null)
+	  return null;
+
+	// aliases0 is never changing after first timezones(), so should
+	// be safe without synchronization.
+	String zonename = (String) aliases0.get(ID);
+	if (zonename == null)
+	  zonename = ID;
+
+	// Read the file outside of the critical section, it is expensive.
+	tznew = ZoneInfo.readTZFile (ID, zoneinfo_dir
+				     + File.separatorChar + zonename);
+	if (tznew == null)
+	  return null;
       }
 
-    // See if the ID is really a GMT offset form.
-    // Note that GMT is in the table so we know it is different.
-    if (ID.startsWith("GMT"))
+    return null;
+  }
+
+  /**
+   * Gets the TimeZone for the given ID.
+   * @param ID the time zone identifier.
+   * @return The time zone for the identifier or GMT, if no such time
+   * zone exists.
+   */
+  public static TimeZone getTimeZone(String ID)
+  {
+    // Check for custom IDs first
+    if (ID.startsWith("GMT") && ID.length() > 3)
       {
 	int pos = 3;
 	int offset_direction = 1;
@@ -1474,8 +1563,20 @@
 		  }
 	      }
 
-	    return new SimpleTimeZone((hour * (60 * 60 * 1000) +
-				       minute * (60 * 1000))
+	    // Custom IDs have to be normalized
+	    StringBuffer sb = new StringBuffer(9);
+	    sb.append("GMT");
+
+	    sb.append(offset_direction >= 0 ? '+' : '-');
+	    sb.append((char) ('0' + hour / 10));
+	    sb.append((char) ('0' + hour % 10));
+	    sb.append(':');
+	    sb.append((char) ('0' + minute / 10));
+	    sb.append((char) ('0' + minute % 10));
+	    ID = sb.toString();
+
+	    return new SimpleTimeZone((hour * (60 * 60 * 1000)
+				       + minute * (60 * 1000))
 				      * offset_direction, ID);
 	  }
 	catch (NumberFormatException e)
@@ -1483,8 +1584,11 @@
 	  }
       }
 
-    // Finally, return GMT per spec
-    return getTimeZone("GMT");
+    TimeZone tz = getTimeZoneInternal(ID);
+    if (tz != null)
+      return tz;
+
+    return new SimpleTimeZone(0, "GMT");
   }
 
   /**
@@ -1497,37 +1601,134 @@
    */
   public static String[] getAvailableIDs(int rawOffset)
   {
+    synchronized (TimeZone.class)
+      {
+	HashMap h = timezones();
+	int count = 0;
+	if (zoneinfo_dir == null)
+	  {
+	    Iterator iter = h.entrySet().iterator();
+	    while (iter.hasNext())
+	      {
+		// Don't iterate the values, since we want to count
+		// doubled values (aliases)
+		Map.Entry entry = (Map.Entry) iter.next();
+		if (((TimeZone) entry.getValue()).getRawOffset() == rawOffset)
+		  count++;
+	      }
+
+	    String[] ids = new String[count];
+	    count = 0;
+	    iter = h.entrySet().iterator();
+	    while (iter.hasNext())
+	      {
+		Map.Entry entry = (Map.Entry) iter.next();
+		if (((TimeZone) entry.getValue()).getRawOffset() == rawOffset)
+		  ids[count++] = (String) entry.getKey();
+	      }
+	    return ids;
+	  }
+      }
+
+    String[] s = getAvailableIDs();
     int count = 0;
-    Iterator iter = timezones().entrySet().iterator();
-    while (iter.hasNext())
+    for (int i = 0; i < s.length; i++)
       {
-	// Don't iterate the values, since we want to count 
-	// doubled values (aliases)
-	Map.Entry entry = (Map.Entry) iter.next();
-	if (((TimeZone) entry.getValue()).getRawOffset() == rawOffset)
+	TimeZone t = getTimeZoneInternal(s[i]);
+	if (t == null || t.getRawOffset() != rawOffset)
+	  s[i] = null;
+	else
 	  count++;
       }
-
     String[] ids = new String[count];
     count = 0;
-    iter = timezones().entrySet().iterator();
-    while (iter.hasNext())
-      {
-	Map.Entry entry = (Map.Entry) iter.next();
-	if (((TimeZone) entry.getValue()).getRawOffset() == rawOffset)
-	  ids[count++] = (String) entry.getKey();
-      }
+    for (int i = 0; i < s.length; i++)
+    if (s[i] != null)
+      ids[count++] = s[i];
+
     return ids;
   }
 
+  private static int getAvailableIDs(File d, String prefix, ArrayList list)
+    {
+      String[] files = d.list();
+      int count = files.length;
+      boolean top = prefix.length() == 0;
+      list.add (files);
+      for (int i = 0; i < files.length; i++)
+	{
+	  if (top
+	      && (files[i].equals("posix")
+		  || files[i].equals("right")
+		  || files[i].endsWith(".tab")
+		  || aliases0.get(files[i]) != null))
+	    {
+	      files[i] = null;
+	      count--;
+	      continue;
+	    }
+
+	  File f = new File(d, files[i]);
+	  if (f.isDirectory())
+	    {
+	      count += getAvailableIDs(f, prefix + files[i]
+				       + File.separatorChar, list) - 1;
+	      files[i] = null;
+	    }
+	  else
+	    files[i] = prefix + files[i];
+	}
+      return count;
+    }
+
   /**
    * Gets all available IDs.
    * @return An array of all supported IDs.
    */
   public static String[] getAvailableIDs()
   {
-    return (String[])
-      timezones().keySet().toArray(new String[timezones().size()]);
+    synchronized (TimeZone.class)
+      {
+	HashMap h = timezones();
+	if (zoneinfo_dir == null)
+	  return (String[]) h.keySet().toArray(new String[h.size()]);
+
+	if (availableIDs != null)
+	  {
+	    String[] ids = new String[availableIDs.length];
+	    for (int i = 0; i < availableIDs.length; i++)
+	      ids[i] = availableIDs[i];
+	    return ids;
+	  }
+
+	File d = new File(zoneinfo_dir);
+	ArrayList list = new ArrayList(30);
+	int count = getAvailableIDs(d, "", list) + aliases0.size();
+	availableIDs = new String[count];
+	String[] ids = new String[count];
+
+	count = 0;
+	for (int i = 0; i < list.size(); i++)
+	  {
+	    String[] s = (String[]) list.get(i);
+	    for (int j = 0; j < s.length; j++)
+	      if (s[j] != null)
+		{
+		  availableIDs[count] = s[j];
+		  ids[count++] = s[j];
+		}
+	  }
+
+	Iterator iter = aliases0.entrySet().iterator();
+	while (iter.hasNext())
+	  {
+	    Map.Entry entry = (Map.Entry) iter.next();
+	    availableIDs[count] = (String) entry.getKey();
+	    ids[count++] = (String) entry.getKey();
+	  }
+
+	return ids;
+      }
   }
 
   /**
Index: libjava/classpath/external/Makefile.in
===================================================================
--- libjava/classpath/external/Makefile.in	(revision 122231)
+++ libjava/classpath/external/Makefile.in	(working copy)
@@ -125,6 +125,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/external/jsr166/Makefile.in
===================================================================
--- libjava/classpath/external/jsr166/Makefile.in	(revision 122231)
+++ libjava/classpath/external/jsr166/Makefile.in	(working copy)
@@ -116,6 +116,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/external/sax/Makefile.in
===================================================================
--- libjava/classpath/external/sax/Makefile.in	(revision 122231)
+++ libjava/classpath/external/sax/Makefile.in	(working copy)
@@ -116,6 +116,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/external/sax/org/xml/sax/helpers/XMLReaderFactory.java
===================================================================
--- libjava/classpath/external/sax/org/xml/sax/helpers/XMLReaderFactory.java	(revision 122231)
+++ libjava/classpath/external/sax/org/xml/sax/helpers/XMLReaderFactory.java	(working copy)
@@ -137,6 +137,11 @@
 	if (className == null) {
 // BEGIN DISTRIBUTION-SPECIFIC
 
+	    // CLASSPATH LOCAL: have to code in the backup.
+	    // Among other things, see PR 31303, and this thread:
+	    // http://gcc.gnu.org/ml/java-patches/2007-q1/msg00661.html
+	    className = "gnu.xml.stream.SAXParser";
+
 	    // EXAMPLE:
 	    // className = "com.example.sax.XmlReader";
 	    // or a $JAVA_HOME/jre/lib/*properties setting...
Index: libjava/classpath/external/w3c_dom/Makefile.in
===================================================================
--- libjava/classpath/external/w3c_dom/Makefile.in	(revision 122231)
+++ libjava/classpath/external/w3c_dom/Makefile.in	(working copy)
@@ -116,6 +116,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/external/relaxngDatatype/Makefile.in
===================================================================
--- libjava/classpath/external/relaxngDatatype/Makefile.in	(revision 122231)
+++ libjava/classpath/external/relaxngDatatype/Makefile.in	(working copy)
@@ -116,6 +116,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/include/gnu_java_awt_peer_gtk_ComponentGraphics.h
===================================================================
--- libjava/classpath/include/gnu_java_awt_peer_gtk_ComponentGraphics.h	(revision 122231)
+++ libjava/classpath/include/gnu_java_awt_peer_gtk_ComponentGraphics.h	(working copy)
@@ -1,17 +1,16 @@
 /* DO NOT EDIT THIS FILE - it is machine generated */
 
+#include <jni.h>
+
 #ifndef __gnu_java_awt_peer_gtk_ComponentGraphics__
 #define __gnu_java_awt_peer_gtk_ComponentGraphics__
 
-#include <jni.h>
-
 #ifdef __cplusplus
 extern "C"
 {
 #endif
 
 JNIEXPORT jlong JNICALL Java_gnu_java_awt_peer_gtk_ComponentGraphics_initState (JNIEnv *env, jobject, jobject);
-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_ComponentGraphics_disposeSurface (JNIEnv *env, jobject, jlong);
 JNIEXPORT jlong JNICALL Java_gnu_java_awt_peer_gtk_ComponentGraphics_initFromVolatile (JNIEnv *env, jobject, jlong, jint, jint);
 JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_ComponentGraphics_start_1gdk_1drawing (JNIEnv *env, jobject);
 JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_ComponentGraphics_end_1gdk_1drawing (JNIEnv *env, jobject);
Index: libjava/classpath/include/Makefile.in
===================================================================
--- libjava/classpath/include/Makefile.in	(revision 122231)
+++ libjava/classpath/include/Makefile.in	(working copy)
@@ -117,6 +117,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/classpath/include/gnu_java_awt_peer_gtk_CairoGraphics2D.h
===================================================================
--- libjava/classpath/include/gnu_java_awt_peer_gtk_CairoGraphics2D.h	(revision 122231)
+++ libjava/classpath/include/gnu_java_awt_peer_gtk_CairoGraphics2D.h	(working copy)
@@ -1,10 +1,10 @@
 /* DO NOT EDIT THIS FILE - it is machine generated */
 
+#include <jni.h>
+
 #ifndef __gnu_java_awt_peer_gtk_CairoGraphics2D__
 #define __gnu_java_awt_peer_gtk_CairoGraphics2D__
 
-#include <jni.h>
-
 #ifdef __cplusplus
 extern "C"
 {
@@ -24,7 +24,6 @@
 JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoSetDash (JNIEnv *env, jobject, jlong, jdoubleArray, jint, jdouble);
 JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoDrawGlyphVector (JNIEnv *env, jobject, jlong, jobject, jfloat, jfloat, jint, jintArray, jfloatArray);
 JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoSetFont (JNIEnv *env, jobject, jlong, jobject);
-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelCurveTo (JNIEnv *env, jobject, jlong, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble);
 JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRectangle (JNIEnv *env, jobject, jlong, jdouble, jdouble, jdouble, jdouble);
 JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoArc (JNIEnv *env, jobject, jlong, jdouble, jdouble, jdouble, jdouble, jdouble);
 JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoSave (JNIEnv *env, jobject, jlong);
@@ -32,18 +31,13 @@
 JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoNewPath (JNIEnv *env, jobject, jlong);
 JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoClosePath (JNIEnv *env, jobject, jlong);
 JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoMoveTo (JNIEnv *env, jobject, jlong, jdouble, jdouble);
-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelMoveTo (JNIEnv *env, jobject, jlong, jdouble, jdouble);
 JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoLineTo (JNIEnv *env, jobject, jlong, jdouble, jdouble);
-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelLineTo (JNIEnv *env, jobject, jlong, jdouble, jdouble);
 JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoCurveTo (JNIEnv *env, jobject, jlong, jdouble, jdouble, jdouble, jdouble, jdouble, jdouble);
 JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoStroke (JNIEnv *env, jobject, jlong);
 JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoFill (JNIEnv *env, jobject, jlong, jdouble);
 JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoClip (JNIEnv *env, jobject, jlong);
-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoPreserveClip (JNIEnv *env, jobject, jlong);
 JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoResetClip (JNIEnv *env, jobject, jlong);
-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoDrawLine (JNIEnv *env, jobject, jlong, jdouble, jdouble, jdouble, jdouble);
-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoDrawRect (JNIEnv *env, jobject, jlong, jdouble, jdouble, jdouble, jdouble);
-JNIEXPORT void JNICALL Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoFillRect (JNIEnv *env, jobject, jlong, jdouble, jdouble, jdouble, jdouble);
+
 #undef gnu_java_awt_peer_gtk_CairoGraphics2D_INTERPOLATION_NEAREST
 #define gnu_java_awt_peer_gtk_CairoGraphics2D_INTERPOLATION_NEAREST 0L
 #undef gnu_java_awt_peer_gtk_CairoGraphics2D_INTERPOLATION_BILINEAR
Index: libjava/classpath/ChangeLog
===================================================================
--- libjava/classpath/ChangeLog	(revision 122231)
+++ libjava/classpath/ChangeLog	(working copy)
@@ -1,3 +1,288 @@
+2007-04-04  Francis Kung  <fkung@redhat.com>
+
+	* gnu/java/awt/peer/gtk/ComponentGraphics.java
+	(cairoDrawGlyphVector): Removed method.
+	(cairoSetFont): Removed method.
+	(disposeNative): Removed method.
+	* native/jni/gtk-peer/gnu_java_awt_peer_gtk_CairoGraphics2D.c
+	(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoDrawGlyphVector): Added
+	locking.
+	(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoSetFont): Added locking.
+	(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_disposeNative): Added locking.
+
+2007-03-16  Francis Kung  <fkung@redhat.com>
+
+	* gnu/java/awt/peer/gtk/CairoGraphics2D.java
+	(cairoArc): Make protected rather than private so it can be over-ridden.
+	(cairoClip): Likewise.
+	(cairoClosePath): Likewise.
+	(cairoCurveTo): Likewise.
+	(cairoDrawGlyphVector): Likewise.
+	(cairoFill): Likewise.
+	(cairoLineTo): Likewise.
+	(cairoMoveTo): Likewise.
+	(cairoNewPath): Likewise.
+	(cairoRectangle): Likewise.
+	(cairoResetClip): Likewise.
+	(cairoRestore): Likewise.
+	(cairoSave): Likewise.
+	(cairoScale): Likewise.
+	(cairoSetAntialias): Likewise.
+	(cairoSetDash): Likewise.
+	(cairoSetFillRule): Likewise.
+	(cairoSetFont): Likewise.
+	(cairoSetLine): Likewise.
+	(cairoSetMatrix): Likewise.
+	(cairoSetOperator): Likewise.
+	(cairoSetRGBAColor): Likewise.
+	(cairoStroke): Likewise.
+	(drawPixels): Likewise.
+	(init): Likewise.
+	(setGradient): Likewise.
+	(setPaintPixels): Likewise.
+	(cairoDrawLine): Removed.
+	(cairoDrawRect): Removed.
+	(cairoFillRect): Removed.
+	(cairoPreserveClip): Removed.
+	(cairoRelCurveTo): Removed.
+	(cairoRelLineTo): Removed.
+	(cairoRelMoveTo): Removed.
+	* gnu/java/awt/peer/gtk/ComponentGraphics.java
+	(cairoArc): New method wrapping superclass method in locks.
+	(cairoClip): Likewise.
+	(cairoClosePath): Likewise.
+	(cairoCurveTo): Likewise.
+	(cairoDrawGlyphVector): Likewise.
+	(cairoFill): Likewise.
+	(cairoLineTo): Likewise.
+	(cairoMoveTo): Likewise.
+	(cairoNewPath): Likewise.
+	(cairoRectangle): Likewise.
+	(cairoResetClip): Likewise.
+	(cairoRestore): Likewise.
+	(cairoSave): Likewise.
+	(cairoScale): Likewise.
+	(cairoSetAntialias): Likewise.
+	(cairoSetDash): Likewise.
+	(cairoSetFillRule): Likewise.
+	(cairoSetFont): Likewise.
+	(cairoSetLine): Likewise.
+	(cairoSetMatrix): Likewise.
+	(cairoSetOperator): Likewise.
+	(cairoSetRGBAColor): Likewise.
+	(cairoStroke): Likewise.
+	(disposeNative): Likewise.
+	(drawPixels): Likewise.
+	(init): Likewise.
+	(setGradient): Likewise.
+	(setPaintPixels): Likewise.
+	(draw): Do not lock, as locking is now done in the wrapped native methods.
+	(drawComposite): Likewise.
+	(drawGlyphVector): Likewise.
+	(drawImage): Likewise.
+	(drawRenderedImage): Likewise.
+	(fill): Likewise.
+	(setClip): Removed.
+	(lock): Added documentation.
+	(unlock): Added documentation.
+	* include/gnu_java_awt_peer_gtk_CairoGraphics2D.h: Regenerated.
+	* include/gnu_java_awt_peer_gtk_ComponentGraphics.h: Regenerated.
+	* native/jni/gtk-peer/gnu_java_awt_peer_gtk_CairoGraphics2D.c
+	(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoDrawLine): Removed.
+	(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoDrawRect): Removed.
+	(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoFillRect): Removed.
+	(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoPreserveClip): Removed.
+	(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelCurveTo): Removed.
+	(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelLineTo): Removed.
+	(Java_gnu_java_awt_peer_gtk_CairoGraphics2D_cairoRelMoveTo): Removed.
+
+2007-04-23  Jeroen Frijters  <jeroen@frijters.net>
+
+	PR classpath/31646:
+	* java/util/Arrays.java (qsort): Corrected initial median calculation.
+
+2007-04-19  Casey Marshall  <csm@gnu.org>
+
+	PR classpath/31626:
+	* gnu/javax/net/ssl/provider/SSLSocketFactoryImpl.java
+	(createSocket): New method.
+
+2007-04-18  Tom Tromey  <tromey@redhat.com>
+
+	* tools/gnu/classpath/tools/javah/MethodHelper.java (print):
+	Changed arguments.  Directly print method name.
+	* tools/gnu/classpath/tools/javah/ClassWrapper.java
+	(methodNameMap): New field.
+	(makeVtable): Initialize it.
+	(printMethods): Compute name for bridge targets.
+
+2007-04-17  Francis Kung  <fkung@redhat.com>
+
+	PR classpath/31311
+	* gnu/java/awt/peer/gtk/ComponentGraphics.java
+	(dispose): Removed method.
+	(disposeSurface): Removed method.
+	* gnu_java_awt_peer_gtk_ComponentGraphics.h: Regenerated.
+	* native/jni/gtk-peer/gnu_java_awt_peer_gtk_ComponentGraphics.c
+	(Java_gnu_java_awt_peer_gtk_ComponentGraphics_disposeSurface): Removed.
+	(Java_gnu_java_awt_peer_gtk_ComponentGraphics_initState): Destroy surface
+	after it is used to create a cairo context.
+
+2007-04-16  Tom Tromey  <tromey@redhat.com>
+
+	https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=236614
+	* gnu/javax/net/ssl/provider/SSLSocketFactoryImpl.java
+	(createSocket): Change order of delegation.
+
+2007-03-30  Andrew Haley  <aph@redhat.com>
+
+	* javax/management/ObjectName.java: Handle 0-length names.
+
+2007-03-27  Andrew Haley  <aph@redhat.com>
+
+	* javax/management/MBeanServerFactory.java: Use the domain that
+	we've been passed, not the fixed string "DefaultDomain".
+
+2007-03-29  Tom Tromey  <tromey@redhat.com>
+
+	PR libgcj/29869:
+	* gnu/java/util/jar/JarUtils.java (log): Commented out.
+	(readSFManifest): Don't log.
+
+2007-03-28  Casey Marshall  <csm@gnu.org>
+
+	* gnu/javax/net/ssl/provider/ClientHandshake.java (RSAGen.implRun):
+	check keyEncipherment bit of the certificate, and just pass the public
+	key to the cipher.
+
+2007-03-27  Casey Marshall  <csm@gnu.org>
+
+	PR classpath/31302:
+	* gnu/javax/net/ssl/provider/SSLSocketImpl.java (SSLSocketImpl):
+	Always make a new socket.
+	(bind, connect, getInetAddress, getLocalAddress, getPort,
+	getLocalPort, getRemoteSocketAddress, getLocalSocketAddress,
+	setTcpNoDelay, getTcpNoDelay, setSoLinger, getSoLinger,
+	setOOBInline, getOOBInline, setSoTimeout, getSoTimeout,
+	setSendBufferSize, getSendBufferSize, setReceiveBufferSize,
+	getReceiveBufferSize, setKeepAlive, getKeepAlive, setTrafficClass,
+	getTrafficClass, setReuseAddress, getReuseAddress, close,
+	shutdownInput, shutdownOutput, isConnected, isBound, isClosed,
+	isInputShutdown, isOutputShutdown): Always use
+	'underlyingSocket'.
+
+2007-03-27  Tom Tromey  <tromey@redhat.com>
+
+	PR classpath/31303:
+	* external/sax/org/xml/sax/helpers/XMLReaderFactory.java
+	(createXMLReader): Code in Classpath default.
+
+2007-03-26  Tom Tromey  <tromey@redhat.com>
+
+	* doc/cp-tools.texinfo (gcjh Tool): Added more text.
+	(rmid Tool): Likewise.
+
+2007-03-25  Dalibor Topic  <robilad@kaffe.org>
+
+	* doc/cp-tools.texinfo: Fix node ordering.
+
+2007-03-19  Matthias Klose  <doko@ubuntu.com>
+
+	* doc/Makefile.am: Build a gcjh(1) man page.
+	* doc/cp-tools.texinfo: Add documentation for gcjh.
+
+2007-03-26  Stepan Kasal  <skasal@redhat.com>
+
+	* tools/gnu/classpath/tools/javah/Main.java (cniOrJniSeen): New
+	field.
+	(getParser): Use new field.
+
+2007-03-17  Thomas Fitzsimmons  <fitzsim@redhat.com>
+
+	* resource/com/sun/tools/javac/messages.properties
+	(Main.FailedToRead, Main.MalformedURL, Main.FailedToLoad): Clarify
+	messages for when --with-ecj-jar is not specified.
+	* configure.ac (FOUND_ECJ_JAR): Remove conditional.
+	* tools/Makefile.am: Build com.sun.tools.javac package
+	unconditionally.
+	* configure, doc/api/Makefile.in, doc/Makefile.in,
+	examples/Makefile.in, external/jsr166/Makefile.in,
+	external/Makefile.in, external/relaxngDatatype/Makefile.in,
+	external/sax/Makefile.in, external/w3c_dom/Makefile.in,
+	include/Makefile.in, lib/Makefile.in, Makefile.in,
+	native/fdlibm/Makefile.in, native/jawt/Makefile.in,
+	native/jni/classpath/Makefile.in,
+	native/jni/gconf-peer/Makefile.in,
+	native/jni/gtk-peer/Makefile.in, native/jni/java-io/Makefile.in,
+	native/jni/java-lang/Makefile.in, native/jni/java-net/Makefile.in,
+	native/jni/java-nio/Makefile.in, native/jni/java-util/Makefile.in,
+	native/jni/Makefile.in, native/jni/midi-alsa/Makefile.in,
+	native/jni/midi-dssi/Makefile.in,
+	native/jni/native-lib/Makefile.in, native/jni/qt-peer/Makefile.in,
+	native/jni/xmlj/Makefile.in, native/Makefile.in,
+	native/plugin/Makefile.in, resource/Makefile.in,
+	scripts/Makefile.in, tools/Makefile.in: Regenerate.
+	* tools/classes/com/sun/tools/javac: New directory.
+
+2007-03-16  Tom Tromey  <tromey@redhat.com>
+
+	* tools/gnu/classpath/tools/javah/Main.java (run): Use class'
+	name in File case.
+
+2007-03-16  Tom Tromey  <tromey@redhat.com>
+
+	* tools/gnu/classpath/tools/javah/JniStubPrinter.java
+	(printClass): Added filename argument.
+	* tools/gnu/classpath/tools/javah/JniIncludePrinter.java
+	(printClass): Added filename argument.
+	* tools/gnu/classpath/tools/javah/CniIncludePrinter.java
+	(printClass): Use user's file name.
+	* tools/gnu/classpath/tools/javah/CniStubPrinter.java
+	(printClass): Use user's file name.
+	* tools/gnu/classpath/tools/javah/Printer.java (printClass): Added
+	filename argument.
+	* tools/gnu/classpath/tools/javah/Main.java (getParser): Fix '-v'
+	argument order.
+	(writeHeaders): Use a HashMap.
+	(run): Put class name into HashMap for writeHeaders.
+
+2007-03-02  Mario Torre  <neugens@limasoftware.net>
+
+	PR classpath/31017:
+	committed for Petteri RÃ¤ty <betelgeuse@gentoo.org>
+	* configure.ac: fix broken build for gcj browser plugin
+
+2007-02-20  Jakub Jelinek  <jakub@redhat.com>
+
+	* java/util/Date.java (parse): Properly parse 09:01:02 as
+	hours/minutes/seconds, not as hours/minutes/year.
+	* java/util/SimpleTimeZone.java (SimpleTimeZone): Simplify
+	{start,end}TimeMode constructor by calling shorter constructor,
+	set {start,end}TimeMode fields after it returns.
+	(setStartRule): Don't adjust startTime into WALL_TIME.  Set
+	startTimeMode to WALL_TIME.
+	(endStartRule): Similarly.
+	(getOffset): Handle properly millis + dstOffset overflowing into the
+	next day.  Adjust startTime resp. endTime based on startTimeMode
+	resp. endTimeMode.
+	* java/util/TimeZone.java (zoneinfo_dir, availableIDs, aliases0): New
+	static fields.
+	(timezones): Remove synchronized keyword.  Set zoneinfo_dir.
+	If non-null, set up aliases0 and don't put anything into
+	timezones0.
+	(defaultZone): Call getTimeZone instead of timezones().get.
+	(getDefaultTimeZone): Fix parsing of EST5 or EST5EDT6.  Use
+	getTimeZoneInternal instead of timezones().get.
+	(parseTime): Parse correctly hour:minute.
+	(getTimeZoneInternal): New private method.
+	(getTimeZone): Do the custom ID checking first, canonicalize
+	ID for custom IDs as required by documentation.  Call
+	getTimeZoneInternal to handle the rest.
+	(getAvailableIDs(int)): Add locking.  Handle zoneinfo_dir != null.
+	(getAvailableIDs(File,String,ArrayList)): New private method.
+	(getAvailableIDs()): Add locking.  Handle zoneinfo_dir != null.
+	* gnu/java/util/ZoneInfo.java: New file.
+
 2006-10-14  Edwin Steiner  <edwin.steiner@gmx.net>
 
 	PR classpath/28652:
Index: libjava/classpath/ChangeLog.gcj
===================================================================
--- libjava/classpath/ChangeLog.gcj	(revision 122231)
+++ libjava/classpath/ChangeLog.gcj	(working copy)
@@ -1,3 +1,70 @@
+2007-04-25  Andrew Haley  <aph@redhat.com>
+
+        * java/io/ObjectStreamClass.java (ensureFieldsSet): New method.
+        (setFields): call ensureFieldsSet.
+        (fieldsSet): New field.
+        * java/io/ObjectOutputStream.java (writeFields): Call
+        osc.ensureFieldsSet().
+
+        * java/io/ObjectInputStream.java (parseContent): Assign the handle
+        for a PROXYCLASSDESC immediately after reading the marker.
+
+2007-03-09  Gary Benson  <gbenson@redhat.com>
+	    Chris Burdess  <dog@gnu.org>
+
+	PR classpath/30831
+	* gnu/xml/dom/ls/SAXEventSink.java: Only set extended document
+	properties when reader is available.
+
+2007-03-08  Gary Benson  <gbenson@redhat.com>
+
+	PR classpath/30983:
+	* gnu/xml/dom/ls/DomLSParser.java (getInputSource):
+	Do not use the entity resolver to resolve the top-level document.
+
+2007-03-05  Matthias Klose  <doko@ubuntu.com>
+
+	* doc/Makefile.am(man_MANS): Add $(TOOLS_MANFILES).
+	* doc/Makefile.in: Regenerate.
+
+2007-03-06  Matthias Klose  <doko@ubuntu.com>
+
+	* doc/Makefile.am(gkeytool.pod): Don't use sed -i.
+	* doc/Makefile.in: Regenerate.
+
+2007-03-07  Gary Benson  <gbenson@redhat.com>
+
+	PR classpath/30906:
+	* resource/META-INF/services/org.w3c.dom.DOMImplementationSourceList:
+	New file.
+
+2007-03-06  Tom Tromey  <tromey@redhat.com>
+
+	* tools/gnu/classpath/tools/javah/Main.java (getName): New
+	method.
+	(getParser): Now protected.  Use getName.  Add '-v' alias for
+	--verbose.
+	(postParse): New method.
+	(run): Now protected.  Use postParse.
+	* tools/gnu/classpath/tools/javah/GcjhMain.java: New file.
+
+2007-02-20  Matthias Klose  <doko@ubuntu.com>
+
+	* Merge doc update from classpath HEAD.
+	* doc/texi2pod.pl: Not imported.
+	* doc/Makefile.am: Use GCC's texi2pod.pl
+	* doc/Makefile.in: Regenerate.
+
+2007-02-26  Jakub Jelinek  <jakub@redhat.com>
+
+	* java/util/TimeZone.java (getDefaultDisplayName): Don't
+	check if TimeZone is instanceof SimpleTimeZone.
+
+2007-02-22  Gary Benson  <gbenson@redhat.com>
+
+	* java/util/GregorianCalendar.java,
+	(add): Don't set fields directly anymore. Use set()
+
 2007-02-20  Gary Benson  <gbenson@redhat.com>
 
 	* javax/management/MBeanServer.java: Updated.
Index: libjava/classpath/examples/Makefile.in
===================================================================
--- libjava/classpath/examples/Makefile.in	(revision 122231)
+++ libjava/classpath/examples/Makefile.in	(working copy)
@@ -127,6 +127,7 @@
 ECHO_N = @ECHO_N@
 ECHO_T = @ECHO_T@
 ECJ = @ECJ@
+ECJ_JAR = @ECJ_JAR@
 EGREP = @EGREP@
 ENABLE_LOCAL_SOCKETS_FALSE = @ENABLE_LOCAL_SOCKETS_FALSE@
 ENABLE_LOCAL_SOCKETS_TRUE = @ENABLE_LOCAL_SOCKETS_TRUE@
Index: libjava/include/Makefile.in
===================================================================
--- libjava/include/Makefile.in	(revision 122231)
+++ libjava/include/Makefile.in	(working copy)
@@ -81,6 +81,8 @@
 AMDEP_FALSE = @AMDEP_FALSE@
 AMDEP_TRUE = @AMDEP_TRUE@
 AMTAR = @AMTAR@
+ANONVERSCRIPT_FALSE = @ANONVERSCRIPT_FALSE@
+ANONVERSCRIPT_TRUE = @ANONVERSCRIPT_TRUE@
 AR = @AR@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
@@ -267,7 +269,6 @@
 build = @build@
 build_alias = @build_alias@
 build_cpu = @build_cpu@
-build_libsubdir = @build_libsubdir@
 build_os = @build_os@
 build_subdir = @build_subdir@
 build_vendor = @build_vendor@
Index: libjava/include/java-interp.h
===================================================================
--- libjava/include/java-interp.h	(revision 122231)
+++ libjava/include/java-interp.h	(working copy)
@@ -183,7 +183,7 @@
   }
 
   // return the method's invocation pointer (a stub).
-  void *ncode ();
+  void *ncode (jclass);
   void compile (const void * const *);
 
   static void run_normal (ffi_cif*, void*, ffi_raw*, void*);
@@ -250,6 +250,7 @@
   _Jv_MethodBase **interpreted_methods;
   _Jv_ushort     *field_initializers;
   jstring source_file_name;
+  _Jv_ClosureList **closures;
 
   friend class _Jv_ClassReader;
   friend class _Jv_InterpMethod;
@@ -298,7 +299,7 @@
   // This function is used when making a JNI call from the interpreter.
   static void call (ffi_cif *, void *, ffi_raw *, void *);
 
-  void *ncode ();
+  void *ncode (jclass);
 
   friend class _Jv_ClassReader;
   friend class _Jv_InterpreterEngine;
Index: libjava/include/jvm.h
===================================================================
--- libjava/include/jvm.h	(revision 122231)
+++ libjava/include/jvm.h	(working copy)
@@ -288,7 +288,7 @@
  						    _Jv_Utf8Const *method_signature,
 						    jclass *found_class,
 						    bool check_perms = true);
-  static void *create_error_method(_Jv_Utf8Const *);
+  static void *create_error_method(_Jv_Utf8Const *, jclass);
 
   /* The least significant bit of the signature pointer in a symbol
      table is set to 1 by the compiler if the reference is "special",
@@ -341,6 +341,10 @@
 /* Allocate space for a new non-Java object, which does not have the usual 
    Java object header but may contain pointers to other GC'ed objects.  */
 void *_Jv_AllocRawObj (jsize size) __attribute__((__malloc__));
+/* Allocate a double-indirect pointer to a _Jv_ClosureList such that
+   the _Jv_ClosureList gets automatically finalized when it is no
+   longer reachable, not even by other finalizable objects.  */
+_Jv_ClosureList **_Jv_ClosureListFinalizer (void) __attribute__((__malloc__));
 /* Explicitly throw an out-of-memory exception.	*/
 void _Jv_ThrowNoMemory() __attribute__((__noreturn__));
 /* Allocate an object with a single pointer.  The first word is reserved
Index: libjava/include/execution.h
===================================================================
--- libjava/include/execution.h	(revision 122231)
+++ libjava/include/execution.h	(working copy)
@@ -1,6 +1,6 @@
 // execution.h - Execution engines. -*- c++ -*-
 
-/* Copyright (C) 2004, 2006  Free Software Foundation
+/* Copyright (C) 2004, 2006, 2007  Free Software Foundation
 
    This file is part of libgcj.
 
@@ -29,6 +29,7 @@
   _Jv_ResolvedMethod *(*resolve_method) (_Jv_Method *, jclass,
 					 jboolean);
   void (*post_miranda_hook) (jclass);
+  _Jv_ClosureList **(*get_closure_list) (jclass);
 };
 
 // This handles gcj-compiled code except that compiled with
@@ -77,6 +78,11 @@
     // Not needed.
   }
 
+  static _Jv_ClosureList **do_get_closure_list (jclass)
+  {
+    return NULL;
+  }
+
   _Jv_CompiledEngine ()
   {
     unregister = do_unregister;
@@ -87,6 +93,7 @@
     create_ncode = do_create_ncode;
     resolve_method = do_resolve_method;
     post_miranda_hook = do_post_miranda_hook;
+    get_closure_list = do_get_closure_list;
   }
 
   // These operators make it so we don't have to link in libstdc++.
@@ -105,6 +112,7 @@
 {
 public:
   void **field_initializers;
+  _Jv_ClosureList **closures;
 };
 
 // This handles gcj-compiled code compiled with -findirect-classes.
@@ -114,14 +122,32 @@
   {
     allocate_static_fields = do_allocate_static_fields;
     allocate_field_initializers = do_allocate_field_initializers;
+    get_closure_list = do_get_closure_list;
   }
   
+  static _Jv_IndirectCompiledClass *get_aux_info (jclass klass)
+  {
+    _Jv_IndirectCompiledClass *aux =
+      (_Jv_IndirectCompiledClass*)klass->aux_info;
+    if (!aux)
+      {
+	aux = (_Jv_IndirectCompiledClass*)
+	  _Jv_AllocRawObj (sizeof (_Jv_IndirectCompiledClass));
+	klass->aux_info = aux;
+      }
+
+    return aux;
+  }
+
   static void do_allocate_field_initializers (jclass klass)
   {
-    _Jv_IndirectCompiledClass *aux 
-      =  (_Jv_IndirectCompiledClass*)
-        _Jv_AllocRawObj (sizeof (_Jv_IndirectCompiledClass));
-    klass->aux_info = aux;
+    _Jv_IndirectCompiledClass *aux = get_aux_info (klass);
+    if (!aux)
+      {
+	aux = (_Jv_IndirectCompiledClass*)
+	  _Jv_AllocRawObj (sizeof (_Jv_IndirectCompiledClass));
+	klass->aux_info = aux;
+      }
 
     aux->field_initializers = (void **)_Jv_Malloc (klass->field_count 
 						   * sizeof (void*));    
@@ -172,6 +198,16 @@
       } 
     _Jv_Free (aux->field_initializers);
   }
+
+  static _Jv_ClosureList **do_get_closure_list (jclass klass)
+  {
+    _Jv_IndirectCompiledClass *aux = get_aux_info (klass);
+
+    if (!aux->closures)
+      aux->closures = _Jv_ClosureListFinalizer ();
+
+    return aux->closures;
+  }
 };
 
 
@@ -203,6 +239,8 @@
 
   static void do_post_miranda_hook (jclass);
 
+  static _Jv_ClosureList **do_get_closure_list (jclass klass);
+
   _Jv_InterpreterEngine ()
   {
     unregister = do_unregister;
@@ -213,6 +251,7 @@
     create_ncode = do_create_ncode;
     resolve_method = do_resolve_method;
     post_miranda_hook = do_post_miranda_hook;
+    get_closure_list = do_get_closure_list;
   }
 
   // These operators make it so we don't have to link in libstdc++.
Index: libjava/posix.cc
===================================================================
--- libjava/posix.cc	(revision 122231)
+++ libjava/posix.cc	(working copy)
@@ -139,6 +139,10 @@
   if (! tmpdir)
     tmpdir = "/tmp";
   SET ("java.io.tmpdir", tmpdir);
+  const char *zoneinfodir = ::getenv("TZDATA");
+  if (! zoneinfodir)
+    zoneinfodir = "/usr/share/zoneinfo";
+  SET ("gnu.java.util.zoneinfo.dir", zoneinfodir);
 }
 
 static inline void
Index: libjava/ChangeLog
===================================================================
--- libjava/ChangeLog	(revision 122231)
+++ libjava/ChangeLog	(working copy)
@@ -1,3 +1,345 @@
+2007-04-23  Tom Tromey  <tromey@redhat.com>
+
+	http://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=236895
+	* link.cc (resolve_method_entry): Disable method argument type
+	check.
+
+2007-02-09  Richard Henderson  <rth@redhat.com>
+
+	* sysdep/alpha/locks.h (read_barrier): New.
+
+2007-04-04  Tania Bento  <tbento@redhat.com>
+
+	* java/text/DecimalFormatSymbols.java: Added the year 2007 to
+	Copyright information and introduced new variable, currency.
+	(DecimalFormatSymbols(Locale)): Define currency and intlCurrencySymbol
+	to "XXX", currencySymbol to "?" and localCurrency appropriately.
+	(getCurrency): Fixed documentation and return the value of currency.
+	(setCurrency): Fixed documentation and update the value of currency.
+	(setInternationalCurrencySymbol): Fixed documentation and update the
+	value of currency.
+	* java/util/Currency.java: Introduced two new variables, properties
+	and fractionDigits. In the static block, a properties object is
+	created and the currency resource is loaded.
+	(Currency(Locale)): fractionDigits is defined.
+	(Currency(String)): New method.
+	(getDefaultFractionDigits): Return the value of fractionDigits.
+	(getInstance(String)): Check if String is equal to "XXX".
+
+2007-04-02  Tom Tromey  <tromey@redhat.com>
+
+	http://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=205157
+	* gnu/java/nio/channels/natFileChannelPosix.cc (mapImpl): Extend
+	file, when writing, if it is too short.
+
+2007-04-02  Tom Tromey  <tromey@redhat.com>
+
+	https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=233406
+	* gnu/java/net/natPlainSocketImplPosix.cc (create): Return if
+	already created.
+	* gnu/java/net/PlainSocketImpl.java (getLocalAddress): Handle case
+	where localport is -1.
+	(create): Now public.
+	* gnu/java/nio/SocketChannelImpl.java (SocketChannelImpl): Call
+	'create' on the socket.
+
+2007-04-02  Andrew Haley  <aph@redhat.com>
+
+	* java/lang/reflect/natVMProxy.cc (run_proxy): Use
+	_Jv_LookupProxyMethod to find the Method.
+	If parameter_types->length == 0, pass a null paramameter list,
+	not a zero-length parameter list.
+	* java/lang/natClass.cc (_Jv_LookupProxyMethod): New function.
+	* java/lang/Class.h (_Jv_LookupProxyMethod): Declare.
+
+2007-03-29  Tom Tromey  <tromey@redhat.com>
+
+	PR libgcj/29869:
+	* java/util/logging/LogManager.java (readConfiguration): Handle
+	comma-separated 'handlers'.  Don't try to add a non-existing
+	handler.
+
+2007-03-07  Alexandre Oliva  <aoliva@redhat.com>
+
+	* include/jvm.h (_Jv_ClosureListFinalizer): New.
+	(_Jv_Linker::create_error_method): Adjust.
+	* boehm.cc (_Jv_ClosureListFinalizer): New.
+	* nogc.cc (_Jv_ClosureListFinalizer): New.
+	* java/lang/Class.h (class _Jv_ClosureList): New.
+	(class java::lang::Class): Declare it as friend.
+	* java/lang/natClass.cc (_Jv_ClosureList::releaseClosures): New.
+	(_Jv_ClosureList::registerClousure): New.
+	* include/execution.h (_Jv_ExecutionEngine): Add get_closure_list.
+	(_Jv_CompiledEngine::do_get_closure_list): New.
+	(_Jv_CompiledEngine::_Jv_CompiledEngine): Use it.
+	(_Jv_IndirectCompiledClass): Add closures.
+	(_Jv_IndirectCompiledEngine::get_aux_info): New.
+	(_Jv_IndirectCompiledEngine::do_allocate_field_initializers): Use
+	it.
+	(_Jv_IndirectCompiledEngine::do_get_closure_list): New.
+	(_Jv_IndirectCompiledEngine::_Jv_IndirectCompiledEngine): Use it.
+	(_Jv_InterpreterEngine::do_get_closure_list): Declare.
+	(_Jv_InterpreterEngine::_Jv_InterpreterEngine): Use it.
+	* interpret.cc (FFI_PREP_RAW_CLOSURE): Use _loc variants.
+	(node_closure): Add closure list.
+	(_Jv_InterpMethod::ncode): Add jclass argument.  Use
+	ffi_closure_alloc and the separate code pointer.  Register the
+	closure for finalization.
+	(_Jv_JNIMethod::ncode): Likewise.
+	(_Jv_InterpreterEngine::do_create_ncode): Pass klass to ncode.
+	(_Jv_InterpreterEngine::do_get_closure_list): New.
+	* include/java-interp.h (_Jv_InterpMethod::ncode): Adjust.
+	(_Jv_InterpClass): Add closures field.
+	(_Jv_JNIMethod::ncode): Adjust.
+	* defineclass.cc (_Jv_ClassReader::handleCodeAttribute): Adjust.
+	(_Jv_ClassReader::handleMethodsEnd): Likewise.
+	* link.cc (struct method_closure): Add closure list.
+	(_Jv_Linker::create_error_method): Add jclass argument.  Use
+	ffi_closure_alloc and the separate code pointer.  Register the
+	closure for finalization.
+	(_Jv_Linker::link_symbol_table): Remove outdated comment about
+	sharing of otable and atable.  Adjust.
+	* java/lang/reflect/natVMProxy.cc (ncode_closure): Add closure
+	list.
+	(ncode): Add jclass argument.  Use ffi_closure_alloc and the
+	separate code pointer.  Register the closure for finalization.
+	(java::lang::reflect::VMProxy::generateProxyClass): Adjust.
+	* testsuite/libjava.jar/TestClosureGC.java: New.
+	* testsuite/libjava.jar/TestClosureGC.out: New.
+	* testsuite/libjava.jar/TestClosureGC.xfail: New.
+	* testsuite/libjava.jar/TestClosureGC.jar: New.
+
+2007-03-23  Gary Benson  <gbenson@redhat.com>
+
+	* link.cc (_Jv_Linker::resolve_method_entry):
+	Ensure that the argument types and the return type of the
+	found method match those expected by the calling method.
+
+2007-03-14  Thomas Fitzsimmons  <fitzsim@redhat.com>
+
+	* Makefile.am (AM_CXXFLAGS): Define ECJ_JAR_FILE.
+	* classpath/configure.ac: Add --with-ecj-jar configure option.
+	* classpath/gnu/classpath/Configuration.java.in (ECJ_JAR): New
+	field.
+	* classpath/INSTALL: Document --with-ecj-jar configure option and
+	ecj jar requirement for com.sun.tools.javac support.
+	* classpath/tools/Makefile.am: Build decendents of com and sun
+	directories.
+	* configure.ac: Substitute ECJ_JAR in stub Configuration.java.
+	* gnu/classpath/Configuration.java,
+	gnu/classpath/natConfiguration.cc (ecj): New method.
+	(ECJ_JAR): New field.
+	* scripts/makemake.tcl (scan_packages): Add com directory.
+	* sources.am (property_files): Add
+	classpath/resource/sun/rmi/rmic/messages.properties and
+	classpath/resource/com/sun/tools/javac/messages.properties.
+	* classpath/resource/com, classpath/resource/com/sun,
+	classpath/resource/com/sun/tools,
+	classpath/resource/com/sun/tools/javac, classpath/resource/sun,
+	classpath/resource/sun/rmi, classpath/resource/sun/rmi/rmic,
+	classpath/tools/classes/com, classpath/tools/classes/com/sun,
+	classpath/tools/classes/com/sun/javadoc,
+	classpath/tools/classes/com/sun/tools,
+	classpath/tools/classes/com/sun/tools/doclets,
+	classpath/tools/classes/sun, classpath/tools/classes/sun/rmi,
+	classpath/tools/classes/sun/rmi/rmic, classpath/tools/com,
+	classpath/tools/com/sun, classpath/tools/com/sun/javadoc,
+	classpath/tools/com/sun/tools,
+	classpath/tools/com/sun/tools/doclets,
+	classpath/tools/com/sun/tools/javac, classpath/tools/sun,
+	classpath/tools/sun/rmi, classpath/tools/sun/rmi/rmic: New
+	directories.
+	* classpath/resource/com/sun/tools/javac/messages.properties,
+	classpath/resource/sun/rmi/rmic/messages.properties,
+	classpath/tools/classes/com/sun/javadoc/ClassDoc.class,
+	classpath/tools/classes/com/sun/javadoc/ConstructorDoc.class,
+	classpath/tools/classes/com/sun/javadoc/Doc.class,
+	classpath/tools/classes/com/sun/javadoc/DocErrorReporter.class,
+	classpath/tools/classes/com/sun/javadoc/Doclet.class,
+	classpath/tools/classes/com/sun/javadoc/ExecutableMemberDoc.class,
+	classpath/tools/classes/com/sun/javadoc/FieldDoc.class,
+	classpath/tools/classes/com/sun/javadoc/MemberDoc.class,
+	classpath/tools/classes/com/sun/javadoc/MethodDoc.class,
+	classpath/tools/classes/com/sun/javadoc/PackageDoc.class,
+	classpath/tools/classes/com/sun/javadoc/ParamTag.class,
+	classpath/tools/classes/com/sun/javadoc/Parameter.class,
+	classpath/tools/classes/com/sun/javadoc/ProgramElementDoc.class,
+	classpath/tools/classes/com/sun/javadoc/RootDoc.class,
+	classpath/tools/classes/com/sun/javadoc/SeeTag.class,
+	classpath/tools/classes/com/sun/javadoc/SerialFieldTag.class,
+	classpath/tools/classes/com/sun/javadoc/SourcePosition.class,
+	classpath/tools/classes/com/sun/javadoc/Tag.class,
+	classpath/tools/classes/com/sun/javadoc/ThrowsTag.class,
+	classpath/tools/classes/com/sun/javadoc/Type.class,
+	classpath/tools/classes/com/sun/javadoc/TypeVariable.class,
+	classpath/tools/classes/com/sun/tools/doclets/Taglet.class,
+	classpath/tools/classes/sun/rmi/rmic/Main.class,
+	classpath/tools/classes/sun/rmi/rmic/Messages.class,
+	classpath/tools/com/sun/javadoc/ClassDoc.java,
+	classpath/tools/com/sun/javadoc/ConstructorDoc.java,
+	classpath/tools/com/sun/javadoc/Doc.java,
+	classpath/tools/com/sun/javadoc/DocErrorReporter.java,
+	classpath/tools/com/sun/javadoc/Doclet.java,
+	classpath/tools/com/sun/javadoc/ExecutableMemberDoc.java,
+	classpath/tools/com/sun/javadoc/FieldDoc.java,
+	classpath/tools/com/sun/javadoc/MemberDoc.java,
+	classpath/tools/com/sun/javadoc/MethodDoc.java,
+	classpath/tools/com/sun/javadoc/PackageDoc.java,
+	classpath/tools/com/sun/javadoc/ParamTag.java,
+	classpath/tools/com/sun/javadoc/Parameter.java,
+	classpath/tools/com/sun/javadoc/ProgramElementDoc.java,
+	classpath/tools/com/sun/javadoc/RootDoc.java,
+	classpath/tools/com/sun/javadoc/SeeTag.java,
+	classpath/tools/com/sun/javadoc/SerialFieldTag.java,
+	classpath/tools/com/sun/javadoc/SourcePosition.java,
+	classpath/tools/com/sun/javadoc/Tag.java,
+	classpath/tools/com/sun/javadoc/ThrowsTag.java,
+	classpath/tools/com/sun/javadoc/Type.java,
+	classpath/tools/com/sun/javadoc/TypeVariable.java,
+	classpath/tools/com/sun/tools/doclets/Taglet.java,
+	classpath/tools/com/sun/tools/javac/Main.java,
+	classpath/tools/com/sun/tools/javac/Messages.java,
+	classpath/tools/sun/rmi/rmic/Main.java,
+	classpath/tools/sun/rmi/rmic/Messages.java: New files.
+	* Makefile.in, classpath/Makefile.in, classpath/configure,
+	classpath/doc/Makefile.in, classpath/doc/api/Makefile.in,
+	classpath/examples/Makefile.in, classpath/external/Makefile.in,
+	classpath/external/jsr166/Makefile.in,
+	classpath/external/relaxngDatatype/Makefile.in,
+	classpath/external/sax/Makefile.in,
+	classpath/external/w3c_dom/Makefile.in,
+	classpath/include/Makefile.in, classpath/include/config.h.in,
+	classpath/lib/Makefile.in,
+	classpath/lib/gnu/classpath/Configuration.class,
+	classpath/native/Makefile.in, classpath/native/fdlibm/Makefile.in,
+	classpath/native/jawt/Makefile.in,
+	classpath/native/jni/Makefile.in,
+	classpath/native/jni/classpath/Makefile.in,
+	classpath/native/jni/gconf-peer/Makefile.in,
+	classpath/native/jni/gtk-peer/Makefile.in,
+	classpath/native/jni/java-io/Makefile.in,
+	classpath/native/jni/java-lang/Makefile.in,
+	classpath/native/jni/java-net/Makefile.in,
+	classpath/native/jni/java-nio/Makefile.in,
+	classpath/native/jni/java-util/Makefile.in,
+	classpath/native/jni/midi-alsa/Makefile.in,
+	classpath/native/jni/midi-dssi/Makefile.in,
+	classpath/native/jni/native-lib/Makefile.in,
+	classpath/native/jni/qt-peer/Makefile.in,
+	classpath/native/jni/xmlj/Makefile.in,
+	classpath/native/plugin/Makefile.in,
+	classpath/resource/Makefile.in, classpath/scripts/Makefile.in,
+	classpath/tools/Makefile.in, configure,
+	gnu/classpath/Configuration.h: Regenerate.
+
+2007-03-14  Jakub Jelinek  <jakub@redhat.com>
+
+	* Makefile.am (AM_MAKEFLAGS): Pass through mandir.
+	* Makefile.in: Rebuilt.
+
+2007-03-12  Marco Trudel  <mtrudel@gmx.ch>
+
+	* java/lang/natString.cc (getBytes (jstring enc)):
+	Fixed the loop for multiple cycles, Code cleanup
+
+2007-03-09  Tom Tromey  <tromey@redhat.com>
+
+	* sources.am, Makefile.in: Rebuilt.
+	* scripts/makemake.tcl (scan_directory): Allow service files to be
+	omitted.
+	Omit all XML-related service files.
+
+2007-03-07  Andrew Haley  <aph@redhat.com>
+
+	* libgcj_bc.c (JvRunMainName): Declare.
+
+2007-03-07  Gary Benson  <gbenson@redhat.com>
+
+	* sources.am, Makefile.in: Rebuilt.
+
+2007-03-06  Tom Tromey  <tromey@redhat.com>
+
+	* Makefile.in: Rebuilt.
+	* Makefile.am (bin_PROGRAMS): Added gcjh.
+	(gcjh_SOURCES, gcjh_LDFLAGS, gcjh_LINK, gcjh_LDADD,
+	gcjh_DEPENDENCIES): New variables.
+
+2007-03-05  Mark Wielaard  <mark@klomp.org>
+
+	* java/lang/Character.java: Re-merged with Classpath.
+	* java/lang/natString.cc (nativeCompareTo): Renamed from
+	compareTo.
+	* java/lang/StringBuilder.java: Re-merged with Classpath.
+	* java/lang/String.java: Re-merged with Classpath.
+	(nativeCompareTo): Renamed from compareTo.
+	* java/lang/StringBuffer.java: Re-merged with Classpath.
+	* jni.cc (_Jv_JNI_GetAnyMethodID): Split calls to append.
+
+2007-03-05  Andrew Haley  <aph@redhat.com>
+
+	* java/lang/reflect/natVMProxy.cc (ncode_closure.meth): Delete.
+	(generateProxyClass): Don't pass method to ncode.
+	(run_proxy): Call _Jv_GetReflectedMethod to find the proxy method.
+	* java/lang/reflect/Method.h: Rebuild.
+	* java/lang/reflect/Method.java (internalGetParameterTypes,
+	internalGetExceptionTypes): New methods.
+	* headers.txt (class java/lang/reflect/Method): Declare
+	_Jv_GetReflectedMethod.  Be its friend.
+	* java/lang/natClass.cc (_Jv_GetReflectedMethod): New method.
+	* java/lang/Class.h: Declare it.  Be its friend.
+
+2007-03-03  Andrew Haley  <aph@redhat.com>
+
+	* java/lang/natClass.cc (parseAnnotationElement): Correct long
+	annotations to read JV_CONSTANT_Long, not JV_CONSTANT_Double.
+
+2007-03-02  Andrew Haley  <aph@redhat.com>
+
+	* sun/reflect/annotation/AnnotationInvocationHandler.java:
+	Generify in a few places.
+	(equals): Rewrite to use invoke on local proxy.
+	(deepToString): Remove most of it.
+	(toString): Make nonstatic.
+	(arrayClone): Delete.
+	(coerce): New method.
+	(invoke): Rewrite to handle gcj's structures correctly.
+	* java/lang/natClass.cc (getDeclaredAnnotations): Fix test for
+	null loader.
+	* sources.am: Regenerate.
+	* Makefile.am: Likewise.	
+
+2007-03-02  Andrew Haley  <aph@redhat.com>
+
+	* sun/reflect/annotation/AnnotationInvocationHandler.java:
+	Whitespace only changes.
+
+2007-03-02  Andrew Haley  <aph@redhat.com>
+
+	* sun/reflect/annotation/AnnotationInvocationHandler.java: Moved
+	from Classpath to libgcj local.
+
+2007-02-22  Jakub Jelinek  <jakub@redhat.com>
+
+	PR libgcj/17002
+	PR classpath/28550
+	* java/util/VMTimeZone.java (getDefaultTimeZoneId): To read
+	/etc/localtime, use ZoneInfo.readTZFile instead of
+	VMTimeZone.readtzFile.  Get better timezone name for /etc/localtime,
+	either if it is a symlink or through /etc/sysconfig/clock.
+	(readSysconfigClockFile): New static method.
+	(readtzFile): Removed.
+	* java/lang/System.java: Add gnu.java.util.zoneinfo.dir to comments.
+	* posix.cc (_Jv_platform_initProperties): Set
+	gnu.java.util.zoneinfo.dir.
+	* sources.am (gnu_java_util_source_files): Add
+	classpath/gnu/java/util/ZoneInfo.java.
+	* Makefile.in: Regenerated.
+
+2007-02-22  Gary Benson  <gbenson@redhat.com>
+
+	* java/util/GregorianCalendar.java: Removed.
+	* sources.am, Makefile.in: Rebuilt.
+
 2007-02-16  David Daney  <ddaney@avtrex.com>
 
 	* java/lang/Thread.java (Thread(ThreadGroup, Runnable, String)): Pass
Index: libjava/testsuite/Makefile.in
===================================================================
--- libjava/testsuite/Makefile.in	(revision 122231)
+++ libjava/testsuite/Makefile.in	(working copy)
@@ -70,6 +70,8 @@
 AMDEP_FALSE = @AMDEP_FALSE@
 AMDEP_TRUE = @AMDEP_TRUE@
 AMTAR = @AMTAR@
+ANONVERSCRIPT_FALSE = @ANONVERSCRIPT_FALSE@
+ANONVERSCRIPT_TRUE = @ANONVERSCRIPT_TRUE@
 AR = @AR@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
@@ -256,7 +258,6 @@
 build = @build@
 build_alias = @build_alias@
 build_cpu = @build_cpu@
-build_libsubdir = @build_libsubdir@
 build_os = @build_os@
 build_subdir = @build_subdir@
 build_vendor = @build_vendor@
Index: libjava/testsuite/libjava.jar/TestClosureGC.java
===================================================================
--- libjava/testsuite/libjava.jar/TestClosureGC.java	(revision 0)
+++ libjava/testsuite/libjava.jar/TestClosureGC.java	(revision 124261)
@@ -0,0 +1,116 @@
+/* Verify that libffi closures aren't deallocated too early.
+
+   Copyright (C) 2007 Free Software Foundation, Inc
+   Contributed by Alexandre Oliva <aoliva@redhat.com>
+
+   If libffi closures are released too early, we lose.
+ */
+
+import java.util.HashSet;
+
+public class TestClosureGC {
+    public static String objId (Object obj) {
+	return obj + "/"
+	    + Integer.toHexString(obj.getClass().getClassLoader().hashCode());
+    }
+    public static class cld extends java.net.URLClassLoader {
+	static final Object obj = new cl0();
+	public cld () throws Exception {
+	    super(new java.net.URL[] { });
+	    /* System.out.println (objId (this) + " created"); */
+	}
+	public void finalize () {
+	    /* System.out.println (objId (this) + " finalized"); */
+	}
+	public String toString () {
+	    return this.getClass().getName() + "@"
+		+ Integer.toHexString (hashCode ());
+	}
+	public Class loadClass (String name) throws ClassNotFoundException {
+	    try {
+		java.io.InputStream IS = getSystemResourceAsStream
+		    (name + ".class");
+		int maxsz = 1024, readsz = 0;
+		byte buf[] = new byte[maxsz];
+		for(;;) {
+		    int readnow = IS.read (buf, readsz, maxsz - readsz);
+		    if (readnow <= 0)
+			break;
+		    readsz += readnow;
+		    if (readsz == maxsz) {
+			byte newbuf[] = new byte[maxsz *= 2];
+			System.arraycopy (buf, 0, newbuf, 0, readsz);
+			buf = newbuf;
+		    }
+		}
+		return defineClass (name, buf, 0, readsz);
+	    } catch (Exception e) {
+		return super.loadClass (name);
+	    }
+	}
+    }
+    public static class cl0 {
+	public cl0 () {
+	    /* System.out.println (objId (this) + " created"); */
+	}
+	public void finalize () {
+	    /* System.out.println (objId (this) + " finalized"); */
+	}
+    }
+    public static class cl1 {
+	final HashSet hs;
+	static final Object obj = new cl0();
+	public cl1 (final HashSet hs) {
+	    this.hs = hs;
+	    /* System.out.println (objId (this) + " created"); */
+	}
+	public void finalize () {
+	    /* System.out.println (objId (this) + " finalized"); */
+	}
+    }
+    public static class cl2 {
+	final HashSet hs;
+	static final Object obj = new cl0();
+	public cl2 (final HashSet hs) {
+	    this.hs = hs;
+	    /* System.out.println (objId (this) + " created"); */
+	}
+	public void finalize () {
+	    /* System.out.println (objId (this) + " finalized"); */
+	    hs.add(this);
+	    hs.add(new cl0());
+	}
+    }
+    static final HashSet hs = new HashSet();
+    static final Object obj = new cl0();
+    public static void main(String[] argv) throws Exception {
+	{
+	    Class[] hscs = { HashSet.class };
+	    Object[] hsos = { hs };
+	    new cld().loadClass ("TestClosureGC$cl1").
+		getConstructor (hscs).newInstance (hsos);
+	    new cld().loadClass ("TestClosureGC$cl2").
+		getConstructor (hscs).newInstance (hsos);
+	    new cld().loadClass ("TestClosureGC$cl1").
+		getConstructor (hscs).newInstance (hsos);
+	    new cld().loadClass ("TestClosureGC$cl1").
+		getConstructor (hscs).newInstance (hsos);
+	}
+	for (int i = 1; i <= 5; i++) {
+	    /* System.out.println ("Will run GC and finalization " + i); */
+	    System.gc ();
+	    Thread.sleep (100);
+	    System.runFinalization ();
+	    Thread.sleep (100);
+	    if (hs.isEmpty ())
+		continue;
+	    java.util.Iterator it = hs.iterator ();
+	    while (it.hasNext ()) {
+		Object obj = it.next();
+		/* System.out.println (objId (obj) + " in ht, removing"); */
+		it.remove ();
+	    }
+	}
+	System.out.println ("ok");
+    }
+}
Index: libjava/testsuite/libjava.jar/TestClosureGC.xfail
===================================================================
--- libjava/testsuite/libjava.jar/TestClosureGC.xfail	(revision 0)
+++ libjava/testsuite/libjava.jar/TestClosureGC.xfail	(revision 124261)
@@ -0,0 +1 @@
+main=TestClosureGC
Index: libjava/testsuite/libjava.jar/TestClosureGC.out
===================================================================
--- libjava/testsuite/libjava.jar/TestClosureGC.out	(revision 0)
+++ libjava/testsuite/libjava.jar/TestClosureGC.out	(revision 124261)
@@ -0,0 +1 @@
+ok
Index: libjava/jni.cc
===================================================================
--- libjava/jni.cc	(revision 122231)
+++ libjava/jni.cc	(working copy)
@@ -750,7 +750,8 @@
 
       java::lang::StringBuffer *name_sig =
         new java::lang::StringBuffer (JvNewStringUTF (name));
-      name_sig->append ((jchar) ' ')->append (JvNewStringUTF (s));
+      name_sig->append ((jchar) ' ');
+      name_sig->append (JvNewStringUTF (s));
       env->ex = new java::lang::NoSuchMethodError (name_sig->toString ());
     }
   catch (jthrowable t)
Index: libjava/sun/reflect/annotation/AnnotationInvocationHandler.java
===================================================================
--- libjava/sun/reflect/annotation/AnnotationInvocationHandler.java	(revision 0)
+++ libjava/sun/reflect/annotation/AnnotationInvocationHandler.java	(revision 124261)
@@ -0,0 +1,441 @@
+/* sun.reflect.annotation.AnnotationInvocationHandler
+   Copyright (C) 2006, 2007
+   Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package sun.reflect.annotation;
+
+import java.io.Serializable;
+import java.lang.annotation.Annotation;
+import java.lang.annotation.AnnotationTypeMismatchException;
+import java.lang.annotation.IncompleteAnnotationException;
+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Method;
+import java.lang.reflect.Proxy;
+import java.lang.reflect.Array;
+import java.util.Arrays;
+import java.util.Iterator;
+import java.util.Map;
+
+/**
+ * This class exists for serialization compatibility with the JDK.
+ * VMs can choose to implement annotations by constructing proxies
+ * with this invocation handler, but that is not required.
+ * If a different strategy for proxy objects is chosen, they can
+ * have a writeReplace method to substitute a Proxy based on this
+ * invocation handler is used for serialization.
+ */
+public final class AnnotationInvocationHandler
+  implements InvocationHandler, Serializable
+{
+  private static final long serialVersionUID = 6182022883658399397L;
+  private final Class<? extends Annotation> type;
+  private final Map<String, ?> memberValues;
+
+  /**
+   * Construct a new invocation handler for an annotation proxy.
+   * Note that the VM is responsible for filling the memberValues map
+   * with the default values of all the annotation members.
+   */
+  public AnnotationInvocationHandler(Class<? extends Annotation> type, Map memberValues)
+  {
+    this.type = type;
+    this.memberValues = (Map<String, ?>)memberValues;
+  }
+
+  public static Annotation create(Class<? extends Annotation> type, Map memberValues)
+  {
+    for (Method m : type.getDeclaredMethods())
+      {
+	String name = m.getName();
+	if (! memberValues.containsKey(name))
+	  {
+	    // FIXME: what to do about exceptions here?
+	    memberValues.put(name, m.getDefaultValue());
+	  }
+      }
+    AnnotationInvocationHandler handler
+      = new AnnotationInvocationHandler(type, memberValues);
+    return (Annotation) Proxy.newProxyInstance(type.getClassLoader(),
+					       new Class[] { type },
+					       handler);
+  }
+
+  /**
+   * Compare an instance of AnnotationInvocationHandler with another object.
+   * Note that the other object does not have to be an
+   * AnnotationInvocationHandler, any implementation of the annotation
+   * interface is allowed to be compared for equality.
+   * Note that this makes the equals method asymmetric, but this behavior
+   * is specified by Annotation.equals and identical to the JDK.
+   *
+   * This method is public for use by other parts of the VM. Some VMs
+   * (can) use different representations of annotations that reuse this
+   * method.
+   */
+  public boolean equals(Object proxy, Object other)
+  {
+    if (type.isInstance(other))
+      {
+	try
+	  {
+	    Method[] methods = type.getDeclaredMethods();
+	    if (methods.length == memberValues.size())
+	      {
+		for (int i = 0; i < methods.length; i++)
+		  {
+		    String key = methods[i].getName();
+		    Object val = methods[i].invoke(other, (Object[])null);
+		    Object thisVal
+		      = invoke(proxy,
+			       methods[i],
+			       (Object[])null);
+		    if (! deepEquals(thisVal, val))
+		      {
+			return false;
+		      }
+		  }
+		return true;
+	      }
+	  }
+	catch (Throwable _)
+	  {
+	    // Ignore exception, like the JDK
+	  }
+      }
+    return false;
+  }
+
+  private static boolean deepEquals(Object o1, Object o2)
+  {
+    if (o1 == o2)
+      return true;
+
+    if (o1 == null || o2 == null)
+      return false;
+
+    if (o1 instanceof boolean[] && o2 instanceof boolean[])
+      return Arrays.equals((boolean[]) o1, (boolean[]) o2);
+
+    if (o1 instanceof byte[] && o2 instanceof byte[])
+      return Arrays.equals((byte[]) o1, (byte[]) o2);
+
+    if (o1 instanceof char[] && o2 instanceof char[])
+      return Arrays.equals((char[]) o1, (char[]) o2);
+
+    if (o1 instanceof short[] && o2 instanceof short[])
+      return Arrays.equals((short[]) o1, (short[]) o2);
+
+    if (o1 instanceof int[] && o2 instanceof int[])
+      return Arrays.equals((int[]) o1, (int[]) o2);
+
+    if (o1 instanceof float[] && o2 instanceof float[])
+      return Arrays.equals((float[]) o1, (float[]) o2);
+
+    if (o1 instanceof long[] && o2 instanceof long[])
+      return Arrays.equals((long[]) o1, (long[]) o2);
+
+    if (o1 instanceof double[] && o2 instanceof double[])
+      return Arrays.equals((double[]) o1, (double[]) o2);
+
+    if (o1 instanceof Object[] && o2 instanceof Object[])
+      return Arrays.equals((Object[]) o1, (Object[]) o2);
+
+    return o1.equals(o2);
+  }
+
+  private static int deepHashCode(Object obj)
+  {
+    if (obj instanceof boolean[])
+      return Arrays.hashCode((boolean[]) obj);
+
+    if (obj instanceof byte[])
+      return Arrays.hashCode((byte[]) obj);
+
+    if (obj instanceof char[])
+      return Arrays.hashCode((char[]) obj);
+
+    if (obj instanceof short[])
+      return Arrays.hashCode((short[]) obj);
+
+    if (obj instanceof int[])
+      return Arrays.hashCode((int[]) obj);
+
+    if (obj instanceof float[])
+      return Arrays.hashCode((float[]) obj);
+
+    if (obj instanceof long[])
+      return Arrays.hashCode((long[]) obj);
+
+    if (obj instanceof double[])
+      return Arrays.hashCode((double[]) obj);
+
+    if (obj instanceof Object[])
+      return Arrays.hashCode((Object[]) obj);
+
+    return obj.hashCode();
+  }
+
+  /**
+   * Compute the hashCode for an annotation. Note that the algorithm is
+   * specified by Annotation.hashCode.
+   *
+   * This method is public for use by other parts of the VM. Some VMs
+   * (can) use different representations of annotations that reuse this
+   * method.
+   */
+  public int hashCode()
+  {
+    int h = 0;
+    Iterator iter = memberValues.keySet().iterator();
+    while (iter.hasNext())
+      {
+	Object key = iter.next();
+	try
+	  {
+	    Object val
+	      = invoke(null,
+		       type.getDeclaredMethod((String)key, (Class[])null),
+		       (Object[])null);
+	    h += deepHashCode(val) ^ 127 * key.hashCode();
+	  }
+	catch (Throwable _)
+	  {
+	  }
+      }
+    return h;
+  }
+
+  private static String deepToString(Object obj)
+  {
+    if (obj instanceof Object[])
+      return Arrays.toString((Object[]) obj);
+
+    return obj.toString();
+  }
+
+  /**
+   * This method is public for use by other parts of the VM. Some VMs
+   * (can) use different representations of annotations that reuse this
+   * method.
+   */
+  public String toString()
+  {
+    StringBuffer sb = new StringBuffer();
+    sb.append('@').append(type.getName()).append('(');
+    String sep = "";
+    Iterator iter = memberValues.keySet().iterator();
+    while (iter.hasNext())
+      {
+	Object key = iter.next();
+	Object val = memberValues.get(key);
+	sb.append(sep).append(key).append('=').append(deepToString(val));
+	sep = ", ";
+      }
+    sb.append(')');
+    return sb.toString();
+  }
+
+
+  private static Class getBoxedReturnType(Method method)
+  {
+    Class returnType = method.getReturnType();
+
+    if (returnType == boolean.class)
+      return Boolean.class;
+
+    if (returnType == byte.class)
+      return Byte.class;
+
+    if (returnType == char.class)
+      return Character.class;
+
+    if (returnType == short.class)
+      return Short.class;
+
+    if (returnType == int.class)
+      return Integer.class;
+
+    if (returnType == float.class)
+      return Float.class;
+
+    if (returnType == long.class)
+      return Long.class;
+
+    if (returnType == double.class)
+      return Double.class;
+
+    return returnType;
+  }
+
+  // This is slightly awkward.  When the value of an annotation is an
+  // array, libgcj constructs an Object[], but the value() method
+  // returns an arrays of the appropriate primitive type.  We should
+  // perhaps save the resulting array rather than the Object[].
+
+  private Object coerce(Object val, Class dstType)
+    throws ArrayStoreException
+  {
+    if (! val.getClass().isArray())
+      return val;
+
+    Object[] srcArray = (Object[])val;
+    final int len = srcArray.length;
+
+    if (dstType.getComponentType().isPrimitive())
+      {
+	if (dstType == boolean[].class)
+	  {
+	    boolean[] dst = new boolean[len];
+	    for (int i = 0; i < len; i++)
+	      dst[i] = (Boolean)srcArray[i];
+	    return dst;
+	  }
+
+	if (dstType == byte[].class)
+	  {
+	    byte[] dst = new byte[len];
+	    for (int i = 0; i < len; i++)
+	      dst[i] = (Byte)srcArray[i];
+	    return dst;
+	  }
+
+	if (dstType == char[].class)
+	  {
+	    char[] dst = new char[len];
+	    for (int i = 0; i < len; i++)
+	      dst[i] = (Character)srcArray[i];
+	    return dst;
+	  }
+
+	if (dstType == short[].class)
+	  {
+	    short[] dst = new short[len];
+	    for (int i = 0; i < len; i++)
+	      dst[i] = (Short)srcArray[i];
+	    return dst;
+	  }
+
+	if (dstType == int[].class)
+	  {
+	    int[] dst = new int[len];
+	    for (int i = 0; i < len; i++)
+	      dst[i] = (Integer)srcArray[i];
+	    return dst;
+	  }
+
+	if (dstType == long[].class)
+	  {
+	    long[] dst = new long[len];
+	    for (int i = 0; i < len; i++)
+	      dst[i] = (Long)srcArray[i];
+	    return dst;
+	  }
+
+	if (dstType == float[].class)
+	  {
+	    float[] dst = new float[len];
+	    for (int i = 0; i < len; i++)
+	      dst[i] = (Float)srcArray[i];
+	    return dst;
+	  }
+
+	if (dstType == double[].class)
+	  {
+	    double[] dst = new double[len];
+	    for (int i = 0; i < len; i++)
+	      dst[i] = (Double)srcArray[i];
+	    return dst;
+	  }
+      }
+
+    Object dst = Array.newInstance(dstType.getComponentType(), len);
+    System.arraycopy((Object)srcArray, 0, dst, 0, len);
+    return dst;
+  }
+
+  public Object invoke(Object proxy, Method method, Object[] args)
+    throws Throwable
+  {
+    String methodName = method.getName().intern();
+
+    if (args == null || args.length == 0)
+      {
+	if (methodName == "toString")
+	  {
+	    return toString();
+	  }
+	else if (methodName == "hashCode")
+	  {
+	    return Integer.valueOf(hashCode());
+	  }
+	else if (methodName == "annotationType")
+	  {
+	    return type;
+	  }
+	else
+	  {
+	    Object val = memberValues.get(methodName);
+	    if (val == null)
+	      {
+		throw new IncompleteAnnotationException(type, methodName);
+	      }
+	    try
+	      {
+		if (val.getClass().isArray())
+		  val = coerce((Object[])val, method.getReturnType());
+	      }
+	    catch (ArrayStoreException _)
+	      {
+		throw new AnnotationTypeMismatchException
+		  (method, val.getClass().getName());
+	      }
+	    if (! getBoxedReturnType(method).isInstance(val))
+	      throw (new AnnotationTypeMismatchException
+		     (method, val.getClass().getName()));
+	    return val;
+	  }
+      }
+    else if (args.length == 1)
+      {
+	if (methodName == "equals")
+	  {
+	    return Boolean.valueOf(equals(proxy, args[0]));
+	  }
+      }
+    throw new InternalError("Invalid annotation proxy");
+  }
+}
Index: libjava/sysdep/alpha/locks.h
===================================================================
--- libjava/sysdep/alpha/locks.h	(revision 122231)
+++ libjava/sysdep/alpha/locks.h	(working copy)
@@ -50,6 +50,14 @@
   return compare_and_swap(addr, old, new_val);
 }
 
+// Ensure that subsequent instructions do not execute on stale
+// data that was loaded from memory before the barrier.
+inline static void
+read_barrier()
+{
+  __asm__ __volatile__("mb" : : : "memory");
+}
+
 // Ensure that prior stores to memory are completed with respect to other
 // processors.
 inline static void
Index: libjava/link.cc
===================================================================
--- libjava/link.cc	(revision 122231)
+++ libjava/link.cc	(working copy)
@@ -341,14 +341,6 @@
   
 
  end_of_method_search:
-
-  // FIXME: if (cls->loader != klass->loader), then we
-  // must actually check that the types of arguments
-  // correspond.  That is, for each argument type, and
-  // the return type, doing _Jv_FindClassFromSignature
-  // with either loader should produce the same result,
-  // i.e., exactly the same jclass object. JVMS 5.4.3.3    
-    
   if (the_method == 0)
     {
       java::lang::StringBuffer *sb = new java::lang::StringBuffer();
@@ -362,6 +354,44 @@
       throw new java::lang::NoSuchMethodError (sb->toString());
     }
 
+  // if (found_class->loader != klass->loader), then we
+  // must actually check that the types of arguments
+  // correspond.  That is, for each argument type, and
+  // the return type, doing _Jv_FindClassFromSignature
+  // with either loader should produce the same result,
+  // i.e., exactly the same jclass object. JVMS 5.4.3.3
+  if (found_class->loader != klass->loader)
+    {
+#if 0
+      JArray<jclass> *found_args, *klass_args;
+      jclass found_return, klass_return;
+
+      // We disable this check due to:
+      // http://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=236895
+      _Jv_GetTypesFromSignature (the_method,
+				 found_class,
+				 &found_args,
+				 &found_return);
+      _Jv_GetTypesFromSignature (the_method,
+				 klass,
+				 &klass_args,
+				 &klass_return);
+
+      jclass *found_arg = elements (found_args);
+      jclass *klass_arg = elements (klass_args);
+
+      for (int i = 0; i < found_args->length; i++)
+	{
+	  if (*(found_arg++) != *(klass_arg++))
+	    throw new java::lang::LinkageError (JvNewStringLatin1 
+	      ("argument type mismatch with different loaders"));
+	}
+      if (found_return != klass_return)
+	throw new java::lang::LinkageError (JvNewStringLatin1
+	  ("return type mismatch with different loaders"));
+#endif
+    }
+  
   return the_method;
 }
 
@@ -1020,15 +1050,17 @@
   // be the same as the address of the overall structure.  This is due
   // to disabling interior pointers in the GC.
   ffi_closure closure;
+  _Jv_ClosureList list;
   ffi_cif cif;
   ffi_type *arg_types[1];
 };
 
 void *
-_Jv_Linker::create_error_method (_Jv_Utf8Const *class_name)
+_Jv_Linker::create_error_method (_Jv_Utf8Const *class_name, jclass klass)
 {
+  void *code;
   method_closure *closure
-    = (method_closure *) _Jv_AllocBytes(sizeof (method_closure));
+    = (method_closure *)ffi_closure_alloc (sizeof (method_closure), &code);
 
   closure->arg_types[0] = &ffi_type_void;
 
@@ -1040,13 +1072,18 @@
                        1,
                        &ffi_type_void,
 		       closure->arg_types) == FFI_OK
-      && ffi_prep_closure (&closure->closure,
-                           &closure->cif,
-			   _Jv_ThrowNoClassDefFoundErrorTrampoline,
-			   class_name) == FFI_OK)
-    return &closure->closure;
+      && ffi_prep_closure_loc (&closure->closure,
+			       &closure->cif,
+			       _Jv_ThrowNoClassDefFoundErrorTrampoline,
+			       class_name,
+			       code) == FFI_OK)
+    {
+      closure->list.registerClosure (klass, closure);
+      return code;
+    }
   else
     {
+      ffi_closure_free (closure);
       java::lang::StringBuffer *buffer = new java::lang::StringBuffer();
       buffer->append(JvNewStringLatin1("Error setting up FFI closure"
 				       " for static method of"
@@ -1057,7 +1094,7 @@
 }
 #else
 void *
-_Jv_Linker::create_error_method (_Jv_Utf8Const *)
+_Jv_Linker::create_error_method (_Jv_Utf8Const *, jclass)
 {
   // Codepath for platforms which do not support (or want) libffi.
   // You have to accept that it is impossible to provide the name
@@ -1088,8 +1125,6 @@
 // at the corresponding position in the virtual method offset table
 // (klass->otable). 
 
-// The same otable and atable may be shared by many classes.
-
 // This must be called while holding the class lock.
 
 void
@@ -1240,13 +1275,15 @@
       // NullPointerException
       klass->atable->addresses[index] = NULL;
 
+      bool use_error_method = false;
+
       // If the target class is missing we prepare a function call
       // that throws a NoClassDefFoundError and store the address of
       // that newly prepared method in the atable. The user can run
       // code in classes where the missing class is part of the
       // execution environment as long as it is never referenced.
       if (target_class == NULL)
-        klass->atable->addresses[index] = create_error_method(sym.class_name);
+	use_error_method = true;
       // We're looking for a static field or a static method, and we
       // can tell which is needed by looking at the signature.
       else if (signature->first() == '(' && signature->len() >= 2)
@@ -1294,12 +1331,16 @@
 		}
 	    }
 	  else
+	    use_error_method = true;
+
+	  if (use_error_method)
 	    klass->atable->addresses[index]
-              = create_error_method(sym.class_name);
+	      = create_error_method(sym.class_name, klass);
 
 	  continue;
 	}
 
+
       // Try fields only if the target class exists.
       if (target_class != NULL)
       {
Index: libjava/configure
===================================================================
--- libjava/configure	(revision 122231)
+++ libjava/configure	(working copy)
@@ -14418,6 +14418,7 @@
       -e "s,@default_toolkit@,$TOOLKIT," \
       -e "s,@JAVA_LANG_SYSTEM_EXPLICIT_INITIALIZATION@,false," \
       -e "s,@GTK_CAIRO_ENABLED@,false," \
+      -e "s,@ECJ_JAR@,," \
 	< $srcdir/classpath/gnu/classpath/Configuration.java.in \
 	> gnu/classpath/Configuration.java
   # We do not want to redirect the output of the grep below to /dev/null,
Index: libjava/gnu/java/nio/SocketChannelImpl.java
===================================================================
--- libjava/gnu/java/nio/SocketChannelImpl.java	(revision 122231)
+++ libjava/gnu/java/nio/SocketChannelImpl.java	(working copy)
@@ -1,5 +1,5 @@
 /* SocketChannelImpl.java -- 
-   Copyright (C) 2002, 2003, 2004, 2006 Free Software Foundation, Inc.
+   Copyright (C) 2002, 2003, 2004, 2006, 2007 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -71,6 +71,7 @@
   {
     super (provider);
     impl = new PlainSocketImpl();
+    impl.create(true);
     socket = new NIOSocket (impl, this);
     configureBlocking(true);
   }
Index: libjava/gnu/java/nio/channels/natFileChannelPosix.cc
===================================================================
--- libjava/gnu/java/nio/channels/natFileChannelPosix.cc	(revision 122231)
+++ libjava/gnu/java/nio/channels/natFileChannelPosix.cc	(working copy)
@@ -1,7 +1,7 @@
 
 // natFileChannelImplPosix.cc - Native part of FileChannelImpl class.
 
-/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2006  Free Software Foundation
+/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2006, 2007  Free Software Foundation
 
    This file is part of libgcj.
 
@@ -501,6 +501,18 @@
     {
       prot = PROT_READ|PROT_WRITE;
       flags = mmode == '+' ? MAP_SHARED : MAP_PRIVATE;
+
+      // If the file is too short, we must extend it.  While using
+      // ftruncate() to extend a file is not portable in general, it
+      // should work on all systems where you can mmap() a file.
+      struct stat st;
+      if (fstat (fd, &st) == -1)
+	throw new IOException (JvNewStringLatin1 (strerror (errno)));
+      if (position + size > st.st_size)
+	{
+	  if (ftruncate (fd, position + size) == -1)
+	    throw new IOException (JvNewStringLatin1 (strerror (errno)));
+	}
     }
   jint page_size = ::getpagesize();
   jint offset = position & ~(page_size-1);
Index: libjava/gnu/java/net/natPlainSocketImplPosix.cc
===================================================================
--- libjava/gnu/java/net/natPlainSocketImplPosix.cc	(revision 122231)
+++ libjava/gnu/java/net/natPlainSocketImplPosix.cc	(working copy)
@@ -64,6 +64,10 @@
 void
 gnu::java::net::PlainSocketImpl::create (jboolean stream)
 {
+  // We might already have been create()d in the nio case.
+  if (native_fd != -1)
+    return;
+
   int sock = _Jv_socket (AF_INET, stream ? SOCK_STREAM : SOCK_DGRAM, 0);
 
   if (sock < 0)
Index: libjava/gnu/java/net/PlainSocketImpl.java
===================================================================
--- libjava/gnu/java/net/PlainSocketImpl.java	(revision 122231)
+++ libjava/gnu/java/net/PlainSocketImpl.java	(working copy)
@@ -228,7 +228,9 @@
    *
    * @param stream true for a stream socket, false for a datagram socket
    */
-  protected native void create(boolean stream) throws IOException;
+  // FIXME: this is public for nio ... but this is just a hack
+  // until we upgrade to Classpath's nio.
+  public native void create(boolean stream) throws IOException;
 
   /**
    * Connects to the remote hostname and port specified as arguments.
@@ -336,7 +338,7 @@
 	  {
 	    localSocketAddress
 	      = new InetSocketAddress ((InetAddress) getOption(SocketOptions.SO_BINDADDR),
-				       localport);
+				       localport == -1 ? 0 : localport);
 	  }
 	catch (SocketException _)
 	  {
Index: libjava/gnu/classpath/Configuration.java
===================================================================
--- libjava/gnu/classpath/Configuration.java	(revision 122231)
+++ libjava/gnu/classpath/Configuration.java	(working copy)
@@ -50,6 +50,7 @@
   private static native String classpath_home();
   private static native boolean debug();
   private static native String toolkit();
+  private static native String ecj();
 
   /**
    * The value of CLASSPATH_HOME is the location that the classpath
@@ -102,4 +103,10 @@
    * 
    */
   public static final boolean JAVA_LANG_SYSTEM_EXPLICIT_INITIALIZATION = false;
+
+  /**
+   * The Eclipse Java Compiler jar file for use by the
+   * com.sun.tools.javac implementation in tools.zip.
+   */
+  public static final String ECJ_JAR = ecj();
 }
Index: libjava/gnu/classpath/natConfiguration.cc
===================================================================
--- libjava/gnu/classpath/natConfiguration.cc	(revision 122231)
+++ libjava/gnu/classpath/natConfiguration.cc	(working copy)
@@ -37,3 +37,9 @@
 {
   return JvNewStringLatin1(AWT_TOOLKIT);
 }
+
+jstring
+gnu::classpath::Configuration::ecj()
+{
+  return JvNewStringLatin1(ECJ_JAR_FILE);
+}
Index: libjava/headers.txt
===================================================================
--- libjava/headers.txt	(revision 122231)
+++ libjava/headers.txt	(working copy)
@@ -56,10 +56,14 @@
 class java/lang/reflect/Method
 prepend jmethodID _Jv_FromReflectedMethod (java::lang::reflect::Method *);
 prepend jobject _Jv_JNI_ToReflectedMethod (_Jv_JNIEnv *, jclass, jmethodID, jboolean);
+prepend ::java::lang::reflect::Method *_Jv_GetReflectedMethod (jclass, _Jv_Utf8Const*, _Jv_Utf8Const*);
+prepend ::java::lang::reflect::Method *_Jv_LookupProxyMethod (jclass, _Jv_Utf8Const *, _Jv_Utf8Const *);
 friend jmethodID (::_Jv_FromReflectedMethod) (java::lang::reflect::Method *);
 friend jobject (::_Jv_JNI_ToReflectedMethod) (_Jv_JNIEnv *, jclass, jmethodID, jboolean);
 friend class java::lang::Class;
 friend class java::io::ObjectInputStream;
+friend java::lang::reflect::Method* ::_Jv_GetReflectedMethod (jclass, _Jv_Utf8Const*, _Jv_Utf8Const*);
+friend java::lang::reflect::Method* ::_Jv_LookupProxyMethod (jclass, _Jv_Utf8Const *, _Jv_Utf8Const *);
 
 class gnu/gcj/runtime/ExtensionClassLoader
 friend class ::java::lang::ClassLoader;
Index: libjava/gcj/Makefile.in
===================================================================
--- libjava/gcj/Makefile.in	(revision 122231)
+++ libjava/gcj/Makefile.in	(working copy)
@@ -82,6 +82,8 @@
 AMDEP_FALSE = @AMDEP_FALSE@
 AMDEP_TRUE = @AMDEP_TRUE@
 AMTAR = @AMTAR@
+ANONVERSCRIPT_FALSE = @ANONVERSCRIPT_FALSE@
+ANONVERSCRIPT_TRUE = @ANONVERSCRIPT_TRUE@
 AR = @AR@
 AS = @AS@
 AUTOCONF = @AUTOCONF@
@@ -268,7 +270,6 @@
 build = @build@
 build_alias = @build_alias@
 build_cpu = @build_cpu@
-build_libsubdir = @build_libsubdir@
 build_os = @build_os@
 build_subdir = @build_subdir@
 build_vendor = @build_vendor@
Index: libjava/boehm.cc
===================================================================
--- libjava/boehm.cc	(revision 122231)
+++ libjava/boehm.cc	(working copy)
@@ -1,6 +1,6 @@
 // boehm.cc - interface between libjava and Boehm GC.
 
-/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006
+/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007
    Free Software Foundation
 
    This file is part of libgcj.
@@ -380,7 +380,30 @@
   return (void *) GC_MALLOC (size ? size : 1);
 }
 
+typedef _Jv_ClosureList *closure_list_pointer;
+
+/* Release closures in a _Jv_ClosureList.  */
 static void
+finalize_closure_list (GC_PTR obj, GC_PTR)
+{
+  _Jv_ClosureList **clpp = (_Jv_ClosureList **)obj;
+  _Jv_ClosureList::releaseClosures (clpp);
+}
+
+/* Allocate a double-indirect pointer to a _Jv_ClosureList that will
+   get garbage-collected after this double-indirect pointer becomes
+   unreachable by any other objects, including finalizable ones.  */
+_Jv_ClosureList **
+_Jv_ClosureListFinalizer ()
+{
+  _Jv_ClosureList **clpp;
+  clpp = (_Jv_ClosureList **)_Jv_AllocBytes (sizeof (*clpp));
+  GC_REGISTER_FINALIZER_UNREACHABLE (clpp, finalize_closure_list,
+				     NULL, NULL, NULL);
+  return clpp;
+}
+
+static void
 call_finalizer (GC_PTR obj, GC_PTR client_data)
 {
   _Jv_FinalizerFunc *fn = (_Jv_FinalizerFunc *) client_data;
Index: libjava/sources.am
===================================================================
--- libjava/sources.am	(revision 122231)
+++ libjava/sources.am	(working copy)
@@ -2106,7 +2106,8 @@
 gnu_java_util_source_files = \
 classpath/gnu/java/util/DoubleEnumeration.java \
 classpath/gnu/java/util/EmptyEnumeration.java \
-classpath/gnu/java/util/WeakIdentityHashMap.java
+classpath/gnu/java/util/WeakIdentityHashMap.java \
+classpath/gnu/java/util/ZoneInfo.java
 
 gnu_java_util_header_files = $(patsubst classpath/%,%,$(patsubst %.java,%.h,$(gnu_java_util_source_files)))
 
@@ -5431,7 +5432,7 @@
 classpath/java/util/FormattableFlags.java \
 classpath/java/util/Formatter.java \
 classpath/java/util/FormatterClosedException.java \
-java/util/GregorianCalendar.java \
+classpath/java/util/GregorianCalendar.java \
 classpath/java/util/HashMap.java \
 classpath/java/util/HashSet.java \
 classpath/java/util/Hashtable.java \
@@ -8278,7 +8279,7 @@
 
 
 sun_reflect_annotation_source_files = \
-classpath/sun/reflect/annotation/AnnotationInvocationHandler.java \
+sun/reflect/annotation/AnnotationInvocationHandler.java \
 classpath/sun/reflect/annotation/AnnotationParser.java \
 classpath/sun/reflect/annotation/AnnotationType.java \
 classpath/sun/reflect/annotation/EnumConstantNotPresentExceptionProxy.java \
@@ -8865,13 +8866,10 @@
   classpath/resource/java/util/iso4217.properties \
   classpath/resource/javax/imageio/plugins/jpeg/MessagesBundle.properties \
   classpath/resource/org/ietf/jgss/MessagesBundle.properties \
+  classpath/resource/sun/rmi/rmic/messages.properties \
+  classpath/resource/com/sun/tools/javac/messages.properties \
   classpath/resource/META-INF/services/java.util.prefs.PreferencesFactory.in \
   classpath/resource/META-INF/services/javax.sound.midi.spi.MidiDeviceProvider \
   classpath/resource/META-INF/services/javax.sound.midi.spi.MidiFileReader \
   classpath/resource/META-INF/services/javax.sound.midi.spi.MidiFileWriter \
-  classpath/resource/META-INF/services/javax.sound.sampled.spi.AudioFileReader \
-  classpath/resource/META-INF/services/javax.xml.parsers.DocumentBuilderFactory \
-  classpath/resource/META-INF/services/javax.xml.parsers.SAXParserFactory \
-  classpath/resource/META-INF/services/javax.xml.parsers.TransformerFactory \
-  classpath/resource/META-INF/services/org.relaxng.datatype.DatatypeLibraryFactory \
-  classpath/resource/META-INF/services/org.xml.sax.driver
+  classpath/resource/META-INF/services/javax.sound.sampled.spi.AudioFileReader
Index: libjava/java/lang/Character$UnicodeBlock$NameType.h
===================================================================
--- libjava/java/lang/Character$UnicodeBlock$NameType.h	(revision 0)
+++ libjava/java/lang/Character$UnicodeBlock$NameType.h	(revision 124261)
@@ -0,0 +1,29 @@
+
+// DO NOT EDIT THIS FILE - it is machine generated -*- c++ -*-
+
+#ifndef __java_lang_Character$UnicodeBlock$NameType__
+#define __java_lang_Character$UnicodeBlock$NameType__
+
+#pragma interface
+
+#include <java/lang/Enum.h>
+#include <gcj/array.h>
+
+
+class java::lang::Character$UnicodeBlock$NameType : public ::java::lang::Enum
+{
+
+  Character$UnicodeBlock$NameType(::java::lang::String *, jint);
+public:
+  static JArray< ::java::lang::Character$UnicodeBlock$NameType * > * values();
+  static ::java::lang::Character$UnicodeBlock$NameType * valueOf(::java::lang::String *);
+  static ::java::lang::Character$UnicodeBlock$NameType * CANONICAL;
+  static ::java::lang::Character$UnicodeBlock$NameType * NO_SPACES;
+  static ::java::lang::Character$UnicodeBlock$NameType * CONSTANT;
+private:
+  static JArray< ::java::lang::Character$UnicodeBlock$NameType * > * ENUM$VALUES;
+public:
+  static ::java::lang::Class class$;
+};
+
+#endif // __java_lang_Character$UnicodeBlock$NameType__
Index: libjava/java/lang/StringBuffer.java
===================================================================
--- libjava/java/lang/StringBuffer.java	(revision 122231)
+++ libjava/java/lang/StringBuffer.java	(working copy)
@@ -1,5 +1,5 @@
 /* StringBuffer.java -- Growable strings
-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006
+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007
    Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
@@ -72,8 +72,12 @@
  * @since 1.0
  * @status updated to 1.4
  */
-public final class StringBuffer implements Serializable, CharSequence
+public final class StringBuffer
+  implements Serializable, CharSequence, Appendable
 {
+  // Implementation note: if you change this class, you usually will
+  // want to change StringBuilder as well.
+
   /**
    * Compatible with JDK 1.0+.
    */
@@ -152,17 +156,16 @@
    * specified <code>CharSequence</code>. Initial capacity will be the
    * size of the CharSequence plus 16.
    *
-   * @param sequence the <code>String</code> to convert
+   * @param seq the <code>String</code> to convert
    * @throws NullPointerException if str is null
-   *
    * @since 1.5
    */
-  public StringBuffer(CharSequence sequence)
+  public StringBuffer(CharSequence seq)
   {
-    count = Math.max(0, sequence.length());
+    count = Math.max(0, seq.length());
     value = new char[count + DEFAULT_CAPACITY];
     for (int i = 0; i < count; ++i)
-      value[i] = sequence.charAt(i);
+      value[i] = seq.charAt(i);
   }
 
   /**
@@ -391,46 +394,6 @@
   }
 
   /**
-   * Append the <code>CharSequence</code> value of the argument to this
-   * <code>StringBuffer</code>.
-   *
-   * @param sequence the <code>CharSequence</code> to append
-   * @return this <code>StringBuffer</code>
-   * @see #append(Object)
-   * @since 1.5
-   */
-  public synchronized StringBuffer append(CharSequence sequence)
-  {
-    if (sequence == null)
-      sequence = "null";
-    return append(sequence, 0, sequence.length());
-  }
-
-  /**
-   * Append the specified subsequence of the <code>CharSequence</code>
-   * argument to this <code>StringBuffer</code>.
-   *
-   * @param sequence the <code>CharSequence</code> to append
-   * @param start the starting index
-   * @param end one past the ending index
-   * @return this <code>StringBuffer</code>
-   * @see #append(Object)
-   * @since 1.5
-   */
-  public synchronized StringBuffer append(CharSequence sequence,
-					  int start, int end)
-  {
-    if (sequence == null)
-      sequence = "null";
-    if (start < 0 || end < 0 || start > end || end > sequence.length())
-      throw new IndexOutOfBoundsException();
-    ensureCapacity_unsynchronized(this.count + end - start);
-    for (int i = start; i < end; ++i)
-      value[count++] = sequence.charAt(i);
-    return this;
-  }
-
-  /**
    * Append the <code>char</code> array to this <code>StringBuffer</code>.
    * This is similar (but more efficient) than
    * <code>append(new String(data))</code>, except in the case of null.
@@ -470,6 +433,25 @@
   }
 
   /**
+   * Append the code point to this <code>StringBuffer</code>.
+   * This is like #append(char), but will append two characters
+   * if a supplementary code point is given.
+   *
+   * @param code the code point to append
+   * @return this <code>StringBuffer</code>
+   * @see Character#toChars(int, char[], int)
+   * @since 1.5
+   */
+  public synchronized StringBuffer appendCodePoint(int code)
+  {
+    int len = Character.charCount(code);
+    ensureCapacity_unsynchronized(count + len);
+    Character.toChars(code, value, count);
+    count += len;
+    return this;
+  }
+
+  /**
    * Append the <code>String</code> value of the argument to this
    * <code>StringBuffer</code>. Uses <code>String.valueOf()</code> to convert
    * to <code>String</code>.
@@ -497,21 +479,41 @@
   }
 
   /**
-   * Append the code point to this <code>StringBuffer</code>.
-   * This is like #append(char), but will append two characters
-   * if a supplementary code point is given.
+   * Append the <code>CharSequence</code> value of the argument to this
+   * <code>StringBuffer</code>.
    *
-   * @param code the code point to append
+   * @param seq the <code>CharSequence</code> to append
    * @return this <code>StringBuffer</code>
-   * @see Character#toChars(int, char[], int)
+   * @see #append(Object)
    * @since 1.5
    */
-  public synchronized StringBuffer appendCodePoint(int code)
+  public synchronized StringBuffer append(CharSequence seq)
   {
-    int len = Character.charCount(code);
-    ensureCapacity_unsynchronized(count + len);
-    Character.toChars(code, value, count);
-    count += len;
+    if (seq == null)
+      seq = "null";
+    return append(seq, 0, seq.length());
+  }
+
+  /**
+   * Append the specified subsequence of the <code>CharSequence</code>
+   * argument to this <code>StringBuffer</code>.
+   *
+   * @param seq the <code>CharSequence</code> to append
+   * @param start the starting index
+   * @param end one past the ending index
+   * @return this <code>StringBuffer</code>
+   * @see #append(Object)
+   * @since 1.5
+   */
+  public synchronized StringBuffer append(CharSequence seq, int start, int end)
+  {
+    if (seq == null)
+      seq = "null";
+    if (start < 0 || end < 0 || start > end || end > seq.length())
+      throw new IndexOutOfBoundsException();
+    ensureCapacity_unsynchronized(this.count + end - start);
+    for (int i = start; i < end; ++i)
+      value[count++] = seq.charAt(i);
     return this;
   }
 
Index: libjava/java/lang/String.java
===================================================================
--- libjava/java/lang/String.java	(revision 122231)
+++ libjava/java/lang/String.java	(working copy)
@@ -1,5 +1,5 @@
 /* String.java -- immutable character sequences; the object of string literals
-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006
+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007
    Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
@@ -41,9 +41,11 @@
 
 import java.io.Serializable;
 import java.io.UnsupportedEncodingException;
-import java.lang.Comparable;
 import java.util.Comparator;
+import java.text.Collator;
+import java.util.Formatter;
 import java.util.Locale;
+import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.regex.PatternSyntaxException;
 
@@ -70,10 +72,13 @@
  * @author Paul N. Fisher
  * @author Eric Blake (ebb9@email.byu.edu)
  * @author Per Bothner (bothner@cygnus.com)
+ * @author Tom Tromey (tromey@redhat.com)
+ * @author Andrew John Hughes (gnu_andrew@member.fsf.org)
  * @since 1.0
  * @status updated to 1.4
  */
-public final class String implements Serializable, Comparable, CharSequence
+public final class String
+  implements Serializable, Comparable<String>, CharSequence
 {
   // WARNING: String is a CORE class in the bootstrap cycle. See the comments
   // in vm/reference/java/lang/Runtime for implications of this fact.
@@ -113,12 +118,12 @@
   private int cachedHashCode;
 
   /**
-   * An implementation for {@link CASE_INSENSITIVE_ORDER}.
+   * An implementation for {@link #CASE_INSENSITIVE_ORDER}.
    * This must be {@link Serializable}. The class name is dictated by
    * compatibility with Sun's JDK.
    */
   private static final class CaseInsensitiveComparator
-    implements Comparator, Serializable
+    implements Comparator<String>, Serializable
   {
     /**
      * Compatible with JDK 1.2.
@@ -142,9 +147,9 @@
      * @throws ClassCastException if either argument is not a String
      * @see #compareToIgnoreCase(String)
      */
-    public int compare(Object o1, Object o2)
+    public int compare(String o1, String o2)
     {
-      return ((String) o1).compareToIgnoreCase((String) o2);
+      return o1.compareToIgnoreCase(o2);
     }
   } // class CaseInsensitiveComparator
 
@@ -156,7 +161,7 @@
    * @see Collator#compare(String, String)
    * @since 1.2
    */
-  public static final Comparator CASE_INSENSITIVE_ORDER
+  public static final Comparator<String> CASE_INSENSITIVE_ORDER
     = new CaseInsensitiveComparator();
 
   /**
@@ -207,6 +212,7 @@
    * @param count the number of characters from data to copy
    * @throws NullPointerException if data is null
    * @throws IndexOutOfBoundsException if (offset &lt; 0 || count &lt; 0
+   *         || offset + count &lt; 0 (overflow)
    *         || offset + count &gt; data.length)
    *         (while unspecified, this is a StringIndexOutOfBoundsException)
    */
@@ -230,6 +236,7 @@
    * @param count the number of characters from ascii to copy
    * @throws NullPointerException if ascii is null
    * @throws IndexOutOfBoundsException if (offset &lt; 0 || count &lt; 0
+   *         || offset + count &lt; 0 (overflow)
    *         || offset + count &gt; ascii.length)
    *         (while unspecified, this is a StringIndexOutOfBoundsException)
    * @see #String(byte[])
@@ -281,7 +288,7 @@
    *
    * @param data byte array to copy
    * @param offset the offset to start at
-   * @param count the number of characters in the array to use
+   * @param count the number of bytes in the array to use
    * @param encoding the name of the encoding to use
    * @throws NullPointerException if data or encoding is null
    * @throws IndexOutOfBoundsException if offset or count is incorrect
@@ -330,7 +337,7 @@
    *
    * @param data byte array to copy
    * @param offset the offset to start at
-   * @param count the number of characters in the array to use
+   * @param count the number of bytes in the array to use
    * @throws NullPointerException if data is null
    * @throws IndexOutOfBoundsException if offset or count is incorrect
    * @throws Error if the decoding fails
@@ -644,23 +651,17 @@
    * @return the comparison
    * @throws NullPointerException if anotherString is null
    */
-  public native int compareTo(String anotherString);
+  public int compareTo(String anotherString)
+  {
+    return nativeCompareTo(anotherString);
+  }
 
   /**
-   * Behaves like <code>compareTo(java.lang.String)</code> unless the Object
-   * is not a <code>String</code>.  Then it throws a
-   * <code>ClassCastException</code>.
-   *
-   * @param o the object to compare against
-   * @return the comparison
-   * @throws NullPointerException if o is null
-   * @throws ClassCastException if o is not a <code>String</code>
-   * @since 1.2
+   * The native implementation of compareTo(). Must be named different
+   * since cni doesn't understand the bridge method generated from
+   * the compareTo() method because of the Comparable<String> interface.
    */
-  public int compareTo(Object o)
-  {
-    return compareTo((String) o);
-  }
+  private native int nativeCompareTo(String anotherString);
 
   /**
    * Compares this String and another String (case insensitive). This
@@ -710,7 +711,7 @@
    * @param ignoreCase true if case should be ignored in comparision
    * @param toffset index to start comparison at for this String
    * @param other String to compare region to this String
-   * @param oofset index to start comparison at for other
+   * @param ooffset index to start comparison at for other
    * @param len number of characters to compare
    * @return true if regions match, false otherwise
    * @throws NullPointerException if other is null
@@ -1124,7 +1125,7 @@
    * Trims all characters less than or equal to <code>'\u0020'</code>
    * (<code>' '</code>) from the beginning and end of this String. This
    * includes many, but not all, ASCII control characters, and all
-   * {@link Character#whitespace(char)}.
+   * {@link Character#isWhitespace(char)}.
    *
    * @return new trimmed String, or this if nothing trimmed
    */
@@ -1204,6 +1205,7 @@
    * @return String containing the chars from data[offset..offset+count]
    * @throws NullPointerException if data is null
    * @throws IndexOutOfBoundsException if (offset &lt; 0 || count &lt; 0
+   *         || offset + count &lt; 0 (overflow)
    *         || offset + count &gt; data.length)
    *         (while unspecified, this is a StringIndexOutOfBoundsException)
    * @see #String(char[], int, int)
@@ -1294,12 +1296,27 @@
     return Double.toString(d);
   }
 
+
+  /** @since 1.5 */
+  public static String format(Locale locale, String format, Object... args)
+  {
+    Formatter f = new Formatter(locale);
+    return f.format(format, args).toString();
+  }
+
+  /** @since 1.5 */
+  public static String format(String format, Object... args)
+  {
+    return format(Locale.getDefault(), format, args);
+  }
+
   /**
-   * Fetches this String from the intern hashtable. If two Strings are
-   * considered equal, by the equals() method, then intern() will return the
-   * same String instance. ie. if (s1.equals(s2)) then
-   * (s1.intern() == s2.intern()). All string literals and string-valued
-   * constant expressions are already interned.
+   * Fetches this String from the intern hashtable.
+   * If two Strings are considered equal, by the equals() method, 
+   * then intern() will return the same String instance. ie. 
+   * if (s1.equals(s2)) then (s1.intern() == s2.intern()). 
+   * All string literals and string-valued constant expressions 
+   * are already interned.
    *
    * @return the interned String
    */
@@ -1345,20 +1362,20 @@
       }
     return count;
   }
-
+  
   /**
    * Returns true iff this String contains the sequence of Characters
    * described in s.
    * @param s the CharSequence
    * @return true iff this String contains s
-   *
+   * 
    * @since 1.5
    */
   public boolean contains (CharSequence s)
   {
     return this.indexOf(s.toString()) != -1;
   }
-
+  
   /**
    * Returns a string that is this string with all instances of the sequence
    * represented by <code>target</code> replaced by the sequence in 
@@ -1386,7 +1403,42 @@
       }
     return result.toString();
   }
+  
+  /**
+   * Return the index into this String that is offset from the given index by 
+   * <code>codePointOffset</code> code points.
+   * @param index the index at which to start
+   * @param codePointOffset the number of code points to offset
+   * @return the index into this String that is <code>codePointOffset</code>
+   * code points offset from <code>index</code>.
+   * 
+   * @throws IndexOutOfBoundsException if index is negative or larger than the
+   * length of this string.
+   * @throws IndexOutOfBoundsException if codePointOffset is positive and the
+   * substring starting with index has fewer than codePointOffset code points.
+   * @throws IndexOutOfBoundsException if codePointOffset is negative and the
+   * substring ending with index has fewer than (-codePointOffset) code points.
+   * @since 1.5
+   */
+  public int offsetByCodePoints(int index, int codePointOffset)
+  {
+    if (index < 0 || index > count)
+      throw new IndexOutOfBoundsException();
+    
+    return Character.offsetByCodePoints(this, index, codePointOffset);
+  }
 
+  /**
+   * Returns true if, and only if, {@link #length()}
+   * is <code>0</code>.
+   *
+   * @return true if the length of the string is zero.
+   * @since 1.6
+   */
+  public boolean isEmpty()
+  {
+    return count == 0;
+  }
 
   private native void init(char[] chars, int offset, int count,
 			   boolean dont_copy);
Index: libjava/java/lang/natClass.cc
===================================================================
--- libjava/java/lang/natClass.cc	(revision 122231)
+++ libjava/java/lang/natClass.cc	(working copy)
@@ -29,6 +29,7 @@
 #include <java/lang/reflect/Member.h>
 #include <java/lang/reflect/Method.h>
 #include <java/lang/reflect/Field.h>
+#include <java/lang/reflect/Proxy.h>
 #include <java/lang/reflect/Constructor.h>
 #include <java/lang/AbstractMethodError.h>
 #include <java/lang/ArrayStoreException.h>
@@ -669,6 +670,28 @@
   engine->unregister(this);
 }
 
+void
+_Jv_ClosureList::releaseClosures (_Jv_ClosureList **closures)
+{
+  if (!closures)
+    return;
+
+  while (_Jv_ClosureList *current = *closures)
+    {
+      *closures = current->next;
+      ffi_closure_free (current->ptr);
+    }
+}
+
+void
+_Jv_ClosureList::registerClosure (jclass klass, void *ptr)
+{
+  _Jv_ClosureList **closures = klass->engine->get_closure_list (klass);
+  this->ptr = ptr;
+  this->next = *closures;
+  *closures = this;
+}
+
 // This implements the initialization process for a class.  From Spec
 // section 12.4.2.
 void
@@ -1137,7 +1160,7 @@
     case 'J':
       {
 	int cindex = read_u2 (bytes, last);
-	check_constant (pool, cindex, JV_CONSTANT_Double);
+	check_constant (pool, cindex, JV_CONSTANT_Long);
 	_Jv_word2 word;
 	memcpy (&word, &pool->data[cindex], 2 * sizeof (_Jv_word));
 	result = Long::valueOf (word.l);
@@ -1318,9 +1341,8 @@
   if (bytes == NULL)
     return 0;
 
-  ClassLoader *trueLoader = loader;
-  if (trueLoader == NULL)
-    trueLoader = (ClassLoader *)VMClassLoader::bootLoader;
+  if (loader == NULL)
+    loader = (ClassLoader *)VMClassLoader::bootLoader;
 
   result = (loader->getDeclaredAnnotations
 	    (this, member_type, member_index, kind_req));
@@ -1618,6 +1640,59 @@
   return NULL;
 }
 
+// The rules for finding proxy methods are different: first we search
+// the interfaces implemented by a proxy, then the methods declared in
+// class Proxy.
+
+java::lang::reflect::Method *
+_Jv_LookupProxyMethod (jclass proxyClass, _Jv_Utf8Const *name,
+		       _Jv_Utf8Const *signature)
+{
+  using namespace java::lang::reflect;
+  jclass declaringClass;
+  _Jv_Method * m;
+
+  for (int i = 0; i < proxyClass->interface_count; i++)
+    {
+      declaringClass = proxyClass->interfaces[i];
+      m = _Jv_GetMethodLocal (declaringClass, name, signature);
+      if (m)
+	break;
+    }
+  if (!m)
+    m = _Jv_LookupDeclaredMethod (&Proxy::class$,
+				  name,
+				  signature,
+				  &declaringClass);
+
+  Method *rmethod = new Method ();
+  rmethod->offset = (char*) m - (char*) declaringClass->methods;
+  rmethod->declaringClass = declaringClass;
+  return rmethod;
+}
+
+
+
+java::lang::reflect::Method *
+_Jv_GetReflectedMethod (jclass klass, _Jv_Utf8Const *name,
+		       _Jv_Utf8Const *signature)
+{
+  for (; klass; klass = klass->getSuperclass())
+    {
+      _Jv_Method *meth = _Jv_GetMethodLocal (klass, name, signature);
+      if (meth)
+	{
+	  using namespace java::lang::reflect;
+	  Method *rmethod = new Method ();
+	  rmethod->offset = (char*) meth - (char*) klass->methods;
+	  rmethod->declaringClass = klass;
+	  return rmethod;
+	}
+    }
+  
+  return NULL;
+}
+
 #ifdef HAVE_TLS
 
 // NOTE: MCACHE_SIZE should be a power of 2 minus one.
Index: libjava/java/lang/StringBuilder.java
===================================================================
--- libjava/java/lang/StringBuilder.java	(revision 122231)
+++ libjava/java/lang/StringBuilder.java	(working copy)
@@ -1,5 +1,5 @@
 /* StringBuilder.java -- Unsynchronized growable strings
-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006
+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007
    Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
@@ -998,4 +998,65 @@
    */
   // GCJ LOCAL: Native to access String internals properly.
   private native boolean regionMatches(int toffset, String other);
+
+  /**
+   * Get the code point at the specified index.  This is like #charAt(int),
+   * but if the character is the start of a surrogate pair, and the
+   * following character completes the pair, then the corresponding
+   * supplementary code point is returned.
+   * @param index the index of the codepoint to get, starting at 0
+   * @return the codepoint at the specified index
+   * @throws IndexOutOfBoundsException if index is negative or &gt;= length()
+   * @since 1.5
+   */
+  public int codePointAt(int index)
+  {
+    return Character.codePointAt(value, index, count);
+  }
+
+    /**
+   * Get the code point before the specified index.  This is like
+   * #codePointAt(int), but checks the characters at <code>index-1</code> and
+   * <code>index-2</code> to see if they form a supplementary code point.
+   * @param index the index just past the codepoint to get, starting at 0
+   * @return the codepoint at the specified index
+   * @throws IndexOutOfBoundsException if index is negative or &gt;= length()
+   * @since 1.5
+   */
+  public int codePointBefore(int index)
+  {
+    // Character.codePointBefore() doesn't perform this check.  We
+    // could use the CharSequence overload, but this is just as easy.
+    if (index >= count)
+      throw new IndexOutOfBoundsException();
+    return Character.codePointBefore(value, index, 1);
+  }
+
+  /**
+   * Returns the number of Unicode code points in the specified sub sequence.
+   * Surrogate pairs count as one code point.
+   * @param beginIndex the start of the subarray
+   * @param endIndex the index after the last char in the subarray
+   * @return the number of code points
+   * @throws IndexOutOfBoundsException if beginIndex is less than zero or 
+   * greater than endIndex or if endIndex is greater than the length of this 
+   * StringBuilder
+   */
+  public int codePointCount(int beginIndex,int endIndex)
+  {
+    if (beginIndex < 0 || beginIndex > endIndex || endIndex > count)
+      throw new IndexOutOfBoundsException("invalid indices: " + beginIndex
+                                          + ", " + endIndex);
+    return Character.codePointCount(value, beginIndex, endIndex - beginIndex);
+  }
+
+  public void trimToSize()
+  {
+    if (count < value.length)
+      {
+        char[] newValue = new char[count];
+        System.arraycopy(value, 0, newValue, 0, count);
+        value = newValue;
+      }
+  }
 }
Index: libjava/java/lang/natString.cc
===================================================================
--- libjava/java/lang/natString.cc	(revision 122231)
+++ libjava/java/lang/natString.cc	(working copy)
@@ -1,6 +1,6 @@
 // natString.cc - Implementation of java.lang.String native methods.
 
-/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006  Free Software Foundation
+/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007  Free Software Foundation
 
    This file is part of libgcj.
 
@@ -615,11 +615,9 @@
   while (todo > 0 || converter->havePendingBytes())
     {
       converter->setOutput(buffer, bufpos);
-      // We only really need to do a single write.
-      converter->setFinished();
       int converted = converter->write(this, offset, todo, NULL);
       bufpos = converter->count;
-      if (converted == 0 && bufpos == converter->count)
+      if (converted == 0)
 	{
 	  buflen *= 2;
 	  jbyteArray newbuffer = JvNewByteArray(buflen);
@@ -627,11 +625,16 @@
 	  buffer = newbuffer;
 	}
       else
-	bufpos = converter->count;
-
-      offset += converted;
-      todo -= converted;
+	{
+	  offset += converted;
+	  todo -= converted;
+	}
     }
+  if (length() > 0)
+    {
+      converter->setFinished();
+      converter->write(this, 0, 0, NULL);
+    }
   converter->done ();
   if (bufpos == buflen)
     return buffer;
@@ -707,7 +710,7 @@
 }
 
 jint
-java::lang::String::compareTo (jstring anotherString)
+java::lang::String::nativeCompareTo (jstring anotherString)
 {
   jchar *tptr = JvGetStringChars (this);
   jchar *optr = JvGetStringChars (anotherString);
Index: libjava/java/lang/System.java
===================================================================
--- libjava/java/lang/System.java	(revision 122231)
+++ libjava/java/lang/System.java	(working copy)
@@ -318,6 +318,7 @@
    * <dt>gnu.java.io.encoding_scheme_alias.latin?</dt>       <dd>8859_?</dd>
    * <dt>gnu.java.io.encoding_scheme_alias.UTF-8</dt>        <dd>UTF8</dd>
    * <dt>gnu.java.io.encoding_scheme_alias.utf-8</dt>        <dd>UTF8</dd>
+   * <dt>gnu.java.util.zoneinfo.dir</dt>	<dd>Root of zoneinfo tree</dd>
    * </dl>
    *
    * @return the system properties, will never be null
Index: libjava/java/lang/reflect/Method.java
===================================================================
--- libjava/java/lang/reflect/Method.java	(revision 122231)
+++ libjava/java/lang/reflect/Method.java	(working copy)
@@ -153,6 +153,15 @@
     return (Class<?>[]) parameter_types.clone();
   }
 
+  // Just like getParameterTypes, but don't clone the array.
+  // Package private for use by VMProxy.
+  final Class<?>[] internalGetParameterTypes ()
+  {
+    if (parameter_types == null)
+      getType();
+    return (Class<?>[]) parameter_types;
+  }
+
   /**
    * Get the exception types this method says it throws, in no particular
    * order. If the method has no throws clause, returns a 0-length array
@@ -167,6 +176,15 @@
     return (Class<?>[]) exception_types.clone();
   }
 
+  // Just like getExceptionTypes, but don't clone the array.
+  // Package private for use by VMProxy.
+  final Class<?>[] internalGetExceptionTypes ()
+  {
+    if (exception_types == null)
+      getType();
+    return (Class<?>[]) exception_types;
+  }
+
   /**
    * Compare two objects to see if they are semantically equivalent.
    * Two Methods are semantically equivalent if they have the same declaring
Index: libjava/java/lang/reflect/natVMProxy.cc
===================================================================
--- libjava/java/lang/reflect/natVMProxy.cc	(revision 122231)
+++ libjava/java/lang/reflect/natVMProxy.cc	(working copy)
@@ -1,6 +1,6 @@
 // natVMProxy.cc -- Implementation of VMProxy methods.
 
-/* Copyright (C) 2006
+/* Copyright (C) 2006, 2007
    Free Software Foundation
 
    This file is part of libgcj.
@@ -66,7 +66,7 @@
 using namespace java::lang;
 
 typedef void (*closure_fun) (ffi_cif*, void*, void**, void*);
-static void *ncode (_Jv_Method *self, closure_fun fun, Method *meth);
+static void *ncode (jclass klass, _Jv_Method *self, closure_fun fun);
 static void run_proxy (ffi_cif*, void*, void**, void*);
 
 typedef jobject invoke_t (jobject, Proxy *, Method *, JArray< jobject > *);
@@ -165,7 +165,7 @@
       // the interfaces of which it is a proxy will also be reachable,
       // so this is safe.
       method = imethod;
-      method.ncode = ncode (&method, run_proxy, elements(d->methods)[i]);
+      method.ncode = ncode (klass, &method, run_proxy);
       method.accflags &= ~Modifier::ABSTRACT;
     }
 
@@ -283,15 +283,14 @@
     JvFail ("Bad ffi type in proxy");
 }
 
-
 // run_proxy is the entry point for all proxy methods.  It boxes up
 // all the arguments and then invokes the invocation handler's invoke()
 // method.  Exceptions are caught and propagated.
 
 typedef struct {
   ffi_closure  closure;
+  _Jv_ClosureList list;
   ffi_cif   cif;
-  Method *meth;
   _Jv_Method *self;
   ffi_type *arg_types[0];
 } ncode_closure;
@@ -302,6 +301,8 @@
 	   void **args,
 	   void*user_data)
 {
+  using namespace java::lang::reflect;
+
   Proxy *proxy = *(Proxy**)args[0];
   ncode_closure *self = (ncode_closure *) user_data;
 
@@ -313,11 +314,22 @@
   Thread *thread = Thread::currentThread();
   _Jv_InterpFrame frame_desc (self->self, thread, proxy->getClass());
 
+  Method *meth = _Jv_LookupProxyMethod (proxy->getClass(), 
+					self->self->name,
+					self->self->signature);
+  JArray<jclass> *parameter_types = meth->internalGetParameterTypes ();
+  JArray<jclass> *exception_types = meth->internalGetExceptionTypes ();
+
   InvocationHandler *handler = proxy->h;
-  void *poo 
-    = _Jv_NewObjectArray (self->meth->parameter_types->length, &Object::class$, NULL);
-  JArray<jobject> *argsArray = (JArray<jobject> *) poo;
-  jobject *jargs = elements(argsArray);
+  JArray<jobject> *argsArray = NULL;
+  jobject *jargs = NULL;
+  if (parameter_types->length)
+    {
+      void *poo 
+	= _Jv_NewObjectArray (parameter_types->length, &Object::class$, NULL);
+      argsArray = (JArray<jobject> *) poo;
+      jargs = elements(argsArray);
+    }
 
   // FIXME: It must be possible to use fast interface dispatch here,
   // but I've not quite figured out how to do it.
@@ -331,14 +343,14 @@
 
   // Copy and box all the args.
   int index = 1;
-  for (int i = 0; i < self->meth->parameter_types->length; i++, index++)
-    jargs[i] = box (args[index], elements(self->meth->parameter_types)[i],
+  for (int i = 0; i < parameter_types->length; i++, index++)
+    jargs[i] = box (args[index], elements(parameter_types)[i],
 		    cif->arg_types[index]->type);
   
   jobject ret;
   try
     {
-      ret = invoke (handler, proxy, self->meth, argsArray);
+      ret = invoke (handler, proxy, meth, argsArray);
     }
   catch (Throwable *t)
     {
@@ -346,15 +358,15 @@
 	  || _Jv_IsInstanceOf (t, &Error::class$))
 	throw t;
 
-      Class **throwables = elements (self->meth->exception_types);
-      for (int i = 0; i < self->meth->exception_types->length; i++)
+      Class **throwables = elements (exception_types);
+      for (int i = 0; i < exception_types->length; i++)
 	if (_Jv_IsInstanceOf (t, throwables[i]))
 	  throw t;
 
       throw new UndeclaredThrowableException (t);
     }
 
-  unbox (ret, self->meth->return_type, rvalue, cif->rtype->type);
+  unbox (ret, meth->return_type, rvalue, cif->rtype->type);
 }
 
 
@@ -362,16 +374,19 @@
 // the address of its closure.
 
 static void *
-ncode (_Jv_Method *self, closure_fun fun, Method *meth)
+ncode (jclass klass, _Jv_Method *self, closure_fun fun)
 {
   using namespace java::lang::reflect;
 
   jboolean staticp = (self->accflags & Modifier::STATIC) != 0;
   int arg_count = _Jv_count_arguments (self->signature, staticp);
 
+  void *code;
   ncode_closure *closure =
-    (ncode_closure*)_Jv_AllocBytes (sizeof (ncode_closure)
-				    + arg_count * sizeof (ffi_type*));
+    (ncode_closure*)ffi_closure_alloc (sizeof (ncode_closure)
+				       + arg_count * sizeof (ffi_type*),
+				       &code);
+  closure->list.registerClosure (klass, closure);
 
   _Jv_init_cif (self->signature,
 		arg_count,
@@ -379,16 +394,16 @@
 		&closure->cif,
 		&closure->arg_types[0],
 		NULL);
-  closure->meth = meth;
   closure->self = self;
 
   JvAssert ((self->accflags & Modifier::NATIVE) == 0);
 
-  ffi_prep_closure (&closure->closure,
-		    &closure->cif, 
-		    fun,
-		    (void*)closure);
+  ffi_prep_closure_loc (&closure->closure,
+			&closure->cif,
+			fun,
+			code,
+			code);
 
-  self->ncode = (void*)closure;
+  self->ncode = code;
   return self->ncode;
 }
Index: libjava/java/lang/Class.h
===================================================================
--- libjava/java/lang/Class.h	(revision 122231)
+++ libjava/java/lang/Class.h	(working copy)
@@ -105,6 +105,15 @@
 class _Jv_InterpMethod;
 #endif
 
+class _Jv_ClosureList
+{
+  _Jv_ClosureList *next;
+  void *ptr;
+public:
+  void registerClosure (jclass klass, void *ptr);
+  static void releaseClosures (_Jv_ClosureList **closures);
+};
+
 struct _Jv_Constants
 {
   jint size;
@@ -225,6 +234,11 @@
 
 _Jv_Method* _Jv_LookupDeclaredMethod (jclass, _Jv_Utf8Const *, 
 				      _Jv_Utf8Const*, jclass * = NULL);
+java::lang::reflect::Method *_Jv_GetReflectedMethod (jclass klass, 
+						    _Jv_Utf8Const *name,
+						    _Jv_Utf8Const *signature);
+java::lang::reflect::Method *_Jv_LookupProxyMethod (jclass, _Jv_Utf8Const *,
+						    _Jv_Utf8Const *);
 jfieldID JvGetFirstInstanceField (jclass);
 jint JvNumInstanceFields (jclass);
 jfieldID JvGetFirstStaticField (jclass);
@@ -527,6 +541,12 @@
 
   friend _Jv_Method* ::_Jv_LookupDeclaredMethod (jclass, _Jv_Utf8Const *, 
 						 _Jv_Utf8Const*, jclass *);
+  friend java::lang::reflect::Method* ::_Jv_GetReflectedMethod (jclass klass, 
+						    _Jv_Utf8Const *name,
+						    _Jv_Utf8Const *signature);
+  friend java::lang::reflect::Method *::_Jv_LookupProxyMethod (jclass, _Jv_Utf8Const *,
+							       _Jv_Utf8Const *);
+
   friend jfieldID (::JvGetFirstInstanceField) (jclass);
   friend jint (::JvNumInstanceFields) (jclass);
   friend jfieldID (::JvGetFirstStaticField) (jclass);
@@ -623,6 +643,7 @@
   friend class ::_Jv_CompiledEngine;
   friend class ::_Jv_IndirectCompiledEngine;
   friend class ::_Jv_InterpreterEngine;
+  friend class ::_Jv_ClosureList;
 
   friend void ::_Jv_sharedlib_register_hook (jclass klass);
 
Index: libjava/java/lang/Character.java
===================================================================
--- libjava/java/lang/Character.java	(revision 122231)
+++ libjava/java/lang/Character.java	(working copy)
@@ -1,5 +1,6 @@
 /* java.lang.Character -- Wrapper class for char, and Unicode subsets
-   Copyright (C) 1998, 1999, 2001, 2002, 2005, 2006 Free Software Foundation, Inc.
+   Copyright (C) 1998, 1999, 2001, 2002, 2005, 2006, 2007
+   Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -54,7 +55,7 @@
 /**
  * Wrapper class for the primitive char data type.  In addition, this class
  * allows one to retrieve property information and perform transformations
- * on the 57,707 defined characters in the Unicode Standard, Version 3.0.0.
+ * on the defined characters in the Unicode Standard, Version 4.0.0.
  * java.lang.Character is designed to be very dynamic, and as such, it
  * retrieves information on the Unicode character set from a separate
  * database, gnu.java.lang.CharData, which can be easily upgraded.
@@ -62,7 +63,7 @@
  * <p>For predicates, boundaries are used to describe
  * the set of characters for which the method will return true.
  * This syntax uses fairly normal regular expression notation.
- * See 5.13 of the Unicode Standard, Version 3.0, for the
+ * See 5.13 of the Unicode Standard, Version 4.0, for the
  * boundary specification.
  *
  * <p>See <a href="http://www.unicode.org">http://www.unicode.org</a>
@@ -72,10 +73,11 @@
  * @author Paul N. Fisher
  * @author Jochen Hoenicke
  * @author Eric Blake (ebb9@email.byu.edu)
+ * @author Andrew John Hughes (gnu_andrew@member.fsf.org)
  * @since 1.0
- * @status updated to 1.4
+ * @status partly updated to 1.5; some things still missing
  */
-public final class Character implements Serializable, Comparable
+public final class Character implements Serializable, Comparable<Character>
 {
   /**
    * A subset of Unicode blocks.
@@ -160,10 +162,8 @@
     /** The canonical name of the block according to the Unicode standard. */
     private final String canonicalName;
 
-    /** Constants for the <code>forName()</code> method */
-    private static final int CANONICAL_NAME = 0;
-    private static final int NO_SPACES_NAME = 1;
-    private static final int CONSTANT_NAME = 2;
+    /** Enumeration for the <code>forName()</code> method */
+    private enum NameType { CANONICAL, NO_SPACES, CONSTANT; };
 
     /**
      * Constructor for strictly defined blocks.
@@ -173,7 +173,7 @@
      * @param name the block name
      */
     private UnicodeBlock(int start, int end, String name,
-             String canonicalName)
+			 String canonicalName)
     {
       super(name);
       this.start = start;
@@ -207,8 +207,8 @@
     public static UnicodeBlock of(int codePoint)
     {
       if (codePoint > MAX_CODE_POINT)
-    throw new IllegalArgumentException("The supplied integer value is " +
-                       "too large to be a codepoint.");
+	throw new IllegalArgumentException("The supplied integer value is " +
+					   "too large to be a codepoint.");
       // Simple binary search for the correct block.
       int low = 0;
       int hi = sets.length - 1;
@@ -262,60 +262,52 @@
      */
     public static final UnicodeBlock forName(String blockName)
     {
-      int type;
+      NameType type;
       if (blockName.indexOf(' ') != -1)
-        type = CANONICAL_NAME;
+        type = NameType.CANONICAL;
       else if (blockName.indexOf('_') != -1)
-        type = CONSTANT_NAME;
+        type = NameType.CONSTANT;
       else
-        type = NO_SPACES_NAME;
+        type = NameType.NO_SPACES;
       Collator usCollator = Collator.getInstance(Locale.US);
       usCollator.setStrength(Collator.PRIMARY);
       /* Special case for deprecated blocks not in sets */
       switch (type)
       {
-        case CANONICAL_NAME:
+        case CANONICAL:
           if (usCollator.compare(blockName, "Surrogates Area") == 0)
             return SURROGATES_AREA;
           break;
-        case NO_SPACES_NAME:
+        case NO_SPACES:
           if (usCollator.compare(blockName, "SurrogatesArea") == 0)
             return SURROGATES_AREA;
           break;
-        case CONSTANT_NAME:
+        case CONSTANT:
           if (usCollator.compare(blockName, "SURROGATES_AREA") == 0) 
             return SURROGATES_AREA;
           break;
       }
       /* Other cases */
-      int setLength = sets.length;
       switch (type)
       {
-        case CANONICAL_NAME:
-          for (int i = 0; i < setLength; i++)
-            {
-              UnicodeBlock block = sets[i];
-              if (usCollator.compare(blockName, block.canonicalName) == 0)
-                return block;
-            }
+        case CANONICAL:
+          for (UnicodeBlock block : sets)
+            if (usCollator.compare(blockName, block.canonicalName) == 0)
+              return block;
           break;
-        case NO_SPACES_NAME:
-          for (int i = 0; i < setLength; i++)
-            {
-              UnicodeBlock block = sets[i];
-              String nsName = block.canonicalName.replaceAll(" ","");
-              if (usCollator.compare(blockName, nsName) == 0)
-                return block;
-            }        
+        case NO_SPACES:
+          for (UnicodeBlock block : sets)
+	    {
+	      String nsName = block.canonicalName.replaceAll(" ","");
+	      if (usCollator.compare(blockName, nsName) == 0)
+		return block;
+	    }
+	  break;
+        case CONSTANT:
+          for (UnicodeBlock block : sets)
+            if (usCollator.compare(blockName, block.toString()) == 0)
+              return block;
           break;
-        case CONSTANT_NAME:
-          for (int i = 0; i < setLength; i++)
-            {
-              UnicodeBlock block = sets[i];
-              if (usCollator.compare(blockName, block.toString()) == 0)
-                return block;
-            }
-          break;
       }
       throw new IllegalArgumentException("No Unicode block found for " +
                                          blockName + ".");
@@ -1517,10 +1509,11 @@
      * this.  These are also returned from calls to <code>of(int)</code>
      * and <code>of(char)</code>.
      */
+    @Deprecated
     public static final UnicodeBlock SURROGATES_AREA
       = new UnicodeBlock(0xD800, 0xDFFF,
                          "SURROGATES_AREA",
-             "Surrogates Area");
+			 "Surrogates Area");
 
     /**
      * The defined subsets.
@@ -1699,11 +1692,78 @@
   public static final char MAX_VALUE = '\uFFFF';
 
   /**
+   * The minimum Unicode 4.0 code point.  This value is <code>0</code>.
+   * @since 1.5
+   */
+  public static final int MIN_CODE_POINT = 0;
+
+  /**
+   * The maximum Unicode 4.0 code point, which is greater than the range
+   * of the char data type.
+   * This value is <code>0x10FFFF</code>.
+   * @since 1.5
+   */
+  public static final int MAX_CODE_POINT = 0x10FFFF;
+
+  /**
+   * The minimum Unicode high surrogate code unit, or
+   * <emph>leading-surrogate</emph>, in the UTF-16 character encoding.
+   * This value is <code>'\uD800'</code>.
+   * @since 1.5
+   */
+  public static final char MIN_HIGH_SURROGATE = '\uD800';
+
+  /**
+   * The maximum Unicode high surrogate code unit, or
+   * <emph>leading-surrogate</emph>, in the UTF-16 character encoding.
+   * This value is <code>'\uDBFF'</code>.
+   * @since 1.5
+   */
+  public static final char MAX_HIGH_SURROGATE = '\uDBFF';
+
+  /**
+   * The minimum Unicode low surrogate code unit, or
+   * <emph>trailing-surrogate</emph>, in the UTF-16 character encoding.
+   * This value is <code>'\uDC00'</code>.
+   * @since 1.5
+   */
+  public static final char MIN_LOW_SURROGATE = '\uDC00';
+
+  /**
+   * The maximum Unicode low surrogate code unit, or
+   * <emph>trailing-surrogate</emph>, in the UTF-16 character encoding.
+   * This value is <code>'\uDFFF'</code>.
+   * @since 1.5
+   */
+  public static final char MAX_LOW_SURROGATE = '\uDFFF';  
+
+  /**
+   * The minimum Unicode surrogate code unit in the UTF-16 character encoding.
+   * This value is <code>'\uD800'</code>.
+   * @since 1.5
+   */
+  public static final char MIN_SURROGATE = MIN_HIGH_SURROGATE;
+
+  /**
+   * The maximum Unicode surrogate code unit in the UTF-16 character encoding.
+   * This value is <code>'\uDFFF'</code>.
+   * @since 1.5
+   */
+  public static final char MAX_SURROGATE = MAX_LOW_SURROGATE;
+
+  /**
+   * The lowest possible supplementary Unicode code point (the first code
+   * point outside the basic multilingual plane (BMP)).
+   * This value is <code>0x10000</code>.
+   */ 
+  public static final int MIN_SUPPLEMENTARY_CODE_POINT = 0x10000;
+
+  /**
    * Class object representing the primitive char data type.
    *
    * @since 1.1
    */
-  public static final Class TYPE = VMClassLoader.getPrimitiveClass('C');
+  public static final Class<Character> TYPE = (Class<Character>) VMClassLoader.getPrimitiveClass('C');
 
   /**
    * The number of bits needed to represent a <code>char</code>.
@@ -2089,71 +2149,6 @@
   private static final int MIRROR_MASK = 0x40;
 
   /**
-   * Min value for supplementary code point.
-   *
-   * @since 1.5
-   */
-  public static final int MIN_SUPPLEMENTARY_CODE_POINT = 0x10000;
-
-  /**
-   * Min value for code point.
-   *
-   * @since 1.5
-   */
-  public static final int MIN_CODE_POINT = 0; 
- 
- 
-  /**
-   * Max value for code point.
-   *
-   * @since 1.5
-   */
-  public static final int MAX_CODE_POINT = 0x010ffff;
-
-
-  /**
-   * Minimum high surrogate code in UTF-16 encoding.
-   *
-   * @since 1.5
-   */
-  public static final char MIN_HIGH_SURROGATE = '\ud800';
-
-  /**
-   * Maximum high surrogate code in UTF-16 encoding.
-   *
-   * @since 1.5
-   */
-  public static final char MAX_HIGH_SURROGATE = '\udbff';
- 
-  /**
-   * Minimum low surrogate code in UTF-16 encoding.
-   *
-   * @since 1.5
-   */
-  public static final char MIN_LOW_SURROGATE = '\udc00';
-
-  /**
-   * Maximum low surrogate code in UTF-16 encoding.
-   *
-   * @since 1.5
-   */
-  public static final char MAX_LOW_SURROGATE = '\udfff';
-
-  /**
-   * Minimum surrogate code in UTF-16 encoding.
-   *
-   * @since 1.5
-   */
-  public static final char MIN_SURROGATE = MIN_HIGH_SURROGATE;
-
-  /**
-   * Maximum low surrogate code in UTF-16 encoding.
-   *
-   * @since 1.5
-   */
-  public static final char MAX_SURROGATE = MAX_LOW_SURROGATE;
-
-  /**
    * Grabs an attribute offset from the Unicode attribute database. The lower
    * 5 bits are the character type, the next 2 bits are flags, and the top
    * 9 bits are the offset into the attribute tables. Note that the top 9
@@ -2504,8 +2499,211 @@
                | (1 << MODIFIER_LETTER)
                | (1 << OTHER_LETTER))) != 0;
   }
+  
+  /**
+   * Returns the index into the given CharSequence that is offset
+   * <code>codePointOffset</code> code points from <code>index</code>.
+   * @param seq the CharSequence
+   * @param index the start position in the CharSequence
+   * @param codePointOffset the number of code points offset from the start
+   * position
+   * @return the index into the CharSequence that is codePointOffset code 
+   * points offset from index
+   * 
+   * @throws NullPointerException if seq is null
+   * @throws IndexOutOfBoundsException if index is negative or greater than the
+   * length of the sequence.
+   * @throws IndexOutOfBoundsException if codePointOffset is positive and the 
+   * subsequence from index to the end of seq has fewer than codePointOffset
+   * code points
+   * @throws IndexOutOfBoundsException if codePointOffset is negative and the
+   * subsequence from the start of seq to index has fewer than 
+   * (-codePointOffset) code points
+   * @since 1.5
+   */
+  public static int offsetByCodePoints(CharSequence seq,
+                                       int index,
+                                       int codePointOffset)
+  {
+    int len = seq.length();
+    if (index < 0 || index > len)
+      throw new IndexOutOfBoundsException();
+    
+    int numToGo = codePointOffset;
+    int offset = index;
+    int adjust = 1;
+    if (numToGo >= 0)
+      {
+        for (; numToGo > 0; offset++)
+          {
+            numToGo--;
+            if (Character.isHighSurrogate(seq.charAt(offset))
+                && (offset + 1) < len
+                && Character.isLowSurrogate(seq.charAt(offset + 1)))
+              offset++;
+          }
+        return offset;
+      }
+    else
+      {
+        numToGo *= -1;
+        for (; numToGo > 0;)
+          {
+            numToGo--;
+            offset--;
+            if (Character.isLowSurrogate(seq.charAt(offset))
+                && (offset - 1) >= 0
+                && Character.isHighSurrogate(seq.charAt(offset - 1)))
+              offset--;
+          }
+        return offset;
+      }
+  }
+  
+  /**
+   * Returns the index into the given char subarray that is offset
+   * <code>codePointOffset</code> code points from <code>index</code>.
+   * @param a the char array
+   * @param start the start index of the subarray
+   * @param count the length of the subarray
+   * @param index the index to be offset
+   * @param codePointOffset the number of code points offset from <code>index
+   * </code>
+   * @return the index into the char array
+   * 
+   * @throws NullPointerException if a is null
+   * @throws IndexOutOfBoundsException if start or count is negative or if
+   * start + count is greater than the length of the array
+   * @throws IndexOutOfBoundsException if index is less than start or larger 
+   * than start + count
+   * @throws IndexOutOfBoundsException if codePointOffset is positive and the
+   * subarray from index to start + count - 1 has fewer than codePointOffset
+   * code points.
+   * @throws IndexOutOfBoundsException if codePointOffset is negative and the
+   * subarray from start to index - 1 has fewer than (-codePointOffset) code
+   * points
+   * @since 1.5
 
+   */
+  public static int offsetByCodePoints(char[] a,
+                                       int start,
+                                       int count,
+                                       int index,
+                                       int codePointOffset)
+  {
+    int len = a.length;
+    int end = start + count;
+    if (start < 0 || count < 0 || end > len || index < start || index > end)
+      throw new IndexOutOfBoundsException();
+    
+    int numToGo = codePointOffset;
+    int offset = index;
+    int adjust = 1;
+    if (numToGo >= 0)
+      {
+        for (; numToGo > 0; offset++)
+          {
+            numToGo--;
+            if (Character.isHighSurrogate(a[offset])
+                && (offset + 1) < len
+                && Character.isLowSurrogate(a[offset + 1]))
+              offset++;
+          }
+        return offset;
+      }
+    else
+      {
+        numToGo *= -1;
+        for (; numToGo > 0;)
+          {
+            numToGo--;
+            offset--;
+            if (Character.isLowSurrogate(a[offset])
+                && (offset - 1) >= 0
+                && Character.isHighSurrogate(a[offset - 1]))
+              offset--;
+            if (offset < start)
+              throw new IndexOutOfBoundsException();
+          }
+        return offset;
+      }
+
+  }
+
   /**
+   * Returns the number of Unicode code points in the specified range of the
+   * given CharSequence.  The first char in the range is at position
+   * beginIndex and the last one is at position endIndex - 1.  Paired 
+   * surrogates (supplementary characters are represented by a pair of chars - 
+   * one from the high surrogates and one from the low surrogates) 
+   * count as just one code point.
+   * @param seq the CharSequence to inspect
+   * @param beginIndex the beginning of the range
+   * @param endIndex the end of the range
+   * @return the number of Unicode code points in the given range of the 
+   * sequence
+   * @throws NullPointerException if seq is null
+   * @throws IndexOutOfBoundsException if beginIndex is negative, endIndex is
+   * larger than the length of seq, or if beginIndex is greater than endIndex.
+   * @since 1.5
+   */
+  public static int codePointCount(CharSequence seq, int beginIndex,
+                                   int endIndex)
+  {
+    int len = seq.length();
+    if (beginIndex < 0 || endIndex > len || beginIndex > endIndex)
+      throw new IndexOutOfBoundsException();
+        
+    int count = 0;
+    for (int i = beginIndex; i < endIndex; i++)
+      {
+        count++;
+        // If there is a pairing, count it only once.
+        if (isHighSurrogate(seq.charAt(i)) && (i + 1) < endIndex
+            && isLowSurrogate(seq.charAt(i + 1)))
+          i ++;
+      }    
+    return count;
+  }
+
+  /**
+   * Returns the number of Unicode code points in the specified range of the
+   * given char array.  The first char in the range is at position
+   * offset and the length of the range is count.  Paired surrogates
+   * (supplementary characters are represented by a pair of chars - 
+   * one from the high surrogates and one from the low surrogates) 
+   * count as just one code point.
+   * @param a the char array to inspect
+   * @param offset the beginning of the range
+   * @param count the length of the range
+   * @return the number of Unicode code points in the given range of the 
+   * array
+   * @throws NullPointerException if a is null
+   * @throws IndexOutOfBoundsException if offset or count is negative or if 
+   * offset + countendIndex is larger than the length of a.
+   * @since 1.5
+   */
+  public static int codePointCount(char[] a, int offset,
+                                   int count)
+  {
+    int len = a.length;
+    int end = offset + count;
+    if (offset < 0 || count < 0 || end > len)
+      throw new IndexOutOfBoundsException();
+        
+    int counter = 0;
+    for (int i = offset; i < end; i++)
+      {
+        counter++;
+        // If there is a pairing, count it only once.
+        if (isHighSurrogate(a[i]) && (i + 1) < end
+            && isLowSurrogate(a[i + 1]))
+          i ++;
+      }    
+    return counter;
+  }
+
+  /**
    * Determines if a character is a Unicode letter or a Unicode digit. This
    * is the combination of isLetter and isDigit.
    * <br>
@@ -3497,30 +3695,13 @@
   }
 
   /**
-   * Compares an object to this Character.  Assuming the object is a
-   * Character object, this method performs the same comparison as
-   * compareTo(Character).
-   *
-   * @param o object to compare
-   * @return the comparison value
-   * @throws ClassCastException if o is not a Character object
-   * @throws NullPointerException if o is null
-   * @see #compareTo(Character)
-   * @since 1.2
-   */
-  public int compareTo(Object o)
-  {
-    return compareTo((Character) o);
-  }
-
-  /**
    * Returns an <code>Character</code> object wrapping the value.
    * In contrast to the <code>Character</code> constructor, this method
    * will cache some values.  It is used by boxing conversion.
    *
    * @param val the value to wrap
    * @return the <code>Character</code>
-   * 
+   *
    * @since 1.5
    */
   public static Character valueOf(char val)
@@ -3529,9 +3710,9 @@
       return new Character(val);
     synchronized (charCache)
       {
-    if (charCache[val - MIN_VALUE] == null)
-      charCache[val - MIN_VALUE] = new Character(val);
-    return charCache[val - MIN_VALUE];
+	if (charCache[val - MIN_VALUE] == null)
+	  charCache[val - MIN_VALUE] = new Character(val);
+	return charCache[val - MIN_VALUE];
       }
   }
 
@@ -3559,6 +3740,9 @@
    */
   public static char[] toChars(int codePoint)
   {
+    if (!isValidCodePoint(codePoint))
+      throw new IllegalArgumentException("Illegal Unicode code point : "
+                                         + codePoint);
     char[] result = new char[charCount(codePoint)];
     int ignore = toChars(codePoint, result, 0);
     return result;
@@ -3776,7 +3960,7 @@
    */
   public static int codePointAt(char[] chars, int index, int limit)
   {
-    if (index < 0 || index >= limit || limit < 0 || limit >= chars.length)
+    if (index < 0 || index >= limit || limit < 0 || limit > chars.length)
       throw new IndexOutOfBoundsException();
     char high = chars[index];
     if (! isHighSurrogate(high) || ++index >= limit)
Index: libjava/java/text/DecimalFormatSymbols.java
===================================================================
--- libjava/java/text/DecimalFormatSymbols.java	(revision 122231)
+++ libjava/java/text/DecimalFormatSymbols.java	(working copy)
@@ -1,5 +1,5 @@
 /* DecimalFormatSymbols.java -- Format symbols used by DecimalFormat
-   Copyright (C) 1999, 2000, 2001, 2004 Free Software Foundation, Inc.
+   Copyright (C) 1999, 2000, 2001, 2004, 2007 Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -121,8 +121,19 @@
   /**
    * This method initializes a new instance of
    * <code>DecimalFormatSymbols</code> for the specified locale.
+   * <strong>Note</strong>: if the locale does not have an associated
+   * <code>Currency</code> instance, the currency symbol and
+   * international currency symbol will be set to the strings "?"
+   * and "XXX" respectively.  This generally happens with language
+   * locales (those with no specified country), such as
+   * <code>Locale.ENGLISH</code>.  This constructor only obtains
+   * instances using the runtime's resources; to also include
+   * {@link java.text.spi.DecimalFormatSymbolsProvider} instances,
+   * call {@link #getInstance(java.util.Locale)} instead.
    *
    * @param loc The local to load symbols for.
+   * @throws NullPointerException if the locale is null.
+   * @see #getInstance(java.util.Locale)
    */
   public DecimalFormatSymbols (Locale loc)
   {
@@ -136,14 +147,26 @@
       {
 	res = null;
       }
-    currencySymbol = safeGetString (res, "currencySymbol", "$");
+    currency = Currency.getInstance("XXX");
+    currencySymbol = "?";
+    intlCurrencySymbol = "XXX";
+    try
+      {
+	Currency localeCurrency = Currency.getInstance(loc);
+	if (localeCurrency != null)
+	  {
+	    setCurrency(localeCurrency);
+	  }
+      }
+    catch(IllegalArgumentException exception)
+      {
+	/* Locale has an invalid currency */
+      }
     decimalSeparator = safeGetChar (res, "decimalSeparator", '.');
     digit = safeGetChar (res, "digit", '#');
     exponential = safeGetChar (res, "exponential", 'E');
     groupingSeparator = safeGetChar (res, "groupingSeparator", ',');
     infinity = safeGetString (res, "infinity", "\u221e");
-    // FIXME: default?
-    intlCurrencySymbol = safeGetString (res, "intlCurrencySymbol", "$");
     try
       {
 	monetarySeparator = safeGetChar (res, "monetarySeparator", '.');
@@ -200,12 +223,13 @@
    * Returns the currency corresponding to the currency symbol stored
    * in the instance of <code>DecimalFormatSymbols</code>.
    *
-   * @return A new instance of <code>Currency</code> if
-   * the currency code matches a known one.
+   * @return An instance of <code>Currency</code> which matches
+   *         the currency used, or null if there is no corresponding
+   *         instance.
    */
   public Currency getCurrency ()
   {
-    return Currency.getInstance (currencySymbol);
+    return currency;
   }
 
   /**
@@ -368,13 +392,16 @@
   }
 
   /**
-   * This method sets the currency to the specified value.
+   * This method sets the currency symbol and ISO 4217 currency
+   * code to the values obtained from the supplied currency.
    *
-   * @param currency The new currency
+   * @param currency the currency from which to obtain the values.
+   * @throws NullPointerException if the currency is null.
    */
   public void setCurrency (Currency currency)
   {
     setCurrencySymbol (currency.getSymbol());
+    this.currency = currency;
   }
 
   /**
@@ -435,14 +462,31 @@
   }
 
   /**
-   * This method sets the international currency symbols to the
-   * specified value. 
+   * This method sets the international currency symbol to the
+   * specified value. If a valid <code>Currency</code> instance
+   * exists for the international currency code, then this is
+   * used for the currency attribute, and the currency symbol
+   * is set to the corresponding value from this instance.
+   * Otherwise, the currency attribute is set to null and the
+   * symbol is left unmodified. 
    *
-   * @param intlCurrencySymbol The new international currency symbol.
+   * @param currencyCode The new international currency symbol.
    */
-  public void setInternationalCurrencySymbol (String currency)
+  public void setInternationalCurrencySymbol (String currencyCode)
   {
-    intlCurrencySymbol = currency;
+    intlCurrencySymbol = currencyCode;
+    try
+      {
+	currency = Currency.getInstance(currencyCode);
+      }
+    catch (IllegalArgumentException exception)
+      {
+	currency = null;
+      }
+    if (currency != null)
+      {
+        setCurrencySymbol(currency.getSymbol(locale));
+      }
   }
 
   /**
@@ -593,7 +637,17 @@
    * @serial The locale of these currency symbols.
    */
   private Locale locale;
- 
+
+  /**
+   * The currency used for the symbols in this instance.
+   * This is stored temporarily for efficiency reasons,
+   * as well as to ensure that the correct instance
+   * is restored from the currency code.
+   *
+   * @serial Ignored.
+   */
+  private transient Currency currency;
+
   private static final long serialVersionUID = 5772796243397350300L;
 
   private void readObject(ObjectInputStream stream)
Index: libjava/java/util/logging/LogManager.java
===================================================================
--- libjava/java/util/logging/LogManager.java	(revision 122231)
+++ libjava/java/util/logging/LogManager.java	(working copy)
@@ -559,13 +559,21 @@
 
 	if ("handlers".equals(key))
 	  {
-	    StringTokenizer tokenizer = new StringTokenizer(value);
+	    // In Java 5 and earlier this was specified to be
+	    // whitespace-separated, but in reality it also accepted
+	    // commas (tomcat relied on this), and in Java 6 the
+	    // documentation was updated to fit the implementation.
+	    StringTokenizer tokenizer = new StringTokenizer(value,
+							    " \t\n\r\f,");
 	    while (tokenizer.hasMoreTokens())
 	      {
 		String handlerName = tokenizer.nextToken();
                 Handler handler = (Handler)
                   createInstance(handlerName, Handler.class, key);
-                Logger.root.addHandler(handler);
+		// Tomcat also relies on the implementation ignoring
+		// items in 'handlers' which are not class names.
+		if (handler != null)
+		  Logger.root.addHandler(handler);
 	      }
 	  }
 
Index: libjava/java/util/GregorianCalendar.java
===================================================================
--- libjava/java/util/GregorianCalendar.java	(revision 122231)
+++ libjava/java/util/GregorianCalendar.java	(working copy)
@@ -1,1358 +0,0 @@
-/* java.util.GregorianCalendar
-   Copyright (C) 1998, 1999, 2001, 2002, 2003, 2004
-   Free Software Foundation, Inc.
-
-This file is part of GNU Classpath.
-
-GNU Classpath is free software; you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation; either version 2, or (at your option)
-any later version.
-
-GNU Classpath is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
-02110-1301 USA.
-
-Linking this library statically or dynamically with other modules is
-making a combined work based on this library.  Thus, the terms and
-conditions of the GNU General Public License cover the whole
-combination.
-
-As a special exception, the copyright holders of this library give you
-permission to link this library with independent modules to produce an
-executable, regardless of the license terms of these independent
-modules, and to copy and distribute the resulting executable under
-terms of your choice, provided that you also meet, for each linked
-independent module, the terms and conditions of the license of that
-module.  An independent module is a module which is not derived from
-or based on this library.  If you modify this library, you may extend
-this exception to your version of the library, but you are not
-obligated to do so.  If you do not wish to do so, delete this
-exception statement from your version. */
-
-
-package java.util;
-
-
-/**
- * <p>
- * This class represents the Gregorian calendar, that is used in most
- * countries all over the world.  It does also handle the Julian calendar
- * for dates smaller than the date of the change to the Gregorian calendar.
- * The Gregorian calendar differs from the Julian calendar by a different
- * leap year rule (no leap year every 100 years, except if year is divisible
- * by 400).
- * </p>
- * <p>
- * This change date is different from country to country, and can be changed with
- * <code>setGregorianChange</code>.  The first countries to adopt the Gregorian
- * calendar did so on the 15th of October, 1582.  This date followed October
- * the 4th, 1582 in the Julian calendar system.  The non-existant days that were
- * omitted when the change took place are interpreted as Gregorian dates.
- * </p>
- * <p>
- * Prior to the changeover date, New Year's Day occurred on the 25th of March.
- * However, this class always takes New Year's Day as being the 1st of January.
- * Client code should manually adapt the year value, if required, for dates
- * between January the 1st and March the 24th in years prior to the changeover.
- * </p>
- * <p>
- * Any date infinitely forwards or backwards in time can be represented by
- * this class.  A <em>proleptic</em> calendar system is used, which allows
- * future dates to be created via the existing rules.  This allows meaningful
- * and consistent dates to be produced for all years.  However, dates are only
- * historically accurate following March the 1st, 4AD when the Julian calendar
- * system was adopted.  Prior to this, leap year rules were applied erraticly.
- * </p>
- * <p>
- * There are two eras available for the Gregorian calendar, namely BC and AD.
- * </p>
- * <p>
- * Weeks are defined as a period of seven days, beginning on the first day
- * of the week, as returned by <code>getFirstDayOfWeek()</code>, and ending
- * on the day prior to this.
- * </p>
- * <p>
- * The weeks of the year are numbered from 1 to a possible 53.  The first week
- * of the year is defined as the first week that contains at least the minimum
- * number of days of the first week in the new year (retrieved via
- * <code>getMinimalDaysInFirstWeek()</code>).  All weeks after this are numbered
- * from 2 onwards.
- * </p>
- * <p>
- * For example, take the year 2004.  It began on a Thursday.  The first week
- * of 2004 depends both on where a week begins and how long it must minimally
- * last.  Let's say that the week begins on a Monday and must have a minimum
- * of 5 days.  In this case, the first week begins on Monday, the 5th of January.
- * The first 4 days (Thursday to Sunday) are not eligible, as they are too few
- * to make up the minimum number of days of the first week which must be in
- * the new year.  If the minimum was lowered to 4 days, then the first week
- * would instead begin on Monday, the 29th of December, 2003.  This first week
- * has 4 of its days in the new year, and is now eligible.
- * </p>
- * <p>
- * The weeks of the month are numbered from 0 to a possible 6.  The first week
- * of the month (numbered 1) is a set of days, prior to the first day of the week,
- * which number at least the minimum number of days in a week.  Unlike the first
- * week of the year, the first week of the month only uses days from that particular
- * month.  As a consequence, it may have a variable number of days (from the minimum
- * number required up to a full week of 7) and it need not start on the first day of
- * the week.  It must, however, be following by the first day of the week, as this
- * marks the beginning of week 2.  Any days of the month which occur prior to the
- * first week (because the first day of the week occurs before the minimum number
- * of days is met) are seen as week 0.
- * </p>
- * <p>
- * Again, we will take the example of the year 2004 to demonstrate this.  September
- * 2004 begins on a Wednesday.  Taking our first day of the week as Monday, and the
- * minimum length of the first week as 6, we find that week 1 runs from Monday,
- * the 6th of September to Sunday the 12th.  Prior to the 6th, there are only
- * 5 days (Wednesday through to Sunday).  This is too small a number to meet the
- * minimum, so these are classed as being days in week 0.  Week 2 begins on the
- * 13th, and so on.  This changes if we reduce the minimum to 5.  In this case,
- * week 1 is a truncated week from Wednesday the 1st to Sunday the 5th, and week
- * 0 doesn't exist.  The first seven day week is week 2, starting on the 6th.
- * </p>
- * <p>
- * On using the <code>clear()</code> method, the Gregorian calendar returns
- * to its default value of the 1st of January, 1970 AD 00:00:00 (the epoch).
- * The day of the week is set to the correct day for that particular time.
- * The day is also the first of the month, and the date is in week 0.
- * </p>
- *
- * @see Calendar
- * @see TimeZone
- * @see Calendar#getFirstDayOfWeek()
- * @see Calendar#getMinimalDaysInFirstWeek()
- */
-public class GregorianCalendar extends Calendar
-{
-  /**
-   * Constant representing the era BC (Before Christ).
-   */
-  public static final int BC = 0;
-
-  /**
-   * Constant representing the era AD (Anno Domini).
-   */
-  public static final int AD = 1;
-
-  /**
-   * The point at which the Gregorian calendar rules were used.
-   * This is locale dependent; the default for most catholic
-   * countries is midnight (UTC) on October 5, 1582 (Julian),
-   * or October 15, 1582 (Gregorian).
-   *
-   * @serial the changeover point from the Julian calendar
-   *         system to the Gregorian.
-   */
-  private long gregorianCutover;
-
-  /**
-   * For compatability with Sun's JDK.
-   */
-  static final long serialVersionUID = -8125100834729963327L;
-
-  /**
-   * The name of the resource bundle. Used only by getBundle()
-   */
-  private static final String bundleName = "gnu.java.locale.Calendar";
-
-  /**
-   * Days in the epoch. Relative Jan 1, year '0' which is not a leap year.
-   * (although there is no year zero, this does not matter.)
-   * This is consistent with the formula:
-   * = (year-1)*365L + ((year-1) >> 2)
-   *
-   * Plus the gregorian correction:
-   *  Math.floor((year-1) / 400.) - Math.floor((year-1) / 100.);
-   * For a correct julian date, the correction is -2 instead.
-   *
-   * The gregorian cutover in 1582 was 10 days, so by calculating the
-   * correction from year zero, we have 15 non-leap days (even centuries)
-   * minus 3 leap days (year 400,800,1200) = 12. Subtracting two corrects
-   * this to the correct number 10.
-   */
-  private static final int EPOCH_DAYS = 719162;
-
-  /**
-   * Constructs a new GregorianCalender representing the current
-   * time, using the default time zone and the default locale.
-   */
-  public GregorianCalendar()
-  {
-    this(TimeZone.getDefault(), Locale.getDefault());
-  }
-
-  /**
-   * Constructs a new GregorianCalender representing the current
-   * time, using the specified time zone and the default locale.
-   *
-   * @param zone a time zone.
-   */
-  public GregorianCalendar(TimeZone zone)
-  {
-    this(zone, Locale.getDefault());
-  }
-
-  /**
-   * Constructs a new GregorianCalender representing the current
-   * time, using the default time zone and the specified locale.
-   *
-   * @param locale a locale.
-   */
-  public GregorianCalendar(Locale locale)
-  {
-    this(TimeZone.getDefault(), locale);
-  }
-
-  /**
-   * Constructs a new GregorianCalender representing the current
-   * time with the given time zone and the given locale.
-   *
-   * @param zone a time zone.
-   * @param locale a locale.
-   */
-  public GregorianCalendar(TimeZone zone, Locale locale)
-  {
-    this(zone, locale, false);
-    setTimeInMillis(System.currentTimeMillis());
-    complete();
-  }
-
-  /**
-   * Common constructor that all constructors should call.
-   * @param zone a time zone.
-   * @param locale a locale.
-   * @param unused unused parameter to make the signature differ from
-   * the public constructor (TimeZone, Locale).
-   */
-  private GregorianCalendar(TimeZone zone, Locale locale, boolean unused)
-  {
-    super(zone, locale);
-    ResourceBundle rb = ResourceBundle.getBundle(bundleName, locale,
-                                                 ClassLoader
-                                                 .getSystemClassLoader());
-    gregorianCutover = ((Date) rb.getObject("gregorianCutOver")).getTime();
-  }
-
-  /**
-   * Constructs a new GregorianCalendar representing midnight on the
-   * given date with the default time zone and locale.
-   * @param year corresponds to the YEAR time field.
-   * @param month corresponds to the MONTH time field.
-   * @param day corresponds to the DAY time field.
-   */
-  public GregorianCalendar(int year, int month, int day)
-  {
-    this(TimeZone.getDefault(), Locale.getDefault(), false);
-    set(year, month, day);
-  }
-
-  /**
-   * Constructs a new GregorianCalendar representing midnight on the
-   * given date with the default time zone and locale.
-   *
-   * @param year corresponds to the YEAR time field.
-   * @param month corresponds to the MONTH time field.
-   * @param day corresponds to the DAY time field.
-   * @param hour corresponds to the HOUR_OF_DAY time field.
-   * @param minute corresponds to the MINUTE time field.
-   */
-  public GregorianCalendar(int year, int month, int day, int hour, int minute)
-  {
-    this(TimeZone.getDefault(), Locale.getDefault(), false);
-    set(year, month, day, hour, minute);
-  }
-
-  /**
-   * Constructs a new GregorianCalendar representing midnight on the
-   * given date with the default time zone and locale.
-   *
-   * @param year corresponds to the YEAR time field.
-   * @param month corresponds to the MONTH time field.
-   * @param day corresponds to the DAY time field.
-   * @param hour corresponds to the HOUR_OF_DAY time field.
-   * @param minute corresponds to the MINUTE time field.
-   * @param second corresponds to the SECOND time field.
-   */
-  public GregorianCalendar(int year, int month, int day, int hour, int minute,
-                           int second)
-  {
-    this(TimeZone.getDefault(), Locale.getDefault(), false);
-    set(year, month, day, hour, minute, second);
-  }
-
-  /**
-   * Sets the date of the switch from Julian dates to Gregorian dates.
-   * You can use <code>new Date(Long.MAX_VALUE)</code> to use a pure
-   * Julian calendar, or <code>Long.MIN_VALUE</code> for a pure Gregorian
-   * calendar.
-   *
-   * @param date the date of the change.
-   */
-  public void setGregorianChange(Date date)
-  {
-    gregorianCutover = date.getTime();
-  }
-
-  /**
-   * Gets the date of the switch from Julian dates to Gregorian dates.
-   *
-   * @return the date of the change.
-   */
-  public final Date getGregorianChange()
-  {
-    return new Date(gregorianCutover);
-  }
-
-  /**
-   * <p>
-   * Determines if the given year is a leap year.  The result is
-   * undefined if the Gregorian change took place in 1800, so that
-   * the end of February is skipped, and that year is specified.
-   * (well...).
-   * </p>
-   * <p>
-   * To specify a year in the BC era, use a negative value calculated
-   * as 1 - y, where y is the required year in BC.  So, 1 BC is 0,
-   * 2 BC is -1, 3 BC is -2, etc.
-   * </p>
-   *
-   * @param year a year (use a negative value for BC).
-   * @return true, if the given year is a leap year, false otherwise.
-   */
-  public boolean isLeapYear(int year)
-  {
-    // Only years divisible by 4 can be leap years
-    if ((year & 3) != 0)
-      return false;
-
-    // Is the leap-day a Julian date? Then it's a leap year
-    if (! isGregorian(year, 31 + 29 - 1))
-      return true;
-
-    // Apply gregorian rules otherwise
-    return ((year % 100) != 0 || (year % 400) == 0);
-  }
-
-  /**
-   * Retrieves the day of the week corresponding to the specified
-   * day of the specified year.
-   *
-   * @param year the year in which the dayOfYear occurs.
-   * @param dayOfYear the day of the year (an integer between 0 and
-   *        and 366)
-   */
-  private int getWeekDay(int year, int dayOfYear)
-  {
-    boolean greg = isGregorian(year, dayOfYear);
-    int day = (int) getLinearDay(year, dayOfYear, greg);
-
-    // The epoch was a thursday.
-    int weekday = (day + THURSDAY) % 7;
-    if (weekday <= 0)
-      weekday += 7;
-    return weekday;
-  }
-
-  /**
-   * Returns the day of the week for the first day of a given month (0..11)
-   */
-  private int getFirstDayOfMonth(int year, int month)
-  {
-    int[] dayCount = { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 };
-
-    if (month > 11)
-      {
-	year += (month / 12);
-	month = month % 12;
-      }
-
-    if (month < 0)
-      {
-	year += (int) month / 12;
-	month = month % 12;
-	if (month < 0)
-	  {
-	    month += 12;
-	    year--;
-	  }
-      }
-
-    int dayOfYear = dayCount[month] + 1;
-    if (month > 1)
-      if (isLeapYear(year))
-	dayOfYear++;
-
-    boolean greg = isGregorian(year, dayOfYear);
-    int day = (int) getLinearDay(year, dayOfYear, greg);
-
-    // The epoch was a thursday.
-    int weekday = (day + THURSDAY) % 7;
-    if (weekday <= 0)
-      weekday += 7;
-    return weekday;
-  }
-
-  /**
-   * Takes a year, and a (zero based) day of year and determines
-   * if it is gregorian or not.
-   */
-  private boolean isGregorian(int year, int dayOfYear)
-  {
-    int relativeDay = (year - 1) * 365 + ((year - 1) >> 2) + dayOfYear
-                      - EPOCH_DAYS; // gregorian days from 1 to epoch.
-    int gregFactor = (int) Math.floor((double) (year - 1) / 400.)
-                     - (int) Math.floor((double) (year - 1) / 100.);
-
-    return ((relativeDay + gregFactor) * 60L * 60L * 24L * 1000L >= gregorianCutover);
-  }
-
-  /**
-   * Check set fields for validity, without leniency.
-   *
-   * @throws IllegalArgumentException if a field is invalid
-   */
-  private void nonLeniencyCheck() throws IllegalArgumentException
-  {
-    int[] month_days = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
-    int year = fields[YEAR];
-    int month = fields[MONTH];
-    int leap = isLeapYear(year) ? 1 : 0;
-
-    if (isSet[ERA] && fields[ERA] != AD && fields[ERA] != BC)
-      throw new IllegalArgumentException("Illegal ERA.");
-    if (isSet[YEAR] && fields[YEAR] < 1)
-      throw new IllegalArgumentException("Illegal YEAR.");
-    if (isSet[MONTH] && (month < 0 || month > 11))
-      throw new IllegalArgumentException("Illegal MONTH.");
-    if (isSet[WEEK_OF_YEAR])
-      {
-	int daysInYear = 365 + leap;
-	daysInYear += (getFirstDayOfMonth(year, 0) - 1); // pad first week
-	int last = getFirstDayOfMonth(year, 11) + 4;
-	if (last > 7)
-	  last -= 7;
-	daysInYear += 7 - last;
-	int weeks = daysInYear / 7;
-	if (fields[WEEK_OF_YEAR] < 1 || fields[WEEK_OF_YEAR] > weeks)
-	  throw new IllegalArgumentException("Illegal WEEK_OF_YEAR.");
-      }
-
-    if (isSet[WEEK_OF_MONTH])
-      {
-	int weeks = (month == 1 && leap == 0) ? 4 : 5;
-	if (fields[WEEK_OF_MONTH] < 1 || fields[WEEK_OF_MONTH] > weeks)
-	  throw new IllegalArgumentException("Illegal WEEK_OF_MONTH.");
-      }
-
-    if (isSet[DAY_OF_MONTH])
-      if (fields[DAY_OF_MONTH] < 1
-          || fields[DAY_OF_MONTH] > month_days[month]
-          + ((month == 1) ? leap : 0))
-	throw new IllegalArgumentException("Illegal DAY_OF_MONTH.");
-
-    if (isSet[DAY_OF_YEAR]
-        && (fields[DAY_OF_YEAR] < 1 || fields[DAY_OF_YEAR] > 365 + leap))
-      throw new IllegalArgumentException("Illegal DAY_OF_YEAR.");
-
-    if (isSet[DAY_OF_WEEK]
-        && (fields[DAY_OF_WEEK] < 1 || fields[DAY_OF_WEEK] > 7))
-      throw new IllegalArgumentException("Illegal DAY_OF_WEEK.");
-
-    if (isSet[DAY_OF_WEEK_IN_MONTH])
-      {
-	int weeks = (month == 1 && leap == 0) ? 4 : 5;
-	if (fields[DAY_OF_WEEK_IN_MONTH] < -weeks
-	    || fields[DAY_OF_WEEK_IN_MONTH] > weeks)
-	  throw new IllegalArgumentException("Illegal DAY_OF_WEEK_IN_MONTH.");
-      }
-
-    if (isSet[AM_PM] && fields[AM_PM] != AM && fields[AM_PM] != PM)
-      throw new IllegalArgumentException("Illegal AM_PM.");
-    if (isSet[HOUR] && (fields[HOUR] < 0 || fields[HOUR] > 11))
-      throw new IllegalArgumentException("Illegal HOUR.");
-    if (isSet[HOUR_OF_DAY]
-        && (fields[HOUR_OF_DAY] < 0 || fields[HOUR_OF_DAY] > 23))
-      throw new IllegalArgumentException("Illegal HOUR_OF_DAY.");
-    if (isSet[MINUTE] && (fields[MINUTE] < 0 || fields[MINUTE] > 59))
-      throw new IllegalArgumentException("Illegal MINUTE.");
-    if (isSet[SECOND] && (fields[SECOND] < 0 || fields[SECOND] > 59))
-      throw new IllegalArgumentException("Illegal SECOND.");
-    if (isSet[MILLISECOND]
-        && (fields[MILLISECOND] < 0 || fields[MILLISECOND] > 999))
-      throw new IllegalArgumentException("Illegal MILLISECOND.");
-    if (isSet[ZONE_OFFSET]
-        && (fields[ZONE_OFFSET] < -12 * 60 * 60 * 1000L
-        || fields[ZONE_OFFSET] > 12 * 60 * 60 * 1000L))
-      throw new IllegalArgumentException("Illegal ZONE_OFFSET.");
-    if (isSet[DST_OFFSET]
-        && (fields[DST_OFFSET] < -12 * 60 * 60 * 1000L
-        || fields[DST_OFFSET] > 12 * 60 * 60 * 1000L))
-      throw new IllegalArgumentException("Illegal DST_OFFSET.");
-  }
-
-  /**
-   * Converts the time field values (<code>fields</code>) to
-   * milliseconds since the epoch UTC (<code>time</code>).
-   *
-   * @throws IllegalArgumentException if any calendar fields
-   *         are invalid.
-   */
-  protected synchronized void computeTime()
-  {
-    int millisInDay = 0;
-    int era = fields[ERA];
-    int year = fields[YEAR];
-    int month = fields[MONTH];
-    int day = fields[DAY_OF_MONTH];
-
-    int minute = fields[MINUTE];
-    int second = fields[SECOND];
-    int millis = fields[MILLISECOND];
-    int[] month_days = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
-    int[] dayCount = { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 };
-    int hour = 0;
-
-    if (! isLenient())
-      nonLeniencyCheck();
-
-    if (! isSet[MONTH] && (! isSet[DAY_OF_WEEK] || isSet[WEEK_OF_YEAR]))
-      {
-	// 5: YEAR + DAY_OF_WEEK + WEEK_OF_YEAR
-	if (isSet[WEEK_OF_YEAR])
-	  {
-	    int first = getFirstDayOfMonth(year, 0);
-	    int offs = 1;
-	    int daysInFirstWeek = getFirstDayOfWeek() - first;
-	    if (daysInFirstWeek <= 0)
-	      daysInFirstWeek += 7;
-
-	    if (daysInFirstWeek < getMinimalDaysInFirstWeek())
-	      offs += daysInFirstWeek;
-	    else
-	      offs -= 7 - daysInFirstWeek;
-	    month = 0;
-	    day = offs + 7 * (fields[WEEK_OF_YEAR] - 1);
-	    offs = fields[DAY_OF_WEEK] - getFirstDayOfWeek();
-
-	    if (offs < 0)
-	      offs += 7;
-	    day += offs;
-	  }
-	else
-	  {
-	    // 4:  YEAR + DAY_OF_YEAR
-	    month = 0;
-	    day = fields[DAY_OF_YEAR];
-	  }
-      }
-    else
-      {
-	if (isSet[DAY_OF_WEEK])
-	  {
-	    int first = getFirstDayOfMonth(year, month);
-
-	    // 3: YEAR + MONTH + DAY_OF_WEEK_IN_MONTH + DAY_OF_WEEK
-	    if (isSet[DAY_OF_WEEK_IN_MONTH])
-	      {
-		if (fields[DAY_OF_WEEK_IN_MONTH] < 0)
-		  {
-		    month++;
-		    first = getFirstDayOfMonth(year, month);
-		    day = 1 + 7 * (fields[DAY_OF_WEEK_IN_MONTH]);
-		  }
-		else
-		  day = 1 + 7 * (fields[DAY_OF_WEEK_IN_MONTH] - 1);
-
-		int offs = fields[DAY_OF_WEEK] - first;
-		if (offs < 0)
-		  offs += 7;
-		day += offs;
-	      }
-	    else
-	      { // 2: YEAR + MONTH + WEEK_OF_MONTH + DAY_OF_WEEK
-		int offs = 1;
-		int daysInFirstWeek = getFirstDayOfWeek() - first;
-		if (daysInFirstWeek <= 0)
-		  daysInFirstWeek += 7;
-
-		if (daysInFirstWeek < getMinimalDaysInFirstWeek())
-		  offs += daysInFirstWeek;
-		else
-		  offs -= 7 - daysInFirstWeek;
-
-		day = offs + 7 * (fields[WEEK_OF_MONTH] - 1);
-		offs = fields[DAY_OF_WEEK] - getFirstDayOfWeek();
-		if (offs <= 0)
-		  offs += 7;
-		day += offs;
-	      }
-	  }
-
-	// 1:  YEAR + MONTH + DAY_OF_MONTH
-      }
-    if (era == BC && year > 0)
-      year = 1 - year;
-
-    // rest of code assumes day/month/year set
-    // should negative BC years be AD?
-    // get the hour (but no check for validity)
-    if (isSet[HOUR])
-      {
-	hour = fields[HOUR];
-	if (fields[AM_PM] == PM)
-	  hour += 12;
-      }
-    else
-      hour = fields[HOUR_OF_DAY];
-
-    // Read the era,year,month,day fields and convert as appropriate.
-    // Calculate number of milliseconds into the day
-    // This takes care of both h, m, s, ms over/underflows.
-    long allMillis = (((hour * 60L) + minute) * 60L + second) * 1000L + millis;
-    day += allMillis / (24 * 60 * 60 * 1000L);
-    millisInDay = (int) (allMillis % (24 * 60 * 60 * 1000L));
-
-    if (month < 0)
-      {
-	year += (int) month / 12;
-	month = month % 12;
-	if (month < 0)
-	  {
-	    month += 12;
-	    year--;
-	  }
-      }
-    if (month > 11)
-      {
-	year += (month / 12);
-	month = month % 12;
-      }
-
-    month_days[1] = isLeapYear(year) ? 29 : 28;
-
-    while (day <= 0)
-      {
-	if (month == 0)
-	  {
-	    year--;
-	    month_days[1] = isLeapYear(year) ? 29 : 28;
-	  }
-	month = (month + 11) % 12;
-	day += month_days[month];
-      }
-    while (day > month_days[month])
-      {
-	day -= (month_days[month]);
-	month = (month + 1) % 12;
-	if (month == 0)
-	  {
-	    year++;
-	    month_days[1] = isLeapYear(year) ? 29 : 28;
-	  }
-      }
-
-    // ok, by here we have valid day,month,year,era and millisinday
-    int dayOfYear = dayCount[month] + day - 1; // (day starts on 1)
-    if (isLeapYear(year) && month > 1)
-      dayOfYear++;
-
-    int relativeDay = (year - 1) * 365 + ((year - 1) >> 2) + dayOfYear
-                      - EPOCH_DAYS; // gregorian days from 1 to epoch.
-    int gregFactor = (int) Math.floor((double) (year - 1) / 400.)
-                     - (int) Math.floor((double) (year - 1) / 100.);
-
-    if ((relativeDay + gregFactor) * 60L * 60L * 24L * 1000L >= gregorianCutover)
-      relativeDay += gregFactor;
-    else
-      relativeDay -= 2;
-
-    time = relativeDay * (24 * 60 * 60 * 1000L) + millisInDay;
-
-    // the epoch was a Thursday.
-    int weekday = (int) (relativeDay + THURSDAY) % 7;
-    if (weekday <= 0)
-      weekday += 7;
-    fields[DAY_OF_WEEK] = weekday;
-
-    // Time zone corrections.
-    TimeZone zone = getTimeZone();
-    int rawOffset = isSet[ZONE_OFFSET] ? fields[ZONE_OFFSET]
-                                       : zone.getRawOffset();
-
-    int dstOffset = isSet[DST_OFFSET] ? fields[DST_OFFSET]
-                                      : (zone.getOffset((year < 0) ? BC : AD,
-                                                        (year < 0) ? 1 - year
-                                                                   : year,
-                                                        month, day, weekday,
-                                                        millisInDay)
-                                      - zone.getRawOffset());
-
-    time -= rawOffset + dstOffset;
-
-    isTimeSet = true;
-  }
-
-  /**
-   * Get the linear day in days since the epoch, using the
-   * Julian or Gregorian calendar as specified.  If you specify a
-   * nonpositive year it is interpreted as BC as following: 0 is 1
-   * BC, -1 is 2 BC and so on.
-   *
-   * @param year the year of the date.
-   * @param dayOfYear the day of year of the date; 1 based.
-   * @param gregorian <code>true</code>, if we should use the Gregorian rules.
-   * @return the days since the epoch, may be negative.
-   */
-  private long getLinearDay(int year, int dayOfYear, boolean gregorian)
-  {
-    // The 13 is the number of days, that were omitted in the Gregorian
-    // Calender until the epoch.
-    // We shift right by 2 instead of dividing by 4, to get correct
-    // results for negative years (and this is even more efficient).
-    long julianDay = (year - 1) * 365L + ((year - 1) >> 2) + (dayOfYear - 1)
-                     - EPOCH_DAYS; // gregorian days from 1 to epoch.
-
-    if (gregorian)
-      {
-	// subtract the days that are missing in gregorian calendar
-	// with respect to julian calendar.
-	//
-	// Okay, here we rely on the fact that the gregorian
-	// calendar was introduced in the AD era.  This doesn't work
-	// with negative years.
-	//
-	// The additional leap year factor accounts for the fact that
-	// a leap day is not seen on Jan 1 of the leap year.
-	int gregOffset = (int) Math.floor((double) (year - 1) / 400.)
-	                 - (int) Math.floor((double) (year - 1) / 100.);
-
-	return julianDay + gregOffset;
-      }
-    else
-      julianDay -= 2;
-    return julianDay;
-  }
-
-  /**
-   * Converts the given linear day into era, year, month,
-   * day_of_year, day_of_month, day_of_week, and writes the result
-   * into the fields array.
-   *
-   * @param day the linear day.
-   * @param gregorian true, if we should use Gregorian rules.
-   */
-  private void calculateDay(int[] fields, long day, boolean gregorian)
-  {
-    // the epoch was a Thursday.
-    int weekday = (int) (day + THURSDAY) % 7;
-    if (weekday <= 0)
-      weekday += 7;
-    fields[DAY_OF_WEEK] = weekday;
-
-    // get a first approximation of the year.  This may be one 
-    // year too big.
-    int year = 1970
-               + (int) (gregorian
-                        ? ((day - 100L) * 400L) / (365L * 400L + 100L - 4L
-                        + 1L) : ((day - 100L) * 4L) / (365L * 4L + 1L));
-    if (day >= 0)
-      year++;
-
-    long firstDayOfYear = getLinearDay(year, 1, gregorian);
-
-    // Now look in which year day really lies.
-    if (day < firstDayOfYear)
-      {
-	year--;
-	firstDayOfYear = getLinearDay(year, 1, gregorian);
-      }
-
-    day -= firstDayOfYear - 1; // day of year,  one based.
-
-    fields[DAY_OF_YEAR] = (int) day;
-    if (year <= 0)
-      {
-	fields[ERA] = BC;
-	fields[YEAR] = 1 - year;
-      }
-    else
-      {
-	fields[ERA] = AD;
-	fields[YEAR] = year;
-      }
-
-    int leapday = isLeapYear(year) ? 1 : 0;
-    if (day <= 31 + 28 + leapday)
-      {
-	fields[MONTH] = (int) day / 32; // 31->JANUARY, 32->FEBRUARY
-	fields[DAY_OF_MONTH] = (int) day - 31 * fields[MONTH];
-      }
-    else
-      {
-	// A few more magic formulas
-	int scaledDay = ((int) day - leapday) * 5 + 8;
-	fields[MONTH] = scaledDay / (31 + 30 + 31 + 30 + 31);
-	fields[DAY_OF_MONTH] = (scaledDay % (31 + 30 + 31 + 30 + 31)) / 5 + 1;
-      }
-  }
-
-  /**
-   * Converts the milliseconds since the epoch UTC
-   * (<code>time</code>) to time fields
-   * (<code>fields</code>).
-   */
-  protected synchronized void computeFields()
-  {
-    boolean gregorian = (time >= gregorianCutover);
-
-    TimeZone zone = getTimeZone();
-    fields[ZONE_OFFSET] = zone.getRawOffset();
-    long localTime = time + fields[ZONE_OFFSET];
-
-    long day = localTime / (24 * 60 * 60 * 1000L);
-    int millisInDay = (int) (localTime % (24 * 60 * 60 * 1000L));
-
-    if (millisInDay < 0)
-      {
-	millisInDay += (24 * 60 * 60 * 1000);
-	day--;
-      }
-
-    calculateDay(fields, day, gregorian);
-    fields[DST_OFFSET] = zone.getOffset(fields[ERA], fields[YEAR],
-                                        fields[MONTH], fields[DAY_OF_MONTH],
-                                        fields[DAY_OF_WEEK], millisInDay)
-                         - fields[ZONE_OFFSET];
-
-    millisInDay += fields[DST_OFFSET];
-    if (millisInDay >= 24 * 60 * 60 * 1000)
-      {
-	millisInDay -= 24 * 60 * 60 * 1000;
-	calculateDay(fields, ++day, gregorian);
-      }
-
-    fields[DAY_OF_WEEK_IN_MONTH] = (fields[DAY_OF_MONTH] + 6) / 7;
-
-    // which day of the week are we (0..6), relative to getFirstDayOfWeek
-    int relativeWeekday = (7 + fields[DAY_OF_WEEK] - getFirstDayOfWeek()) % 7;
-
-    fields[WEEK_OF_MONTH] = (fields[DAY_OF_MONTH] - relativeWeekday + 12) / 7;
-
-    int weekOfYear = (fields[DAY_OF_YEAR] - relativeWeekday + 6) / 7;
-
-    // Do the Correction: getMinimalDaysInFirstWeek() is always in the 
-    // first week.
-    int minDays = getMinimalDaysInFirstWeek();
-    int firstWeekday = (7 + getWeekDay(fields[YEAR], minDays)
-                       - getFirstDayOfWeek()) % 7;
-    if (minDays - firstWeekday < 1)
-      weekOfYear++;
-    fields[WEEK_OF_YEAR] = weekOfYear;
-
-    int hourOfDay = millisInDay / (60 * 60 * 1000);
-    fields[AM_PM] = (hourOfDay < 12) ? AM : PM;
-    int hour = hourOfDay % 12;
-    fields[HOUR] = hour;
-    fields[HOUR_OF_DAY] = hourOfDay;
-    millisInDay %= (60 * 60 * 1000);
-    fields[MINUTE] = millisInDay / (60 * 1000);
-    millisInDay %= (60 * 1000);
-    fields[SECOND] = millisInDay / (1000);
-    fields[MILLISECOND] = millisInDay % 1000;
-
-    areFieldsSet = isSet[ERA] = isSet[YEAR] = isSet[MONTH] = isSet[WEEK_OF_YEAR] = isSet[WEEK_OF_MONTH] = isSet[DAY_OF_MONTH] = isSet[DAY_OF_YEAR] = isSet[DAY_OF_WEEK] = isSet[DAY_OF_WEEK_IN_MONTH] = isSet[AM_PM] = isSet[HOUR] = isSet[HOUR_OF_DAY] = isSet[MINUTE] = isSet[SECOND] = isSet[MILLISECOND] = isSet[ZONE_OFFSET] = isSet[DST_OFFSET] = true;
-  }
-  
-  /**
-   * Return a hash code for this object, following the general contract
-   * specified by {@link Object#hashCode()}.
-   * @return the hash code
-   */
-  public int hashCode()
-  {
-    int val = (int) ((gregorianCutover >>> 32) ^ (gregorianCutover & 0xffffffff));
-    return super.hashCode() ^ val;
-  }
-
-  /**
-   * Compares the given calendar with this.  An object, o, is
-   * equivalent to this if it is also a <code>GregorianCalendar</code>
-   * with the same time since the epoch under the same conditions
-   * (same change date and same time zone).
-   *
-   * @param o the object to that we should compare.
-   * @return true, if the given object is a calendar, that represents
-   * the same time (but doesn't necessarily have the same fields).
-   * @throws IllegalArgumentException if one of the fields
-   *         <code>ZONE_OFFSET</code> or <code>DST_OFFSET</code> is
-   *         specified, if an unknown field is specified or if one
-   *         of the calendar fields receives an illegal value when
-   *         leniancy is not enabled.
-   */
-  public boolean equals(Object o)
-  {
-    if (! (o instanceof GregorianCalendar))
-      return false;
-
-    GregorianCalendar cal = (GregorianCalendar) o;
-    return (cal.gregorianCutover == gregorianCutover
-            && super.equals(o));
-  }
-
-  /**
-   * Adds the specified amount of time to the given time field.  The
-   * amount may be negative to subtract the time.  If the field overflows
-   * it does what you expect: Jan, 25 + 10 Days is Feb, 4.
-   * @param field one of the time field constants.
-   * @param amount the amount of time to add.
-   * @exception IllegalArgumentException if <code>field</code> is
-   *   <code>ZONE_OFFSET</code>, <code>DST_OFFSET</code>, or invalid; or
-   *   if <code>amount</code> contains an out-of-range value and the calendar
-   *   is not in lenient mode.
-   */
-  public void add(int field, int amount)
-  {
-    switch (field)
-      {
-      case YEAR:
-	complete();
-	fields[YEAR] += amount;
-	isTimeSet = false;
-	break;
-      case MONTH:
-	complete();
-	int months = fields[MONTH] + amount;
-	fields[YEAR] += months / 12;
-	fields[MONTH] = months % 12;
-	if (fields[MONTH] < 0)
-	  {
-	    fields[MONTH] += 12;
-	    fields[YEAR]--;
-	  }
-	int maxDay = getActualMaximum(DAY_OF_MONTH);
-	if (fields[DAY_OF_MONTH] > maxDay)
-	  fields[DAY_OF_MONTH] = maxDay;
-	set(YEAR, fields[YEAR]);
-	set(MONTH, fields[MONTH]);
-	break;
-      case DAY_OF_MONTH:
-      case DAY_OF_YEAR:
-      case DAY_OF_WEEK:
-	if (! isTimeSet)
-	  computeTime();
-	time += amount * (24 * 60 * 60 * 1000L);
-	areFieldsSet = false;
-	break;
-      case WEEK_OF_YEAR:
-      case WEEK_OF_MONTH:
-      case DAY_OF_WEEK_IN_MONTH:
-	if (! isTimeSet)
-	  computeTime();
-	time += amount * (7 * 24 * 60 * 60 * 1000L);
-	areFieldsSet = false;
-	break;
-      case AM_PM:
-	if (! isTimeSet)
-	  computeTime();
-	time += amount * (12 * 60 * 60 * 1000L);
-	areFieldsSet = false;
-	break;
-      case HOUR:
-      case HOUR_OF_DAY:
-	if (! isTimeSet)
-	  computeTime();
-	time += amount * (60 * 60 * 1000L);
-	areFieldsSet = false;
-	break;
-      case MINUTE:
-	if (! isTimeSet)
-	  computeTime();
-	time += amount * (60 * 1000L);
-	areFieldsSet = false;
-	break;
-      case SECOND:
-	if (! isTimeSet)
-	  computeTime();
-	time += amount * (1000L);
-	areFieldsSet = false;
-	break;
-      case MILLISECOND:
-	if (! isTimeSet)
-	  computeTime();
-	time += amount;
-	areFieldsSet = false;
-	break;
-      case ZONE_OFFSET:
-      case DST_OFFSET:default:
-	throw new IllegalArgumentException("Invalid or unknown field");
-      }
-  }
-
-  /**
-   * Rolls the specified time field up or down.  This means add one
-   * to the specified field, but don't change the other fields.  If
-   * the maximum for this field is reached, start over with the
-   * minimum value.
-   *
-   * <strong>Note:</strong> There may be situation, where the other
-   * fields must be changed, e.g rolling the month on May, 31.
-   * The date June, 31 is automatically converted to July, 1.
-   * This requires lenient settings.
-   *
-   * @param field the time field. One of the time field constants.
-   * @param up the direction, true for up, false for down.
-   * @throws IllegalArgumentException if one of the fields
-   *         <code>ZONE_OFFSET</code> or <code>DST_OFFSET</code> is
-   *         specified, if an unknown field is specified or if one
-   *         of the calendar fields receives an illegal value when
-   *         leniancy is not enabled.
-   */
-  public void roll(int field, boolean up)
-  {
-    roll(field, up ? 1 : -1);
-  }
-
-  /**
-   * Checks that the fields are still within their legal bounds,
-   * following use of the <code>roll()</code> method.
-   *
-   * @param field the field to check.
-   * @param delta multipler for alterations to the <code>time</code>.
-   * @see #roll(int, boolean)
-   * @see #roll(int, int)
-   */
-  private void cleanUpAfterRoll(int field, int delta)
-  {
-    switch (field)
-      {
-      case ERA:
-      case YEAR:
-      case MONTH:
-	// check that day of month is still in correct range
-	if (fields[DAY_OF_MONTH] > getActualMaximum(DAY_OF_MONTH))
-	  fields[DAY_OF_MONTH] = getActualMaximum(DAY_OF_MONTH);
-	isTimeSet = false;
-	isSet[WEEK_OF_MONTH] = false;
-	isSet[DAY_OF_WEEK] = false;
-	isSet[DAY_OF_WEEK_IN_MONTH] = false;
-	isSet[DAY_OF_YEAR] = false;
-	isSet[WEEK_OF_YEAR] = false;
-	break;
-      case DAY_OF_MONTH:
-	isSet[WEEK_OF_MONTH] = false;
-	isSet[DAY_OF_WEEK] = false;
-	isSet[DAY_OF_WEEK_IN_MONTH] = false;
-	isSet[DAY_OF_YEAR] = false;
-	isSet[WEEK_OF_YEAR] = false;
-	time += delta * (24 * 60 * 60 * 1000L);
-	break;
-      case WEEK_OF_MONTH:
-	isSet[DAY_OF_MONTH] = false;
-	isSet[DAY_OF_WEEK_IN_MONTH] = false;
-	isSet[DAY_OF_YEAR] = false;
-	isSet[WEEK_OF_YEAR] = false;
-	time += delta * (7 * 24 * 60 * 60 * 1000L);
-	break;
-      case DAY_OF_WEEK_IN_MONTH:
-	isSet[DAY_OF_MONTH] = false;
-	isSet[WEEK_OF_MONTH] = false;
-	isSet[DAY_OF_YEAR] = false;
-	isSet[WEEK_OF_YEAR] = false;
-	time += delta * (7 * 24 * 60 * 60 * 1000L);
-	break;
-      case DAY_OF_YEAR:
-	isSet[MONTH] = false;
-	isSet[DAY_OF_MONTH] = false;
-	isSet[WEEK_OF_MONTH] = false;
-	isSet[DAY_OF_WEEK_IN_MONTH] = false;
-	isSet[DAY_OF_WEEK] = false;
-	isSet[WEEK_OF_YEAR] = false;
-	time += delta * (24 * 60 * 60 * 1000L);
-	break;
-      case WEEK_OF_YEAR:
-	isSet[MONTH] = false;
-	isSet[DAY_OF_MONTH] = false;
-	isSet[WEEK_OF_MONTH] = false;
-	isSet[DAY_OF_WEEK_IN_MONTH] = false;
-	isSet[DAY_OF_YEAR] = false;
-	time += delta * (7 * 24 * 60 * 60 * 1000L);
-	break;
-      case AM_PM:
-	isSet[HOUR_OF_DAY] = false;
-	time += delta * (12 * 60 * 60 * 1000L);
-	break;
-      case HOUR:
-	isSet[HOUR_OF_DAY] = false;
-	time += delta * (60 * 60 * 1000L);
-	break;
-      case HOUR_OF_DAY:
-	isSet[HOUR] = false;
-	isSet[AM_PM] = false;
-	time += delta * (60 * 60 * 1000L);
-	break;
-      case MINUTE:
-	time += delta * (60 * 1000L);
-	break;
-      case SECOND:
-	time += delta * (1000L);
-	break;
-      case MILLISECOND:
-	time += delta;
-	break;
-      }
-  }
-
-  /**
-   * Rolls the specified time field by the given amount.  This means
-   * add amount to the specified field, but don't change the other
-   * fields.  If the maximum for this field is reached, start over
-   * with the minimum value and vice versa for negative amounts.
-   *
-   * <strong>Note:</strong> There may be situation, where the other
-   * fields must be changed, e.g rolling the month on May, 31.
-   * The date June, 31 is automatically corrected to June, 30.
-   *
-   * @param field the time field. One of the time field constants.
-   * @param amount the amount by which we should roll.
-   * @throws IllegalArgumentException if one of the fields
-   *         <code>ZONE_OFFSET</code> or <code>DST_OFFSET</code> is
-   *         specified, if an unknown field is specified or if one
-   *         of the calendar fields receives an illegal value when
-   *         leniancy is not enabled.
-   */
-  public void roll(int field, int amount)
-  {
-    switch (field)
-      {
-      case DAY_OF_WEEK:
-	// day of week is special: it rolls automatically
-	add(field, amount);
-	return;
-      case ZONE_OFFSET:
-      case DST_OFFSET:
-	throw new IllegalArgumentException("Can't roll time zone");
-      }
-    complete();
-    int min = getActualMinimum(field);
-    int range = getActualMaximum(field) - min + 1;
-    int oldval = fields[field];
-    int newval = (oldval - min + range + amount) % range + min;
-    if (newval < min)
-      newval += range;
-    fields[field] = newval;
-    cleanUpAfterRoll(field, newval - oldval);
-  }
-
-  /**
-   * The minimum values for the calendar fields.
-   */
-  private static final int[] minimums = 
-                                        {
-                                          BC, 1, 0, 0, 1, 1, 1, SUNDAY, 1, AM,
-                                          1, 0, 0, 0, 0, -(12 * 60 * 60 * 1000),
-                                          0
-                                        };
-
-  /**
-   * The maximum values for the calendar fields.
-   */
-  private static final int[] maximums = 
-                                        {
-                                          AD, 5000000, 11, 53, 5, 31, 366,
-                                          SATURDAY, 5, PM, 12, 23, 59, 59, 999,
-                                          +(12 * 60 * 60 * 1000),
-                                          (12 * 60 * 60 * 1000)
-                                        };
-
-  /**
-   * Gets the smallest value that is allowed for the specified field.
-   *
-   * @param field one of the time field constants.
-   * @return the smallest value for the specified field.
-   */
-  public int getMinimum(int field)
-  {
-    return minimums[field];
-  }
-
-  /**
-   * Gets the biggest value that is allowed for the specified field.
-   *
-   * @param field one of the time field constants.
-   * @return the biggest value.
-   */
-  public int getMaximum(int field)
-  {
-    return maximums[field];
-  }
-
-  /**
-   * Gets the greatest minimum value that is allowed for the specified field.
-   * This is the largest value returned by the <code>getActualMinimum(int)</code>
-   * method.
-   *
-   * @param field the time field. One of the time field constants.
-   * @return the greatest minimum value.
-   * @see #getActualMinimum(int)
-   */
-  public int getGreatestMinimum(int field)
-  {
-    if (field == WEEK_OF_YEAR)
-      return 1;
-    return minimums[field];
-  }
-
-  /**
-   * Gets the smallest maximum value that is allowed for the
-   * specified field.  This is the smallest value returned
-   * by the <code>getActualMaximum(int)</code>.  For example,
-   * this is 28 for DAY_OF_MONTH (as all months have at least
-   * 28 days).
-   *
-   * @param field the time field. One of the time field constants.
-   * @return the least maximum value.
-   * @see #getActualMaximum(int)
-   * @since 1.2
-   */
-  public int getLeastMaximum(int field)
-  {
-    switch (field)
-      {
-      case WEEK_OF_YEAR:
-	return 52;
-      case DAY_OF_MONTH:
-	return 28;
-      case DAY_OF_YEAR:
-	return 365;
-      case DAY_OF_WEEK_IN_MONTH:
-      case WEEK_OF_MONTH:
-	return 4;
-      default:
-	return maximums[field];
-      }
-  }
-
-  /**
-   * Gets the actual minimum value that is allowed for the specified field.
-   * This value is dependent on the values of the other fields.  Note that
-   * this calls <code>complete()</code> if not enough fields are set.  This
-   * can have ugly side effects.  The value given depends on the current
-   * time used by this instance.
-   *
-   * @param field the time field. One of the time field constants.
-   * @return the actual minimum value.
-   * @since 1.2
-   */
-  public int getActualMinimum(int field)
-  {
-    if (field == WEEK_OF_YEAR)
-      {
-	int min = getMinimalDaysInFirstWeek();
-	if (min == 0)
-	  return 1;
-	if (! areFieldsSet || ! isSet[ERA] || ! isSet[YEAR])
-	  complete();
-
-	int year = fields[ERA] == AD ? fields[YEAR] : 1 - fields[YEAR];
-	int weekday = getWeekDay(year, min);
-	if ((7 + weekday - getFirstDayOfWeek()) % 7 >= min - 1)
-	  return 1;
-	return 0;
-      }
-    return minimums[field];
-  }
-
-  /**
-   * Gets the actual maximum value that is allowed for the specified field.
-   * This value is dependent on the values of the other fields.  Note that
-   * this calls <code>complete()</code> if not enough fields are set.  This
-   * can have ugly side effects.  The value given depends on the current time
-   * used by this instance; thus, leap years have a maximum day of month value of
-   * 29, rather than 28.
-   *
-   * @param field the time field. One of the time field constants.
-   * @return the actual maximum value.
-   */
-  public int getActualMaximum(int field)
-  {
-    switch (field)
-      {
-      case WEEK_OF_YEAR:
-        {
-	  if (! areFieldsSet || ! isSet[ERA] || ! isSet[YEAR])
-	    complete();
-
-	  // This is wrong for the year that contains the gregorian change.
-	  // I.e it gives the weeks in the julian year or in the gregorian
-	  // year in that case.
-	  int year = fields[ERA] == AD ? fields[YEAR] : 1 - fields[YEAR];
-	  int lastDay = isLeapYear(year) ? 366 : 365;
-	  int weekday = getWeekDay(year, lastDay);
-	  int week = (lastDay + 6 - (7 + weekday - getFirstDayOfWeek()) % 7) / 7;
-
-	  int minimalDays = getMinimalDaysInFirstWeek();
-	  int firstWeekday = getWeekDay(year, minimalDays);
-	  /*
-	   * Is there a set of days at the beginning of the year, before the
-	   * first day of the week, equal to or greater than the minimum number
-	   * of days required in the first week?
-	   */
-	  if (minimalDays - (7 + firstWeekday - getFirstDayOfWeek()) % 7 < 1)
-	    return week + 1; /* Add week 1: firstWeekday through to firstDayOfWeek */
-        }
-      case DAY_OF_MONTH:
-        {
-	  if (! areFieldsSet || ! isSet[MONTH])
-	    complete();
-	  int month = fields[MONTH];
-
-	  // If you change this, you should also change 
-	  // SimpleTimeZone.getDaysInMonth();
-	  if (month == FEBRUARY)
-	    {
-	      if (! isSet[YEAR] || ! isSet[ERA])
-		complete();
-	      int year = fields[ERA] == AD ? fields[YEAR] : 1 - fields[YEAR];
-	      return isLeapYear(year) ? 29 : 28;
-	    }
-	  else if (month < AUGUST)
-	    return 31 - (month & 1);
-	  else
-	    return 30 + (month & 1);
-        }
-      case DAY_OF_YEAR:
-        {
-	  if (! areFieldsSet || ! isSet[ERA] || ! isSet[YEAR])
-	    complete();
-	  int year = fields[ERA] == AD ? fields[YEAR] : 1 - fields[YEAR];
-	  return isLeapYear(year) ? 366 : 365;
-        }
-      case DAY_OF_WEEK_IN_MONTH:
-        {
-	  // This is wrong for the month that contains the gregorian change.
-	  int daysInMonth = getActualMaximum(DAY_OF_MONTH);
-
-	  // That's black magic, I know
-	  return (daysInMonth - (fields[DAY_OF_MONTH] - 1) % 7 + 6) / 7;
-        }
-      case WEEK_OF_MONTH:
-        {
-	  int daysInMonth = getActualMaximum(DAY_OF_MONTH);
-	  int weekday = (daysInMonth - fields[DAY_OF_MONTH]
-	                + fields[DAY_OF_WEEK] - SUNDAY) % 7 + SUNDAY;
-	  return (daysInMonth + 6 - (7 + weekday - getFirstDayOfWeek()) % 7) / 7;
-        }
-      default:
-	return maximums[field];
-      }
-  }
-}
Index: libjava/java/util/Currency.java
===================================================================
--- libjava/java/util/Currency.java	(revision 122231)
+++ libjava/java/util/Currency.java	(working copy)
@@ -37,6 +37,7 @@
 
 package java.util;
 
+import java.io.IOException;
 import java.io.ObjectStreamException;
 import java.io.Serializable;
 import java.text.NumberFormat;
@@ -83,6 +84,16 @@
   private transient ResourceBundle res;
 
   /**
+   * The set of properties which map a currency to
+   * the currency information such as the ISO 4217
+   * currency code and the number of decimal points.
+   *
+   * @see #getCurrencyCode()
+   * @serial ignored.
+   */
+  private static transient Properties properties;
+
+  /**
    * The ISO 4217 currency code associated with this
    * particular instance.
    *
@@ -92,6 +103,15 @@
   private String currencyCode;
 
   /**
+   * The number of fraction digits associated with this
+   * particular instance.
+   *
+   * @see #getDefaultFractionDigits()
+   * @serial the number of fraction digits
+   */
+  private transient int fractionDigits;
+
+  /**
    * A cache of <code>Currency</code> instances to
    * ensure the singleton nature of this class.  The key
    * is the locale of the currency.
@@ -108,6 +128,17 @@
   static
   {
     cache = new HashMap();
+    /* Create the properties object */
+    properties = new Properties();
+    /* Try and load the properties from our iso4217.properties resource */
+    try 
+      {
+        properties.load(Currency.class.getResourceAsStream("iso4217.properties"));
+      }
+    catch (IOException exception)
+      {
+        System.out.println("Failed to load currency resource: " + exception);
+      }
   }
 
   /**
@@ -130,9 +161,24 @@
    */
   private Currency (Locale loc)
   {
+    String countryCode;
+    String fractionDigitsKey;  
+ 
+    /* Retrieve the country code from the locale */
+    countryCode = loc.getCountry();
+
+    /* If there is no country code, return */
+    if (countryCode.equals(""))
+      {
+        throw new
+	  IllegalArgumentException("Invalid (empty) country code for locale:"
+			  	   + loc);
+      }
+
     this.locale = loc;
     this.res = ResourceBundle.getBundle ("gnu.java.locale.LocaleInformation", 
       locale, ClassLoader.getSystemClassLoader());
+
     /* Retrieve the ISO4217 currency code */
     try
       {
@@ -142,9 +188,28 @@
       {
 	currencyCode = null;
       }
+
+    /* Construct the key for the fraction digits */
+    fractionDigitsKey = countryCode + ".fractionDigits";
+
+    /* Retrieve the fraction digits */
+    fractionDigits = Integer.parseInt(properties.getProperty(fractionDigitsKey));
   }
 
   /**
+   * Constructor for the "XXX" special case.  This allows
+   * a Currency to be constructed from an assumed good
+   * currency code.
+   *
+   * @param code the code to use.
+   */  
+  private Currency(String code)
+  {
+    currencyCode = code;
+    fractionDigits = -1; /* Pseudo currency */
+  }
+
+  /**
    * Returns the ISO4217 currency code of this currency.
    *
    * @return a <code>String</code> containing currency code.
@@ -168,9 +233,7 @@
    */   
   public int getDefaultFractionDigits ()
   {
-    NumberFormat currency = NumberFormat.getCurrencyInstance (locale);
-    
-    return currency.getMaximumFractionDigits();
+    return fractionDigits;
   }
     
   /**
@@ -226,6 +289,10 @@
   {
     Locale[] allLocales = Locale.getAvailableLocales ();
     
+    /* Nasty special case to allow an erroneous currency... blame Sun */
+    if (currencyCode.equals("XXX"))
+      return new Currency("XXX");
+
     for (int i = 0;i < allLocales.length; i++)
       {
 	Currency testCurrency = getInstance (allLocales[i]);
Index: libjava/java/util/VMTimeZone.java
===================================================================
--- libjava/java/util/VMTimeZone.java	(revision 122231)
+++ libjava/java/util/VMTimeZone.java	(working copy)
@@ -40,9 +40,9 @@
 package java.util;
 
 import gnu.classpath.Configuration;
+import gnu.classpath.SystemProperties;
+import gnu.java.util.ZoneInfo;
 import java.util.TimeZone;
-import java.util.Calendar;
-import java.util.GregorianCalendar;
 
 import java.io.*;
 
@@ -78,9 +78,10 @@
    * The reference implementation which is made for GNU/Posix like
    * systems calls <code>System.getenv("TZ")</code>,
    * <code>readTimeZoneFile("/etc/timezone")</code>,
-   * <code>readtzFile("/etc/localtime")</code> and finally
-   * <code>getSystemTimeZoneId()</code> till a supported TimeZone is
-   * found through <code>TimeZone.getDefaultTimeZone(String)</code>.
+   * <code>ZoneInfo.readTZFile((String)null, "/etc/localtime")</code>
+   * and finally <code>getSystemTimeZoneId()</code> till a supported
+   * TimeZone is found through
+   * <code>TimeZone.getDefaultTimeZone(String)</code>.
    * If every method fails <code>null</code> is returned (which means
    * the TimeZone code will fall back on GMT as default time zone).
    * <p>
@@ -111,9 +112,51 @@
     // Try to parse /etc/localtime
     if (zone == null)
       {
-	tzid = readtzFile("/etc/localtime");
-	if (tzid != null && !tzid.equals(""))
-	  zone = TimeZone.getDefaultTimeZone(tzid);
+	zone = ZoneInfo.readTZFile((String) null, "/etc/localtime");
+	if (zone != null)
+	  {
+	    // Try to find a more suitable ID for the /etc/localtime
+	    // timezone.
+	    // Sometimes /etc/localtime is a symlink to some
+	    // /usr/share/zoneinfo/ file.
+	    String id = null;
+	    try
+	      {
+		id = new File("/etc/localtime").getCanonicalPath();
+		if (id != null)
+		  {
+		    String zoneinfo_dir
+		      = SystemProperties.getProperty("gnu.java.util.zoneinfo.dir");
+		    if (zoneinfo_dir != null)
+		      zoneinfo_dir
+			= new File(zoneinfo_dir
+				   + File.separatorChar).getCanonicalPath();
+		    if (zoneinfo_dir != null && id.startsWith(zoneinfo_dir))
+		      {
+			int pos = zoneinfo_dir.length();
+			while (pos < id.length()
+			       && id.charAt(pos) == File.separatorChar)
+			  pos++;
+			if (pos < id.length())
+			  id = id.substring(pos);
+			else
+			  id = null;
+		      }
+		    else
+		      id = null;
+		  }
+	      }
+	    catch (IOException ioe)
+	      {
+		id = null;
+	      }
+
+	    if (id == null)
+	      id = readSysconfigClockFile("/etc/sysconfig/clock");
+
+	    if (id != null)
+	      zone.setID(id);
+	  }
       }
 
     // Try some system specific way
@@ -189,466 +232,47 @@
   }
 
   /**
-   * Tries to read a file as a "standard" tzfile and return a time
-   * zone id string as expected by <code>getDefaultTimeZone(String)</code>.
-   * If the file doesn't exist, an IOException occurs or it isn't a tzfile
-   * that can be parsed null is returned.
+   * Tries to read the time zone name from a file.
+   * If the file cannot be read or an IOException occurs null is returned.
    * <p>
-   * The tzfile structure (as also used by glibc) is described in the Olson
-   * tz database archive as can be found at
-   * <code>ftp://elsie.nci.nih.gov/pub/</code>.
-   * <p>
-   * At least the following platforms support the tzdata file format
-   * and /etc/localtime (GNU/Linux, Darwin, Solaris and FreeBSD at
-   * least). Some systems (like Darwin) don't start the file with the
-   * required magic bytes 'TZif', this implementation can handle
-   * that).
+   * The /etc/sysconfig/clock file is not standard, but a lot of systems
+   * have it. The file is included by shell scripts and the timezone
+   * name is defined in ZONE variable.
+   * This routine should grok it with or without quotes:
+   * ZONE=America/New_York
+   * or
+   * ZONE="Europe/London"
    */
-  private static String readtzFile(String file)
+  private static String readSysconfigClockFile(String file)
   {
-    File f = new File(file);
-    if (!f.exists())
-      return null;
-
-    DataInputStream dis = null;
+    BufferedReader br = null;
     try
       {
-	FileInputStream fis = new FileInputStream(f);
+	FileInputStream fis = new FileInputStream(file);
 	BufferedInputStream bis = new BufferedInputStream(fis);
-	dis = new DataInputStream(bis);
+	br = new BufferedReader(new InputStreamReader(bis));
 
-	// Make sure we are reading a tzfile.
-	byte[] tzif = new byte[5];
-	dis.readFully(tzif);
-	int tzif2 = 4;
-	if (tzif[0] == 'T' && tzif[1] == 'Z'
-	    && tzif[2] == 'i' && tzif[3] == 'f')
+	for (String line = br.readLine(); line != null; line = br.readLine())
 	  {
-	    if (tzif[4] >= '2')
-	      tzif2 = 8;
-	    // Reserved bytes
-	    skipFully(dis, 16 - 1);
-	  }
-	else
-	  // Darwin has tzdata files that don't start with the TZif marker
-	  skipFully(dis, 16 - 5);
-
-	String id = null;
-	int ttisgmtcnt = dis.readInt();
-	int ttisstdcnt = dis.readInt();
-	int leapcnt = dis.readInt();
-	int timecnt = dis.readInt();
-	int typecnt = dis.readInt();
-	int charcnt = dis.readInt();
-	if (tzif2 == 8)
-	  {
-	    skipFully(dis, timecnt * (4 + 1) + typecnt * (4 + 1 + 1) + charcnt
-			   + leapcnt * (4 + 4) + ttisgmtcnt + ttisstdcnt);
-
-	    dis.readFully(tzif);
-	    if (tzif[0] != 'T' || tzif[1] != 'Z' || tzif[2] != 'i'
-		|| tzif[3] != 'f' || tzif[4] < '2')
-	      return null;
-
-	    // Reserved bytes
-	    skipFully(dis, 16 - 1);
-	    ttisgmtcnt = dis.readInt();
-	    ttisstdcnt = dis.readInt();
-	    leapcnt = dis.readInt();
-	    timecnt = dis.readInt();
-	    typecnt = dis.readInt();
-	    charcnt = dis.readInt();
-	  }
-	if (typecnt > 0)
-	  {
-	    int seltimecnt = timecnt;
-	    if (seltimecnt > 16)
-	      seltimecnt = 16;
-
-	    long[] times = new long[seltimecnt];
-	    int[] types = new int[seltimecnt];
-
-	    // Transition times
-	    skipFully(dis, (timecnt - seltimecnt) * tzif2);
-
-	    for (int i = 0; i < seltimecnt; i++)
-	      if (tzif2 == 8)
-		times[i] = dis.readLong();
-	      else
-		times[i] = (long) dis.readInt();
-
-	    // Transition types
-	    skipFully(dis, timecnt - seltimecnt);
-	    for (int i = 0; i < seltimecnt; i++)
+	    line = line.trim();
+	    if (line.length() < 8 || !line.startsWith("ZONE="))
+	      continue;
+	    int posstart = 6;
+	    int posend;
+	    if (line.charAt(5) == '"')
+	      posend = line.indexOf('"', 6);
+	    else if (line.charAt(5) == '\'')
+	      posend = line.indexOf('\'', 6);
+	    else
 	      {
-		types[i] = dis.readByte();
-		if (types[i] < 0)
-		  types[i] += 256;
+		posstart = 5;
+		posend = line.length();
 	      }
-
-	    // Get std/dst_offset and dst/non-dst time zone names.
-	    int std_abbrind = -1;
-	    int dst_abbrind = -1;
-	    int std_offset = 0;
-	    int dst_offset = 0;
-	    int std_ind = -1;
-	    int dst_ind = -1;
-
-	    int alternation = 0;
-	    if (seltimecnt >= 4 && types[0] != types[1]
-		&& types[0] < typecnt && types[1] < typecnt)
-	      {
-		// Verify only two types are involved
-		// in the transitions and they alternate.
-		alternation = 1;
-		for (int i = 2; i < seltimecnt; i++)
-		  if (types[i] != types[i % 2])
-		    alternation = 0;
-	      }
-
-	    // If a timezone previously used DST, but no longer does
-	    // (or no longer will in the near future, say 5 years),
-	    // then always pick only the std zone type corresponding
-	    // to latest applicable transition.
-	    if (seltimecnt > 0
-		&& times[seltimecnt - 1]
-		   < System.currentTimeMillis() / 1000 + 5 * 365 * 86400)
-	      alternation = -1;
-
-	    for (int i = 0; i < typecnt; i++)
-	      {
-		// gmtoff
-		int offset = dis.readInt();
-		int dst = dis.readByte();
-		int abbrind = dis.readByte();
-		if (dst == 0)
-		  {
-		    if (alternation == 0
-			|| (alternation == 1
-			    && (i == types[0] || i == types[1]))
-			|| (alternation == -1 && i == types[seltimecnt - 1]))
-		      {
-			std_abbrind = abbrind;
-			std_offset = offset * -1;
-			std_ind = i;
-		      }
-		  }
-		else if (alternation >= 0)
-		  {
-		    if (alternation == 0 || i == types[0] || i == types[1])
-		      {
-			dst_abbrind = abbrind;
-			dst_offset = offset * -1;
-			dst_ind = i;
-		      }
-		  }
-	      }
-
-	    if (std_abbrind >= 0)
-	      {
-		byte[] names = new byte[charcnt];
-		dis.readFully(names);
-		int j = std_abbrind;
-		while (j < charcnt && names[j] != 0)
-		  j++;
-
-		String zonename = new String(names, std_abbrind,
-					     j - std_abbrind, "ASCII");
-
-		String dst_zonename;
-		if (dst_abbrind >= 0)
-		  {
-		    j = dst_abbrind;
-		    while (j < charcnt && names[j] != 0)
-		      j++;
-		    dst_zonename = new String(names, dst_abbrind,
-					      j - dst_abbrind, "ASCII");
-		  }
-		else
-		  dst_zonename = "";
-
-		String[] change_spec = { null, null };
-		if (dst_abbrind >= 0 && alternation > 0)
-		  {
-		    // Guess rules for the std->dst and dst->std transitions
-		    // from the transition times since Epoch.
-		    // tzdata actually uses only 3 forms of rules:
-		    // fixed date within a month, e.g. change on April, 5th
-		    // 1st weekday on or after Nth: change on Sun>=15 in April
-		    // last weekday in a month: change on lastSun in April
-		    GregorianCalendar cal
-		      = new GregorianCalendar (TimeZone.getTimeZone("GMT"));
-
-		    int[] values = new int[2 * 11];
-		    int i;
-		    for (i = seltimecnt - 1; i >= 0; i--)
-		      {
-			int base = (i % 2) * 11;
-			int offset = types[i] == dst_ind ? std_offset : dst_offset;
-			cal.setTimeInMillis((times[i] - offset) * 1000);
-			if (i >= seltimecnt - 2)
-			  {
-			    values[base + 0] = cal.get(Calendar.YEAR);
-			    values[base + 1] = cal.get(Calendar.MONTH);
-			    values[base + 2] = cal.get(Calendar.DAY_OF_MONTH);
-			    values[base + 3]
-			      = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
-			    values[base + 4] = cal.get(Calendar.DAY_OF_WEEK);
-			    values[base + 5] = cal.get(Calendar.HOUR_OF_DAY);
-			    values[base + 6] = cal.get(Calendar.MINUTE);
-			    values[base + 7] = cal.get(Calendar.SECOND);
-			    values[base + 8] = values[base + 2]; // Range start
-			    values[base + 9] = values[base + 2]; // Range end
-			    values[base + 10] = 0; // Determined type
-			  }
-			else
-			  {
-			    int year = cal.get(Calendar.YEAR);
-			    int month = cal.get(Calendar.MONTH);
-			    int day_of_month = cal.get(Calendar.DAY_OF_MONTH);
-			    int month_days
-			      = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
-			    int day_of_week = cal.get(Calendar.DAY_OF_WEEK);
-			    int hour = cal.get(Calendar.HOUR_OF_DAY);
-			    int minute = cal.get(Calendar.MINUTE);
-			    int second = cal.get(Calendar.SECOND);
-			    if (year != values[base + 0] - 1
-				|| month != values[base + 1]
-				|| hour != values[base + 5]
-				|| minute != values[base + 6]
-				|| second != values[base + 7])
-			      break;
-			    if (day_of_week == values[base + 4])
-			      {
-				// Either a Sun>=8 or lastSun rule.
-				if (day_of_month < values[base + 8])
-				  values[base + 8] = day_of_month;
-				if (day_of_month > values[base + 9])
-				  values[base + 9] = day_of_month;
-				if (values[base + 10] < 0)
-				  break;
-				if (values[base + 10] == 0)
-				  {
-				    values[base + 10] = 1;
-				    // If day of month > 28, this is
-				    // certainly lastSun rule.
-				    if (values[base + 2] > 28)
-				      values[base + 2] = 3;
-				    // If day of month isn't in the last
-				    // week, it can't be lastSun rule.
-				    else if (values[base + 2]
-					     <= values[base + 3] - 7)
-				      values[base + 3] = 2;
-				  }
-				if (values[base + 10] == 1)
-				  {
-				    // If day of month is > 28, this is
-				    // certainly lastSun rule.
-				    if (day_of_month > 28)
-				      values[base + 10] = 3;
-				    // If day of month isn't in the last
-				    // week, it can't be lastSun rule.
-				    else if (day_of_month <= month_days - 7)
-				      values[base + 10] = 2;
-				  }
-				else if ((values[base + 10] == 2
-					  && day_of_month > 28)
-					 || (values[base + 10] == 3
-					     && day_of_month
-						<= month_days - 7))
-				  break;
-			      }
-			    else
-			      {
-				// Must be fixed day in month rule.
-				if (day_of_month != values[base + 2]
-				    || values[base + 10] > 0)
-				  break;
-				values[base + 4] = day_of_week;
-				values[base + 10] = -1;
-			      }
-			    values[base + 0] -= 1;
-			  }
-		      }
-		    if (i < 0)
-		      {
-			for (i = 0; i < 2; i++)
-			  {
-			    int base = 11 * i;
-			    if (values[base + 10] == 0)
-			      continue;
-			    if (values[base + 10] == -1)
-			      {
-				int[] dayCount
-				  = { 0, 31, 59, 90, 120, 151,
-				      181, 212, 243, 273, 304, 334 };
-				int d = dayCount[values[base + 1]
-						 - Calendar.JANUARY];
-				d += values[base + 2];
-				change_spec[i] = ",J" + Integer.toString(d);
-			      }
-			    else if (values[base + 10] == 2)
-			      {
-				// If we haven't seen all days of the week,
-				// we can't be sure what the rule really is.
-				if (values[base + 8] + 6 != values[base + 9])
-				  continue;
-
-				// FIXME: Sun >= 5 is representable in
-				// SimpleTimeZone, but not in POSIX TZ env
-				// strings.  Should we change readtzFile
-				// to actually return a SimpleTimeZone
-				// rather than POSIX TZ string?
-				if ((values[base + 8] % 7) != 1)
-				  continue;
-
-				int d;
-				d = values[base + 1] - Calendar.JANUARY + 1;
-				change_spec[i] = ",M" + Integer.toString(d);
-				d = (values[base + 8] + 6) / 7;
-				change_spec[i] += "." + Integer.toString(d);
-				d = values[base + 4] - Calendar.SUNDAY;
-				change_spec[i] += "." + Integer.toString(d);
-			      }
-			    else
-			      {
-				// If we don't know whether this is lastSun or
-				// Sun >= 22 rule.  That can be either because
-				// there was insufficient number of
-				// transitions, or February, where it is quite
-				// probable we haven't seen any 29th dates.
-				// For February, assume lastSun rule, otherwise
-				// punt.
-				if (values[base + 10] == 1
-				    && values[base + 1] != Calendar.FEBRUARY)
-				  continue;
-
-				int d;
-				d = values[base + 1] - Calendar.JANUARY + 1;
-				change_spec[i] = ",M" + Integer.toString(d);
-				d = values[base + 4] - Calendar.SUNDAY;
-				change_spec[i] += ".5." + Integer.toString(d);
-			      }
-
-			    // Don't add time specification if time is
-			    // 02:00:00.
-			    if (values[base + 5] != 2
-				|| values[base + 6] != 0
-				|| values[base + 7] != 0)
-			      {
-				int d = values[base + 5];
-				change_spec[i] += "/" + Integer.toString(d);
-				if (values[base + 6] != 0
-				    || values[base + 7] != 0)
-				  {
-				    d = values[base + 6];
-				    if (d < 10)
-				      change_spec[i]
-					+= ":0" + Integer.toString(d);
-				    else
-				      change_spec[i]
-					+= ":" + Integer.toString(d);
-				    d = values[base + 7];
-				    if (d >= 10)
-				      change_spec[i]
-					+= ":" + Integer.toString(d);
-				    else if (d > 0)
-				      change_spec[i]
-					+= ":0" + Integer.toString(d);
-				  }
-			      }
-			  }
-			if (types[0] == std_ind)
-			  {
-			    String tmp = change_spec[0];
-			    change_spec[0] = change_spec[1];
-			    change_spec[1] = tmp;
-			  }
-		      }
-		  }
-
-		// Only use gmt offset when necessary.
-		// Also special case GMT+/- timezones.
-		String offset_string, dst_offset_string = "";
-		if (dst_abbrind < 0
-		    && (std_offset == 0
-			|| zonename.startsWith("GMT+")
-			|| zonename.startsWith("GMT-")))
-		  offset_string = "";
-		else
-		  {
-		    offset_string = Integer.toString(std_offset / 3600);
-		    int seconds = std_offset % 3600;
-		    if (seconds != 0)
-		      {
-			if (seconds < 0)
-			  seconds *= -1;
-			if (seconds < 600)
-			  offset_string
-			    += ":0" + Integer.toString(seconds / 60);
-			else
-			  offset_string
-			    += ":" + Integer.toString(seconds / 60);
-			seconds = seconds % 60;
-			if (seconds >= 10)
-			  offset_string
-			    += ":" + Integer.toString(seconds);
-			else if (seconds > 0)
-			  offset_string
-			    += ":0" + Integer.toString(seconds);
-		      }
-		    if (dst_abbrind >= 0
-			&& dst_offset != std_offset - 3600)
-		      {
-			dst_offset_string
-			  = Integer.toString(dst_offset / 3600);
-			seconds = dst_offset % 3600;
-			if (seconds != 0)
-			  {
-			    if (seconds < 0)
-			      seconds *= -1;
-			    if (seconds < 600)
-			      dst_offset_string
-				+= ":0" + Integer.toString(seconds / 60);
-			    else
-			      dst_offset_string
-				+= ":" + Integer.toString(seconds / 60);
-			    seconds = seconds % 60;
-			    if (seconds >= 10)
-			      dst_offset_string
-				+= ":" + Integer.toString(seconds);
-			    else if (seconds > 0)
-			      dst_offset_string
-				+= ":0" + Integer.toString(seconds);
-			  }
-		      }
-		  }
-
-		if (dst_abbrind < 0)
-		  id = zonename + offset_string;
-		else if (change_spec[0] != null && change_spec[1] != null)
-		  id = zonename + offset_string + dst_zonename
-		       + dst_offset_string + change_spec[0] + change_spec[1];
-	      }
-	    else if (tzif2 == 8)
-	      skipFully(dis, charcnt);
+	    if (posend < 0)
+	      return null;
+	    return line.substring(posstart, posend);
 	  }
-	else if (tzif2 == 8)
-	  skipFully(dis, timecnt * (8 + 1) + typecnt * (4 + 1 + 1) + charcnt);
-
-	if (tzif2 == 8)
-	  {
-	    // Skip over the rest of 64-bit data
-	    skipFully(dis, leapcnt * (8 + 4) + ttisgmtcnt + ttisstdcnt);
-	    if (dis.readByte() == '\n')
-	      {
-		String posixtz = dis.readLine();
-		if (posixtz.length() > 0)
-		  id = posixtz;
-	      }
-	  }
-
-	return id;
+	return null;
       }
     catch (IOException ioe)
       {
@@ -659,31 +283,15 @@
       {
 	try
 	  {
-	    if (dis != null)
-	      dis.close();
+	    if (br != null)
+	      br.close();
 	  }
-	catch(IOException ioe)
+	catch (IOException ioe)
 	  {
 	    // Error while close, nothing we can do.
 	  }
       }
   }
-  
-  /**
-   * Skips the requested number of bytes in the given InputStream.
-   * Throws EOFException if not enough bytes could be skipped.
-   * Negative numbers of bytes to skip are ignored.
-   */
-  private static void skipFully(InputStream is, long l) throws IOException
-  {
-    while (l > 0)
-      {
-        long k = is.skip(l);
-        if (k <= 0)
-          throw new EOFException();
-        l -= k;
-      }
-  }
 
   /**
    * Tries to get the system time zone id through native code.
Index: libjava/defineclass.cc
===================================================================
--- libjava/defineclass.cc	(revision 122231)
+++ libjava/defineclass.cc	(working copy)
@@ -1,6 +1,7 @@
 // defineclass.cc - defining a class from .class format.
 
-/* Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006  Free Software Foundation
+/* Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007
+   Free Software Foundation
 
    This file is part of libgcj.
 
@@ -1652,7 +1653,7 @@
       // call a static method of an interpreted class from precompiled
       // code without first resolving the class (that will happen
       // during class initialization instead).
-      method->self->ncode = method->ncode ();
+      method->self->ncode = method->ncode (def);
     }
 }
 
@@ -1697,7 +1698,7 @@
 		  // interpreted class from precompiled code without
 		  // first resolving the class (that will happen
 		  // during class initialization instead).
-		  method->ncode = m->ncode ();
+		  method->ncode = m->ncode (def);
 		}
 	    }
 	}
Index: libjava/Makefile.am
===================================================================
--- libjava/Makefile.am	(revision 122231)
+++ libjava/Makefile.am	(working copy)
@@ -72,7 +72,7 @@
 ## For now, only on native systems.  FIXME.
 if NATIVE
 bin_PROGRAMS = jv-convert gij grmic grmiregistry gcj-dbtool \
-	gappletviewer gjarsigner gkeytool gjar gjavah gnative2ascii \
+	gappletviewer gjarsigner gkeytool gjar gcjh gjavah gnative2ascii \
 	gorbd grmid gserialver gtnameserv
 
 ## It is convenient to actually build and install the default database
@@ -139,6 +139,7 @@
 	-DGCJ_ENDORSED_DIRS="\"$(jardir)/gcj-endorsed\"" \
 	-DGCJ_VERSIONED_LIBDIR="\"$(dbexecdir)\"" \
 	-DPATH_SEPARATOR="\"$(CLASSPATH_SEPARATOR)\"" \
+	-DECJ_JAR_FILE="\"$(ECJ_JAR)\"" \
 	-DLIBGCJ_DEFAULT_DATABASE="\"$(dbexecdir)/$(db_name)\"" \
 	-DLIBGCJ_DEFAULT_DATABASE_PATH_TAIL="\"$(db_pathtail)\""
 
@@ -740,6 +741,15 @@
 gjavah_DEPENDENCIES = libgcj-tools.la
 
 ## This is a dummy definition.
+gcjh_SOURCES =
+gcjh_LDFLAGS = --main=gnu.classpath.tools.javah.GcjhMain \
+	-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)
+gcjh_LINK = $(GCJLINK)
+## See jv_convert_LDADD.
+gcjh_LDADD = -L$(here)/.libs libgcj-tools.la
+gcjh_DEPENDENCIES = libgcj-tools.la
+
+## This is a dummy definition.
 gnative2ascii_SOURCES =
 gnative2ascii_LDFLAGS = --main=gnu.classpath.tools.native2ascii.Native2ASCII \
 	-rpath $(toolexeclibdir) -shared-libgcc $(THREADLDFLAGS)
@@ -1056,6 +1066,7 @@
 	"exec_prefix=$(exec_prefix)" \
 	"infodir=$(infodir)" \
 	"libdir=$(libdir)" \
+	"mandir=$(mandir)" \
 	"prefix=$(prefix)" \
 	"gxx_include_dir=$(gxx_include_dir)" \
 	"AR=$(AR)" \
Index: libjava/nogc.cc
===================================================================
--- libjava/nogc.cc	(revision 122231)
+++ libjava/nogc.cc	(working copy)
@@ -1,6 +1,7 @@
 // nogc.cc - Implement null garbage collector.
 
-/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2006  Free Software Foundation
+/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2006, 2007
+   Free Software Foundation
 
    This file is part of libgcj.
 
@@ -71,6 +72,14 @@
   return calloc (size, 1);
 }
 
+_Jv_ClosureList **
+_Jv_ClosureListFinalizer ()
+{
+  _Jv_ClosureList **clpp;
+  clpp = (_Jv_ClosureList **)_Jv_AllocBytes (sizeof (*clpp));
+  return clpp;
+}
+
 void
 _Jv_RegisterFinalizer (void *, _Jv_FinalizerFunc *)
 {
Index: boehm-gc/configure.ac
===================================================================
--- boehm-gc/configure.ac	(revision 122231)
+++ boehm-gc/configure.ac	(working copy)
@@ -338,11 +338,9 @@
 
 # Configuration of machine-dependent code
 #
-# We don't set NO_EXECUTE_PERMISSION by default because gcj (and
-# anything else that creates trampolines in gc-allocated memory)
-# always needs exec permission.  The exceptions to this are IA-64 and
-# some variations of Power PC, where trampolines don't contain
-# executable code.
+# Set NO_EXECUTE_PERMISSION by default because gcj already uses
+# ffi_closure_{alloc,free} which takes care of allocating trampolines
+# in executable memory.
 #
 AC_MSG_CHECKING(which machine-dependent code should be used)
 machdep=
@@ -385,10 +383,10 @@
     machdep="sparc_mach_dep.lo"
     ;;
  ia64-*-*)
-    AC_DEFINE(NO_EXECUTE_PERMISSION,1,[cause some or all of the heap to not have execute permission])
     machdep="mach_dep.lo ia64_save_regs_in_stack.lo"
     ;;
 esac
+AC_DEFINE(NO_EXECUTE_PERMISSION,1,[cause some or all of the heap to not have execute permission])
 if test x"$machdep" = x; then
 AC_MSG_RESULT($machdep)
    machdep="mach_dep.lo"
Index: boehm-gc/include/gc.h
===================================================================
--- boehm-gc/include/gc.h	(revision 122231)
+++ boehm-gc/include/gc.h	(working copy)
@@ -3,6 +3,7 @@
  * Copyright (c) 1991-1995 by Xerox Corporation.  All rights reserved.
  * Copyright 1996-1999 by Silicon Graphics.  All rights reserved.
  * Copyright 1999 by Hewlett-Packard Company.  All rights reserved.
+ * Copyright (C) 2007 Free Software Foundation, Inc
  *
  * THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED
  * OR IMPLIED.  ANY USE IS AT YOUR OWN RISK.
@@ -602,6 +603,8 @@
 	GC_debug_register_finalizer_ignore_self(p, f, d, of, od)
 #   define GC_REGISTER_FINALIZER_NO_ORDER(p, f, d, of, od) \
 	GC_debug_register_finalizer_no_order(p, f, d, of, od)
+#   define GC_REGISTER_FINALIZER_UNREACHABLE(p, f, d, of, od) \
+	GC_debug_register_finalizer_unreachable(p, f, d, of, od)
 #   define GC_MALLOC_STUBBORN(sz) GC_debug_malloc_stubborn(sz, GC_EXTRAS);
 #   define GC_CHANGE_STUBBORN(p) GC_debug_change_stubborn(p)
 #   define GC_END_STUBBORN_CHANGE(p) GC_debug_end_stubborn_change(p)
@@ -624,6 +627,8 @@
 	GC_register_finalizer_ignore_self(p, f, d, of, od)
 #   define GC_REGISTER_FINALIZER_NO_ORDER(p, f, d, of, od) \
 	GC_register_finalizer_no_order(p, f, d, of, od)
+#   define GC_REGISTER_FINALIZER_UNREACHABLE(p, f, d, of, od) \
+	GC_register_finalizer_unreachable(p, f, d, of, od)
 #   define GC_MALLOC_STUBBORN(sz) GC_malloc_stubborn(sz)
 #   define GC_CHANGE_STUBBORN(p) GC_change_stubborn(p)
 #   define GC_END_STUBBORN_CHANGE(p) GC_end_stubborn_change(p)
@@ -716,6 +721,19 @@
 	GC_PROTO((GC_PTR obj, GC_finalization_proc fn, GC_PTR cd,
 		  GC_finalization_proc *ofn, GC_PTR *ocd));
 
+/* This is a special finalizer that is useful when an object's  */
+/* finalizer must be run when the object is known to be no      */
+/* longer reachable, not even from other finalizable objects.   */
+/* This can be used in combination with finalizer_no_order so   */
+/* as to release resources that must not be released while an   */
+/* object can still be brought back to life by other            */
+/* finalizers.                                                  */
+GC_API void GC_register_finalizer_unreachable
+	GC_PROTO((GC_PTR obj, GC_finalization_proc fn, GC_PTR cd,
+		  GC_finalization_proc *ofn, GC_PTR *ocd));
+GC_API void GC_debug_register_finalizer_unreachable
+	GC_PROTO((GC_PTR obj, GC_finalization_proc fn, GC_PTR cd,
+		  GC_finalization_proc *ofn, GC_PTR *ocd));
 
 /* The following routine may be used to break cycles between	*/
 /* finalizable objects, thus causing cyclic finalizable		*/
Index: boehm-gc/ChangeLog
===================================================================
--- boehm-gc/ChangeLog	(revision 122231)
+++ boehm-gc/ChangeLog	(working copy)
@@ -1,3 +1,19 @@
+2007-04-03  Jakub Jelinek  <jakub@redhat.com>
+
+	* configure.ac (NO_EXECUTE_PERMISSION): Set by default.
+	* configure: Rebuilt.
+
+2007-03-07  Alexandre Oliva  <aoliva@redhat.com>
+
+	* include/gc.h (GC_REGISTER_FINALIZER_UNREACHABLE): New.
+	(GC_register_finalizer_unreachable): Declare.
+	(GC_debug_register_finalizer_unreachable): Declare.
+	* finalize.c (GC_unreachable_finalize_mark_proc): New.
+	(GC_register_finalizer_unreachable): New.
+	(GC_finalize): Handle it.
+	* dbg_mlc.c (GC_debug_register_finalizer_unreachable): New.
+	(GC_debug_register_finalizer_no_order): Fix whitespace.
+
 2007-02-13  Release Manager
 
 	* GCC 4.1.2 released.
Index: boehm-gc/dbg_mlc.c
===================================================================
--- boehm-gc/dbg_mlc.c	(revision 122231)
+++ boehm-gc/dbg_mlc.c	(working copy)
@@ -3,6 +3,7 @@
  * Copyright (c) 1991-1995 by Xerox Corporation.  All rights reserved.
  * Copyright (c) 1997 by Silicon Graphics.  All rights reserved.
  * Copyright (c) 1999-2004 Hewlett-Packard Development Company, L.P.
+ * Copyright (C) 2007 Free Software Foundation, Inc
  *
  * THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED
  * OR IMPLIED.  ANY USE IS AT YOUR OWN RISK.
@@ -1118,8 +1119,8 @@
     if (0 == base) return;
     if ((ptr_t)obj - base != sizeof(oh)) {
         GC_err_printf1(
-	  "GC_debug_register_finalizer_no_order called with non-base-pointer 0x%lx\n",
-	  obj);
+	    "GC_debug_register_finalizer_no_order called with non-base-pointer 0x%lx\n",
+	    obj);
     }
     if (0 == fn) {
       GC_register_finalizer_no_order(base, 0, 0, &my_old_fn, &my_old_cd);
@@ -1129,9 +1130,43 @@
 				     &my_old_cd);
     }
     store_old(obj, my_old_fn, (struct closure *)my_old_cd, ofn, ocd);
- }
+}
 
 # ifdef __STDC__
+    void GC_debug_register_finalizer_unreachable
+    				    (GC_PTR obj, GC_finalization_proc fn,
+    				     GC_PTR cd, GC_finalization_proc *ofn,
+				     GC_PTR *ocd)
+# else
+    void GC_debug_register_finalizer_unreachable
+    				    (obj, fn, cd, ofn, ocd)
+    GC_PTR obj;
+    GC_finalization_proc fn;
+    GC_PTR cd;
+    GC_finalization_proc *ofn;
+    GC_PTR *ocd;
+# endif
+{
+    GC_finalization_proc my_old_fn;
+    GC_PTR my_old_cd;
+    ptr_t base = GC_base(obj);
+    if (0 == base) return;
+    if ((ptr_t)obj - base != sizeof(oh)) {
+        GC_err_printf1(
+	    "GC_debug_register_finalizer_unreachable called with non-base-pointer 0x%lx\n",
+	    obj);
+    }
+    if (0 == fn) {
+      GC_register_finalizer_unreachable(base, 0, 0, &my_old_fn, &my_old_cd);
+    } else {
+      GC_register_finalizer_unreachable(base, GC_debug_invoke_finalizer,
+    			    	     GC_make_closure(fn,cd), &my_old_fn,
+				     &my_old_cd);
+    }
+    store_old(obj, my_old_fn, (struct closure *)my_old_cd, ofn, ocd);
+}
+
+# ifdef __STDC__
     void GC_debug_register_finalizer_ignore_self
     				    (GC_PTR obj, GC_finalization_proc fn,
     				     GC_PTR cd, GC_finalization_proc *ofn,
Index: boehm-gc/configure
===================================================================
--- boehm-gc/configure	(revision 122231)
+++ boehm-gc/configure	(working copy)
@@ -6560,11 +6560,9 @@
 
 # Configuration of machine-dependent code
 #
-# We don't set NO_EXECUTE_PERMISSION by default because gcj (and
-# anything else that creates trampolines in gc-allocated memory)
-# always needs exec permission.  The exceptions to this are IA-64 and
-# some variations of Power PC, where trampolines don't contain
-# executable code.
+# Set NO_EXECUTE_PERMISSION by default because gcj already uses
+# ffi_closure_{alloc,free} which takes care of allocating trampolines
+# in executable memory.
 #
 echo "$as_me:$LINENO: checking which machine-dependent code should be used" >&5
 echo $ECHO_N "checking which machine-dependent code should be used... $ECHO_C" >&6
@@ -6625,14 +6623,14 @@
     machdep="sparc_mach_dep.lo"
     ;;
  ia64-*-*)
+    machdep="mach_dep.lo ia64_save_regs_in_stack.lo"
+    ;;
+esac
 
 cat >>confdefs.h <<\_ACEOF
 #define NO_EXECUTE_PERMISSION 1
 _ACEOF
 
-    machdep="mach_dep.lo ia64_save_regs_in_stack.lo"
-    ;;
-esac
 if test x"$machdep" = x; then
 echo "$as_me:$LINENO: result: $machdep" >&5
 echo "${ECHO_T}$machdep" >&6
Index: boehm-gc/finalize.c
===================================================================
--- boehm-gc/finalize.c	(revision 122231)
+++ boehm-gc/finalize.c	(working copy)
@@ -2,6 +2,7 @@
  * Copyright 1988, 1989 Hans-J. Boehm, Alan J. Demers
  * Copyright (c) 1991-1996 by Xerox Corporation.  All rights reserved.
  * Copyright (c) 1996-1999 by Silicon Graphics.  All rights reserved.
+ * Copyright (C) 2007 Free Software Foundation, Inc
 
  * THIS MATERIAL IS PROVIDED AS IS, WITH ABSOLUTELY NO WARRANTY EXPRESSED
  * OR IMPLIED.  ANY USE IS AT YOUR OWN RISK.
@@ -315,8 +316,16 @@
 {
 }
 
+/* Possible finalization_marker procedures.  Note that mark stack	*/
+/* overflow is handled by the caller, and is not a disaster.		*/
+GC_API void GC_unreachable_finalize_mark_proc(p)
+ptr_t p;
+{
+    return GC_normal_finalize_mark_proc(p);
+}
 
 
+
 /* Register a finalization function.  See gc.h for details.	*/
 /* in the nonthreads case, we try to avoid disabling signals,	*/
 /* since it can be expensive.  Threads packages typically	*/
@@ -511,6 +520,23 @@
     				ocd, GC_null_finalize_mark_proc);
 }
 
+# if defined(__STDC__)
+    void GC_register_finalizer_unreachable(void * obj,
+			       GC_finalization_proc fn, void * cd,
+			       GC_finalization_proc *ofn, void ** ocd)
+# else
+    void GC_register_finalizer_unreachable(obj, fn, cd, ofn, ocd)
+    GC_PTR obj;
+    GC_finalization_proc fn;
+    GC_PTR cd;
+    GC_finalization_proc * ofn;
+    GC_PTR * ocd;
+# endif
+{
+    GC_register_finalizer_inner(obj, fn, cd, ofn,
+    				ocd, GC_unreachable_finalize_mark_proc);
+}
+
 #ifndef NO_DEBUGGING
 void GC_dump_finalization()
 {
@@ -638,9 +664,44 @@
   	    if (curr_fo -> fo_mark_proc == GC_null_finalize_mark_proc) {
   	        GC_MARK_FO(real_ptr, GC_normal_finalize_mark_proc);
   	    }
-  	    GC_set_mark_bit(real_ptr);
+	    if (curr_fo -> fo_mark_proc != GC_unreachable_finalize_mark_proc) {
+		GC_set_mark_bit(real_ptr);
+	    }
   	}
       }
+
+      /* now revive finalize-when-unreachable objects reachable from
+	 other finalizable objects */
+      curr_fo = GC_finalize_now;
+      prev_fo = 0;
+      while (curr_fo != 0) {
+	next_fo = fo_next(curr_fo);
+	if (curr_fo -> fo_mark_proc == GC_unreachable_finalize_mark_proc) {
+	  real_ptr = (ptr_t)curr_fo -> fo_hidden_base;
+	  if (!GC_is_marked(real_ptr)) {
+	      GC_set_mark_bit(real_ptr);
+	  } else {
+	      if (prev_fo == 0)
+		GC_finalize_now = next_fo;
+	      else
+		fo_set_next(prev_fo, next_fo);
+
+              curr_fo -> fo_hidden_base =
+              		(word) HIDE_POINTER(curr_fo -> fo_hidden_base);
+              GC_words_finalized -=
+                 	ALIGNED_WORDS(curr_fo -> fo_object_size)
+              		+ ALIGNED_WORDS(sizeof(struct finalizable_object));
+
+	      i = HASH2(real_ptr, log_fo_table_size);
+	      fo_set_next (curr_fo, fo_head[i]);
+	      GC_fo_entries++;
+	      fo_head[i] = curr_fo;
+	      curr_fo = prev_fo;
+	  }
+	}
+	prev_fo = curr_fo;
+	curr_fo = next_fo;
+      }
   }
 
   /* Remove dangling disappearing links. */
Index: libffi/Makefile.in
===================================================================
--- libffi/Makefile.in	(revision 122231)
+++ libffi/Makefile.in	(working copy)
@@ -91,7 +91,7 @@
 libffi_la_LIBADD =
 am__dirstamp = $(am__leading_dot)dirstamp
 am_libffi_la_OBJECTS = src/debug.lo src/prep_cif.lo src/types.lo \
-	src/raw_api.lo src/java_raw_api.lo
+	src/raw_api.lo src/java_raw_api.lo src/closures.lo
 @MIPS_IRIX_TRUE@am__objects_1 = src/mips/ffi.lo src/mips/o32.lo \
 @MIPS_IRIX_TRUE@	src/mips/n32.lo
 @MIPS_LINUX_TRUE@am__objects_2 = src/mips/ffi.lo src/mips/o32.lo
@@ -138,7 +138,7 @@
 	$(nodist_libffi_la_OBJECTS)
 libffi_convenience_la_LIBADD =
 am__objects_23 = src/debug.lo src/prep_cif.lo src/types.lo \
-	src/raw_api.lo src/java_raw_api.lo
+	src/raw_api.lo src/java_raw_api.lo src/closures.lo
 am_libffi_convenience_la_OBJECTS = $(am__objects_23)
 am__objects_24 = $(am__objects_1) $(am__objects_2) $(am__objects_3) \
 	$(am__objects_4) $(am__objects_5) $(am__objects_6) \
@@ -411,7 +411,7 @@
 toolexeclib_LTLIBRARIES = libffi.la
 noinst_LTLIBRARIES = libffi_convenience.la
 libffi_la_SOURCES = src/debug.c src/prep_cif.c src/types.c \
-		src/raw_api.c src/java_raw_api.c
+		src/raw_api.c src/java_raw_api.c src/closures.c
 
 nodist_libffi_la_SOURCES = $(am__append_1) $(am__append_2) \
 	$(am__append_3) $(am__append_4) $(am__append_5) \
@@ -529,6 +529,7 @@
 src/types.lo: src/$(am__dirstamp) src/$(DEPDIR)/$(am__dirstamp)
 src/raw_api.lo: src/$(am__dirstamp) src/$(DEPDIR)/$(am__dirstamp)
 src/java_raw_api.lo: src/$(am__dirstamp) src/$(DEPDIR)/$(am__dirstamp)
+src/closures.lo: src/$(am__dirstamp) src/$(DEPDIR)/$(am__dirstamp)
 src/mips/$(am__dirstamp):
 	@$(mkdir_p) src/mips
 	@: > src/mips/$(am__dirstamp)
@@ -720,6 +721,8 @@
 	-rm -f src/arm/ffi.lo
 	-rm -f src/arm/sysv.$(OBJEXT)
 	-rm -f src/arm/sysv.lo
+	-rm -f src/closures.$(OBJEXT)
+	-rm -f src/closures.lo
 	-rm -f src/cris/ffi.$(OBJEXT)
 	-rm -f src/cris/ffi.lo
 	-rm -f src/cris/sysv.$(OBJEXT)
@@ -814,6 +817,7 @@
 distclean-compile:
 	-rm -f *.tab.c
 
+@AMDEP_TRUE@@am__include@ @am__quote@src/$(DEPDIR)/closures.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@src/$(DEPDIR)/debug.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@src/$(DEPDIR)/java_raw_api.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@src/$(DEPDIR)/prep_cif.Plo@am__quote@
Index: libffi/include/ffi.h.in
===================================================================
--- libffi/include/ffi.h.in	(revision 122231)
+++ libffi/include/ffi.h.in	(working copy)
@@ -1,5 +1,5 @@
 /* -----------------------------------------------------------------*-C-*-
-   libffi @VERSION@ - Copyright (c) 1996-2003  Red Hat, Inc.
+   libffi @VERSION@ - Copyright (c) 1996-2003, 2007  Red Hat, Inc.
 
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
@@ -220,12 +224,22 @@
   void      *user_data;
 } ffi_closure __attribute__((aligned (8)));
 
+void *ffi_closure_alloc (size_t size, void **code);
+void ffi_closure_free (void *);
+
 ffi_status
 ffi_prep_closure (ffi_closure*,
 		  ffi_cif *,
 		  void (*fun)(ffi_cif*,void*,void**,void*),
 		  void *user_data);
 
+ffi_status
+ffi_prep_closure_loc (ffi_closure*,
+		      ffi_cif *,
+		      void (*fun)(ffi_cif*,void*,void**,void*),
+		      void *user_data,
+		      void*codeloc);
+
 typedef struct {
   char tramp[FFI_TRAMPOLINE_SIZE];
 
@@ -254,11 +268,25 @@
 		      void *user_data);
 
 ffi_status
+ffi_prep_raw_closure_loc (ffi_raw_closure*,
+			  ffi_cif *cif,
+			  void (*fun)(ffi_cif*,void*,ffi_raw*,void*),
+			  void *user_data,
+			  void *codeloc);
+
+ffi_status
 ffi_prep_java_raw_closure (ffi_raw_closure*,
 		           ffi_cif *cif,
 		           void (*fun)(ffi_cif*,void*,ffi_raw*,void*),
 		           void *user_data);
 
+ffi_status
+ffi_prep_java_raw_closure_loc (ffi_raw_closure*,
+			       ffi_cif *cif,
+			       void (*fun)(ffi_cif*,void*,ffi_raw*,void*),
+			       void *user_data,
+			       void *codeloc);
+
 #endif /* FFI_CLOSURES */
 
 /* ---- Public interface definition -------------------------------------- */
Index: libffi/src/closures.c
===================================================================
--- libffi/src/closures.c	(revision 0)
+++ libffi/src/closures.c	(revision 124261)
@@ -0,0 +1,575 @@
+/* -----------------------------------------------------------------------
+   closures.c - Copyright (c) 2007  Red Hat, Inc.
+
+   Code to allocate and deallocate memory for closures.
+
+   Permission is hereby granted, free of charge, to any person obtaining
+   a copy of this software and associated documentation files (the
+   ``Software''), to deal in the Software without restriction, including
+   without limitation the rights to use, copy, modify, merge, publish,
+   distribute, sublicense, and/or sell copies of the Software, and to
+   permit persons to whom the Software is furnished to do so, subject to
+   the following conditions:
+
+   The above copyright notice and this permission notice shall be included
+   in all copies or substantial portions of the Software.
+
+   THE SOFTWARE IS PROVIDED ``AS IS'', WITHOUT WARRANTY OF ANY KIND, EXPRESS
+   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+   IN NO EVENT SHALL CYGNUS SOLUTIONS BE LIABLE FOR ANY CLAIM, DAMAGES OR
+   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
+   OTHER DEALINGS IN THE SOFTWARE.
+   ----------------------------------------------------------------------- */
+
+#if defined __linux__ && !defined _GNU_SOURCE
+#define _GNU_SOURCE 1
+#endif
+
+#include <ffi.h>
+#include <ffi_common.h>
+
+#ifndef FFI_MMAP_EXEC_WRIT
+# if __gnu_linux__
+/* This macro indicates it may be forbidden to map anonymous memory
+   with both write and execute permission.  Code compiled when this
+   option is defined will attempt to map such pages once, but if it
+   fails, it falls back to creating a temporary file in a writable and
+   executable filesystem and mapping pages from it into separate
+   locations in the virtual memory space, one location writable and
+   another executable.  */
+#  define FFI_MMAP_EXEC_WRIT 1
+# endif
+#endif
+
+#if FFI_MMAP_EXEC_WRIT && !defined FFI_MMAP_EXEC_SELINUX
+# ifdef __linux__
+/* When defined to 1 check for SELinux and if SELinux is active,
+   don't attempt PROT_EXEC|PROT_WRITE mapping at all, as that
+   might cause audit messages.  */
+#  define FFI_MMAP_EXEC_SELINUX 1
+# endif
+#endif
+
+#if FFI_CLOSURES
+
+# if FFI_MMAP_EXEC_WRIT
+
+#define USE_LOCKS 1
+#define USE_DL_PREFIX 1
+#define USE_BUILTIN_FFS 1
+
+/* We need to use mmap, not sbrk.  */
+#define HAVE_MORECORE 0
+
+/* We could, in theory, support mremap, but it wouldn't buy us anything.  */
+#define HAVE_MREMAP 0
+
+/* We have no use for this, so save some code and data.  */
+#define NO_MALLINFO 1
+
+/* We need all allocations to be in regular segments, otherwise we
+   lose track of the corresponding code address.  */
+#define DEFAULT_MMAP_THRESHOLD MAX_SIZE_T
+
+/* Don't allocate more than a page unless needed.  */
+#define DEFAULT_GRANULARITY ((size_t)malloc_getpagesize)
+
+#if FFI_CLOSURE_TEST
+/* Don't release single pages, to avoid a worst-case scenario of
+   continuously allocating and releasing single pages, but release
+   pairs of pages, which should do just as well given that allocations
+   are likely to be small.  */
+#define DEFAULT_TRIM_THRESHOLD ((size_t)malloc_getpagesize)
+#endif
+
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <errno.h>
+#include <unistd.h>
+#include <string.h>
+#include <stdio.h>
+#include <mntent.h>
+#include <sys/param.h>
+#include <pthread.h>
+
+/* We don't want sys/mman.h to be included after we redefine mmap and
+   dlmunmap.  */
+#include <sys/mman.h>
+#define LACKS_SYS_MMAN_H 1
+
+#if FFI_MMAP_EXEC_SELINUX
+#include <sys/statfs.h>
+#include <stdlib.h>
+
+static int selinux_enabled = -1;
+
+static int
+selinux_enabled_check (void)
+{
+  struct statfs sfs;
+  FILE *f;
+  char *buf = NULL;
+  size_t len = 0;
+
+  if (statfs ("/selinux", &sfs) >= 0
+      && (unsigned int) sfs.f_type == 0xf97cff8cU)
+    return 1;
+  f = fopen ("/proc/mounts", "r");
+  if (f == NULL)
+    return 0;
+  while (getline (&buf, &len, f) >= 0)
+    {
+      char *p = strchr (buf, ' ');
+      if (p == NULL)
+        break;
+      p = strchr (p + 1, ' ');
+      if (p == NULL)
+        break;
+      if (strncmp (p + 1, "selinuxfs ", 10) != 0)
+        {
+          free (buf);
+          fclose (f);
+          return 1;
+        }
+    }
+  free (buf);
+  fclose (f);
+  return 0;
+}
+
+#define is_selinux_enabled() (selinux_enabled >= 0 ? selinux_enabled \
+			      : (selinux_enabled = selinux_enabled_check ()))
+
+#else
+
+#define is_selinux_enabled() 0
+
+#endif
+
+#define MAYBE_UNUSED __attribute__((__unused__))
+
+/* Declare all functions defined in dlmalloc.c as static.  */
+static void *dlmalloc(size_t);
+static void dlfree(void*);
+static void *dlcalloc(size_t, size_t) MAYBE_UNUSED;
+static void *dlrealloc(void *, size_t) MAYBE_UNUSED;
+static void *dlmemalign(size_t, size_t) MAYBE_UNUSED;
+static void *dlvalloc(size_t) MAYBE_UNUSED;
+static int dlmallopt(int, int) MAYBE_UNUSED;
+static size_t dlmalloc_footprint(void) MAYBE_UNUSED;
+static size_t dlmalloc_max_footprint(void) MAYBE_UNUSED;
+static void** dlindependent_calloc(size_t, size_t, void**) MAYBE_UNUSED;
+static void** dlindependent_comalloc(size_t, size_t*, void**) MAYBE_UNUSED;
+static void *dlpvalloc(size_t) MAYBE_UNUSED;
+static int dlmalloc_trim(size_t) MAYBE_UNUSED;
+static size_t dlmalloc_usable_size(void*) MAYBE_UNUSED;
+static void dlmalloc_stats(void) MAYBE_UNUSED;
+
+/* Use these for mmap and munmap within dlmalloc.c.  */
+static void *dlmmap(void *, size_t, int, int, int, off_t);
+static int dlmunmap(void *, size_t);
+
+#define mmap dlmmap
+#define munmap dlmunmap
+
+#include "dlmalloc.c"
+
+#undef mmap
+#undef munmap
+
+/* A mutex used to synchronize access to *exec* variables in this file.  */
+static pthread_mutex_t open_temp_exec_file_mutex = PTHREAD_MUTEX_INITIALIZER;
+
+/* A file descriptor of a temporary file from which we'll map
+   executable pages.  */
+static int execfd = -1;
+
+/* The amount of space already allocated from the temporary file.  */
+static size_t execsize = 0;
+
+/* Open a temporary file name, and immediately unlink it.  */
+static int
+open_temp_exec_file_name (char *name)
+{
+  int fd = mkstemp (name);
+
+  if (fd != -1)
+    unlink (name);
+
+  return fd;
+}
+
+/* Open a temporary file in the named directory.  */
+static int
+open_temp_exec_file_dir (const char *dir)
+{
+  static const char suffix[] = "/ffiXXXXXX";
+  int lendir = strlen (dir);
+  char *tempname = __builtin_alloca (lendir + sizeof (suffix));
+
+  if (!tempname)
+    return -1;
+
+  memcpy (tempname, dir, lendir);
+  memcpy (tempname + lendir, suffix, sizeof (suffix));
+
+  return open_temp_exec_file_name (tempname);
+}
+
+/* Open a temporary file in the directory in the named environment
+   variable.  */
+static int
+open_temp_exec_file_env (const char *envvar)
+{
+  const char *value = getenv (envvar);
+
+  if (!value)
+    return -1;
+
+  return open_temp_exec_file_dir (value);
+}
+
+/* Open a temporary file in an executable and writable mount point
+   listed in the mounts file.  Subsequent calls with the same mounts
+   keep searching for mount points in the same file.  Providing NULL
+   as the mounts file closes the file.  */
+static int
+open_temp_exec_file_mnt (const char *mounts)
+{
+  static const char *last_mounts;
+  static FILE *last_mntent;
+
+  if (mounts != last_mounts)
+    {
+      if (last_mntent)
+	endmntent (last_mntent);
+
+      last_mounts = mounts;
+
+      if (mounts)
+	last_mntent = setmntent (mounts, "r");
+      else
+	last_mntent = NULL;
+    }
+
+  if (!last_mntent)
+    return -1;
+
+  for (;;)
+    {
+      int fd;
+      struct mntent mnt;
+      char buf[MAXPATHLEN * 3];
+
+      if (getmntent_r (last_mntent, &mnt, buf, sizeof (buf)))
+	return -1;
+
+      if (hasmntopt (&mnt, "ro")
+	  || hasmntopt (&mnt, "noexec")
+	  || access (mnt.mnt_dir, W_OK))
+	continue;
+
+      fd = open_temp_exec_file_dir (mnt.mnt_dir);
+
+      if (fd != -1)
+	return fd;
+    }
+}
+
+/* Instructions to look for a location to hold a temporary file that
+   can be mapped in for execution.  */
+static struct
+{
+  int (*func)(const char *);
+  const char *arg;
+  int repeat;
+} open_temp_exec_file_opts[] = {
+  { open_temp_exec_file_env, "TMPDIR", 0 },
+  { open_temp_exec_file_dir, "/tmp", 0 },
+  { open_temp_exec_file_dir, "/var/tmp", 0 },
+  { open_temp_exec_file_dir, "/dev/shm", 0 },
+  { open_temp_exec_file_env, "HOME", 0 },
+  { open_temp_exec_file_mnt, "/etc/mtab", 1 },
+  { open_temp_exec_file_mnt, "/proc/mounts", 1 },
+};
+
+/* Current index into open_temp_exec_file_opts.  */
+static int open_temp_exec_file_opts_idx = 0;
+
+/* Reset a current multi-call func, then advances to the next entry.
+   If we're at the last, go back to the first and return nonzero,
+   otherwise return zero.  */
+static int
+open_temp_exec_file_opts_next (void)
+{
+  if (open_temp_exec_file_opts[open_temp_exec_file_opts_idx].repeat)
+    open_temp_exec_file_opts[open_temp_exec_file_opts_idx].func (NULL);
+
+  open_temp_exec_file_opts_idx++;
+  if (open_temp_exec_file_opts_idx
+      == (sizeof (open_temp_exec_file_opts)
+	  / sizeof (*open_temp_exec_file_opts)))
+    {
+      open_temp_exec_file_opts_idx = 0;
+      return 1;
+    }
+
+  return 0;
+}
+
+/* Return a file descriptor of a temporary zero-sized file in a
+   writable and exexutable filesystem.  */
+static int
+open_temp_exec_file (void)
+{
+  int fd;
+
+  do
+    {
+      fd = open_temp_exec_file_opts[open_temp_exec_file_opts_idx].func
+	(open_temp_exec_file_opts[open_temp_exec_file_opts_idx].arg);
+
+      if (!open_temp_exec_file_opts[open_temp_exec_file_opts_idx].repeat
+	  || fd == -1)
+	{
+	  if (open_temp_exec_file_opts_next ())
+	    break;
+	}
+    }
+  while (fd == -1);
+
+  return fd;
+}
+
+/* Map in a chunk of memory from the temporary exec file into separate
+   locations in the virtual memory address space, one writable and one
+   executable.  Returns the address of the writable portion, after
+   storing an offset to the corresponding executable portion at the
+   last word of the requested chunk.  */
+static void *
+dlmmap_locked (void *start, size_t length, int prot, int flags, off_t offset)
+{
+  void *ptr;
+
+  if (execfd == -1)
+    {
+      open_temp_exec_file_opts_idx = 0;
+    retry_open:
+      execfd = open_temp_exec_file ();
+      if (execfd == -1)
+	return MFAIL;
+    }
+
+  offset = execsize;
+
+  if (ftruncate (execfd, offset + length))
+    return MFAIL;
+
+  flags &= ~(MAP_PRIVATE | MAP_ANONYMOUS);
+  flags |= MAP_SHARED;
+
+  ptr = mmap (NULL, length, (prot & ~PROT_WRITE) | PROT_EXEC,
+	      flags, execfd, offset);
+  if (ptr == MFAIL)
+    {
+      if (!offset)
+	{
+	  close (execfd);
+	  goto retry_open;
+	}
+      ftruncate (execfd, offset);
+      return MFAIL;
+    }
+  else if (!offset
+	   && open_temp_exec_file_opts[open_temp_exec_file_opts_idx].repeat)
+    open_temp_exec_file_opts_next ();
+
+  start = mmap (start, length, prot, flags, execfd, offset);
+
+  if (start == MFAIL)
+    {
+      munmap (ptr, length);
+      ftruncate (execfd, offset);
+      return start;
+    }
+
+  mmap_exec_offset ((char *)start, length) = (char*)ptr - (char*)start;
+
+  execsize += length;
+
+  return start;
+}
+
+/* Map in a writable and executable chunk of memory if possible.
+   Failing that, fall back to dlmmap_locked.  */
+static void *
+dlmmap (void *start, size_t length, int prot,
+	int flags, int fd, off_t offset)
+{
+  void *ptr;
+
+  assert (start == NULL && length % malloc_getpagesize == 0
+	  && prot == (PROT_READ | PROT_WRITE)
+	  && flags == (MAP_PRIVATE | MAP_ANONYMOUS)
+	  && fd == -1 && offset == 0);
+
+#if FFI_CLOSURE_TEST
+  printf ("mapping in %zi\n", length);
+#endif
+
+  if (execfd == -1 && !is_selinux_enabled ())
+    {
+      ptr = mmap (start, length, prot | PROT_EXEC, flags, fd, offset);
+
+      if (ptr != MFAIL || (errno != EPERM && errno != EACCES))
+	/* Cool, no need to mess with separate segments.  */
+	return ptr;
+
+      /* If MREMAP_DUP is ever introduced and implemented, try mmap
+	 with ((prot & ~PROT_WRITE) | PROT_EXEC) and mremap with
+	 MREMAP_DUP and prot at this point.  */
+    }
+
+  if (execsize == 0 || execfd == -1)
+    {
+      pthread_mutex_lock (&open_temp_exec_file_mutex);
+      ptr = dlmmap_locked (start, length, prot, flags, offset);
+      pthread_mutex_unlock (&open_temp_exec_file_mutex);
+
+      return ptr;
+    }
+
+  return dlmmap_locked (start, length, prot, flags, offset);
+}
+
+/* Release memory at the given address, as well as the corresponding
+   executable page if it's separate.  */
+static int
+dlmunmap (void *start, size_t length)
+{
+  /* We don't bother decreasing execsize or truncating the file, since
+     we can't quite tell whether we're unmapping the end of the file.
+     We don't expect frequent deallocation anyway.  If we did, we
+     could locate pages in the file by writing to the pages being
+     deallocated and checking that the file contents change.
+     Yuck.  */
+  msegmentptr seg = segment_holding (gm, start);
+  void *code;
+
+#if FFI_CLOSURE_TEST
+  printf ("unmapping %zi\n", length);
+#endif
+
+  if (seg && (code = add_segment_exec_offset (start, seg)) != start)
+    {
+      int ret = munmap (code, length);
+      if (ret)
+	return ret;
+    }
+
+  return munmap (start, length);
+}
+
+#if FFI_CLOSURE_FREE_CODE
+/* Return segment holding given code address.  */
+static msegmentptr
+segment_holding_code (mstate m, char* addr)
+{
+  msegmentptr sp = &m->seg;
+  for (;;) {
+    if (addr >= add_segment_exec_offset (sp->base, sp)
+	&& addr < add_segment_exec_offset (sp->base, sp) + sp->size)
+      return sp;
+    if ((sp = sp->next) == 0)
+      return 0;
+  }
+}
+#endif
+
+/* Allocate a chunk of memory with the given size.  Returns a pointer
+   to the writable address, and sets *CODE to the executable
+   corresponding virtual address.  */
+void *
+ffi_closure_alloc (size_t size, void **code)
+{
+  void *ptr;
+
+  if (!code)
+    return NULL;
+
+  ptr = dlmalloc (size);
+
+  if (ptr)
+    {
+      msegmentptr seg = segment_holding (gm, ptr);
+
+      *code = add_segment_exec_offset (ptr, seg);
+    }
+
+  return ptr;
+}
+
+/* Release a chunk of memory allocated with ffi_closure_alloc.  If
+   FFI_CLOSURE_FREE_CODE is nonzero, the given address can be the
+   writable or the executable address given.  Otherwise, only the
+   writable address can be provided here.  */
+void
+ffi_closure_free (void *ptr)
+{
+#if FFI_CLOSURE_FREE_CODE
+  msegmentptr seg = segment_holding_code (gm, ptr);
+
+  if (seg)
+    ptr = sub_segment_exec_offset (ptr, seg);
+#endif
+
+  dlfree (ptr);
+}
+
+
+#if FFI_CLOSURE_TEST
+/* Do some internal sanity testing to make sure allocation and
+   deallocation of pages are working as intended.  */
+int main ()
+{
+  void *p[3];
+#define GET(idx, len) do { p[idx] = dlmalloc (len); printf ("allocated %zi for p[%i]\n", (len), (idx)); } while (0)
+#define PUT(idx) do { printf ("freeing p[%i]\n", (idx)); dlfree (p[idx]); } while (0)
+  GET (0, malloc_getpagesize / 2);
+  GET (1, 2 * malloc_getpagesize - 64 * sizeof (void*));
+  PUT (1);
+  GET (1, 2 * malloc_getpagesize);
+  GET (2, malloc_getpagesize / 2);
+  PUT (1);
+  PUT (0);
+  PUT (2);
+  return 0;
+}
+#endif /* FFI_CLOSURE_TEST */
+# else /* ! FFI_MMAP_EXEC_WRIT */
+
+/* On many systems, memory returned by malloc is writable and
+   executable, so just use it.  */
+
+#include <stdlib.h>
+
+void *
+ffi_closure_alloc (size_t size, void **code)
+{
+  if (!code)
+    return NULL;
+
+  return *code = malloc (size);
+}
+
+void
+ffi_closure_free (void *ptr)
+{
+  free (ptr);
+}
+
+# endif /* ! FFI_MMAP_EXEC_WRIT */
+#endif /* FFI_CLOSURES */
Index: libffi/src/dlmalloc.c
===================================================================
--- libffi/src/dlmalloc.c	(revision 0)
+++ libffi/src/dlmalloc.c	(revision 124261)
@@ -0,0 +1,5099 @@
+/*
+  This is a version (aka dlmalloc) of malloc/free/realloc written by
+  Doug Lea and released to the public domain, as explained at
+  http://creativecommons.org/licenses/publicdomain.  Send questions,
+  comments, complaints, performance data, etc to dl@cs.oswego.edu
+
+* Version 2.8.3 Thu Sep 22 11:16:15 2005  Doug Lea  (dl at gee)
+
+   Note: There may be an updated version of this malloc obtainable at
+           ftp://gee.cs.oswego.edu/pub/misc/malloc.c
+         Check before installing!
+
+* Quickstart
+
+  This library is all in one file to simplify the most common usage:
+  ftp it, compile it (-O3), and link it into another program. All of
+  the compile-time options default to reasonable values for use on
+  most platforms.  You might later want to step through various
+  compile-time and dynamic tuning options.
+
+  For convenience, an include file for code using this malloc is at:
+     ftp://gee.cs.oswego.edu/pub/misc/malloc-2.8.3.h
+  You don't really need this .h file unless you call functions not
+  defined in your system include files.  The .h file contains only the
+  excerpts from this file needed for using this malloc on ANSI C/C++
+  systems, so long as you haven't changed compile-time options about
+  naming and tuning parameters.  If you do, then you can create your
+  own malloc.h that does include all settings by cutting at the point
+  indicated below. Note that you may already by default be using a C
+  library containing a malloc that is based on some version of this
+  malloc (for example in linux). You might still want to use the one
+  in this file to customize settings or to avoid overheads associated
+  with library versions.
+
+* Vital statistics:
+
+  Supported pointer/size_t representation:       4 or 8 bytes
+       size_t MUST be an unsigned type of the same width as
+       pointers. (If you are using an ancient system that declares
+       size_t as a signed type, or need it to be a different width
+       than pointers, you can use a previous release of this malloc
+       (e.g. 2.7.2) supporting these.)
+
+  Alignment:                                     8 bytes (default)
+       This suffices for nearly all current machines and C compilers.
+       However, you can define MALLOC_ALIGNMENT to be wider than this
+       if necessary (up to 128bytes), at the expense of using more space.
+
+  Minimum overhead per allocated chunk:   4 or  8 bytes (if 4byte sizes)
+                                          8 or 16 bytes (if 8byte sizes)
+       Each malloced chunk has a hidden word of overhead holding size
+       and status information, and additional cross-check word
+       if FOOTERS is defined.
+
+  Minimum allocated size: 4-byte ptrs:  16 bytes    (including overhead)
+                          8-byte ptrs:  32 bytes    (including overhead)
+
+       Even a request for zero bytes (i.e., malloc(0)) returns a
+       pointer to something of the minimum allocatable size.
+       The maximum overhead wastage (i.e., number of extra bytes
+       allocated than were requested in malloc) is less than or equal
+       to the minimum size, except for requests >= mmap_threshold that
+       are serviced via mmap(), where the worst case wastage is about
+       32 bytes plus the remainder from a system page (the minimal
+       mmap unit); typically 4096 or 8192 bytes.
+
+  Security: static-safe; optionally more or less
+       The "security" of malloc refers to the ability of malicious
+       code to accentuate the effects of errors (for example, freeing
+       space that is not currently malloc'ed or overwriting past the
+       ends of chunks) in code that calls malloc.  This malloc
+       guarantees not to modify any memory locations below the base of
+       heap, i.e., static variables, even in the presence of usage
+       errors.  The routines additionally detect most improper frees
+       and reallocs.  All this holds as long as the static bookkeeping
+       for malloc itself is not corrupted by some other means.  This
+       is only one aspect of security -- these checks do not, and
+       cannot, detect all possible programming errors.
+
+       If FOOTERS is defined nonzero, then each allocated chunk
+       carries an additional check word to verify that it was malloced
+       from its space.  These check words are the same within each
+       execution of a program using malloc, but differ across
+       executions, so externally crafted fake chunks cannot be
+       freed. This improves security by rejecting frees/reallocs that
+       could corrupt heap memory, in addition to the checks preventing
+       writes to statics that are always on.  This may further improve
+       security at the expense of time and space overhead.  (Note that
+       FOOTERS may also be worth using with MSPACES.)
+
+       By default detected errors cause the program to abort (calling
+       "abort()"). You can override this to instead proceed past
+       errors by defining PROCEED_ON_ERROR.  In this case, a bad free
+       has no effect, and a malloc that encounters a bad address
+       caused by user overwrites will ignore the bad address by
+       dropping pointers and indices to all known memory. This may
+       be appropriate for programs that should continue if at all
+       possible in the face of programming errors, although they may
+       run out of memory because dropped memory is never reclaimed.
+
+       If you don't like either of these options, you can define
+       CORRUPTION_ERROR_ACTION and USAGE_ERROR_ACTION to do anything
+       else. And if if you are sure that your program using malloc has
+       no errors or vulnerabilities, you can define INSECURE to 1,
+       which might (or might not) provide a small performance improvement.
+
+  Thread-safety: NOT thread-safe unless USE_LOCKS defined
+       When USE_LOCKS is defined, each public call to malloc, free,
+       etc is surrounded with either a pthread mutex or a win32
+       spinlock (depending on WIN32). This is not especially fast, and
+       can be a major bottleneck.  It is designed only to provide
+       minimal protection in concurrent environments, and to provide a
+       basis for extensions.  If you are using malloc in a concurrent
+       program, consider instead using ptmalloc, which is derived from
+       a version of this malloc. (See http://www.malloc.de).
+
+  System requirements: Any combination of MORECORE and/or MMAP/MUNMAP
+       This malloc can use unix sbrk or any emulation (invoked using
+       the CALL_MORECORE macro) and/or mmap/munmap or any emulation
+       (invoked using CALL_MMAP/CALL_MUNMAP) to get and release system
+       memory.  On most unix systems, it tends to work best if both
+       MORECORE and MMAP are enabled.  On Win32, it uses emulations
+       based on VirtualAlloc. It also uses common C library functions
+       like memset.
+
+  Compliance: I believe it is compliant with the Single Unix Specification
+       (See http://www.unix.org). Also SVID/XPG, ANSI C, and probably
+       others as well.
+
+* Overview of algorithms
+
+  This is not the fastest, most space-conserving, most portable, or
+  most tunable malloc ever written. However it is among the fastest
+  while also being among the most space-conserving, portable and
+  tunable.  Consistent balance across these factors results in a good
+  general-purpose allocator for malloc-intensive programs.
+
+  In most ways, this malloc is a best-fit allocator. Generally, it
+  chooses the best-fitting existing chunk for a request, with ties
+  broken in approximately least-recently-used order. (This strategy
+  normally maintains low fragmentation.) However, for requests less
+  than 256bytes, it deviates from best-fit when there is not an
+  exactly fitting available chunk by preferring to use space adjacent
+  to that used for the previous small request, as well as by breaking
+  ties in approximately most-recently-used order. (These enhance
+  locality of series of small allocations.)  And for very large requests
+  (>= 256Kb by default), it relies on system memory mapping
+  facilities, if supported.  (This helps avoid carrying around and
+  possibly fragmenting memory used only for large chunks.)
+
+  All operations (except malloc_stats and mallinfo) have execution
+  times that are bounded by a constant factor of the number of bits in
+  a size_t, not counting any clearing in calloc or copying in realloc,
+  or actions surrounding MORECORE and MMAP that have times
+  proportional to the number of non-contiguous regions returned by
+  system allocation routines, which is often just 1.
+
+  The implementation is not very modular and seriously overuses
+  macros. Perhaps someday all C compilers will do as good a job
+  inlining modular code as can now be done by brute-force expansion,
+  but now, enough of them seem not to.
+
+  Some compilers issue a lot of warnings about code that is
+  dead/unreachable only on some platforms, and also about intentional
+  uses of negation on unsigned types. All known cases of each can be
+  ignored.
+
+  For a longer but out of date high-level description, see
+     http://gee.cs.oswego.edu/dl/html/malloc.html
+
+* MSPACES
+  If MSPACES is defined, then in addition to malloc, free, etc.,
+  this file also defines mspace_malloc, mspace_free, etc. These
+  are versions of malloc routines that take an "mspace" argument
+  obtained using create_mspace, to control all internal bookkeeping.
+  If ONLY_MSPACES is defined, only these versions are compiled.
+  So if you would like to use this allocator for only some allocations,
+  and your system malloc for others, you can compile with
+  ONLY_MSPACES and then do something like...
+    static mspace mymspace = create_mspace(0,0); // for example
+    #define mymalloc(bytes)  mspace_malloc(mymspace, bytes)
+
+  (Note: If you only need one instance of an mspace, you can instead
+  use "USE_DL_PREFIX" to relabel the global malloc.)
+
+  You can similarly create thread-local allocators by storing
+  mspaces as thread-locals. For example:
+    static __thread mspace tlms = 0;
+    void*  tlmalloc(size_t bytes) {
+      if (tlms == 0) tlms = create_mspace(0, 0);
+      return mspace_malloc(tlms, bytes);
+    }
+    void  tlfree(void* mem) { mspace_free(tlms, mem); }
+
+  Unless FOOTERS is defined, each mspace is completely independent.
+  You cannot allocate from one and free to another (although
+  conformance is only weakly checked, so usage errors are not always
+  caught). If FOOTERS is defined, then each chunk carries around a tag
+  indicating its originating mspace, and frees are directed to their
+  originating spaces.
+
+ -------------------------  Compile-time options ---------------------------
+
+Be careful in setting #define values for numerical constants of type
+size_t. On some systems, literal values are not automatically extended
+to size_t precision unless they are explicitly casted.
+
+WIN32                    default: defined if _WIN32 defined
+  Defining WIN32 sets up defaults for MS environment and compilers.
+  Otherwise defaults are for unix.
+
+MALLOC_ALIGNMENT         default: (size_t)8
+  Controls the minimum alignment for malloc'ed chunks.  It must be a
+  power of two and at least 8, even on machines for which smaller
+  alignments would suffice. It may be defined as larger than this
+  though. Note however that code and data structures are optimized for
+  the case of 8-byte alignment.
+
+MSPACES                  default: 0 (false)
+  If true, compile in support for independent allocation spaces.
+  This is only supported if HAVE_MMAP is true.
+
+ONLY_MSPACES             default: 0 (false)
+  If true, only compile in mspace versions, not regular versions.
+
+USE_LOCKS                default: 0 (false)
+  Causes each call to each public routine to be surrounded with
+  pthread or WIN32 mutex lock/unlock. (If set true, this can be
+  overridden on a per-mspace basis for mspace versions.)
+
+FOOTERS                  default: 0
+  If true, provide extra checking and dispatching by placing
+  information in the footers of allocated chunks. This adds
+  space and time overhead.
+
+INSECURE                 default: 0
+  If true, omit checks for usage errors and heap space overwrites.
+
+USE_DL_PREFIX            default: NOT defined
+  Causes compiler to prefix all public routines with the string 'dl'.
+  This can be useful when you only want to use this malloc in one part
+  of a program, using your regular system malloc elsewhere.
+
+ABORT                    default: defined as abort()
+  Defines how to abort on failed checks.  On most systems, a failed
+  check cannot die with an "assert" or even print an informative
+  message, because the underlying print routines in turn call malloc,
+  which will fail again.  Generally, the best policy is to simply call
+  abort(). It's not very useful to do more than this because many
+  errors due to overwriting will show up as address faults (null, odd
+  addresses etc) rather than malloc-triggered checks, so will also
+  abort.  Also, most compilers know that abort() does not return, so
+  can better optimize code conditionally calling it.
+
+PROCEED_ON_ERROR           default: defined as 0 (false)
+  Controls whether detected bad addresses cause them to bypassed
+  rather than aborting. If set, detected bad arguments to free and
+  realloc are ignored. And all bookkeeping information is zeroed out
+  upon a detected overwrite of freed heap space, thus losing the
+  ability to ever return it from malloc again, but enabling the
+  application to proceed. If PROCEED_ON_ERROR is defined, the
+  static variable malloc_corruption_error_count is compiled in
+  and can be examined to see if errors have occurred. This option
+  generates slower code than the default abort policy.
+
+DEBUG                    default: NOT defined
+  The DEBUG setting is mainly intended for people trying to modify
+  this code or diagnose problems when porting to new platforms.
+  However, it may also be able to better isolate user errors than just
+  using runtime checks.  The assertions in the check routines spell
+  out in more detail the assumptions and invariants underlying the
+  algorithms.  The checking is fairly extensive, and will slow down
+  execution noticeably. Calling malloc_stats or mallinfo with DEBUG
+  set will attempt to check every non-mmapped allocated and free chunk
+  in the course of computing the summaries.
+
+ABORT_ON_ASSERT_FAILURE   default: defined as 1 (true)
+  Debugging assertion failures can be nearly impossible if your
+  version of the assert macro causes malloc to be called, which will
+  lead to a cascade of further failures, blowing the runtime stack.
+  ABORT_ON_ASSERT_FAILURE cause assertions failures to call abort(),
+  which will usually make debugging easier.
+
+MALLOC_FAILURE_ACTION     default: sets errno to ENOMEM, or no-op on win32
+  The action to take before "return 0" when malloc fails to be able to
+  return memory because there is none available.
+
+HAVE_MORECORE             default: 1 (true) unless win32 or ONLY_MSPACES
+  True if this system supports sbrk or an emulation of it.
+
+MORECORE                  default: sbrk
+  The name of the sbrk-style system routine to call to obtain more
+  memory.  See below for guidance on writing custom MORECORE
+  functions. The type of the argument to sbrk/MORECORE varies across
+  systems.  It cannot be size_t, because it supports negative
+  arguments, so it is normally the signed type of the same width as
+  size_t (sometimes declared as "intptr_t").  It doesn't much matter
+  though. Internally, we only call it with arguments less than half
+  the max value of a size_t, which should work across all reasonable
+  possibilities, although sometimes generating compiler warnings.  See
+  near the end of this file for guidelines for creating a custom
+  version of MORECORE.
+
+MORECORE_CONTIGUOUS       default: 1 (true)
+  If true, take advantage of fact that consecutive calls to MORECORE
+  with positive arguments always return contiguous increasing
+  addresses.  This is true of unix sbrk. It does not hurt too much to
+  set it true anyway, since malloc copes with non-contiguities.
+  Setting it false when definitely non-contiguous saves time
+  and possibly wasted space it would take to discover this though.
+
+MORECORE_CANNOT_TRIM      default: NOT defined
+  True if MORECORE cannot release space back to the system when given
+  negative arguments. This is generally necessary only if you are
+  using a hand-crafted MORECORE function that cannot handle negative
+  arguments.
+
+HAVE_MMAP                 default: 1 (true)
+  True if this system supports mmap or an emulation of it.  If so, and
+  HAVE_MORECORE is not true, MMAP is used for all system
+  allocation. If set and HAVE_MORECORE is true as well, MMAP is
+  primarily used to directly allocate very large blocks. It is also
+  used as a backup strategy in cases where MORECORE fails to provide
+  space from system. Note: A single call to MUNMAP is assumed to be
+  able to unmap memory that may have be allocated using multiple calls
+  to MMAP, so long as they are adjacent.
+
+HAVE_MREMAP               default: 1 on linux, else 0
+  If true realloc() uses mremap() to re-allocate large blocks and
+  extend or shrink allocation spaces.
+
+MMAP_CLEARS               default: 1 on unix
+  True if mmap clears memory so calloc doesn't need to. This is true
+  for standard unix mmap using /dev/zero.
+
+USE_BUILTIN_FFS            default: 0 (i.e., not used)
+  Causes malloc to use the builtin ffs() function to compute indices.
+  Some compilers may recognize and intrinsify ffs to be faster than the
+  supplied C version. Also, the case of x86 using gcc is special-cased
+  to an asm instruction, so is already as fast as it can be, and so
+  this setting has no effect. (On most x86s, the asm version is only
+  slightly faster than the C version.)
+
+malloc_getpagesize         default: derive from system includes, or 4096.
+  The system page size. To the extent possible, this malloc manages
+  memory from the system in page-size units.  This may be (and
+  usually is) a function rather than a constant. This is ignored
+  if WIN32, where page size is determined using getSystemInfo during
+  initialization.
+
+USE_DEV_RANDOM             default: 0 (i.e., not used)
+  Causes malloc to use /dev/random to initialize secure magic seed for
+  stamping footers. Otherwise, the current time is used.
+
+NO_MALLINFO                default: 0
+  If defined, don't compile "mallinfo". This can be a simple way
+  of dealing with mismatches between system declarations and
+  those in this file.
+
+MALLINFO_FIELD_TYPE        default: size_t
+  The type of the fields in the mallinfo struct. This was originally
+  defined as "int" in SVID etc, but is more usefully defined as
+  size_t. The value is used only if  HAVE_USR_INCLUDE_MALLOC_H is not set
+
+REALLOC_ZERO_BYTES_FREES    default: not defined
+  This should be set if a call to realloc with zero bytes should 
+  be the same as a call to free. Some people think it should. Otherwise, 
+  since this malloc returns a unique pointer for malloc(0), so does 
+  realloc(p, 0).
+
+LACKS_UNISTD_H, LACKS_FCNTL_H, LACKS_SYS_PARAM_H, LACKS_SYS_MMAN_H
+LACKS_STRINGS_H, LACKS_STRING_H, LACKS_SYS_TYPES_H,  LACKS_ERRNO_H
+LACKS_STDLIB_H                default: NOT defined unless on WIN32
+  Define these if your system does not have these header files.
+  You might need to manually insert some of the declarations they provide.
+
+DEFAULT_GRANULARITY        default: page size if MORECORE_CONTIGUOUS,
+                                system_info.dwAllocationGranularity in WIN32,
+                                otherwise 64K.
+      Also settable using mallopt(M_GRANULARITY, x)
+  The unit for allocating and deallocating memory from the system.  On
+  most systems with contiguous MORECORE, there is no reason to
+  make this more than a page. However, systems with MMAP tend to
+  either require or encourage larger granularities.  You can increase
+  this value to prevent system allocation functions to be called so
+  often, especially if they are slow.  The value must be at least one
+  page and must be a power of two.  Setting to 0 causes initialization
+  to either page size or win32 region size.  (Note: In previous
+  versions of malloc, the equivalent of this option was called
+  "TOP_PAD")
+
+DEFAULT_TRIM_THRESHOLD    default: 2MB
+      Also settable using mallopt(M_TRIM_THRESHOLD, x)
+  The maximum amount of unused top-most memory to keep before
+  releasing via malloc_trim in free().  Automatic trimming is mainly
+  useful in long-lived programs using contiguous MORECORE.  Because
+  trimming via sbrk can be slow on some systems, and can sometimes be
+  wasteful (in cases where programs immediately afterward allocate
+  more large chunks) the value should be high enough so that your
+  overall system performance would improve by releasing this much
+  memory.  As a rough guide, you might set to a value close to the
+  average size of a process (program) running on your system.
+  Releasing this much memory would allow such a process to run in
+  memory.  Generally, it is worth tuning trim thresholds when a
+  program undergoes phases where several large chunks are allocated
+  and released in ways that can reuse each other's storage, perhaps
+  mixed with phases where there are no such chunks at all. The trim
+  value must be greater than page size to have any useful effect.  To
+  disable trimming completely, you can set to MAX_SIZE_T. Note that the trick
+  some people use of mallocing a huge space and then freeing it at
+  program startup, in an attempt to reserve system memory, doesn't
+  have the intended effect under automatic trimming, since that memory
+  will immediately be returned to the system.
+
+DEFAULT_MMAP_THRESHOLD       default: 256K
+      Also settable using mallopt(M_MMAP_THRESHOLD, x)
+  The request size threshold for using MMAP to directly service a
+  request. Requests of at least this size that cannot be allocated
+  using already-existing space will be serviced via mmap.  (If enough
+  normal freed space already exists it is used instead.)  Using mmap
+  segregates relatively large chunks of memory so that they can be
+  individually obtained and released from the host system. A request
+  serviced through mmap is never reused by any other request (at least
+  not directly; the system may just so happen to remap successive
+  requests to the same locations).  Segregating space in this way has
+  the benefits that: Mmapped space can always be individually released
+  back to the system, which helps keep the system level memory demands
+  of a long-lived program low.  Also, mapped memory doesn't become
+  `locked' between other chunks, as can happen with normally allocated
+  chunks, which means that even trimming via malloc_trim would not
+  release them.  However, it has the disadvantage that the space
+  cannot be reclaimed, consolidated, and then used to service later
+  requests, as happens with normal chunks.  The advantages of mmap
+  nearly always outweigh disadvantages for "large" chunks, but the
+  value of "large" may vary across systems.  The default is an
+  empirically derived value that works well in most systems. You can
+  disable mmap by setting to MAX_SIZE_T.
+
+*/
+
+#ifndef WIN32
+#ifdef _WIN32
+#define WIN32 1
+#endif  /* _WIN32 */
+#endif  /* WIN32 */
+#ifdef WIN32
+#define WIN32_LEAN_AND_MEAN
+#include <windows.h>
+#define HAVE_MMAP 1
+#define HAVE_MORECORE 0
+#define LACKS_UNISTD_H
+#define LACKS_SYS_PARAM_H
+#define LACKS_SYS_MMAN_H
+#define LACKS_STRING_H
+#define LACKS_STRINGS_H
+#define LACKS_SYS_TYPES_H
+#define LACKS_ERRNO_H
+#define MALLOC_FAILURE_ACTION
+#define MMAP_CLEARS 0 /* WINCE and some others apparently don't clear */
+#endif  /* WIN32 */
+
+#if defined(DARWIN) || defined(_DARWIN)
+/* Mac OSX docs advise not to use sbrk; it seems better to use mmap */
+#ifndef HAVE_MORECORE
+#define HAVE_MORECORE 0
+#define HAVE_MMAP 1
+#endif  /* HAVE_MORECORE */
+#endif  /* DARWIN */
+
+#ifndef LACKS_SYS_TYPES_H
+#include <sys/types.h>  /* For size_t */
+#endif  /* LACKS_SYS_TYPES_H */
+
+/* The maximum possible size_t value has all bits set */
+#define MAX_SIZE_T           (~(size_t)0)
+
+#ifndef ONLY_MSPACES
+#define ONLY_MSPACES 0
+#endif  /* ONLY_MSPACES */
+#ifndef MSPACES
+#if ONLY_MSPACES
+#define MSPACES 1
+#else   /* ONLY_MSPACES */
+#define MSPACES 0
+#endif  /* ONLY_MSPACES */
+#endif  /* MSPACES */
+#ifndef MALLOC_ALIGNMENT
+#define MALLOC_ALIGNMENT ((size_t)8U)
+#endif  /* MALLOC_ALIGNMENT */
+#ifndef FOOTERS
+#define FOOTERS 0
+#endif  /* FOOTERS */
+#ifndef ABORT
+#define ABORT  abort()
+#endif  /* ABORT */
+#ifndef ABORT_ON_ASSERT_FAILURE
+#define ABORT_ON_ASSERT_FAILURE 1
+#endif  /* ABORT_ON_ASSERT_FAILURE */
+#ifndef PROCEED_ON_ERROR
+#define PROCEED_ON_ERROR 0
+#endif  /* PROCEED_ON_ERROR */
+#ifndef USE_LOCKS
+#define USE_LOCKS 0
+#endif  /* USE_LOCKS */
+#ifndef INSECURE
+#define INSECURE 0
+#endif  /* INSECURE */
+#ifndef HAVE_MMAP
+#define HAVE_MMAP 1
+#endif  /* HAVE_MMAP */
+#ifndef MMAP_CLEARS
+#define MMAP_CLEARS 1
+#endif  /* MMAP_CLEARS */
+#ifndef HAVE_MREMAP
+#ifdef linux
+#define HAVE_MREMAP 1
+#else   /* linux */
+#define HAVE_MREMAP 0
+#endif  /* linux */
+#endif  /* HAVE_MREMAP */
+#ifndef MALLOC_FAILURE_ACTION
+#define MALLOC_FAILURE_ACTION  errno = ENOMEM;
+#endif  /* MALLOC_FAILURE_ACTION */
+#ifndef HAVE_MORECORE
+#if ONLY_MSPACES
+#define HAVE_MORECORE 0
+#else   /* ONLY_MSPACES */
+#define HAVE_MORECORE 1
+#endif  /* ONLY_MSPACES */
+#endif  /* HAVE_MORECORE */
+#if !HAVE_MORECORE
+#define MORECORE_CONTIGUOUS 0
+#else   /* !HAVE_MORECORE */
+#ifndef MORECORE
+#define MORECORE sbrk
+#endif  /* MORECORE */
+#ifndef MORECORE_CONTIGUOUS
+#define MORECORE_CONTIGUOUS 1
+#endif  /* MORECORE_CONTIGUOUS */
+#endif  /* HAVE_MORECORE */
+#ifndef DEFAULT_GRANULARITY
+#if MORECORE_CONTIGUOUS
+#define DEFAULT_GRANULARITY (0)  /* 0 means to compute in init_mparams */
+#else   /* MORECORE_CONTIGUOUS */
+#define DEFAULT_GRANULARITY ((size_t)64U * (size_t)1024U)
+#endif  /* MORECORE_CONTIGUOUS */
+#endif  /* DEFAULT_GRANULARITY */
+#ifndef DEFAULT_TRIM_THRESHOLD
+#ifndef MORECORE_CANNOT_TRIM
+#define DEFAULT_TRIM_THRESHOLD ((size_t)2U * (size_t)1024U * (size_t)1024U)
+#else   /* MORECORE_CANNOT_TRIM */
+#define DEFAULT_TRIM_THRESHOLD MAX_SIZE_T
+#endif  /* MORECORE_CANNOT_TRIM */
+#endif  /* DEFAULT_TRIM_THRESHOLD */
+#ifndef DEFAULT_MMAP_THRESHOLD
+#if HAVE_MMAP
+#define DEFAULT_MMAP_THRESHOLD ((size_t)256U * (size_t)1024U)
+#else   /* HAVE_MMAP */
+#define DEFAULT_MMAP_THRESHOLD MAX_SIZE_T
+#endif  /* HAVE_MMAP */
+#endif  /* DEFAULT_MMAP_THRESHOLD */
+#ifndef USE_BUILTIN_FFS
+#define USE_BUILTIN_FFS 0
+#endif  /* USE_BUILTIN_FFS */
+#ifndef USE_DEV_RANDOM
+#define USE_DEV_RANDOM 0
+#endif  /* USE_DEV_RANDOM */
+#ifndef NO_MALLINFO
+#define NO_MALLINFO 0
+#endif  /* NO_MALLINFO */
+#ifndef MALLINFO_FIELD_TYPE
+#define MALLINFO_FIELD_TYPE size_t
+#endif  /* MALLINFO_FIELD_TYPE */
+
+/*
+  mallopt tuning options.  SVID/XPG defines four standard parameter
+  numbers for mallopt, normally defined in malloc.h.  None of these
+  are used in this malloc, so setting them has no effect. But this
+  malloc does support the following options.
+*/
+
+#define M_TRIM_THRESHOLD     (-1)
+#define M_GRANULARITY        (-2)
+#define M_MMAP_THRESHOLD     (-3)
+
+/* ------------------------ Mallinfo declarations ------------------------ */
+
+#if !NO_MALLINFO
+/*
+  This version of malloc supports the standard SVID/XPG mallinfo
+  routine that returns a struct containing usage properties and
+  statistics. It should work on any system that has a
+  /usr/include/malloc.h defining struct mallinfo.  The main
+  declaration needed is the mallinfo struct that is returned (by-copy)
+  by mallinfo().  The malloinfo struct contains a bunch of fields that
+  are not even meaningful in this version of malloc.  These fields are
+  are instead filled by mallinfo() with other numbers that might be of
+  interest.
+
+  HAVE_USR_INCLUDE_MALLOC_H should be set if you have a
+  /usr/include/malloc.h file that includes a declaration of struct
+  mallinfo.  If so, it is included; else a compliant version is
+  declared below.  These must be precisely the same for mallinfo() to
+  work.  The original SVID version of this struct, defined on most
+  systems with mallinfo, declares all fields as ints. But some others
+  define as unsigned long. If your system defines the fields using a
+  type of different width than listed here, you MUST #include your
+  system version and #define HAVE_USR_INCLUDE_MALLOC_H.
+*/
+
+/* #define HAVE_USR_INCLUDE_MALLOC_H */
+
+#ifdef HAVE_USR_INCLUDE_MALLOC_H
+#include "/usr/include/malloc.h"
+#else /* HAVE_USR_INCLUDE_MALLOC_H */
+
+struct mallinfo {
+  MALLINFO_FIELD_TYPE arena;    /* non-mmapped space allocated from system */
+  MALLINFO_FIELD_TYPE ordblks;  /* number of free chunks */
+  MALLINFO_FIELD_TYPE smblks;   /* always 0 */
+  MALLINFO_FIELD_TYPE hblks;    /* always 0 */
+  MALLINFO_FIELD_TYPE hblkhd;   /* space in mmapped regions */
+  MALLINFO_FIELD_TYPE usmblks;  /* maximum total allocated space */
+  MALLINFO_FIELD_TYPE fsmblks;  /* always 0 */
+  MALLINFO_FIELD_TYPE uordblks; /* total allocated space */
+  MALLINFO_FIELD_TYPE fordblks; /* total free space */
+  MALLINFO_FIELD_TYPE keepcost; /* releasable (via malloc_trim) space */
+};
+
+#endif /* HAVE_USR_INCLUDE_MALLOC_H */
+#endif /* NO_MALLINFO */
+
+#ifdef __cplusplus
+extern "C" {
+#endif /* __cplusplus */
+
+#if !ONLY_MSPACES
+
+/* ------------------- Declarations of public routines ------------------- */
+
+#ifndef USE_DL_PREFIX
+#define dlcalloc               calloc
+#define dlfree                 free
+#define dlmalloc               malloc
+#define dlmemalign             memalign
+#define dlrealloc              realloc
+#define dlvalloc               valloc
+#define dlpvalloc              pvalloc
+#define dlmallinfo             mallinfo
+#define dlmallopt              mallopt
+#define dlmalloc_trim          malloc_trim
+#define dlmalloc_stats         malloc_stats
+#define dlmalloc_usable_size   malloc_usable_size
+#define dlmalloc_footprint     malloc_footprint
+#define dlmalloc_max_footprint malloc_max_footprint
+#define dlindependent_calloc   independent_calloc
+#define dlindependent_comalloc independent_comalloc
+#endif /* USE_DL_PREFIX */
+
+
+/*
+  malloc(size_t n)
+  Returns a pointer to a newly allocated chunk of at least n bytes, or
+  null if no space is available, in which case errno is set to ENOMEM
+  on ANSI C systems.
+
+  If n is zero, malloc returns a minimum-sized chunk. (The minimum
+  size is 16 bytes on most 32bit systems, and 32 bytes on 64bit
+  systems.)  Note that size_t is an unsigned type, so calls with
+  arguments that would be negative if signed are interpreted as
+  requests for huge amounts of space, which will often fail. The
+  maximum supported value of n differs across systems, but is in all
+  cases less than the maximum representable value of a size_t.
+*/
+void* dlmalloc(size_t);
+
+/*
+  free(void* p)
+  Releases the chunk of memory pointed to by p, that had been previously
+  allocated using malloc or a related routine such as realloc.
+  It has no effect if p is null. If p was not malloced or already
+  freed, free(p) will by default cause the current program to abort.
+*/
+void  dlfree(void*);
+
+/*
+  calloc(size_t n_elements, size_t element_size);
+  Returns a pointer to n_elements * element_size bytes, with all locations
+  set to zero.
+*/
+void* dlcalloc(size_t, size_t);
+
+/*
+  realloc(void* p, size_t n)
+  Returns a pointer to a chunk of size n that contains the same data
+  as does chunk p up to the minimum of (n, p's size) bytes, or null
+  if no space is available.
+
+  The returned pointer may or may not be the same as p. The algorithm
+  prefers extending p in most cases when possible, otherwise it
+  employs the equivalent of a malloc-copy-free sequence.
+
+  If p is null, realloc is equivalent to malloc.
+
+  If space is not available, realloc returns null, errno is set (if on
+  ANSI) and p is NOT freed.
+
+  if n is for fewer bytes than already held by p, the newly unused
+  space is lopped off and freed if possible.  realloc with a size
+  argument of zero (re)allocates a minimum-sized chunk.
+
+  The old unix realloc convention of allowing the last-free'd chunk
+  to be used as an argument to realloc is not supported.
+*/
+
+void* dlrealloc(void*, size_t);
+
+/*
+  memalign(size_t alignment, size_t n);
+  Returns a pointer to a newly allocated chunk of n bytes, aligned
+  in accord with the alignment argument.
+
+  The alignment argument should be a power of two. If the argument is
+  not a power of two, the nearest greater power is used.
+  8-byte alignment is guaranteed by normal malloc calls, so don't
+  bother calling memalign with an argument of 8 or less.
+
+  Overreliance on memalign is a sure way to fragment space.
+*/
+void* dlmemalign(size_t, size_t);
+
+/*
+  valloc(size_t n);
+  Equivalent to memalign(pagesize, n), where pagesize is the page
+  size of the system. If the pagesize is unknown, 4096 is used.
+*/
+void* dlvalloc(size_t);
+
+/*
+  mallopt(int parameter_number, int parameter_value)
+  Sets tunable parameters The format is to provide a
+  (parameter-number, parameter-value) pair.  mallopt then sets the
+  corresponding parameter to the argument value if it can (i.e., so
+  long as the value is meaningful), and returns 1 if successful else
+  0.  SVID/XPG/ANSI defines four standard param numbers for mallopt,
+  normally defined in malloc.h.  None of these are use in this malloc,
+  so setting them has no effect. But this malloc also supports other
+  options in mallopt. See below for details.  Briefly, supported
+  parameters are as follows (listed defaults are for "typical"
+  configurations).
+
+  Symbol            param #  default    allowed param values
+  M_TRIM_THRESHOLD     -1   2*1024*1024   any   (MAX_SIZE_T disables)
+  M_GRANULARITY        -2     page size   any power of 2 >= page size
+  M_MMAP_THRESHOLD     -3      256*1024   any   (or 0 if no MMAP support)
+*/
+int dlmallopt(int, int);
+
+/*
+  malloc_footprint();
+  Returns the number of bytes obtained from the system.  The total
+  number of bytes allocated by malloc, realloc etc., is less than this
+  value. Unlike mallinfo, this function returns only a precomputed
+  result, so can be called frequently to monitor memory consumption.
+  Even if locks are otherwise defined, this function does not use them,
+  so results might not be up to date.
+*/
+size_t dlmalloc_footprint(void);
+
+/*
+  malloc_max_footprint();
+  Returns the maximum number of bytes obtained from the system. This
+  value will be greater than current footprint if deallocated space
+  has been reclaimed by the system. The peak number of bytes allocated
+  by malloc, realloc etc., is less than this value. Unlike mallinfo,
+  this function returns only a precomputed result, so can be called
+  frequently to monitor memory consumption.  Even if locks are
+  otherwise defined, this function does not use them, so results might
+  not be up to date.
+*/
+size_t dlmalloc_max_footprint(void);
+
+#if !NO_MALLINFO
+/*
+  mallinfo()
+  Returns (by copy) a struct containing various summary statistics:
+
+  arena:     current total non-mmapped bytes allocated from system
+  ordblks:   the number of free chunks
+  smblks:    always zero.
+  hblks:     current number of mmapped regions
+  hblkhd:    total bytes held in mmapped regions
+  usmblks:   the maximum total allocated space. This will be greater
+                than current total if trimming has occurred.
+  fsmblks:   always zero
+  uordblks:  current total allocated space (normal or mmapped)
+  fordblks:  total free space
+  keepcost:  the maximum number of bytes that could ideally be released
+               back to system via malloc_trim. ("ideally" means that
+               it ignores page restrictions etc.)
+
+  Because these fields are ints, but internal bookkeeping may
+  be kept as longs, the reported values may wrap around zero and
+  thus be inaccurate.
+*/
+struct mallinfo dlmallinfo(void);
+#endif /* NO_MALLINFO */
+
+/*
+  independent_calloc(size_t n_elements, size_t element_size, void* chunks[]);
+
+  independent_calloc is similar to calloc, but instead of returning a
+  single cleared space, it returns an array of pointers to n_elements
+  independent elements that can hold contents of size elem_size, each
+  of which starts out cleared, and can be independently freed,
+  realloc'ed etc. The elements are guaranteed to be adjacently
+  allocated (this is not guaranteed to occur with multiple callocs or
+  mallocs), which may also improve cache locality in some
+  applications.
+
+  The "chunks" argument is optional (i.e., may be null, which is
+  probably the most typical usage). If it is null, the returned array
+  is itself dynamically allocated and should also be freed when it is
+  no longer needed. Otherwise, the chunks array must be of at least
+  n_elements in length. It is filled in with the pointers to the
+  chunks.
+
+  In either case, independent_calloc returns this pointer array, or
+  null if the allocation failed.  If n_elements is zero and "chunks"
+  is null, it returns a chunk representing an array with zero elements
+  (which should be freed if not wanted).
+
+  Each element must be individually freed when it is no longer
+  needed. If you'd like to instead be able to free all at once, you
+  should instead use regular calloc and assign pointers into this
+  space to represent elements.  (In this case though, you cannot
+  independently free elements.)
+
+  independent_calloc simplifies and speeds up implementations of many
+  kinds of pools.  It may also be useful when constructing large data
+  structures that initially have a fixed number of fixed-sized nodes,
+  but the number is not known at compile time, and some of the nodes
+  may later need to be freed. For example:
+
+  struct Node { int item; struct Node* next; };
+
+  struct Node* build_list() {
+    struct Node** pool;
+    int n = read_number_of_nodes_needed();
+    if (n <= 0) return 0;
+    pool = (struct Node**)(independent_calloc(n, sizeof(struct Node), 0);
+    if (pool == 0) die();
+    // organize into a linked list...
+    struct Node* first = pool[0];
+    for (i = 0; i < n-1; ++i)
+      pool[i]->next = pool[i+1];
+    free(pool);     // Can now free the array (or not, if it is needed later)
+    return first;
+  }
+*/
+void** dlindependent_calloc(size_t, size_t, void**);
+
+/*
+  independent_comalloc(size_t n_elements, size_t sizes[], void* chunks[]);
+
+  independent_comalloc allocates, all at once, a set of n_elements
+  chunks with sizes indicated in the "sizes" array.    It returns
+  an array of pointers to these elements, each of which can be
+  independently freed, realloc'ed etc. The elements are guaranteed to
+  be adjacently allocated (this is not guaranteed to occur with
+  multiple callocs or mallocs), which may also improve cache locality
+  in some applications.
+
+  The "chunks" argument is optional (i.e., may be null). If it is null
+  the returned array is itself dynamically allocated and should also
+  be freed when it is no longer needed. Otherwise, the chunks array
+  must be of at least n_elements in length. It is filled in with the
+  pointers to the chunks.
+
+  In either case, independent_comalloc returns this pointer array, or
+  null if the allocation failed.  If n_elements is zero and chunks is
+  null, it returns a chunk representing an array with zero elements
+  (which should be freed if not wanted).
+
+  Each element must be individually freed when it is no longer
+  needed. If you'd like to instead be able to free all at once, you
+  should instead use a single regular malloc, and assign pointers at
+  particular offsets in the aggregate space. (In this case though, you
+  cannot independently free elements.)
+
+  independent_comallac differs from independent_calloc in that each
+  element may have a different size, and also that it does not
+  automatically clear elements.
+
+  independent_comalloc can be used to speed up allocation in cases
+  where several structs or objects must always be allocated at the
+  same time.  For example:
+
+  struct Head { ... }
+  struct Foot { ... }
+
+  void send_message(char* msg) {
+    int msglen = strlen(msg);
+    size_t sizes[3] = { sizeof(struct Head), msglen, sizeof(struct Foot) };
+    void* chunks[3];
+    if (independent_comalloc(3, sizes, chunks) == 0)
+      die();
+    struct Head* head = (struct Head*)(chunks[0]);
+    char*        body = (char*)(chunks[1]);
+    struct Foot* foot = (struct Foot*)(chunks[2]);
+    // ...
+  }
+
+  In general though, independent_comalloc is worth using only for
+  larger values of n_elements. For small values, you probably won't
+  detect enough difference from series of malloc calls to bother.
+
+  Overuse of independent_comalloc can increase overall memory usage,
+  since it cannot reuse existing noncontiguous small chunks that
+  might be available for some of the elements.
+*/
+void** dlindependent_comalloc(size_t, size_t*, void**);
+
+
+/*
+  pvalloc(size_t n);
+  Equivalent to valloc(minimum-page-that-holds(n)), that is,
+  round up n to nearest pagesize.
+ */
+void*  dlpvalloc(size_t);
+
+/*
+  malloc_trim(size_t pad);
+
+  If possible, gives memory back to the system (via negative arguments
+  to sbrk) if there is unused memory at the `high' end of the malloc
+  pool or in unused MMAP segments. You can call this after freeing
+  large blocks of memory to potentially reduce the system-level memory
+  requirements of a program. However, it cannot guarantee to reduce
+  memory. Under some allocation patterns, some large free blocks of
+  memory will be locked between two used chunks, so they cannot be
+  given back to the system.
+
+  The `pad' argument to malloc_trim represents the amount of free
+  trailing space to leave untrimmed. If this argument is zero, only
+  the minimum amount of memory to maintain internal data structures
+  will be left. Non-zero arguments can be supplied to maintain enough
+  trailing space to service future expected allocations without having
+  to re-obtain memory from the system.
+
+  Malloc_trim returns 1 if it actually released any memory, else 0.
+*/
+int  dlmalloc_trim(size_t);
+
+/*
+  malloc_usable_size(void* p);
+
+  Returns the number of bytes you can actually use in
+  an allocated chunk, which may be more than you requested (although
+  often not) due to alignment and minimum size constraints.
+  You can use this many bytes without worrying about
+  overwriting other allocated objects. This is not a particularly great
+  programming practice. malloc_usable_size can be more useful in
+  debugging and assertions, for example:
+
+  p = malloc(n);
+  assert(malloc_usable_size(p) >= 256);
+*/
+size_t dlmalloc_usable_size(void*);
+
+/*
+  malloc_stats();
+  Prints on stderr the amount of space obtained from the system (both
+  via sbrk and mmap), the maximum amount (which may be more than
+  current if malloc_trim and/or munmap got called), and the current
+  number of bytes allocated via malloc (or realloc, etc) but not yet
+  freed. Note that this is the number of bytes allocated, not the
+  number requested. It will be larger than the number requested
+  because of alignment and bookkeeping overhead. Because it includes
+  alignment wastage as being in use, this figure may be greater than
+  zero even when no user-level chunks are allocated.
+
+  The reported current and maximum system memory can be inaccurate if
+  a program makes other calls to system memory allocation functions
+  (normally sbrk) outside of malloc.
+
+  malloc_stats prints only the most commonly interesting statistics.
+  More information can be obtained by calling mallinfo.
+*/
+void  dlmalloc_stats(void);
+
+#endif /* ONLY_MSPACES */
+
+#if MSPACES
+
+/*
+  mspace is an opaque type representing an independent
+  region of space that supports mspace_malloc, etc.
+*/
+typedef void* mspace;
+
+/*
+  create_mspace creates and returns a new independent space with the
+  given initial capacity, or, if 0, the default granularity size.  It
+  returns null if there is no system memory available to create the
+  space.  If argument locked is non-zero, the space uses a separate
+  lock to control access. The capacity of the space will grow
+  dynamically as needed to service mspace_malloc requests.  You can
+  control the sizes of incremental increases of this space by
+  compiling with a different DEFAULT_GRANULARITY or dynamically
+  setting with mallopt(M_GRANULARITY, value).
+*/
+mspace create_mspace(size_t capacity, int locked);
+
+/*
+  destroy_mspace destroys the given space, and attempts to return all
+  of its memory back to the system, returning the total number of
+  bytes freed. After destruction, the results of access to all memory
+  used by the space become undefined.
+*/
+size_t destroy_mspace(mspace msp);
+
+/*
+  create_mspace_with_base uses the memory supplied as the initial base
+  of a new mspace. Part (less than 128*sizeof(size_t) bytes) of this
+  space is used for bookkeeping, so the capacity must be at least this
+  large. (Otherwise 0 is returned.) When this initial space is
+  exhausted, additional memory will be obtained from the system.
+  Destroying this space will deallocate all additionally allocated
+  space (if possible) but not the initial base.
+*/
+mspace create_mspace_with_base(void* base, size_t capacity, int locked);
+
+/*
+  mspace_malloc behaves as malloc, but operates within
+  the given space.
+*/
+void* mspace_malloc(mspace msp, size_t bytes);
+
+/*
+  mspace_free behaves as free, but operates within
+  the given space.
+
+  If compiled with FOOTERS==1, mspace_free is not actually needed.
+  free may be called instead of mspace_free because freed chunks from
+  any space are handled by their originating spaces.
+*/
+void mspace_free(mspace msp, void* mem);
+
+/*
+  mspace_realloc behaves as realloc, but operates within
+  the given space.
+
+  If compiled with FOOTERS==1, mspace_realloc is not actually
+  needed.  realloc may be called instead of mspace_realloc because
+  realloced chunks from any space are handled by their originating
+  spaces.
+*/
+void* mspace_realloc(mspace msp, void* mem, size_t newsize);
+
+/*
+  mspace_calloc behaves as calloc, but operates within
+  the given space.
+*/
+void* mspace_calloc(mspace msp, size_t n_elements, size_t elem_size);
+
+/*
+  mspace_memalign behaves as memalign, but operates within
+  the given space.
+*/
+void* mspace_memalign(mspace msp, size_t alignment, size_t bytes);
+
+/*
+  mspace_independent_calloc behaves as independent_calloc, but
+  operates within the given space.
+*/
+void** mspace_independent_calloc(mspace msp, size_t n_elements,
+                                 size_t elem_size, void* chunks[]);
+
+/*
+  mspace_independent_comalloc behaves as independent_comalloc, but
+  operates within the given space.
+*/
+void** mspace_independent_comalloc(mspace msp, size_t n_elements,
+                                   size_t sizes[], void* chunks[]);
+
+/*
+  mspace_footprint() returns the number of bytes obtained from the
+  system for this space.
+*/
+size_t mspace_footprint(mspace msp);
+
+/*
+  mspace_max_footprint() returns the peak number of bytes obtained from the
+  system for this space.
+*/
+size_t mspace_max_footprint(mspace msp);
+
+
+#if !NO_MALLINFO
+/*
+  mspace_mallinfo behaves as mallinfo, but reports properties of
+  the given space.
+*/
+struct mallinfo mspace_mallinfo(mspace msp);
+#endif /* NO_MALLINFO */
+
+/*
+  mspace_malloc_stats behaves as malloc_stats, but reports
+  properties of the given space.
+*/
+void mspace_malloc_stats(mspace msp);
+
+/*
+  mspace_trim behaves as malloc_trim, but
+  operates within the given space.
+*/
+int mspace_trim(mspace msp, size_t pad);
+
+/*
+  An alias for mallopt.
+*/
+int mspace_mallopt(int, int);
+
+#endif /* MSPACES */
+
+#ifdef __cplusplus
+};  /* end of extern "C" */
+#endif /* __cplusplus */
+
+/*
+  ========================================================================
+  To make a fully customizable malloc.h header file, cut everything
+  above this line, put into file malloc.h, edit to suit, and #include it
+  on the next line, as well as in programs that use this malloc.
+  ========================================================================
+*/
+
+/* #include "malloc.h" */
+
+/*------------------------------ internal #includes ---------------------- */
+
+#ifdef WIN32
+#pragma warning( disable : 4146 ) /* no "unsigned" warnings */
+#endif /* WIN32 */
+
+#include <stdio.h>       /* for printing in malloc_stats */
+
+#ifndef LACKS_ERRNO_H
+#include <errno.h>       /* for MALLOC_FAILURE_ACTION */
+#endif /* LACKS_ERRNO_H */
+#if FOOTERS
+#include <time.h>        /* for magic initialization */
+#endif /* FOOTERS */
+#ifndef LACKS_STDLIB_H
+#include <stdlib.h>      /* for abort() */
+#endif /* LACKS_STDLIB_H */
+#ifdef DEBUG
+#if ABORT_ON_ASSERT_FAILURE
+#define assert(x) if(!(x)) ABORT
+#else /* ABORT_ON_ASSERT_FAILURE */
+#include <assert.h>
+#endif /* ABORT_ON_ASSERT_FAILURE */
+#else  /* DEBUG */
+#define assert(x)
+#endif /* DEBUG */
+#ifndef LACKS_STRING_H
+#include <string.h>      /* for memset etc */
+#endif  /* LACKS_STRING_H */
+#if USE_BUILTIN_FFS
+#ifndef LACKS_STRINGS_H
+#include <strings.h>     /* for ffs */
+#endif /* LACKS_STRINGS_H */
+#endif /* USE_BUILTIN_FFS */
+#if HAVE_MMAP
+#ifndef LACKS_SYS_MMAN_H
+#include <sys/mman.h>    /* for mmap */
+#endif /* LACKS_SYS_MMAN_H */
+#ifndef LACKS_FCNTL_H
+#include <fcntl.h>
+#endif /* LACKS_FCNTL_H */
+#endif /* HAVE_MMAP */
+#if HAVE_MORECORE
+#ifndef LACKS_UNISTD_H
+#include <unistd.h>     /* for sbrk */
+#else /* LACKS_UNISTD_H */
+#if !defined(__FreeBSD__) && !defined(__OpenBSD__) && !defined(__NetBSD__)
+extern void*     sbrk(ptrdiff_t);
+#endif /* FreeBSD etc */
+#endif /* LACKS_UNISTD_H */
+#endif /* HAVE_MMAP */
+
+#ifndef WIN32
+#ifndef malloc_getpagesize
+#  ifdef _SC_PAGESIZE         /* some SVR4 systems omit an underscore */
+#    ifndef _SC_PAGE_SIZE
+#      define _SC_PAGE_SIZE _SC_PAGESIZE
+#    endif
+#  endif
+#  ifdef _SC_PAGE_SIZE
+#    define malloc_getpagesize sysconf(_SC_PAGE_SIZE)
+#  else
+#    if defined(BSD) || defined(DGUX) || defined(HAVE_GETPAGESIZE)
+       extern size_t getpagesize();
+#      define malloc_getpagesize getpagesize()
+#    else
+#      ifdef WIN32 /* use supplied emulation of getpagesize */
+#        define malloc_getpagesize getpagesize()
+#      else
+#        ifndef LACKS_SYS_PARAM_H
+#          include <sys/param.h>
+#        endif
+#        ifdef EXEC_PAGESIZE
+#          define malloc_getpagesize EXEC_PAGESIZE
+#        else
+#          ifdef NBPG
+#            ifndef CLSIZE
+#              define malloc_getpagesize NBPG
+#            else
+#              define malloc_getpagesize (NBPG * CLSIZE)
+#            endif
+#          else
+#            ifdef NBPC
+#              define malloc_getpagesize NBPC
+#            else
+#              ifdef PAGESIZE
+#                define malloc_getpagesize PAGESIZE
+#              else /* just guess */
+#                define malloc_getpagesize ((size_t)4096U)
+#              endif
+#            endif
+#          endif
+#        endif
+#      endif
+#    endif
+#  endif
+#endif
+#endif
+
+/* ------------------- size_t and alignment properties -------------------- */
+
+/* The byte and bit size of a size_t */
+#define SIZE_T_SIZE         (sizeof(size_t))
+#define SIZE_T_BITSIZE      (sizeof(size_t) << 3)
+
+/* Some constants coerced to size_t */
+/* Annoying but necessary to avoid errors on some plaftorms */
+#define SIZE_T_ZERO         ((size_t)0)
+#define SIZE_T_ONE          ((size_t)1)
+#define SIZE_T_TWO          ((size_t)2)
+#define TWO_SIZE_T_SIZES    (SIZE_T_SIZE<<1)
+#define FOUR_SIZE_T_SIZES   (SIZE_T_SIZE<<2)
+#define SIX_SIZE_T_SIZES    (FOUR_SIZE_T_SIZES+TWO_SIZE_T_SIZES)
+#define HALF_MAX_SIZE_T     (MAX_SIZE_T / 2U)
+
+/* The bit mask value corresponding to MALLOC_ALIGNMENT */
+#define CHUNK_ALIGN_MASK    (MALLOC_ALIGNMENT - SIZE_T_ONE)
+
+/* True if address a has acceptable alignment */
+#define is_aligned(A)       (((size_t)((A)) & (CHUNK_ALIGN_MASK)) == 0)
+
+/* the number of bytes to offset an address to align it */
+#define align_offset(A)\
+ ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
+  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
+
+/* -------------------------- MMAP preliminaries ------------------------- */
+
+/*
+   If HAVE_MORECORE or HAVE_MMAP are false, we just define calls and
+   checks to fail so compiler optimizer can delete code rather than
+   using so many "#if"s.
+*/
+
+
+/* MORECORE and MMAP must return MFAIL on failure */
+#define MFAIL                ((void*)(MAX_SIZE_T))
+#define CMFAIL               ((char*)(MFAIL)) /* defined for convenience */
+
+#if !HAVE_MMAP
+#define IS_MMAPPED_BIT       (SIZE_T_ZERO)
+#define USE_MMAP_BIT         (SIZE_T_ZERO)
+#define CALL_MMAP(s)         MFAIL
+#define CALL_MUNMAP(a, s)    (-1)
+#define DIRECT_MMAP(s)       MFAIL
+
+#else /* HAVE_MMAP */
+#define IS_MMAPPED_BIT       (SIZE_T_ONE)
+#define USE_MMAP_BIT         (SIZE_T_ONE)
+
+#ifndef WIN32
+#define CALL_MUNMAP(a, s)    munmap((a), (s))
+#define MMAP_PROT            (PROT_READ|PROT_WRITE)
+#if !defined(MAP_ANONYMOUS) && defined(MAP_ANON)
+#define MAP_ANONYMOUS        MAP_ANON
+#endif /* MAP_ANON */
+#ifdef MAP_ANONYMOUS
+#define MMAP_FLAGS           (MAP_PRIVATE|MAP_ANONYMOUS)
+#define CALL_MMAP(s)         mmap(0, (s), MMAP_PROT, MMAP_FLAGS, -1, 0)
+#else /* MAP_ANONYMOUS */
+/*
+   Nearly all versions of mmap support MAP_ANONYMOUS, so the following
+   is unlikely to be needed, but is supplied just in case.
+*/
+#define MMAP_FLAGS           (MAP_PRIVATE)
+static int dev_zero_fd = -1; /* Cached file descriptor for /dev/zero. */
+#define CALL_MMAP(s) ((dev_zero_fd < 0) ? \
+           (dev_zero_fd = open("/dev/zero", O_RDWR), \
+            mmap(0, (s), MMAP_PROT, MMAP_FLAGS, dev_zero_fd, 0)) : \
+            mmap(0, (s), MMAP_PROT, MMAP_FLAGS, dev_zero_fd, 0))
+#endif /* MAP_ANONYMOUS */
+
+#define DIRECT_MMAP(s)       CALL_MMAP(s)
+#else /* WIN32 */
+
+/* Win32 MMAP via VirtualAlloc */
+static void* win32mmap(size_t size) {
+  void* ptr = VirtualAlloc(0, size, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE);
+  return (ptr != 0)? ptr: MFAIL;
+}
+
+/* For direct MMAP, use MEM_TOP_DOWN to minimize interference */
+static void* win32direct_mmap(size_t size) {
+  void* ptr = VirtualAlloc(0, size, MEM_RESERVE|MEM_COMMIT|MEM_TOP_DOWN,
+                           PAGE_READWRITE);
+  return (ptr != 0)? ptr: MFAIL;
+}
+
+/* This function supports releasing coalesed segments */
+static int win32munmap(void* ptr, size_t size) {
+  MEMORY_BASIC_INFORMATION minfo;
+  char* cptr = ptr;
+  while (size) {
+    if (VirtualQuery(cptr, &minfo, sizeof(minfo)) == 0)
+      return -1;
+    if (minfo.BaseAddress != cptr || minfo.AllocationBase != cptr ||
+        minfo.State != MEM_COMMIT || minfo.RegionSize > size)
+      return -1;
+    if (VirtualFree(cptr, 0, MEM_RELEASE) == 0)
+      return -1;
+    cptr += minfo.RegionSize;
+    size -= minfo.RegionSize;
+  }
+  return 0;
+}
+
+#define CALL_MMAP(s)         win32mmap(s)
+#define CALL_MUNMAP(a, s)    win32munmap((a), (s))
+#define DIRECT_MMAP(s)       win32direct_mmap(s)
+#endif /* WIN32 */
+#endif /* HAVE_MMAP */
+
+#if HAVE_MMAP && HAVE_MREMAP
+#define CALL_MREMAP(addr, osz, nsz, mv) mremap((addr), (osz), (nsz), (mv))
+#else  /* HAVE_MMAP && HAVE_MREMAP */
+#define CALL_MREMAP(addr, osz, nsz, mv) MFAIL
+#endif /* HAVE_MMAP && HAVE_MREMAP */
+
+#if HAVE_MORECORE
+#define CALL_MORECORE(S)     MORECORE(S)
+#else  /* HAVE_MORECORE */
+#define CALL_MORECORE(S)     MFAIL
+#endif /* HAVE_MORECORE */
+
+/* mstate bit set if continguous morecore disabled or failed */
+#define USE_NONCONTIGUOUS_BIT (4U)
+
+/* segment bit set in create_mspace_with_base */
+#define EXTERN_BIT            (8U)
+
+
+/* --------------------------- Lock preliminaries ------------------------ */
+
+#if USE_LOCKS
+
+/*
+  When locks are defined, there are up to two global locks:
+
+  * If HAVE_MORECORE, morecore_mutex protects sequences of calls to
+    MORECORE.  In many cases sys_alloc requires two calls, that should
+    not be interleaved with calls by other threads.  This does not
+    protect against direct calls to MORECORE by other threads not
+    using this lock, so there is still code to cope the best we can on
+    interference.
+
+  * magic_init_mutex ensures that mparams.magic and other
+    unique mparams values are initialized only once.
+*/
+
+#ifndef WIN32
+/* By default use posix locks */
+#include <pthread.h>
+#define MLOCK_T pthread_mutex_t
+#define INITIAL_LOCK(l)      pthread_mutex_init(l, NULL)
+#define ACQUIRE_LOCK(l)      pthread_mutex_lock(l)
+#define RELEASE_LOCK(l)      pthread_mutex_unlock(l)
+
+#if HAVE_MORECORE
+static MLOCK_T morecore_mutex = PTHREAD_MUTEX_INITIALIZER;
+#endif /* HAVE_MORECORE */
+
+static MLOCK_T magic_init_mutex = PTHREAD_MUTEX_INITIALIZER;
+
+#else /* WIN32 */
+/*
+   Because lock-protected regions have bounded times, and there
+   are no recursive lock calls, we can use simple spinlocks.
+*/
+
+#define MLOCK_T long
+static int win32_acquire_lock (MLOCK_T *sl) {
+  for (;;) {
+#ifdef InterlockedCompareExchangePointer
+    if (!InterlockedCompareExchange(sl, 1, 0))
+      return 0;
+#else  /* Use older void* version */
+    if (!InterlockedCompareExchange((void**)sl, (void*)1, (void*)0))
+      return 0;
+#endif /* InterlockedCompareExchangePointer */
+    Sleep (0);
+  }
+}
+
+static void win32_release_lock (MLOCK_T *sl) {
+  InterlockedExchange (sl, 0);
+}
+
+#define INITIAL_LOCK(l)      *(l)=0
+#define ACQUIRE_LOCK(l)      win32_acquire_lock(l)
+#define RELEASE_LOCK(l)      win32_release_lock(l)
+#if HAVE_MORECORE
+static MLOCK_T morecore_mutex;
+#endif /* HAVE_MORECORE */
+static MLOCK_T magic_init_mutex;
+#endif /* WIN32 */
+
+#define USE_LOCK_BIT               (2U)
+#else  /* USE_LOCKS */
+#define USE_LOCK_BIT               (0U)
+#define INITIAL_LOCK(l)
+#endif /* USE_LOCKS */
+
+#if USE_LOCKS && HAVE_MORECORE
+#define ACQUIRE_MORECORE_LOCK()    ACQUIRE_LOCK(&morecore_mutex);
+#define RELEASE_MORECORE_LOCK()    RELEASE_LOCK(&morecore_mutex);
+#else /* USE_LOCKS && HAVE_MORECORE */
+#define ACQUIRE_MORECORE_LOCK()
+#define RELEASE_MORECORE_LOCK()
+#endif /* USE_LOCKS && HAVE_MORECORE */
+
+#if USE_LOCKS
+#define ACQUIRE_MAGIC_INIT_LOCK()  ACQUIRE_LOCK(&magic_init_mutex);
+#define RELEASE_MAGIC_INIT_LOCK()  RELEASE_LOCK(&magic_init_mutex);
+#else  /* USE_LOCKS */
+#define ACQUIRE_MAGIC_INIT_LOCK()
+#define RELEASE_MAGIC_INIT_LOCK()
+#endif /* USE_LOCKS */
+
+
+/* -----------------------  Chunk representations ------------------------ */
+
+/*
+  (The following includes lightly edited explanations by Colin Plumb.)
+
+  The malloc_chunk declaration below is misleading (but accurate and
+  necessary).  It declares a "view" into memory allowing access to
+  necessary fields at known offsets from a given base.
+
+  Chunks of memory are maintained using a `boundary tag' method as
+  originally described by Knuth.  (See the paper by Paul Wilson
+  ftp://ftp.cs.utexas.edu/pub/garbage/allocsrv.ps for a survey of such
+  techniques.)  Sizes of free chunks are stored both in the front of
+  each chunk and at the end.  This makes consolidating fragmented
+  chunks into bigger chunks fast.  The head fields also hold bits
+  representing whether chunks are free or in use.
+
+  Here are some pictures to make it clearer.  They are "exploded" to
+  show that the state of a chunk can be thought of as extending from
+  the high 31 bits of the head field of its header through the
+  prev_foot and PINUSE_BIT bit of the following chunk header.
+
+  A chunk that's in use looks like:
+
+   chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+           | Size of previous chunk (if P = 1)                             |
+           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |P|
+         | Size of this chunk                                         1| +-+
+   mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+         |                                                               |
+         +-                                                             -+
+         |                                                               |
+         +-                                                             -+
+         |                                                               :
+         +-      size - sizeof(size_t) available payload bytes          -+
+         :                                                               |
+ chunk-> +-                                                             -+
+         |                                                               |
+         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |1|
+       | Size of next chunk (may or may not be in use)               | +-+
+ mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+    And if it's free, it looks like this:
+
+   chunk-> +-                                                             -+
+           | User payload (must be in use, or we would have merged!)       |
+           +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |P|
+         | Size of this chunk                                         0| +-+
+   mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+         | Next pointer                                                  |
+         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+         | Prev pointer                                                  |
+         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+         |                                                               :
+         +-      size - sizeof(struct chunk) unused bytes               -+
+         :                                                               |
+ chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+         | Size of this chunk                                            |
+         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |0|
+       | Size of next chunk (must be in use, or we would have merged)| +-+
+ mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+       |                                                               :
+       +- User payload                                                -+
+       :                                                               |
+       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+                                                                     |0|
+                                                                     +-+
+  Note that since we always merge adjacent free chunks, the chunks
+  adjacent to a free chunk must be in use.
+
+  Given a pointer to a chunk (which can be derived trivially from the
+  payload pointer) we can, in O(1) time, find out whether the adjacent
+  chunks are free, and if so, unlink them from the lists that they
+  are on and merge them with the current chunk.
+
+  Chunks always begin on even word boundaries, so the mem portion
+  (which is returned to the user) is also on an even word boundary, and
+  thus at least double-word aligned.
+
+  The P (PINUSE_BIT) bit, stored in the unused low-order bit of the
+  chunk size (which is always a multiple of two words), is an in-use
+  bit for the *previous* chunk.  If that bit is *clear*, then the
+  word before the current chunk size contains the previous chunk
+  size, and can be used to find the front of the previous chunk.
+  The very first chunk allocated always has this bit set, preventing
+  access to non-existent (or non-owned) memory. If pinuse is set for
+  any given chunk, then you CANNOT determine the size of the
+  previous chunk, and might even get a memory addressing fault when
+  trying to do so.
+
+  The C (CINUSE_BIT) bit, stored in the unused second-lowest bit of
+  the chunk size redundantly records whether the current chunk is
+  inuse. This redundancy enables usage checks within free and realloc,
+  and reduces indirection when freeing and consolidating chunks.
+
+  Each freshly allocated chunk must have both cinuse and pinuse set.
+  That is, each allocated chunk borders either a previously allocated
+  and still in-use chunk, or the base of its memory arena. This is
+  ensured by making all allocations from the the `lowest' part of any
+  found chunk.  Further, no free chunk physically borders another one,
+  so each free chunk is known to be preceded and followed by either
+  inuse chunks or the ends of memory.
+
+  Note that the `foot' of the current chunk is actually represented
+  as the prev_foot of the NEXT chunk. This makes it easier to
+  deal with alignments etc but can be very confusing when trying
+  to extend or adapt this code.
+
+  The exceptions to all this are
+
+     1. The special chunk `top' is the top-most available chunk (i.e.,
+        the one bordering the end of available memory). It is treated
+        specially.  Top is never included in any bin, is used only if
+        no other chunk is available, and is released back to the
+        system if it is very large (see M_TRIM_THRESHOLD).  In effect,
+        the top chunk is treated as larger (and thus less well
+        fitting) than any other available chunk.  The top chunk
+        doesn't update its trailing size field since there is no next
+        contiguous chunk that would have to index off it. However,
+        space is still allocated for it (TOP_FOOT_SIZE) to enable
+        separation or merging when space is extended.
+
+     3. Chunks allocated via mmap, which have the lowest-order bit
+        (IS_MMAPPED_BIT) set in their prev_foot fields, and do not set
+        PINUSE_BIT in their head fields.  Because they are allocated
+        one-by-one, each must carry its own prev_foot field, which is
+        also used to hold the offset this chunk has within its mmapped
+        region, which is needed to preserve alignment. Each mmapped
+        chunk is trailed by the first two fields of a fake next-chunk
+        for sake of usage checks.
+
+*/
+
+struct malloc_chunk {
+  size_t               prev_foot;  /* Size of previous chunk (if free).  */
+  size_t               head;       /* Size and inuse bits. */
+  struct malloc_chunk* fd;         /* double links -- used only if free. */
+  struct malloc_chunk* bk;
+};
+
+typedef struct malloc_chunk  mchunk;
+typedef struct malloc_chunk* mchunkptr;
+typedef struct malloc_chunk* sbinptr;  /* The type of bins of chunks */
+typedef unsigned int bindex_t;         /* Described below */
+typedef unsigned int binmap_t;         /* Described below */
+typedef unsigned int flag_t;           /* The type of various bit flag sets */
+
+/* ------------------- Chunks sizes and alignments ----------------------- */
+
+#define MCHUNK_SIZE         (sizeof(mchunk))
+
+#if FOOTERS
+#define CHUNK_OVERHEAD      (TWO_SIZE_T_SIZES)
+#else /* FOOTERS */
+#define CHUNK_OVERHEAD      (SIZE_T_SIZE)
+#endif /* FOOTERS */
+
+/* MMapped chunks need a second word of overhead ... */
+#define MMAP_CHUNK_OVERHEAD (TWO_SIZE_T_SIZES)
+/* ... and additional padding for fake next-chunk at foot */
+#define MMAP_FOOT_PAD       (FOUR_SIZE_T_SIZES)
+
+/* The smallest size we can malloc is an aligned minimal chunk */
+#define MIN_CHUNK_SIZE\
+  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
+
+/* conversion from malloc headers to user pointers, and back */
+#define chunk2mem(p)        ((void*)((char*)(p)       + TWO_SIZE_T_SIZES))
+#define mem2chunk(mem)      ((mchunkptr)((char*)(mem) - TWO_SIZE_T_SIZES))
+/* chunk associated with aligned address A */
+#define align_as_chunk(A)   (mchunkptr)((A) + align_offset(chunk2mem(A)))
+
+/* Bounds on request (not chunk) sizes. */
+#define MAX_REQUEST         ((-MIN_CHUNK_SIZE) << 2)
+#define MIN_REQUEST         (MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
+
+/* pad request bytes into a usable size */
+#define pad_request(req) \
+   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
+
+/* pad request, checking for minimum (but not maximum) */
+#define request2size(req) \
+  (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
+
+
+/* ------------------ Operations on head and foot fields ----------------- */
+
+/*
+  The head field of a chunk is or'ed with PINUSE_BIT when previous
+  adjacent chunk in use, and or'ed with CINUSE_BIT if this chunk is in
+  use. If the chunk was obtained with mmap, the prev_foot field has
+  IS_MMAPPED_BIT set, otherwise holding the offset of the base of the
+  mmapped region to the base of the chunk.
+*/
+
+#define PINUSE_BIT          (SIZE_T_ONE)
+#define CINUSE_BIT          (SIZE_T_TWO)
+#define INUSE_BITS          (PINUSE_BIT|CINUSE_BIT)
+
+/* Head value for fenceposts */
+#define FENCEPOST_HEAD      (INUSE_BITS|SIZE_T_SIZE)
+
+/* extraction of fields from head words */
+#define cinuse(p)           ((p)->head & CINUSE_BIT)
+#define pinuse(p)           ((p)->head & PINUSE_BIT)
+#define chunksize(p)        ((p)->head & ~(INUSE_BITS))
+
+#define clear_pinuse(p)     ((p)->head &= ~PINUSE_BIT)
+#define clear_cinuse(p)     ((p)->head &= ~CINUSE_BIT)
+
+/* Treat space at ptr +/- offset as a chunk */
+#define chunk_plus_offset(p, s)  ((mchunkptr)(((char*)(p)) + (s)))
+#define chunk_minus_offset(p, s) ((mchunkptr)(((char*)(p)) - (s)))
+
+/* Ptr to next or previous physical malloc_chunk. */
+#define next_chunk(p) ((mchunkptr)( ((char*)(p)) + ((p)->head & ~INUSE_BITS)))
+#define prev_chunk(p) ((mchunkptr)( ((char*)(p)) - ((p)->prev_foot) ))
+
+/* extract next chunk's pinuse bit */
+#define next_pinuse(p)  ((next_chunk(p)->head) & PINUSE_BIT)
+
+/* Get/set size at footer */
+#define get_foot(p, s)  (((mchunkptr)((char*)(p) + (s)))->prev_foot)
+#define set_foot(p, s)  (((mchunkptr)((char*)(p) + (s)))->prev_foot = (s))
+
+/* Set size, pinuse bit, and foot */
+#define set_size_and_pinuse_of_free_chunk(p, s)\
+  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
+
+/* Set size, pinuse bit, foot, and clear next pinuse */
+#define set_free_with_pinuse(p, s, n)\
+  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
+
+#define is_mmapped(p)\
+  (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_MMAPPED_BIT))
+
+/* Get the internal overhead associated with chunk p */
+#define overhead_for(p)\
+ (is_mmapped(p)? MMAP_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
+
+/* Return true if malloced space is not necessarily cleared */
+#if MMAP_CLEARS
+#define calloc_must_clear(p) (!is_mmapped(p))
+#else /* MMAP_CLEARS */
+#define calloc_must_clear(p) (1)
+#endif /* MMAP_CLEARS */
+
+/* ---------------------- Overlaid data structures ----------------------- */
+
+/*
+  When chunks are not in use, they are treated as nodes of either
+  lists or trees.
+
+  "Small"  chunks are stored in circular doubly-linked lists, and look
+  like this:
+
+    chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+            |             Size of previous chunk                            |
+            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+    `head:' |             Size of chunk, in bytes                         |P|
+      mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+            |             Forward pointer to next chunk in list             |
+            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+            |             Back pointer to previous chunk in list            |
+            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+            |             Unused space (may be 0 bytes long)                .
+            .                                                               .
+            .                                                               |
+nextchunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+    `foot:' |             Size of chunk, in bytes                           |
+            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+  Larger chunks are kept in a form of bitwise digital trees (aka
+  tries) keyed on chunksizes.  Because malloc_tree_chunks are only for
+  free chunks greater than 256 bytes, their size doesn't impose any
+  constraints on user chunk sizes.  Each node looks like:
+
+    chunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+            |             Size of previous chunk                            |
+            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+    `head:' |             Size of chunk, in bytes                         |P|
+      mem-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+            |             Forward pointer to next chunk of same size        |
+            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+            |             Back pointer to previous chunk of same size       |
+            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+            |             Pointer to left child (child[0])                  |
+            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+            |             Pointer to right child (child[1])                 |
+            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+            |             Pointer to parent                                 |
+            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+            |             bin index of this chunk                           |
+            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+            |             Unused space                                      .
+            .                                                               |
+nextchunk-> +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+    `foot:' |             Size of chunk, in bytes                           |
+            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
+
+  Each tree holding treenodes is a tree of unique chunk sizes.  Chunks
+  of the same size are arranged in a circularly-linked list, with only
+  the oldest chunk (the next to be used, in our FIFO ordering)
+  actually in the tree.  (Tree members are distinguished by a non-null
+  parent pointer.)  If a chunk with the same size an an existing node
+  is inserted, it is linked off the existing node using pointers that
+  work in the same way as fd/bk pointers of small chunks.
+
+  Each tree contains a power of 2 sized range of chunk sizes (the
+  smallest is 0x100 <= x < 0x180), which is is divided in half at each
+  tree level, with the chunks in the smaller half of the range (0x100
+  <= x < 0x140 for the top nose) in the left subtree and the larger
+  half (0x140 <= x < 0x180) in the right subtree.  This is, of course,
+  done by inspecting individual bits.
+
+  Using these rules, each node's left subtree contains all smaller
+  sizes than its right subtree.  However, the node at the root of each
+  subtree has no particular ordering relationship to either.  (The
+  dividing line between the subtree sizes is based on trie relation.)
+  If we remove the last chunk of a given size from the interior of the
+  tree, we need to replace it with a leaf node.  The tree ordering
+  rules permit a node to be replaced by any leaf below it.
+
+  The smallest chunk in a tree (a common operation in a best-fit
+  allocator) can be found by walking a path to the leftmost leaf in
+  the tree.  Unlike a usual binary tree, where we follow left child
+  pointers until we reach a null, here we follow the right child
+  pointer any time the left one is null, until we reach a leaf with
+  both child pointers null. The smallest chunk in the tree will be
+  somewhere along that path.
+
+  The worst case number of steps to add, find, or remove a node is
+  bounded by the number of bits differentiating chunks within
+  bins. Under current bin calculations, this ranges from 6 up to 21
+  (for 32 bit sizes) or up to 53 (for 64 bit sizes). The typical case
+  is of course much better.
+*/
+
+struct malloc_tree_chunk {
+  /* The first four fields must be compatible with malloc_chunk */
+  size_t                    prev_foot;
+  size_t                    head;
+  struct malloc_tree_chunk* fd;
+  struct malloc_tree_chunk* bk;
+
+  struct malloc_tree_chunk* child[2];
+  struct malloc_tree_chunk* parent;
+  bindex_t                  index;
+};
+
+typedef struct malloc_tree_chunk  tchunk;
+typedef struct malloc_tree_chunk* tchunkptr;
+typedef struct malloc_tree_chunk* tbinptr; /* The type of bins of trees */
+
+/* A little helper macro for trees */
+#define leftmost_child(t) ((t)->child[0] != 0? (t)->child[0] : (t)->child[1])
+
+/* ----------------------------- Segments -------------------------------- */
+
+/*
+  Each malloc space may include non-contiguous segments, held in a
+  list headed by an embedded malloc_segment record representing the
+  top-most space. Segments also include flags holding properties of
+  the space. Large chunks that are directly allocated by mmap are not
+  included in this list. They are instead independently created and
+  destroyed without otherwise keeping track of them.
+
+  Segment management mainly comes into play for spaces allocated by
+  MMAP.  Any call to MMAP might or might not return memory that is
+  adjacent to an existing segment.  MORECORE normally contiguously
+  extends the current space, so this space is almost always adjacent,
+  which is simpler and faster to deal with. (This is why MORECORE is
+  used preferentially to MMAP when both are available -- see
+  sys_alloc.)  When allocating using MMAP, we don't use any of the
+  hinting mechanisms (inconsistently) supported in various
+  implementations of unix mmap, or distinguish reserving from
+  committing memory. Instead, we just ask for space, and exploit
+  contiguity when we get it.  It is probably possible to do
+  better than this on some systems, but no general scheme seems
+  to be significantly better.
+
+  Management entails a simpler variant of the consolidation scheme
+  used for chunks to reduce fragmentation -- new adjacent memory is
+  normally prepended or appended to an existing segment. However,
+  there are limitations compared to chunk consolidation that mostly
+  reflect the fact that segment processing is relatively infrequent
+  (occurring only when getting memory from system) and that we
+  don't expect to have huge numbers of segments:
+
+  * Segments are not indexed, so traversal requires linear scans.  (It
+    would be possible to index these, but is not worth the extra
+    overhead and complexity for most programs on most platforms.)
+  * New segments are only appended to old ones when holding top-most
+    memory; if they cannot be prepended to others, they are held in
+    different segments.
+
+  Except for the top-most segment of an mstate, each segment record
+  is kept at the tail of its segment. Segments are added by pushing
+  segment records onto the list headed by &mstate.seg for the
+  containing mstate.
+
+  Segment flags control allocation/merge/deallocation policies:
+  * If EXTERN_BIT set, then we did not allocate this segment,
+    and so should not try to deallocate or merge with others.
+    (This currently holds only for the initial segment passed
+    into create_mspace_with_base.)
+  * If IS_MMAPPED_BIT set, the segment may be merged with
+    other surrounding mmapped segments and trimmed/de-allocated
+    using munmap.
+  * If neither bit is set, then the segment was obtained using
+    MORECORE so can be merged with surrounding MORECORE'd segments
+    and deallocated/trimmed using MORECORE with negative arguments.
+*/
+
+struct malloc_segment {
+  char*        base;             /* base address */
+  size_t       size;             /* allocated size */
+  struct malloc_segment* next;   /* ptr to next segment */
+#if FFI_MMAP_EXEC_WRIT
+  /* The mmap magic is supposed to store the address of the executable
+     segment at the very end of the requested block.  */
+
+# define mmap_exec_offset(b,s) (*(ptrdiff_t*)((b)+(s)-sizeof(ptrdiff_t)))
+
+  /* We can only merge segments if their corresponding executable
+     segments are at identical offsets.  */
+# define check_segment_merge(S,b,s) \
+  (mmap_exec_offset((b),(s)) == (S)->exec_offset)
+
+# define add_segment_exec_offset(p,S) ((char*)(p) + (S)->exec_offset)
+# define sub_segment_exec_offset(p,S) ((char*)(p) - (S)->exec_offset)
+
+  /* The removal of sflags only works with HAVE_MORECORE == 0.  */
+
+# define get_segment_flags(S)   (IS_MMAPPED_BIT)
+# define set_segment_flags(S,v) \
+  (((v) != IS_MMAPPED_BIT) ? (ABORT, (v)) :				\
+   (((S)->exec_offset =							\
+     mmap_exec_offset((S)->base, (S)->size)),				\
+    (mmap_exec_offset((S)->base + (S)->exec_offset, (S)->size) !=	\
+     (S)->exec_offset) ? (ABORT, (v)) :					\
+   (mmap_exec_offset((S)->base, (S)->size) = 0), (v)))
+
+  /* We use an offset here, instead of a pointer, because then, when
+     base changes, we don't have to modify this.  On architectures
+     with segmented addresses, this might not work.  */
+  ptrdiff_t    exec_offset;
+#else
+
+# define get_segment_flags(S)   ((S)->sflags)
+# define set_segment_flags(S,v) ((S)->sflags = (v))
+# define check_segment_merge(S,b,s) (1)
+
+  flag_t       sflags;           /* mmap and extern flag */
+#endif
+};
+
+#define is_mmapped_segment(S)  (get_segment_flags(S) & IS_MMAPPED_BIT)
+#define is_extern_segment(S)   (get_segment_flags(S) & EXTERN_BIT)
+
+typedef struct malloc_segment  msegment;
+typedef struct malloc_segment* msegmentptr;
+
+/* ---------------------------- malloc_state ----------------------------- */
+
+/*
+   A malloc_state holds all of the bookkeeping for a space.
+   The main fields are:
+
+  Top
+    The topmost chunk of the currently active segment. Its size is
+    cached in topsize.  The actual size of topmost space is
+    topsize+TOP_FOOT_SIZE, which includes space reserved for adding
+    fenceposts and segment records if necessary when getting more
+    space from the system.  The size at which to autotrim top is
+    cached from mparams in trim_check, except that it is disabled if
+    an autotrim fails.
+
+  Designated victim (dv)
+    This is the preferred chunk for servicing small requests that
+    don't have exact fits.  It is normally the chunk split off most
+    recently to service another small request.  Its size is cached in
+    dvsize. The link fields of this chunk are not maintained since it
+    is not kept in a bin.
+
+  SmallBins
+    An array of bin headers for free chunks.  These bins hold chunks
+    with sizes less than MIN_LARGE_SIZE bytes. Each bin contains
+    chunks of all the same size, spaced 8 bytes apart.  To simplify
+    use in double-linked lists, each bin header acts as a malloc_chunk
+    pointing to the real first node, if it exists (else pointing to
+    itself).  This avoids special-casing for headers.  But to avoid
+    waste, we allocate only the fd/bk pointers of bins, and then use
+    repositioning tricks to treat these as the fields of a chunk.
+
+  TreeBins
+    Treebins are pointers to the roots of trees holding a range of
+    sizes. There are 2 equally spaced treebins for each power of two
+    from TREE_SHIFT to TREE_SHIFT+16. The last bin holds anything
+    larger.
+
+  Bin maps
+    There is one bit map for small bins ("smallmap") and one for
+    treebins ("treemap).  Each bin sets its bit when non-empty, and
+    clears the bit when empty.  Bit operations are then used to avoid
+    bin-by-bin searching -- nearly all "search" is done without ever
+    looking at bins that won't be selected.  The bit maps
+    conservatively use 32 bits per map word, even if on 64bit system.
+    For a good description of some of the bit-based techniques used
+    here, see Henry S. Warren Jr's book "Hacker's Delight" (and
+    supplement at http://hackersdelight.org/). Many of these are
+    intended to reduce the branchiness of paths through malloc etc, as
+    well as to reduce the number of memory locations read or written.
+
+  Segments
+    A list of segments headed by an embedded malloc_segment record
+    representing the initial space.
+
+  Address check support
+    The least_addr field is the least address ever obtained from
+    MORECORE or MMAP. Attempted frees and reallocs of any address less
+    than this are trapped (unless INSECURE is defined).
+
+  Magic tag
+    A cross-check field that should always hold same value as mparams.magic.
+
+  Flags
+    Bits recording whether to use MMAP, locks, or contiguous MORECORE
+
+  Statistics
+    Each space keeps track of current and maximum system memory
+    obtained via MORECORE or MMAP.
+
+  Locking
+    If USE_LOCKS is defined, the "mutex" lock is acquired and released
+    around every public call using this mspace.
+*/
+
+/* Bin types, widths and sizes */
+#define NSMALLBINS        (32U)
+#define NTREEBINS         (32U)
+#define SMALLBIN_SHIFT    (3U)
+#define SMALLBIN_WIDTH    (SIZE_T_ONE << SMALLBIN_SHIFT)
+#define TREEBIN_SHIFT     (8U)
+#define MIN_LARGE_SIZE    (SIZE_T_ONE << TREEBIN_SHIFT)
+#define MAX_SMALL_SIZE    (MIN_LARGE_SIZE - SIZE_T_ONE)
+#define MAX_SMALL_REQUEST (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
+
+struct malloc_state {
+  binmap_t   smallmap;
+  binmap_t   treemap;
+  size_t     dvsize;
+  size_t     topsize;
+  char*      least_addr;
+  mchunkptr  dv;
+  mchunkptr  top;
+  size_t     trim_check;
+  size_t     magic;
+  mchunkptr  smallbins[(NSMALLBINS+1)*2];
+  tbinptr    treebins[NTREEBINS];
+  size_t     footprint;
+  size_t     max_footprint;
+  flag_t     mflags;
+#if USE_LOCKS
+  MLOCK_T    mutex;     /* locate lock among fields that rarely change */
+#endif /* USE_LOCKS */
+  msegment   seg;
+};
+
+typedef struct malloc_state*    mstate;
+
+/* ------------- Global malloc_state and malloc_params ------------------- */
+
+/*
+  malloc_params holds global properties, including those that can be
+  dynamically set using mallopt. There is a single instance, mparams,
+  initialized in init_mparams.
+*/
+
+struct malloc_params {
+  size_t magic;
+  size_t page_size;
+  size_t granularity;
+  size_t mmap_threshold;
+  size_t trim_threshold;
+  flag_t default_mflags;
+};
+
+static struct malloc_params mparams;
+
+/* The global malloc_state used for all non-"mspace" calls */
+static struct malloc_state _gm_;
+#define gm                 (&_gm_)
+#define is_global(M)       ((M) == &_gm_)
+#define is_initialized(M)  ((M)->top != 0)
+
+/* -------------------------- system alloc setup ------------------------- */
+
+/* Operations on mflags */
+
+#define use_lock(M)           ((M)->mflags &   USE_LOCK_BIT)
+#define enable_lock(M)        ((M)->mflags |=  USE_LOCK_BIT)
+#define disable_lock(M)       ((M)->mflags &= ~USE_LOCK_BIT)
+
+#define use_mmap(M)           ((M)->mflags &   USE_MMAP_BIT)
+#define enable_mmap(M)        ((M)->mflags |=  USE_MMAP_BIT)
+#define disable_mmap(M)       ((M)->mflags &= ~USE_MMAP_BIT)
+
+#define use_noncontiguous(M)  ((M)->mflags &   USE_NONCONTIGUOUS_BIT)
+#define disable_contiguous(M) ((M)->mflags |=  USE_NONCONTIGUOUS_BIT)
+
+#define set_lock(M,L)\
+ ((M)->mflags = (L)?\
+  ((M)->mflags | USE_LOCK_BIT) :\
+  ((M)->mflags & ~USE_LOCK_BIT))
+
+/* page-align a size */
+#define page_align(S)\
+ (((S) + (mparams.page_size)) & ~(mparams.page_size - SIZE_T_ONE))
+
+/* granularity-align a size */
+#define granularity_align(S)\
+  (((S) + (mparams.granularity)) & ~(mparams.granularity - SIZE_T_ONE))
+
+#define is_page_aligned(S)\
+   (((size_t)(S) & (mparams.page_size - SIZE_T_ONE)) == 0)
+#define is_granularity_aligned(S)\
+   (((size_t)(S) & (mparams.granularity - SIZE_T_ONE)) == 0)
+
+/*  True if segment S holds address A */
+#define segment_holds(S, A)\
+  ((char*)(A) >= S->base && (char*)(A) < S->base + S->size)
+
+/* Return segment holding given address */
+static msegmentptr segment_holding(mstate m, char* addr) {
+  msegmentptr sp = &m->seg;
+  for (;;) {
+    if (addr >= sp->base && addr < sp->base + sp->size)
+      return sp;
+    if ((sp = sp->next) == 0)
+      return 0;
+  }
+}
+
+/* Return true if segment contains a segment link */
+static int has_segment_link(mstate m, msegmentptr ss) {
+  msegmentptr sp = &m->seg;
+  for (;;) {
+    if ((char*)sp >= ss->base && (char*)sp < ss->base + ss->size)
+      return 1;
+    if ((sp = sp->next) == 0)
+      return 0;
+  }
+}
+
+#ifndef MORECORE_CANNOT_TRIM
+#define should_trim(M,s)  ((s) > (M)->trim_check)
+#else  /* MORECORE_CANNOT_TRIM */
+#define should_trim(M,s)  (0)
+#endif /* MORECORE_CANNOT_TRIM */
+
+/*
+  TOP_FOOT_SIZE is padding at the end of a segment, including space
+  that may be needed to place segment records and fenceposts when new
+  noncontiguous segments are added.
+*/
+#define TOP_FOOT_SIZE\
+  (align_offset(chunk2mem(0))+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
+
+
+/* -------------------------------  Hooks -------------------------------- */
+
+/*
+  PREACTION should be defined to return 0 on success, and nonzero on
+  failure. If you are not using locking, you can redefine these to do
+  anything you like.
+*/
+
+#if USE_LOCKS
+
+/* Ensure locks are initialized */
+#define GLOBALLY_INITIALIZE() (mparams.page_size == 0 && init_mparams())
+
+#define PREACTION(M)  ((GLOBALLY_INITIALIZE() || use_lock(M))? ACQUIRE_LOCK(&(M)->mutex) : 0)
+#define POSTACTION(M) { if (use_lock(M)) RELEASE_LOCK(&(M)->mutex); }
+#else /* USE_LOCKS */
+
+#ifndef PREACTION
+#define PREACTION(M) (0)
+#endif  /* PREACTION */
+
+#ifndef POSTACTION
+#define POSTACTION(M)
+#endif  /* POSTACTION */
+
+#endif /* USE_LOCKS */
+
+/*
+  CORRUPTION_ERROR_ACTION is triggered upon detected bad addresses.
+  USAGE_ERROR_ACTION is triggered on detected bad frees and
+  reallocs. The argument p is an address that might have triggered the
+  fault. It is ignored by the two predefined actions, but might be
+  useful in custom actions that try to help diagnose errors.
+*/
+
+#if PROCEED_ON_ERROR
+
+/* A count of the number of corruption errors causing resets */
+int malloc_corruption_error_count;
+
+/* default corruption action */
+static void reset_on_error(mstate m);
+
+#define CORRUPTION_ERROR_ACTION(m)  reset_on_error(m)
+#define USAGE_ERROR_ACTION(m, p)
+
+#else /* PROCEED_ON_ERROR */
+
+#ifndef CORRUPTION_ERROR_ACTION
+#define CORRUPTION_ERROR_ACTION(m) ABORT
+#endif /* CORRUPTION_ERROR_ACTION */
+
+#ifndef USAGE_ERROR_ACTION
+#define USAGE_ERROR_ACTION(m,p) ABORT
+#endif /* USAGE_ERROR_ACTION */
+
+#endif /* PROCEED_ON_ERROR */
+
+/* -------------------------- Debugging setup ---------------------------- */
+
+#if ! DEBUG
+
+#define check_free_chunk(M,P)
+#define check_inuse_chunk(M,P)
+#define check_malloced_chunk(M,P,N)
+#define check_mmapped_chunk(M,P)
+#define check_malloc_state(M)
+#define check_top_chunk(M,P)
+
+#else /* DEBUG */
+#define check_free_chunk(M,P)       do_check_free_chunk(M,P)
+#define check_inuse_chunk(M,P)      do_check_inuse_chunk(M,P)
+#define check_top_chunk(M,P)        do_check_top_chunk(M,P)
+#define check_malloced_chunk(M,P,N) do_check_malloced_chunk(M,P,N)
+#define check_mmapped_chunk(M,P)    do_check_mmapped_chunk(M,P)
+#define check_malloc_state(M)       do_check_malloc_state(M)
+
+static void   do_check_any_chunk(mstate m, mchunkptr p);
+static void   do_check_top_chunk(mstate m, mchunkptr p);
+static void   do_check_mmapped_chunk(mstate m, mchunkptr p);
+static void   do_check_inuse_chunk(mstate m, mchunkptr p);
+static void   do_check_free_chunk(mstate m, mchunkptr p);
+static void   do_check_malloced_chunk(mstate m, void* mem, size_t s);
+static void   do_check_tree(mstate m, tchunkptr t);
+static void   do_check_treebin(mstate m, bindex_t i);
+static void   do_check_smallbin(mstate m, bindex_t i);
+static void   do_check_malloc_state(mstate m);
+static int    bin_find(mstate m, mchunkptr x);
+static size_t traverse_and_check(mstate m);
+#endif /* DEBUG */
+
+/* ---------------------------- Indexing Bins ---------------------------- */
+
+#define is_small(s)         (((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
+#define small_index(s)      ((s)  >> SMALLBIN_SHIFT)
+#define small_index2size(i) ((i)  << SMALLBIN_SHIFT)
+#define MIN_SMALL_INDEX     (small_index(MIN_CHUNK_SIZE))
+
+/* addressing by index. See above about smallbin repositioning */
+#define smallbin_at(M, i)   ((sbinptr)((char*)&((M)->smallbins[(i)<<1])))
+#define treebin_at(M,i)     (&((M)->treebins[i]))
+
+/* assign tree index for size S to variable I */
+#if defined(__GNUC__) && defined(i386)
+#define compute_tree_index(S, I)\
+{\
+  size_t X = S >> TREEBIN_SHIFT;\
+  if (X == 0)\
+    I = 0;\
+  else if (X > 0xFFFF)\
+    I = NTREEBINS-1;\
+  else {\
+    unsigned int K;\
+    __asm__("bsrl %1,%0\n\t" : "=r" (K) : "rm"  (X));\
+    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
+  }\
+}
+#else /* GNUC */
+#define compute_tree_index(S, I)\
+{\
+  size_t X = S >> TREEBIN_SHIFT;\
+  if (X == 0)\
+    I = 0;\
+  else if (X > 0xFFFF)\
+    I = NTREEBINS-1;\
+  else {\
+    unsigned int Y = (unsigned int)X;\
+    unsigned int N = ((Y - 0x100) >> 16) & 8;\
+    unsigned int K = (((Y <<= N) - 0x1000) >> 16) & 4;\
+    N += K;\
+    N += K = (((Y <<= K) - 0x4000) >> 16) & 2;\
+    K = 14 - N + ((Y <<= K) >> 15);\
+    I = (K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1));\
+  }\
+}
+#endif /* GNUC */
+
+/* Bit representing maximum resolved size in a treebin at i */
+#define bit_for_tree_index(i) \
+   (i == NTREEBINS-1)? (SIZE_T_BITSIZE-1) : (((i) >> 1) + TREEBIN_SHIFT - 2)
+
+/* Shift placing maximum resolved bit in a treebin at i as sign bit */
+#define leftshift_for_tree_index(i) \
+   ((i == NTREEBINS-1)? 0 : \
+    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
+
+/* The size of the smallest chunk held in bin with index i */
+#define minsize_for_tree_index(i) \
+   ((SIZE_T_ONE << (((i) >> 1) + TREEBIN_SHIFT)) |  \
+   (((size_t)((i) & SIZE_T_ONE)) << (((i) >> 1) + TREEBIN_SHIFT - 1)))
+
+
+/* ------------------------ Operations on bin maps ----------------------- */
+
+/* bit corresponding to given index */
+#define idx2bit(i)              ((binmap_t)(1) << (i))
+
+/* Mark/Clear bits with given index */
+#define mark_smallmap(M,i)      ((M)->smallmap |=  idx2bit(i))
+#define clear_smallmap(M,i)     ((M)->smallmap &= ~idx2bit(i))
+#define smallmap_is_marked(M,i) ((M)->smallmap &   idx2bit(i))
+
+#define mark_treemap(M,i)       ((M)->treemap  |=  idx2bit(i))
+#define clear_treemap(M,i)      ((M)->treemap  &= ~idx2bit(i))
+#define treemap_is_marked(M,i)  ((M)->treemap  &   idx2bit(i))
+
+/* index corresponding to given bit */
+
+#if defined(__GNUC__) && defined(i386)
+#define compute_bit2idx(X, I)\
+{\
+  unsigned int J;\
+  __asm__("bsfl %1,%0\n\t" : "=r" (J) : "rm" (X));\
+  I = (bindex_t)J;\
+}
+
+#else /* GNUC */
+#if  USE_BUILTIN_FFS
+#define compute_bit2idx(X, I) I = ffs(X)-1
+
+#else /* USE_BUILTIN_FFS */
+#define compute_bit2idx(X, I)\
+{\
+  unsigned int Y = X - 1;\
+  unsigned int K = Y >> (16-4) & 16;\
+  unsigned int N = K;        Y >>= K;\
+  N += K = Y >> (8-3) &  8;  Y >>= K;\
+  N += K = Y >> (4-2) &  4;  Y >>= K;\
+  N += K = Y >> (2-1) &  2;  Y >>= K;\
+  N += K = Y >> (1-0) &  1;  Y >>= K;\
+  I = (bindex_t)(N + Y);\
+}
+#endif /* USE_BUILTIN_FFS */
+#endif /* GNUC */
+
+/* isolate the least set bit of a bitmap */
+#define least_bit(x)         ((x) & -(x))
+
+/* mask with all bits to left of least bit of x on */
+#define left_bits(x)         ((x<<1) | -(x<<1))
+
+/* mask with all bits to left of or equal to least bit of x on */
+#define same_or_left_bits(x) ((x) | -(x))
+
+
+/* ----------------------- Runtime Check Support ------------------------- */
+
+/*
+  For security, the main invariant is that malloc/free/etc never
+  writes to a static address other than malloc_state, unless static
+  malloc_state itself has been corrupted, which cannot occur via
+  malloc (because of these checks). In essence this means that we
+  believe all pointers, sizes, maps etc held in malloc_state, but
+  check all of those linked or offsetted from other embedded data
+  structures.  These checks are interspersed with main code in a way
+  that tends to minimize their run-time cost.
+
+  When FOOTERS is defined, in addition to range checking, we also
+  verify footer fields of inuse chunks, which can be used guarantee
+  that the mstate controlling malloc/free is intact.  This is a
+  streamlined version of the approach described by William Robertson
+  et al in "Run-time Detection of Heap-based Overflows" LISA'03
+  http://www.usenix.org/events/lisa03/tech/robertson.html The footer
+  of an inuse chunk holds the xor of its mstate and a random seed,
+  that is checked upon calls to free() and realloc().  This is
+  (probablistically) unguessable from outside the program, but can be
+  computed by any code successfully malloc'ing any chunk, so does not
+  itself provide protection against code that has already broken
+  security through some other means.  Unlike Robertson et al, we
+  always dynamically check addresses of all offset chunks (previous,
+  next, etc). This turns out to be cheaper than relying on hashes.
+*/
+
+#if !INSECURE
+/* Check if address a is at least as high as any from MORECORE or MMAP */
+#define ok_address(M, a) ((char*)(a) >= (M)->least_addr)
+/* Check if address of next chunk n is higher than base chunk p */
+#define ok_next(p, n)    ((char*)(p) < (char*)(n))
+/* Check if p has its cinuse bit on */
+#define ok_cinuse(p)     cinuse(p)
+/* Check if p has its pinuse bit on */
+#define ok_pinuse(p)     pinuse(p)
+
+#else /* !INSECURE */
+#define ok_address(M, a) (1)
+#define ok_next(b, n)    (1)
+#define ok_cinuse(p)     (1)
+#define ok_pinuse(p)     (1)
+#endif /* !INSECURE */
+
+#if (FOOTERS && !INSECURE)
+/* Check if (alleged) mstate m has expected magic field */
+#define ok_magic(M)      ((M)->magic == mparams.magic)
+#else  /* (FOOTERS && !INSECURE) */
+#define ok_magic(M)      (1)
+#endif /* (FOOTERS && !INSECURE) */
+
+
+/* In gcc, use __builtin_expect to minimize impact of checks */
+#if !INSECURE
+#if defined(__GNUC__) && __GNUC__ >= 3
+#define RTCHECK(e)  __builtin_expect(e, 1)
+#else /* GNUC */
+#define RTCHECK(e)  (e)
+#endif /* GNUC */
+#else /* !INSECURE */
+#define RTCHECK(e)  (1)
+#endif /* !INSECURE */
+
+/* macros to set up inuse chunks with or without footers */
+
+#if !FOOTERS
+
+#define mark_inuse_foot(M,p,s)
+
+/* Set cinuse bit and pinuse bit of next chunk */
+#define set_inuse(M,p,s)\
+  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
+  ((mchunkptr)(((char*)(p)) + (s)))->head |= PINUSE_BIT)
+
+/* Set cinuse and pinuse of this chunk and pinuse of next chunk */
+#define set_inuse_and_pinuse(M,p,s)\
+  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
+  ((mchunkptr)(((char*)(p)) + (s)))->head |= PINUSE_BIT)
+
+/* Set size, cinuse and pinuse bit of this chunk */
+#define set_size_and_pinuse_of_inuse_chunk(M, p, s)\
+  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
+
+#else /* FOOTERS */
+
+/* Set foot of inuse chunk to be xor of mstate and seed */
+#define mark_inuse_foot(M,p,s)\
+  (((mchunkptr)((char*)(p) + (s)))->prev_foot = ((size_t)(M) ^ mparams.magic))
+
+#define get_mstate_for(p)\
+  ((mstate)(((mchunkptr)((char*)(p) +\
+    (chunksize(p))))->prev_foot ^ mparams.magic))
+
+#define set_inuse(M,p,s)\
+  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
+  (((mchunkptr)(((char*)(p)) + (s)))->head |= PINUSE_BIT), \
+  mark_inuse_foot(M,p,s))
+
+#define set_inuse_and_pinuse(M,p,s)\
+  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
+  (((mchunkptr)(((char*)(p)) + (s)))->head |= PINUSE_BIT),\
+ mark_inuse_foot(M,p,s))
+
+#define set_size_and_pinuse_of_inuse_chunk(M, p, s)\
+  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
+  mark_inuse_foot(M, p, s))
+
+#endif /* !FOOTERS */
+
+/* ---------------------------- setting mparams -------------------------- */
+
+/* Initialize mparams */
+static int init_mparams(void) {
+  if (mparams.page_size == 0) {
+    size_t s;
+
+    mparams.mmap_threshold = DEFAULT_MMAP_THRESHOLD;
+    mparams.trim_threshold = DEFAULT_TRIM_THRESHOLD;
+#if MORECORE_CONTIGUOUS
+    mparams.default_mflags = USE_LOCK_BIT|USE_MMAP_BIT;
+#else  /* MORECORE_CONTIGUOUS */
+    mparams.default_mflags = USE_LOCK_BIT|USE_MMAP_BIT|USE_NONCONTIGUOUS_BIT;
+#endif /* MORECORE_CONTIGUOUS */
+
+#if (FOOTERS && !INSECURE)
+    {
+#if USE_DEV_RANDOM
+      int fd;
+      unsigned char buf[sizeof(size_t)];
+      /* Try to use /dev/urandom, else fall back on using time */
+      if ((fd = open("/dev/urandom", O_RDONLY)) >= 0 &&
+          read(fd, buf, sizeof(buf)) == sizeof(buf)) {
+        s = *((size_t *) buf);
+        close(fd);
+      }
+      else
+#endif /* USE_DEV_RANDOM */
+        s = (size_t)(time(0) ^ (size_t)0x55555555U);
+
+      s |= (size_t)8U;    /* ensure nonzero */
+      s &= ~(size_t)7U;   /* improve chances of fault for bad values */
+
+    }
+#else /* (FOOTERS && !INSECURE) */
+    s = (size_t)0x58585858U;
+#endif /* (FOOTERS && !INSECURE) */
+    ACQUIRE_MAGIC_INIT_LOCK();
+    if (mparams.magic == 0) {
+      mparams.magic = s;
+      /* Set up lock for main malloc area */
+      INITIAL_LOCK(&gm->mutex);
+      gm->mflags = mparams.default_mflags;
+    }
+    RELEASE_MAGIC_INIT_LOCK();
+
+#ifndef WIN32
+    mparams.page_size = malloc_getpagesize;
+    mparams.granularity = ((DEFAULT_GRANULARITY != 0)?
+                           DEFAULT_GRANULARITY : mparams.page_size);
+#else /* WIN32 */
+    {
+      SYSTEM_INFO system_info;
+      GetSystemInfo(&system_info);
+      mparams.page_size = system_info.dwPageSize;
+      mparams.granularity = system_info.dwAllocationGranularity;
+    }
+#endif /* WIN32 */
+
+    /* Sanity-check configuration:
+       size_t must be unsigned and as wide as pointer type.
+       ints must be at least 4 bytes.
+       alignment must be at least 8.
+       Alignment, min chunk size, and page size must all be powers of 2.
+    */
+    if ((sizeof(size_t) != sizeof(char*)) ||
+        (MAX_SIZE_T < MIN_CHUNK_SIZE)  ||
+        (sizeof(int) < 4)  ||
+        (MALLOC_ALIGNMENT < (size_t)8U) ||
+        ((MALLOC_ALIGNMENT    & (MALLOC_ALIGNMENT-SIZE_T_ONE))    != 0) ||
+        ((MCHUNK_SIZE         & (MCHUNK_SIZE-SIZE_T_ONE))         != 0) ||
+        ((mparams.granularity & (mparams.granularity-SIZE_T_ONE)) != 0) ||
+        ((mparams.page_size   & (mparams.page_size-SIZE_T_ONE))   != 0))
+      ABORT;
+  }
+  return 0;
+}
+
+/* support for mallopt */
+static int change_mparam(int param_number, int value) {
+  size_t val = (size_t)value;
+  init_mparams();
+  switch(param_number) {
+  case M_TRIM_THRESHOLD:
+    mparams.trim_threshold = val;
+    return 1;
+  case M_GRANULARITY:
+    if (val >= mparams.page_size && ((val & (val-1)) == 0)) {
+      mparams.granularity = val;
+      return 1;
+    }
+    else
+      return 0;
+  case M_MMAP_THRESHOLD:
+    mparams.mmap_threshold = val;
+    return 1;
+  default:
+    return 0;
+  }
+}
+
+#if DEBUG
+/* ------------------------- Debugging Support --------------------------- */
+
+/* Check properties of any chunk, whether free, inuse, mmapped etc  */
+static void do_check_any_chunk(mstate m, mchunkptr p) {
+  assert((is_aligned(chunk2mem(p))) || (p->head == FENCEPOST_HEAD));
+  assert(ok_address(m, p));
+}
+
+/* Check properties of top chunk */
+static void do_check_top_chunk(mstate m, mchunkptr p) {
+  msegmentptr sp = segment_holding(m, (char*)p);
+  size_t  sz = chunksize(p);
+  assert(sp != 0);
+  assert((is_aligned(chunk2mem(p))) || (p->head == FENCEPOST_HEAD));
+  assert(ok_address(m, p));
+  assert(sz == m->topsize);
+  assert(sz > 0);
+  assert(sz == ((sp->base + sp->size) - (char*)p) - TOP_FOOT_SIZE);
+  assert(pinuse(p));
+  assert(!next_pinuse(p));
+}
+
+/* Check properties of (inuse) mmapped chunks */
+static void do_check_mmapped_chunk(mstate m, mchunkptr p) {
+  size_t  sz = chunksize(p);
+  size_t len = (sz + (p->prev_foot & ~IS_MMAPPED_BIT) + MMAP_FOOT_PAD);
+  assert(is_mmapped(p));
+  assert(use_mmap(m));
+  assert((is_aligned(chunk2mem(p))) || (p->head == FENCEPOST_HEAD));
+  assert(ok_address(m, p));
+  assert(!is_small(sz));
+  assert((len & (mparams.page_size-SIZE_T_ONE)) == 0);
+  assert(chunk_plus_offset(p, sz)->head == FENCEPOST_HEAD);
+  assert(chunk_plus_offset(p, sz+SIZE_T_SIZE)->head == 0);
+}
+
+/* Check properties of inuse chunks */
+static void do_check_inuse_chunk(mstate m, mchunkptr p) {
+  do_check_any_chunk(m, p);
+  assert(cinuse(p));
+  assert(next_pinuse(p));
+  /* If not pinuse and not mmapped, previous chunk has OK offset */
+  assert(is_mmapped(p) || pinuse(p) || next_chunk(prev_chunk(p)) == p);
+  if (is_mmapped(p))
+    do_check_mmapped_chunk(m, p);
+}
+
+/* Check properties of free chunks */
+static void do_check_free_chunk(mstate m, mchunkptr p) {
+  size_t sz = p->head & ~(PINUSE_BIT|CINUSE_BIT);
+  mchunkptr next = chunk_plus_offset(p, sz);
+  do_check_any_chunk(m, p);
+  assert(!cinuse(p));
+  assert(!next_pinuse(p));
+  assert (!is_mmapped(p));
+  if (p != m->dv && p != m->top) {
+    if (sz >= MIN_CHUNK_SIZE) {
+      assert((sz & CHUNK_ALIGN_MASK) == 0);
+      assert(is_aligned(chunk2mem(p)));
+      assert(next->prev_foot == sz);
+      assert(pinuse(p));
+      assert (next == m->top || cinuse(next));
+      assert(p->fd->bk == p);
+      assert(p->bk->fd == p);
+    }
+    else  /* markers are always of size SIZE_T_SIZE */
+      assert(sz == SIZE_T_SIZE);
+  }
+}
+
+/* Check properties of malloced chunks at the point they are malloced */
+static void do_check_malloced_chunk(mstate m, void* mem, size_t s) {
+  if (mem != 0) {
+    mchunkptr p = mem2chunk(mem);
+    size_t sz = p->head & ~(PINUSE_BIT|CINUSE_BIT);
+    do_check_inuse_chunk(m, p);
+    assert((sz & CHUNK_ALIGN_MASK) == 0);
+    assert(sz >= MIN_CHUNK_SIZE);
+    assert(sz >= s);
+    /* unless mmapped, size is less than MIN_CHUNK_SIZE more than request */
+    assert(is_mmapped(p) || sz < (s + MIN_CHUNK_SIZE));
+  }
+}
+
+/* Check a tree and its subtrees.  */
+static void do_check_tree(mstate m, tchunkptr t) {
+  tchunkptr head = 0;
+  tchunkptr u = t;
+  bindex_t tindex = t->index;
+  size_t tsize = chunksize(t);
+  bindex_t idx;
+  compute_tree_index(tsize, idx);
+  assert(tindex == idx);
+  assert(tsize >= MIN_LARGE_SIZE);
+  assert(tsize >= minsize_for_tree_index(idx));
+  assert((idx == NTREEBINS-1) || (tsize < minsize_for_tree_index((idx+1))));
+
+  do { /* traverse through chain of same-sized nodes */
+    do_check_any_chunk(m, ((mchunkptr)u));
+    assert(u->index == tindex);
+    assert(chunksize(u) == tsize);
+    assert(!cinuse(u));
+    assert(!next_pinuse(u));
+    assert(u->fd->bk == u);
+    assert(u->bk->fd == u);
+    if (u->parent == 0) {
+      assert(u->child[0] == 0);
+      assert(u->child[1] == 0);
+    }
+    else {
+      assert(head == 0); /* only one node on chain has parent */
+      head = u;
+      assert(u->parent != u);
+      assert (u->parent->child[0] == u ||
+              u->parent->child[1] == u ||
+              *((tbinptr*)(u->parent)) == u);
+      if (u->child[0] != 0) {
+        assert(u->child[0]->parent == u);
+        assert(u->child[0] != u);
+        do_check_tree(m, u->child[0]);
+      }
+      if (u->child[1] != 0) {
+        assert(u->child[1]->parent == u);
+        assert(u->child[1] != u);
+        do_check_tree(m, u->child[1]);
+      }
+      if (u->child[0] != 0 && u->child[1] != 0) {
+        assert(chunksize(u->child[0]) < chunksize(u->child[1]));
+      }
+    }
+    u = u->fd;
+  } while (u != t);
+  assert(head != 0);
+}
+
+/*  Check all the chunks in a treebin.  */
+static void do_check_treebin(mstate m, bindex_t i) {
+  tbinptr* tb = treebin_at(m, i);
+  tchunkptr t = *tb;
+  int empty = (m->treemap & (1U << i)) == 0;
+  if (t == 0)
+    assert(empty);
+  if (!empty)
+    do_check_tree(m, t);
+}
+
+/*  Check all the chunks in a smallbin.  */
+static void do_check_smallbin(mstate m, bindex_t i) {
+  sbinptr b = smallbin_at(m, i);
+  mchunkptr p = b->bk;
+  unsigned int empty = (m->smallmap & (1U << i)) == 0;
+  if (p == b)
+    assert(empty);
+  if (!empty) {
+    for (; p != b; p = p->bk) {
+      size_t size = chunksize(p);
+      mchunkptr q;
+      /* each chunk claims to be free */
+      do_check_free_chunk(m, p);
+      /* chunk belongs in bin */
+      assert(small_index(size) == i);
+      assert(p->bk == b || chunksize(p->bk) == chunksize(p));
+      /* chunk is followed by an inuse chunk */
+      q = next_chunk(p);
+      if (q->head != FENCEPOST_HEAD)
+        do_check_inuse_chunk(m, q);
+    }
+  }
+}
+
+/* Find x in a bin. Used in other check functions. */
+static int bin_find(mstate m, mchunkptr x) {
+  size_t size = chunksize(x);
+  if (is_small(size)) {
+    bindex_t sidx = small_index(size);
+    sbinptr b = smallbin_at(m, sidx);
+    if (smallmap_is_marked(m, sidx)) {
+      mchunkptr p = b;
+      do {
+        if (p == x)
+          return 1;
+      } while ((p = p->fd) != b);
+    }
+  }
+  else {
+    bindex_t tidx;
+    compute_tree_index(size, tidx);
+    if (treemap_is_marked(m, tidx)) {
+      tchunkptr t = *treebin_at(m, tidx);
+      size_t sizebits = size << leftshift_for_tree_index(tidx);
+      while (t != 0 && chunksize(t) != size) {
+        t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
+        sizebits <<= 1;
+      }
+      if (t != 0) {
+        tchunkptr u = t;
+        do {
+          if (u == (tchunkptr)x)
+            return 1;
+        } while ((u = u->fd) != t);
+      }
+    }
+  }
+  return 0;
+}
+
+/* Traverse each chunk and check it; return total */
+static size_t traverse_and_check(mstate m) {
+  size_t sum = 0;
+  if (is_initialized(m)) {
+    msegmentptr s = &m->seg;
+    sum += m->topsize + TOP_FOOT_SIZE;
+    while (s != 0) {
+      mchunkptr q = align_as_chunk(s->base);
+      mchunkptr lastq = 0;
+      assert(pinuse(q));
+      while (segment_holds(s, q) &&
+             q != m->top && q->head != FENCEPOST_HEAD) {
+        sum += chunksize(q);
+        if (cinuse(q)) {
+          assert(!bin_find(m, q));
+          do_check_inuse_chunk(m, q);
+        }
+        else {
+          assert(q == m->dv || bin_find(m, q));
+          assert(lastq == 0 || cinuse(lastq)); /* Not 2 consecutive free */
+          do_check_free_chunk(m, q);
+        }
+        lastq = q;
+        q = next_chunk(q);
+      }
+      s = s->next;
+    }
+  }
+  return sum;
+}
+
+/* Check all properties of malloc_state. */
+static void do_check_malloc_state(mstate m) {
+  bindex_t i;
+  size_t total;
+  /* check bins */
+  for (i = 0; i < NSMALLBINS; ++i)
+    do_check_smallbin(m, i);
+  for (i = 0; i < NTREEBINS; ++i)
+    do_check_treebin(m, i);
+
+  if (m->dvsize != 0) { /* check dv chunk */
+    do_check_any_chunk(m, m->dv);
+    assert(m->dvsize == chunksize(m->dv));
+    assert(m->dvsize >= MIN_CHUNK_SIZE);
+    assert(bin_find(m, m->dv) == 0);
+  }
+
+  if (m->top != 0) {   /* check top chunk */
+    do_check_top_chunk(m, m->top);
+    assert(m->topsize == chunksize(m->top));
+    assert(m->topsize > 0);
+    assert(bin_find(m, m->top) == 0);
+  }
+
+  total = traverse_and_check(m);
+  assert(total <= m->footprint);
+  assert(m->footprint <= m->max_footprint);
+}
+#endif /* DEBUG */
+
+/* ----------------------------- statistics ------------------------------ */
+
+#if !NO_MALLINFO
+static struct mallinfo internal_mallinfo(mstate m) {
+  struct mallinfo nm = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
+  if (!PREACTION(m)) {
+    check_malloc_state(m);
+    if (is_initialized(m)) {
+      size_t nfree = SIZE_T_ONE; /* top always free */
+      size_t mfree = m->topsize + TOP_FOOT_SIZE;
+      size_t sum = mfree;
+      msegmentptr s = &m->seg;
+      while (s != 0) {
+        mchunkptr q = align_as_chunk(s->base);
+        while (segment_holds(s, q) &&
+               q != m->top && q->head != FENCEPOST_HEAD) {
+          size_t sz = chunksize(q);
+          sum += sz;
+          if (!cinuse(q)) {
+            mfree += sz;
+            ++nfree;
+          }
+          q = next_chunk(q);
+        }
+        s = s->next;
+      }
+
+      nm.arena    = sum;
+      nm.ordblks  = nfree;
+      nm.hblkhd   = m->footprint - sum;
+      nm.usmblks  = m->max_footprint;
+      nm.uordblks = m->footprint - mfree;
+      nm.fordblks = mfree;
+      nm.keepcost = m->topsize;
+    }
+
+    POSTACTION(m);
+  }
+  return nm;
+}
+#endif /* !NO_MALLINFO */
+
+static void internal_malloc_stats(mstate m) {
+  if (!PREACTION(m)) {
+    size_t maxfp = 0;
+    size_t fp = 0;
+    size_t used = 0;
+    check_malloc_state(m);
+    if (is_initialized(m)) {
+      msegmentptr s = &m->seg;
+      maxfp = m->max_footprint;
+      fp = m->footprint;
+      used = fp - (m->topsize + TOP_FOOT_SIZE);
+
+      while (s != 0) {
+        mchunkptr q = align_as_chunk(s->base);
+        while (segment_holds(s, q) &&
+               q != m->top && q->head != FENCEPOST_HEAD) {
+          if (!cinuse(q))
+            used -= chunksize(q);
+          q = next_chunk(q);
+        }
+        s = s->next;
+      }
+    }
+
+    fprintf(stderr, "max system bytes = %10lu\n", (unsigned long)(maxfp));
+    fprintf(stderr, "system bytes     = %10lu\n", (unsigned long)(fp));
+    fprintf(stderr, "in use bytes     = %10lu\n", (unsigned long)(used));
+
+    POSTACTION(m);
+  }
+}
+
+/* ----------------------- Operations on smallbins ----------------------- */
+
+/*
+  Various forms of linking and unlinking are defined as macros.  Even
+  the ones for trees, which are very long but have very short typical
+  paths.  This is ugly but reduces reliance on inlining support of
+  compilers.
+*/
+
+/* Link a free chunk into a smallbin  */
+#define insert_small_chunk(M, P, S) {\
+  bindex_t I  = small_index(S);\
+  mchunkptr B = smallbin_at(M, I);\
+  mchunkptr F = B;\
+  assert(S >= MIN_CHUNK_SIZE);\
+  if (!smallmap_is_marked(M, I))\
+    mark_smallmap(M, I);\
+  else if (RTCHECK(ok_address(M, B->fd)))\
+    F = B->fd;\
+  else {\
+    CORRUPTION_ERROR_ACTION(M);\
+  }\
+  B->fd = P;\
+  F->bk = P;\
+  P->fd = F;\
+  P->bk = B;\
+}
+
+/* Unlink a chunk from a smallbin  */
+#define unlink_small_chunk(M, P, S) {\
+  mchunkptr F = P->fd;\
+  mchunkptr B = P->bk;\
+  bindex_t I = small_index(S);\
+  assert(P != B);\
+  assert(P != F);\
+  assert(chunksize(P) == small_index2size(I));\
+  if (F == B)\
+    clear_smallmap(M, I);\
+  else if (RTCHECK((F == smallbin_at(M,I) || ok_address(M, F)) &&\
+                   (B == smallbin_at(M,I) || ok_address(M, B)))) {\
+    F->bk = B;\
+    B->fd = F;\
+  }\
+  else {\
+    CORRUPTION_ERROR_ACTION(M);\
+  }\
+}
+
+/* Unlink the first chunk from a smallbin */
+#define unlink_first_small_chunk(M, B, P, I) {\
+  mchunkptr F = P->fd;\
+  assert(P != B);\
+  assert(P != F);\
+  assert(chunksize(P) == small_index2size(I));\
+  if (B == F)\
+    clear_smallmap(M, I);\
+  else if (RTCHECK(ok_address(M, F))) {\
+    B->fd = F;\
+    F->bk = B;\
+  }\
+  else {\
+    CORRUPTION_ERROR_ACTION(M);\
+  }\
+}
+
+/* Replace dv node, binning the old one */
+/* Used only when dvsize known to be small */
+#define replace_dv(M, P, S) {\
+  size_t DVS = M->dvsize;\
+  if (DVS != 0) {\
+    mchunkptr DV = M->dv;\
+    assert(is_small(DVS));\
+    insert_small_chunk(M, DV, DVS);\
+  }\
+  M->dvsize = S;\
+  M->dv = P;\
+}
+
+/* ------------------------- Operations on trees ------------------------- */
+
+/* Insert chunk into tree */
+#define insert_large_chunk(M, X, S) {\
+  tbinptr* H;\
+  bindex_t I;\
+  compute_tree_index(S, I);\
+  H = treebin_at(M, I);\
+  X->index = I;\
+  X->child[0] = X->child[1] = 0;\
+  if (!treemap_is_marked(M, I)) {\
+    mark_treemap(M, I);\
+    *H = X;\
+    X->parent = (tchunkptr)H;\
+    X->fd = X->bk = X;\
+  }\
+  else {\
+    tchunkptr T = *H;\
+    size_t K = S << leftshift_for_tree_index(I);\
+    for (;;) {\
+      if (chunksize(T) != S) {\
+        tchunkptr* C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
+        K <<= 1;\
+        if (*C != 0)\
+          T = *C;\
+        else if (RTCHECK(ok_address(M, C))) {\
+          *C = X;\
+          X->parent = T;\
+          X->fd = X->bk = X;\
+          break;\
+        }\
+        else {\
+          CORRUPTION_ERROR_ACTION(M);\
+          break;\
+        }\
+      }\
+      else {\
+        tchunkptr F = T->fd;\
+        if (RTCHECK(ok_address(M, T) && ok_address(M, F))) {\
+          T->fd = F->bk = X;\
+          X->fd = F;\
+          X->bk = T;\
+          X->parent = 0;\
+          break;\
+        }\
+        else {\
+          CORRUPTION_ERROR_ACTION(M);\
+          break;\
+        }\
+      }\
+    }\
+  }\
+}
+
+/*
+  Unlink steps:
+
+  1. If x is a chained node, unlink it from its same-sized fd/bk links
+     and choose its bk node as its replacement.
+  2. If x was the last node of its size, but not a leaf node, it must
+     be replaced with a leaf node (not merely one with an open left or
+     right), to make sure that lefts and rights of descendents
+     correspond properly to bit masks.  We use the rightmost descendent
+     of x.  We could use any other leaf, but this is easy to locate and
+     tends to counteract removal of leftmosts elsewhere, and so keeps
+     paths shorter than minimally guaranteed.  This doesn't loop much
+     because on average a node in a tree is near the bottom.
+  3. If x is the base of a chain (i.e., has parent links) relink
+     x's parent and children to x's replacement (or null if none).
+*/
+
+#define unlink_large_chunk(M, X) {\
+  tchunkptr XP = X->parent;\
+  tchunkptr R;\
+  if (X->bk != X) {\
+    tchunkptr F = X->fd;\
+    R = X->bk;\
+    if (RTCHECK(ok_address(M, F))) {\
+      F->bk = R;\
+      R->fd = F;\
+    }\
+    else {\
+      CORRUPTION_ERROR_ACTION(M);\
+    }\
+  }\
+  else {\
+    tchunkptr* RP;\
+    if (((R = *(RP = &(X->child[1]))) != 0) ||\
+        ((R = *(RP = &(X->child[0]))) != 0)) {\
+      tchunkptr* CP;\
+      while ((*(CP = &(R->child[1])) != 0) ||\
+             (*(CP = &(R->child[0])) != 0)) {\
+        R = *(RP = CP);\
+      }\
+      if (RTCHECK(ok_address(M, RP)))\
+        *RP = 0;\
+      else {\
+        CORRUPTION_ERROR_ACTION(M);\
+      }\
+    }\
+  }\
+  if (XP != 0) {\
+    tbinptr* H = treebin_at(M, X->index);\
+    if (X == *H) {\
+      if ((*H = R) == 0) \
+        clear_treemap(M, X->index);\
+    }\
+    else if (RTCHECK(ok_address(M, XP))) {\
+      if (XP->child[0] == X) \
+        XP->child[0] = R;\
+      else \
+        XP->child[1] = R;\
+    }\
+    else\
+      CORRUPTION_ERROR_ACTION(M);\
+    if (R != 0) {\
+      if (RTCHECK(ok_address(M, R))) {\
+        tchunkptr C0, C1;\
+        R->parent = XP;\
+        if ((C0 = X->child[0]) != 0) {\
+          if (RTCHECK(ok_address(M, C0))) {\
+            R->child[0] = C0;\
+            C0->parent = R;\
+          }\
+          else\
+            CORRUPTION_ERROR_ACTION(M);\
+        }\
+        if ((C1 = X->child[1]) != 0) {\
+          if (RTCHECK(ok_address(M, C1))) {\
+            R->child[1] = C1;\
+            C1->parent = R;\
+          }\
+          else\
+            CORRUPTION_ERROR_ACTION(M);\
+        }\
+      }\
+      else\
+        CORRUPTION_ERROR_ACTION(M);\
+    }\
+  }\
+}
+
+/* Relays to large vs small bin operations */
+
+#define insert_chunk(M, P, S)\
+  if (is_small(S)) insert_small_chunk(M, P, S)\
+  else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
+
+#define unlink_chunk(M, P, S)\
+  if (is_small(S)) unlink_small_chunk(M, P, S)\
+  else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
+
+
+/* Relays to internal calls to malloc/free from realloc, memalign etc */
+
+#if ONLY_MSPACES
+#define internal_malloc(m, b) mspace_malloc(m, b)
+#define internal_free(m, mem) mspace_free(m,mem);
+#else /* ONLY_MSPACES */
+#if MSPACES
+#define internal_malloc(m, b)\
+   (m == gm)? dlmalloc(b) : mspace_malloc(m, b)
+#define internal_free(m, mem)\
+   if (m == gm) dlfree(mem); else mspace_free(m,mem);
+#else /* MSPACES */
+#define internal_malloc(m, b) dlmalloc(b)
+#define internal_free(m, mem) dlfree(mem)
+#endif /* MSPACES */
+#endif /* ONLY_MSPACES */
+
+/* -----------------------  Direct-mmapping chunks ----------------------- */
+
+/*
+  Directly mmapped chunks are set up with an offset to the start of
+  the mmapped region stored in the prev_foot field of the chunk. This
+  allows reconstruction of the required argument to MUNMAP when freed,
+  and also allows adjustment of the returned chunk to meet alignment
+  requirements (especially in memalign).  There is also enough space
+  allocated to hold a fake next chunk of size SIZE_T_SIZE to maintain
+  the PINUSE bit so frees can be checked.
+*/
+
+/* Malloc using mmap */
+static void* mmap_alloc(mstate m, size_t nb) {
+  size_t mmsize = granularity_align(nb + SIX_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
+  if (mmsize > nb) {     /* Check for wrap around 0 */
+    char* mm = (char*)(DIRECT_MMAP(mmsize));
+    if (mm != CMFAIL) {
+      size_t offset = align_offset(chunk2mem(mm));
+      size_t psize = mmsize - offset - MMAP_FOOT_PAD;
+      mchunkptr p = (mchunkptr)(mm + offset);
+      p->prev_foot = offset | IS_MMAPPED_BIT;
+      (p)->head = (psize|CINUSE_BIT);
+      mark_inuse_foot(m, p, psize);
+      chunk_plus_offset(p, psize)->head = FENCEPOST_HEAD;
+      chunk_plus_offset(p, psize+SIZE_T_SIZE)->head = 0;
+
+      if (mm < m->least_addr)
+        m->least_addr = mm;
+      if ((m->footprint += mmsize) > m->max_footprint)
+        m->max_footprint = m->footprint;
+      assert(is_aligned(chunk2mem(p)));
+      check_mmapped_chunk(m, p);
+      return chunk2mem(p);
+    }
+  }
+  return 0;
+}
+
+/* Realloc using mmap */
+static mchunkptr mmap_resize(mstate m, mchunkptr oldp, size_t nb) {
+  size_t oldsize = chunksize(oldp);
+  if (is_small(nb)) /* Can't shrink mmap regions below small size */
+    return 0;
+  /* Keep old chunk if big enough but not too big */
+  if (oldsize >= nb + SIZE_T_SIZE &&
+      (oldsize - nb) <= (mparams.granularity << 1))
+    return oldp;
+  else {
+    size_t offset = oldp->prev_foot & ~IS_MMAPPED_BIT;
+    size_t oldmmsize = oldsize + offset + MMAP_FOOT_PAD;
+    size_t newmmsize = granularity_align(nb + SIX_SIZE_T_SIZES +
+                                         CHUNK_ALIGN_MASK);
+    char* cp = (char*)CALL_MREMAP((char*)oldp - offset,
+                                  oldmmsize, newmmsize, 1);
+    if (cp != CMFAIL) {
+      mchunkptr newp = (mchunkptr)(cp + offset);
+      size_t psize = newmmsize - offset - MMAP_FOOT_PAD;
+      newp->head = (psize|CINUSE_BIT);
+      mark_inuse_foot(m, newp, psize);
+      chunk_plus_offset(newp, psize)->head = FENCEPOST_HEAD;
+      chunk_plus_offset(newp, psize+SIZE_T_SIZE)->head = 0;
+
+      if (cp < m->least_addr)
+        m->least_addr = cp;
+      if ((m->footprint += newmmsize - oldmmsize) > m->max_footprint)
+        m->max_footprint = m->footprint;
+      check_mmapped_chunk(m, newp);
+      return newp;
+    }
+  }
+  return 0;
+}
+
+/* -------------------------- mspace management -------------------------- */
+
+/* Initialize top chunk and its size */
+static void init_top(mstate m, mchunkptr p, size_t psize) {
+  /* Ensure alignment */
+  size_t offset = align_offset(chunk2mem(p));
+  p = (mchunkptr)((char*)p + offset);
+  psize -= offset;
+
+  m->top = p;
+  m->topsize = psize;
+  p->head = psize | PINUSE_BIT;
+  /* set size of fake trailing chunk holding overhead space only once */
+  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
+  m->trim_check = mparams.trim_threshold; /* reset on each update */
+}
+
+/* Initialize bins for a new mstate that is otherwise zeroed out */
+static void init_bins(mstate m) {
+  /* Establish circular links for smallbins */
+  bindex_t i;
+  for (i = 0; i < NSMALLBINS; ++i) {
+    sbinptr bin = smallbin_at(m,i);
+    bin->fd = bin->bk = bin;
+  }
+}
+
+#if PROCEED_ON_ERROR
+
+/* default corruption action */
+static void reset_on_error(mstate m) {
+  int i;
+  ++malloc_corruption_error_count;
+  /* Reinitialize fields to forget about all memory */
+  m->smallbins = m->treebins = 0;
+  m->dvsize = m->topsize = 0;
+  m->seg.base = 0;
+  m->seg.size = 0;
+  m->seg.next = 0;
+  m->top = m->dv = 0;
+  for (i = 0; i < NTREEBINS; ++i)
+    *treebin_at(m, i) = 0;
+  init_bins(m);
+}
+#endif /* PROCEED_ON_ERROR */
+
+/* Allocate chunk and prepend remainder with chunk in successor base. */
+static void* prepend_alloc(mstate m, char* newbase, char* oldbase,
+                           size_t nb) {
+  mchunkptr p = align_as_chunk(newbase);
+  mchunkptr oldfirst = align_as_chunk(oldbase);
+  size_t psize = (char*)oldfirst - (char*)p;
+  mchunkptr q = chunk_plus_offset(p, nb);
+  size_t qsize = psize - nb;
+  set_size_and_pinuse_of_inuse_chunk(m, p, nb);
+
+  assert((char*)oldfirst > (char*)q);
+  assert(pinuse(oldfirst));
+  assert(qsize >= MIN_CHUNK_SIZE);
+
+  /* consolidate remainder with first chunk of old base */
+  if (oldfirst == m->top) {
+    size_t tsize = m->topsize += qsize;
+    m->top = q;
+    q->head = tsize | PINUSE_BIT;
+    check_top_chunk(m, q);
+  }
+  else if (oldfirst == m->dv) {
+    size_t dsize = m->dvsize += qsize;
+    m->dv = q;
+    set_size_and_pinuse_of_free_chunk(q, dsize);
+  }
+  else {
+    if (!cinuse(oldfirst)) {
+      size_t nsize = chunksize(oldfirst);
+      unlink_chunk(m, oldfirst, nsize);
+      oldfirst = chunk_plus_offset(oldfirst, nsize);
+      qsize += nsize;
+    }
+    set_free_with_pinuse(q, qsize, oldfirst);
+    insert_chunk(m, q, qsize);
+    check_free_chunk(m, q);
+  }
+
+  check_malloced_chunk(m, chunk2mem(p), nb);
+  return chunk2mem(p);
+}
+
+
+/* Add a segment to hold a new noncontiguous region */
+static void add_segment(mstate m, char* tbase, size_t tsize, flag_t mmapped) {
+  /* Determine locations and sizes of segment, fenceposts, old top */
+  char* old_top = (char*)m->top;
+  msegmentptr oldsp = segment_holding(m, old_top);
+  char* old_end = oldsp->base + oldsp->size;
+  size_t ssize = pad_request(sizeof(struct malloc_segment));
+  char* rawsp = old_end - (ssize + FOUR_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
+  size_t offset = align_offset(chunk2mem(rawsp));
+  char* asp = rawsp + offset;
+  char* csp = (asp < (old_top + MIN_CHUNK_SIZE))? old_top : asp;
+  mchunkptr sp = (mchunkptr)csp;
+  msegmentptr ss = (msegmentptr)(chunk2mem(sp));
+  mchunkptr tnext = chunk_plus_offset(sp, ssize);
+  mchunkptr p = tnext;
+  int nfences = 0;
+
+  /* reset top to new space */
+  init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
+
+  /* Set up segment record */
+  assert(is_aligned(ss));
+  set_size_and_pinuse_of_inuse_chunk(m, sp, ssize);
+  *ss = m->seg; /* Push current record */
+  m->seg.base = tbase;
+  m->seg.size = tsize;
+  set_segment_flags(&m->seg, mmapped);
+  m->seg.next = ss;
+
+  /* Insert trailing fenceposts */
+  for (;;) {
+    mchunkptr nextp = chunk_plus_offset(p, SIZE_T_SIZE);
+    p->head = FENCEPOST_HEAD;
+    ++nfences;
+    if ((char*)(&(nextp->head)) < old_end)
+      p = nextp;
+    else
+      break;
+  }
+  assert(nfences >= 2);
+
+  /* Insert the rest of old top into a bin as an ordinary free chunk */
+  if (csp != old_top) {
+    mchunkptr q = (mchunkptr)old_top;
+    size_t psize = csp - old_top;
+    mchunkptr tn = chunk_plus_offset(q, psize);
+    set_free_with_pinuse(q, psize, tn);
+    insert_chunk(m, q, psize);
+  }
+
+  check_top_chunk(m, m->top);
+}
+
+/* -------------------------- System allocation -------------------------- */
+
+/* Get memory from system using MORECORE or MMAP */
+static void* sys_alloc(mstate m, size_t nb) {
+  char* tbase = CMFAIL;
+  size_t tsize = 0;
+  flag_t mmap_flag = 0;
+
+  init_mparams();
+
+  /* Directly map large chunks */
+  if (use_mmap(m) && nb >= mparams.mmap_threshold) {
+    void* mem = mmap_alloc(m, nb);
+    if (mem != 0)
+      return mem;
+  }
+
+  /*
+    Try getting memory in any of three ways (in most-preferred to
+    least-preferred order):
+    1. A call to MORECORE that can normally contiguously extend memory.
+       (disabled if not MORECORE_CONTIGUOUS or not HAVE_MORECORE or
+       or main space is mmapped or a previous contiguous call failed)
+    2. A call to MMAP new space (disabled if not HAVE_MMAP).
+       Note that under the default settings, if MORECORE is unable to
+       fulfill a request, and HAVE_MMAP is true, then mmap is
+       used as a noncontiguous system allocator. This is a useful backup
+       strategy for systems with holes in address spaces -- in this case
+       sbrk cannot contiguously expand the heap, but mmap may be able to
+       find space.
+    3. A call to MORECORE that cannot usually contiguously extend memory.
+       (disabled if not HAVE_MORECORE)
+  */
+
+  if (MORECORE_CONTIGUOUS && !use_noncontiguous(m)) {
+    char* br = CMFAIL;
+    msegmentptr ss = (m->top == 0)? 0 : segment_holding(m, (char*)m->top);
+    size_t asize = 0;
+    ACQUIRE_MORECORE_LOCK();
+
+    if (ss == 0) {  /* First time through or recovery */
+      char* base = (char*)CALL_MORECORE(0);
+      if (base != CMFAIL) {
+        asize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE);
+        /* Adjust to end on a page boundary */
+        if (!is_page_aligned(base))
+          asize += (page_align((size_t)base) - (size_t)base);
+        /* Can't call MORECORE if size is negative when treated as signed */
+        if (asize < HALF_MAX_SIZE_T &&
+            (br = (char*)(CALL_MORECORE(asize))) == base) {
+          tbase = base;
+          tsize = asize;
+        }
+      }
+    }
+    else {
+      /* Subtract out existing available top space from MORECORE request. */
+      asize = granularity_align(nb - m->topsize + TOP_FOOT_SIZE + SIZE_T_ONE);
+      /* Use mem here only if it did continuously extend old space */
+      if (asize < HALF_MAX_SIZE_T &&
+          (br = (char*)(CALL_MORECORE(asize))) == ss->base+ss->size) {
+        tbase = br;
+        tsize = asize;
+      }
+    }
+
+    if (tbase == CMFAIL) {    /* Cope with partial failure */
+      if (br != CMFAIL) {    /* Try to use/extend the space we did get */
+        if (asize < HALF_MAX_SIZE_T &&
+            asize < nb + TOP_FOOT_SIZE + SIZE_T_ONE) {
+          size_t esize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE - asize);
+          if (esize < HALF_MAX_SIZE_T) {
+            char* end = (char*)CALL_MORECORE(esize);
+            if (end != CMFAIL)
+              asize += esize;
+            else {            /* Can't use; try to release */
+              (void)CALL_MORECORE(-asize);
+              br = CMFAIL;
+            }
+          }
+        }
+      }
+      if (br != CMFAIL) {    /* Use the space we did get */
+        tbase = br;
+        tsize = asize;
+      }
+      else
+        disable_contiguous(m); /* Don't try contiguous path in the future */
+    }
+
+    RELEASE_MORECORE_LOCK();
+  }
+
+  if (HAVE_MMAP && tbase == CMFAIL) {  /* Try MMAP */
+    size_t req = nb + TOP_FOOT_SIZE + SIZE_T_ONE;
+    size_t rsize = granularity_align(req);
+    if (rsize > nb) { /* Fail if wraps around zero */
+      char* mp = (char*)(CALL_MMAP(rsize));
+      if (mp != CMFAIL) {
+        tbase = mp;
+        tsize = rsize;
+        mmap_flag = IS_MMAPPED_BIT;
+      }
+    }
+  }
+
+  if (HAVE_MORECORE && tbase == CMFAIL) { /* Try noncontiguous MORECORE */
+    size_t asize = granularity_align(nb + TOP_FOOT_SIZE + SIZE_T_ONE);
+    if (asize < HALF_MAX_SIZE_T) {
+      char* br = CMFAIL;
+      char* end = CMFAIL;
+      ACQUIRE_MORECORE_LOCK();
+      br = (char*)(CALL_MORECORE(asize));
+      end = (char*)(CALL_MORECORE(0));
+      RELEASE_MORECORE_LOCK();
+      if (br != CMFAIL && end != CMFAIL && br < end) {
+        size_t ssize = end - br;
+        if (ssize > nb + TOP_FOOT_SIZE) {
+          tbase = br;
+          tsize = ssize;
+        }
+      }
+    }
+  }
+
+  if (tbase != CMFAIL) {
+
+    if ((m->footprint += tsize) > m->max_footprint)
+      m->max_footprint = m->footprint;
+
+    if (!is_initialized(m)) { /* first-time initialization */
+      m->seg.base = m->least_addr = tbase;
+      m->seg.size = tsize;
+      set_segment_flags(&m->seg, mmap_flag);
+      m->magic = mparams.magic;
+      init_bins(m);
+      if (is_global(m)) 
+        init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
+      else {
+        /* Offset top by embedded malloc_state */
+        mchunkptr mn = next_chunk(mem2chunk(m));
+        init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) -TOP_FOOT_SIZE);
+      }
+    }
+
+    else {
+      /* Try to merge with an existing segment */
+      msegmentptr sp = &m->seg;
+      while (sp != 0 && tbase != sp->base + sp->size)
+        sp = sp->next;
+      if (sp != 0 &&
+          !is_extern_segment(sp) &&
+	  check_segment_merge(sp, tbase, tsize) &&
+          (get_segment_flags(sp) & IS_MMAPPED_BIT) == mmap_flag &&
+          segment_holds(sp, m->top)) { /* append */
+        sp->size += tsize;
+        init_top(m, m->top, m->topsize + tsize);
+      }
+      else {
+        if (tbase < m->least_addr)
+          m->least_addr = tbase;
+        sp = &m->seg;
+        while (sp != 0 && sp->base != tbase + tsize)
+          sp = sp->next;
+        if (sp != 0 &&
+            !is_extern_segment(sp) &&
+	    check_segment_merge(sp, tbase, tsize) &&
+            (get_segment_flags(sp) & IS_MMAPPED_BIT) == mmap_flag) {
+          char* oldbase = sp->base;
+          sp->base = tbase;
+          sp->size += tsize;
+          return prepend_alloc(m, tbase, oldbase, nb);
+        }
+        else
+          add_segment(m, tbase, tsize, mmap_flag);
+      }
+    }
+
+    if (nb < m->topsize) { /* Allocate from new or extended top space */
+      size_t rsize = m->topsize -= nb;
+      mchunkptr p = m->top;
+      mchunkptr r = m->top = chunk_plus_offset(p, nb);
+      r->head = rsize | PINUSE_BIT;
+      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
+      check_top_chunk(m, m->top);
+      check_malloced_chunk(m, chunk2mem(p), nb);
+      return chunk2mem(p);
+    }
+  }
+
+  MALLOC_FAILURE_ACTION;
+  return 0;
+}
+
+/* -----------------------  system deallocation -------------------------- */
+
+/* Unmap and unlink any mmapped segments that don't contain used chunks */
+static size_t release_unused_segments(mstate m) {
+  size_t released = 0;
+  msegmentptr pred = &m->seg;
+  msegmentptr sp = pred->next;
+  while (sp != 0) {
+    char* base = sp->base;
+    size_t size = sp->size;
+    msegmentptr next = sp->next;
+    if (is_mmapped_segment(sp) && !is_extern_segment(sp)) {
+      mchunkptr p = align_as_chunk(base);
+      size_t psize = chunksize(p);
+      /* Can unmap if first chunk holds entire segment and not pinned */
+      if (!cinuse(p) && (char*)p + psize >= base + size - TOP_FOOT_SIZE) {
+        tchunkptr tp = (tchunkptr)p;
+        assert(segment_holds(sp, (char*)sp));
+        if (p == m->dv) {
+          m->dv = 0;
+          m->dvsize = 0;
+        }
+        else {
+          unlink_large_chunk(m, tp);
+        }
+        if (CALL_MUNMAP(base, size) == 0) {
+          released += size;
+          m->footprint -= size;
+          /* unlink obsoleted record */
+          sp = pred;
+          sp->next = next;
+        }
+        else { /* back out if cannot unmap */
+          insert_large_chunk(m, tp, psize);
+        }
+      }
+    }
+    pred = sp;
+    sp = next;
+  }
+  return released;
+}
+
+static int sys_trim(mstate m, size_t pad) {
+  size_t released = 0;
+  if (pad < MAX_REQUEST && is_initialized(m)) {
+    pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */
+
+    if (m->topsize > pad) {
+      /* Shrink top space in granularity-size units, keeping at least one */
+      size_t unit = mparams.granularity;
+      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
+                      SIZE_T_ONE) * unit;
+      msegmentptr sp = segment_holding(m, (char*)m->top);
+
+      if (!is_extern_segment(sp)) {
+        if (is_mmapped_segment(sp)) {
+          if (HAVE_MMAP &&
+              sp->size >= extra &&
+              !has_segment_link(m, sp)) { /* can't shrink if pinned */
+            size_t newsize = sp->size - extra;
+            /* Prefer mremap, fall back to munmap */
+            if ((CALL_MREMAP(sp->base, sp->size, newsize, 0) != MFAIL) ||
+                (CALL_MUNMAP(sp->base + newsize, extra) == 0)) {
+              released = extra;
+            }
+          }
+        }
+        else if (HAVE_MORECORE) {
+          if (extra >= HALF_MAX_SIZE_T) /* Avoid wrapping negative */
+            extra = (HALF_MAX_SIZE_T) + SIZE_T_ONE - unit;
+          ACQUIRE_MORECORE_LOCK();
+          {
+            /* Make sure end of memory is where we last set it. */
+            char* old_br = (char*)(CALL_MORECORE(0));
+            if (old_br == sp->base + sp->size) {
+              char* rel_br = (char*)(CALL_MORECORE(-extra));
+              char* new_br = (char*)(CALL_MORECORE(0));
+              if (rel_br != CMFAIL && new_br < old_br)
+                released = old_br - new_br;
+            }
+          }
+          RELEASE_MORECORE_LOCK();
+        }
+      }
+
+      if (released != 0) {
+        sp->size -= released;
+        m->footprint -= released;
+        init_top(m, m->top, m->topsize - released);
+        check_top_chunk(m, m->top);
+      }
+    }
+
+    /* Unmap any unused mmapped segments */
+    if (HAVE_MMAP) 
+      released += release_unused_segments(m);
+
+    /* On failure, disable autotrim to avoid repeated failed future calls */
+    if (released == 0)
+      m->trim_check = MAX_SIZE_T;
+  }
+
+  return (released != 0)? 1 : 0;
+}
+
+/* ---------------------------- malloc support --------------------------- */
+
+/* allocate a large request from the best fitting chunk in a treebin */
+static void* tmalloc_large(mstate m, size_t nb) {
+  tchunkptr v = 0;
+  size_t rsize = -nb; /* Unsigned negation */
+  tchunkptr t;
+  bindex_t idx;
+  compute_tree_index(nb, idx);
+
+  if ((t = *treebin_at(m, idx)) != 0) {
+    /* Traverse tree for this bin looking for node with size == nb */
+    size_t sizebits = nb << leftshift_for_tree_index(idx);
+    tchunkptr rst = 0;  /* The deepest untaken right subtree */
+    for (;;) {
+      tchunkptr rt;
+      size_t trem = chunksize(t) - nb;
+      if (trem < rsize) {
+        v = t;
+        if ((rsize = trem) == 0)
+          break;
+      }
+      rt = t->child[1];
+      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
+      if (rt != 0 && rt != t)
+        rst = rt;
+      if (t == 0) {
+        t = rst; /* set t to least subtree holding sizes > nb */
+        break;
+      }
+      sizebits <<= 1;
+    }
+  }
+
+  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
+    binmap_t leftbits = left_bits(idx2bit(idx)) & m->treemap;
+    if (leftbits != 0) {
+      bindex_t i;
+      binmap_t leastbit = least_bit(leftbits);
+      compute_bit2idx(leastbit, i);
+      t = *treebin_at(m, i);
+    }
+  }
+
+  while (t != 0) { /* find smallest of tree or subtree */
+    size_t trem = chunksize(t) - nb;
+    if (trem < rsize) {
+      rsize = trem;
+      v = t;
+    }
+    t = leftmost_child(t);
+  }
+
+  /*  If dv is a better fit, return 0 so malloc will use it */
+  if (v != 0 && rsize < (size_t)(m->dvsize - nb)) {
+    if (RTCHECK(ok_address(m, v))) { /* split */
+      mchunkptr r = chunk_plus_offset(v, nb);
+      assert(chunksize(v) == rsize + nb);
+      if (RTCHECK(ok_next(v, r))) {
+        unlink_large_chunk(m, v);
+        if (rsize < MIN_CHUNK_SIZE)
+          set_inuse_and_pinuse(m, v, (rsize + nb));
+        else {
+          set_size_and_pinuse_of_inuse_chunk(m, v, nb);
+          set_size_and_pinuse_of_free_chunk(r, rsize);
+          insert_chunk(m, r, rsize);
+        }
+        return chunk2mem(v);
+      }
+    }
+    CORRUPTION_ERROR_ACTION(m);
+  }
+  return 0;
+}
+
+/* allocate a small request from the best fitting chunk in a treebin */
+static void* tmalloc_small(mstate m, size_t nb) {
+  tchunkptr t, v;
+  size_t rsize;
+  bindex_t i;
+  binmap_t leastbit = least_bit(m->treemap);
+  compute_bit2idx(leastbit, i);
+
+  v = t = *treebin_at(m, i);
+  rsize = chunksize(t) - nb;
+
+  while ((t = leftmost_child(t)) != 0) {
+    size_t trem = chunksize(t) - nb;
+    if (trem < rsize) {
+      rsize = trem;
+      v = t;
+    }
+  }
+
+  if (RTCHECK(ok_address(m, v))) {
+    mchunkptr r = chunk_plus_offset(v, nb);
+    assert(chunksize(v) == rsize + nb);
+    if (RTCHECK(ok_next(v, r))) {
+      unlink_large_chunk(m, v);
+      if (rsize < MIN_CHUNK_SIZE)
+        set_inuse_and_pinuse(m, v, (rsize + nb));
+      else {
+        set_size_and_pinuse_of_inuse_chunk(m, v, nb);
+        set_size_and_pinuse_of_free_chunk(r, rsize);
+        replace_dv(m, r, rsize);
+      }
+      return chunk2mem(v);
+    }
+  }
+
+  CORRUPTION_ERROR_ACTION(m);
+  return 0;
+}
+
+/* --------------------------- realloc support --------------------------- */
+
+static void* internal_realloc(mstate m, void* oldmem, size_t bytes) {
+  if (bytes >= MAX_REQUEST) {
+    MALLOC_FAILURE_ACTION;
+    return 0;
+  }
+  if (!PREACTION(m)) {
+    mchunkptr oldp = mem2chunk(oldmem);
+    size_t oldsize = chunksize(oldp);
+    mchunkptr next = chunk_plus_offset(oldp, oldsize);
+    mchunkptr newp = 0;
+    void* extra = 0;
+
+    /* Try to either shrink or extend into top. Else malloc-copy-free */
+
+    if (RTCHECK(ok_address(m, oldp) && ok_cinuse(oldp) &&
+                ok_next(oldp, next) && ok_pinuse(next))) {
+      size_t nb = request2size(bytes);
+      if (is_mmapped(oldp))
+        newp = mmap_resize(m, oldp, nb);
+      else if (oldsize >= nb) { /* already big enough */
+        size_t rsize = oldsize - nb;
+        newp = oldp;
+        if (rsize >= MIN_CHUNK_SIZE) {
+          mchunkptr remainder = chunk_plus_offset(newp, nb);
+          set_inuse(m, newp, nb);
+          set_inuse(m, remainder, rsize);
+          extra = chunk2mem(remainder);
+        }
+      }
+      else if (next == m->top && oldsize + m->topsize > nb) {
+        /* Expand into top */
+        size_t newsize = oldsize + m->topsize;
+        size_t newtopsize = newsize - nb;
+        mchunkptr newtop = chunk_plus_offset(oldp, nb);
+        set_inuse(m, oldp, nb);
+        newtop->head = newtopsize |PINUSE_BIT;
+        m->top = newtop;
+        m->topsize = newtopsize;
+        newp = oldp;
+      }
+    }
+    else {
+      USAGE_ERROR_ACTION(m, oldmem);
+      POSTACTION(m);
+      return 0;
+    }
+
+    POSTACTION(m);
+
+    if (newp != 0) {
+      if (extra != 0) {
+        internal_free(m, extra);
+      }
+      check_inuse_chunk(m, newp);
+      return chunk2mem(newp);
+    }
+    else {
+      void* newmem = internal_malloc(m, bytes);
+      if (newmem != 0) {
+        size_t oc = oldsize - overhead_for(oldp);
+        memcpy(newmem, oldmem, (oc < bytes)? oc : bytes);
+        internal_free(m, oldmem);
+      }
+      return newmem;
+    }
+  }
+  return 0;
+}
+
+/* --------------------------- memalign support -------------------------- */
+
+static void* internal_memalign(mstate m, size_t alignment, size_t bytes) {
+  if (alignment <= MALLOC_ALIGNMENT)    /* Can just use malloc */
+    return internal_malloc(m, bytes);
+  if (alignment <  MIN_CHUNK_SIZE) /* must be at least a minimum chunk size */
+    alignment = MIN_CHUNK_SIZE;
+  if ((alignment & (alignment-SIZE_T_ONE)) != 0) {/* Ensure a power of 2 */
+    size_t a = MALLOC_ALIGNMENT << 1;
+    while (a < alignment) a <<= 1;
+    alignment = a;
+  }
+  
+  if (bytes >= MAX_REQUEST - alignment) {
+    if (m != 0)  { /* Test isn't needed but avoids compiler warning */
+      MALLOC_FAILURE_ACTION;
+    }
+  }
+  else {
+    size_t nb = request2size(bytes);
+    size_t req = nb + alignment + MIN_CHUNK_SIZE - CHUNK_OVERHEAD;
+    char* mem = (char*)internal_malloc(m, req);
+    if (mem != 0) {
+      void* leader = 0;
+      void* trailer = 0;
+      mchunkptr p = mem2chunk(mem);
+
+      if (PREACTION(m)) return 0;
+      if ((((size_t)(mem)) % alignment) != 0) { /* misaligned */
+        /*
+          Find an aligned spot inside chunk.  Since we need to give
+          back leading space in a chunk of at least MIN_CHUNK_SIZE, if
+          the first calculation places us at a spot with less than
+          MIN_CHUNK_SIZE leader, we can move to the next aligned spot.
+          We've allocated enough total room so that this is always
+          possible.
+        */
+        char* br = (char*)mem2chunk((size_t)(((size_t)(mem +
+                                                       alignment -
+                                                       SIZE_T_ONE)) &
+                                             -alignment));
+        char* pos = ((size_t)(br - (char*)(p)) >= MIN_CHUNK_SIZE)?
+          br : br+alignment;
+        mchunkptr newp = (mchunkptr)pos;
+        size_t leadsize = pos - (char*)(p);
+        size_t newsize = chunksize(p) - leadsize;
+
+        if (is_mmapped(p)) { /* For mmapped chunks, just adjust offset */
+          newp->prev_foot = p->prev_foot + leadsize;
+          newp->head = (newsize|CINUSE_BIT);
+        }
+        else { /* Otherwise, give back leader, use the rest */
+          set_inuse(m, newp, newsize);
+          set_inuse(m, p, leadsize);
+          leader = chunk2mem(p);
+        }
+        p = newp;
+      }
+
+      /* Give back spare room at the end */
+      if (!is_mmapped(p)) {
+        size_t size = chunksize(p);
+        if (size > nb + MIN_CHUNK_SIZE) {
+          size_t remainder_size = size - nb;
+          mchunkptr remainder = chunk_plus_offset(p, nb);
+          set_inuse(m, p, nb);
+          set_inuse(m, remainder, remainder_size);
+          trailer = chunk2mem(remainder);
+        }
+      }
+
+      assert (chunksize(p) >= nb);
+      assert((((size_t)(chunk2mem(p))) % alignment) == 0);
+      check_inuse_chunk(m, p);
+      POSTACTION(m);
+      if (leader != 0) {
+        internal_free(m, leader);
+      }
+      if (trailer != 0) {
+        internal_free(m, trailer);
+      }
+      return chunk2mem(p);
+    }
+  }
+  return 0;
+}
+
+/* ------------------------ comalloc/coalloc support --------------------- */
+
+static void** ialloc(mstate m,
+                     size_t n_elements,
+                     size_t* sizes,
+                     int opts,
+                     void* chunks[]) {
+  /*
+    This provides common support for independent_X routines, handling
+    all of the combinations that can result.
+
+    The opts arg has:
+    bit 0 set if all elements are same size (using sizes[0])
+    bit 1 set if elements should be zeroed
+  */
+
+  size_t    element_size;   /* chunksize of each element, if all same */
+  size_t    contents_size;  /* total size of elements */
+  size_t    array_size;     /* request size of pointer array */
+  void*     mem;            /* malloced aggregate space */
+  mchunkptr p;              /* corresponding chunk */
+  size_t    remainder_size; /* remaining bytes while splitting */
+  void**    marray;         /* either "chunks" or malloced ptr array */
+  mchunkptr array_chunk;    /* chunk for malloced ptr array */
+  flag_t    was_enabled;    /* to disable mmap */
+  size_t    size;
+  size_t    i;
+
+  /* compute array length, if needed */
+  if (chunks != 0) {
+    if (n_elements == 0)
+      return chunks; /* nothing to do */
+    marray = chunks;
+    array_size = 0;
+  }
+  else {
+    /* if empty req, must still return chunk representing empty array */
+    if (n_elements == 0)
+      return (void**)internal_malloc(m, 0);
+    marray = 0;
+    array_size = request2size(n_elements * (sizeof(void*)));
+  }
+
+  /* compute total element size */
+  if (opts & 0x1) { /* all-same-size */
+    element_size = request2size(*sizes);
+    contents_size = n_elements * element_size;
+  }
+  else { /* add up all the sizes */
+    element_size = 0;
+    contents_size = 0;
+    for (i = 0; i != n_elements; ++i)
+      contents_size += request2size(sizes[i]);
+  }
+
+  size = contents_size + array_size;
+
+  /*
+     Allocate the aggregate chunk.  First disable direct-mmapping so
+     malloc won't use it, since we would not be able to later
+     free/realloc space internal to a segregated mmap region.
+  */
+  was_enabled = use_mmap(m);
+  disable_mmap(m);
+  mem = internal_malloc(m, size - CHUNK_OVERHEAD);
+  if (was_enabled)
+    enable_mmap(m);
+  if (mem == 0)
+    return 0;
+
+  if (PREACTION(m)) return 0;
+  p = mem2chunk(mem);
+  remainder_size = chunksize(p);
+
+  assert(!is_mmapped(p));
+
+  if (opts & 0x2) {       /* optionally clear the elements */
+    memset((size_t*)mem, 0, remainder_size - SIZE_T_SIZE - array_size);
+  }
+
+  /* If not provided, allocate the pointer array as final part of chunk */
+  if (marray == 0) {
+    size_t  array_chunk_size;
+    array_chunk = chunk_plus_offset(p, contents_size);
+    array_chunk_size = remainder_size - contents_size;
+    marray = (void**) (chunk2mem(array_chunk));
+    set_size_and_pinuse_of_inuse_chunk(m, array_chunk, array_chunk_size);
+    remainder_size = contents_size;
+  }
+
+  /* split out elements */
+  for (i = 0; ; ++i) {
+    marray[i] = chunk2mem(p);
+    if (i != n_elements-1) {
+      if (element_size != 0)
+        size = element_size;
+      else
+        size = request2size(sizes[i]);
+      remainder_size -= size;
+      set_size_and_pinuse_of_inuse_chunk(m, p, size);
+      p = chunk_plus_offset(p, size);
+    }
+    else { /* the final element absorbs any overallocation slop */
+      set_size_and_pinuse_of_inuse_chunk(m, p, remainder_size);
+      break;
+    }
+  }
+
+#if DEBUG
+  if (marray != chunks) {
+    /* final element must have exactly exhausted chunk */
+    if (element_size != 0) {
+      assert(remainder_size == element_size);
+    }
+    else {
+      assert(remainder_size == request2size(sizes[i]));
+    }
+    check_inuse_chunk(m, mem2chunk(marray));
+  }
+  for (i = 0; i != n_elements; ++i)
+    check_inuse_chunk(m, mem2chunk(marray[i]));
+
+#endif /* DEBUG */
+
+  POSTACTION(m);
+  return marray;
+}
+
+
+/* -------------------------- public routines ---------------------------- */
+
+#if !ONLY_MSPACES
+
+void* dlmalloc(size_t bytes) {
+  /*
+     Basic algorithm:
+     If a small request (< 256 bytes minus per-chunk overhead):
+       1. If one exists, use a remainderless chunk in associated smallbin.
+          (Remainderless means that there are too few excess bytes to
+          represent as a chunk.)
+       2. If it is big enough, use the dv chunk, which is normally the
+          chunk adjacent to the one used for the most recent small request.
+       3. If one exists, split the smallest available chunk in a bin,
+          saving remainder in dv.
+       4. If it is big enough, use the top chunk.
+       5. If available, get memory from system and use it
+     Otherwise, for a large request:
+       1. Find the smallest available binned chunk that fits, and use it
+          if it is better fitting than dv chunk, splitting if necessary.
+       2. If better fitting than any binned chunk, use the dv chunk.
+       3. If it is big enough, use the top chunk.
+       4. If request size >= mmap threshold, try to directly mmap this chunk.
+       5. If available, get memory from system and use it
+
+     The ugly goto's here ensure that postaction occurs along all paths.
+  */
+
+  if (!PREACTION(gm)) {
+    void* mem;
+    size_t nb;
+    if (bytes <= MAX_SMALL_REQUEST) {
+      bindex_t idx;
+      binmap_t smallbits;
+      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
+      idx = small_index(nb);
+      smallbits = gm->smallmap >> idx;
+
+      if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
+        mchunkptr b, p;
+        idx += ~smallbits & 1;       /* Uses next bin if idx empty */
+        b = smallbin_at(gm, idx);
+        p = b->fd;
+        assert(chunksize(p) == small_index2size(idx));
+        unlink_first_small_chunk(gm, b, p, idx);
+        set_inuse_and_pinuse(gm, p, small_index2size(idx));
+        mem = chunk2mem(p);
+        check_malloced_chunk(gm, mem, nb);
+        goto postaction;
+      }
+
+      else if (nb > gm->dvsize) {
+        if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
+          mchunkptr b, p, r;
+          size_t rsize;
+          bindex_t i;
+          binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
+          binmap_t leastbit = least_bit(leftbits);
+          compute_bit2idx(leastbit, i);
+          b = smallbin_at(gm, i);
+          p = b->fd;
+          assert(chunksize(p) == small_index2size(i));
+          unlink_first_small_chunk(gm, b, p, i);
+          rsize = small_index2size(i) - nb;
+          /* Fit here cannot be remainderless if 4byte sizes */
+          if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE)
+            set_inuse_and_pinuse(gm, p, small_index2size(i));
+          else {
+            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
+            r = chunk_plus_offset(p, nb);
+            set_size_and_pinuse_of_free_chunk(r, rsize);
+            replace_dv(gm, r, rsize);
+          }
+          mem = chunk2mem(p);
+          check_malloced_chunk(gm, mem, nb);
+          goto postaction;
+        }
+
+        else if (gm->treemap != 0 && (mem = tmalloc_small(gm, nb)) != 0) {
+          check_malloced_chunk(gm, mem, nb);
+          goto postaction;
+        }
+      }
+    }
+    else if (bytes >= MAX_REQUEST)
+      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
+    else {
+      nb = pad_request(bytes);
+      if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
+        check_malloced_chunk(gm, mem, nb);
+        goto postaction;
+      }
+    }
+
+    if (nb <= gm->dvsize) {
+      size_t rsize = gm->dvsize - nb;
+      mchunkptr p = gm->dv;
+      if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
+        mchunkptr r = gm->dv = chunk_plus_offset(p, nb);
+        gm->dvsize = rsize;
+        set_size_and_pinuse_of_free_chunk(r, rsize);
+        set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
+      }
+      else { /* exhaust dv */
+        size_t dvs = gm->dvsize;
+        gm->dvsize = 0;
+        gm->dv = 0;
+        set_inuse_and_pinuse(gm, p, dvs);
+      }
+      mem = chunk2mem(p);
+      check_malloced_chunk(gm, mem, nb);
+      goto postaction;
+    }
+
+    else if (nb < gm->topsize) { /* Split top */
+      size_t rsize = gm->topsize -= nb;
+      mchunkptr p = gm->top;
+      mchunkptr r = gm->top = chunk_plus_offset(p, nb);
+      r->head = rsize | PINUSE_BIT;
+      set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
+      mem = chunk2mem(p);
+      check_top_chunk(gm, gm->top);
+      check_malloced_chunk(gm, mem, nb);
+      goto postaction;
+    }
+
+    mem = sys_alloc(gm, nb);
+
+  postaction:
+    POSTACTION(gm);
+    return mem;
+  }
+
+  return 0;
+}
+
+void dlfree(void* mem) {
+  /*
+     Consolidate freed chunks with preceeding or succeeding bordering
+     free chunks, if they exist, and then place in a bin.  Intermixed
+     with special cases for top, dv, mmapped chunks, and usage errors.
+  */
+
+  if (mem != 0) {
+    mchunkptr p  = mem2chunk(mem);
+#if FOOTERS
+    mstate fm = get_mstate_for(p);
+    if (!ok_magic(fm)) {
+      USAGE_ERROR_ACTION(fm, p);
+      return;
+    }
+#else /* FOOTERS */
+#define fm gm
+#endif /* FOOTERS */
+    if (!PREACTION(fm)) {
+      check_inuse_chunk(fm, p);
+      if (RTCHECK(ok_address(fm, p) && ok_cinuse(p))) {
+        size_t psize = chunksize(p);
+        mchunkptr next = chunk_plus_offset(p, psize);
+        if (!pinuse(p)) {
+          size_t prevsize = p->prev_foot;
+          if ((prevsize & IS_MMAPPED_BIT) != 0) {
+            prevsize &= ~IS_MMAPPED_BIT;
+            psize += prevsize + MMAP_FOOT_PAD;
+            if (CALL_MUNMAP((char*)p - prevsize, psize) == 0)
+              fm->footprint -= psize;
+            goto postaction;
+          }
+          else {
+            mchunkptr prev = chunk_minus_offset(p, prevsize);
+            psize += prevsize;
+            p = prev;
+            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */
+              if (p != fm->dv) {
+                unlink_chunk(fm, p, prevsize);
+              }
+              else if ((next->head & INUSE_BITS) == INUSE_BITS) {
+                fm->dvsize = psize;
+                set_free_with_pinuse(p, psize, next);
+                goto postaction;
+              }
+            }
+            else
+              goto erroraction;
+          }
+        }
+
+        if (RTCHECK(ok_next(p, next) && ok_pinuse(next))) {
+          if (!cinuse(next)) {  /* consolidate forward */
+            if (next == fm->top) {
+              size_t tsize = fm->topsize += psize;
+              fm->top = p;
+              p->head = tsize | PINUSE_BIT;
+              if (p == fm->dv) {
+                fm->dv = 0;
+                fm->dvsize = 0;
+              }
+              if (should_trim(fm, tsize))
+                sys_trim(fm, 0);
+              goto postaction;
+            }
+            else if (next == fm->dv) {
+              size_t dsize = fm->dvsize += psize;
+              fm->dv = p;
+              set_size_and_pinuse_of_free_chunk(p, dsize);
+              goto postaction;
+            }
+            else {
+              size_t nsize = chunksize(next);
+              psize += nsize;
+              unlink_chunk(fm, next, nsize);
+              set_size_and_pinuse_of_free_chunk(p, psize);
+              if (p == fm->dv) {
+                fm->dvsize = psize;
+                goto postaction;
+              }
+            }
+          }
+          else
+            set_free_with_pinuse(p, psize, next);
+          insert_chunk(fm, p, psize);
+          check_free_chunk(fm, p);
+          goto postaction;
+        }
+      }
+    erroraction:
+      USAGE_ERROR_ACTION(fm, p);
+    postaction:
+      POSTACTION(fm);
+    }
+  }
+#if !FOOTERS
+#undef fm
+#endif /* FOOTERS */
+}
+
+void* dlcalloc(size_t n_elements, size_t elem_size) {
+  void* mem;
+  size_t req = 0;
+  if (n_elements != 0) {
+    req = n_elements * elem_size;
+    if (((n_elements | elem_size) & ~(size_t)0xffff) &&
+        (req / n_elements != elem_size))
+      req = MAX_SIZE_T; /* force downstream failure on overflow */
+  }
+  mem = dlmalloc(req);
+  if (mem != 0 && calloc_must_clear(mem2chunk(mem)))
+    memset(mem, 0, req);
+  return mem;
+}
+
+void* dlrealloc(void* oldmem, size_t bytes) {
+  if (oldmem == 0)
+    return dlmalloc(bytes);
+#ifdef REALLOC_ZERO_BYTES_FREES
+  if (bytes == 0) {
+    dlfree(oldmem);
+    return 0;
+  }
+#endif /* REALLOC_ZERO_BYTES_FREES */
+  else {
+#if ! FOOTERS
+    mstate m = gm;
+#else /* FOOTERS */
+    mstate m = get_mstate_for(mem2chunk(oldmem));
+    if (!ok_magic(m)) {
+      USAGE_ERROR_ACTION(m, oldmem);
+      return 0;
+    }
+#endif /* FOOTERS */
+    return internal_realloc(m, oldmem, bytes);
+  }
+}
+
+void* dlmemalign(size_t alignment, size_t bytes) {
+  return internal_memalign(gm, alignment, bytes);
+}
+
+void** dlindependent_calloc(size_t n_elements, size_t elem_size,
+                                 void* chunks[]) {
+  size_t sz = elem_size; /* serves as 1-element array */
+  return ialloc(gm, n_elements, &sz, 3, chunks);
+}
+
+void** dlindependent_comalloc(size_t n_elements, size_t sizes[],
+                                   void* chunks[]) {
+  return ialloc(gm, n_elements, sizes, 0, chunks);
+}
+
+void* dlvalloc(size_t bytes) {
+  size_t pagesz;
+  init_mparams();
+  pagesz = mparams.page_size;
+  return dlmemalign(pagesz, bytes);
+}
+
+void* dlpvalloc(size_t bytes) {
+  size_t pagesz;
+  init_mparams();
+  pagesz = mparams.page_size;
+  return dlmemalign(pagesz, (bytes + pagesz - SIZE_T_ONE) & ~(pagesz - SIZE_T_ONE));
+}
+
+int dlmalloc_trim(size_t pad) {
+  int result = 0;
+  if (!PREACTION(gm)) {
+    result = sys_trim(gm, pad);
+    POSTACTION(gm);
+  }
+  return result;
+}
+
+size_t dlmalloc_footprint(void) {
+  return gm->footprint;
+}
+
+size_t dlmalloc_max_footprint(void) {
+  return gm->max_footprint;
+}
+
+#if !NO_MALLINFO
+struct mallinfo dlmallinfo(void) {
+  return internal_mallinfo(gm);
+}
+#endif /* NO_MALLINFO */
+
+void dlmalloc_stats() {
+  internal_malloc_stats(gm);
+}
+
+size_t dlmalloc_usable_size(void* mem) {
+  if (mem != 0) {
+    mchunkptr p = mem2chunk(mem);
+    if (cinuse(p))
+      return chunksize(p) - overhead_for(p);
+  }
+  return 0;
+}
+
+int dlmallopt(int param_number, int value) {
+  return change_mparam(param_number, value);
+}
+
+#endif /* !ONLY_MSPACES */
+
+/* ----------------------------- user mspaces ---------------------------- */
+
+#if MSPACES
+
+static mstate init_user_mstate(char* tbase, size_t tsize) {
+  size_t msize = pad_request(sizeof(struct malloc_state));
+  mchunkptr mn;
+  mchunkptr msp = align_as_chunk(tbase);
+  mstate m = (mstate)(chunk2mem(msp));
+  memset(m, 0, msize);
+  INITIAL_LOCK(&m->mutex);
+  msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
+  m->seg.base = m->least_addr = tbase;
+  m->seg.size = m->footprint = m->max_footprint = tsize;
+  m->magic = mparams.magic;
+  m->mflags = mparams.default_mflags;
+  disable_contiguous(m);
+  init_bins(m);
+  mn = next_chunk(mem2chunk(m));
+  init_top(m, mn, (size_t)((tbase + tsize) - (char*)mn) - TOP_FOOT_SIZE);
+  check_top_chunk(m, m->top);
+  return m;
+}
+
+mspace create_mspace(size_t capacity, int locked) {
+  mstate m = 0;
+  size_t msize = pad_request(sizeof(struct malloc_state));
+  init_mparams(); /* Ensure pagesize etc initialized */
+
+  if (capacity < (size_t) -(msize + TOP_FOOT_SIZE + mparams.page_size)) {
+    size_t rs = ((capacity == 0)? mparams.granularity :
+                 (capacity + TOP_FOOT_SIZE + msize));
+    size_t tsize = granularity_align(rs);
+    char* tbase = (char*)(CALL_MMAP(tsize));
+    if (tbase != CMFAIL) {
+      m = init_user_mstate(tbase, tsize);
+      set_segment_flags(&m->seg, IS_MMAPPED_BIT);
+      set_lock(m, locked);
+    }
+  }
+  return (mspace)m;
+}
+
+mspace create_mspace_with_base(void* base, size_t capacity, int locked) {
+  mstate m = 0;
+  size_t msize = pad_request(sizeof(struct malloc_state));
+  init_mparams(); /* Ensure pagesize etc initialized */
+
+  if (capacity > msize + TOP_FOOT_SIZE &&
+      capacity < (size_t) -(msize + TOP_FOOT_SIZE + mparams.page_size)) {
+    m = init_user_mstate((char*)base, capacity);
+    set_segment_flags(&m->seg, EXTERN_BIT);
+    set_lock(m, locked);
+  }
+  return (mspace)m;
+}
+
+size_t destroy_mspace(mspace msp) {
+  size_t freed = 0;
+  mstate ms = (mstate)msp;
+  if (ok_magic(ms)) {
+    msegmentptr sp = &ms->seg;
+    while (sp != 0) {
+      char* base = sp->base;
+      size_t size = sp->size;
+      flag_t flag = get_segment_flags(sp);
+      sp = sp->next;
+      if ((flag & IS_MMAPPED_BIT) && !(flag & EXTERN_BIT) &&
+          CALL_MUNMAP(base, size) == 0)
+        freed += size;
+    }
+  }
+  else {
+    USAGE_ERROR_ACTION(ms,ms);
+  }
+  return freed;
+}
+
+/*
+  mspace versions of routines are near-clones of the global
+  versions. This is not so nice but better than the alternatives.
+*/
+
+
+void* mspace_malloc(mspace msp, size_t bytes) {
+  mstate ms = (mstate)msp;
+  if (!ok_magic(ms)) {
+    USAGE_ERROR_ACTION(ms,ms);
+    return 0;
+  }
+  if (!PREACTION(ms)) {
+    void* mem;
+    size_t nb;
+    if (bytes <= MAX_SMALL_REQUEST) {
+      bindex_t idx;
+      binmap_t smallbits;
+      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
+      idx = small_index(nb);
+      smallbits = ms->smallmap >> idx;
+
+      if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
+        mchunkptr b, p;
+        idx += ~smallbits & 1;       /* Uses next bin if idx empty */
+        b = smallbin_at(ms, idx);
+        p = b->fd;
+        assert(chunksize(p) == small_index2size(idx));
+        unlink_first_small_chunk(ms, b, p, idx);
+        set_inuse_and_pinuse(ms, p, small_index2size(idx));
+        mem = chunk2mem(p);
+        check_malloced_chunk(ms, mem, nb);
+        goto postaction;
+      }
+
+      else if (nb > ms->dvsize) {
+        if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
+          mchunkptr b, p, r;
+          size_t rsize;
+          bindex_t i;
+          binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
+          binmap_t leastbit = least_bit(leftbits);
+          compute_bit2idx(leastbit, i);
+          b = smallbin_at(ms, i);
+          p = b->fd;
+          assert(chunksize(p) == small_index2size(i));
+          unlink_first_small_chunk(ms, b, p, i);
+          rsize = small_index2size(i) - nb;
+          /* Fit here cannot be remainderless if 4byte sizes */
+          if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE)
+            set_inuse_and_pinuse(ms, p, small_index2size(i));
+          else {
+            set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
+            r = chunk_plus_offset(p, nb);
+            set_size_and_pinuse_of_free_chunk(r, rsize);
+            replace_dv(ms, r, rsize);
+          }
+          mem = chunk2mem(p);
+          check_malloced_chunk(ms, mem, nb);
+          goto postaction;
+        }
+
+        else if (ms->treemap != 0 && (mem = tmalloc_small(ms, nb)) != 0) {
+          check_malloced_chunk(ms, mem, nb);
+          goto postaction;
+        }
+      }
+    }
+    else if (bytes >= MAX_REQUEST)
+      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
+    else {
+      nb = pad_request(bytes);
+      if (ms->treemap != 0 && (mem = tmalloc_large(ms, nb)) != 0) {
+        check_malloced_chunk(ms, mem, nb);
+        goto postaction;
+      }
+    }
+
+    if (nb <= ms->dvsize) {
+      size_t rsize = ms->dvsize - nb;
+      mchunkptr p = ms->dv;
+      if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
+        mchunkptr r = ms->dv = chunk_plus_offset(p, nb);
+        ms->dvsize = rsize;
+        set_size_and_pinuse_of_free_chunk(r, rsize);
+        set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
+      }
+      else { /* exhaust dv */
+        size_t dvs = ms->dvsize;
+        ms->dvsize = 0;
+        ms->dv = 0;
+        set_inuse_and_pinuse(ms, p, dvs);
+      }
+      mem = chunk2mem(p);
+      check_malloced_chunk(ms, mem, nb);
+      goto postaction;
+    }
+
+    else if (nb < ms->topsize) { /* Split top */
+      size_t rsize = ms->topsize -= nb;
+      mchunkptr p = ms->top;
+      mchunkptr r = ms->top = chunk_plus_offset(p, nb);
+      r->head = rsize | PINUSE_BIT;
+      set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
+      mem = chunk2mem(p);
+      check_top_chunk(ms, ms->top);
+      check_malloced_chunk(ms, mem, nb);
+      goto postaction;
+    }
+
+    mem = sys_alloc(ms, nb);
+
+  postaction:
+    POSTACTION(ms);
+    return mem;
+  }
+
+  return 0;
+}
+
+void mspace_free(mspace msp, void* mem) {
+  if (mem != 0) {
+    mchunkptr p  = mem2chunk(mem);
+#if FOOTERS
+    mstate fm = get_mstate_for(p);
+#else /* FOOTERS */
+    mstate fm = (mstate)msp;
+#endif /* FOOTERS */
+    if (!ok_magic(fm)) {
+      USAGE_ERROR_ACTION(fm, p);
+      return;
+    }
+    if (!PREACTION(fm)) {
+      check_inuse_chunk(fm, p);
+      if (RTCHECK(ok_address(fm, p) && ok_cinuse(p))) {
+        size_t psize = chunksize(p);
+        mchunkptr next = chunk_plus_offset(p, psize);
+        if (!pinuse(p)) {
+          size_t prevsize = p->prev_foot;
+          if ((prevsize & IS_MMAPPED_BIT) != 0) {
+            prevsize &= ~IS_MMAPPED_BIT;
+            psize += prevsize + MMAP_FOOT_PAD;
+            if (CALL_MUNMAP((char*)p - prevsize, psize) == 0)
+              fm->footprint -= psize;
+            goto postaction;
+          }
+          else {
+            mchunkptr prev = chunk_minus_offset(p, prevsize);
+            psize += prevsize;
+            p = prev;
+            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */
+              if (p != fm->dv) {
+                unlink_chunk(fm, p, prevsize);
+              }
+              else if ((next->head & INUSE_BITS) == INUSE_BITS) {
+                fm->dvsize = psize;
+                set_free_with_pinuse(p, psize, next);
+                goto postaction;
+              }
+            }
+            else
+              goto erroraction;
+          }
+        }
+
+        if (RTCHECK(ok_next(p, next) && ok_pinuse(next))) {
+          if (!cinuse(next)) {  /* consolidate forward */
+            if (next == fm->top) {
+              size_t tsize = fm->topsize += psize;
+              fm->top = p;
+              p->head = tsize | PINUSE_BIT;
+              if (p == fm->dv) {
+                fm->dv = 0;
+                fm->dvsize = 0;
+              }
+              if (should_trim(fm, tsize))
+                sys_trim(fm, 0);
+              goto postaction;
+            }
+            else if (next == fm->dv) {
+              size_t dsize = fm->dvsize += psize;
+              fm->dv = p;
+              set_size_and_pinuse_of_free_chunk(p, dsize);
+              goto postaction;
+            }
+            else {
+              size_t nsize = chunksize(next);
+              psize += nsize;
+              unlink_chunk(fm, next, nsize);
+              set_size_and_pinuse_of_free_chunk(p, psize);
+              if (p == fm->dv) {
+                fm->dvsize = psize;
+                goto postaction;
+              }
+            }
+          }
+          else
+            set_free_with_pinuse(p, psize, next);
+          insert_chunk(fm, p, psize);
+          check_free_chunk(fm, p);
+          goto postaction;
+        }
+      }
+    erroraction:
+      USAGE_ERROR_ACTION(fm, p);
+    postaction:
+      POSTACTION(fm);
+    }
+  }
+}
+
+void* mspace_calloc(mspace msp, size_t n_elements, size_t elem_size) {
+  void* mem;
+  size_t req = 0;
+  mstate ms = (mstate)msp;
+  if (!ok_magic(ms)) {
+    USAGE_ERROR_ACTION(ms,ms);
+    return 0;
+  }
+  if (n_elements != 0) {
+    req = n_elements * elem_size;
+    if (((n_elements | elem_size) & ~(size_t)0xffff) &&
+        (req / n_elements != elem_size))
+      req = MAX_SIZE_T; /* force downstream failure on overflow */
+  }
+  mem = internal_malloc(ms, req);
+  if (mem != 0 && calloc_must_clear(mem2chunk(mem)))
+    memset(mem, 0, req);
+  return mem;
+}
+
+void* mspace_realloc(mspace msp, void* oldmem, size_t bytes) {
+  if (oldmem == 0)
+    return mspace_malloc(msp, bytes);
+#ifdef REALLOC_ZERO_BYTES_FREES
+  if (bytes == 0) {
+    mspace_free(msp, oldmem);
+    return 0;
+  }
+#endif /* REALLOC_ZERO_BYTES_FREES */
+  else {
+#if FOOTERS
+    mchunkptr p  = mem2chunk(oldmem);
+    mstate ms = get_mstate_for(p);
+#else /* FOOTERS */
+    mstate ms = (mstate)msp;
+#endif /* FOOTERS */
+    if (!ok_magic(ms)) {
+      USAGE_ERROR_ACTION(ms,ms);
+      return 0;
+    }
+    return internal_realloc(ms, oldmem, bytes);
+  }
+}
+
+void* mspace_memalign(mspace msp, size_t alignment, size_t bytes) {
+  mstate ms = (mstate)msp;
+  if (!ok_magic(ms)) {
+    USAGE_ERROR_ACTION(ms,ms);
+    return 0;
+  }
+  return internal_memalign(ms, alignment, bytes);
+}
+
+void** mspace_independent_calloc(mspace msp, size_t n_elements,
+                                 size_t elem_size, void* chunks[]) {
+  size_t sz = elem_size; /* serves as 1-element array */
+  mstate ms = (mstate)msp;
+  if (!ok_magic(ms)) {
+    USAGE_ERROR_ACTION(ms,ms);
+    return 0;
+  }
+  return ialloc(ms, n_elements, &sz, 3, chunks);
+}
+
+void** mspace_independent_comalloc(mspace msp, size_t n_elements,
+                                   size_t sizes[], void* chunks[]) {
+  mstate ms = (mstate)msp;
+  if (!ok_magic(ms)) {
+    USAGE_ERROR_ACTION(ms,ms);
+    return 0;
+  }
+  return ialloc(ms, n_elements, sizes, 0, chunks);
+}
+
+int mspace_trim(mspace msp, size_t pad) {
+  int result = 0;
+  mstate ms = (mstate)msp;
+  if (ok_magic(ms)) {
+    if (!PREACTION(ms)) {
+      result = sys_trim(ms, pad);
+      POSTACTION(ms);
+    }
+  }
+  else {
+    USAGE_ERROR_ACTION(ms,ms);
+  }
+  return result;
+}
+
+void mspace_malloc_stats(mspace msp) {
+  mstate ms = (mstate)msp;
+  if (ok_magic(ms)) {
+    internal_malloc_stats(ms);
+  }
+  else {
+    USAGE_ERROR_ACTION(ms,ms);
+  }
+}
+
+size_t mspace_footprint(mspace msp) {
+  size_t result;
+  mstate ms = (mstate)msp;
+  if (ok_magic(ms)) {
+    result = ms->footprint;
+  }
+  USAGE_ERROR_ACTION(ms,ms);
+  return result;
+}
+
+
+size_t mspace_max_footprint(mspace msp) {
+  size_t result;
+  mstate ms = (mstate)msp;
+  if (ok_magic(ms)) {
+    result = ms->max_footprint;
+  }
+  USAGE_ERROR_ACTION(ms,ms);
+  return result;
+}
+
+
+#if !NO_MALLINFO
+struct mallinfo mspace_mallinfo(mspace msp) {
+  mstate ms = (mstate)msp;
+  if (!ok_magic(ms)) {
+    USAGE_ERROR_ACTION(ms,ms);
+  }
+  return internal_mallinfo(ms);
+}
+#endif /* NO_MALLINFO */
+
+int mspace_mallopt(int param_number, int value) {
+  return change_mparam(param_number, value);
+}
+
+#endif /* MSPACES */
+
+/* -------------------- Alternative MORECORE functions ------------------- */
+
+/*
+  Guidelines for creating a custom version of MORECORE:
+
+  * For best performance, MORECORE should allocate in multiples of pagesize.
+  * MORECORE may allocate more memory than requested. (Or even less,
+      but this will usually result in a malloc failure.)
+  * MORECORE must not allocate memory when given argument zero, but
+      instead return one past the end address of memory from previous
+      nonzero call.
+  * For best performance, consecutive calls to MORECORE with positive
+      arguments should return increasing addresses, indicating that
+      space has been contiguously extended.
+  * Even though consecutive calls to MORECORE need not return contiguous
+      addresses, it must be OK for malloc'ed chunks to span multiple
+      regions in those cases where they do happen to be contiguous.
+  * MORECORE need not handle negative arguments -- it may instead
+      just return MFAIL when given negative arguments.
+      Negative arguments are always multiples of pagesize. MORECORE
+      must not misinterpret negative args as large positive unsigned
+      args. You can suppress all such calls from even occurring by defining
+      MORECORE_CANNOT_TRIM,
+
+  As an example alternative MORECORE, here is a custom allocator
+  kindly contributed for pre-OSX macOS.  It uses virtually but not
+  necessarily physically contiguous non-paged memory (locked in,
+  present and won't get swapped out).  You can use it by uncommenting
+  this section, adding some #includes, and setting up the appropriate
+  defines above:
+
+      #define MORECORE osMoreCore
+
+  There is also a shutdown routine that should somehow be called for
+  cleanup upon program exit.
+
+  #define MAX_POOL_ENTRIES 100
+  #define MINIMUM_MORECORE_SIZE  (64 * 1024U)
+  static int next_os_pool;
+  void *our_os_pools[MAX_POOL_ENTRIES];
+
+  void *osMoreCore(int size)
+  {
+    void *ptr = 0;
+    static void *sbrk_top = 0;
+
+    if (size > 0)
+    {
+      if (size < MINIMUM_MORECORE_SIZE)
+         size = MINIMUM_MORECORE_SIZE;
+      if (CurrentExecutionLevel() == kTaskLevel)
+         ptr = PoolAllocateResident(size + RM_PAGE_SIZE, 0);
+      if (ptr == 0)
+      {
+        return (void *) MFAIL;
+      }
+      // save ptrs so they can be freed during cleanup
+      our_os_pools[next_os_pool] = ptr;
+      next_os_pool++;
+      ptr = (void *) ((((size_t) ptr) + RM_PAGE_MASK) & ~RM_PAGE_MASK);
+      sbrk_top = (char *) ptr + size;
+      return ptr;
+    }
+    else if (size < 0)
+    {
+      // we don't currently support shrink behavior
+      return (void *) MFAIL;
+    }
+    else
+    {
+      return sbrk_top;
+    }
+  }
+
+  // cleanup any allocated memory pools
+  // called as last thing before shutting down driver
+
+  void osCleanupMem(void)
+  {
+    void **ptr;
+
+    for (ptr = our_os_pools; ptr < &our_os_pools[MAX_POOL_ENTRIES]; ptr++)
+      if (*ptr)
+      {
+         PoolDeallocate(*ptr);
+         *ptr = 0;
+      }
+  }
+
+*/
+
+
+/* -----------------------------------------------------------------------
+History:
+    V2.8.3 Thu Sep 22 11:16:32 2005  Doug Lea  (dl at gee)
+      * Add max_footprint functions
+      * Ensure all appropriate literals are size_t
+      * Fix conditional compilation problem for some #define settings
+      * Avoid concatenating segments with the one provided
+        in create_mspace_with_base
+      * Rename some variables to avoid compiler shadowing warnings
+      * Use explicit lock initialization.
+      * Better handling of sbrk interference.
+      * Simplify and fix segment insertion, trimming and mspace_destroy
+      * Reinstate REALLOC_ZERO_BYTES_FREES option from 2.7.x
+      * Thanks especially to Dennis Flanagan for help on these.
+
+    V2.8.2 Sun Jun 12 16:01:10 2005  Doug Lea  (dl at gee)
+      * Fix memalign brace error.
+
+    V2.8.1 Wed Jun  8 16:11:46 2005  Doug Lea  (dl at gee)
+      * Fix improper #endif nesting in C++
+      * Add explicit casts needed for C++
+
+    V2.8.0 Mon May 30 14:09:02 2005  Doug Lea  (dl at gee)
+      * Use trees for large bins
+      * Support mspaces
+      * Use segments to unify sbrk-based and mmap-based system allocation,
+        removing need for emulation on most platforms without sbrk.
+      * Default safety checks
+      * Optional footer checks. Thanks to William Robertson for the idea.
+      * Internal code refactoring
+      * Incorporate suggestions and platform-specific changes.
+        Thanks to Dennis Flanagan, Colin Plumb, Niall Douglas,
+        Aaron Bachmann,  Emery Berger, and others.
+      * Speed up non-fastbin processing enough to remove fastbins.
+      * Remove useless cfree() to avoid conflicts with other apps.
+      * Remove internal memcpy, memset. Compilers handle builtins better.
+      * Remove some options that no one ever used and rename others.
+
+    V2.7.2 Sat Aug 17 09:07:30 2002  Doug Lea  (dl at gee)
+      * Fix malloc_state bitmap array misdeclaration
+
+    V2.7.1 Thu Jul 25 10:58:03 2002  Doug Lea  (dl at gee)
+      * Allow tuning of FIRST_SORTED_BIN_SIZE
+      * Use PTR_UINT as type for all ptr->int casts. Thanks to John Belmonte.
+      * Better detection and support for non-contiguousness of MORECORE.
+        Thanks to Andreas Mueller, Conal Walsh, and Wolfram Gloger
+      * Bypass most of malloc if no frees. Thanks To Emery Berger.
+      * Fix freeing of old top non-contiguous chunk im sysmalloc.
+      * Raised default trim and map thresholds to 256K.
+      * Fix mmap-related #defines. Thanks to Lubos Lunak.
+      * Fix copy macros; added LACKS_FCNTL_H. Thanks to Neal Walfield.
+      * Branch-free bin calculation
+      * Default trim and mmap thresholds now 256K.
+
+    V2.7.0 Sun Mar 11 14:14:06 2001  Doug Lea  (dl at gee)
+      * Introduce independent_comalloc and independent_calloc.
+        Thanks to Michael Pachos for motivation and help.
+      * Make optional .h file available
+      * Allow > 2GB requests on 32bit systems.
+      * new WIN32 sbrk, mmap, munmap, lock code from <Walter@GeNeSys-e.de>.
+        Thanks also to Andreas Mueller <a.mueller at paradatec.de>,
+        and Anonymous.
+      * Allow override of MALLOC_ALIGNMENT (Thanks to Ruud Waij for
+        helping test this.)
+      * memalign: check alignment arg
+      * realloc: don't try to shift chunks backwards, since this
+        leads to  more fragmentation in some programs and doesn't
+        seem to help in any others.
+      * Collect all cases in malloc requiring system memory into sysmalloc
+      * Use mmap as backup to sbrk
+      * Place all internal state in malloc_state
+      * Introduce fastbins (although similar to 2.5.1)
+      * Many minor tunings and cosmetic improvements
+      * Introduce USE_PUBLIC_MALLOC_WRAPPERS, USE_MALLOC_LOCK
+      * Introduce MALLOC_FAILURE_ACTION, MORECORE_CONTIGUOUS
+        Thanks to Tony E. Bennett <tbennett@nvidia.com> and others.
+      * Include errno.h to support default failure action.
+
+    V2.6.6 Sun Dec  5 07:42:19 1999  Doug Lea  (dl at gee)
+      * return null for negative arguments
+      * Added Several WIN32 cleanups from Martin C. Fong <mcfong at yahoo.com>
+         * Add 'LACKS_SYS_PARAM_H' for those systems without 'sys/param.h'
+          (e.g. WIN32 platforms)
+         * Cleanup header file inclusion for WIN32 platforms
+         * Cleanup code to avoid Microsoft Visual C++ compiler complaints
+         * Add 'USE_DL_PREFIX' to quickly allow co-existence with existing
+           memory allocation routines
+         * Set 'malloc_getpagesize' for WIN32 platforms (needs more work)
+         * Use 'assert' rather than 'ASSERT' in WIN32 code to conform to
+           usage of 'assert' in non-WIN32 code
+         * Improve WIN32 'sbrk()' emulation's 'findRegion()' routine to
+           avoid infinite loop
+      * Always call 'fREe()' rather than 'free()'
+
+    V2.6.5 Wed Jun 17 15:57:31 1998  Doug Lea  (dl at gee)
+      * Fixed ordering problem with boundary-stamping
+
+    V2.6.3 Sun May 19 08:17:58 1996  Doug Lea  (dl at gee)
+      * Added pvalloc, as recommended by H.J. Liu
+      * Added 64bit pointer support mainly from Wolfram Gloger
+      * Added anonymously donated WIN32 sbrk emulation
+      * Malloc, calloc, getpagesize: add optimizations from Raymond Nijssen
+      * malloc_extend_top: fix mask error that caused wastage after
+        foreign sbrks
+      * Add linux mremap support code from HJ Liu
+
+    V2.6.2 Tue Dec  5 06:52:55 1995  Doug Lea  (dl at gee)
+      * Integrated most documentation with the code.
+      * Add support for mmap, with help from
+        Wolfram Gloger (Gloger@lrz.uni-muenchen.de).
+      * Use last_remainder in more cases.
+      * Pack bins using idea from  colin@nyx10.cs.du.edu
+      * Use ordered bins instead of best-fit threshhold
+      * Eliminate block-local decls to simplify tracing and debugging.
+      * Support another case of realloc via move into top
+      * Fix error occuring when initial sbrk_base not word-aligned.
+      * Rely on page size for units instead of SBRK_UNIT to
+        avoid surprises about sbrk alignment conventions.
+      * Add mallinfo, mallopt. Thanks to Raymond Nijssen
+        (raymond@es.ele.tue.nl) for the suggestion.
+      * Add `pad' argument to malloc_trim and top_pad mallopt parameter.
+      * More precautions for cases where other routines call sbrk,
+        courtesy of Wolfram Gloger (Gloger@lrz.uni-muenchen.de).
+      * Added macros etc., allowing use in linux libc from
+        H.J. Lu (hjl@gnu.ai.mit.edu)
+      * Inverted this history list
+
+    V2.6.1 Sat Dec  2 14:10:57 1995  Doug Lea  (dl at gee)
+      * Re-tuned and fixed to behave more nicely with V2.6.0 changes.
+      * Removed all preallocation code since under current scheme
+        the work required to undo bad preallocations exceeds
+        the work saved in good cases for most test programs.
+      * No longer use return list or unconsolidated bins since
+        no scheme using them consistently outperforms those that don't
+        given above changes.
+      * Use best fit for very large chunks to prevent some worst-cases.
+      * Added some support for debugging
+
+    V2.6.0 Sat Nov  4 07:05:23 1995  Doug Lea  (dl at gee)
+      * Removed footers when chunks are in use. Thanks to
+        Paul Wilson (wilson@cs.texas.edu) for the suggestion.
+
+    V2.5.4 Wed Nov  1 07:54:51 1995  Doug Lea  (dl at gee)
+      * Added malloc_trim, with help from Wolfram Gloger
+        (wmglo@Dent.MED.Uni-Muenchen.DE).
+
+    V2.5.3 Tue Apr 26 10:16:01 1994  Doug Lea  (dl at g)
+
+    V2.5.2 Tue Apr  5 16:20:40 1994  Doug Lea  (dl at g)
+      * realloc: try to expand in both directions
+      * malloc: swap order of clean-bin strategy;
+      * realloc: only conditionally expand backwards
+      * Try not to scavenge used bins
+      * Use bin counts as a guide to preallocation
+      * Occasionally bin return list chunks in first scan
+      * Add a few optimizations from colin@nyx10.cs.du.edu
+
+    V2.5.1 Sat Aug 14 15:40:43 1993  Doug Lea  (dl at g)
+      * faster bin computation & slightly different binning
+      * merged all consolidations to one part of malloc proper
+         (eliminating old malloc_find_space & malloc_clean_bin)
+      * Scan 2 returns chunks (not just 1)
+      * Propagate failure in realloc if malloc returns 0
+      * Add stuff to allow compilation on non-ANSI compilers
+          from kpv@research.att.com
+
+    V2.5 Sat Aug  7 07:41:59 1993  Doug Lea  (dl at g.oswego.edu)
+      * removed potential for odd address access in prev_chunk
+      * removed dependency on getpagesize.h
+      * misc cosmetics and a bit more internal documentation
+      * anticosmetics: mangled names in macros to evade debugger strangeness
+      * tested on sparc, hp-700, dec-mips, rs6000
+          with gcc & native cc (hp, dec only) allowing
+          Detlefs & Zorn comparison study (in SIGPLAN Notices.)
+
+    Trial version Fri Aug 28 13:14:29 1992  Doug Lea  (dl at g.oswego.edu)
+      * Based loosely on libg++-1.2X malloc. (It retains some of the overall
+         structure of old version,  but most details differ.)
+ 
+*/
Index: libffi/src/powerpc/ffi.c
===================================================================
--- libffi/src/powerpc/ffi.c	(revision 122231)
+++ libffi/src/powerpc/ffi.c	(working copy)
@@ -1,5 +1,6 @@
 /* -----------------------------------------------------------------------
    ffi.c - Copyright (c) 1998 Geoffrey Keating
+   Copyright (C) 2007 Free Software Foundation, Inc
 
    PowerPC Foreign Function Interface
 
@@ -834,27 +835,24 @@
 #define MIN_CACHE_LINE_SIZE 8
 
 static void
-flush_icache (char *addr1, int size)
+flush_icache (char *wraddr, char *xaddr, int size)
 {
   int i;
-  char * addr;
   for (i = 0; i < size; i += MIN_CACHE_LINE_SIZE)
-    {
-      addr = addr1 + i;
-      __asm__ volatile ("icbi 0,%0;" "dcbf 0,%0;"
-			: : "r" (addr) : "memory");
-    }
-  addr = addr1 + size - 1;
-  __asm__ volatile ("icbi 0,%0;" "dcbf 0,%0;" "sync;" "isync;"
-		    : : "r"(addr) : "memory");
+    __asm__ volatile ("icbi 0,%0;" "dcbf 0,%1;"
+		      : : "r" (xaddr + i), "r" (wraddr + i) : "memory");
+  __asm__ volatile ("icbi 0,%0;" "dcbf 0,%1;" "sync;" "isync;"
+		    : : "r"(xaddr + size - 1), "r"(wraddr + size - 1)
+		    : "memory");
 }
 #endif
 
 ffi_status
-ffi_prep_closure (ffi_closure *closure,
-		  ffi_cif *cif,
-		  void (*fun) (ffi_cif *, void *, void **, void *),
-		  void *user_data)
+ffi_prep_closure_loc (ffi_closure *closure,
+		      ffi_cif *cif,
+		      void (*fun) (ffi_cif *, void *, void **, void *),
+		      void *user_data,
+		      void *codeloc)
 {
 #ifdef POWERPC64
   void **tramp = (void **) &closure->tramp[0];
@@ -862,7 +860,7 @@
   FFI_ASSERT (cif->abi == FFI_LINUX64);
   /* Copy function address and TOC from ffi_closure_LINUX64.  */
   memcpy (tramp, (char *) ffi_closure_LINUX64, 16);
-  tramp[2] = (void *) closure;
+  tramp[2] = codeloc;
 #else
   unsigned int *tramp;
 
@@ -878,10 +876,10 @@
   tramp[8] = 0x7c0903a6;  /*   mtctr   r0 */
   tramp[9] = 0x4e800420;  /*   bctr */
   *(void **) &tramp[2] = (void *) ffi_closure_SYSV; /* function */
-  *(void **) &tramp[3] = (void *) closure;          /* context */
+  *(void **) &tramp[3] = codeloc;                   /* context */
 
   /* Flush the icache.  */
-  flush_icache (&closure->tramp[0],FFI_TRAMPOLINE_SIZE);
+  flush_icache ((char *)tramp, (char *)codeloc, FFI_TRAMPOLINE_SIZE);
 #endif
 
   closure->cif = cif;
Index: libffi/src/powerpc/ffi_darwin.c
===================================================================
--- libffi/src/powerpc/ffi_darwin.c	(revision 122231)
+++ libffi/src/powerpc/ffi_darwin.c	(working copy)
@@ -477,10 +477,11 @@
 
 */
 ffi_status
-ffi_prep_closure (ffi_closure* closure,
-		  ffi_cif* cif,
-		  void (*fun)(ffi_cif*, void*, void**, void*),
-		  void *user_data)
+ffi_prep_closure_loc (ffi_closure* closure,
+		      ffi_cif* cif,
+		      void (*fun)(ffi_cif*, void*, void**, void*),
+		      void *user_data,
+		      void *codeloc)
 {
   unsigned int *tramp;
   struct ffi_aix_trampoline_struct *tramp_aix;
@@ -502,14 +503,14 @@
       tramp[8] = 0x816b0004;  /*   lwz     r11,4(r11) static chain  */
       tramp[9] = 0x4e800420;  /*   bctr  */
       tramp[2] = (unsigned long) ffi_closure_ASM; /* function  */
-      tramp[3] = (unsigned long) closure; /* context  */
+      tramp[3] = (unsigned long) codeloc; /* context  */
 
       closure->cif = cif;
       closure->fun = fun;
       closure->user_data = user_data;
 
       /* Flush the icache. Only necessary on Darwin.  */
-      flush_range(&closure->tramp[0],FFI_TRAMPOLINE_SIZE);
+      flush_range(codeloc, FFI_TRAMPOLINE_SIZE);
 
       break;
 
@@ -522,7 +523,7 @@
 
       tramp_aix->code_pointer = fd->code_pointer;
       tramp_aix->toc = fd->toc;
-      tramp_aix->static_chain = closure;
+      tramp_aix->static_chain = codeloc;
       closure->cif = cif;
       closure->fun = fun;
       closure->user_data = user_data;
Index: libffi/src/sh64/ffi.c
===================================================================
--- libffi/src/sh64/ffi.c	(revision 122231)
+++ libffi/src/sh64/ffi.c	(working copy)
@@ -1,5 +1,5 @@
 /* -----------------------------------------------------------------------
-   ffi.c - Copyright (c) 2003, 2004, 2006 Kaz Kojima
+   ffi.c - Copyright (c) 2003, 2004, 2006, 2007 Kaz Kojima
    
    SuperH SHmedia Foreign Function Interface 
 
@@ -283,10 +283,11 @@
 extern void __ic_invalidate (void *line);
 
 ffi_status
-ffi_prep_closure (ffi_closure *closure,
-		  ffi_cif *cif,
-		  void (*fun)(ffi_cif*, void*, void**, void*),
-		  void *user_data)
+ffi_prep_closure_loc (ffi_closure *closure,
+		      ffi_cif *cif,
+		      void (*fun)(ffi_cif*, void*, void**, void*),
+		      void *user_data,
+		      void *codeloc)
 {
   unsigned int *tramp;
 
@@ -310,8 +311,8 @@
   tramp[2] = 0xcc000010 | (((UINT32) ffi_closure_SYSV) >> 16) << 10;
   tramp[3] = 0xc8000010 | (((UINT32) ffi_closure_SYSV) & 0xffff) << 10;
   tramp[4] = 0x6bf10600;
-  tramp[5] = 0xcc000010 | (((UINT32) closure) >> 16) << 10;
-  tramp[6] = 0xc8000010 | (((UINT32) closure) & 0xffff) << 10;
+  tramp[5] = 0xcc000010 | (((UINT32) codeloc) >> 16) << 10;
+  tramp[6] = 0xc8000010 | (((UINT32) codeloc) & 0xffff) << 10;
   tramp[7] = 0x4401fff0;
 
   closure->cif = cif;
@@ -319,7 +320,8 @@
   closure->user_data = user_data;
 
   /* Flush the icache.  */
-  asm volatile ("ocbwb %0,0; synco; icbi %0,0; synci" : : "r" (tramp));
+  asm volatile ("ocbwb %0,0; synco; icbi %1,0; synci" : : "r" (tramp),
+		"r"(codeloc));
 
   return FFI_OK;
 }
Index: libffi/src/alpha/ffi.c
===================================================================
--- libffi/src/alpha/ffi.c	(revision 122231)
+++ libffi/src/alpha/ffi.c	(working copy)
@@ -1,5 +1,5 @@
 /* -----------------------------------------------------------------------
-   ffi.c - Copyright (c) 1998, 2001 Red Hat, Inc.
+   ffi.c - Copyright (c) 1998, 2001, 2007 Red Hat, Inc.
    
    Alpha Foreign Function Interface 
 
@@ -169,10 +169,11 @@
 
 
 ffi_status
-ffi_prep_closure (ffi_closure* closure,
-		  ffi_cif* cif,
-		  void (*fun)(ffi_cif*, void*, void**, void*),
-		  void *user_data)
+ffi_prep_closure_loc (ffi_closure* closure,
+		      ffi_cif* cif,
+		      void (*fun)(ffi_cif*, void*, void**, void*),
+		      void *user_data,
+		      void *codeloc)
 {
   unsigned int *tramp;
 

Index: libffi/src/x86/ffi64.c
===================================================================
--- libffi/src/x86/ffi64.c	(revision 122231)
+++ libffi/src/x86/ffi64.c	(working copy)
@@ -1,5 +1,5 @@
 /* -----------------------------------------------------------------------
-   ffi.c - Copyright (c) 2002  Bo Thorsen <bo@suse.de>
+   ffi.c - Copyright (c) 2002, 2007  Bo Thorsen <bo@suse.de>
    
    x86-64 Foreign Function Interface 
 
@@ -433,10 +433,11 @@
 extern void ffi_closure_unix64(void);
 
 ffi_status
-ffi_prep_closure (ffi_closure* closure,
-		  ffi_cif* cif,
-		  void (*fun)(ffi_cif*, void*, void**, void*),
-		  void *user_data)
+ffi_prep_closure_loc (ffi_closure* closure,
+		      ffi_cif* cif,
+		      void (*fun)(ffi_cif*, void*, void**, void*),
+		      void *user_data,
+		      void *codeloc)
 {
   volatile unsigned short *tramp;
 
@@ -445,7 +446,7 @@
   tramp[0] = 0xbb49;		/* mov <code>, %r11	*/
   *(void * volatile *) &tramp[1] = ffi_closure_unix64;
   tramp[5] = 0xba49;		/* mov <data>, %r10	*/
-  *(void * volatile *) &tramp[6] = closure;
+  *(void * volatile *) &tramp[6] = codeloc;
 
   /* Set the carry bit iff the function uses any sse registers.
      This is clc or stc, together with the first byte of the jmp.  */
Index: libffi/src/x86/ffi.c
===================================================================
--- libffi/src/x86/ffi.c	(revision 122231)
+++ libffi/src/x86/ffi.c	(working copy)
@@ -1,5 +1,5 @@
 /* -----------------------------------------------------------------------
-   ffi.c - Copyright (c) 1996, 1998, 1999, 2001  Red Hat, Inc.
+   ffi.c - Copyright (c) 1996, 1998, 1999, 2001, 2007  Red Hat, Inc.
            Copyright (c) 2002  Ranjit Mathew
            Copyright (c) 2002  Bo Thorsen
            Copyright (c) 2002  Roger Sayle
@@ -298,7 +298,7 @@
 ({ unsigned char *__tramp = (unsigned char*)(TRAMP); \
    unsigned int  __fun = (unsigned int)(FUN); \
    unsigned int  __ctx = (unsigned int)(CTX); \
-   unsigned int  __dis = __fun - ((unsigned int) __tramp + FFI_TRAMPOLINE_SIZE); \
+   unsigned int  __dis = __fun - (__ctx + FFI_TRAMPOLINE_SIZE); \
    *(unsigned char*) &__tramp[0] = 0xb8; \
    *(unsigned int*)  &__tramp[1] = __ctx; /* movl __ctx, %eax */ \
    *(unsigned char *)  &__tramp[5] = 0xe9; \
@@ -309,16 +309,17 @@
 /* the cif must already be prep'ed */
 
 ffi_status
-ffi_prep_closure (ffi_closure* closure,
-		  ffi_cif* cif,
-		  void (*fun)(ffi_cif*,void*,void**,void*),
-		  void *user_data)
+ffi_prep_closure_loc (ffi_closure* closure,
+		      ffi_cif* cif,
+		      void (*fun)(ffi_cif*,void*,void**,void*),
+		      void *user_data,
+		      void *codeloc)
 {
   FFI_ASSERT (cif->abi == FFI_SYSV);
 
   FFI_INIT_TRAMPOLINE (&closure->tramp[0], \
 		       &ffi_closure_SYSV,  \
-		       (void*)closure);
+		       codeloc);
     
   closure->cif  = cif;
   closure->user_data = user_data;
@@ -332,10 +333,11 @@
 #if !FFI_NO_RAW_API
 
 ffi_status
-ffi_prep_raw_closure (ffi_raw_closure* closure,
-		      ffi_cif* cif,
-		      void (*fun)(ffi_cif*,void*,ffi_raw*,void*),
-		      void *user_data)
+ffi_prep_raw_closure_loc (ffi_raw_closure* closure,
+			  ffi_cif* cif,
+			  void (*fun)(ffi_cif*,void*,ffi_raw*,void*),
+			  void *user_data,
+			  void *codeloc)
 {
   int i;
 
@@ -354,7 +356,7 @@
   
 
   FFI_INIT_TRAMPOLINE (&closure->tramp[0], &ffi_closure_raw_SYSV,
-		       (void*)closure);
+		       codeloc);
     
   closure->cif  = cif;
   closure->user_data = user_data;
Index: libffi/src/frv/ffi.c
===================================================================
--- libffi/src/frv/ffi.c	(revision 122231)
+++ libffi/src/frv/ffi.c	(working copy)
@@ -1,5 +1,6 @@
 /* -----------------------------------------------------------------------
    ffi.c - Copyright (c) 2004  Anthony Green
+   Copyright (C) 2007  Free Software Foundation, Inc.
    
    FR-V Foreign Function Interface 
 
@@ -243,14 +244,15 @@
 }
 
 ffi_status
-ffi_prep_closure (ffi_closure* closure,
-		  ffi_cif* cif,
-		  void (*fun)(ffi_cif*, void*, void**, void*),
-		  void *user_data)
+ffi_prep_closure_loc (ffi_closure* closure,
+		      ffi_cif* cif,
+		      void (*fun)(ffi_cif*, void*, void**, void*),
+		      void *user_data,
+		      void *codeloc)
 {
   unsigned int *tramp = (unsigned int *) &closure->tramp[0];
   unsigned long fn = (long) ffi_closure_eabi;
-  unsigned long cls = (long) closure;
+  unsigned long cls = (long) codeloc;
 #ifdef __FRV_FDPIC__
   register void *got __asm__("gr15");
 #endif
@@ -259,7 +261,7 @@
   fn = (unsigned long) ffi_closure_eabi;
 
 #ifdef __FRV_FDPIC__
-  tramp[0] = &tramp[2];
+  tramp[0] = &((unsigned int *)codeloc)[2];
   tramp[1] = got;
   tramp[2] = 0x8cfc0000 + (fn  & 0xffff); /* setlos lo(fn), gr6    */
   tramp[3] = 0x8efc0000 + (cls & 0xffff); /* setlos lo(cls), gr7   */
@@ -281,7 +283,8 @@
 
   /* Cache flushing.  */
   for (i = 0; i < FFI_TRAMPOLINE_SIZE; i++)
-    __asm__ volatile ("dcf @(%0,%1)\n\tici @(%0,%1)" :: "r" (tramp), "r" (i));
+    __asm__ volatile ("dcf @(%0,%1)\n\tici @(%2,%1)" :: "r" (tramp), "r" (i),
+		      "r" (codeloc));
 
   return FFI_OK;
 }
Index: libffi/src/s390/ffi.c
===================================================================
--- libffi/src/s390/ffi.c	(revision 122231)
+++ libffi/src/s390/ffi.c	(working copy)
@@ -1,5 +1,5 @@
 /* -----------------------------------------------------------------------
-   ffi.c - Copyright (c) 2000 Software AG
+   ffi.c - Copyright (c) 2000, 2007 Software AG
  
    S390 Foreign Function Interface
  
@@ -709,17 +709,18 @@
 
 /*====================================================================*/
 /*                                                                    */
-/* Name     - ffi_prep_closure.                                       */
+/* Name     - ffi_prep_closure_loc.                                   */
 /*                                                                    */
 /* Function - Prepare a FFI closure.                                  */
 /*                                                                    */
 /*====================================================================*/
  
 ffi_status
-ffi_prep_closure (ffi_closure *closure,
-                  ffi_cif *cif,
-                  void (*fun) (ffi_cif *, void *, void **, void *),
-                  void *user_data)
+ffi_prep_closure_loc (ffi_closure *closure,
+		      ffi_cif *cif,
+		      void (*fun) (ffi_cif *, void *, void **, void *),
+		      void *user_data,
+		      void *codeloc)
 {
   FFI_ASSERT (cif->abi == FFI_SYSV);
 
@@ -728,7 +729,7 @@
   *(short *)&closure->tramp [2] = 0x9801;   /* lm %r0,%r1,6(%r1) */
   *(short *)&closure->tramp [4] = 0x1006;
   *(short *)&closure->tramp [6] = 0x07f1;   /* br %r1 */
-  *(long  *)&closure->tramp [8] = (long)closure;
+  *(long  *)&closure->tramp [8] = (long)codeloc;
   *(long  *)&closure->tramp[12] = (long)&ffi_closure_SYSV;
 #else
   *(short *)&closure->tramp [0] = 0x0d10;   /* basr %r1,0 */
@@ -736,7 +737,7 @@
   *(short *)&closure->tramp [4] = 0x100e;
   *(short *)&closure->tramp [6] = 0x0004;
   *(short *)&closure->tramp [8] = 0x07f1;   /* br %r1 */
-  *(long  *)&closure->tramp[16] = (long)closure;
+  *(long  *)&closure->tramp[16] = (long)codeloc;
   *(long  *)&closure->tramp[24] = (long)&ffi_closure_SYSV;
 #endif 
  
Index: libffi/src/pa/ffi.c
===================================================================
--- libffi/src/pa/ffi.c	(revision 122231)
+++ libffi/src/pa/ffi.c	(working copy)
@@ -582,10 +582,11 @@
 extern void ffi_closure_LINUX(void);
 
 ffi_status
-ffi_prep_closure (ffi_closure* closure,
-		  ffi_cif* cif,
-		  void (*fun)(ffi_cif*,void*,void**,void*),
-		  void *user_data)
+ffi_prep_closure_loc (ffi_closure* closure,
+		      ffi_cif* cif,
+		      void (*fun)(ffi_cif*,void*,void**,void*),
+		      void *user_data,
+		      void *codeloc)
 {
   UINT32 *tramp = (UINT32 *)(closure->tramp);
 
Index: libffi/src/cris/ffi.c
===================================================================
--- libffi/src/cris/ffi.c	(revision 122231)
+++ libffi/src/cris/ffi.c	(working copy)
@@ -2,6 +2,7 @@
    ffi.c - Copyright (c) 1998 Cygnus Solutions
            Copyright (c) 2004 Simon Posnjak
 	   Copyright (c) 2005 Axis Communications AB
+	   Copyright (C) 2007 Free Software Foundation, Inc.
 
    CRIS Foreign Function Interface
 
@@ -360,10 +361,11 @@
 /* API function: Prepare the trampoline.  */
 
 ffi_status
-ffi_prep_closure (ffi_closure* closure,
-		  ffi_cif* cif,
-		  void (*fun)(ffi_cif *, void *, void **, void*),
-		  void *user_data)
+ffi_prep_closure_loc (ffi_closure* closure,
+		      ffi_cif* cif,
+		      void (*fun)(ffi_cif *, void *, void **, void*),
+		      void *user_data,
+		      void *codeloc)
 {
   void *innerfn = ffi_prep_closure_inner;
   FFI_ASSERT (cif->abi == FFI_SYSV);
@@ -375,7 +377,7 @@
   memcpy (closure->tramp + ffi_cris_trampoline_fn_offset,
 	  &innerfn, sizeof (void *));
   memcpy (closure->tramp + ffi_cris_trampoline_closure_offset,
-	  &closure, sizeof (void *));
+	  &codeloc, sizeof (void *));
 
   return FFI_OK;
 }
Index: libffi/src/raw_api.c
===================================================================
--- libffi/src/raw_api.c	(revision 122231)
+++ libffi/src/raw_api.c	(working copy)
@@ -209,22 +209,20 @@
   (*cl->fun) (cif, rvalue, raw, cl->user_data);
 }
 
-/* Again, here is the generic version of ffi_prep_raw_closure, which
- * will install an intermediate "hub" for translation of arguments from
- * the pointer-array format, to the raw format */
-
 ffi_status
-ffi_prep_raw_closure (ffi_raw_closure* cl,
-		      ffi_cif *cif,
-		      void (*fun)(ffi_cif*,void*,ffi_raw*,void*),
-		      void *user_data)
+ffi_prep_raw_closure_loc (ffi_raw_closure* cl,
+			  ffi_cif *cif,
+			  void (*fun)(ffi_cif*,void*,ffi_raw*,void*),
+			  void *user_data,
+			  void *codeloc)
 {
   ffi_status status;
 
-  status = ffi_prep_closure ((ffi_closure*) cl,
-			     cif,
-			     &ffi_translate_args,
-			     (void*)cl);
+  status = ffi_prep_closure_loc ((ffi_closure*) cl,
+				 cif,
+				 &ffi_translate_args,
+				 codeloc,
+				 codeloc);
   if (status == FFI_OK)
     {
       cl->fun       = fun;
@@ -236,4 +234,22 @@
 
 #endif /* FFI_CLOSURES */
 #endif /* !FFI_NATIVE_RAW_API */
+
+#if FFI_CLOSURES
+
+/* Again, here is the generic version of ffi_prep_raw_closure, which
+ * will install an intermediate "hub" for translation of arguments from
+ * the pointer-array format, to the raw format */
+
+ffi_status
+ffi_prep_raw_closure (ffi_raw_closure* cl,
+		      ffi_cif *cif,
+		      void (*fun)(ffi_cif*,void*,ffi_raw*,void*),
+		      void *user_data)
+{
+  return ffi_prep_raw_closure_loc (cl, cif, fun, user_data, cl);
+}
+
+#endif /* FFI_CLOSURES */
+
 #endif /* !FFI_NO_RAW_API */
Index: libffi/src/ia64/ffi.c
===================================================================
--- libffi/src/ia64/ffi.c	(revision 122231)
+++ libffi/src/ia64/ffi.c	(working copy)
@@ -1,5 +1,5 @@
 /* -----------------------------------------------------------------------
-   ffi.c - Copyright (c) 1998 Red Hat, Inc.
+   ffi.c - Copyright (c) 1998, 2007 Red Hat, Inc.
 	   Copyright (c) 2000 Hewlett Packard Company
    
    IA64 Foreign Function Interface 
@@ -400,10 +400,11 @@
 extern void ffi_closure_unix ();
 
 ffi_status
-ffi_prep_closure (ffi_closure* closure,
-		  ffi_cif* cif,
-		  void (*fun)(ffi_cif*,void*,void**,void*),
-		  void *user_data)
+ffi_prep_closure_loc (ffi_closure* closure,
+		      ffi_cif* cif,
+		      void (*fun)(ffi_cif*,void*,void**,void*),
+		      void *user_data,
+		      void *codeloc)
 {
   /* The layout of a function descriptor.  A C function pointer really 
      points to one of these.  */
@@ -430,7 +431,7 @@
 
   tramp->code_pointer = fd->code_pointer;
   tramp->real_gp = fd->gp;
-  tramp->fake_gp = (UINT64)(PTR64)closure;
+  tramp->fake_gp = (UINT64)(PTR64)codeloc;
   closure->cif = cif;
   closure->user_data = user_data;
   closure->fun = fun;
Index: libffi/src/java_raw_api.c
===================================================================
--- libffi/src/java_raw_api.c	(revision 122231)
+++ libffi/src/java_raw_api.c	(working copy)
@@ -1,5 +1,5 @@
 /* -----------------------------------------------------------------------
-   java_raw_api.c - Copyright (c) 1999  Red Hat, Inc.
+   java_raw_api.c - Copyright (c) 1999, 2007  Red Hat, Inc.
 
    Cloned from raw_api.c
 
@@ -307,22 +307,20 @@
   ffi_java_raw_to_rvalue (cif, rvalue);
 }
 
-/* Again, here is the generic version of ffi_prep_raw_closure, which
- * will install an intermediate "hub" for translation of arguments from
- * the pointer-array format, to the raw format */
-
 ffi_status
-ffi_prep_java_raw_closure (ffi_raw_closure* cl,
-		      ffi_cif *cif,
-		      void (*fun)(ffi_cif*,void*,ffi_raw*,void*),
-		      void *user_data)
+ffi_prep_java_raw_closure_loc (ffi_raw_closure* cl,
+			       ffi_cif *cif,
+			       void (*fun)(ffi_cif*,void*,ffi_raw*,void*),
+			       void *user_data,
+			       void *codeloc)
 {
   ffi_status status;
 
-  status = ffi_prep_closure ((ffi_closure*) cl,
-			     cif,
-			     &ffi_java_translate_args,
-			     (void*)cl);
+  status = ffi_prep_closure_loc ((ffi_closure*) cl,
+				 cif,
+				 &ffi_java_translate_args,
+				 codeloc,
+				 codeloc);
   if (status == FFI_OK)
     {
       cl->fun       = fun;
@@ -332,6 +330,19 @@
   return status;
 }
 
+/* Again, here is the generic version of ffi_prep_raw_closure, which
+ * will install an intermediate "hub" for translation of arguments from
+ * the pointer-array format, to the raw format */
+
+ffi_status
+ffi_prep_java_raw_closure (ffi_raw_closure* cl,
+			   ffi_cif *cif,
+			   void (*fun)(ffi_cif*,void*,ffi_raw*,void*),
+			   void *user_data)
+{
+  return ffi_prep_java_raw_closure_loc (cl, cif, fun, user_data, cl);
+}
+
 #endif /* FFI_CLOSURES */
 #endif /* !FFI_NATIVE_RAW_API */
 #endif /* !FFI_NO_RAW_API */
Index: libffi/src/prep_cif.c
===================================================================
--- libffi/src/prep_cif.c	(revision 122231)
+++ libffi/src/prep_cif.c	(working copy)
@@ -1,5 +1,5 @@
 /* -----------------------------------------------------------------------
-   prep_cif.c - Copyright (c) 1996, 1998  Red Hat, Inc.
+   prep_cif.c - Copyright (c) 1996, 1998, 2007  Red Hat, Inc.
 
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
@@ -155,3 +155,16 @@
   return ffi_prep_cif_machdep(cif);
 }
 #endif /* not __CRIS__ */
+
+#if FFI_CLOSURES
+
+ffi_status
+ffi_prep_closure (ffi_closure* closure,
+		  ffi_cif* cif,
+		  void (*fun)(ffi_cif*,void*,void**,void*),
+		  void *user_data)
+{
+  return ffi_prep_closure_loc (closure, cif, fun, user_data, closure);
+}
+
+#endif
Index: libffi/src/mips/ffi.c
===================================================================
--- libffi/src/mips/ffi.c	(revision 122231)
+++ libffi/src/mips/ffi.c	(working copy)
@@ -1,5 +1,5 @@
 /* -----------------------------------------------------------------------
-   ffi.c - Copyright (c) 1996 Red Hat, Inc.
+   ffi.c - Copyright (c) 1996, 2007 Red Hat, Inc.
    
    MIPS Foreign Function Interface 
 
@@ -497,14 +497,15 @@
 #endif /* FFI_MIPS_O32 */
 
 ffi_status
-ffi_prep_closure (ffi_closure *closure,
-		  ffi_cif *cif,
-		  void (*fun)(ffi_cif*,void*,void**,void*),
-		  void *user_data)
+ffi_prep_closure_loc (ffi_closure *closure,
+		      ffi_cif *cif,
+		      void (*fun)(ffi_cif*,void*,void**,void*),
+		      void *user_data,
+		      void *codeloc)
 {
   unsigned int *tramp = (unsigned int *) &closure->tramp[0];
   unsigned int fn;
-  unsigned int ctx = (unsigned int) closure;
+  unsigned int ctx = (unsigned int) codeloc;
 
 #if defined(FFI_MIPS_O32)
   FFI_ASSERT(cif->abi == FFI_O32 || cif->abi == FFI_O32_SOFT_FLOAT);
@@ -525,7 +526,7 @@
   closure->user_data = user_data;
 
   /* XXX this is available on Linux, but anything else? */
-  cacheflush (tramp, FFI_TRAMPOLINE_SIZE, ICACHE);
+  cacheflush (codeloc, FFI_TRAMPOLINE_SIZE, ICACHE);
 
   return FFI_OK;
 }
Index: libffi/src/sparc/ffi.c
===================================================================
--- libffi/src/sparc/ffi.c	(revision 122231)
+++ libffi/src/sparc/ffi.c	(working copy)
@@ -1,5 +1,5 @@
 /* -----------------------------------------------------------------------
-   ffi.c - Copyright (c) 1996, 2003, 2004 Red Hat, Inc.
+   ffi.c - Copyright (c) 1996, 2003, 2004, 2007 Red Hat, Inc.
    
    SPARC Foreign Function Interface 
 
@@ -425,10 +425,11 @@
 #endif
 
 ffi_status
-ffi_prep_closure (ffi_closure* closure,
-		  ffi_cif* cif,
-		  void (*fun)(ffi_cif*, void*, void**, void*),
-		  void *user_data)
+ffi_prep_closure_loc (ffi_closure* closure,
+		      ffi_cif* cif,
+		      void (*fun)(ffi_cif*, void*, void**, void*),
+		      void *user_data,
+		      void *codeloc)
 {
   unsigned int *tramp = (unsigned int *) &closure->tramp[0];
   unsigned long fn;
@@ -443,7 +444,7 @@
   tramp[3] = 0x01000000;	/* nop			*/
   *((unsigned long *) &tramp[4]) = fn;
 #else
-  unsigned long ctx = (unsigned long) closure;
+  unsigned long ctx = (unsigned long) codeloc;
   FFI_ASSERT (cif->abi == FFI_V8);
   fn = (unsigned long) ffi_closure_v8;
   tramp[0] = 0x03000000 | fn >> 10;	/* sethi %hi(fn), %g1	*/
Index: libffi/src/sh/ffi.c
===================================================================
--- libffi/src/sh/ffi.c	(revision 122231)
+++ libffi/src/sh/ffi.c	(working copy)
@@ -1,5 +1,5 @@
 /* -----------------------------------------------------------------------
-   ffi.c - Copyright (c) 2002, 2003, 2004, 2005, 2006 Kaz Kojima
+   ffi.c - Copyright (c) 2002, 2003, 2004, 2005, 2006, 2007 Kaz Kojima
    
    SuperH Foreign Function Interface 
 
@@ -452,10 +452,11 @@
 #endif
 
 ffi_status
-ffi_prep_closure (ffi_closure* closure,
-		  ffi_cif* cif,
-		  void (*fun)(ffi_cif*, void*, void**, void*),
-		  void *user_data)
+ffi_prep_closure_loc (ffi_closure* closure,
+		      ffi_cif* cif,
+		      void (*fun)(ffi_cif*, void*, void**, void*),
+		      void *user_data,
+		      void *codeloc)
 {
   unsigned int *tramp;
   unsigned short insn;
@@ -475,7 +476,7 @@
   tramp[0] = 0xd102d301;
   tramp[1] = 0x412b0000 | insn;
 #endif
-  *(void **) &tramp[2] = (void *)closure;          /* ctx */
+  *(void **) &tramp[2] = (void *)codeloc;          /* ctx */
   *(void **) &tramp[3] = (void *)ffi_closure_SYSV; /* funaddr */
 
   closure->cif = cif;
@@ -484,7 +485,7 @@
 
 #if defined(__SH4__)
   /* Flush the icache.  */
-  __ic_invalidate(&closure->tramp[0]);
+  __ic_invalidate(codeloc);
 #endif
 
   return FFI_OK;
Index: libffi/Makefile.am
===================================================================
--- libffi/Makefile.am	(revision 122231)
+++ libffi/Makefile.am	(working copy)
@@ -78,7 +78,7 @@
 noinst_LTLIBRARIES = libffi_convenience.la
 
 libffi_la_SOURCES = src/debug.c src/prep_cif.c src/types.c \
-		src/raw_api.c src/java_raw_api.c
+		src/raw_api.c src/java_raw_api.c src/closures.c
 
 nodist_libffi_la_SOURCES =
 
Index: libffi/src/arm/ffi.c
===================================================================
--- libffi/src/arm/ffi.c	2007-05-18 17:49:21.000000000 +0200
+++ libffi/src/arm/ffi.c	2007-05-18 17:51:59.000000000 +0200
@@ -269,16 +269,17 @@
 /* the cif must already be prep'ed */
 
 ffi_status
-ffi_prep_closure (ffi_closure* closure,
-		  ffi_cif* cif,
-		  void (*fun)(ffi_cif*,void*,void**,void*),
-		  void *user_data)
+ffi_prep_closure_loc (ffi_closure* closure,
+		      ffi_cif* cif,
+		      void (*fun)(ffi_cif*,void*,void**,void*),
+		      void *user_data,
+		      void *codeloc)
 {
   FFI_ASSERT (cif->abi == FFI_SYSV);
 
   FFI_INIT_TRAMPOLINE (&closure->tramp[0], \
 		       &ffi_closure_SYSV,  \
-		       (void*)closure);
+		       codeloc);
     
   closure->cif  = cif;
   closure->user_data = user_data;
