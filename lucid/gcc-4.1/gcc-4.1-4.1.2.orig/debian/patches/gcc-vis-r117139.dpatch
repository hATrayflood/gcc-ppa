#! /bin/sh -e

# DP: Fix PR c++/28744 (taken from the redhat/gcc-4_1-branch)

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p0 < $0
        #cd ${dir}gcc && autoconf2.59
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p0 < $0
        #rm ${dir}gcc/configure
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

------------------------------------------------------------------------
r117139 | jakub | 2006-09-22 14:03:09 +0200 (Fri, 22 Sep 2006) | 2 lines

svn merge -r116221:116222 svn+ssh://gcc.gnu.org/svn/gcc/trunk/

-->

r116222 | jakub | 2006-08-17 13:52:26 +0200 (Do, 17 Aug 2006) | 18 lines

        PR c/28744
        * cgraph.h (struct cgraph_node): Remove externally_visible
        bitfield.
        * cgraphunit.c (process_function_and_variable_attributes): Set
        local.externally_visible rather than externally_visible.

        PR c/28744
        * c-common.c (handle_externally_visible_attribute): First look
        at TREE_CODE and only if it is function or var decl, check for
        non-public objects.  Don't warn for DECL_EXTERNAL.
        * cgraphunit.c (process_function_and_variable_attributes): Warn
        if externally_visible attribute is used on non-public object.

        * gcc.dg/attr-externally-visible-1.c: New test.
        * gcc.dg/attr-externally-visible-2.c: New test.
        * g++.dg/parse/attr-externally-visible-1.C: New test.
        * g++.dg/parse/attr-externally-visible-2.C: New test.

Index: gcc/cgraph.h
===================================================================
--- gcc/cgraph.h	(Revision 117138)
+++ gcc/cgraph.h	(Revision 117139)
@@ -157,8 +157,6 @@
   bool analyzed;
   /* Set when function is scheduled to be assembled.  */
   bool output;
-  /* Set when function is visible by other units.  */
-  bool externally_visible;
   /* Set for aliases once they got through assemble_alias.  */
   bool alias;
 };
Index: gcc/cgraphunit.c
===================================================================
--- gcc/cgraphunit.c	(Revision 117138)
+++ gcc/cgraphunit.c	(Revision 117139)
@@ -934,9 +934,16 @@
 	}
       if (lookup_attribute ("externally_visible", DECL_ATTRIBUTES (decl)))
 	{
-	  if (node->local.finalized)
-	    cgraph_mark_needed_node (node);
-	  node->externally_visible = true;
+	  if (! TREE_PUBLIC (node->decl))
+	    warning (OPT_Wattributes,
+		     "%J%<externally_visible%> attribute have effect only on public objects",
+		     node->decl);
+	  else
+	    {
+	      if (node->local.finalized)
+		cgraph_mark_needed_node (node);
+	      node->local.externally_visible = true;
+	    }
 	}
     }
   for (vnode = cgraph_varpool_nodes; vnode != first_var; vnode = vnode->next)
@@ -950,9 +957,16 @@
 	}
       if (lookup_attribute ("externally_visible", DECL_ATTRIBUTES (decl)))
 	{
-	  if (vnode->finalized)
-	    cgraph_varpool_mark_needed_node (vnode);
-	  vnode->externally_visible = true;
+	  if (! TREE_PUBLIC (vnode->decl))
+	    warning (OPT_Wattributes,
+		     "%J%<externally_visible%> attribute have effect only on public objects",
+		     vnode->decl);
+	  else
+	    {
+	      if (vnode->finalized)
+		cgraph_varpool_mark_needed_node (vnode);
+	      vnode->externally_visible = true;
+	    }
 	}
     }
 }
Index: gcc/testsuite/gcc.dg/attr-externally-visible-1.c
===================================================================
--- gcc/testsuite/gcc.dg/attr-externally-visible-1.c	(Revision 0)
+++ gcc/testsuite/gcc.dg/attr-externally-visible-1.c	(Revision 117139)
@@ -0,0 +1,48 @@
+/* { dg-do compile } */
+/* { dg-options "-O3 -fwhole-program" } */
+/* { dg-final { scan-assembler "foo1" } } */
+/* { dg-final { scan-assembler "foo2" } } */
+/* { dg-final { scan-assembler "foo3" } } */
+/* { dg-final { scan-assembler "foo4" } } */
+/* { dg-final { scan-assembler "foo5" } } */
+/* { dg-final { scan-assembler-not "foo6" } } */
+/* { dg-final { scan-assembler "bar1" } } */
+/* { dg-final { scan-assembler "bar2" } } */
+/* { dg-final { scan-assembler "bar3" } } */
+/* { dg-final { scan-assembler "bar4" } } */
+/* { dg-final { scan-assembler "bar5" } } */
+/* { dg-final { scan-assembler-not "bar6" } } */
+
+extern void foo1 (void) __attribute__((externally_visible));
+void foo1 (void) { }
+
+extern void foo2 (void) __attribute__((externally_visible));
+__attribute__((externally_visible)) void foo2 (void) { }
+
+extern void foo3 (void);
+__attribute__((externally_visible)) void foo3 (void) { }
+
+__attribute__((externally_visible)) void foo4 (void) { }
+
+void foo5 (void) { }
+extern void foo5 (void) __attribute__((externally_visible));
+
+void foo6 (void) { }
+
+extern char *bar1 __attribute__((externally_visible));
+char *bar1;
+
+extern char *bar2 __attribute__((externally_visible));
+char *bar2 __attribute__((externally_visible));
+
+extern char *bar3;
+char *bar3 __attribute__((externally_visible));
+
+char *bar4 __attribute__((externally_visible));
+
+char *bar5;
+extern char *bar5 __attribute__((externally_visible));
+
+char *bar6;
+
+int main (void) { }
Index: gcc/testsuite/gcc.dg/attr-externally-visible-2.c
===================================================================
--- gcc/testsuite/gcc.dg/attr-externally-visible-2.c	(Revision 0)
+++ gcc/testsuite/gcc.dg/attr-externally-visible-2.c	(Revision 117139)
@@ -0,0 +1,33 @@
+/* { dg-do compile } */
+/* { dg-options "-O -fwhole-program" } */
+
+static void foo1 (void) { }					/* { dg-warning "have effect only on public" } */
+extern void foo1 (void) __attribute__((externally_visible));
+
+void foo2 (void)
+{
+  __attribute__((externally_visible)) void foo3 (void) { }	/* { dg-warning "have effect only on public" } */
+}
+
+__attribute__((externally_visible)) static void foo3 (void) { }	/* { dg-warning "have effect only on public" } */
+
+static int bar1;
+extern int bar1 __attribute__((externally_visible));		/* { dg-warning "have effect only on public" } */
+
+static int bar2 __attribute__((externally_visible));		/* { dg-warning "have effect only on public" } */
+
+void fn1 (void)
+{
+  static int bar3 __attribute__((externally_visible));		/* { dg-warning "have effect only on public" } */
+}
+
+void fn2 (void)
+{
+  int bar4 __attribute__((externally_visible));			/* { dg-warning "have effect only on public" } */
+}
+
+struct A
+{
+} __attribute__((externally_visible));				/* { dg-warning "does not apply to types" } */
+
+typedef int B __attribute__((externally_visible));		/* { dg-warning "attribute ignored" } */
Index: gcc/testsuite/g++.dg/parse/attr-externally-visible-1.C
===================================================================
--- gcc/testsuite/g++.dg/parse/attr-externally-visible-1.C	(Revision 0)
+++ gcc/testsuite/g++.dg/parse/attr-externally-visible-1.C	(Revision 117139)
@@ -0,0 +1,48 @@
+// { dg-do compile }
+// { dg-options "-O3 -fwhole-program" }
+// { dg-final { scan-assembler "foo1" } }
+// { dg-final { scan-assembler "foo2" } }
+// { dg-final { scan-assembler "foo3" } }
+// { dg-final { scan-assembler "foo4" } }
+// { dg-final { scan-assembler "foo5" } }
+// { dg-final { scan-assembler-not "foo6" } }
+// { dg-final { scan-assembler "bar1" } }
+// { dg-final { scan-assembler "bar2" } }
+// { dg-final { scan-assembler "bar3" } }
+// { dg-final { scan-assembler "bar4" } }
+// { dg-final { scan-assembler "bar5" } }
+// { dg-final { scan-assembler-not "bar6" } }
+
+extern void foo1 (void) __attribute__((externally_visible));
+void foo1 (void) { }
+
+extern void foo2 (void) __attribute__((externally_visible));
+__attribute__((externally_visible)) void foo2 (void) { }
+
+extern void foo3 (void);
+__attribute__((externally_visible)) void foo3 (void) { }
+
+__attribute__((externally_visible)) void foo4 (void) { }
+
+void foo5 (void) { }
+extern void foo5 (void) __attribute__((externally_visible));
+
+void foo6 (void) { }
+
+extern char *bar1 __attribute__((externally_visible));
+char *bar1;
+
+extern char *bar2 __attribute__((externally_visible));
+char *bar2 __attribute__((externally_visible));
+
+extern char *bar3;
+char *bar3 __attribute__((externally_visible));
+
+char *bar4 __attribute__((externally_visible));
+
+char *bar5;
+extern char *bar5 __attribute__((externally_visible));
+
+char *bar6;
+
+int main (void) { }
Index: gcc/testsuite/g++.dg/parse/attr-externally-visible-2.C
===================================================================
--- gcc/testsuite/g++.dg/parse/attr-externally-visible-2.C	(Revision 0)
+++ gcc/testsuite/g++.dg/parse/attr-externally-visible-2.C	(Revision 117139)
@@ -0,0 +1,38 @@
+// { dg-do compile }
+// { dg-options "-O -fwhole-program" }
+
+static void foo1 (void) { }					// { dg-warning "have effect only on public" }
+extern void foo1 (void) __attribute__((externally_visible));
+
+struct C
+{
+  __attribute__((externally_visible)) void foo3 (void) { }
+};
+
+__attribute__((externally_visible)) static void foo3 (void) { }	// { dg-warning "have effect only on public" }
+
+static int bar1;
+extern int bar1 __attribute__((externally_visible));		// { dg-warning "have effect only on public" }
+
+static int bar2 __attribute__((externally_visible));		// { dg-warning "have effect only on public" }
+
+void fn1 (void)
+{
+  static int bar3 __attribute__((externally_visible));		// { dg-warning "have effect only on public" }
+}
+
+void fn2 (void)
+{
+  int bar4 __attribute__((externally_visible));			// { dg-warning "have effect only on public" }
+}
+
+struct A
+{
+} __attribute__((externally_visible));				// { dg-warning "does not apply to types" }
+
+typedef int B __attribute__((externally_visible));		// { dg-warning "attribute ignored" }
+
+struct D
+{
+  static int d __attribute__((externally_visible));
+};
Index: gcc/c-common.c
===================================================================
--- gcc/c-common.c	(Revision 117138)
+++ gcc/c-common.c	(Revision 117139)
@@ -4243,16 +4243,16 @@
 {
   tree node = *pnode;
 
-  if ((!TREE_STATIC (node) && TREE_CODE (node) != FUNCTION_DECL)
-      || !TREE_PUBLIC (node))
+  if (TREE_CODE (node) == FUNCTION_DECL || TREE_CODE (node) == VAR_DECL)
     {
-      warning (OPT_Wattributes,
-	       "%qE attribute have effect only on public objects", name);
-      *no_add_attrs = true;
+      if ((!TREE_STATIC (node) && TREE_CODE (node) != FUNCTION_DECL
+	   && !DECL_EXTERNAL (node)) || !TREE_PUBLIC (node))
+	{
+	  warning (OPT_Wattributes,
+		   "%qE attribute have effect only on public objects", name);
+	  *no_add_attrs = true;
+	}
     }
-  else if (TREE_CODE (node) == FUNCTION_DECL
-	   || TREE_CODE (node) == VAR_DECL)
-    ;
   else
     {
       warning (OPT_Wattributes, "%qE attribute ignored", name);
