#! /bin/sh -e

# DP: Fix PR c/25795, PR c++/27369 (taken from the redhat/gcc-4_1-branch)

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p0 < $0
        #cd ${dir}gcc && autoconf2.59
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p0 < $0
        #rm ${dir}gcc/configure
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0


r115693 | hubicka | 2006-07-24 02:16:16 +0200 (Mo, 24 Jul 2006) | 13 lines

        PR c/25795
        PR c++/27369
        * cgraph.c (cgraph_varpool_nodes): Export.
        (decide_is_variable_needed): Ignored "used" attribute in
        unit-at-a-time mode.
        * cgraph.h (cgraph_varpool_nodes): Declare.
        * cgraphunit.c (decide_is_function_needed): Ignored "used" attribute in
        unit-at-a-time mode.

        * gcc.dg/pr25795.c: New test.
        * gcc.dg/pr25795-1.c: New test.

diff -urN gcc.orig/c-common.c gcc/c-common.c
--- gcc.orig/c-common.c	2006-10-02 16:17:07.788388000 +0200
+++ gcc/c-common.c	2006-10-02 16:21:25.998388000 +0200
@@ -4313,20 +4313,9 @@
 	       "%qE attribute have effect only on public objects", name);
       *no_add_attrs = true;
     }
-  else if (TREE_CODE (node) == FUNCTION_DECL)
-    {
-      struct cgraph_node *n = cgraph_node (node);
-      n->local.externally_visible = true;
-      if (n->local.finalized)
-	cgraph_mark_needed_node (n);
-    }
-  else if (TREE_CODE (node) == VAR_DECL)
-    {
-      struct cgraph_varpool_node *n = cgraph_varpool_node (node);
-      n->externally_visible = true;
-      if (n->finalized)
-	cgraph_varpool_mark_needed_node (n);
-    }
+  else if (TREE_CODE (node) == FUNCTION_DECL
+	   || TREE_CODE (node) == VAR_DECL)
+    ;
   else
     {
       warning (OPT_Wattributes, "%qE attribute ignored", name);
diff -urN gcc.orig/c-decl.c gcc/c-decl.c
--- gcc.orig/c-decl.c	2006-10-02 16:17:07.778388000 +0200
+++ gcc/c-decl.c	2006-10-02 16:21:25.998388000 +0200
@@ -3529,7 +3529,7 @@
     }
 
   /* If this was marked 'used', be sure it will be output.  */
-  if (lookup_attribute ("used", DECL_ATTRIBUTES (decl)))
+  if (!flag_unit_at_a_time && lookup_attribute ("used", DECL_ATTRIBUTES (decl)))
     mark_decl_referenced (decl);
 
   if (TREE_CODE (decl) == TYPE_DECL)
diff -urN gcc.orig/cgraph.c gcc/cgraph.c
--- gcc.orig/cgraph.c	2005-10-31 22:07:29.000000000 +0100
+++ gcc/cgraph.c	2006-10-02 16:21:25.988388000 +0200
@@ -133,7 +133,7 @@
 
 
 /* The linked list of cgraph varpool nodes.  */
-static GTY(()) struct cgraph_varpool_node *cgraph_varpool_nodes;
+struct cgraph_varpool_node *cgraph_varpool_nodes;
 
 /* End of the varpool queue.  Needs to be QTYed to work with PCH.  */
 static GTY(()) struct cgraph_varpool_node *cgraph_varpool_last_needed_node;
@@ -809,8 +809,10 @@
 decide_is_variable_needed (struct cgraph_varpool_node *node, tree decl)
 {
   /* If the user told us it is used, then it must be so.  */
-  if (node->externally_visible
-      || lookup_attribute ("used", DECL_ATTRIBUTES (decl)))
+  if (node->externally_visible)
+    return true;
+  if (!flag_unit_at_a_time
+      && lookup_attribute ("used", DECL_ATTRIBUTES (decl)))
     return true;
 
   /* ??? If the assembler name is set by hand, it is possible to assemble
@@ -827,7 +829,8 @@
 
   /* Externally visible variables must be output.  The exception is
      COMDAT variables that must be output only when they are needed.  */
-  if (TREE_PUBLIC (decl) && !DECL_COMDAT (decl) && !DECL_EXTERNAL (decl))
+  if (TREE_PUBLIC (decl) && !flag_whole_program && !DECL_COMDAT (decl)
+      && !DECL_EXTERNAL (decl))
     return true;
 
   if (flag_unit_at_a_time)
diff -urN gcc.orig/cgraph.h gcc/cgraph.h
--- gcc.orig/cgraph.h	2005-09-24 14:43:30.000000000 +0200
+++ gcc/cgraph.h	2006-10-02 16:26:10.518388000 +0200
@@ -221,6 +221,7 @@
 
 extern GTY(()) struct cgraph_varpool_node *cgraph_varpool_first_unanalyzed_node;
 extern GTY(()) struct cgraph_varpool_node *cgraph_varpool_nodes_queue;
+extern GTY(()) struct cgraph_varpool_node *cgraph_varpool_nodes;
 
 /* In cgraph.c  */
 void dump_cgraph (FILE *);
diff -urN gcc.orig/cgraphunit.c gcc/cgraphunit.c
--- gcc.orig/cgraphunit.c	2006-10-02 15:40:29.118388000 +0200
+++ gcc/cgraphunit.c	2006-10-02 16:21:25.998388000 +0200
@@ -198,8 +198,10 @@
     }
 
   /* If the user told us it is used, then it must be so.  */
-  if (node->local.externally_visible
-      || lookup_attribute ("used", DECL_ATTRIBUTES (decl)))
+  if (node->local.externally_visible)
+    return true;
+
+  if (!flag_unit_at_a_time && lookup_attribute ("used", DECL_ATTRIBUTES (decl)))
     return true;
 
   /* ??? If the assembler name is set by hand, it is possible to assemble
@@ -877,6 +879,71 @@
   current_function_decl = NULL;
 }
 
+/* Look for externally_visible and used attributes and mark cgraph nodes
+   accordingly.
+
+   We cannot mark the nodes at the point the attributes are processed (in
+   handle_*_attribute) because the copy of the declarations available at that
+   point may not be canonical.  For example, in:
+
+    void f();
+    void f() __attribute__((used));
+
+   the declaration we see in handle_used_attribute will be the second
+   declaration -- but the front end will subsequently merge that declaration
+   with the original declaration and discard the second declaration.
+
+   Furthermore, we can't mark these nodes in cgraph_finalize_function because:
+
+    void f() {}
+    void f() __attribute__((externally_visible));
+
+   is valid.
+
+   So, we walk the nodes at the end of the translation unit, applying the
+   attributes at that point.  */
+
+static void
+process_function_and_variable_attributes (struct cgraph_node *first,
+                                          struct cgraph_varpool_node *first_var)
+{
+  struct cgraph_node *node;
+  struct cgraph_varpool_node *vnode;
+
+  for (node = cgraph_nodes; node != first; node = node->next)
+    {
+      tree decl = node->decl;
+      if (lookup_attribute ("used", DECL_ATTRIBUTES (decl)))
+	{
+	  mark_decl_referenced (decl);
+	  if (node->local.finalized)
+	     cgraph_mark_needed_node (node);
+	}
+      if (lookup_attribute ("externally_visible", DECL_ATTRIBUTES (decl)))
+	{
+	  if (node->local.finalized)
+	    cgraph_mark_needed_node (node);
+	  node->externally_visible = true;
+	}
+    }
+  for (vnode = cgraph_varpool_nodes; vnode != first_var; vnode = vnode->next)
+    {
+      tree decl = vnode->decl;
+      if (lookup_attribute ("used", DECL_ATTRIBUTES (decl)))
+	{
+	  mark_decl_referenced (decl);
+	  if (vnode->finalized)
+	    cgraph_varpool_mark_needed_node (vnode);
+	}
+      if (lookup_attribute ("externally_visible", DECL_ATTRIBUTES (decl)))
+	{
+	  if (vnode->finalized)
+	    cgraph_varpool_mark_needed_node (vnode);
+	  vnode->externally_visible = true;
+	}
+    }
+}
+
 /* Analyze the whole compilation unit once it is parsed completely.  */
 
 void
@@ -886,6 +953,7 @@
   /* Keep track of already processed nodes when called multiple times for
      intermodule optimization.  */
   static struct cgraph_node *first_analyzed;
+  static struct cgraph_varpool_node *first_analyzed_var;
 
   if (errorcount || sorrycount)
     return;
@@ -905,6 +973,7 @@
     }
 
   timevar_push (TV_CGRAPH);
+  process_function_and_variable_attributes (first_analyzed, first_analyzed_var);
   cgraph_varpool_analyze_pending_decls ();
   if (cgraph_dump_file)
     {
@@ -989,6 +1058,7 @@
       dump_cgraph (cgraph_dump_file);
     }
   first_analyzed = cgraph_nodes;
+  first_analyzed_var = cgraph_varpool_nodes;
   ggc_collect ();
   timevar_pop (TV_CGRAPH);
 }
diff -urN gcc.orig/testsuite/gcc.dg/pr25795-1.c gcc/testsuite/gcc.dg/pr25795-1.c
--- gcc.orig/testsuite/gcc.dg/pr25795-1.c	1970-01-01 01:00:00.000000000 +0100
+++ gcc/testsuite/gcc.dg/pr25795-1.c	2006-10-02 16:21:25.998388000 +0200
@@ -0,0 +1,10 @@
+/* { dg-do compile } */
+/* { dg-options "-O3 -fwhole-program" } */
+/* { dg-final { scan-assembler-not "mystr" } } */
+
+
+extern const char *mystr;       /* normally in a header */
+const char *mystr;
+main()
+{
+}
diff -urN gcc.orig/testsuite/gcc.dg/pr25795.c gcc/testsuite/gcc.dg/pr25795.c
--- gcc.orig/testsuite/gcc.dg/pr25795.c	1970-01-01 01:00:00.000000000 +0100
+++ gcc/testsuite/gcc.dg/pr25795.c	2006-10-02 16:21:25.998388000 +0200
@@ -0,0 +1,10 @@
+/* { dg-do compile } */
+/* { dg-options "-O3 -fwhole-program" } */
+/* { dg-final { scan-assembler "mystr" } } */
+
+
+extern const char *mystr;       /* normally in a header */
+const char *mystr __attribute__ ((externally_visible));
+main()
+{
+}
