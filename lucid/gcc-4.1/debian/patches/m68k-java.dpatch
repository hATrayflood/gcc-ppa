#! /bin/sh -e

# All lines beginning with `# DPATCH:' are a description of the patch.
# DP: java support for m68k
# DP: - add m68k info to configure files
# DP: - add sysdep/m68k/locks.h
# DP: - boehm.c: don't use bitmap as gc_descr if pointer is misaligned

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p1 < $0
	cd ${dir} && touch libjava/configure
        #cd ${dir}gcc && autoconf2.59
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p1 < $0
        #rm ${dir}gcc/configure
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

---

 gcc/java/boehm.c            |    8 ++++
 libjava/configure           |    3 +
 libjava/configure.ac        |    3 +
 libjava/configure.host      |    5 +++
 libjava/sysdep/m68k/locks.h |   72 ++++++++++++++++++++++++++++++++++++++++++++
 5 files changed, 91 insertions(+)

Index: gcc-4.1/libjava/sysdep/m68k/locks.h
===================================================================
--- /dev/null
+++ gcc-4.1/libjava/sysdep/m68k/locks.h
@@ -0,0 +1,72 @@
+// locks.h - Thread synchronization primitives. m68k implementation.
+
+/* Copyright (C) 2006  Free Software Foundation
+
+   This file is part of libgcj.
+
+This software is copyrighted work licensed under the terms of the
+Libgcj License.  Please consult the file "LIBGCJ_LICENSE" for
+details.  */
+
+#ifndef __SYSDEP_LOCKS_H__
+#define __SYSDEP_LOCKS_H__
+
+/* Integer type big enough for object address.  */
+typedef size_t obj_addr_t __attribute__ ((aligned (4)));
+
+// Atomically replace *addr by new_val if it was initially equal to old.
+// Return true if the comparison succeeded.
+// Assumed to have acquire semantics, i.e. later memory operations
+// cannot execute before the compare_and_swap finishes.
+static inline bool
+compare_and_swap(volatile obj_addr_t *addr,
+		 obj_addr_t old, obj_addr_t new_val)
+{
+  char result;
+  __asm__ __volatile__("cas.l %2,%3,%0; seq %1"
+	      	: "+m" (*addr), "=d" (result), "+d" (old)
+		: "d" (new_val)
+		: "memory");
+  return (bool) result;
+}
+
+// Set *addr to new_val with release semantics, i.e. making sure
+// that prior loads and stores complete before this
+// assignment.
+// On m68k, the hardware shouldn't reorder reads and writes,
+// so we just have to convince gcc not to do it either.
+static inline void
+release_set(volatile obj_addr_t *addr, obj_addr_t new_val)
+{
+  __asm__ __volatile__(" " : : : "memory");
+  *(addr) = new_val;
+}
+
+// Compare_and_swap with release semantics instead of acquire semantics.
+// On many architecture, the operation makes both guarantees, so the
+// implementation can be the same.
+static inline bool
+compare_and_swap_release(volatile obj_addr_t *addr,
+			 obj_addr_t old,
+			 obj_addr_t new_val)
+{
+  return compare_and_swap(addr, old, new_val);
+}
+
+// Ensure that subsequent instructions do not execute on stale
+// data that was loaded from memory before the barrier.
+// On m68k, the hardware ensures that reads are properly ordered.
+static inline void
+read_barrier(void)
+{
+}
+
+// Ensure that prior stores to memory are completed with respect to other
+// processors.
+static inline void
+write_barrier(void)
+{
+  // m68k does not reorder writes. We just need to ensure that gcc also doesn't.
+  __asm__ __volatile__(" " : : : "memory");
+}
+#endif
--- ./gcc/java/boehm.c.old	2007-01-18 20:00:03.000000000 +0100
+++ ./gcc/java/boehm.c	2007-04-27 01:12:52.000000000 +0200
@@ -98,6 +98,14 @@
 
       offset = int_byte_position (field);
       size_bytes = int_size_in_bytes (TREE_TYPE (field));
+
+      if (offset % (POINTER_SIZE / BITS_PER_UNIT))
+	{
+	  *all_bits_set = -1;
+	  *pointer_after_end = 1;
+	  break;
+	}
+
       if (JREFERENCE_TYPE_P (TREE_TYPE (field))
 	  /* An `object' of type gnu.gcj.RawData is actually non-Java
 	     data.  */
--- ./libjava/configure.host.old	2007-04-27 01:09:16.000000000 +0200
+++ ./libjava/configure.host	2007-04-27 01:12:52.000000000 +0200
@@ -140,6 +140,10 @@
 	libgcj_interpreter=yes
 	enable_hash_synchronization_default=no
 	;;
+  m68k-*)
+	sysdeps_dir=m68k
+	libgcj_interpreter=yes
+	;;
   powerpc64*-*)
 	sysdeps_dir=powerpc
 	libgcj_interpreter=yes
@@ -196,6 +200,7 @@
   ia64-* | \
   x86_64*-linux* | \
   hppa*-linux* | \
+  m68k*-linux* | \
   sh-linux* | sh[34]*-linux*)
   	can_unwind_signal=yes
 	libgcj_ld_symbolic='-Wl,-Bsymbolic'
--- ./libjava/configure.ac.old	2007-04-27 01:09:08.000000000 +0200
+++ ./libjava/configure.ac	2007-04-27 01:14:06.000000000 +0200
@@ -1549,6 +1549,9 @@
  mips*-*-linux*)
     SIGNAL_HANDLER=include/mips-signal.h
     ;;
+ m68*-*-linux*)
+    SIGNAL_HANDLER=include/dwarf2-signal.h
+    ;;
  powerpc*-*-darwin*)
     SIGNAL_HANDLER=include/darwin-signal.h
     ;;
--- ./libjava/configure.old	2007-04-27 01:09:11.000000000 +0200
+++ ./libjava/configure	2007-04-27 01:14:35.000000000 +0200
@@ -17393,6 +17393,9 @@
  mips*-*-linux*)
     SIGNAL_HANDLER=include/mips-signal.h
     ;;
+ m68*-*-linux*)
+    SIGNAL_HANDLER=include/dwarf2-signal.h
+    ;;
  powerpc*-*-darwin*)
     SIGNAL_HANDLER=include/darwin-signal.h
     ;;
