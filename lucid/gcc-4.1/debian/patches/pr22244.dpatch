#! /bin/sh -e

# DP: Improve debug info for packed arrays with constant bounds (PR fortran/22244)

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p0 < $0
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p0 < $0
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

From: Jakub Jelinek <jakub@redhat.com>
Sender: gcc-patches-owner@gcc.gnu.org
To: gcc-patches@gcc.gnu.org, fortran@gcc.gnu.org
Cc: Alexandre Oliva <aoliva@redhat.com>, Jan Kratochvil <jkratoch@redhat.com>,         Daniel Jacobowitz <drow@false.org>
Subject: [PATCH] Improve debug info for packed arrays with constant bounds (PR fortran/22244)
Date: Tue, 14 Aug 2007 08:02:36 -0400

Hi!

The following patch certainly doesn't address all problems with debug info
for arrays, but at least handles the most common easy case.

In gimple the arrays are still represented as flat arrays with zero lower
bound, but for debuginfo they are represented as multi-dimensional if rank >
1 and with correct bounds, provided all bounds are constant and the array
is packed.

Tested on x86_64, both with normal make check and make check with
RUNTESTFLAGS=--target_board=unix/-g
and also with gdb on:
        integer a(0:5,7:15)
        double precision b(3)
        real c(-3:12,1:3,0:6)
        a(:,:) = 1
        a(0,7) = 5
        a(5,15) = 6
        b(:) = 3
        b(1) = 2.5
        b(2) = 6
        c(:,:,:) = 0.5
        c(-3,1,0) = 1
        c(12,3,6) = 2
        c(0,1,0) = 0.5
        end
compiled with -g.

Ok for 4.3/4.2/4.1?

2007-08-14  Jakub Jelinek  <jakub@redhat.com>

	PR fortran/22244
	* Make-lang.in (fortran/trans-types.o): Depend on $(FLAGS_H).
	* trans-types.c: Include flags.h.
	(gfc_get_nodesc_array_type): Add TYPE_DECL TYPE_NAME with
	correct bounds and dimensions for packed arrays.

--- gcc/fortran/Make-lang.in.orig	2007-08-27 17:56:32.000000000 +0200
+++ gcc/fortran/Make-lang.in	2007-08-27 17:58:07.000000000 +0200
@@ -284,7 +284,7 @@
   cgraph.h $(TARGET_H) function.h $(FLAGS_H) tree-gimple.h \
   tree-dump.h
 fortran/trans-types.o: $(GFORTRAN_TRANS_DEPS) gt-fortran-trans-types.h \
-  real.h toplev.h $(TARGET_H)
+  real.h toplev.h $(TARGET_H) $(FLAGS_H)
 fortran/trans-const.o: $(GFORTRAN_TRANS_DEPS)
 fortran/trans-expr.o: $(GFORTRAN_TRANS_DEPS) fortran/dependency.h
 fortran/trans-stmt.o: $(GFORTRAN_TRANS_DEPS)
--- gcc/fortran/trans-types.c.orig	2007-08-27 17:56:32.000000000 +0200
+++ gcc/fortran/trans-types.c	2007-08-27 17:56:58.000000000 +0200
@@ -35,6 +35,7 @@
 #include "trans-types.h"
 #include "trans-const.h"
 #include "real.h"
+#include "flags.h"
 
 
 #if (GFC_MAX_DIMENSIONS < 10)
@@ -1005,7 +1006,7 @@
     {
       /* Fill in the stride and bound components of the type.  */
       if (known_stride)
-	tmp =  gfc_conv_mpz_to_tree (stride, gfc_index_integer_kind);
+	tmp = gfc_conv_mpz_to_tree (stride, gfc_index_integer_kind);
       else
         tmp = NULL_TREE;
       GFC_TYPE_ARRAY_STRIDE (type, n) = tmp;
@@ -1103,6 +1104,24 @@
   mpz_clear (stride);
   mpz_clear (delta);
 
+  /* In debug info represent packed arrays as multi-dimensional
+     if they have rank > 1 and with proper bounds, instead of flat
+     arrays.  */
+  if (known_stride && write_symbols != NO_DEBUG)
+    {
+      tree gtype = etype, rtype, type_decl;
+
+      for (n = as->rank - 1; n >= 0; n--)
+	{
+	  rtype = build_range_type (gfc_array_index_type,
+				    GFC_TYPE_ARRAY_LBOUND (type, n),
+				    GFC_TYPE_ARRAY_UBOUND (type, n));
+	  gtype = build_array_type (gtype, rtype);
+	}
+      TYPE_NAME (type) = type_decl = build_decl (TYPE_DECL, NULL, gtype);
+      DECL_ORIGINAL_TYPE (type_decl) = gtype;
+    }
+
   if (packed < 3 || !known_stride)
     {
       /* For dummy arrays and automatic (heap allocated) arrays we
