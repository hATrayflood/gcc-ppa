#! /bin/sh -e

# DP: g++ visibility patches (taken from the redhat/gcc-4_1-branch)
# DP:   PR c++/28370.

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p0 < $0
        #cd ${dir}gcc && autoconf2.59
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p0 < $0
        #rm ${dir}gcc/configure
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0


gcc/

2006-07-15  Jakub Jelinek  <jakub@redhat.com>

	PR c++/28370
	* decl2.c (note_vague_linkage_var): Removed.
	(finish_static_data_member_decl): Add decl to pending_statics vector
	directly.  Do it even for non-public decls.

gcc/testsuite/

2006-07-15  Jakub Jelinek  <jakub@redhat.com>

	PR c++/28370
	* g++.dg/template/anon3.C: New test.

Index: gcc/testsuite/g++.dg/template/anon3.C
===================================================================
--- gcc/testsuite/g++.dg/template/anon3.C	(Revision 0)
+++ gcc/testsuite/g++.dg/template/anon3.C	(Revision 116506)
@@ -0,0 +1,20 @@
+// PR c++/28370
+// { dg-do run }
+
+namespace
+{
+  template<typename T> struct A { static int *a; };
+  template<typename T> int *A<T>::a = 0;
+}
+
+int *
+foo ()
+{
+  return A<int>::a;
+}
+
+int
+main ()
+{
+  return foo() != 0;
+}
Index: gcc/cp/decl2.c
===================================================================
--- gcc/cp/decl2.c	(Revision 116505)
+++ gcc/cp/decl2.c	(Revision 116506)
@@ -737,14 +737,6 @@
     }
 }
 
-/* Like note_vague_linkage_fn but for variables.  */
-
-static void
-note_vague_linkage_var (tree var)
-{
-  VEC_safe_push (tree, gc, pending_statics, var);
-}
-
 /* We have just processed the DECL, which is a static data member.
    The other parameters are as for cp_finish_decl.  */
 
@@ -763,8 +755,8 @@
   if (!asmspec_tree && current_class_type)
     DECL_INITIAL (decl) = error_mark_node;
 
-  if (! processing_template_decl && TREE_PUBLIC (decl))
-    note_vague_linkage_var (decl);
+  if (! processing_template_decl)
+    VEC_safe_push (tree, gc, pending_statics, decl);
 
   if (LOCAL_CLASS_P (current_class_type))
     pedwarn ("local class %q#T shall not have static data member %q#D",
