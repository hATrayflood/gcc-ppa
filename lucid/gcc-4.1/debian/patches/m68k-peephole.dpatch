#! /bin/sh -e

# All lines beginning with `# DPATCH:' are a description of the patch.
# DP: Convert some text peepholes to rtl peepholes, so the correct
# DP: DWARF2 information can be generated for stack manipulations.
# DP: (Keep a few peepholes temporarily disabled.)

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p1 < $0
        #cd ${dir}gcc && autoconf2.59
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p1 < $0
        #rm ${dir}gcc/configure
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

---

 gcc/config/m68k/m68k.h  |    2 
 gcc/config/m68k/m68k.md |  227 +++++++++++++++++++-----------------------------
 2 files changed, 91 insertions(+), 138 deletions(-)

Index: gcc-4.1/gcc/config/m68k/m68k.h
===================================================================
--- gcc-4.1.orig/gcc/config/m68k/m68k.h
+++ gcc-4.1/gcc/config/m68k/m68k.h
@@ -631,7 +631,7 @@ __transfer_from_trampoline ()					\
 #define DATA_REG_P(X) (REG_P (X) && REGNO_OK_FOR_DATA_P (REGNO (X)))
 
 /* 1 if X is an fp register.  */
-#define FP_REG_P(X) (REG_P (X) && REGNO_OK_FOR_FP_P (REGNO (X)))
+#define FP_REG_P(X)	(REG_P (X) && (REGNO (X) ^ 020) < 8)
 
 /* 1 if X is an address register  */
 #define ADDRESS_REG_P(X) (REG_P (X) && REGNO_OK_FOR_BASE_P (REGNO (X)))
Index: gcc-4.1/gcc/config/m68k/m68k.md
===================================================================
--- gcc-4.1.orig/gcc/config/m68k/m68k.md
+++ gcc-4.1/gcc/config/m68k/m68k.md
@@ -665,13 +665,23 @@
     }
 })
 
-;; General case of fullword move.  The register constraints
-;; force integer constants in range for a moveq to be reloaded
-;; if they are headed for memory.
+;; General case of fullword move.
 (define_insn ""
   ;; Notes: make sure no alternative allows g vs g.
   ;; We don't allow f-regs since fixed point cannot go in them.
   [(set (match_operand:SI 0 "nonimmediate_operand" "=g,d,a<")
+        (match_operand:SI 1 "general_src_operand" "daymSnT,n,i"))]
+
+  "!TARGET_COLDFIRE && reload_completed"
+{
+  return output_move_simode (operands);
+})
+
+;; Before reload is completed the register constraints
+;; force integer constants in range for a moveq to be reloaded
+;; if they are headed for memory.
+(define_insn ""
+  [(set (match_operand:SI 0 "nonimmediate_operand" "=g,d,a<")
         (match_operand:SI 1 "general_src_operand" "daymSKT,n,i"))]
 
   "!TARGET_COLDFIRE"
@@ -6594,154 +6604,97 @@
 ;; and then is moved into an FP register.
 ;; But it is mainly intended to test the support for these optimizations.
 
-(define_peephole
+(define_peephole2
   [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int 4)))
-   (set (match_operand:DF 0 "register_operand" "=f")
-	(match_operand:DF 1 "register_operand" "ad"))]
-  "FP_REG_P (operands[0]) && ! FP_REG_P (operands[1])"
-{
-  rtx xoperands[2];
-  xoperands[1] = gen_rtx_REG (SImode, REGNO (operands[1]) + 1);
-  output_asm_insn ("move%.l %1,%@", xoperands);
-  output_asm_insn ("move%.l %1,%-", operands);
-  return "fmove%.d %+,%0";
-})
+   (set (match_operand:DF 0 "register_operand" "")
+	(match_operand:DF 1 "register_operand" ""))]
+  "FP_REG_P (operands[0]) && !FP_REG_P (operands[1])"
+  [(set (mem:SI (reg:SI SP_REG)) (match_dup 1))
+   (set (mem:SI (pre_dec:SI (reg:SI SP_REG))) (match_dup 2))
+   (set (match_dup 0) (mem:DF (post_inc:SI (reg:SI SP_REG))))]
+  "split_di(operands + 1, 1, operands + 1, operands + 2);")
 
 ;; Optimize a stack-adjust followed by a push of an argument.
 ;; This is said to happen frequently with -msoft-float
 ;; when there are consecutive library calls.
 
-(define_peephole
+(define_peephole2
+  [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int 4)))
+   (set (mem:SF (pre_dec:SI (reg:SI SP_REG)))
+	(match_operand:SF 0 "general_operand" ""))]
+  "!reg_mentioned_p (stack_pointer_rtx, operands[0])"
+  [(set (mem:SF (reg:SI SP_REG)) (match_dup 0))]
+  "")
+
+(define_peephole2
   [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG)
-				 (match_operand:SI 0 "const_int_operand" "n")))
-   (set (match_operand:SF 1 "push_operand" "=m")
-	(match_operand:SF 2 "general_operand" "rmfF"))]
-  "INTVAL (operands[0]) >= 4
-   && ! reg_mentioned_p (stack_pointer_rtx, operands[2])"
-{
-  if (INTVAL (operands[0]) > 4)
-    {
-      rtx xoperands[2];
-      xoperands[0] = stack_pointer_rtx;
-      xoperands[1] = GEN_INT (INTVAL (operands[0]) - 4);
-      if (INTVAL (xoperands[1]) <= 8)
-	{
-	  if (!TARGET_COLDFIRE)
-	    output_asm_insn ("addq%.w %1,%0", xoperands);
-	  else
-	    output_asm_insn ("addq%.l %1,%0", xoperands);
-	}
-      else if (TARGET_CPU32 && INTVAL (xoperands[1]) <= 16) 
-	{
-	  xoperands[1] = GEN_INT (INTVAL (xoperands[1]) - 8);
-	  output_asm_insn ("addq%.w #8,%0\;addq%.w %1,%0", xoperands);
-	}
-      else if (INTVAL (xoperands[1]) <= 0x7FFF)
-        {
-	  if (TARGET_68040)
-	    output_asm_insn ("add%.w %1,%0", xoperands);
-	  else if (MOTOROLA)
-	    output_asm_insn ("lea (%c1,%0),%0", xoperands);
-	  else
-	    output_asm_insn ("lea %0@(%c1),%0", xoperands);
-        }
-      else
-        output_asm_insn ("add%.l %1,%0", xoperands);
-    }
-  if (FP_REG_P (operands[2]))
-    return "fmove%.s %2,%@";
-  return "move%.l %2,%@";
-})
+				 (match_operand:SI 0 "const_int_operand" "")))
+   (set (mem:SF (pre_dec:SI (reg:SI SP_REG)))
+	(match_operand:SF 1 "general_operand" ""))]
+  "INTVAL (operands[0]) > 4
+   && !reg_mentioned_p (stack_pointer_rtx, operands[1])"
+  [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (match_dup 0)))
+   (set (mem:SF (reg:SI SP_REG)) (match_dup 1))]
+  "operands[0] = GEN_INT (INTVAL (operands[0]) - 4);")
 
 ;; Speed up stack adjust followed by a fullword fixedpoint push.
 
-(define_peephole
+(define_peephole2
+  [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int 4)))
+   (set (mem:SI (pre_dec:SI (reg:SI SP_REG)))
+	(match_operand:SI 0 "general_operand" ""))]
+  "!reg_mentioned_p (stack_pointer_rtx, operands[0])"
+  [(set (mem:SI (reg:SI SP_REG)) (match_dup 0))]
+  "")
+
+(define_peephole2
   [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG)
-				 (match_operand:SI 0 "const_int_operand" "n")))
-   (set (match_operand:SI 1 "push_operand" "=m")
-	(match_operand:SI 2 "general_operand" "g"))]
-  "INTVAL (operands[0]) >= 4
-   && ! reg_mentioned_p (stack_pointer_rtx, operands[2])"
-{
-  if (INTVAL (operands[0]) > 4)
-    {
-      rtx xoperands[2];
-      xoperands[0] = stack_pointer_rtx;
-      xoperands[1] = GEN_INT (INTVAL (operands[0]) - 4);
-      if (INTVAL (xoperands[1]) <= 8)
-	{
-	  if (!TARGET_COLDFIRE)
-	    output_asm_insn ("addq%.w %1,%0", xoperands);
-	  else
-	    output_asm_insn ("addq%.l %1,%0", xoperands);
-	}
-      else if (TARGET_CPU32 && INTVAL (xoperands[1]) <= 16)
-	{
-	  xoperands[1] = GEN_INT (INTVAL (xoperands[1]) - 8);
-	  output_asm_insn ("addq%.w #8,%0\;addq%.w %1,%0", xoperands);
-	}
-      else if (INTVAL (xoperands[1]) <= 0x7FFF)
-        {
-	  if (TARGET_68040)
-	    output_asm_insn ("add%.w %1,%0", xoperands);
-	  else if (MOTOROLA)
-	    output_asm_insn ("lea (%c1,%0),%0", xoperands);
-	  else
-	    output_asm_insn ("lea %0@(%c1),%0", xoperands);
-        }
-      else
-        output_asm_insn ("add%.l %1,%0", xoperands);
-    }
-  if (operands[2] == const0_rtx)
-    return "clr%.l %@";
-  return "move%.l %2,%@";
-})
+				 (match_operand:SI 0 "const_int_operand" "")))
+   (set (mem:SI (pre_dec:SI (reg:SI SP_REG)))
+	(match_operand:SI 1 "general_operand" ""))]
+  "INTVAL (operands[0]) > 4
+   && !reg_mentioned_p (stack_pointer_rtx, operands[1])"
+  [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (match_dup 0)))
+   (set (mem:SI (reg:SI SP_REG)) (match_dup 1))]
+  "operands[0] = GEN_INT (INTVAL (operands[0]) - 4);")
 
 ;; Speed up pushing a single byte but leaving four bytes of space.
 
-(define_peephole
-  [(set (mem:QI (pre_dec:SI (reg:SI SP_REG)))
-	(match_operand:QI 1 "general_operand" "dami"))
-   (set (reg:SI SP_REG) (minus:SI (reg:SI SP_REG) (const_int 2)))]
-  "! reg_mentioned_p (stack_pointer_rtx, operands[1])"
-{
-  rtx xoperands[4];
-
-  if (GET_CODE (operands[1]) == REG)
-    return "move%.l %1,%-";
-
-  xoperands[1] = operands[1];
-  xoperands[2]
-    = gen_rtx_MEM (QImode, plus_constant (stack_pointer_rtx, 3));
-  xoperands[3] = stack_pointer_rtx;
-  if (!TARGET_COLDFIRE)
-    output_asm_insn ("subq%.w #4,%3\;move%.b %1,%2", xoperands);
-  else
-    output_asm_insn ("subq%.l #4,%3\;move%.b %1,%2", xoperands);
-  return "";
-})
-
-(define_peephole
-  [(set (match_operand:SI 0 "register_operand" "=d")
-	(const_int 0))
-   (set (strict_low_part (subreg:HI (match_dup 0) 2))
-	(match_operand:HI 1 "general_operand" "rmn"))]
-  "strict_low_part_peephole_ok (HImode, prev_nonnote_insn (insn), operands[0])"
-{
-  if (GET_CODE (operands[1]) == CONST_INT)
-    {
-      if (operands[1] == const0_rtx
-	  && (DATA_REG_P (operands[0])
-	      || GET_CODE (operands[0]) == MEM)
-	  /* clr insns on 68000 read before writing.
-	     This isn't so on the 68010, but we have no TARGET_68010.  */
-	  && ((TARGET_68020 || TARGET_COLDFIRE)
-	      || !(GET_CODE (operands[0]) == MEM
-		   && MEM_VOLATILE_P (operands[0]))))
-	return "clr%.w %0";
-    }
-  return "move%.w %1,%0";
-})
+(define_peephole2
+  [(set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int -4)))
+   (set (mem:QI (plus:SI (reg:SI SP_REG) (const_int 3)))
+	(match_operand:QI 0 "register_operand" ""))]
+  "!reg_mentioned_p (stack_pointer_rtx, operands[0])"
+  [(set (mem:SI (pre_dec:SI (reg:SI SP_REG))) (match_dup 0))]
+  "operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]));")
+
+(define_peephole2
+  [(set (mem:HI (pre_dec:SI (reg:SI SP_REG)))
+	(match_operand:HI 0 "register_operand" ""))
+   (set (reg:SI SP_REG) (plus:SI (reg:SI SP_REG) (const_int -2)))]
+  "!reg_mentioned_p (stack_pointer_rtx, operands[0])"
+  [(set (mem:SI (pre_dec:SI (reg:SI SP_REG))) (match_dup 0))]
+  "operands[0] = gen_rtx_REG (SImode, REGNO (operands[0]));")
+
+;;(define_peephole2
+;;  [(set (match_operand:SI 0 "register_operand" "")
+;;	(const_int 0))
+;;   (set (strict_low_part (match_operand:HI 1 "register_operand" ""))
+;;	(match_operand:HI 2 "general_operand" ""))]
+;;  "REGNO (operands[0]) == REGNO (operands[1])
+;;   && strict_low_part_peephole_ok (HImode, insn, operands[0])"
+;;  [(set (strict_low_part (match_dup 1)) (match_dup 2))]
+;;  "")
+;;
+;;(define_peephole2
+;;  [(set (match_operand:SI 0 "register_operand" "")
+;;	(const_int 0))
+;;   (set (strict_low_part (match_operand:QI 1 "register_operand" ""))
+;;	(match_operand:QI 2 "general_operand" ""))]
+;;  "REGNO (operands[0]) == REGNO (operands[1])
+;;   && strict_low_part_peephole_ok (QImode, insn, operands[0])"
+;;  [(set (strict_low_part (match_dup 1)) (match_dup 2))]
+;;  "")
 
 ;; dbCC peepholes
 ;;
