#! /bin/sh -e

# DP: SVN updates from the gcc-4_1-branch-java-merge-20070117 branch upto 20070221.

last_updated()
{
	cat > ${dir}LAST_UPDATED <<EOF
Fri Feb 16 22:58:02 CET 2007
Fri Feb 16 21:58:02 UTC 2007 (revision 122056)
EOF
}

dir=
if [ $# -eq 3 -a "$2" = '-d' ]; then
    pdir="-d $3"
    dir="$3/"
elif [ $# -ne 1 ]; then
    echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
    exit 1
fi
case "$1" in
    -patch)
        patch $pdir -f --no-backup-if-mismatch -p0 < $0
	touch ${dir}libjava/testsuite/libjava.jni/PR28178.out
	find ${dir}libjava \( -name '*.java' -o -name '*.cc' \) -type f -size 0 | xargs -r rm -f
	#last_updated
        #cd ${dir}gcc && autoconf2.59
        ;;
    -unpatch)
        patch $pdir -f --no-backup-if-mismatch -R -p0 < $0
        #rm ${dir}gcc/configure
        ;;
    *)
        echo >&2 "`basename $0`: script expects -patch|-unpatch as argument"
        exit 1
esac
exit 0

# diff -urN --exclude=.svn gcc_4_1_2_release gcc-4_1-branch
# svn diff svn://gcc.gnu.org/svn/gcc/tags/gcc_4_1_2_release svn://gcc.gnu.org/svn/gcc/branches/gcc-4_1-branch
# svn diff -r122041 svn://gcc.gnu.org/svn/gcc/branches/redhat/gcc-4_1-branch-java-merge-20070117

Index: libjava/Makefile.in
===================================================================
--- libjava/Makefile.in	(Revision 122041)
+++ libjava/Makefile.in	(Revision 122203)
@@ -163,9 +163,9 @@
 	gnu/java/awt/font/opentype/truetype.lo gnu/java/awt/image.lo \
 	gnu/java/awt/java2d.lo gnu/java/awt/peer.lo \
 	gnu/java/awt/peer/headless.lo gnu/java/awt/print.lo \
-	gnu/java/io.lo gnu/java/lang.lo gnu/java/lang/management.lo \
-	gnu/java/lang/reflect.lo gnu/java/locale.lo gnu/java/math.lo \
-	gnu/java/net.lo gnu/java/net/loader.lo gnu/java/net/local.lo \
+	gnu/java/io.lo gnu/java/lang.lo gnu/java/lang/reflect.lo \
+	gnu/java/locale.lo gnu/java/math.lo gnu/java/net.lo \
+	gnu/java/net/loader.lo gnu/java/net/local.lo \
 	gnu/java/net/protocol/core.lo gnu/java/net/protocol/file.lo \
 	gnu/java/net/protocol/ftp.lo gnu/java/net/protocol/gcjlib.lo \
 	gnu/java/net/protocol/http.lo gnu/java/net/protocol/https.lo \
@@ -201,8 +201,8 @@
 	gnu/javax/crypto/sasl/plain.lo gnu/javax/crypto/sasl/srp.lo \
 	gnu/javax/imageio.lo gnu/javax/imageio/bmp.lo \
 	gnu/javax/imageio/gif.lo gnu/javax/imageio/jpeg.lo \
-	gnu/javax/imageio/png.lo gnu/javax/management.lo \
-	gnu/javax/naming/giop.lo gnu/javax/naming/ictxImpl/trans.lo \
+	gnu/javax/imageio/png.lo gnu/javax/naming/giop.lo \
+	gnu/javax/naming/ictxImpl/trans.lo \
 	gnu/javax/naming/jndi/url/corbaname.lo \
 	gnu/javax/naming/jndi/url/rmi.lo gnu/javax/net/ssl.lo \
 	gnu/javax/net/ssl/provider.lo gnu/javax/print.lo \
@@ -228,26 +228,25 @@
 	java/awt/peer.lo java/awt/print.lo java/beans.lo \
 	java/beans/beancontext.lo java/io.lo java/lang.lo \
 	java/lang/annotation.lo java/lang/instrument.lo \
-	java/lang/management.lo java/lang/ref.lo java/lang/reflect.lo \
-	java/math.lo java/net.lo java/nio.lo java/nio/channels.lo \
-	java/nio/channels/spi.lo java/nio/charset.lo \
-	java/nio/charset/spi.lo java/rmi.lo java/rmi/activation.lo \
-	java/rmi/dgc.lo java/rmi/registry.lo java/rmi/server.lo \
-	java/security.lo java/security/acl.lo java/security/cert.lo \
-	java/security/interfaces.lo java/security/spec.lo java/sql.lo \
-	java/text.lo java/util.lo java/util/concurrent.lo \
-	java/util/concurrent/atomic.lo java/util/concurrent/locks.lo \
-	java/util/jar.lo java/util/logging.lo java/util/prefs.lo \
-	java/util/regex.lo java/util/zip.lo javax/accessibility.lo \
-	javax/crypto.lo javax/crypto/interfaces.lo \
-	javax/crypto/spec.lo javax/management.lo \
-	javax/management/loading.lo javax/management/openmbean.lo \
-	javax/naming.lo javax/naming/directory.lo \
-	javax/naming/event.lo javax/naming/ldap.lo javax/naming/spi.lo \
-	javax/net.lo javax/net/ssl.lo javax/print.lo \
-	javax/print/attribute.lo javax/print/attribute/standard.lo \
-	javax/print/event.lo javax/security/auth.lo \
-	javax/security/auth/callback.lo \
+	java/lang/ref.lo java/lang/reflect.lo java/math.lo java/net.lo \
+	java/nio.lo java/nio/channels.lo java/nio/channels/spi.lo \
+	java/nio/charset.lo java/nio/charset/spi.lo java/rmi.lo \
+	java/rmi/activation.lo java/rmi/dgc.lo java/rmi/registry.lo \
+	java/rmi/server.lo java/security.lo java/security/acl.lo \
+	java/security/cert.lo java/security/interfaces.lo \
+	java/security/spec.lo java/sql.lo java/text.lo java/util.lo \
+	java/util/concurrent.lo java/util/concurrent/atomic.lo \
+	java/util/concurrent/locks.lo java/util/jar.lo \
+	java/util/logging.lo java/util/prefs.lo java/util/regex.lo \
+	java/util/zip.lo javax/accessibility.lo javax/crypto.lo \
+	javax/crypto/interfaces.lo javax/crypto/spec.lo \
+	javax/management.lo javax/management/loading.lo \
+	javax/management/openmbean.lo javax/naming.lo \
+	javax/naming/directory.lo javax/naming/event.lo \
+	javax/naming/ldap.lo javax/naming/spi.lo javax/net.lo \
+	javax/net/ssl.lo javax/print.lo javax/print/attribute.lo \
+	javax/print/attribute/standard.lo javax/print/event.lo \
+	javax/security/auth.lo javax/security/auth/callback.lo \
 	javax/security/auth/kerberos.lo javax/security/auth/login.lo \
 	javax/security/auth/spi.lo javax/security/auth/x500.lo \
 	javax/security/cert.lo javax/security/sasl.lo \
@@ -266,10 +265,11 @@
 	sun/reflect.lo sun/reflect/annotation.lo sun/reflect/misc.lo
 am__DEPENDENCIES_2 = gnu-CORBA.lo gnu-java-awt-dnd-peer-gtk.lo \
 	gnu-java-awt-peer-gtk.lo gnu-java-awt-peer-swing.lo \
-	gnu-java-beans.lo gnu-java-util-prefs-gconf.lo \
+	gnu-java-beans.lo gnu-java-lang-management.lo \
+	gnu-java-util-prefs-gconf.lo gnu-javax-management.lo \
 	gnu-javax-rmi.lo gnu-javax-sound-midi.lo gnu-xml.lo \
-	javax-imageio.lo javax-rmi.lo javax-xml.lo org-omg.lo \
-	org-relaxng.lo org-w3c.lo org-xml.lo
+	java-lang-management.lo javax-imageio.lo javax-rmi.lo \
+	javax-xml.lo org-omg.lo org-relaxng.lo org-w3c.lo org-xml.lo
 am__DEPENDENCIES_3 = $(patsubst classpath/resource/%,%,$(addsuffix \
 	.lo,$(property_files)))
 am__DEPENDENCIES_4 =
@@ -311,16 +311,15 @@
 	gnu/java/nio/natVMChannel.cc \
 	gnu/java/nio/channels/natFileChannelImpl.cc java/io/natFile.cc \
 	java/io/natObjectInputStream.cc \
-	java/io/natVMObjectStreamClass.cc \
-	java/lang/management/natVMManagementFactory.cc \
-	java/lang/natCharacter.cc java/lang/natClass.cc \
-	java/lang/natClassLoader.cc java/lang/natConcreteProcess.cc \
-	java/lang/natDouble.cc java/lang/natFloat.cc \
-	java/lang/natMath.cc java/lang/natObject.cc \
-	java/lang/natRuntime.cc java/lang/natString.cc \
-	java/lang/natStringBuffer.cc java/lang/natStringBuilder.cc \
-	java/lang/natSystem.cc java/lang/natThread.cc \
-	java/lang/natThreadLocal.cc java/lang/natVMClassLoader.cc \
+	java/io/natVMObjectStreamClass.cc java/lang/natCharacter.cc \
+	java/lang/natClass.cc java/lang/natClassLoader.cc \
+	java/lang/natConcreteProcess.cc java/lang/natDouble.cc \
+	java/lang/natFloat.cc java/lang/natMath.cc \
+	java/lang/natObject.cc java/lang/natRuntime.cc \
+	java/lang/natString.cc java/lang/natStringBuffer.cc \
+	java/lang/natStringBuilder.cc java/lang/natSystem.cc \
+	java/lang/natThread.cc java/lang/natThreadLocal.cc \
+	java/lang/natVMClassLoader.cc java/lang/natVMProcess.cc \
 	java/lang/natVMThrowable.cc java/lang/ref/natReference.cc \
 	java/lang/reflect/natArray.cc \
 	java/lang/reflect/natConstructor.cc \
@@ -374,16 +373,15 @@
 	gnu/java/nio/natVMChannel.lo \
 	gnu/java/nio/channels/natFileChannelImpl.lo java/io/natFile.lo \
 	java/io/natObjectInputStream.lo \
-	java/io/natVMObjectStreamClass.lo \
-	java/lang/management/natVMManagementFactory.lo \
-	java/lang/natCharacter.lo java/lang/natClass.lo \
-	java/lang/natClassLoader.lo java/lang/natConcreteProcess.lo \
-	java/lang/natDouble.lo java/lang/natFloat.lo \
-	java/lang/natMath.lo java/lang/natObject.lo \
-	java/lang/natRuntime.lo java/lang/natString.lo \
-	java/lang/natStringBuffer.lo java/lang/natStringBuilder.lo \
-	java/lang/natSystem.lo java/lang/natThread.lo \
-	java/lang/natThreadLocal.lo java/lang/natVMClassLoader.lo \
+	java/io/natVMObjectStreamClass.lo java/lang/natCharacter.lo \
+	java/lang/natClass.lo java/lang/natClassLoader.lo \
+	java/lang/natConcreteProcess.lo java/lang/natDouble.lo \
+	java/lang/natFloat.lo java/lang/natMath.lo \
+	java/lang/natObject.lo java/lang/natRuntime.lo \
+	java/lang/natString.lo java/lang/natStringBuffer.lo \
+	java/lang/natStringBuilder.lo java/lang/natSystem.lo \
+	java/lang/natThread.lo java/lang/natThreadLocal.lo \
+	java/lang/natVMClassLoader.lo java/lang/natVMProcess.lo \
 	java/lang/natVMThrowable.lo java/lang/ref/natReference.lo \
 	java/lang/reflect/natArray.lo \
 	java/lang/reflect/natConstructor.lo \
@@ -1124,7 +1122,6 @@
 gnu_awt_xlib_header_files = $(patsubst %.java,%.h,$(gnu_awt_xlib_source_files))
 gnu_classpath_source_files = \
 gnu/classpath/Configuration.java \
-classpath/gnu/classpath/ListenerData.java \
 classpath/gnu/classpath/NotImplementedException.java \
 classpath/gnu/classpath/Pointer.java \
 classpath/gnu/classpath/Pointer32.java \
@@ -2861,9 +2858,9 @@
 
 gnu_javax_imageio_png_header_files = $(patsubst classpath/%,%,$(patsubst %.java,%.h,$(gnu_javax_imageio_png_source_files)))
 gnu_javax_management_source_files = \
+classpath/gnu/javax/management/ListenerData.java \
 classpath/gnu/javax/management/Server.java
 
-gnu_javax_management_header_files = $(patsubst classpath/%,%,$(patsubst %.java,%.h,$(gnu_javax_management_source_files)))
 gnu_javax_naming_giop_source_files = \
 classpath/gnu/javax/naming/giop/ContextContinuation.java \
 classpath/gnu/javax/naming/giop/CorbalocParser.java \
@@ -4234,7 +4231,7 @@
 classpath/java/lang/Package.java \
 java/lang/PosixProcess.java \
 classpath/java/lang/Process.java \
-java/lang/ProcessBuilder.java \
+classpath/java/lang/ProcessBuilder.java \
 classpath/java/lang/Readable.java \
 classpath/java/lang/Runnable.java \
 java/lang/Runtime.java \
@@ -4266,6 +4263,7 @@
 java/lang/VMCompiler.java \
 java/lang/VMDouble.java \
 java/lang/VMFloat.java \
+java/lang/VMProcess.java \
 java/lang/VMThrowable.java \
 classpath/java/lang/VerifyError.java \
 classpath/java/lang/VirtualMachineError.java \
@@ -4312,7 +4310,6 @@
 classpath/java/lang/management/ThreadMXBean.java \
 java/lang/management/VMManagementFactory.java
 
-java_lang_management_header_files = $(patsubst classpath/%,%,$(patsubst %.java,%.h,$(java_lang_management_source_files)))
 java_lang_ref_source_files = \
 classpath/java/lang/ref/PhantomReference.java \
 java/lang/ref/Reference.java \
@@ -4372,9 +4369,9 @@
 classpath/java/net/JarURLConnection.java \
 classpath/java/net/MalformedURLException.java \
 classpath/java/net/MimeTypeMapper.java \
-java/net/MulticastSocket.java \
+classpath/java/net/MulticastSocket.java \
 classpath/java/net/NetPermission.java \
-java/net/NetworkInterface.java \
+classpath/java/net/NetworkInterface.java \
 classpath/java/net/NoRouteToHostException.java \
 classpath/java/net/PasswordAuthentication.java \
 classpath/java/net/PortUnreachableException.java \
@@ -7203,7 +7200,6 @@
   gnu/java/awt/print.list \
   gnu/java/io.list \
   gnu/java/lang.list \
-  gnu/java/lang/management.list \
   gnu/java/lang/reflect.list \
   gnu/java/locale.list \
   gnu/java/math.list \
@@ -7281,7 +7277,6 @@
   gnu/javax/imageio/gif.list \
   gnu/javax/imageio/jpeg.list \
   gnu/javax/imageio/png.list \
-  gnu/javax/management.list \
   gnu/javax/naming/giop.list \
   gnu/javax/naming/ictxImpl/trans.list \
   gnu/javax/naming/jndi/url/corbaname.list \
@@ -7330,7 +7325,6 @@
   java/lang.list \
   java/lang/annotation.list \
   java/lang/instrument.list \
-  java/lang/management.list \
   java/lang/ref.list \
   java/lang/reflect.list \
   java/math.list \
@@ -7529,7 +7523,6 @@
   $(gnu_javax_imageio_gif_header_files) \
   $(gnu_javax_imageio_jpeg_header_files) \
   $(gnu_javax_imageio_png_header_files) \
-  $(gnu_javax_management_header_files) \
   $(gnu_javax_naming_giop_header_files) \
   $(gnu_javax_naming_ictxImpl_trans_header_files) \
   $(gnu_javax_naming_jndi_url_corbaname_header_files) \
@@ -7578,7 +7571,6 @@
   $(java_lang_header_files) \
   $(java_lang_annotation_header_files) \
   $(java_lang_instrument_header_files) \
-  $(java_lang_management_header_files) \
   $(java_lang_ref_header_files) \
   $(java_lang_reflect_header_files) \
   $(java_math_header_files) \
@@ -7671,10 +7663,13 @@
   gnu-java-awt-peer-gtk.lo \
   gnu-java-awt-peer-swing.lo \
   gnu-java-beans.lo \
+  gnu-java-lang-management.lo \
   gnu-java-util-prefs-gconf.lo \
+  gnu-javax-management.lo \
   gnu-javax-rmi.lo \
   gnu-javax-sound-midi.lo \
   gnu-xml.lo \
+  java-lang-management.lo \
   javax-imageio.lo \
   javax-rmi.lo \
   javax-xml.lo \
@@ -7731,6 +7726,7 @@
 	java/nio/DirectByteBufferImpl$$ReadWrite.h \
 	java/nio/channels/Pipe$$SinkChannel.h \
 	java/nio/channels/Pipe$$SourceChannel.h \
+	java/lang/VMProcess$ImmediateEOFInputStream.h \
 	java/lang/reflect/Proxy$$ProxyData.h \
 	java/lang/reflect/Proxy$$ProxyType.h \
 	gnu/java/net/PlainSocketImpl$$SocketInputStream.h \
@@ -7920,7 +7916,6 @@
 java/io/natFile.cc \
 java/io/natObjectInputStream.cc \
 java/io/natVMObjectStreamClass.cc \
-java/lang/management/natVMManagementFactory.cc \
 java/lang/natCharacter.cc \
 java/lang/natClass.cc \
 java/lang/natClassLoader.cc \
@@ -7937,6 +7932,7 @@
 java/lang/natThread.cc \
 java/lang/natThreadLocal.cc \
 java/lang/natVMClassLoader.cc \
+java/lang/natVMProcess.cc \
 java/lang/natVMThrowable.cc \
 java/lang/ref/natReference.cc \
 java/lang/reflect/natArray.cc \
@@ -8406,15 +8402,6 @@
 	java/io/$(DEPDIR)/$(am__dirstamp)
 java/io/natVMObjectStreamClass.lo: java/io/$(am__dirstamp) \
 	java/io/$(DEPDIR)/$(am__dirstamp)
-java/lang/management/$(am__dirstamp):
-	@$(mkdir_p) java/lang/management
-	@: > java/lang/management/$(am__dirstamp)
-java/lang/management/$(DEPDIR)/$(am__dirstamp):
-	@$(mkdir_p) java/lang/management/$(DEPDIR)
-	@: > java/lang/management/$(DEPDIR)/$(am__dirstamp)
-java/lang/management/natVMManagementFactory.lo:  \
-	java/lang/management/$(am__dirstamp) \
-	java/lang/management/$(DEPDIR)/$(am__dirstamp)
 java/lang/$(am__dirstamp):
 	@$(mkdir_p) java/lang
 	@: > java/lang/$(am__dirstamp)
@@ -8453,6 +8440,8 @@
 	java/lang/$(DEPDIR)/$(am__dirstamp)
 java/lang/natVMClassLoader.lo: java/lang/$(am__dirstamp) \
 	java/lang/$(DEPDIR)/$(am__dirstamp)
+java/lang/natVMProcess.lo: java/lang/$(am__dirstamp) \
+	java/lang/$(DEPDIR)/$(am__dirstamp)
 java/lang/natVMThrowable.lo: java/lang/$(am__dirstamp) \
 	java/lang/$(DEPDIR)/$(am__dirstamp)
 java/lang/ref/$(am__dirstamp):
@@ -8861,8 +8850,6 @@
 	-rm -f java/io/natVMObjectStreamClass.lo
 	-rm -f java/lang/Object.$(OBJEXT)
 	-rm -f java/lang/Object.lo
-	-rm -f java/lang/management/natVMManagementFactory.$(OBJEXT)
-	-rm -f java/lang/management/natVMManagementFactory.lo
 	-rm -f java/lang/natCharacter.$(OBJEXT)
 	-rm -f java/lang/natCharacter.lo
 	-rm -f java/lang/natClass.$(OBJEXT)
@@ -8895,6 +8882,8 @@
 	-rm -f java/lang/natThreadLocal.lo
 	-rm -f java/lang/natVMClassLoader.$(OBJEXT)
 	-rm -f java/lang/natVMClassLoader.lo
+	-rm -f java/lang/natVMProcess.$(OBJEXT)
+	-rm -f java/lang/natVMProcess.lo
 	-rm -f java/lang/natVMThrowable.$(OBJEXT)
 	-rm -f java/lang/natVMThrowable.lo
 	-rm -f java/lang/ref/natReference.$(OBJEXT)
@@ -9045,8 +9034,8 @@
 @AMDEP_TRUE@@am__include@ @am__quote@java/lang/$(DEPDIR)/natThread.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@java/lang/$(DEPDIR)/natThreadLocal.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@java/lang/$(DEPDIR)/natVMClassLoader.Plo@am__quote@
+@AMDEP_TRUE@@am__include@ @am__quote@java/lang/$(DEPDIR)/natVMProcess.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@java/lang/$(DEPDIR)/natVMThrowable.Plo@am__quote@
-@AMDEP_TRUE@@am__include@ @am__quote@java/lang/management/$(DEPDIR)/natVMManagementFactory.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@java/lang/ref/$(DEPDIR)/natReference.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@java/lang/reflect/$(DEPDIR)/natArray.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@java/lang/reflect/$(DEPDIR)/natConstructor.Plo@am__quote@
@@ -9334,7 +9323,6 @@
 	-rm -rf gnu/java/nio/channels/.libs gnu/java/nio/channels/_libs
 	-rm -rf java/io/.libs java/io/_libs
 	-rm -rf java/lang/.libs java/lang/_libs
-	-rm -rf java/lang/management/.libs java/lang/management/_libs
 	-rm -rf java/lang/ref/.libs java/lang/ref/_libs
 	-rm -rf java/lang/reflect/.libs java/lang/reflect/_libs
 	-rm -rf java/net/.libs java/net/_libs
@@ -9744,8 +9732,6 @@
 	-rm -f java/io/$(am__dirstamp)
 	-rm -f java/lang/$(DEPDIR)/$(am__dirstamp)
 	-rm -f java/lang/$(am__dirstamp)
-	-rm -f java/lang/management/$(DEPDIR)/$(am__dirstamp)
-	-rm -f java/lang/management/$(am__dirstamp)
 	-rm -f java/lang/ref/$(DEPDIR)/$(am__dirstamp)
 	-rm -f java/lang/ref/$(am__dirstamp)
 	-rm -f java/lang/reflect/$(DEPDIR)/$(am__dirstamp)
@@ -9783,7 +9769,7 @@
 
 distclean: distclean-recursive
 	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
-	-rm -rf ./$(DEPDIR) classpath/tools/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/classpath/jdwp/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/jvmti/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/tools/gcj_dbtool/$(DEPDIR) gnu/gcj/util/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/lang/management/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/management/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/security/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/concurrent/atomic/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/zip/$(DEPDIR) sun/misc/$(DEPDIR)
+	-rm -rf ./$(DEPDIR) classpath/tools/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/classpath/jdwp/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/jvmti/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/tools/gcj_dbtool/$(DEPDIR) gnu/gcj/util/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/lang/management/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/security/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/concurrent/atomic/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/zip/$(DEPDIR) sun/misc/$(DEPDIR)
 	-rm -f Makefile
 distclean-am: clean-am distclean-compile distclean-generic \
 	distclean-libtool distclean-local distclean-tags
@@ -9816,7 +9802,7 @@
 maintainer-clean: maintainer-clean-recursive
 	-rm -f $(am__CONFIG_DISTCLEAN_FILES)
 	-rm -rf $(top_srcdir)/autom4te.cache
-	-rm -rf ./$(DEPDIR) classpath/tools/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/classpath/jdwp/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/jvmti/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/tools/gcj_dbtool/$(DEPDIR) gnu/gcj/util/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/lang/management/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/management/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/security/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/concurrent/atomic/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/zip/$(DEPDIR) sun/misc/$(DEPDIR)
+	-rm -rf ./$(DEPDIR) classpath/tools/$(DEPDIR) gnu/classpath/$(DEPDIR) gnu/classpath/jdwp/$(DEPDIR) gnu/gcj/$(DEPDIR) gnu/gcj/convert/$(DEPDIR) gnu/gcj/io/$(DEPDIR) gnu/gcj/jvmti/$(DEPDIR) gnu/gcj/runtime/$(DEPDIR) gnu/gcj/tools/gcj_dbtool/$(DEPDIR) gnu/gcj/util/$(DEPDIR) gnu/gcj/xlib/$(DEPDIR) gnu/java/lang/$(DEPDIR) gnu/java/lang/management/$(DEPDIR) gnu/java/net/$(DEPDIR) gnu/java/net/protocol/core/$(DEPDIR) gnu/java/nio/$(DEPDIR) gnu/java/nio/channels/$(DEPDIR) java/io/$(DEPDIR) java/lang/$(DEPDIR) java/lang/ref/$(DEPDIR) java/lang/reflect/$(DEPDIR) java/net/$(DEPDIR) java/nio/$(DEPDIR) java/nio/channels/$(DEPDIR) java/security/$(DEPDIR) java/text/$(DEPDIR) java/util/$(DEPDIR) java/util/concurrent/atomic/$(DEPDIR) java/util/logging/$(DEPDIR) java/util/zip/$(DEPDIR) sun/misc/$(DEPDIR)
 	-rm -f Makefile
 maintainer-clean-am: distclean-am maintainer-clean-generic
 
@@ -10167,12 +10153,11 @@
 
 -include gnu/java/lang.deps
 
-gnu/java/lang/management.list: $(gnu_java_lang_management_source_files)
-	@$(mkinstalldirs) $(dir $@)
-	echo $(srcdir)/classpath/lib/gnu/java/lang/management/*.class > gnu/java/lang/management.list
+gnu-java-lang-management.lo: $(gnu_java_lang_management_source_files)
+	@find $(srcdir)/classpath/lib/gnu/java/lang/management -name '*.class' > gnu-java-lang-management.list
+	$(LTGCJCOMPILE) -fsource-filename=$(here)/classpath/lib/classes -findirect-dispatch -fno-indirect-classes -c -o gnu-java-lang-management.lo @gnu-java-lang-management.list
+	@rm -f gnu-java-lang-management.list
 
--include gnu/java/lang/management.deps
-
 gnu/java/lang/reflect.list: $(gnu_java_lang_reflect_source_files)
 	@$(mkinstalldirs) $(dir $@)
 	echo $(srcdir)/classpath/lib/gnu/java/lang/reflect/*.class > gnu/java/lang/reflect.list
@@ -10640,12 +10625,11 @@
 
 -include gnu/javax/imageio/png.deps
 
-gnu/javax/management.list: $(gnu_javax_management_source_files)
-	@$(mkinstalldirs) $(dir $@)
-	echo $(srcdir)/classpath/lib/gnu/javax/management/*.class > gnu/javax/management.list
+gnu-javax-management.lo: $(gnu_javax_management_source_files)
+	@find $(srcdir)/classpath/lib/gnu/javax/management -name '*.class' > gnu-javax-management.list
+	$(LTGCJCOMPILE) -fsource-filename=$(here)/classpath/lib/classes -fjni -findirect-dispatch -fno-indirect-classes -c -o gnu-javax-management.lo @gnu-javax-management.list
+	@rm -f gnu-javax-management.list
 
--include gnu/javax/management.deps
-
 gnu/javax/naming/giop.list: $(gnu_javax_naming_giop_source_files)
 	@$(mkinstalldirs) $(dir $@)
 	echo $(srcdir)/classpath/lib/gnu/javax/naming/giop/*.class > gnu/javax/naming/giop.list
@@ -10933,7 +10917,7 @@
 
 java/lang.list: $(java_lang_source_files)
 	@$(mkinstalldirs) $(dir $@)
-	echo $(srcdir)/classpath/lib/java/lang/*.class | tr ' ' '\n' | fgrep -v Object.class | fgrep -v Class.class | grep -v '[^/]Process' > java/lang.list
+	echo $(srcdir)/classpath/lib/java/lang/*.class | tr ' ' '\n' | fgrep -v Object.class | fgrep -v Class.class | egrep -v '(Ecos|Posix|Win32)Process' > java/lang.list
 
 -include java/lang.deps
 
@@ -10949,12 +10933,11 @@
 
 -include java/lang/instrument.deps
 
-java/lang/management.list: $(java_lang_management_source_files)
-	@$(mkinstalldirs) $(dir $@)
-	echo $(srcdir)/classpath/lib/java/lang/management/*.class > java/lang/management.list
+java-lang-management.lo: $(java_lang_management_source_files)
+	@find $(srcdir)/classpath/lib/java/lang/management -name '*.class' > java-lang-management.list
+	$(LTGCJCOMPILE) -fsource-filename=$(here)/classpath/lib/classes -fjni -findirect-dispatch -fno-indirect-classes -c -o java-lang-management.lo @java-lang-management.list
+	@rm -f java-lang-management.list
 
--include java/lang/management.deps
-
 java/lang/ref.list: $(java_lang_ref_source_files)
 	@$(mkinstalldirs) $(dir $@)
 	echo $(srcdir)/classpath/lib/java/lang/ref/*.class > java/lang/ref.list
Index: libjava/scripts/makemake.tcl
===================================================================
--- libjava/scripts/makemake.tcl	(Revision 122041)
+++ libjava/scripts/makemake.tcl	(Revision 122203)
@@ -22,6 +22,8 @@
 # * bc    objects in this package and all its sub-packages
 #         are to be compiled with the BC ABI.  It is an error
 #         for sub-packages to also appear in the map.
+# * bcheaders 
+#         as bc, but generate header files and compile with CNI.
 # * package
 #         objects in this package (and possibly sub-packages,
 #         if they do not appear in the map) will be compiled en masse
@@ -64,6 +66,10 @@
 set package_map(org/omg) bc
 set package_map(gnu/CORBA) bc
 set package_map(gnu/javax/rmi) bc
+set package_map(gnu/java/lang/management) bcheaders
+set package_map(java/lang/management) bc
+set package_map(gnu/classpath/management) bc
+set package_map(gnu/javax/management) bc
 
 # More special cases.  These end up in their own library.
 # Note that if we BC-compile AWT we must update these as well.
@@ -248,7 +254,11 @@
     set omit "| grep -v $exclusion_map($package)"
   }
   puts  "\t@find \$(srcdir)/classpath/lib/$package -name '*.class'${omit} > $tname"
-  puts "\t\$(LTGCJCOMPILE) -fsource-filename=\$(here)/classpath/lib/classes -fjni -findirect-dispatch -fno-indirect-classes -c -o $loname @$tname"
+  puts -nonewline "\t\$(LTGCJCOMPILE) -fsource-filename=\$(here)/classpath/lib/classes "
+  if {$package_map($package) == "bc"} {
+    puts -nonewline "-fjni "
+  }
+  puts "-findirect-dispatch -fno-indirect-classes -c -o $loname @$tname"
   puts "\t@rm -f $tname"
   puts ""
 
@@ -277,7 +287,7 @@
     # Object and Class are special cases due to an apparent compiler
     # bug.  Process is a special case because we don't build all
     # concrete implementations of Process on all platforms.
-    set omit "| tr ' ' '\\n' | fgrep -v Object.class | fgrep -v Class.class | grep -v '\[^/\]Process' "
+    set omit "| tr ' ' '\\n' | fgrep -v Object.class | fgrep -v Class.class | egrep -v '\(Ecos\|Posix\|Win32\)Process' "
   } else {
     set omit ""
   }
@@ -418,6 +428,8 @@
 
   if {$package_map($package) == "bc"} {
     emit_bc_rule $package
+  } elseif {$package_map($package) == "bcheaders"} {
+    emit_bc_rule $package
   } elseif {$package_map($package) == "ordinary"} {
     # Nothing in particular to do here.
   } elseif {$package_map($package) == "package"} {
Index: libjava/classpath/gnu/java/lang/management/MemoryMXBeanImpl.java
===================================================================
--- libjava/classpath/gnu/java/lang/management/MemoryMXBeanImpl.java	(Revision 122041)
+++ libjava/classpath/gnu/java/lang/management/MemoryMXBeanImpl.java	(Revision 122203)
@@ -37,7 +37,7 @@
 
 package gnu.java.lang.management;
 
-import gnu.classpath.ListenerData;
+import gnu.javax.management.ListenerData;
 
 import java.lang.management.MemoryMXBean;
 import java.lang.management.MemoryNotificationInfo;
Index: libjava/classpath/gnu/classpath/ListenerData.java
===================================================================
--- libjava/classpath/gnu/classpath/ListenerData.java	(Revision 122041)
+++ libjava/classpath/gnu/classpath/ListenerData.java	(Revision 122203)
@@ -1,136 +0,0 @@
-/* ListenerData.java - Class to contain data about management bean listeners
-   Copyright (C) 2006 Free Software Foundation
-
-This file is part of GNU Classpath.
-
-GNU Classpath is free software; you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation; either version 2, or (at your option)
-any later version.
-
-GNU Classpath is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
-02110-1301 USA.
-
-Linking this library statically or dynamically with other modules is
-making a combined work based on this library.  Thus, the terms and
-conditions of the GNU General Public License cover the whole
-combination.
-
-As a special exception, the copyright holders of this library give you
-permission to link this library with independent modules to produce an
-executable, regardless of the license terms of these independent
-modules, and to copy and distribute the resulting executable under
-terms of your choice, provided that you also meet, for each linked
-independent module, the terms and conditions of the license of that
-module.  An independent module is a module which is not derived from
-or based on this library.  If you modify this library, you may extend
-this exception to your version of the library, but you are not
-obligated to do so.  If you do not wish to do so, delete this
-exception statement from your version. */
-
-package gnu.classpath;
-
-import javax.management.NotificationFilter;
-import javax.management.NotificationListener;
-
-/**
- * Container for data on management listeners.  Wraps
- * a {@link javax.management.NotificationListener},
- * {@link javax.management.NotificationFilter} and
- * passback object in one class.
- *
- * @author Andrew John Hughes (gnu_andrew@member.fsf.org)
- * @since 1.5
- */
-public class ListenerData
-{
-  /**
-   * The listener itself.
-   */
-  private NotificationListener listener;
-
-  /**
-   * A filter to apply to incoming events.
-   */
-  private NotificationFilter filter;
-
-  /**
-   * An object to pass back to the listener on an
-   * event occurring.
-   */
-  private Object passback;
-  
-  /**
-   * Constructs a new {@link ListenerData} with the specified
-   * listener, filter and passback object.
-   *
-   * @param listener the listener itself.
-   * @param filter the filter for incoming events.
-   * @param passback the object to passback on an incoming event.
-   */
-  public ListenerData(NotificationListener listener,
-		      NotificationFilter filter, Object passback)
-  {
-    this.listener = listener;
-    this.filter = filter;
-    this.passback = passback;
-  }
-  
-  /**
-   * Returns the listener.
-   *
-   * @return the listener.
-   */
-  public NotificationListener getListener()
-  {
-    return listener;
-  }
-  
-  /**
-   * Returns the filter.
-   *
-   * @return the filter.
-   */
-  public NotificationFilter getFilter()
-  {
-    return filter;
-  }
-  
-  /**
-   * Returns the passback object.
-   *
-   * @return the passback object.
-   */
-  public Object getPassback()
-  {
-    return passback;
-  }
-  
-  /**
-   * Returns true if the supplied object is an instance of
-   * {@link ListenerData} and has the same listener, filter
-   * and passback object.
-   *
-   * @param obj the object to check.
-   * @return true if <code>obj</code> is equal to this.
-   */
-  public boolean equals(Object obj)
-  {
-    if (obj instanceof ListenerData)
-      {
-	ListenerData data = (ListenerData) obj;
-	return (data.getListener() == listener &&
-		data.getFilter() == filter &&
-		data.getPassback() == passback);
-      }
-    return false;
-  }
-  
-}
Index: libjava/classpath/gnu/javax/management/ListenerData.java
===================================================================
--- libjava/classpath/gnu/javax/management/ListenerData.java	(Revision 0)
+++ libjava/classpath/gnu/javax/management/ListenerData.java	(Revision 122203)
@@ -0,0 +1,136 @@
+/* ListenerData.java - Class to contain data about management bean listeners
+   Copyright (C) 2006 Free Software Foundation
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package gnu.javax.management;
+
+import javax.management.NotificationFilter;
+import javax.management.NotificationListener;
+
+/**
+ * Container for data on management listeners.  Wraps
+ * a {@link javax.management.NotificationListener},
+ * {@link javax.management.NotificationFilter} and
+ * passback object in one class.
+ *
+ * @author Andrew John Hughes (gnu_andrew@member.fsf.org)
+ * @since 1.5
+ */
+public class ListenerData
+{
+  /**
+   * The listener itself.
+   */
+  private NotificationListener listener;
+
+  /**
+   * A filter to apply to incoming events.
+   */
+  private NotificationFilter filter;
+
+  /**
+   * An object to pass back to the listener on an
+   * event occurring.
+   */
+  private Object passback;
+  
+  /**
+   * Constructs a new {@link ListenerData} with the specified
+   * listener, filter and passback object.
+   *
+   * @param listener the listener itself.
+   * @param filter the filter for incoming events.
+   * @param passback the object to passback on an incoming event.
+   */
+  public ListenerData(NotificationListener listener,
+		      NotificationFilter filter, Object passback)
+  {
+    this.listener = listener;
+    this.filter = filter;
+    this.passback = passback;
+  }
+  
+  /**
+   * Returns the listener.
+   *
+   * @return the listener.
+   */
+  public NotificationListener getListener()
+  {
+    return listener;
+  }
+  
+  /**
+   * Returns the filter.
+   *
+   * @return the filter.
+   */
+  public NotificationFilter getFilter()
+  {
+    return filter;
+  }
+  
+  /**
+   * Returns the passback object.
+   *
+   * @return the passback object.
+   */
+  public Object getPassback()
+  {
+    return passback;
+  }
+  
+  /**
+   * Returns true if the supplied object is an instance of
+   * {@link ListenerData} and has the same listener, filter
+   * and passback object.
+   *
+   * @param obj the object to check.
+   * @return true if <code>obj</code> is equal to this.
+   */
+  public boolean equals(Object obj)
+  {
+    if (obj instanceof ListenerData)
+      {
+	ListenerData data = (ListenerData) obj;
+	return (data.getListener() == listener &&
+		data.getFilter() == filter &&
+		data.getPassback() == passback);
+      }
+    return false;
+  }
+  
+}
Index: libjava/classpath/javax/management/StandardMBean.java
===================================================================
--- libjava/classpath/javax/management/StandardMBean.java	(Revision 122041)
+++ libjava/classpath/javax/management/StandardMBean.java	(Revision 122203)
@@ -69,7 +69,7 @@
   /**
    * The interface for this bean.
    */
-  private Class iface;
+  private Class<?> iface;
 
   /**
    * The implementation of the interface.
@@ -94,7 +94,7 @@
    *                                    in the interface that doesn't comply
    *                                    with the naming conventions.
    */
-  protected StandardMBean(Class iface)
+  protected StandardMBean(Class<?> iface)
     throws NotCompliantMBeanException
   {
     if (iface == null)
@@ -133,7 +133,7 @@
    *                                    in the interface that doesn't comply
    *                                    with the naming conventions.
    */
-  public StandardMBean(Object impl, Class iface)
+  public <T> StandardMBean(T impl, Class<T> iface)
     throws NotCompliantMBeanException
   {
     if (impl == null)
@@ -143,8 +143,8 @@
 	String className = impl.getClass().getName();
 	try
 	  {
-	    iface = Class.forName(className + "MBean", true,
-				  impl.getClass().getClassLoader());
+	    this.iface = Class.forName(className + "MBean", true,
+				       impl.getClass().getClassLoader());
 	  }
 	catch (ClassNotFoundException e)
 	  {
@@ -154,11 +154,12 @@
 					      " was not found.").initCause(e));
 	  }
       }
-    if (!(iface.isInstance(impl)))
+    else
+      this.iface = iface;
+    if (!(this.iface.isInstance(impl)))
       throw new NotCompliantMBeanException("The instance, " + impl + 
 					   ", is not an instance of " + iface);
     this.impl = impl;
-    this.iface = iface;
   }
 
   /**
@@ -493,7 +494,7 @@
    *
    * @return the implementation class.
    */
-  public Class getImplementationClass()
+  public Class<?> getImplementationClass()
   {
     return impl.getClass();
   }
@@ -681,7 +682,7 @@
    *
    * @return the management interface.
    */
-  public final Class getMBeanInterface()
+  public final Class<?> getMBeanInterface()
   {
     return iface;
   }
Index: libjava/classpath/javax/management/MBeanServerDelegate.java
===================================================================
--- libjava/classpath/javax/management/MBeanServerDelegate.java	(Revision 122041)
+++ libjava/classpath/javax/management/MBeanServerDelegate.java	(Revision 122203)
@@ -37,7 +37,7 @@
 
 package javax.management;
 
-import gnu.classpath.ListenerData;
+import gnu.javax.management.ListenerData;
 import gnu.classpath.SystemProperties;
 
 import java.net.InetAddress;
Index: libjava/classpath/javax/management/ObjectName.java
===================================================================
--- libjava/classpath/javax/management/ObjectName.java	(Revision 122041)
+++ libjava/classpath/javax/management/ObjectName.java	(Revision 122203)
@@ -105,7 +105,7 @@
   /**
    * The properties, as key-value pairs.
    */
-  private TreeMap properties;
+  private TreeMap<String,String> properties = new TreeMap<String,String>();
 
   /**
    * The properties as a string (stored for ordering).
@@ -164,7 +164,6 @@
 	  throw new MalformedObjectNameException("A name that is not a " +
 						 "pattern must contain at " +
 						 "least one key-value pair.");
-	properties = new TreeMap();
 	for (int a = 0; a < pairs.length; ++a)
 	  {
 	    int sep = pairs[a].indexOf('=');
@@ -197,7 +196,6 @@
     throws MalformedObjectNameException
   {
     this.domain = domain;
-    properties = new TreeMap();
     properties.put(key, value);
     checkComponents();
   }
@@ -216,7 +214,7 @@
    * @throws NullPointerException if one of the parameters is
    *                              <code>null</code>.
    */
-  public ObjectName(String domain, Hashtable properties)
+  public ObjectName(String domain, Hashtable<String,String> properties)
     throws MalformedObjectNameException
   {
     this.domain = domain;
@@ -305,70 +303,80 @@
   {
     if (name.isPattern())
       return false;
-    if (isPattern())
+
+    if (!isPattern())
+      return equals(name);
+
+    if (isDomainPattern())
       {
-	boolean domainMatch, propMatch;
-	if (isDomainPattern())
+	if (!domainMatches(domain, 0, name.getDomain(), 0))
+	  return false;
+      }
+    else
+      {
+	if (!domain.equals(name.getDomain()))
+	  return false;
+      }
+
+    if (isPropertyPattern())
+      {
+	Hashtable oProps = name.getKeyPropertyList();
+	Iterator i = properties.entrySet().iterator();
+	while (i.hasNext())
 	  {
-	    String oDomain = name.getDomain();
-	    int oLength = oDomain.length();
-	    for (int a = 0; a < domain.length(); ++a)
-	      {
-		char n = domain.charAt(a);
-		if (oLength == a && n != '*')
-		  return false;
-		if (n == '?')
-		  continue;
-		if (n == '*')
-		  if ((a + 1) < domain.length())
-		    {
-		      if (oLength == a)
-			return false;
-		      char next;
-		      do
-			{
-			  next = domain.charAt(a + 1);
-			} while (next == '*');
-		      if (next == '?')
-			continue;
-		      int pos = a;
-		      while (oDomain.charAt(pos) != next)
-			{
-			  ++pos;
-			  if (pos == oLength)
-			    return false;
-			}
-		    }
-		if (n != oDomain.charAt(a))
-		  return false;
-	      }
-	    domainMatch = true;
+	    Map.Entry entry = (Map.Entry) i.next();
+	    String key = (String) entry.getKey();
+	    if (!(oProps.containsKey(key)))
+	      return false;
+	    String val = (String) entry.getValue();
+	    if (!(val.equals(oProps.get(key))))
+	      return false;
 	  }
-	else
-	  domainMatch = domain.equals(name.getDomain());
-	if (isPropertyPattern())
+      }
+    else
+      {
+	if (!getCanonicalKeyPropertyListString().equals
+	    (name.getCanonicalKeyPropertyListString()))
+	  return false;
+      }
+    return true;
+  }
+
+  /**
+   * Returns true if the domain matches the pattern.
+   *
+   * @param pattern the pattern to match against.
+   * @param patternindex the index into the pattern to start matching.
+   * @param domain the domain to match.
+   * @param domainindex the index into the domain to start matching.
+   * @return true if the domain matches the pattern.
+   */
+  private static boolean domainMatches(String pattern, int patternindex,
+				       String domain, int domainindex)
+  {
+    while (patternindex < pattern.length())
+      {
+	char c = pattern.charAt(patternindex++);
+	
+	if (c == '*')
 	  {
-	    Hashtable oProps = name.getKeyPropertyList();
-	    Iterator i = properties.entrySet().iterator();
-	    while (i.hasNext())
+	    for (int i = domain.length(); i >= domainindex; i--)
 	      {
-		Map.Entry entry = (Map.Entry) i.next();
-		String key = (String) entry.getKey();
-		if (!(oProps.containsKey(key)))
-		  return false;
-		String val = (String) entry.getValue();
-		if (!(val.equals(oProps.get(key))))
-		  return false;
+		if (domainMatches(pattern, patternindex, domain, i))
+		  return true;
 	      }
-	    propMatch = true;
+	    return false;
 	  }
-	else
-	  propMatch =
-	    getCanonicalKeyPropertyListString().equals
-	    (name.getCanonicalKeyPropertyListString());
-	return domainMatch && propMatch;
+
+	if (domainindex >= domain.length())
+	  return false;
+	
+	if (c != '?' && c != domain.charAt(domainindex))
+	  return false;
+
+	domainindex++;
       }
-    return equals(name);
+    return true;
   }
 
   /**
@@ -542,7 +550,8 @@
    *                                      specifications.
    * @throws NullPointerException if <code>name</code> is <code>null</code>.
    */
-  public static ObjectName getInstance(String domain, Hashtable properties)
+  public static ObjectName getInstance(String domain,
+				       Hashtable<String,String> properties)
     throws MalformedObjectNameException
   {
     return new ObjectName(domain, properties);
@@ -571,9 +580,9 @@
    * @return a {@link java.util.Hashtable}, containing each of the object
    *         name's properties.
    */
-  public Hashtable getKeyPropertyList()
+  public Hashtable<String,String> getKeyPropertyList()
   {
-    return new Hashtable(properties);
+    return new Hashtable<String,String>(properties);
   }
 
   /**
Index: libjava/classpath/javax/management/MBeanServerConnection.java
===================================================================
--- libjava/classpath/javax/management/MBeanServerConnection.java	(Revision 122041)
+++ libjava/classpath/javax/management/MBeanServerConnection.java	(Revision 122203)
@@ -533,7 +533,7 @@
    * @throws IOException if an I/O error occurred in communicating with
    *                     the bean server.
    */
-  Set queryMBeans(ObjectName name, QueryExp query)
+  Set<ObjectInstance> queryMBeans(ObjectName name, QueryExp query)
     throws IOException;
   
   /**
@@ -560,7 +560,7 @@
    * @throws IOException if an I/O error occurred in communicating with
    *                     the bean server.
    */
-  Set queryNames(ObjectName name, QueryExp query)
+  Set<ObjectName> queryNames(ObjectName name, QueryExp query)
     throws IOException;
 
   /**
Index: libjava/classpath/javax/management/MBeanServer.java
===================================================================
--- libjava/classpath/javax/management/MBeanServer.java	(Revision 122041)
+++ libjava/classpath/javax/management/MBeanServer.java	(Revision 122203)
@@ -890,7 +890,7 @@
    *                           arise from the execution of the query, in which
    *                           case that particular bean will again be excluded.
    */
-  Set queryMBeans(ObjectName name, QueryExp query);
+  Set<ObjectInstance> queryMBeans(ObjectName name, QueryExp query);
   
   /**
    * <p>
@@ -929,7 +929,7 @@
    *                           Note that these permissions are implied if the
    *                           <code>queryMBeans</code> permissions are available.
    */
-  Set queryNames(ObjectName name, QueryExp query);
+  Set<ObjectName> queryNames(ObjectName name, QueryExp query);
 
   /**
    * Registers the supplied instance with the server, using the specified
Index: libjava/classpath/javax/management/MBeanInfo.java
===================================================================
--- libjava/classpath/javax/management/MBeanInfo.java	(Revision 122041)
+++ libjava/classpath/javax/management/MBeanInfo.java	(Revision 122203)
@@ -160,34 +160,26 @@
   {
     className = name;
     description = desc;
+
     if (attribs == null)
       attributes = new MBeanAttributeInfo[0];
     else
-      {
-	attributes = new MBeanAttributeInfo[attribs.length];
-	System.arraycopy(attribs, 0, attributes, 0, attribs.length);
-      }
+      attributes = (MBeanAttributeInfo[]) attribs.clone();
+
     if (cons == null)
       constructors = new MBeanConstructorInfo[0];
     else
-      {
-	constructors = new MBeanConstructorInfo[cons.length];
-	System.arraycopy(cons, 0, constructors, 0, cons.length);
-      }
+      constructors = (MBeanConstructorInfo[]) cons.clone();
+
     if (ops == null)
       operations = new MBeanOperationInfo[0];
     else
-      {
-	operations = new MBeanOperationInfo[ops.length];
-	System.arraycopy(ops, 0, operations, 0, ops.length);
-      }
+      operations = (MBeanOperationInfo[]) ops.clone();
+
     if (notifs == null)
       notifications = new MBeanNotificationInfo[0];
     else
-      {
-	notifications = new MBeanNotificationInfo[notifs.length];
-	System.arraycopy(notifs, 0, notifications, 0, notifs.length);
-      }
+      notifications = (MBeanNotificationInfo[]) notifs.clone();
   }
 
   /**
Index: libjava/classpath/ChangeLog
===================================================================
--- libjava/classpath/ChangeLog	(Revision 122041)
+++ libjava/classpath/ChangeLog	(Revision 122203)
@@ -1,3 +1,19 @@
+2006-10-14  Edwin Steiner  <edwin.steiner@gmx.net>
+
+	PR classpath/28652:
+	* javax/management/MBeanInfo.java (MBeanInfo): 
+	Use clone to duplicate the arrays in order to
+	preserve the array type.
+
+2007-02-16  Andrew Haley  <aph@redhat.com>
+
+	* gnu/java/lang/management/MemoryMXBeanImpl.java,
+	javax/management/MBeanServerDelegate.java: Use
+	gnu.javax.management.ListenerData rather than
+	gnu.classpath.ListenerData.
+	* gnu/javax/management/ListenerData.java: Move here from
+	gnu/classpath/ListenerData.java.
+
 2007-02-14  Jakub Jelinek  <jakub@redhat.com>
 	Andrew Haley  <aph@redhat.com>
 
Index: libjava/classpath/ChangeLog.gcj
===================================================================
--- libjava/classpath/ChangeLog.gcj	(Revision 122041)
+++ libjava/classpath/ChangeLog.gcj	(Revision 122203)
@@ -1,3 +1,10 @@
+2007-02-20  Gary Benson  <gbenson@redhat.com>
+
+	* javax/management/MBeanServer.java: Updated.
+	* javax/management/MBeanServerConnection.java: Likewise.
+	* javax/management/ObjectName.java: Likewise.
+	* javax/management/StandardMBean.java: Likewise.
+
 2007-02-15  Gary Benson  <gbenson@redhat.com>
 
 	* javax/management/AttributeList.java: Updated.
Index: libjava/ChangeLog
===================================================================
--- libjava/ChangeLog	(Revision 122041)
+++ libjava/ChangeLog	(Revision 122203)
@@ -1,3 +1,78 @@
+2007-02-16  David Daney  <ddaney@avtrex.com>
+
+	* java/lang/Thread.java (Thread(ThreadGroup, Runnable, String)): Pass
+	new parameter constructor.
+	(Thread(ThreadGroup, Runnable, String, long)): Same.
+	(Thread(String, boolean)): New constructor.
+	(Thread(Thread, ThreadGroup, Runnable, String): Add parameter
+	noInheritableThreadLocal, don't call
+	InheritableThreadLocal.newChildThread if set.
+	* java/lang/PosixProcess.java(ProcessManager()): Set
+	noInheritableThreadLocal in super.
+	* java/lang/natThread.cc (_Jv_AttachCurrentThread): Pass new
+	parameter to Thread constructor.
+	(_Jv_AttachCurrentThreadAsDaemon): Same.
+
+2007-02-16  Tom Tromey  <tromey@redhat.com>
+
+	* sources.am, Makefile.in: Rebuilt.
+	* java/net/NetworkInterface.java: Removed override.
+	* java/net/MulticastSocket.java: Likewise.
+	* java/net/VMNetworkInterface.java (name, addresses): New fields.
+	(VMNetworkInterface): New constructors.
+	(getVMInterfaces): New method.
+	Removed static initializer.
+	(getInterfaces): Genericized.
+	* java/net/natVMNetworkInterfacePosix.cc (getInterfaces): Create a
+	VMNetworkInterface.
+	* java/net/natVMNetworkInterfaceWin32.cc (getInterfaces): Create a
+	VMNetworkInterface.
+
+2007-02-16  Tom Tromey  <tromey@redhat.com>
+
+	* sources.am, Makefile.in: Rebuilt.
+	* scripts/makemake.tcl (emit_package_rule): Don't omit
+	VMProcess.java.
+	* Makefile.am (nat_source_files): Added natVMProcess.cc.
+	(inner_nat_headers): Added ImmediateEOFInputStream.h.
+	* gcj/javaprims.h: Regenerated.
+	* java/lang/System.java (EnvironmentMap): Now package-private.
+	(EnvironmentMap(Map)): New constructor.
+	(EnvironmentMap.put): New method.
+	* java/lang/natWin32Process.cc (startProcess): Update.
+	* java/lang/Win32Process.java (Win32Process): Added 'redirect'
+	argument.
+	(startProcess): Likewise.
+	* java/lang/EcosProcess.java (EcosProcess): Added 'redirect'
+	argument.
+	* java/lang/natPosixProcess.cc (nativeSpawn): Handle redirection.
+	* java/lang/PosixProcess.java (redirect): New field.
+	(PosixProcess): Added 'redirect' argument.
+	* java/lang/natRuntime.cc (execInternal): Added 'redirect'
+	argument to Process creation.
+	* java/lang/natVMProcess.cc: New file.
+	* java/lang/ProcessBuilder.java: Removed.
+	* java/lang/VMProcess.java: New file.
+
+2007-02-15  Andrew Haley  <aph@redhat.com>
+
+	* Makefile.am (nat_source_files): Remove
+	java/lang/management/natVMManagementFactory.cc.
+	* java/lang/Thread.java (getStackTrace): Use reflection to call
+	the ManagementFactory.
+	* java/lang/management/VMManagementFactory.java: Remove native
+	methods.
+	* java/lang/management/natVMManagementFactory.cc: Deleted.
+	* sources.am: Regnerate.
+	* scripts/makemake.tcl: Add new "bcheaders" type.
+	Move java/lang/management and gnu/classpath/management to "bc".
+	Move gnu/java/lang/management to "bcheaders".
+	
+2007-02-16  Gary Benson  <gbenson@redhat.com>
+
+	* gnu/gcj/tools/gcj_dbtool/Main.java
+	(bytesToString): Don't lose zeros from within the digest.
+
 2007-02-13  Release Manager
 
 	* GCC 4.1.2 released.
Index: libjava/gnu/gcj/tools/gcj_dbtool/Main.java
===================================================================
--- libjava/gnu/gcj/tools/gcj_dbtool/Main.java	(Revision 122041)
+++ libjava/gnu/gcj/tools/gcj_dbtool/Main.java	(Revision 122203)
@@ -429,7 +429,12 @@
     StringBuffer hexBytes = new StringBuffer();
     int length = b.length;
     for (int i = 0; i < length; ++i)
-      hexBytes.append(Integer.toHexString(b[i] & 0xff));
+      {
+	int v = b[i] & 0xff;
+	if (v < 16)
+	  hexBytes.append('0');
+	hexBytes.append(Integer.toHexString(v));
+      }
     return hexBytes.toString();
   }
 
Index: libjava/gcj/javaprims.h
===================================================================
--- libjava/gcj/javaprims.h	(Revision 122041)
+++ libjava/gcj/javaprims.h	(Revision 122203)
@@ -1,7 +1,7 @@
 // javaprims.h - Main external header file for libgcj.  -*- c++ -*-
 
 
-/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006
+/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007
    Free Software Foundation
 
    This file is part of libgcj.
@@ -248,6 +248,7 @@
       class VMCompiler;
       class VMDouble;
       class VMFloat;
+      class VMProcess;
       class VMThrowable;
       class VerifyError;
       class VirtualMachineError;
Index: libjava/sources.am
===================================================================
--- libjava/sources.am	(Revision 122041)
+++ libjava/sources.am	(Revision 122203)
@@ -223,7 +223,6 @@
 
 gnu_classpath_source_files = \
 gnu/classpath/Configuration.java \
-classpath/gnu/classpath/ListenerData.java \
 classpath/gnu/classpath/NotImplementedException.java \
 classpath/gnu/classpath/Pointer.java \
 classpath/gnu/classpath/Pointer32.java \
@@ -1121,13 +1120,11 @@
 
 gnu_java_lang_management_header_files = $(patsubst classpath/%,%,$(patsubst %.java,%.h,$(gnu_java_lang_management_source_files)))
 
-gnu/java/lang/management.list: $(gnu_java_lang_management_source_files)
-	@$(mkinstalldirs) $(dir $@)
-	echo $(srcdir)/classpath/lib/gnu/java/lang/management/*.class > gnu/java/lang/management.list
+gnu-java-lang-management.lo: $(gnu_java_lang_management_source_files)
+	@find $(srcdir)/classpath/lib/gnu/java/lang/management -name '*.class' > gnu-java-lang-management.list
+	$(LTGCJCOMPILE) -fsource-filename=$(here)/classpath/lib/classes -findirect-dispatch -fno-indirect-classes -c -o gnu-java-lang-management.lo @gnu-java-lang-management.list
+	@rm -f gnu-java-lang-management.list
 
--include gnu/java/lang/management.deps
-
-
 gnu_java_lang_reflect_source_files = \
 classpath/gnu/java/lang/reflect/ClassSignatureParser.java \
 classpath/gnu/java/lang/reflect/FieldSignatureParser.java \
@@ -2875,17 +2872,14 @@
 
 
 gnu_javax_management_source_files = \
+classpath/gnu/javax/management/ListenerData.java \
 classpath/gnu/javax/management/Server.java
 
-gnu_javax_management_header_files = $(patsubst classpath/%,%,$(patsubst %.java,%.h,$(gnu_javax_management_source_files)))
+gnu-javax-management.lo: $(gnu_javax_management_source_files)
+	@find $(srcdir)/classpath/lib/gnu/javax/management -name '*.class' > gnu-javax-management.list
+	$(LTGCJCOMPILE) -fsource-filename=$(here)/classpath/lib/classes -fjni -findirect-dispatch -fno-indirect-classes -c -o gnu-javax-management.lo @gnu-javax-management.list
+	@rm -f gnu-javax-management.list
 
-gnu/javax/management.list: $(gnu_javax_management_source_files)
-	@$(mkinstalldirs) $(dir $@)
-	echo $(srcdir)/classpath/lib/gnu/javax/management/*.class > gnu/javax/management.list
-
--include gnu/javax/management.deps
-
-
 gnu_javax_naming_giop_source_files = \
 classpath/gnu/javax/naming/giop/ContextContinuation.java \
 classpath/gnu/javax/naming/giop/CorbalocParser.java \
@@ -4631,7 +4625,7 @@
 classpath/java/lang/Package.java \
 java/lang/PosixProcess.java \
 classpath/java/lang/Process.java \
-java/lang/ProcessBuilder.java \
+classpath/java/lang/ProcessBuilder.java \
 classpath/java/lang/Readable.java \
 classpath/java/lang/Runnable.java \
 java/lang/Runtime.java \
@@ -4663,6 +4657,7 @@
 java/lang/VMCompiler.java \
 java/lang/VMDouble.java \
 java/lang/VMFloat.java \
+java/lang/VMProcess.java \
 java/lang/VMThrowable.java \
 classpath/java/lang/VerifyError.java \
 classpath/java/lang/VirtualMachineError.java \
@@ -4673,7 +4668,7 @@
 
 java/lang.list: $(java_lang_source_files)
 	@$(mkinstalldirs) $(dir $@)
-	echo $(srcdir)/classpath/lib/java/lang/*.class | tr ' ' '\n' | fgrep -v Object.class | fgrep -v Class.class | grep -v '[^/]Process' > java/lang.list
+	echo $(srcdir)/classpath/lib/java/lang/*.class | tr ' ' '\n' | fgrep -v Object.class | fgrep -v Class.class | egrep -v '(Ecos|Posix|Win32)Process' > java/lang.list
 
 -include java/lang.deps
 
@@ -4733,15 +4728,11 @@
 classpath/java/lang/management/ThreadMXBean.java \
 java/lang/management/VMManagementFactory.java
 
-java_lang_management_header_files = $(patsubst classpath/%,%,$(patsubst %.java,%.h,$(java_lang_management_source_files)))
+java-lang-management.lo: $(java_lang_management_source_files)
+	@find $(srcdir)/classpath/lib/java/lang/management -name '*.class' > java-lang-management.list
+	$(LTGCJCOMPILE) -fsource-filename=$(here)/classpath/lib/classes -fjni -findirect-dispatch -fno-indirect-classes -c -o java-lang-management.lo @java-lang-management.list
+	@rm -f java-lang-management.list
 
-java/lang/management.list: $(java_lang_management_source_files)
-	@$(mkinstalldirs) $(dir $@)
-	echo $(srcdir)/classpath/lib/java/lang/management/*.class > java/lang/management.list
-
--include java/lang/management.deps
-
-
 java_lang_ref_source_files = \
 classpath/java/lang/ref/PhantomReference.java \
 java/lang/ref/Reference.java \
@@ -4825,9 +4816,9 @@
 classpath/java/net/JarURLConnection.java \
 classpath/java/net/MalformedURLException.java \
 classpath/java/net/MimeTypeMapper.java \
-java/net/MulticastSocket.java \
+classpath/java/net/MulticastSocket.java \
 classpath/java/net/NetPermission.java \
-java/net/NetworkInterface.java \
+classpath/java/net/NetworkInterface.java \
 classpath/java/net/NoRouteToHostException.java \
 classpath/java/net/PasswordAuthentication.java \
 classpath/java/net/PortUnreachableException.java \
@@ -8369,7 +8360,6 @@
   gnu/java/awt/print.list \
   gnu/java/io.list \
   gnu/java/lang.list \
-  gnu/java/lang/management.list \
   gnu/java/lang/reflect.list \
   gnu/java/locale.list \
   gnu/java/math.list \
@@ -8447,7 +8437,6 @@
   gnu/javax/imageio/gif.list \
   gnu/javax/imageio/jpeg.list \
   gnu/javax/imageio/png.list \
-  gnu/javax/management.list \
   gnu/javax/naming/giop.list \
   gnu/javax/naming/ictxImpl/trans.list \
   gnu/javax/naming/jndi/url/corbaname.list \
@@ -8496,7 +8485,6 @@
   java/lang.list \
   java/lang/annotation.list \
   java/lang/instrument.list \
-  java/lang/management.list \
   java/lang/ref.list \
   java/lang/reflect.list \
   java/math.list \
@@ -8695,7 +8683,6 @@
   $(gnu_javax_imageio_gif_header_files) \
   $(gnu_javax_imageio_jpeg_header_files) \
   $(gnu_javax_imageio_png_header_files) \
-  $(gnu_javax_management_header_files) \
   $(gnu_javax_naming_giop_header_files) \
   $(gnu_javax_naming_ictxImpl_trans_header_files) \
   $(gnu_javax_naming_jndi_url_corbaname_header_files) \
@@ -8744,7 +8731,6 @@
   $(java_lang_header_files) \
   $(java_lang_annotation_header_files) \
   $(java_lang_instrument_header_files) \
-  $(java_lang_management_header_files) \
   $(java_lang_ref_header_files) \
   $(java_lang_reflect_header_files) \
   $(java_math_header_files) \
@@ -8837,10 +8823,13 @@
   gnu-java-awt-peer-gtk.lo \
   gnu-java-awt-peer-swing.lo \
   gnu-java-beans.lo \
+  gnu-java-lang-management.lo \
   gnu-java-util-prefs-gconf.lo \
+  gnu-javax-management.lo \
   gnu-javax-rmi.lo \
   gnu-javax-sound-midi.lo \
   gnu-xml.lo \
+  java-lang-management.lo \
   javax-imageio.lo \
   javax-rmi.lo \
   javax-xml.lo \
Index: libjava/java/lang/ProcessBuilder.java
===================================================================
--- libjava/java/lang/ProcessBuilder.java	(Revision 122041)
+++ libjava/java/lang/ProcessBuilder.java	(Revision 122203)
@@ -1,118 +0,0 @@
-/* ProcessBuilder.java - Represent spawned system process
-   Copyright (C) 2005, 2006  Free Software Foundation, Inc.
-
-This file is part of GNU Classpath.
-
-GNU Classpath is free software; you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation; either version 2, or (at your option)
-any later version.
-
-GNU Classpath is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
-02110-1301 USA.
-
-Linking this library statically or dynamically with other modules is
-making a combined work based on this library.  Thus, the terms and
-conditions of the GNU General Public License cover the whole
-combination.
-
-As a special exception, the copyright holders of this library give you
-permission to link this library with independent modules to produce an
-executable, regardless of the license terms of these independent
-modules, and to copy and distribute the resulting executable under
-terms of your choice, provided that you also meet, for each linked
-independent module, the terms and conditions of the license of that
-module.  An independent module is a module which is not derived from
-or based on this library.  If you modify this library, you may extend
-this exception to your version of the library, but you are not
-obligated to do so.  If you do not wish to do so, delete this
-exception statement from your version. */
-
-
-package java.lang;
-
-import java.io.File;
-import java.io.IOException;
-import java.util.Arrays;
-import java.util.List;
-import java.util.Map;
-
-public final class ProcessBuilder
-{
-  private File directory = new File(System.getProperty("user.dir"));
-  private List<String> command;
-  // FIXME: make a copy.
-  private Map<String, String> environment = System.getenv();
-  private boolean redirect = false;
-
-  public ProcessBuilder(List<String> command)
-  {
-    this.command = command;
-  }
-
-  public ProcessBuilder(String... command)
-  {
-    this.command = Arrays.asList(command);
-  }
-
-  public List<String> command()
-  {
-    return command;
-  }
-
-  public ProcessBuilder command(List<String> command)
-  {
-    this.command = command;
-    return this;
-  }
-
-  public ProcessBuilder command(String... command)
-  {
-    this.command = Arrays.asList(command);
-    return this;
-  }
-
-  public File directory()
-  {
-    return directory;
-  }
-
-  public ProcessBuilder directory(File directory)
-  {
-    this.directory = directory;
-    return this;
-  }
-
-  public Map<String, String> environment()
-  {
-    return environment;
-  }
-
-  public boolean redirectErrorStream()
-  {
-    return redirect;
-  }
-
-  public ProcessBuilder redirectErrorStream(boolean redirect)
-  {
-    this.redirect = redirect;
-    return this;
-  }
-
-  public Process start() throws IOException
-  {
-    SecurityManager sm = SecurityManager.current; // Be thread-safe!
-    if (sm != null)
-      sm.checkExec(command.get(0));
-    //    return VMProcess.exec(command, environment, directory, redirect);
-    // FIXME
-    return null;
-  }
-}
Index: libjava/java/lang/Thread.java
===================================================================
--- libjava/java/lang/Thread.java	(Revision 122041)
+++ libjava/java/lang/Thread.java	(Revision 122203)
@@ -50,6 +50,9 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+
 /* Written using "Java Class Libraries", 2nd edition, ISBN 0-201-31002-3
  * "The Java Language Specification", ISBN 0-201-63451-1
  * plus online API docs for JDK 1.2 beta from http://www.javasoft.com.
@@ -349,7 +352,7 @@
    */
   public Thread(ThreadGroup group, Runnable target, String name)
   {
-    this(currentThread(), group, target, name);
+    this(currentThread(), group, target, name, false);
   }
 
   /**
@@ -375,11 +378,27 @@
   public Thread(ThreadGroup group, Runnable target, String name, long size)
   {
     // Just ignore stackSize for now.
-    this(currentThread(), group, target, name);
+    this(currentThread(), group, target, name, false);
   }
 
-  private Thread (Thread current, ThreadGroup g, Runnable r, String n)
+  /**
+   * Allocate a new Thread object for threads used internally to the
+   * run time.  Runtime threads should not be members of an
+   * application ThreadGroup, nor should they execute arbitrary user
+   * code as part of the InheritableThreadLocal protocol.
+   *
+   * @param name the name for the Thread
+   * @param noInheritableThreadLocal if true, do not initialize
+   * InheritableThreadLocal variables for this thread.
+   * @throws IllegalThreadStateException if group is destroyed
+   */
+  Thread(String name, boolean noInheritableThreadLocal)
   {
+    this(null, null, null, name, noInheritableThreadLocal);
+  }
+  
+  private Thread (Thread current, ThreadGroup g, Runnable r, String n, boolean noInheritableThreadLocal)
+  {
     // Make sure the current thread may create a new thread.
     checkAccess();
     
@@ -418,7 +437,10 @@
 	int pri = current.getPriority();
 	priority = (gmax < pri ? gmax : pri);
 	contextClassLoader = current.contextClassLoader;
-	InheritableThreadLocal.newChildThread(this);
+        // InheritableThreadLocal allows arbitrary user code to be
+        // executed, only do this if our caller desires it.
+        if (!noInheritableThreadLocal)
+          InheritableThreadLocal.newChildThread(this);
       }
     else
       {
@@ -1288,9 +1310,43 @@
     SecurityManager sm = SecurityManager.current; // Be thread-safe.
     if (sm != null)
       sm.checkPermission(new RuntimePermission("getStackTrace"));
-    ThreadMXBean bean = ManagementFactory.getThreadMXBean();
-    ThreadInfo info = bean.getThreadInfo(getId(), Integer.MAX_VALUE);
-    return info.getStackTrace();
+
+    // Calling java.lang.management via reflection means that
+    // javax.management be overridden in the endorsed directory.
+
+    // This is the equivalent code:
+    //
+    //     ThreadMXBean bean = ManagementFactory.getThreadMXBean();
+    //     ThreadInfo info = bean.getThreadInfo(getId(), Integer.MAX_VALUE);
+    //     return info.getStackTrace();
+
+    try
+      {
+	try
+	  {
+	    Object bean 
+	      = (Class.forName("java.lang.management.ManagementFactory")
+		 .getDeclaredMethod("getThreadMXBean")
+		 .invoke(null));
+	    Object info = bean.getClass()
+	      .getDeclaredMethod("getThreadInfo", long.class, int.class)
+	      .invoke(bean, new Long(getId()), new Integer(Integer.MAX_VALUE));
+	    Object trace = info.getClass()
+	      .getDeclaredMethod("getStackTrace").invoke(info);
+	    return (StackTraceElement[])trace;
+	  }
+	catch (InvocationTargetException e)
+	  {
+	    throw (Exception)e.getTargetException();
+	  }
+      }
+    catch (UnsupportedOperationException e)
+      {
+	throw e;
+      }
+    catch (Exception e)
+      {
+	throw new UnsupportedOperationException(e);
+      }
   }
-
 }
Index: libjava/java/lang/natThread.cc
===================================================================
--- libjava/java/lang/natThread.cc	(Revision 122041)
+++ libjava/java/lang/natThread.cc	(Revision 122203)
@@ -479,7 +479,7 @@
     return thread;
   if (name == NULL)
     name = java::lang::Thread::gen_name ();
-  thread = new java::lang::Thread (NULL, group, NULL, name);
+  thread = new java::lang::Thread (NULL, group, NULL, name, false);
   _Jv_AttachCurrentThread (thread);
   _Jv_NotifyThreadStart (thread);
   return thread;
@@ -493,7 +493,7 @@
     return thread;
   if (name == NULL)
     name = java::lang::Thread::gen_name ();
-  thread = new java::lang::Thread (NULL, group, NULL, name);
+  thread = new java::lang::Thread (NULL, group, NULL, name, false);
   thread->setDaemon (true);
   _Jv_AttachCurrentThread (thread);
   _Jv_NotifyThreadStart (thread);
Index: libjava/java/lang/System.java
===================================================================
--- libjava/java/lang/System.java	(Revision 122041)
+++ libjava/java/lang/System.java	(Revision 122203)
@@ -1,5 +1,5 @@
 /* System.java -- useful methods to interface with the system
-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006
+   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007
    Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
@@ -827,7 +827,7 @@
    *
    * @author Andrew John Hughes (gnu_andrew@member.fsf.org)
    */
-  private static class EnvironmentMap
+  static class EnvironmentMap
     extends HashMap<String,String>
   {
     
@@ -853,8 +853,21 @@
     {
       super();
     }
-    
+
     /**
+     * Constructs a new <code>EnvironmentMap</code> containing
+     * the contents of the specified map.
+     *
+     * @param m the map to be added to this.
+     * @throws NullPointerException if a key or value is null.
+     * @throws ClassCastException if a key or value is not a String.
+     */    
+    EnvironmentMap(Map<String,String> m)
+    {
+      super(m);
+    }
+
+    /**
      * Blocks queries containing a null key or one which is not
      * of type <code>String</code>.  All other queries
      * are forwarded to the superclass.
@@ -938,8 +951,33 @@
         keys = new EnvironmentSet(super.keySet());
       return keys;
     }
-    
+
     /**
+     * Associates the given key to the given value. If the
+     * map already contains the key, its value is replaced.
+     * The map does not accept null keys or values, or keys
+     * and values not of type {@link String}.
+     *
+     * @param key the key to map.
+     * @param value the value to be mapped.
+     * @return the previous value of the key, or null if there was no mapping
+     * @throws NullPointerException if a key or value is null.
+     * @throws ClassCastException if a key or value is not a String.
+     */
+    public String put(String key, String value)
+    {
+      if (key == null)
+	throw new NullPointerException("A new key is null.");
+      if (value == null)
+	throw new NullPointerException("A new value is null.");
+      if (!(key instanceof String))
+	throw new ClassCastException("A new key is not a String.");
+      if (!(value instanceof String))
+	throw new ClassCastException("A new value is not a String.");
+      return super.put(key, value);
+    }
+
+    /**
      * Removes a key-value pair from the map.  The queried key may not
      * be null or of a type other than a <code>String</code>.
      *
Index: libjava/java/lang/EcosProcess.java
===================================================================
--- libjava/java/lang/EcosProcess.java	(Revision 122041)
+++ libjava/java/lang/EcosProcess.java	(Revision 122203)
@@ -1,6 +1,6 @@
 // EcosProcess.java - Subclass of Process for eCos systems.
 
-/* Copyright (C) 1998, 1999, 2006  Free Software Foundation
+/* Copyright (C) 1998, 1999, 2006, 2007  Free Software Foundation
 
    This file is part of libgcj.
 
@@ -51,9 +51,8 @@
     return 0;
   }
 
-  public EcosProcess (String[] progarray,
-                          String[] envp,
-                          File dir)
+  public EcosProcess (String[] progarray, String[] envp, File dir,
+		      boolean redirect)
     throws IOException
   {
     throw new IOException ("eCos processes unimplemented");
Index: libjava/java/lang/natVMProcess.cc
===================================================================
--- libjava/java/lang/natVMProcess.cc	(Revision 0)
+++ libjava/java/lang/natVMProcess.cc	(Revision 122203)
@@ -0,0 +1,34 @@
+// natVMProcess.cc - native code for ProcessBuilder
+
+/* Copyright (C) 2007 Free Software Foundation
+
+   This file is part of libgcj.
+
+This software is copyrighted work licensed under the terms of the
+Libgcj License.  Please consult the file "LIBGCJ_LICENSE" for
+details.  */
+
+#include <config.h>
+
+#include <gcj/cni.h>
+#include <jvm.h>
+
+#include <platform.h>
+
+#include <java/lang/VMProcess.h>
+#include <java/lang/Process.h>
+#include <java/io/File.h>
+
+// It is convenient and safe to simply include all of these.
+#include <java/lang/Win32Process.h>
+#include <java/lang/EcosProcess.h>
+#include <java/lang/PosixProcess.h>
+
+::java::lang::Process *
+java::lang::VMProcess::nativeExec (jstringArray cmd,
+				   jstringArray env,
+				   ::java::io::File *dir,
+				   jboolean redirect)
+{
+  return new _Jv_platform_process (cmd, env, dir, redirect);
+}
Index: libjava/java/lang/natRuntime.cc
===================================================================
--- libjava/java/lang/natRuntime.cc	(Revision 122041)
+++ libjava/java/lang/natRuntime.cc	(Revision 122203)
@@ -1,6 +1,6 @@
 // natRuntime.cc - Implementation of native side of Runtime class.
 
-/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006  Free Software Foundation
+/* Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007  Free Software Foundation
 
    This file is part of libgcj.
 
@@ -297,7 +297,7 @@
 				   jstringArray env,
 				   java::io::File *dir)
 {
-  return new _Jv_platform_process (cmd, env, dir);
+  return new _Jv_platform_process (cmd, env, dir, false);
 }
 
 jint
Index: libjava/java/lang/Win32Process.java
===================================================================
--- libjava/java/lang/Win32Process.java	(Revision 122041)
+++ libjava/java/lang/Win32Process.java	(Revision 122203)
@@ -1,6 +1,6 @@
 // Win32Process.java - Subclass of Process for Win32 systems.
 
-/* Copyright (C) 2002, 2003, 2006  Free Software Foundation
+/* Copyright (C) 2002, 2003, 2006, 2007  Free Software Foundation
 
    This file is part of libgcj.
 
@@ -51,9 +51,8 @@
 
   public native int waitFor () throws InterruptedException;
 
-  public Win32Process (String[] progarray,
-                          String[] envp,
-                          File dir)
+  public Win32Process (String[] progarray, String[] envp, File dir,
+		       boolean redirect)
     throws IOException
   {
     for (int i = 0; i < progarray.length; i++)
@@ -64,7 +63,7 @@
           progarray[i] = "\"" + s + "\"";
       }
 
-    startProcess (progarray, envp, dir);
+    startProcess (progarray, envp, dir, redirect);
   }
 
   // The standard streams (stdin, stdout and stderr, respectively)
@@ -81,8 +80,9 @@
 
   private native boolean hasExited ();
   private native void startProcess (String[] progarray,
-           String[] envp,
-           File dir)
+				    String[] envp,
+				    File dir,
+				    boolean redirect)
     throws IOException;
   private native void cleanup ();
 }
Index: libjava/java/lang/PosixProcess.java
===================================================================
--- libjava/java/lang/PosixProcess.java	(Revision 122041)
+++ libjava/java/lang/PosixProcess.java	(Revision 122203)
@@ -1,5 +1,5 @@
 // PosixProcess.java - Subclass of Process for POSIX systems.
-/* Copyright (C) 1998, 1999, 2004, 2006  Free Software Foundation
+/* Copyright (C) 1998, 1999, 2004, 2006, 2007  Free Software Foundation
 
    This file is part of libgcj.
 
@@ -42,7 +42,12 @@
 
     ProcessManager()
     {
-      super("ProcessManager");
+      // Use package private Thread constructor to place us in the
+      // root ThreadGroup with no InheritableThreadLocal.  If the
+      // InheritableThreadLocals were allowed to initialize, they could
+      // cause a Runtime.exec() to be called causing infinite
+      // recursion.
+      super("ProcessManager", true);
       // Don't keep the (main) process from exiting on our account.
       this.setDaemon(true);
     }
@@ -349,8 +354,8 @@
    */
   private native void nativeSpawn();
 
-  PosixProcess(String[] progarray, String[] envp, File dir)
-           throws IOException
+  PosixProcess(String[] progarray, String[] envp, File dir, boolean redirect)
+    throws IOException
   {
     // Check to ensure there is something to run, and avoid
     // dereferencing null pointers in native code.
@@ -360,6 +365,7 @@
     this.progarray = progarray;
     this.envp = envp;
     this.dir = dir;
+    this.redirect = redirect;
 
     // Start a ProcessManager if there is not one already running.
     synchronized (queueLock)
@@ -414,6 +420,7 @@
   private String[] progarray;
   private String[] envp;
   private File dir;
+  private boolean redirect;
 
   /** Set by the ProcessManager on problems starting. */
   private Throwable exception;
Index: libjava/java/lang/natPosixProcess.cc
===================================================================
--- libjava/java/lang/natPosixProcess.cc	(Revision 122041)
+++ libjava/java/lang/natPosixProcess.cc	(Revision 122203)
@@ -1,6 +1,6 @@
 // natPosixProcess.cc - Native side of POSIX process code.
 
-/* Copyright (C) 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006  Free Software Foundation
+/* Copyright (C) 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007  Free Software Foundation
 
    This file is part of libgcj.
 
@@ -41,6 +41,7 @@
 #include <java/io/FileOutputStream.h>
 #include <java/io/IOException.h>
 #include <java/lang/OutOfMemoryError.h>
+#include <java/lang/PosixProcess$EOFInputStream.h>
 
 using gnu::java::nio::channels::FileChannelImpl;
 
@@ -231,7 +232,7 @@
   try
     {
       // Transform arrays to native form.
-    args = (char **) _Jv_Malloc ((progarray->length + 1) * sizeof (char *));
+      args = (char **) _Jv_Malloc ((progarray->length + 1) * sizeof (char *));
 
       // Initialize so we can gracefully recover.
       jstring *elts = elements (progarray);
@@ -262,23 +263,30 @@
 	path = new_string (dir->getPath ());
 
       // Create pipes for I/O.  MSGP is for communicating exec()
-      // status.
-      if (pipe (inp) || pipe (outp) || pipe (errp) || pipe (msgp)
+      // status.  If redirecting stderr to stdout, we don't need to
+      // create the ERRP pipe.
+      if (pipe (inp) || pipe (outp) || pipe (msgp)
 	  || fcntl (msgp[1], F_SETFD, FD_CLOEXEC))
-      throw new IOException (JvNewStringUTF (strerror (errno)));
+	throw new IOException (JvNewStringUTF (strerror (errno)));
+      if (! redirect && pipe (errp))
+	throw new IOException (JvNewStringUTF (strerror (errno)));
 
       // We create the streams before forking.  Otherwise if we had an
       // error while creating the streams we would have run the child
       // with no way to communicate with it.
-    errorStream =
-      new FileInputStream (new
-                           FileChannelImpl (errp[0], FileChannelImpl::READ));
-    inputStream =
-      new FileInputStream (new
-                           FileChannelImpl (inp[0], FileChannelImpl::READ));
-    outputStream =
-      new FileOutputStream (new FileChannelImpl (outp[1],
-                                             FileChannelImpl::WRITE));
+      if (redirect)
+	errorStream = PosixProcess$EOFInputStream::instance;
+      else
+	errorStream =
+	  new FileInputStream (new
+			       FileChannelImpl (errp[0],
+						FileChannelImpl::READ));
+      inputStream =
+	new FileInputStream (new
+			     FileChannelImpl (inp[0], FileChannelImpl::READ));
+      outputStream =
+	new FileOutputStream (new FileChannelImpl (outp[1],
+						   FileChannelImpl::WRITE));
 
       // We don't use vfork() because that would cause the local
       // environment to be set by the child.
@@ -319,14 +327,17 @@
 	  // We ignore errors from dup2 because they should never occur.
 	  dup2 (outp[0], 0);
 	  dup2 (inp[1], 1);
-	  dup2 (errp[1], 2);
+	  dup2 (redirect ? inp[1] : errp[1], 2);
 
 	  // Use close and not myclose -- we're in the child, and we
 	  // aren't worried about the possible race condition.
 	  close (inp[0]);
 	  close (inp[1]);
-	  close (errp[0]);
-	  close (errp[1]);
+	  if (! redirect)
+	    {
+	      close (errp[0]);
+	      close (errp[1]);
+	    }
 	  close (outp[0]);
 	  close (outp[1]);
 	  close (msgp[0]);
@@ -362,7 +373,8 @@
 
       myclose (outp[0]);
       myclose (inp[1]);
-      myclose (errp[1]);
+      if (! redirect)
+	myclose (errp[1]);
       myclose (msgp[1]);
 
       char c;
@@ -406,7 +418,7 @@
 	{
 	  if (errorStream != NULL)
 	    errorStream->close ();
-	  else
+	  else if (! redirect)
 	    myclose (errp[0]);
 	}
       catch (java::lang::Throwable *ignore)
@@ -417,10 +429,11 @@
       // the use of myclose.
       myclose (outp[0]);
       myclose (inp[1]);
-      myclose (errp[1]);
+      if (! redirect)
+	myclose (errp[1]);
       myclose (msgp[1]);
 
-    exception = thrown;
+      exception = thrown;
     }
 
   myclose (msgp[0]);
@@ -430,6 +443,7 @@
     {
       fcntl (outp[1], F_SETFD, FD_CLOEXEC);
       fcntl (inp[0], F_SETFD, FD_CLOEXEC);
-      fcntl (errp[0], F_SETFD, FD_CLOEXEC);
+      if (! redirect)
+	fcntl (errp[0], F_SETFD, FD_CLOEXEC);
     }
 }
Index: libjava/java/lang/natWin32Process.cc
===================================================================
--- libjava/java/lang/natWin32Process.cc	(Revision 122041)
+++ libjava/java/lang/natWin32Process.cc	(Revision 122203)
@@ -1,6 +1,6 @@
 // natWin32Process.cc - Native side of Win32 process code.
 
-/* Copyright (C) 2003, 2006  Free Software Foundation
+/* Copyright (C) 2003, 2006, 2007  Free Software Foundation
 
    This file is part of libgcj.
 
@@ -210,8 +210,9 @@
 
 void
 java::lang::Win32Process::startProcess (jstringArray progarray,
-                                           jstringArray envp,
-                                           java::io::File *dir)
+					jstringArray envp,
+					java::io::File *dir,
+					jboolean redirect)
 {
   using namespace java::io;
 
Index: libjava/java/lang/VMProcess.java
===================================================================
--- libjava/java/lang/VMProcess.java	(Revision 0)
+++ libjava/java/lang/VMProcess.java	(Revision 122203)
@@ -0,0 +1,68 @@
+/* java.lang.VMProcess -- VM implementation of java.lang.ProcessBuilder
+   Copyright (C) 2007 Free Software Foundation, Inc.
+
+This file is part of GNU Classpath.
+
+GNU Classpath is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+GNU Classpath is distributed in the hope that it will be useful, but
+WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GNU Classpath; see the file COPYING.  If not, write to the
+Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+02110-1301 USA.
+
+Linking this library statically or dynamically with other modules is
+making a combined work based on this library.  Thus, the terms and
+conditions of the GNU General Public License cover the whole
+combination.
+
+As a special exception, the copyright holders of this library give you
+permission to link this library with independent modules to produce an
+executable, regardless of the license terms of these independent
+modules, and to copy and distribute the resulting executable under
+terms of your choice, provided that you also meet, for each linked
+independent module, the terms and conditions of the license of that
+module.  An independent module is a module which is not derived from
+or based on this library.  If you modify this library, you may extend
+this exception to your version of the library, but you are not
+obligated to do so.  If you do not wish to do so, delete this
+exception statement from your version. */
+
+package java.lang;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+final class VMProcess
+{
+  static native Process nativeExec(String[] cmd, String[] env,
+				   File dir, boolean redirect)
+    throws IOException;
+
+  static Process exec(List<String> cmd, Map<String, String> env,
+		      File dir, boolean redirect) throws IOException
+  {
+    String[] acmd = (String[]) cmd.toArray(new String[cmd.size()]);
+    String[] aenv = new String[env.size()];
+
+    int i = 0;
+    Iterator iter = env.entrySet().iterator();
+    while (iter.hasNext())
+      {
+	Map.Entry entry = (Map.Entry) iter.next();
+	aenv[i++] = entry.getKey() + "=" + entry.getValue();
+      }
+
+    return nativeExec(acmd, aenv, dir, redirect);
+  }
+}
Index: libjava/java/lang/management/natVMManagementFactory.cc
===================================================================
--- libjava/java/lang/management/natVMManagementFactory.cc	(Revision 122041)
+++ libjava/java/lang/management/natVMManagementFactory.cc	(Revision 122203)
@@ -1,44 +0,0 @@
-/* Copyright (C) 2006  Free Software Foundation
-
-   This file is part of libgcj.
-
-This software is copyrighted work licensed under the terms of the
-Libgcj License.  Please consult the file "LIBGCJ_LICENSE" for
-details.  */
- 
-/**
- * @author Andrew John Hughes <gnu_andrew@member.fsf.org>
- * @date Tue 08 Aug 2006 */
-/* Implemented for our sole pool, the heap, and our sole memory
- * manager/garbage collector, Boehm GC.
- * Status:  Believed complete and correct.
- */
-
-#include <config.h>
-
-#include <gcj/cni.h>
-#include <java/lang/String.h>
-#include <java/lang/management/VMManagementFactory.h>
-
-JArray< ::java::lang::String *> *
-java::lang::management::VMManagementFactory::getMemoryPoolNames ()
-{
-  return (JArray<jstring>*)
-    JvNewObjectArray(1, &java::lang::String::class$, JvNewStringLatin1("Heap"));
-}
-
-
-JArray< ::java::lang::String *> *
-java::lang::management::VMManagementFactory::getMemoryManagerNames ()
-{
-  return (JArray<jstring>*)
-    JvNewObjectArray(0, &java::lang::String::class$, NULL);
-}
-
-
-JArray< ::java::lang::String *> *
-java::lang::management::VMManagementFactory::getGarbageCollectorNames ()
-{
-  return (JArray<jstring>*) 
-    JvNewObjectArray(1, &java::lang::String::class$, JvNewStringLatin1("BoehmGC"));
-}
Index: libjava/java/lang/management/VMManagementFactory.java
===================================================================
--- libjava/java/lang/management/VMManagementFactory.java	(Revision 122041)
+++ libjava/java/lang/management/VMManagementFactory.java	(Revision 122203)
@@ -1,5 +1,5 @@
 /* VMManagementFactory.java - VM interface for obtaining system beans.
-   Copyright (C) 2006 Free Software Foundation
+   Copyright (C) 2006, 2007 Free Software Foundation
 
 This file is part of GNU Classpath.
 
@@ -54,7 +54,11 @@
    *
    * @return a list of memory pool names.
    */
-  static native String[] getMemoryPoolNames();
+  static String[] getMemoryPoolNames()
+  {
+    String[] result = {"Heap"};
+    return result;
+  }
 
   /**
    * Return a list of the names of the currently available
@@ -63,7 +67,11 @@
    *
    * @return a list of memory manager names.
    */
-  static native String[] getMemoryManagerNames();
+  static String[] getMemoryManagerNames()
+  {
+    String[] result = {};
+    return result;
+  }
 
   /**
    * Return a list of the names of the currently available
@@ -71,5 +79,9 @@
    *
    * @return a list of garbage collector names.
    */
-  static native String[] getGarbageCollectorNames();
+  static String[] getGarbageCollectorNames()
+  {
+    String[] result = {"BoehmGC"};
+    return result;
+  }
 }
Index: libjava/java/net/NetworkInterface.java
===================================================================
--- libjava/java/net/NetworkInterface.java	(Revision 122041)
+++ libjava/java/net/NetworkInterface.java	(Revision 122203)
@@ -1,299 +0,0 @@
-/* NetworkInterface.java --
-   Copyright (C) 2002, 2003, 2004, 2005  Free Software Foundation, Inc.
-
-This file is part of GNU Classpath.
-
-GNU Classpath is free software; you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation; either version 2, or (at your option)
-any later version.
-
-GNU Classpath is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
-02110-1301 USA.
-
-Linking this library statically or dynamically with other modules is
-making a combined work based on this library.  Thus, the terms and
-conditions of the GNU General Public License cover the whole
-combination.
-
-As a special exception, the copyright holders of this library give you
-permission to link this library with independent modules to produce an
-executable, regardless of the license terms of these independent
-modules, and to copy and distribute the resulting executable under
-terms of your choice, provided that you also meet, for each linked
-independent module, the terms and conditions of the license of that
-module.  An independent module is a module which is not derived from
-or based on this library.  If you modify this library, you may extend
-this exception to your version of the library, but you are not
-obligated to do so.  If you do not wish to do so, delete this
-exception statement from your version. */
-
-
-package java.net;
-
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Enumeration;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.Vector;
-
-/**
- * This class models a network interface on the host computer.  A network
- * interface contains a name (typically associated with a specific
- * hardware adapter) and a list of addresses that are bound to it.
- * For example, an ethernet interface may be named "eth0" and have the
- * address 192.168.1.101 assigned to it.
- *
- * @author Michael Koch (konqueror@gmx.de)
- * @since 1.4
- */
-public final class NetworkInterface
-{
-  private String name;
-  private Vector<InetAddress> inetAddresses;
-
-  NetworkInterface(String name, InetAddress address)
-  {
-    this.name = name;
-    this.inetAddresses = new Vector(1, 1);
-    this.inetAddresses.add(address);
-  }
-
-  NetworkInterface(String name, InetAddress[] addresses)
-  {
-    this.name = name;
-    this.inetAddresses = new Vector(addresses.length, 1);
-
-    for (int i = 0; i < addresses.length; i++)
-      this.inetAddresses.add(addresses[i]);
-  }
-
-  /**
-   * Returns the name of the network interface
-   *
-   * @return The name of the interface.
-   */
-  public String getName()
-  {
-    return name;
-  }
-
-  /**
-   * Returns all available addresses of the network interface
-   *
-   * If a @see SecurityManager is available all addresses are checked
-   * with @see SecurityManager::checkConnect() if they are available.
-   * Only <code>InetAddresses</code> are returned where the security manager
-   * doesn't throw an exception.
-   *
-   * @return An enumeration of all addresses.
-   */
-  public Enumeration<InetAddress> getInetAddresses()
-  {
-    SecurityManager s = System.getSecurityManager();
-
-    if (s == null)
-      return inetAddresses.elements();
-
-    Vector<InetAddress> tmpInetAddresses = new Vector<InetAddress>(1, 1);
-
-    for (Enumeration<InetAddress> addresses = inetAddresses.elements();
-         addresses.hasMoreElements();)
-      {
-	InetAddress addr = addresses.nextElement();
-	try
-	  {
-	    s.checkConnect(addr.getHostAddress(), 58000);
-	    tmpInetAddresses.add(addr);
-	  }
-	catch (SecurityException e)
-	  {
-	    // Ignore.
-	  }
-      }
-
-    return tmpInetAddresses.elements();
-  }
-
-  /**
-   * Returns the display name of the interface
-   *
-   * @return The display name of the interface
-   */
-  public String getDisplayName()
-  {
-    return name;
-  }
-
-  /**
-   * Returns an network interface by name
-   *
-   * @param name The name of the interface to return
-   * 
-   * @return a <code>NetworkInterface</code> object representing the interface,
-   * or null if there is no interface with that name.
-   *
-   * @exception SocketException If an error occurs
-   * @exception NullPointerException If the specified name is null
-   */
-  public static NetworkInterface getByName(String name)
-    throws SocketException
-  {
-    for (Enumeration e = getNetworkInterfaces(); e.hasMoreElements();)
-      {
-	NetworkInterface tmp = (NetworkInterface) e.nextElement();
-
-	if (name.equals(tmp.getName()))
-	  return tmp;
-      }
-
-    // No interface with the given name found.
-    return null;
-  }
-
-  /**
-   * Return a network interface by its address
-   *
-   * @param addr The address of the interface to return
-   *
-   * @return the interface, or <code>null</code> if none found
-   *
-   * @exception SocketException If an error occurs
-   * @exception NullPointerException If the specified addess is null
-   */
-  public static NetworkInterface getByInetAddress(InetAddress addr)
-    throws SocketException
-  {
-    for (Enumeration interfaces = getNetworkInterfaces();
-         interfaces.hasMoreElements();)
-      {
-	NetworkInterface tmp = (NetworkInterface) interfaces.nextElement();
-
-	for (Enumeration addresses = tmp.inetAddresses.elements();
-	     addresses.hasMoreElements();)
-	  {
-	    if (addr.equals((InetAddress) addresses.nextElement()))
-	      return tmp;
-	  }
-      }
-
-    throw new SocketException("no network interface is bound to such an IP address");
-  }
-
-  static private Collection condense(Collection interfaces) 
-  {
-    final Map condensed = new HashMap();
-
-    final Iterator interfs = interfaces.iterator();
-    while (interfs.hasNext()) {
-
-      final NetworkInterface face = (NetworkInterface) interfs.next();
-      final String name = face.getName();
-      
-      if (condensed.containsKey(name))
-	{
-	  final NetworkInterface conface = (NetworkInterface) condensed.get(name);
-	  if (!conface.inetAddresses.containsAll(face.inetAddresses))
-	    {
-	      final Iterator faceAddresses = face.inetAddresses.iterator();
-	      while (faceAddresses.hasNext())
-		{
-		  final InetAddress faceAddress = (InetAddress) faceAddresses.next();
-		  if (!conface.inetAddresses.contains(faceAddress))
-		    {
-		      conface.inetAddresses.add(faceAddress);
-		    }
-		}
-	    }
-	}
-      else
-	{
-	  condensed.put(name, face);
-	}
-    }
-
-    return condensed.values();
-  }
-
-  /**
-   * Return an <code>Enumeration</code> of all available network interfaces
-   *
-   * @return all interfaces
-   * 
-   * @exception SocketException If an error occurs
-   */
-  public static Enumeration<NetworkInterface> getNetworkInterfaces()
-    throws SocketException
-  {
-    Vector<NetworkInterface> networkInterfaces =
-      VMNetworkInterface.getInterfaces();
-
-    if (networkInterfaces.isEmpty())
-      return null;
-
-    Collection condensed = condense(networkInterfaces);
-
-    return Collections.enumeration(condensed);
-  }
-
-  /**
-   * Checks if the current instance is equal to obj
-   *
-   * @param obj The object to compare with
-   *
-   * @return <code>true</code> if equal, <code>false</code> otherwise
-   */
-  public boolean equals(Object obj)
-  {
-    if (! (obj instanceof NetworkInterface))
-      return false;
-
-    NetworkInterface tmp = (NetworkInterface) obj;
-
-    return (name.equals(tmp.name) && inetAddresses.equals(tmp.inetAddresses));
-  }
-
-  /**
-   * Returns the hashcode of the current instance
-   *
-   * @return the hashcode
-   */
-  public int hashCode()
-  {
-    // FIXME: hash correctly
-    return name.hashCode() + inetAddresses.hashCode();
-  }
-
-  /**
-   * Returns a string representation of the interface
-   *
-   * @return the string
-   */
-  public String toString()
-  {
-    // FIXME: check if this is correct
-    String result;
-    String separator = System.getProperty("line.separator");
-
-    result =
-      "name: " + getDisplayName() + " (" + getName() + ") addresses:"
-      + separator;
-
-    for (Enumeration e = inetAddresses.elements(); e.hasMoreElements();)
-      {
-	InetAddress address = (InetAddress) e.nextElement();
-	result += address.toString() + ";" + separator;
-      }
-
-    return result;
-  }
-}
Index: libjava/java/net/MulticastSocket.java
===================================================================
--- libjava/java/net/MulticastSocket.java	(Revision 122041)
+++ libjava/java/net/MulticastSocket.java	(Revision 122203)
@@ -1,519 +0,0 @@
-/* MulticastSocket.java -- Class for using multicast sockets
-   Copyright (C) 1998, 1999, 2000, 2001, 2002, 2003
-   Free Software Foundation, Inc.
-
-This file is part of GNU Classpath.
-
-GNU Classpath is free software; you can redistribute it and/or modify
-it under the terms of the GNU General Public License as published by
-the Free Software Foundation; either version 2, or (at your option)
-any later version.
-
-GNU Classpath is distributed in the hope that it will be useful, but
-WITHOUT ANY WARRANTY; without even the implied warranty of
-MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-General Public License for more details.
-
-You should have received a copy of the GNU General Public License
-along with GNU Classpath; see the file COPYING.  If not, write to the
-Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
-02110-1301 USA.
-
-Linking this library statically or dynamically with other modules is
-making a combined work based on this library.  Thus, the terms and
-conditions of the GNU General Public License cover the whole
-combination.
-
-As a special exception, the copyright holders of this library give you
-permission to link this library with independent modules to produce an
-executable, regardless of the license terms of these independent
-modules, and to copy and distribute the resulting executable under
-terms of your choice, provided that you also meet, for each linked
-independent module, the terms and conditions of the license of that
-module.  An independent module is a module which is not derived from
-or based on this library.  If you modify this library, you may extend
-this exception to your version of the library, but you are not
-obligated to do so.  If you do not wish to do so, delete this
-exception statement from your version. */
-
-package java.net;
-
-import java.io.IOException;
-import java.util.Enumeration;
-
-
-/**
- * Written using on-line Java Platform 1.2 API Specification, as well
- * as "The Java Class Libraries", 2nd edition (Addison-Wesley, 1998).
- * Status:  Believed complete and correct.
- */
-/**
- * This class models a multicast UDP socket.  A multicast address is a
- * class D internet address (one whose most significant bits are 1110).
- * A multicast group consists of a multicast address and a well known
- * port number.  All members of the group listening on that address and
- * port will receive all the broadcasts to the group.
- * <p>
- * Please note that applets are not allowed to use multicast sockets
- *
- * Written using on-line Java Platform 1.2 API Specification, as well
- * as "The Java Class Libraries", 2nd edition (Addison-Wesley, 1998).
- * Status:  Believed complete and correct.
- *
- * @author Warren Levy (warrenl@cygnus.com)
- * @author Aaron M. Renn (arenn@urbanophile.com) (Documentation comments)
- * @since 1.1
- * @date May 18, 1999.
- */
-public class MulticastSocket extends DatagramSocket
-{
-  /**
-   * Create a MulticastSocket that this not bound to any address
-   *
-   * @exception IOException If an error occurs
-   * @exception SecurityException If a security manager exists and its
-   * checkListen method doesn't allow the operation
-   */
-  public MulticastSocket() throws IOException
-  {
-    this(new InetSocketAddress(0));
-  }
-
-  /**
-   * Create a multicast socket bound to the specified port
-   *
-   * @param port The port to bind to
-   *
-   * @exception IOException If an error occurs
-   * @exception SecurityException If a security manager exists and its
-   * checkListen method doesn't allow the operation
-   */
-  public MulticastSocket(int port) throws IOException
-  {
-    this(new InetSocketAddress(port));
-  }
-
-  /**
-   * Create a multicast socket bound to the specified SocketAddress.
-   *
-   * @param address The SocketAddress the multicast socket will be bound to
-   *
-   * @exception IOException If an error occurs
-   * @exception SecurityException If a security manager exists and its
-   * checkListen method doesn't allow the operation
-   *
-   * @since 1.4
-   */
-  public MulticastSocket(SocketAddress address) throws IOException
-  {
-    super((SocketAddress) null);
-    setReuseAddress(true);
-    if (address != null)
-      bind(address);
-  }
-
-  /**
-   * Returns the interface being used for multicast packets
-   *
-   * @return The multicast interface
-   *
-   * @exception SocketException If an error occurs
-   */
-  public InetAddress getInterface() throws SocketException
-  {
-    if (isClosed())
-      throw new SocketException("socket is closed");
-
-    return (InetAddress) getImpl().getOption(SocketOptions.IP_MULTICAST_IF);
-  }
-
-  /**
-   * Returns the current value of the "Time to Live" option.  This is the
-   * number of hops a packet can make before it "expires".   This method id
-   * deprecated.  Use <code>getTimeToLive</code> instead.
-   *
-   * @return The TTL value
-   *
-   * @exception IOException If an error occurs
-   *
-   * @deprecated 1.2 Replaced by getTimeToLive()
-   *
-   * @see MulticastSocket#getTimeToLive()
-   */
-  public byte getTTL() throws IOException
-  {
-    if (isClosed())
-      throw new SocketException("socket is closed");
-
-    // Use getTTL here rather than getTimeToLive in case we're using an impl
-    // other than the default PlainDatagramSocketImpl and it doesn't have
-    // getTimeToLive yet.
-    return getImpl().getTTL();
-  }
-
-  /**
-   * Returns the current value of the "Time to Live" option.  This is the
-   * number of hops a packet can make before it "expires".
-   *
-   * @return The TTL value
-   *
-   * @exception IOException If an error occurs
-   *
-   * @since 1.2
-   */
-  public int getTimeToLive() throws IOException
-  {
-    if (isClosed())
-      throw new SocketException("socket is closed");
-
-    return getImpl().getTimeToLive();
-  }
-
-  /**
-   * Sets the interface to use for sending multicast packets.
-   *
-   * @param addr The new interface to use.
-   *
-   * @exception SocketException If an error occurs.
-   *
-   * @since 1.4
-   */
-  public void setInterface(InetAddress addr) throws SocketException
-  {
-    if (isClosed())
-      throw new SocketException("socket is closed");
-
-    getImpl().setOption(SocketOptions.IP_MULTICAST_IF, addr);
-  }
-
-  /**
-   * Sets the local network interface used to send multicast messages
-   *
-   * @param netIf The local network interface used to send multicast messages
-   *
-   * @exception SocketException If an error occurs
-   *
-   * @see MulticastSocket#getNetworkInterface()
-   *
-   * @since 1.4
-   */
-  public void setNetworkInterface(NetworkInterface netIf)
-    throws SocketException
-  {
-    if (isClosed())
-      throw new SocketException("socket is closed");
-    
-    InetAddress address;
-    if (netIf != null)
-      out:
-      {
-        Enumeration e = netIf.getInetAddresses();
-        if (getLocalAddress() instanceof Inet4Address)
-          {
-            // Search for a IPv4 address.
-            while (e.hasMoreElements())
-              {
-                address = (InetAddress) e.nextElement();
-                if (address instanceof Inet4Address)
-                  break out;
-              }
-            throw new SocketException("interface " + netIf.getName() + " has no IPv6 address");
-          }
-        else if (getLocalAddress() instanceof Inet6Address)
-          {
-            // Search for a IPv6 address.
-            while (e.hasMoreElements())
-              {
-                address = (InetAddress) e.nextElement();
-                if (address instanceof Inet6Address)
-                  break out;
-              }
-            throw new SocketException("interface " + netIf.getName() + " has no IPv6 address");
-          }
-        else
-          throw new SocketException("interface " + netIf.getName() + " has no suitable IP address");
-      }
-    else
-      address = InetAddress.ANY_IF;
-    
-    
-    getImpl().setOption(SocketOptions.IP_MULTICAST_IF, address);
-  }
-
-  /**
-   * Gets the local network interface which is used to send multicast messages
-   *
-   * @return The local network interface to send multicast messages
-   *
-   * @exception SocketException If an error occurs
-   *
-   * @see MulticastSocket#setNetworkInterface(NetworkInterface netIf)
-   *
-   * @since 1.4
-   */
-  public NetworkInterface getNetworkInterface() throws SocketException
-  {
-    if (isClosed())
-      throw new SocketException("socket is closed");
-
-    InetAddress address =
-      (InetAddress) getImpl().getOption(SocketOptions.IP_MULTICAST_IF);
-    
-    // FIXME: libgcj doesn't have createAnyInterface.
-//     if (address.isAnyLocalAddress())
-//       return NetworkInterface.createAnyInterface();
-    
-    NetworkInterface netIf = NetworkInterface.getByInetAddress(address);
-
-    return netIf;
-  }
-
-  /**
-   * Disable/Enable local loopback of multicast packets.  The option is used by
-   * the platform's networking code as a hint for setting whether multicast
-   * data will be looped back to the local socket.
-   *
-   * Because this option is a hint, applications that want to verify what
-   * loopback mode is set to should call #getLoopbackMode
-   *
-   * @param disable True to disable loopback mode
-   *
-   * @exception SocketException If an error occurs
-   *
-   * @since 1.4
-   */
-  public void setLoopbackMode(boolean disable) throws SocketException
-  {
-    if (isClosed())
-      throw new SocketException("socket is closed");
-
-    getImpl().setOption(SocketOptions.IP_MULTICAST_LOOP,
-                        Boolean.valueOf(disable));
-  }
-
-  /**
-   * Checks if local loopback mode is enabled
-   *
-   * @return true if loopback mode is enabled, false otherwise
-   * 
-   * @exception SocketException If an error occurs
-   *
-   * @since 1.4
-   */
-  public boolean getLoopbackMode() throws SocketException
-  {
-    if (isClosed())
-      throw new SocketException("socket is closed");
-
-    Object buf = getImpl().getOption(SocketOptions.IP_MULTICAST_LOOP);
-
-    if (buf instanceof Boolean)
-      return ((Boolean) buf).booleanValue();
-
-    throw new SocketException("unexpected type");
-  }
-
-  /**
-   * Sets the "Time to Live" value for a socket.  The value must be between
-   * 1 and 255.
-   *
-   * @param ttl The new TTL value
-   *
-   * @exception IOException If an error occurs
-   *
-   * @deprecated 1.2 Replaced by <code>setTimeToLive</code>
-   *
-   * @see MulticastSocket#setTimeToLive(int ttl)
-   */
-  public void setTTL(byte ttl) throws IOException
-  {
-    if (isClosed())
-      throw new SocketException("socket is closed");
-
-    // Use setTTL here rather than setTimeToLive in case we're using an impl
-    // other than the default PlainDatagramSocketImpl and it doesn't have
-    // setTimeToLive yet.
-    getImpl().setTTL(ttl);
-  }
-
-  /**
-   * Sets the "Time to Live" value for a socket.  The value must be between
-   * 1 and 255.
-   *
-   * @param ttl The new TTL value
-   *
-   * @exception IOException If an error occurs
-   *
-   * @since 1.2
-   */
-  public void setTimeToLive(int ttl) throws IOException
-  {
-    if (isClosed())
-      throw new SocketException("socket is closed");
-
-    if (ttl <= 0 || ttl > 255)
-      throw new IllegalArgumentException("Invalid ttl: " + ttl);
-
-    getImpl().setTimeToLive(ttl);
-  }
-
-  /**
-   * Joins the specified multicast group.
-   *
-   * @param mcastaddr The address of the group to join
-   *
-   * @exception IOException If an error occurs
-   * @exception SecurityException If a security manager exists and its
-   * checkMulticast method doesn't allow the operation
-   */
-  public void joinGroup(InetAddress mcastaddr) throws IOException
-  {
-    if (isClosed())
-      throw new SocketException("socket is closed");
-
-    if (! mcastaddr.isMulticastAddress())
-      throw new IOException("Not a Multicast address");
-
-    SecurityManager s = System.getSecurityManager();
-    if (s != null)
-      s.checkMulticast(mcastaddr);
-
-    getImpl().join(mcastaddr);
-  }
-
-  /**
-   * Leaves the specified multicast group
-   *
-   * @param mcastaddr The address of the group to leave
-   *
-   * @exception IOException If an error occurs
-   * @exception SecurityException If a security manager exists and its
-   * checkMulticast method doesn't allow the operation
-   */
-  public void leaveGroup(InetAddress mcastaddr) throws IOException
-  {
-    if (isClosed())
-      throw new SocketException("socket is closed");
-
-    if (! mcastaddr.isMulticastAddress())
-      throw new IOException("Not a Multicast address");
-
-    SecurityManager s = System.getSecurityManager();
-    if (s != null)
-      s.checkMulticast(mcastaddr);
-
-    getImpl().leave(mcastaddr);
-  }
-
-  /**
-   * Joins the specified mulitcast group on a specified interface.
-   *
-   * @param mcastaddr The multicast address to join
-   * @param netIf The local network interface to receive the multicast
-   * messages on or null to defer the interface set by #setInterface or
-   * #setNetworkInterface
-   *
-   * @exception IOException If an error occurs
-   * @exception IllegalArgumentException If address type is not supported
-   * @exception SecurityException If a security manager exists and its
-   * checkMulticast method doesn't allow the operation
-   *
-   * @see MulticastSocket#setInterface(InetAddress addr)
-   * @see MulticastSocket#setNetworkInterface(NetworkInterface netIf)
-   *
-   * @since 1.4
-   */
-  public void joinGroup(SocketAddress mcastaddr, NetworkInterface netIf)
-    throws IOException
-  {
-    if (isClosed())
-      throw new SocketException("socket is closed");
-
-    if (! (mcastaddr instanceof InetSocketAddress))
-      throw new IllegalArgumentException("SocketAddress type not supported");
-
-    InetSocketAddress tmp = (InetSocketAddress) mcastaddr;
-
-    if (! tmp.getAddress().isMulticastAddress())
-      throw new IOException("Not a Multicast address");
-
-    SecurityManager s = System.getSecurityManager();
-    if (s != null)
-      s.checkMulticast(tmp.getAddress());
-
-    getImpl().joinGroup(mcastaddr, netIf);
-  }
-
-  /**
-   * Leaves the specified mulitcast group on a specified interface.
-   *
-   * @param mcastaddr The multicast address to leave
-   * @param netIf The local networki interface or null to defer to the
-   * interface set by setInterface or setNetworkInterface
-   *
-   * @exception IOException If an error occurs
-   * @exception IllegalArgumentException If address type is not supported
-   * @exception SecurityException If a security manager exists and its
-   * checkMulticast method doesn't allow the operation
-   *
-   * @see MulticastSocket#setInterface(InetAddress addr)
-   * @see MulticastSocket#setNetworkInterface(NetworkInterface netIf)
-   *
-   * @since 1.4
-   */
-  public void leaveGroup(SocketAddress mcastaddr, NetworkInterface netIf)
-    throws IOException
-  {
-    if (isClosed())
-      throw new SocketException("socket is closed");
-
-    InetSocketAddress tmp = (InetSocketAddress) mcastaddr;
-
-    if (! tmp.getAddress().isMulticastAddress())
-      throw new IOException("Not a Multicast address");
-
-    SecurityManager s = System.getSecurityManager();
-    if (s != null)
-      s.checkMulticast(tmp.getAddress());
-
-    getImpl().leaveGroup(mcastaddr, netIf);
-  }
-
-  /**
-   * Sends a packet of data to a multicast address with a TTL that is
-   * different from the default TTL on this socket.  The default TTL for
-   * the socket is not changed.
-   *
-   * @param packet The packet of data to send
-   * @param ttl The TTL for this packet
-   *
-   * @exception IOException If an error occurs
-   * @exception SecurityException If a security manager exists and its
-   * checkConnect or checkMulticast method doesn't allow the operation
-   *
-   * @deprecated
-   */
-  public synchronized void send(DatagramPacket packet, byte ttl)
-    throws IOException
-  {
-    if (isClosed())
-      throw new SocketException("socket is closed");
-
-    SecurityManager s = System.getSecurityManager();
-    if (s != null)
-      {
-	InetAddress addr = packet.getAddress();
-	if (addr.isMulticastAddress())
-	  s.checkPermission(new SocketPermission(addr.getHostName()
-	                                         + packet.getPort(),
-	                                         "accept,connect"));
-	else
-	  s.checkConnect(addr.getHostAddress(), packet.getPort());
-      }
-
-    int oldttl = getImpl().getTimeToLive();
-    getImpl().setTimeToLive(((int) ttl) & 0xFF);
-    getImpl().send(packet);
-    getImpl().setTimeToLive(oldttl);
-  }
-}
Index: libjava/java/net/natVMNetworkInterfacePosix.cc
===================================================================
--- libjava/java/net/natVMNetworkInterfacePosix.cc	(Revision 122041)
+++ libjava/java/net/natVMNetworkInterfacePosix.cc	(Revision 122203)
@@ -1,4 +1,4 @@
-/* Copyright (C) 2003, 2005, 2006  Free Software Foundation
+/* Copyright (C) 2003, 2005, 2006, 2007  Free Software Foundation
 
    This file is part of libgcj.
 
@@ -46,10 +46,10 @@
 #include <java/net/VMNetworkInterface.h>
 #include <java/util/Vector.h>
 
-::java::util::Vector*
+::java::util::Vector *
 java::net::VMNetworkInterface::getInterfaces ()
 {
-  ::java::util::Vector* ht = new ::java::util::Vector ();
+  ::java::util::Vector *ht = new ::java::util::Vector ();
 
 #ifdef HAVE_GETIFADDRS
 
@@ -86,12 +86,11 @@
       ::java::net::InetAddress *inaddr
 	  =  ::java::net::InetAddress::getByAddress(laddr);
 
-      // It is ok to make a new NetworkInterface for each struct; the
-      // java code will unify these as necessary; see
-      // NetworkInterface.condense().
+      // It is ok to make a new NetworkInterface for each struct,
+      // since we will use 'condense' to collapse them.
       jstring name = JvNewStringUTF (work->ifa_name);
 
-      ht->add (new NetworkInterface (name, inaddr));
+      ht->add (new VMNetworkInterface (name, inaddr));
     }
 
   freeifaddrs (addrs);
@@ -117,7 +116,7 @@
   do
     {
       num_interfaces += 16;
-      
+
       if_data.ifc_len = sizeof (struct ifreq) * num_interfaces;
       if_data.ifc_buf =
         (char*) _Jv_Realloc (if_data.ifc_buf, if_data.ifc_len);
@@ -149,7 +148,7 @@
       memcpy (elements (baddr), &(sa.sin_addr), len);
       jstring if_name = JvNewStringLatin1 (if_record->ifr_name);
       InetAddress* address = java::net::InetAddress::getByAddress (baddr);
-      ht->add (new NetworkInterface (if_name, address));
+      ht->add (new VMNetworkInterface (if_name, address));
       if_record++;
     }
 
Index: libjava/java/net/natVMNetworkInterfaceWin32.cc
===================================================================
--- libjava/java/net/natVMNetworkInterfaceWin32.cc	(Revision 122041)
+++ libjava/java/net/natVMNetworkInterfaceWin32.cc	(Revision 122203)
@@ -1,4 +1,4 @@
-/* Copyright (C) 2003, 2005  Free Software Foundation
+/* Copyright (C) 2003, 2005, 2007  Free Software Foundation
 
    This file is part of libgcj.
 
@@ -136,7 +136,7 @@
   int nNbInterfaces = (*pfn) (arIFName, arpInetAddress);
   for (int i=0; i < nNbInterfaces; ++i) 
     {
-      ht->add (new java::net::NetworkInterface (arIFName[i],
+      ht->add (new java::net::VMNetworkInterface (arIFName[i],
         arpInetAddress[i]));
     }
     
Index: libjava/java/net/VMNetworkInterface.java
===================================================================
--- libjava/java/net/VMNetworkInterface.java	(Revision 122041)
+++ libjava/java/net/VMNetworkInterface.java	(Revision 122203)
@@ -1,5 +1,5 @@
 /* VMNetworkInterface.java --
-   Copyright (C) 2005  Free Software Foundation, Inc.
+   Copyright (C) 2005, 2007  Free Software Foundation, Inc.
 
 This file is part of GNU Classpath.
 
@@ -38,9 +38,11 @@
 
 package java.net;
 
-import gnu.classpath.Configuration;
-
+import java.util.Collection;
 import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Set;
 import java.util.Vector;
 
 /**
@@ -55,12 +57,76 @@
  */
 final class VMNetworkInterface
 {
-  static
-    {
-      if (Configuration.INIT_LOAD_LIBRARY)
-	System.loadLibrary("javanet");
-    }
+  String name;
+  Set addresses;
 
-  public static native Vector getInterfaces()
+  VMNetworkInterface(String name)
+  {
+    this.name = name;
+    addresses = new HashSet();
+  }
+
+  /**
+   * Creates a dummy instance which represents any network
+   * interface.
+   */
+  public VMNetworkInterface()
+  {
+    addresses = new HashSet();
+    try
+      {
+        addresses.add(InetAddress.getByName("0.0.0.0"));
+      }
+    catch (UnknownHostException _)
+      {
+        // Cannot happen.
+      }
+  }
+
+  public VMNetworkInterface(String name, InetAddress addr)
+  {
+    this.name = name;
+    addresses = new HashSet();
+    addresses.add(addr);
+  }
+
+  /**
+   * Return a list of VM network interface objects.
+   *
+   * @return The list of network interfaces.
+   * @throws SocketException
+   */
+  public static VMNetworkInterface[] getVMInterfaces()
+    throws SocketException
+  {
+    // This is written in a weird way because the API changed, but it
+    // was simpler not to have to change the native code too much.
+    Collection<VMNetworkInterface> vals = condense(getInterfaces());
+    VMNetworkInterface[] result = new VMNetworkInterface[vals.size()];
+    return vals.toArray(result);
+  }
+
+  public static native Vector<VMNetworkInterface> getInterfaces()
     throws SocketException;
+
+  static Collection<VMNetworkInterface>
+  condense(Vector<VMNetworkInterface> interfaces)
+  {
+    final HashMap<String, VMNetworkInterface> condensed
+      = new HashMap<String, VMNetworkInterface>();
+
+    for (VMNetworkInterface face : interfaces)
+      {
+	final String name = face.name;
+	if (condensed.containsKey(name))
+	  {
+	    final VMNetworkInterface conface = condensed.get(name);
+	    conface.addresses.addAll(face.addresses);
+	  }
+	else
+	  condensed.put(name, face);
+      }
+
+    return condensed.values();
+  }
 }
Index: libjava/Makefile.am
===================================================================
--- libjava/Makefile.am	(Revision 122041)
+++ libjava/Makefile.am	(Revision 122203)
@@ -403,6 +403,7 @@
 	java/nio/DirectByteBufferImpl$$ReadWrite.h \
 	java/nio/channels/Pipe$$SinkChannel.h \
 	java/nio/channels/Pipe$$SourceChannel.h \
+	java/lang/VMProcess$ImmediateEOFInputStream.h \
 	java/lang/reflect/Proxy$$ProxyData.h \
 	java/lang/reflect/Proxy$$ProxyType.h \
 	gnu/java/net/PlainSocketImpl$$SocketInputStream.h \
@@ -848,7 +849,6 @@
 java/io/natFile.cc \
 java/io/natObjectInputStream.cc \
 java/io/natVMObjectStreamClass.cc \
-java/lang/management/natVMManagementFactory.cc \
 java/lang/natCharacter.cc \
 java/lang/natClass.cc \
 java/lang/natClassLoader.cc \
@@ -865,6 +865,7 @@
 java/lang/natThread.cc \
 java/lang/natThreadLocal.cc \
 java/lang/natVMClassLoader.cc \
+java/lang/natVMProcess.cc \
 java/lang/natVMThrowable.cc \
 java/lang/ref/natReference.cc \
 java/lang/reflect/natArray.cc \
