# -*- makefile -*-
# rules.conf
#	- used to build debian/control and debian/rules.parameters
#	- assumes unpacked sources

include debian/rules.defs

SOURCE_VERSION := $(call vafilt,$(CHANGELOG_VARS),Version)
DEB_VERSION := $(shell echo $(SOURCE_VERSION) \
	| sed -e 's/.*://' -e 's/ds[0-9]*//')
ifneq (,$(findstring gpc,$(PKGSOURCE)))
  GPC_BASE_VERSION := $(word 1, $(subst -, ,$(DEB_VERSION)))
  DEB_VERSION := $(subst $(GPC_BASE_VERSION)-,,$(DEB_VERSION))
endif
ifneq (,$(findstring gdc,$(PKGSOURCE)))
  GDC_BASE_VERSION := $(word 1, $(subst -, ,$(DEB_VERSION)))
  DEB_VERSION := $(shell echo $(DEB_VERSION) | sed -r 's/[0-9]{8}-//')
  DEB_VERSION := $(subst $(GDC_BASE_VERSION)-,,$(DEB_VERSION))
endif

# epoch used for gcc versions up to 3.3.x, now used for some remaining
# libraries: libgcc1, libobjc1, libffi2, libffi2-dev, libg2c0
EPOCH := 1
DEB_EVERSION := $(EPOCH):$(DEB_VERSION)
BASE_VERSION := $(shell echo $(DEB_VERSION) | sed -e 's/\([1-9]\.[0-9]\).*-.*/\1/')

# The binutils version needed.
# The oldest suitable versions for the various platforms can be found in
# INSTALL/specific.html ; we take a tighter dependency if possible to be on
# the safe side (something like newest( version in stable, versions for the
# various platforms in INSTALL/specific.html) ).
BINUTILSV = 2.17cvs20070426
ifdef DEB_CROSS
  BINUTILS_BUILD_DEP := binutils$(TS) (>= $(BINUTILSV))
else
  BINUTILS_BUILD_DEP := binutils (>= $(BINUTILSV)) | binutils-multiarch (>= $(BINUTILSV))
endif

# libc-dev dependencies
libc_ver := 2.5
ifeq ($(DEB_TARGET_ARCH_OS),linux)
  ifneq (,$(findstring $(DEB_TARGET_ARCH),alpha ia64))
    LIBC_DEP = libc6.1
    LIBC_DEV_DEP = libc6.1-dev$(LS) (>= $(libc_ver))
  else
    LIBC_DEP = libc6
    LIBC_DEV_DEP = libc6-dev$(LS) (>= $(libc_ver))
  endif
else
  ifeq ($(DEB_TARGET_ARCH_OS),gnu)
    LIBC_DEP = libc0.3
    LIBC_DEV_DEP = libc0.3-dev$(LS)
  endif
  ifeq ($(DEB_TARGET_ARCH_OS),kfreebsd)
    LIBC_DEP = libc0.1
    LIBC_DEV_DEP = libc0.1-dev
  endif
  ifeq ($(DEB_TARGET_ARCH_OS),knetbsd)
    LIBC_DEP = libc0.1
    LIBC_DEV_DEP = libc0.1-dev$(LS)
  endif
  ifeq ($(DEB_TARGET_ARCH_OS),netbsd)
    LIBC_DEP = libc12
    LIBC_DEV_DEP = libc12-dev$(LS)
  endif
endif

LIBC_BIARCH_DEP :=
LIBC_BIARCH_DEV_DEP :=
LIBCXX_BIARCH_DEP :=
ifeq ($(biarch),yes)
  ifeq ($(DEB_TARGET_ARCH),i386)
    LIBC_BIARCH_DEP := libc6-amd64$(LS) (>= $(libc_ver))
    LIBC_BIARCH_DEV_DEP := libc6-dev-amd64$(LS)
  endif
  ifeq ($(DEB_TARGET_ARCH),powerpc)
    LIBC_BIARCH_DEP := libc6-ppc64$(LS) (>= $(libc_ver))
    LIBC_BIARCH_DEV_DEP := libc6-dev-ppc64$(LS) (>= $(libc_ver))
  endif
  ifeq ($(DEB_TARGET_ARCH),sparc)
    LIBC_BIARCH_DEP := libc6-sparc64$(LS) (>= $(libc_ver))
    LIBC_BIARCH_DEV_DEP := libc6-dev-sparc64$(LS) (>= $(libc_ver))
  endif
  ifeq ($(DEB_TARGET_ARCH),s390)
    LIBC_BIARCH_DEP := libc6-s390x$(LS) (>= $(libc_ver))
    LIBC_BIARCH_DEV_DEP := libc6-dev-s390x$(LS) (>= $(libc_ver))
  endif
  LIBCXX_BIARCH_DEP = lib64stdc++$(CXX_SONAME)$(LS) (>= $${gcc:Version})
  LIBCXX_BIARCH_DBG_DEP = lib64stdc++$(CXX_SONAME)-$(BASE_VERSION)-dbg
endif
ifeq ($(biarch32),yes)
  ifeq ($(DEB_TARGET_ARCH),amd64)
    LIBC_BIARCH_DEV_DEP := libc6-dev-i386$(LS) (>= $(libc_ver))
    LIBC_BIARCH_DEP := libc6-i386$(LS) (>= $(libc_ver))
  endif
  ifeq ($(DEB_TARGET_ARCH),ppc64)
    LIBC_BIARCH_DEP := libc6-powerpc$(LS) (>= $(libc_ver))
    LIBC_BIARCH_DEV_DEP := libc6-dev-powerpc$(LS) (>= $(libc_ver))
  endif
  ifeq ($(DEB_TARGET_ARCH),kfreebsd-amd64)
    LIBC_BIARCH_DEV_DEP := libc0.1-dev-i386$(LS) (>= $(libc_ver))
    LIBC_BIARCH_DEP := libc0.1-i386$(LS) (>= $(libc_ver))
  endif
  LIBCXX_BIARCH_DEP = lib32stdc++$(CXX_SONAME)$(LS) (>= $${gcc:Version})
  LIBCXX_BIARCH_DBG_DEP = lib32stdc++$(CXX_SONAME)-$(BASE_VERSION)-dbg
endif

LIBUNWIND_DEV_DEP :=
ifeq ($(DEB_TARGET_ARCH),ia64)
  LIBUNWIND_DEV_DEP := libunwind7-dev$(LS) (>= 0.98.5-6)
endif

SOURCE_BUILD_DEP += gcc-$(BASE_VERSION)-source (>= $(BASE_VERSION).2), gcc-$(BASE_VERSION)-source (<< $(BASE_VERSION).3),

CHECK_BUILD_DEP := expect-tcl8.3 [hppa], dejagnu [check_no_archs]
ifeq ($(distribution),Ubuntu)
  ifneq ($(PKGSOURCE),gcc-snapshot)
    CHECK_BUILD_DEP = dejagnu [check_no_archs]
  endif
endif
ifneq (,$(findstring gpc, $(PKGSOURCE)))
  CHECK_BUILD_DEP = dejagnu [check_no_archs]
endif
ifneq (,$(findstring gdc, $(PKGSOURCE)))
  CHECK_BUILD_DEP = dejagnu [check_no_archs]
endif

ifneq (,$(findstring gcc, $(PKGSOURCE)))
  AUTOGEN_BUILD_DEP = autogen,
  ifeq ($(distribution),Ubuntu)
    AUTOGEN_BUILD_DEP = autogen [!ia64],
  endif
endif

ifndef DEB_CROSS
LIBC_BUILD_DEP := libc6.1-dev (>= $(libc_ver)) [alpha ia64] | libc0.3-dev (>= $(libc_ver)) [hurd-i386] | libc0.1-dev (>= $(libc_ver)) [kfreebsd-i386 kfreebsd-amd64] | libc6-dev (>= $(libc_ver))

ifneq (,$(java_awt_peers))
  JAVA_BUILD_DEP := libmagic-dev [java_no_archs],
  JAVA_BUILD_DEP += libasound2-dev [java_no_archs !hurd-i386 !kfreebsd-i386 !kfreebsd-amd64],
  ifneq (,$(findstring gtk,$(java_awt_peers)))
    JAVA_BUILD_DEP += libxtst-dev [java_no_archs], libxt-dev [java_no_archs], libgtk2.0-dev (>= 2.4.4-2) [java_no_archs], libart-2.0-dev [java_no_archs], libcairo2-dev [java_no_archs],
  endif
  ifneq (,$(findstring qt,$(java_awt_peers)))
    JAVA_BUILD_DEP += libqt4-dev (>= 4.1.0) [java_no_archs],
  endif
  # plugin
  JAVA_BUILD_DEP += libgconf2-dev [java_no_archs],
  JAVA_BUILD_DEP += libxul-dev [java_plugin_no_archs],
  JAVA_BUILD_DEP += fastjar [java_no_archs],
  JAVA_BUILD_DEP += ecj (>= 3.3.0-2) [java_no_archs], zip [java_no_archs],
  # gcj-4.1 needed for gjavah-4.1.
  JAVA_BUILD_DEP += gcj-4.1 [java_no_archs],
endif
ifneq ($(with_standalone_gcj),yes)
  ifeq ($(PKGSOURCE),gcj-$(BASE_VERSION))
    JAVA_BUILD_DEP += $(SOURCE_BUILD_DEP)
    JAVA_BUILD_DEP += gcc-4.1 (>= 4.1.2),
  endif
endif
JAVA_BUILD_INDEP := gjdoc
ifeq ($(with_separate_libgcj),yes)
  ifeq ($(PKGSOURCE),gcc-$(BASE_VERSION))
    JAVA_BUILD_DEP :=
    JAVA_BUILD_INDEP :=
  endif
endif

ifeq ($(PKGSOURCE),gcc-$(BASE_VERSION))
  LIBSTDCXX_BUILD_INDEP = doxygen (>= 1.4.2), graphviz (>= 2.2), gsfonts-x11
  JAVA_BUILD_INDEP := , $(JAVA_BUILD_INDEP)
endif

PASCAL_BUILD_DEP := libncurses5-dev [pascal_no_archs], texlive-latex-base [pascal_no_archs], libgmp3-dev [pascal_no_archs], help2man [pascal_no_archs],

ifeq ($(PKGSOURCE),gcc-$(BASE_VERSION))
  ifneq ($(with_separate_gnat),yes)
    # Build gnat as part of the combiled gcc-x.y source package.  Do not fail
    # if gnat is not present on unsupported architectures; the build scripts
    # will not use gnat anyway.
    GNAT_BUILD_DEP := gnat-4.1 [ada_no_archs],
  endif
  ifeq ($(with_separate_gpc),yes)
    PASCAL_BUILD_DEP :=
  endif
else ifeq ($(PKGSOURCE),gcc-snapshot)
  # Ditto, as part of the gcc-snapshot package.
  GNAT_BUILD_DEP := gnat-4.1 [ada_no_archs],
  PASCAL_BUILD_DEP :=
else ifeq ($(PKGSOURCE),gnat-$(BASE_VERSION))
  # Special source package just for gnat. Fail early if gnat is not present,
  # rather than waste CPU cycles and fail later.
  GNAT_BUILD_DEP := gnat-4.1,
  GNAT_BUILD_DEP += $(SOURCE_BUILD_DEP)
  JAVA_BUILD_DEP :=
  JAVA_BUILD_INDEP :=
  GDC_BUILD_DEP :=
  PASCAL_BUILD_DEP :=
else ifeq ($(PKGSOURCE),gcj-$(BASE_VERSION))
  # Special source package just for gcj.
  GNAT_BUILD_DEP :=
  PASCAL_BUILD_DEP :=
  GDC_BUILD_DEP :=
else ifeq ($(PKGSOURCE),gdc-$(BASE_VERSION))
  # Special source package just for gdc.
  GNAT_BUILD_DEP :=
  JAVA_BUILD_DEP :=
  JAVA_BUILD_INDEP :=
  PASCAL_BUILD_DEP :=
  GDC_BUILD_DEP := $(SOURCE_BUILD_DEP)
else ifeq ($(PKGSOURCE),gpc-$(BASE_VERSION))
  # Special source package just for gpc.
  GNAT_BUILD_DEP :=
  JAVA_BUILD_DEP :=
  JAVA_BUILD_INDEP :=
  GDC_BUILD_DEP :=
  PASCAL_BUILD_DEP += $(SOURCE_BUILD_DEP)
endif

LIBC_BIARCH_BUILD_DEP = libc6-dev-amd64 [i386], libc6-dev-sparc64 [sparc], libc6-dev-s390x [s390], libc6-dev-i386 [amd64], libc6-dev-powerpc [ppc64], libc6-dev-ppc64 [powerpc], libc0.1-dev-i386 [kfreebsd-amd64], lib32gcc1 [amd64 ppc64 kfreebsd-amd64], lib64gcc1 [i386 powerpc sparc s390], lib64z1-dev [i386 powerpc sparc s390], lib32z1-dev [amd64 ppc64 kfreebsd-amd64],

#ifeq ($(PKGSOURCE),gcc-snapshot)
#  LIBC_BIARCH_BUILD_DEP =
#endif

else
# build cross compiler

LIBC_BUILD_DEP := $(LIBC_DEV_DEP)

ifneq ($(LIBC_BIARCH_DEV_DEP),)
  LIBC_BIARCH_BUILD_DEP := $(LIBC_BIARCH_DEV_DEP),
else
  LIBC_BIARCH_BUILD_DEP :=
endif

ifneq ($(LIBUNWIND_DEV_DEP),)
  LIBUNWIND_BUILD_DEP := $(LIBUNWIND_DEV_DEP),
else
  LIBUNWIND_BUILD_DEP := 
endif

ifeq ($(DEB_TARGET_ARCH),ia64)
  LIBATOMIC_OPS_BUILD_DEP := libatomic-ops-dev$(LS),
else
  LIBATOMIC_OPS_BUILD_DEP :=
endif

JAVA_BUILD_DEP :=
JAVA_BUILD_INDEP :=
GNAT_BUILD_DEP :=

endif # cross compiler

GCC_VERSION := $(strip $(shell cat $(srcdir)/gcc/BASE-VER))

# The numeric part of the gcc version number (x.yy.zz)
NEXT_GCC_VERSION := $(shell echo $(GCC_VERSION) | \
		awk -F. '{OFS="."; if (NF==2) $$3=1; else $$NF += 1; print}')
# first version with a new path component in gcc_lib_dir (i.e. GCC_VERSION
# or TARGET_ALIAS changes), or last version available for all architectures
DEB_GCC_SOFT_VERSION := 4.1.2-2
DEB_GCJ_SOFT_VERSION := 4.1.2-2
ifeq ($(with_pascal),yes)
GPC_DATE := $(shell sed -n 's/^.define GPC_VERSION_STRING "\(.*\)"/\1/p' $(srcdir)/gcc/p/version.h || true)
DEB_GPC_VERSION := $(shell echo $(DEB_VERSION) \
			   | sed 's/.*:\(.*\)-\(.*\)/2:\1.$(GPC_DATE)-\2/')
endif

ifeq ($(with_pascal),yes)
  DEB_GPC_VERSION := $(GPC_BASE_VERSION)-$(DEB_VERSION)
endif

ifeq ($(with_d),yes)
  DEB_GDC_VERSION := $(GDC_BASE_VERSION)-$(DEB_VERSION)
endif

# semiautomatic ...
DEB_SOVERSION := $(DEB_VERSION)
DEB_SOVERSION := 4.1.2
DEB_SOEVERSION := $(EPOCH):4.1.2
DEB_STDCXX_SOVERSION := 4.1.2
DEB_GCJ_SOVERSION := 4.1.2-1
DEB_FFI_SOVERSION := $(DEB_SOVERSION)

DEB_GCC_VERSION := $(DEB_VERSION)
DEB_GCJ_VERSION := $(DEB_VERSION)
ifeq ($(with_separate_libgcj),yes)
  ifeq ($(PKGSOURCE),gcj-$(BASE_VERSION))
    DEB_GCC_VERSION := $(DEB_GCC_SOFT_VERSION)
  endif
endif

DEB_GNAT_VERSION := $(DEB_VERSION)
ifeq ($(with_separate_gnat),yes)
  ifeq ($(PKGSOURCE),gnat-$(BASE_VERSION))
    DEB_GCC_VERSION := $(DEB_GCC_SOFT_VERSION)
  endif
endif

# manual ...
ifeq ($(DEB_TARGET_GNU_CPU), $(findstring $(DEB_TARGET_GNU_CPU),hppa m68k))
  ifeq ($(DEB_TARGET_ARCH),m68k)
    GCC_SONAME := 2
  endif
  ifeq ($(DEB_TARGET_ARCH),hppa)
    GCC_SONAME := 4
  endif
  DEB_LIBGCC_SOVERSION := $(DEB_SOVERSION)
  DEB_LIBGCC_VERSION := $(DEB_VERSION)
else
  GCC_SONAME := 1
  DEB_LIBGCC_SOVERSION := $(DEB_SOEVERSION)
  DEB_LIBGCC_VERSION := $(DEB_EVERSION)
endif

LIBGCC_DEP := libgcc$(GCC_SONAME)$(LS) (>= $(DEB_LIBGCC_VERSION))
LIBGCC_BIARCH_DEP := 
ifeq ($(biarch),yes)
  LIBGCC_BIARCH_DEP := lib64gcc$(GCC_SONAME)$(LS) (>= $(DEB_LIBGCC_VERSION))
endif
ifeq ($(biarch32),yes)
  LIBGCC_BIARCH_DEP := lib32gcc$(GCC_SONAME)$(LS) (>= $(DEB_LIBGCC_VERSION))
endif

ifeq (,$(wildcard debian/soname-cache))
  SONAME_VARS := $(shell \
	cache=debian/soname-cache; \
	rm -f $$cache; \
	v=`awk -F= '/^libtool_VERSION/ {split($$2,v,":"); print v[1]}' \
		$(srcdir)/libstdc++-v3/configure.ac`; \
	echo CXX_SONAME=$$v >> $$cache; \
	v=`awk -F= '/^VERSION/ {split($$2,v,":"); print v[1]}' \
		$(srcdir)/libobjc/configure.ac`; \
	echo OBJC_SONAME=$$v >> $$cache; \
	v=`tail -1 $(srcdir)/libgfortran/libtool-version | cut -d: -f1`; \
	echo FORTRAN_SONAME=$$v >> $$cache; \
	v=`tail -1 $(srcdir)/libmudflap/libtool-version | cut -d: -f1`; \
	echo MUDFLAP_SONAME=$$v >> $$cache; \
	v=`tail -1 $(srcdir)/libssp/libtool-version | cut -d: -f1`; \
	echo SSP_SONAME=$$v >> $$cache; \
	v=`tail -1 $(srcdir)/libjava/libtool-version | cut -d: -f1`; \
	echo GCJ_SONAME=$$v >> $$cache; \
	if [ "$$v" -ge 70 ]; then \
	  echo GCJ_SONAME1=`echo $$v | sed 's/.$$//'` >> $$cache; \
	  echo GCJ_SONAME2=`echo $$v | sed 's/.*\(.\)$$/\1/'` >> $$cache; \
	else \
	  echo GCJ_SONAME1=$$v >> $$cache; \
	  echo GCJ_SONAME2= >> $$cache; \
	fi; \
	v=`tail -1 $(srcdir)/libffi/libtool-version | cut -d: -f1`; \
	echo FFI_SONAME=$$v >> $$cache; \
	v=`grep '[^_]Library_Version.*:' $(srcdir)/gcc/ada/gnatvsn.ads \
		| sed -e 's/.*"\([^"]*\)".*/\1/'`; \
	echo GNAT_SONAME=$$v >> $$cache; \
	cat $$cache)
else
  SONAME_VARS := $(shell cat debian/soname-cache)
endif
CXX_SONAME	= $(call vafilt,$(SONAME_VARS),CXX_SONAME)
OBJC_SONAME	= $(call vafilt,$(SONAME_VARS),OBJC_SONAME)
FORTRAN_SONAME	= $(call vafilt,$(SONAME_VARS),FORTRAN_SONAME)
MUDFLAP_SONAME	= $(call vafilt,$(SONAME_VARS),MUDFLAP_SONAME)
SSP_SONAME	= $(call vafilt,$(SONAME_VARS),SSP_SONAME)
GCJ_SONAME	= $(call vafilt,$(SONAME_VARS),GCJ_SONAME)
GCJ_SONAME1	= $(call vafilt,$(SONAME_VARS),GCJ_SONAME1)
GCJ_SONAME2	= $(call vafilt,$(SONAME_VARS),GCJ_SONAME2)
FFI_SONAME	= $(call vafilt,$(SONAME_VARS),FFI_SONAME)
GNAT_SONAME	= $(call vafilt,$(SONAME_VARS),GNAT_SONAME)

GNAT_VERSION := $(BASE_VERSION)

LIBGNAT_DEP :=
ifeq ($(with_libgnat),yes)
  LIBGNAT_DEP := libgnat-$(GNAT_VERSION) (= $(DEB_VERSION))
endif

pkg_ver := -$(BASE_VERSION)

PKG_GCJ_EXT = $(GCJ_SONAME1)
PKG_LIBGCJ_EXT = $(GCJ_SONAME1)$(if $(GCJ_SONAME2),-$(GCJ_SONAME2))

ctrl_flags = \
	-DBINUTILSV=$(BINUTILSV) \
	-DSRCNAME=$(PKGSOURCE) \
	-D__$(DEB_TARGET_GNU_CPU)__ \
	-DARCH=$(DEB_TARGET_ARCH) \
	-DDIST=$(distribution)
ifeq ($(with_objc)-$(with_objc_gc),yes-yes)
  ctrl_flags +=	-DOBJC_GC
endif

ctrl_flags += \
	-DLIBC_DEV_DEP="$(LIBC_DEV_DEP)" \
	-DLIBC_BIARCH_BUILD_DEP="$(LIBC_BIARCH_BUILD_DEP)" \
	-DGNAT_BUILD_DEP="$(GNAT_BUILD_DEP)" \
	-DJAVA_BUILD_DEP="$(JAVA_BUILD_DEP)" \
	-DJAVA_BUILD_INDEP="$(JAVA_BUILD_INDEP)" \
	-DLIBSTDCXX_BUILD_INDEP="$(LIBSTDCXX_BUILD_INDEP)" \
	-DPASCAL_BUILD_DEP="$(PASCAL_BUILD_DEP)" \
	-DGDC_BUILD_DEP="$(GDC_BUILD_DEP)" \
	-DBINUTILS_BUILD_DEP="$(BINUTILS_BUILD_DEP)" \
	-DLIBC_BUILD_DEP="$(LIBC_BUILD_DEP)" \
	-DCHECK_BUILD_DEP="$(CHECK_BUILD_DEP)" \
	-DAUTOGEN_BUILD_DEP="$(AUTOGEN_BUILD_DEP)" \
	-DMULTILIB_ARCHS="$(multilib_archs)" \
	-DTP=$(TP) \
	-DTS=$(TS) \
	-DLS=$(LS)

ifdef DEB_CROSS
  ctrl_flags += \
	-DTARGET=$(DEB_TARGET_ARCH) \
	-DLIBUNWIND_BUILD_DEP="$(LIBUNWIND_BUILD_DEP)" \
	-DLIBATOMIC_OPS_BUILD_DEP="$(LIBATOMIC_OPS_BUILD_DEP)"
else
  # add '-DPRI=optional' to ctrl_flags if this is not the default compiler
  # ctrl_flags += \
  #     -DPRI=optional
endif

ifeq ($(with_base_only),yes)
  ctrl_flags += \
	-DBASE_ONLY=yes
endif

control: control-file parameters-file substvars-file versioned-files

ifdef DEB_CROSS
  languages = c c++ objc objpp
  addons = libgcc lib64gcc libcxx lib64cxx cdev c++dev libobjc objcdev objppdev
  ifdef DEB_CROSS_INDEPENDENT
    addons += gccxbase
  endif
  ifeq ($(with_d),yes)
    ifeq ($(with_separate_gdc),yes)
      languages = # disable others languages
      addons = # disable others addons
    endif
    languages += d
    ifeq ($(with_libphobos),yes)
      addons += libphobos
    endif
  endif
else
  languages = ada c c++ java d # pascal
  addons = gccbase cdev c++dev fdev fixincl libcxx lib4gcc \
	   libgcc libffi libgcj libgcjdev libgnat libs \
	   lib64gcc lib64cxx lib64ffi \
	   lib32gcc lib32cxx \
	   proto mudflap source \
	   multilib # libnof lib64gnat ssp
  ifeq ($(with_fastjar),yes)
     addons += fastjar
  endif
  ifeq ($(with_separate_libgcj),yes)
    ifeq ($(PKGSOURCE),gcc-$(BASE_VERSION))
      languages := $(filter-out java,$(languages))
      addons := $(filter-out gcj libgcj libgcjdev,$(addons))
    endif
    ifeq ($(PKGSOURCE),gcj-$(BASE_VERSION))
      languages = java
      addons = gcj libgcj libgcjdev
    endif
  endif
  ifeq ($(with_standalone_gcj),yes)
    ifeq ($(PKGSOURCE),gcj-$(BASE_VERSION))
      addons += lib4gcc
      ifeq ($(with_fastjar),yes)
         addons += fastjar
      endif
      ctrl_flags += -DSTANDALONEJAVA
    endif
    ifeq ($(PKGSOURCE),gcc-$(BASE_VERSION))
      addons := $(filter-out fastjar,$(addons))
    endif
  endif
  ifeq ($(with_separate_gnat),yes)
    ifeq ($(PKGSOURCE),gcc-$(BASE_VERSION))
      languages := $(filter-out ada,$(languages))
      addons := $(filter-out libgnat,$(addons))
    endif
    ifeq ($(PKGSOURCE),gnat-$(BASE_VERSION))
      languages = ada
      addons = libgnat
    endif
  endif
  ifeq ($(with_separate_gpc),yes)
    ifeq ($(PKGSOURCE),gcc-$(BASE_VERSION))
      languages := $(filter-out pascal,$(languages))
    endif
    ifeq ($(PKGSOURCE),gpc-$(BASE_VERSION))
      languages = pascal
      addons = 
    endif
  endif
  ifeq ($(with_separate_gdc),yes)
    ifeq ($(PKGSOURCE),gcc-$(BASE_VERSION))
      languages := $(filter-out d,$(languages))
    endif
    ifeq ($(PKGSOURCE),gdc-$(BASE_VERSION))
      languages = d
      addons = 
      ifeq ($(with_libphobos),yes)
        addons += libphobos
      endif
    endif
  endif
  ifneq ($(GFDL_INVARIANT_FREE),yes)
    addons += gfdldoc
  endif
endif

ifeq ($(distribution),DebianXXX)
# use type-handling
ada_no_archs := $(strip \
	$(shell type-handling -n -r `echo $(ada_no_cpus) | tr ' ' ,` any) \
	$(shell type-handling -n -r any `echo $(ada_no_systems) | tr ' ' ,`))
java_no_archs := $(strip \
	$(shell type-handling -n -r `echo $(java_no_cpus) | tr ' ' ,` any) \
	$(shell type-handling -n -r any `echo $(java_no_systems) | tr ' ' ,`))
pascal_no_archs := $(strip \
	$(shell type-handling -n -r `echo $(pascal_no_cpus) | tr ' ' ,` any) \
	$(shell type-handling -n -r any `echo $(pascal_no_systems) | tr ' ' ,`))
fortran_no_archs := $(strip \
	$(shell type-handling -n -r `echo $(fortran_no_cpus) | tr ' ' ,` any) \
	$(shell type-handling -n -r any `echo $(fortran_no_systems) | tr ' ' ,`))
libphobos_no_archs := $(strip \
	$(shell type-handling -n -r `echo $(libphobos_no_cpus) | tr ' ' ,` any) \
	$(shell type-handling -n -r any `echo $(libphobos_no_systems) | tr ' ' ,`))
libgc_no_archs := $(strip \
	$(shell type-handling -n -r `echo $(libgc_no_cpus) | tr ' ' ,` any) \
	$(shell type-handling -n -r any `echo $(libgc_no_systems) | tr ' ' ,`))
check_no_archs := $(strip \
	$(shell type-handling -n -r `echo $(check_no_cpus) | tr ' ' ,` any) \
	$(shell type-handling -n -r any `echo $(check_no_systems) | tr ' ' ,`) \
	!hurd-i386)
locale_no_archs := $(strip \
	$(shell type-handling -n -r `echo $(locale_no_cpus) | tr ' ' ,` any) \
	$(shell type-handling -n -r any `echo $(locale_no_systems) | tr ' ' ,`))

linux_gnu_archs := $(shell type-handling -r any linux-gnu)
else
# avoid it ...
ada_no_archs    := $(strip $(foreach cpu,$(ada_no_cpus),!$(cpu)) \
			!kfreebsd-amd64 !kfreebsd-i386 !hurd-i386)
java_no_archs   := $(strip $(foreach cpu,$(java_no_cpus),!$(cpu)) \
			)
java_plugin_no_archs := $(strip $(foreach cpu,$(java_plugin_no_cpus),!$(cpu)) \
			)
pascal_no_archs := $(strip $(foreach cpu,$(pascal_no_cpus),!$(cpu)) \
			)
fortran_no_archs:= $(strip $(foreach cpu,$(fortran_no_cpus),!$(cpu)) \
			!avr)
libphobos_no_archs    := $(strip $(foreach cpu,$(libphobos_no_cpus),!$(cpu)) \
			!hurd-i386)
libgc_no_archs  := $(strip $(foreach cpu,$(libgc_no_cpus),!$(cpu)) \
			)
check_no_archs  := $(strip $(foreach cpu,$(check_no_cpus),!$(cpu)) \
			!hurd-i386)
locale_no_archs := $(strip $(foreach cpu,$(locale_no_cpus),!$(cpu)) \
			!hurd-i386)
linux_gnu_archs := !hurd-i386
endif

locale_no_archs += !m68k


control-file:
	echo "addons: $(addons)"; \
	m4 $(ctrl_flags) \
	  -DPV=$(pkg_ver) \
	  -DCXX_SO=$(CXX_SONAME) \
	  -DGCC_SO=$(GCC_SONAME) \
	  -DOBJC_SO=$(OBJC_SONAME) \
	  -DFORTRAN_SO=$(FORTRAN_SONAME) \
	  -DGCJ_SO=$(PKG_GCJ_EXT) \
	  -DLIBGCJ_EXT=$(PKG_LIBGCJ_EXT) \
	  -DGNAT_SO=$(GNAT_SONAME) \
	  -DGNAT_V=$(GNAT_VERSION) \
	  -DPHOBOS_V=$(libphobos_version) \
	  -DFFI_SO=$(FFI_SONAME) \
	  -DMF_SO=$(MUDFLAP_SONAME) \
	  -DSSP_SO=$(SSP_SONAME) \
	  -Denabled_languages="$(languages) $(addons)" \
	  -Dada_no_archs="$(ada_no_archs)" \
	  -Djava_no_archs="$(java_no_archs)" \
	  -Djava_plugin_no_archs="$(java_plugin_no_archs)" \
	  -Dpascal_no_archs="$(pascal_no_archs)" \
	  -Dfortran_no_archs="$(fortran_no_archs)" \
	  -Dlibgc_no_archs="$(libgc_no_archs)" \
	  -Dcheck_no_archs="$(check_no_archs)" \
	  -Dlocale_no_archs="$(locale_no_archs)" \
	  -Dlinux_gnu_archs="$(linux_gnu_archs)" \
	  -Dlibphobos_no_archs="$(libphobos_no_archs)" \
	  -Dbiarch32_archs="$(strip $(subst /, ,$(biarch32_archs)))" \
	  -Dbiarch64_archs="$(strip $(subst /, ,$(biarch_archs)))" \
		debian/control.m4 > debian/control.tmp2
	uniq debian/control.tmp2 | sed '/^Build/s/ *, */, /g;s/ *\[\]//g' \
		> debian/control.tmp
	rm -f debian/control.tmp2
	[ -e debian/control ] \
	  && cmp -s debian/control debian/control.tmp \
	  && rm -f debian/control.tmp && exit 0; \
	  mv debian/control.tmp debian/control; touch $(control_stamp)

substvars-file:
	rm -f debian/substvars.local.tmp
	( \
		echo 'gcc:Version=$(DEB_GCC_VERSION)'; \
		echo 'gcc:EpochVersion=$(DEB_EVERSION)'; \
		echo 'gcc:SoftVersion=$(DEB_GCC_SOFT_VERSION)'; \
		echo 'gpc:Version=$(DEB_GPC_VERSION)'; \
		echo 'gdc:Version=$(DEB_GDC_VERSION)'; \
		echo 'gcj:Version=$(DEB_GCJ_VERSION)'; \
		echo 'gcj:SoftVersion=$(DEB_GCJ_SOFT_VERSION)'; \
		echo 'gnat:Version=$(DEB_GNAT_VERSION)'; \
		echo 'binutils:Version=$(BINUTILSV)'; \
		echo 'dep:libgcc=$(LIBGCC_DEP)'; \
		echo 'dep:libgccbiarch=$(LIBGCC_BIARCH_DEP)'; \
		echo 'dep:libcdev=$(LIBC_DEV_DEP)'; \
		echo 'dep:libcbiarch=$(LIBC_BIARCH_DEP)'; \
		echo 'dep:libcbiarchdev=$(LIBC_BIARCH_DEV_DEP)'; \
		echo 'dep:libunwinddev=$(LIBUNWIND_DEV_DEP)'; \
		echo 'dep:libcxxbiarch=$(LIBCXX_BIARCH_DEP)'; \
		echo 'dep:libcxxbiarchdbg=$(LIBCXX_BIARCH_DBG_DEP)'; \
		echo 'dep:libgnat=$(LIBGNAT_DEP)'; \
	) > debian/substvars.local.tmp
ifneq (,$(filter $(DEB_TARGET_ARCH), $(multilib_archs)))
	( \
		echo 'gcc:multilib=gcc-$(BASE_VERSION)-multilib$(TS)'; \
		echo 'gxx:multilib=g++-$(BASE_VERSION)-multilib$(TS)'; \
		echo 'gobjc:multilib=gobjc-$(BASE_VERSION)-multilib$(TS)'; \
		echo 'gobjcxx:multilib=gobjc++-$(BASE_VERSION)-multilib$(TS)'; \
		echo 'gfortran:multilib=gfortran-$(BASE_VERSION)-multilib$(TS)'; \
	) >> debian/substvars.local.tmp
endif
ifeq ($(with_libssp),yes)
	echo 'dep:libssp=libssp$(SSP_SONAME)' \
		>> debian/substvars.local.tmp
endif
ifeq ($(with_lib32fortran),yes)
	echo 'dep:libfortranbiarch=lib32gfortran$(FORTRAN_SONAME) (>= $${gcc:Version})' \
		>> debian/substvars.local.tmp
endif
ifeq ($(with_lib32objc),yes)
	echo 'dep:libobjcbiarch=lib32objc$(OBJC_SONAME) (>= $${gcc:Version})' \
		>> debian/substvars.local.tmp
endif
ifeq ($(with_lib32ffi),yes)
	echo 'sug:libffidev=lib32ffi$(FFI_SONAME)' \
		>> debian/substvars.local.tmp
endif
ifeq ($(with_lib32mudflap),yes)
	echo 'dep:libmudflapbiarch=lib32mudflap$(MUDFLAP_SONAME)' \
		>> debian/substvars.local.tmp
endif
ifeq ($(with_lib32ssp),yes)
	echo 'dep:libsspbiarch=lib32ssp$(SSP_SONAME) (>= $${gcc:Version})' \
		>> debian/substvars.local.tmp
endif
ifeq ($(with_lib64fortran),yes)
	echo 'dep:libfortranbiarch=lib64gfortran$(FORTRAN_SONAME) (>= $${gcc:Version})' \
		>> debian/substvars.local.tmp
endif
ifeq ($(with_lib64objc),yes)
	echo 'dep:libobjcbiarch=lib64objc$(OBJC_SONAME) (>= $${gcc:Version})' \
		>> debian/substvars.local.tmp
endif
ifeq ($(with_lib64ffi),yes)
	echo 'dep:libffidev=lib64ffi$(FFI_SONAME)' \
		>> debian/substvars.local.tmp
endif
ifeq ($(with_lib64mudflap),yes)
	echo 'dep:libmudflapbiarch=lib64mudflap$(MUDFLAP_SONAME)' \
		>> debian/substvars.local.tmp
endif
ifeq ($(with_lib64ssp),yes)
	echo 'dep:libsspbiarch=lib64ssp$(SSP_SONAME) (>= $${gcc:Version})' \
		>> debian/substvars.local.tmp
endif
ifneq ($(with_standalone_gcj),yes)
	echo 'dep:gcj=gcc$(pkg_ver) (>= $(DEB_GCC_SOFT_VERSION))' \
		>> debian/substvars.local.tmp
endif
ifeq ($(DEB_HOST_ARCH),hppa)
	echo 'dep:prctl=prctl' >> debian/substvars.local.tmp
endif
	[ -e debian/substvars.local ] \
	  && cmp -s debian/substvars.local debian/substvars.local.tmp \
	  && rm -f debian/substvars.local.tmp && exit 0; \
	  mv debian/substvars.local.tmp debian/substvars.local; \
	  touch $(control_stamp)

parameters-file:
	rm -f debian/rules.parameters.tmp
	( \
		echo '# configuration parameters taken from upstream source files'; \
		echo 'GCC_VERSION	:= $(GCC_VERSION)'; \
		echo 'NEXT_GCC_VERSION	:= $(NEXT_GCC_VERSION)'; \
		echo 'BASE_VERSION	:= $(BASE_VERSION)'; \
		echo 'SOURCE_VERSION	:= $(SOURCE_VERSION)'; \
		echo 'DEB_VERSION	:= $(DEB_VERSION)'; \
		echo 'DEB_EVERSION	:= $(DEB_EVERSION)'; \
		echo 'GPC_BASE_VERSION	:= $(GPC_BASE_VERSION)'; \
		echo 'GDC_BASE_VERSION  := $(GDC_BASE_VERSION)'; \
		echo 'DEB_GPC_VERSION	:= $(DEB_GPC_VERSION)'; \
		echo 'DEB_GDC_VERSION	:= $(DEB_GDC_VERSION)'; \
		echo 'DEB_SOVERSION	:= $(DEB_SOVERSION)'; \
		echo 'DEB_SOEVERSION	:= $(DEB_SOEVERSION)'; \
		echo 'DEB_LIBGCC_SOVERSION	:= $(DEB_LIBGCC_SOVERSION)'; \
		echo 'DEB_LIBGCC_VERSION	:= $(DEB_LIBGCC_VERSION)'; \
		echo 'DEB_STDCXX_SOVERSION	:= $(DEB_STDCXX_SOVERSION)'; \
		echo 'DEB_GCJ_SOVERSION	:= $(DEB_GCJ_SOVERSION)'; \
		echo 'PKG_GCJ_EXT	:= $(PKG_GCJ_EXT)'; \
		echo 'PKG_LIBGCJ_EXT	:= $(PKG_LIBGCJ_EXT)'; \
		echo 'DEB_FFI_SOVERSION	:= $(DEB_FFI_SOVERSION)'; \
		echo 'GCC_SONAME	:= $(GCC_SONAME)'; \
		echo 'CXX_SONAME	:= $(CXX_SONAME)'; \
		echo 'FORTRAN_SONAME	:= $(FORTRAN_SONAME)'; \
		echo 'OBJC_SONAME	:= $(OBJC_SONAME)'; \
		echo 'GCJ_SONAME	:= $(GCJ_SONAME)'; \
		echo 'GNAT_VERSION	:= $(GNAT_VERSION)'; \
		echo 'GNAT_SONAME	:= $(GNAT_SONAME)'; \
		echo 'FFI_SONAME	:= $(FFI_SONAME)'; \
		echo 'MUDFLAP_SONAME	:= $(MUDFLAP_SONAME)'; \
		echo 'SSP_SONAME	:= $(SSP_SONAME)'; \
		echo 'LIBC_DEP		:= $(LIBC_DEP)'; \
	) > debian/rules.parameters.tmp
	[ -e debian/rules.parameters ] \
	  && cmp -s debian/rules.parameters debian/rules.parameters.tmp \
	  && rm -f debian/rules.parameters.tmp && exit 0; \
	  mv debian/rules.parameters.tmp debian/rules.parameters; \
	  touch $(control_stamp)

versioned-files:
	fs=`echo debian/*-BV* debian/*GCJ* debian/*CXX* debian/*LC* debian/*FFI*|sort -u`; \
	for f in $$fs; do \
	  [ -f $$f ] || echo "CANNOT FIND $$f"; \
	  [ -f $$f ] || continue; \
	  f2=$$(echo $$f \
		| sed 's/BV/$(BASE_VERSION)/;s/PV/$(GPC_BASE_VERSION)/;s/CXX/$(CXX_SONAME)/;s/LGCJ/$(PKG_LIBGCJ_EXT)/;s/GCJ/$(PKG_GCJ_EXT)/;s/LC/$(GCC_SONAME)/;s/FFI/$(FFI_SONAME)/'); \
	  sed -e 's/@BV@/$(BASE_VERSION)/g' \
	      -e 's/@PV@/$(GPC_BASE_VERSION)/g' \
	      -e 's/@CXX@/$(CXX_SONAME)/g' \
	      -e 's/@LGCJ@/$(PKG_LIBGCJ_EXT)/g' \
	      -e 's/@GCJ@/$(PKG_GCJ_EXT)/g' \
	      -e 's/@LC@/$(GCC_SONAME)/g' \
	      -e 's/@FFI@/$(FFI_SONAME)/g' \
	      -e 's/@browser_dirs@/$(browser_plugin_dirs)/g' \
	      -e 's/@GFDL@/$(if $(filter yes,$(GFDL_INVARIANT_FREE)),#)/g' \
	    $$f > $$f2; \
	  touch -r $$f $$f2; \
	done
