diff -urN debian/changelog gcc-4.5-4.5.3.orig/debian/changelog
--- debian/changelog	2014-05-09 17:45:51.583459570 +0900
+++ gcc-4.5-4.5.3.orig/debian/changelog	2014-11-11 13:40:00.861785007 +0900
@@ -1,3 +1,9 @@
+gcc-4.5 (4.5.3-12ubuntu2trusty3) trusty; urgency=low
+
+  * ppa for trusty
+
+ -- ABE Hiroki (hATrayflood) <h.rayflood@gmail.com>  Sun, 09 Nov 2014 08:10:00 +0900
+
 gcc-4.5 (4.5.3-12ubuntu2) precise; urgency=low
 
   * Pursuant to the cross-distro consensus on the armhf linker path,
diff -urN debian/control gcc-4.5-4.5.3.orig/debian/control
--- debian/control	2014-05-09 17:45:51.583459570 +0900
+++ gcc-4.5-4.5.3.orig/debian/control	2014-11-11 13:40:34.289229712 +0900
@@ -1,16 +1,12 @@
 Source: gcc-4.5
 Section: devel
 Priority: optional
-Maintainer: Ubuntu Core developers <ubuntu-devel-discuss@lists.ubuntu.com>
-XSBC-Original-Maintainer: Debian GCC Maintainers <debian-gcc@lists.debian.org>
-Uploaders: Matthias Klose <doko@debian.org>, Arthur Loiret <aloiret@debian.org>
+Maintainer: ABE Hiroki (hATrayflood) <h.rayflood@gmail.com>
 Standards-Version: 3.9.2
-Build-Depends: dpkg-dev (>= 1.16.0~ubuntu4), debhelper (>= 5.0.62), g++-multilib [amd64 i386 mips mipsel powerpc ppc64 s390 s390x sparc kfreebsd-amd64], libc6.1-dev (>= 2.13-0ubuntu6) [alpha ia64] | libc0.3-dev (>= 2.13-0ubuntu6) [hurd-i386] | libc0.1-dev (>= 2.13-0ubuntu6) [kfreebsd-i386 kfreebsd-amd64] | libc6-dev (>= 2.13-0ubuntu6), libc6-dev-amd64 [i386], libc6-dev-sparc64 [sparc], libc6-dev-s390 [s390x], libc6-dev-s390x [s390], libc6-dev-i386 [amd64], libc6-dev-powerpc [ppc64], libc6-dev-ppc64 [powerpc], libc0.1-dev-i386 [kfreebsd-amd64], lib32gcc1 [amd64 ppc64 kfreebsd-amd64 s390x], lib64gcc1 [i386 powerpc sparc s390], libc6-dev-mips64 [mips mipsel], libc6-dev-mipsn32 [mips mipsel], m4, libtool, autoconf2.64, automake (>= 1:1.11), automake (<< 1:1.12), libunwind7-dev (>= 0.98.5-6) [ia64], libatomic-ops-dev [ia64], zlib1g-dev, gawk, lzma, xz-utils, patchutils, binutils (>= 2.20.1-14~) | binutils-multiarch (>= 2.20.1-14~), binutils-hppa64 (>= 2.20.1-14~) [hppa], gperf (>= 3.0.1), bison (>= 1:2.3), flex, gettext, texinfo (>= 4.3), locales [!m68k !knetbsd-i386 !knetbsd-alpha], procps, sharutils, binutils-spu (>= 2.20.1-14~) [powerpc ppc64], newlib-spu (>= 1.16.0) [powerpc ppc64], libcloog-ppl-dev (>= 0.15.9-2~), libmpc-dev, libmpfr-dev (>= 3.0.0-9~), libgmp-dev (>= 2:5.0.1~), libelfg0-dev (>= 0.8.12), dejagnu [!m68k !hurd-i386 !hurd-alpha], autogen, realpath (>= 1.9.12), chrpath, lsb-release, make (>= 3.81), quilt
+Build-Depends: dpkg-dev (>= 1.16.0~ubuntu4), debhelper (>= 5.0.62), g++-multilib [amd64 i386 mips mipsel powerpc ppc64 s390 s390x sparc kfreebsd-amd64], libc6.1-dev (>= 2.13-0ubuntu6) [alpha ia64] | libc0.3-dev (>= 2.13-0ubuntu6) [hurd-i386] | libc0.1-dev (>= 2.13-0ubuntu6) [kfreebsd-i386 kfreebsd-amd64] | libc6-dev (>= 2.13-0ubuntu6), libc6-dev-amd64 [i386], libc6-dev-sparc64 [sparc], libc6-dev-s390 [s390x], libc6-dev-s390x [s390], libc6-dev-i386 [amd64], libc6-dev-powerpc [ppc64], libc6-dev-ppc64 [powerpc], libc0.1-dev-i386 [kfreebsd-amd64], lib32gcc1 [amd64 ppc64 kfreebsd-amd64 s390x], lib64gcc1 [i386 powerpc sparc s390], libc6-dev-mips64 [mips mipsel], libc6-dev-mipsn32 [mips mipsel], m4, libtool, autoconf2.64, automake (>= 1:1.11), libunwind7-dev (>= 0.98.5-6) [ia64], libatomic-ops-dev [ia64], zlib1g-dev, gawk, lzma, xz-utils, patchutils, binutils (>= 2.20.1-14~) | binutils-multiarch (>= 2.20.1-14~), binutils-hppa64 (>= 2.20.1-14~) [hppa], gperf (>= 3.0.1), bison (>= 1:2.3), flex, gettext, texinfo (>= 4.3), locales [!m68k !knetbsd-i386 !knetbsd-alpha], procps, sharutils, binutils-spu (>= 2.20.1-14~) [powerpc ppc64], newlib-spu (>= 1.16.0) [powerpc ppc64], libcloog-ppl-dev (>= 0.15.9-2~), libmpc-dev, libmpfr-dev (>= 3.0.0-9~), libgmp-dev (>= 2:5.0.1~), libelfg0-dev (>= 0.8.12), dejagnu [!m68k !hurd-i386 !hurd-alpha], autogen, realpath (>= 1.9.12), chrpath, lsb-release, make (>= 3.81), quilt
 Build-Depends-Indep: doxygen (>= 1.4.2), graphviz (>= 2.2), gsfonts-x11, texlive-latex-base, 
-Build-Conflicts: binutils-gold
-Homepage: http://gcc.gnu.org/
-XS-Vcs-Browser: http://svn.debian.org/viewsvn/gcccvs/branches/sid/gcc-4.5/
-XS-Vcs-Svn: svn://svn.debian.org/svn/gcccvs/branches/sid/gcc-4.5
+Homepage: https://launchpad.net/~h-rayflood/+archive/gcc-upper
+XS-Vcs-Browser: https://github.com/hATrayflood/gcc-ppa
 
 Package: gcc-4.5-base
 Architecture: any
@@ -150,6 +146,85 @@
  On architectures with multilib support, the package contains files
  and dependencies for the non-default multilib architecture(s).
 
+Package: libmudflap0
+Architecture: any
+Multi-Arch: same
+Pre-Depends: multiarch-support
+Section: libs
+Priority: optional
+Depends: gcc-4.5-base (= ${gcc:Version}), ${shlibs:Depends}, ${misc:Depends}
+Description: GCC mudflap shared support libraries
+ The libmudflap libraries are used by GCC for instrumenting pointer and array
+ dereferencing operations.
+
+Package: libmudflap0-dbg
+Architecture: any
+Multi-Arch: same
+Section: debug
+Priority: extra
+Depends: gcc-4.5-base (= ${gcc:Version}), libmudflap0 (= ${gcc:Version}), ${misc:Depends}
+Description: GCC mudflap shared support libraries (debug symbols)
+ The libmudflap libraries are used by GCC for instrumenting pointer and array
+ dereferencing operations.
+
+Package: lib32mudflap0
+Architecture: amd64 ppc64 kfreebsd-amd64 s390x
+Section: libs
+Priority: optional
+Depends: gcc-4.5-base (= ${gcc:Version}), ${dep:libcbiarch}, ${shlibs:Depends}, ${misc:Depends}
+Replaces: libmudflap0 (<< 4.1)
+Conflicts: ${confl:lib32}
+Description: GCC mudflap shared support libraries (32bit)
+ The libmudflap libraries are used by GCC for instrumenting pointer and array
+ dereferencing operations.
+
+Package: lib32mudflap0-dbg
+Architecture: amd64 ppc64 kfreebsd-amd64 s390x
+Section: debug
+Priority: extra
+Depends: gcc-4.5-base (= ${gcc:Version}), lib32mudflap0 (= ${gcc:Version}), ${misc:Depends}
+Description: GCC mudflap shared support libraries (32 bit debug symbols)
+ The libmudflap libraries are used by GCC for instrumenting pointer and array
+ dereferencing operations.
+
+Package: lib64mudflap0
+Architecture: i386 powerpc sparc s390 mips mipsel
+Section: libs
+Priority: optional
+Depends: gcc-4.5-base (= ${gcc:Version}), ${dep:libcbiarch}, ${shlibs:Depends}, ${misc:Depends}
+Replaces: libmudflap0 (<< 4.1)
+Description: GCC mudflap shared support libraries (64bit)
+ The libmudflap libraries are used by GCC for instrumenting pointer and array
+ dereferencing operations.
+
+Package: lib64mudflap0-dbg
+Architecture: i386 powerpc sparc s390 mips mipsel
+Section: debug
+Priority: extra
+Depends: gcc-4.5-base (= ${gcc:Version}), lib64mudflap0 (= ${gcc:Version}), ${misc:Depends}
+Description: GCC mudflap shared support libraries (64 bit debug symbols)
+ The libmudflap libraries are used by GCC for instrumenting pointer and array
+ dereferencing operations.
+
+Package: libn32mudflap0
+Architecture: mips mipsel
+Section: libs
+Priority: optional
+Depends: gcc-4.5-base (= ${gcc:Version}), ${dep:libcbiarch}, ${shlibs:Depends}, ${misc:Depends}
+Replaces: libmudflap0 (<< 4.1)
+Description: GCC mudflap shared support libraries (n32)
+ The libmudflap libraries are used by GCC for instrumenting pointer and array
+ dereferencing operations.
+
+Package: libn32mudflap0-dbg
+Architecture: mips mipsel
+Section: debug
+Priority: extra
+Depends: gcc-4.5-base (= ${gcc:Version}), libn32mudflap0 (= ${gcc:Version}), ${misc:Depends}
+Description: GCC mudflap shared support libraries (n32 debug symbols)
+ The libmudflap libraries are used by GCC for instrumenting pointer and array
+ dereferencing operations.
+
 Package: libmudflap0-4.5-dev
 Architecture: any
 Section: libdevel
diff -urN debian/control.m4 gcc-4.5-4.5.3.orig/debian/control.m4
--- debian/control.m4	2014-05-09 17:45:51.583459570 +0900
+++ gcc-4.5-4.5.3.orig/debian/control.m4	2014-05-09 17:45:51.612079270 +0900
@@ -25,23 +25,7 @@
 Source: SRCNAME
 Section: devel
 Priority: PRI(optional)
-ifelse(DIST,`Ubuntu',`dnl
-ifelse(regexp(SRCNAME, `gnat\|gdc-'),0,`dnl
-Maintainer: Ubuntu MOTU Developers <ubuntu-motu@lists.ubuntu.com>
-', `dnl
-Maintainer: Ubuntu Core developers <ubuntu-devel-discuss@lists.ubuntu.com>
-')dnl SRCNAME
-XSBC-Original-Maintainer: MAINTAINER
-', `dnl
-Maintainer: MAINTAINER
-')dnl DIST
-ifelse(regexp(SRCNAME, `gnat'),0,`dnl
-Uploaders: Ludovic Brenta <lbrenta@debian.org>
-', regexp(SRCNAME, `gdc'),0,`dnl
-Uploaders: Arthur Loiret <arthur.loiret@gmail.com>
-', `dnl
-Uploaders: Matthias Klose <doko@debian.org>, Arthur Loiret <aloiret@debian.org>
-')dnl SRCNAME
+Maintainer: ABE Hiroki (hATrayflood) <h.rayflood@gmail.com>
 Standards-Version: 3.9.2
 ifdef(`TARGET',`dnl cross
 Build-Depends: DPKG_BUILD_DEP debhelper (>= 5.0.62), dpkg-cross (>= 1.25.99), LIBC_BUILD_DEP, LIBC_BIARCH_BUILD_DEP LIBUNWIND_BUILD_DEP LIBATOMIC_OPS_BUILD_DEP AUTOGEN_BUILD_DEP CLOOG_BUILD_DEP AUTO_BUILD_DEP SOURCE_BUILD_DEP CROSS_BUILD_DEP MPFR_BUILD_DEP GMP_BUILD_DEP zlib1g-dev, gawk, lzma, xz-utils, patchutils, BINUTILS_BUILD_DEP, bison (>= 1:2.3), flex, realpath (>= 1.9.12), lsb-release, make (>= 3.81), quilt
@@ -51,16 +35,8 @@
 Build-Depends-Indep: LIBSTDCXX_BUILD_INDEP JAVA_BUILD_INDEP
 ')dnl
 ')dnl
-Build-Conflicts: binutils-gold
-ifelse(regexp(SRCNAME, `gnat'),0,`dnl
-Homepage: http://gcc.gnu.org/
-', regexp(SRCNAME, `gdc'),0,`dnl
-Homepage: http://dgcc.sourceforge.net/
-', `dnl
-Homepage: http://gcc.gnu.org/
-')dnl SRCNAME
-XS-Vcs-Browser: http://svn.debian.org/viewsvn/gcccvs/branches/sid/gcc`'PV/
-XS-Vcs-Svn: svn://svn.debian.org/svn/gcccvs/branches/sid/gcc`'PV
+Homepage: https://launchpad.net/~h-rayflood/+archive/gcc-upper
+XS-Vcs-Browser: https://github.com/hATrayflood/gcc-ppa
 
 ifelse(SRCNAME,gcc-snapshot,`dnl
 Package: gcc-snapshot
diff -urN debian/patches/gcc-linaro.diff gcc-4.5-4.5.3.orig/debian/patches/gcc-linaro.diff
--- debian/patches/gcc-linaro.diff	2014-05-09 17:45:51.596087401 +0900
+++ gcc-4.5-4.5.3.orig/debian/patches/gcc-linaro.diff	2014-11-09 08:07:43.103514438 +0900
@@ -75,7 +75,7 @@
  	* GCC 4.5.3 released.
 --- a/src/ChangeLog.linaro
 +++ b/src/ChangeLog.linaro
-@@ -0,0 +1,5337 @@
+@@ -0,0 +1,5264 @@
 +2012-01-11  Andrew Stubbs  <ams@codesourcery.com>
 +
 +	GCC Linaro 4.5-2012.01 released.
@@ -709,11 +709,6 @@
 +
 +	Merge from FSF 4.5 branch r173417 (pre 4.5.4).
 +
-+2011-05-03  Tom de Vries  <tom@codesourcery.com>
-+
-+	gcc/
-+	* stmt.c (set_jump_prob): Make robust against *inv_scale == 0.
-+
 +2011-05-06  Richard Sandiford  <richard.sandiford@linaro.org>
 +
 +	gcc/
@@ -1481,44 +1476,6 @@
 +	* sched-int.h (find_fallthru_edge_from): Rename declaration as well.
 +	* basic-block.h (find_fallthru_edge): New inline function.
 +
-+2010-02-04  Tom de Vries  <tom@codesourcery.com>
-+
-+	gcc/
-+	stmt.c (set_jump_prob): Fix assert condition.
-+
-+2010-01-27  Tom de Vries  <tom@codesourcery.com>
-+
-+	gcc/
-+	stmt.c (rtx_seq_cost): Use insn_rtx_cost instead of rtx_cost.
-+
-+2010-01-26  Tom de Vries  <tom@codesourcery.com>
-+
-+	gcc/
-+	* stmt.c (struct  case_bit_test): Add rev_hi and rev_lo field.
-+	* stmt.c (emit_case_bit_test_jump): New function.
-+	* stmt.c (rtx_seq_cost): New function.
-+	* stmt.c (choose_case_bit_test_expand_method): New function.
-+	* stmt.c (set_bit): New function.
-+	* stmt.c (emit_case_bit_test): Adjust comment.
-+	* stmt.c (emit_case_bit_test): Set and update rev_hi and rev_lo fields.
-+	* stmt.c (emit_case_bit_test): Use set_bit.
-+	* stmt.c (emit_case_bit_test): Use choose_case_bit_test_expand_method.
-+	* stmt.c (emit_case_bit_test): Use emit_case_bit_test_jump.
-+	* testsuite/gcc.dg/switch-bittest.c: New test.
-+
-+2010-01-25  Tom de Vries  <tom@codesourcery.com>
-+
-+	gcc/
-+	* stmt.c (emit_case_bit_tests): Change prototype.
-+	* stmt.c (struct case_bit_test): Add prob field.
-+	* stmt.c (get_label_prob): New function.
-+	* stmt.c (set_jump_prob): New function.
-+	* stmt.c (emit_case_bit_tests): Use get_label_prob.
-+	* stmt.c (emit_case_bit_tests): Set prob field.
-+	* stmt.c (emit_case_bit_tests): Use set_jump_prob.
-+	* stmt.c (expand_case): Add new args to emit_case_bit_tests invocation.
-+	* testsuite/gcc.dg/switch-prob.c: Add test.
-+
 +2011-02-04  Andrew Stubbs  <ams@codesourcery.com>
 +
 +	gcc/
@@ -1531,36 +1488,6 @@
 +	gcc/
 +	* LINARO-VERSION: Update.
 +
-+2011-02-04  Andrew Stubbs  <ams@codesourcery.com>
-+
-+	Revert:
-+
-+	2010-01-25  Tom de Vries  <tom@codesourcery.com>
-+
-+	gcc/
-+	* stmt.c (emit_case_bit_tests): Change prototype.
-+	* stmt.c (struct case_bit_test): Add prob field.
-+	* stmt.c (get_label_prob): New function.
-+	* stmt.c (set_jump_prob): New function.
-+	* stmt.c (emit_case_bit_tests): Use get_label_prob.
-+	* stmt.c (emit_case_bit_tests): Set prob field.
-+	* stmt.c (emit_case_bit_tests): Use set_jump_prob.
-+	* stmt.c (expand_case): Add new args to emit_case_bit_tests invocation.
-+	* testsuite/gcc.dg/switch-prob.c: Add test.
-+
-+2010-01-25  Tom de Vries  <tom@codesourcery.com>
-+
-+	gcc/
-+	* stmt.c (emit_case_bit_tests): Change prototype.
-+	* stmt.c (struct case_bit_test): Add prob field.
-+	* stmt.c (get_label_prob): New function.
-+	* stmt.c (set_jump_prob): New function.
-+	* stmt.c (emit_case_bit_tests): Use get_label_prob.
-+	* stmt.c (emit_case_bit_tests): Set prob field.
-+	* stmt.c (emit_case_bit_tests): Use set_jump_prob.
-+	* stmt.c (expand_case): Add new args to emit_case_bit_tests invocation.
-+	* testsuite/gcc.dg/switch-prob.c: Add test.
-+
 +2010-12-13  Tom de Vries  <tom@codesourcery.com>
 +
 +	gcc/
@@ -47064,16 +46991,6 @@
        if (STORE_FLAG_VALUE == 1
 --- a/src/gcc/stmt.c
 +++ b/src/gcc/stmt.c
-@@ -117,7 +117,8 @@
- static int estimate_case_costs (case_node_ptr);
- static bool lshift_cheap_p (void);
- static int case_bit_test_cmp (const void *, const void *);
--static void emit_case_bit_tests (tree, tree, tree, tree, case_node_ptr, rtx);
-+static void emit_case_bit_tests (tree, tree, tree, tree, case_node_ptr, tree,
-+                                 rtx, basic_block);
- static void balance_case_nodes (case_node_ptr *, case_node_ptr);
- static int node_has_low_bound (case_node_ptr, tree);
- static int node_has_high_bound (case_node_ptr, tree);
 @@ -684,13 +685,14 @@
    for (tail = clobbers; tail; tail = TREE_CHAIN (tail))
      {
@@ -47317,304 +47234,6 @@
      }
    else if (retval_rhs != 0
  	   && !VOID_TYPE_P (TREE_TYPE (retval_rhs))
-@@ -2089,8 +2010,11 @@
- {
-   HOST_WIDE_INT hi;
-   HOST_WIDE_INT lo;
-+  HOST_WIDE_INT rev_hi;
-+  HOST_WIDE_INT rev_lo;
-   rtx label;
-   int bits;
-+  int prob;
- };
- 
- /* Determine whether "1 << x" is relatively cheap in word_mode.  */
-@@ -2130,10 +2054,195 @@
-   return CODE_LABEL_NUMBER (d2->label) - CODE_LABEL_NUMBER (d1->label);
- }
- 
-+/* Emit a bit test and a conditional jump.  */
-+
-+static void
-+emit_case_bit_test_jump (unsigned int count, rtx index, rtx label,
-+                         unsigned int method, HOST_WIDE_INT hi,
-+                         HOST_WIDE_INT lo, HOST_WIDE_INT rev_hi,
-+                         HOST_WIDE_INT rev_lo)
-+{
-+  rtx expr;
-+
-+  if (method == 1)
-+    {
-+      /* (1 << index). */
-+      if (count == 0)
-+        index = expand_binop (word_mode, ashl_optab, const1_rtx,
-+                              index, NULL_RTX, 1, OPTAB_WIDEN);
-+      /* CST.  */
-+      expr = immed_double_const (lo, hi, word_mode);
-+      /* ((1 << index) & CST).  */
-+      expr = expand_binop (word_mode, and_optab, index, expr,
-+                           NULL_RTX, 1, OPTAB_WIDEN);
-+      /* if (((1 << index) & CST)).   */
-+      emit_cmp_and_jump_insns (expr, const0_rtx, NE, NULL_RTX,
-+                               word_mode, 1, label);
-+    }
-+  else if (method == 2)
-+    {
-+      /* (bit_reverse (CST)) */
-+      expr = immed_double_const (rev_lo, rev_hi, word_mode);
-+      /* ((bit_reverse (CST)) << index) */
-+      expr = expand_binop (word_mode, ashl_optab, expr,
-+                           index, NULL_RTX, 1, OPTAB_WIDEN);
-+      /* if (((bit_reverse (CST)) << index) < 0).  */
-+      emit_cmp_and_jump_insns (expr, const0_rtx, LT, NULL_RTX,
-+                               word_mode, 0, label);
-+    }
-+  else
-+    gcc_unreachable ();
-+}
-+
-+/* Return the cost of rtx sequence SEQ.  The sequence is supposed to contain one
-+   jump, which has no effect in the cost.  */
-+
-+static unsigned int
-+rtx_seq_cost (rtx seq)
-+{
-+  rtx one;
-+  unsigned int nr_branches = 0;
-+  unsigned int sum = 0, cost;
-+
-+  for (one = seq; one != NULL_RTX; one = NEXT_INSN (one))
-+    if (JUMP_P (one))
-+      nr_branches++;
-+    else
-+      {
-+        cost = insn_rtx_cost (PATTERN (one), optimize_insn_for_speed_p ());
-+        if (dump_file)
-+          {
-+            print_rtl_single (dump_file, one);
-+            fprintf (dump_file, "cost: %u\n", cost);
-+          }
-+        sum += cost;
-+      }
-+
-+  gcc_assert (nr_branches == 1);
-+
-+  if (dump_file)
-+    fprintf (dump_file, "total cost: %u\n", sum);
-+  return sum;
-+}
-+
-+/* Generate the rtx sequences for 2 bit test expansion methods, measure the cost
-+   and choose the cheapest.  */
-+
-+static unsigned int
-+choose_case_bit_test_expand_method (rtx label)
-+{
-+  rtx seq, index;
-+  unsigned int cost[2];
-+  static bool method_known = false;
-+  static unsigned int method;
-+
-+  /* If already known, return the method.  */
-+  if (method_known)
-+    return method;
-+
-+  index = gen_rtx_REG (word_mode, 10000);
-+
-+  for (method = 1; method <= 2; ++method)
-+    {
-+      start_sequence ();
-+      emit_case_bit_test_jump (0, index, label, method, 0, 0x0f0f0f0f, 0,
-+                               0x0f0f0f0f);
-+      seq = get_insns ();
-+      end_sequence ();
-+      cost[method - 1] = rtx_seq_cost (seq);
-+    }
-+
-+  /* Determine method based on heuristic.  */
-+  method = ((cost[1] < cost[0]) ? 1 : 0) + 1;
-+
-+  /* Save and return method.  */
-+  method_known = true;
-+  return method;
-+}
-+
-+/* Get the edge probability of the edge from SRC to LABEL_DECL.  */
-+
-+static int
-+get_label_prob (basic_block src, tree label_decl)
-+{
-+  basic_block dest;
-+  int prob = 0, nr_prob = 0;
-+  unsigned int i;
-+  edge e;
-+
-+  if (label_decl == NULL_TREE)
-+    return 0;
-+
-+  dest = VEC_index (basic_block, label_to_block_map,
-+                    LABEL_DECL_UID (label_decl));
-+
-+  for (i = 0; i < EDGE_COUNT (src->succs); ++i)
-+    {
-+      e = EDGE_SUCC (src, i);
-+
-+      if (e->dest != dest)
-+        continue;
-+
-+      prob += e->probability;
-+      nr_prob++;
-+    }
-+
-+  gcc_assert (nr_prob == 1);
-+
-+  return prob;
-+}
-+
-+/* Add probability note with scaled PROB to JUMP and update INV_SCALE.  This
-+   function is intended to be used with a series of conditional jumps to L[i]
-+   where the probabilities p[i] to get to L[i] are known, and the jump
-+   probabilities j[i] need to be computed.
-+
-+   The algorithm to calculate the probabilities is
-+
-+   scale = REG_BR_PROB_BASE;
-+   for (i = 0; i < n; ++i)
-+     {
-+       j[i] = p[i] * scale / REG_BR_PROB_BASE;
-+       f[i] = REG_BR_PROB_BASE - j[i];
-+       scale = scale / (f[i] / REG_BR_PROB_BASE);
-+     }
-+
-+   The implementation uses inv_scale (REG_BR_PROB_BASE / scale) instead of
-+   scale, because scale tends to grow bigger than REG_BR_PROB_BASE.  */
-+
-+static void
-+set_jump_prob (rtx jump, int prob, int *inv_scale)
-+{
-+  /* j[i] = p[i] * scale / REG_BR_PROB_BASE.  */
-+  int jump_prob = (*inv_scale > 0
-+                   ? prob * REG_BR_PROB_BASE / *inv_scale
-+                   : REG_BR_PROB_BASE / 2);
-+  /* f[i] = REG_BR_PROB_BASE - j[i].  */
-+  int fallthrough_prob = REG_BR_PROB_BASE - jump_prob;
-+
-+  gcc_assert (jump_prob <= REG_BR_PROB_BASE);
-+  add_reg_note (jump, REG_BR_PROB, GEN_INT (jump_prob));
-+
-+  /* scale = scale / (f[i] / REG_BR_PROB_BASE).  */
-+  *inv_scale = *inv_scale * fallthrough_prob / REG_BR_PROB_BASE;
-+}
-+
-+/* Set bit in hwi hi/lo pair.  */
-+
-+static void
-+set_bit (HOST_WIDE_INT *hi, HOST_WIDE_INT *lo, unsigned int j)
-+{
-+  if (j >= HOST_BITS_PER_WIDE_INT)
-+    *hi |= (HOST_WIDE_INT) 1 << (j - HOST_BITS_PER_INT);
-+  else
-+    *lo |= (HOST_WIDE_INT) 1 << j;
-+}
-+
- /*  Expand a switch statement by a short sequence of bit-wise
-     comparisons.  "switch(x)" is effectively converted into
--    "if ((1 << (x-MINVAL)) & CST)" where CST and MINVAL are
--    integer constants.
-+    "if ((1 << (x-MINVAL)) & CST)" or
-+    "if (((bit_reverse (CST)) << (x-MINVAL)) < 0)", where CST
-+    and MINVAL are integer constants.
- 
-     INDEX_EXPR is the value being switched on, which is of
-     type INDEX_TYPE.  MINVAL is the lowest case value of in
-@@ -2147,14 +2256,17 @@
- 
- static void
- emit_case_bit_tests (tree index_type, tree index_expr, tree minval,
--		     tree range, case_node_ptr nodes, rtx default_label)
-+		     tree range, case_node_ptr nodes, tree default_label_decl,
-+		     rtx default_label, basic_block bb)
- {
-   struct case_bit_test test[MAX_CASE_BIT_TESTS];
-   enum machine_mode mode;
-   rtx expr, index, label;
-   unsigned int i,j,lo,hi;
-   struct case_node *n;
--  unsigned int count;
-+  unsigned int count, method;
-+  int inv_scale = REG_BR_PROB_BASE;
-+  int default_prob = get_label_prob (bb, default_label_decl);
- 
-   count = 0;
-   for (n = nodes; n; n = n->right)
-@@ -2169,8 +2281,11 @@
- 	  gcc_assert (count < MAX_CASE_BIT_TESTS);
- 	  test[i].hi = 0;
- 	  test[i].lo = 0;
-+	  test[i].rev_hi = 0;
-+	  test[i].rev_lo = 0;
- 	  test[i].label = label;
- 	  test[i].bits = 1;
-+	  test[i].prob = get_label_prob (bb, n->code_label);
- 	  count++;
- 	}
-       else
-@@ -2181,10 +2296,11 @@
-       hi = tree_low_cst (fold_build2 (MINUS_EXPR, index_type,
- 				      n->high, minval), 1);
-       for (j = lo; j <= hi; j++)
--        if (j >= HOST_BITS_PER_WIDE_INT)
--	  test[i].hi |= (HOST_WIDE_INT) 1 << (j - HOST_BITS_PER_INT);
--	else
--	  test[i].lo |= (HOST_WIDE_INT) 1 << j;
-+        {
-+          set_bit (&test[i].hi, &test[i].lo, j);
-+          set_bit (&test[i].rev_hi, &test[i].rev_lo,
-+                   GET_MODE_BITSIZE (word_mode) - j - 1);
-+        }
-     }
- 
-   qsort (test, count, sizeof(*test), case_bit_test_cmp);
-@@ -2198,20 +2314,20 @@
-   mode = TYPE_MODE (index_type);
-   expr = expand_normal (range);
-   if (default_label)
--    emit_cmp_and_jump_insns (index, expr, GTU, NULL_RTX, mode, 1,
--			     default_label);
-+    {
-+      emit_cmp_and_jump_insns (index, expr, GTU, NULL_RTX, mode, 1,
-+                               default_label);
-+      set_jump_prob (get_last_insn (), default_prob / 2, &inv_scale);
-+    }
- 
-   index = convert_to_mode (word_mode, index, 0);
--  index = expand_binop (word_mode, ashl_optab, const1_rtx,
--			index, NULL_RTX, 1, OPTAB_WIDEN);
- 
-+  method = choose_case_bit_test_expand_method (test[0].label);
-   for (i = 0; i < count; i++)
-     {
--      expr = immed_double_const (test[i].lo, test[i].hi, word_mode);
--      expr = expand_binop (word_mode, and_optab, index, expr,
--			   NULL_RTX, 1, OPTAB_WIDEN);
--      emit_cmp_and_jump_insns (expr, const0_rtx, NE, NULL_RTX,
--			       word_mode, 1, test[i].label);
-+      emit_case_bit_test_jump (i, index, test[i].label, method, test[i].hi,
-+                               test[i].lo, test[i].rev_hi, test[i].rev_lo);
-+      set_jump_prob (get_last_insn (), test[i].prob, &inv_scale);
-     }
- 
-   if (default_label)
-@@ -2382,7 +2498,8 @@
- 	      range = maxval;
- 	    }
- 	  emit_case_bit_tests (index_type, index_expr, minval, range,
--			       case_list, default_label);
-+			       case_list, default_label_decl, default_label,
-+			       gimple_bb (stmt));
- 	}
- 
-       /* If range of values is much bigger than number of values,
 --- a/src/gcc/stor-layout.c
 +++ b/src/gcc/stor-layout.c
 @@ -507,6 +507,34 @@
@@ -49766,62 +49385,6 @@
 +  free (temp.count);
 +  return 0;
 +}
---- a/src/gcc/testsuite/gcc.dg/switch-bittest.c
-+++ b/src/gcc/testsuite/gcc.dg/switch-bittest.c
-@@ -0,0 +1,25 @@
-+/* { dg-do compile } */
-+/* { dg-options "-O2 -fdump-rtl-expand" } */
-+
-+const char *
-+f (const char *p)
-+{
-+  while (1)
-+    {
-+      switch (*p)
-+        {
-+        case 9:
-+        case 10:
-+        case 13:
-+        case 32:
-+          break;
-+        default:
-+          return p;
-+        }
-+    }
-+}
-+
-+/* { dg-final { scan-rtl-dump-times "jump_insn" 4 "expand" { target mips*-*-* } } } */
-+/* { dg-final { scan-rtl-dump-times "REG_BR_PROB" 2 "expand" { target mips*-*-* } } } */
-+/* { dg-final { scan-rtl-dump-times "lt " 1 "expand"  { target mips*-*-* } } } */
-+/* { dg-final { cleanup-rtl-dump "expand" } } */
---- a/src/gcc/testsuite/gcc.dg/switch-prob.c
-+++ b/src/gcc/testsuite/gcc.dg/switch-prob.c
-@@ -0,0 +1,25 @@
-+/* { dg-do compile } */
-+/* { dg-options "-O2 -fdump-rtl-expand" } */
-+
-+const char *
-+f (const char *p)
-+{
-+  while (1)
-+    {
-+      switch (*p)
-+        {
-+        case 9:
-+        case 10:
-+        case 13:
-+        case 32:
-+          break;
-+        default:
-+          return p;
-+        }
-+    }
-+}
-+
-+/* { dg-final { scan-rtl-dump-times "jump_insn" 4 "expand" { target mips*-*-* } } } */
-+/* { dg-final { scan-rtl-dump-times "REG_BR_PROB" 2 "expand" { target mips*-*-* } } } */
-+/* { dg-final { scan-rtl-dump-times "heuristics" 0 "expand"  { target mips*-*-* } } } */
-+/* { dg-final { cleanup-rtl-dump "expand" } } */
 --- a/src/gcc/testsuite/gcc.dg/torture/arm-fp16-ops-5.c
 +++ b/src/gcc/testsuite/gcc.dg/torture/arm-fp16-ops-5.c
 @@ -1,7 +1,8 @@
diff -urN debian/patches/i386-siginfo.diff gcc-4.5-4.5.3.orig/debian/patches/i386-siginfo.diff
--- debian/patches/i386-siginfo.diff	1970-01-01 09:00:00.000000000 +0900
+++ gcc-4.5-4.5.3.orig/debian/patches/i386-siginfo.diff	2014-05-09 17:45:51.639122322 +0900
@@ -0,0 +1,14 @@
+--- a/src/gcc/config/i386/linux-unwind.h	2009-11-13 15:58:12.000000000 +0900
++++ b/src/gcc/config/i386/linux-unwind.h	2014-03-02 02:09:33.223209336 +0900
+@@ -133,9 +133,9 @@
+     {
+       struct rt_sigframe {
+ 	int sig;
+-	struct siginfo *pinfo;
++	siginfo_t *pinfo;
+ 	void *puc;
+-	struct siginfo info;
++	siginfo_t info;
+ 	struct ucontext uc;
+       } *rt_ = context->cfa;
+       /* The void * cast is necessary to avoid an aliasing warning.
diff -urN debian/patches/makeinfo-itemx.diff gcc-4.5-4.5.3.orig/debian/patches/makeinfo-itemx.diff
--- debian/patches/makeinfo-itemx.diff	1970-01-01 09:00:00.000000000 +0900
+++ gcc-4.5-4.5.3.orig/debian/patches/makeinfo-itemx.diff	2014-05-09 17:45:51.639122322 +0900
@@ -0,0 +1,86 @@
+--- a/src/gcc/doc/cppopts.texi	2010-04-03 04:54:46.000000000 +0900
++++ b/src/gcc/doc/cppopts.texi	2014-03-02 01:22:33.588399260 +0900
+@@ -760,7 +760,7 @@
+ Enable special code to work around file systems which only permit very
+ short file names, such as MS-DOS@.
+ 
+-@itemx --help
++@item --help
+ @itemx --target-help
+ @opindex help
+ @opindex target-help
+--- a/src/gcc/doc/generic.texi	2010-07-07 05:23:53.000000000 +0900
++++ b/src/gcc/doc/generic.texi	2014-03-02 01:25:35.071994828 +0900
+@@ -1407,13 +1407,13 @@
+ not matter.  The type of the operands and that of the result are
+ always of @code{BOOLEAN_TYPE} or @code{INTEGER_TYPE}.
+ 
+-@itemx POINTER_PLUS_EXPR
++@item POINTER_PLUS_EXPR
+ This node represents pointer arithmetic.  The first operand is always
+ a pointer/reference type.  The second operand is always an unsigned
+ integer type compatible with sizetype.  This is the only binary
+ arithmetic operand that can operate on pointer types.
+ 
+-@itemx PLUS_EXPR
++@item PLUS_EXPR
+ @itemx MINUS_EXPR
+ @itemx MULT_EXPR
+ These nodes represent various binary arithmetic operations.
+--- a/src/gcc/doc/invoke.texi	2011-03-24 07:03:29.000000000 +0900
++++ b/src/gcc/doc/invoke.texi	2014-03-02 01:38:02.032988900 +0900
+@@ -4875,11 +4875,11 @@
+ @option{-fdump-rtl-ce3} enable dumping after the three
+ if conversion passes.
+ 
+-@itemx -fdump-rtl-cprop_hardreg
++@item -fdump-rtl-cprop_hardreg
+ @opindex fdump-rtl-cprop_hardreg
+ Dump after hard register copy propagation.
+ 
+-@itemx -fdump-rtl-csa
++@item -fdump-rtl-csa
+ @opindex fdump-rtl-csa
+ Dump after combining stack adjustments.
+ 
+@@ -4890,11 +4890,11 @@
+ @option{-fdump-rtl-cse1} and @option{-fdump-rtl-cse2} enable dumping after
+ the two common sub-expression elimination passes.
+ 
+-@itemx -fdump-rtl-dce
++@item -fdump-rtl-dce
+ @opindex fdump-rtl-dce
+ Dump after the standalone dead code elimination passes.
+ 
+-@itemx -fdump-rtl-dbr
++@item -fdump-rtl-dbr
+ @opindex fdump-rtl-dbr
+ Dump after delayed branch scheduling.
+ 
+@@ -4939,7 +4939,7 @@
+ @opindex fdump-rtl-initvals
+ Dump after the computation of the initial value sets.
+ 
+-@itemx -fdump-rtl-into_cfglayout
++@item -fdump-rtl-into_cfglayout
+ @opindex fdump-rtl-into_cfglayout
+ Dump after converting to cfglayout mode.
+ 
+@@ -4969,7 +4969,7 @@
+ @opindex fdump-rtl-rnreg
+ Dump after register renumbering.
+ 
+-@itemx -fdump-rtl-outof_cfglayout
++@item -fdump-rtl-outof_cfglayout
+ @opindex fdump-rtl-outof_cfglayout
+ Dump after converting from cfglayout mode.
+ 
+@@ -4981,7 +4981,7 @@
+ @opindex fdump-rtl-postreload
+ Dump after post-reload optimizations.
+ 
+-@itemx -fdump-rtl-pro_and_epilogue
++@item -fdump-rtl-pro_and_epilogue
+ @opindex fdump-rtl-pro_and_epilogue
+ Dump after generating the function pro and epilogues.
+ 
diff -urN debian/rules.conf gcc-4.5-4.5.3.orig/debian/rules.conf
--- debian/rules.conf	2014-05-09 17:45:51.608136816 +0900
+++ gcc-4.5-4.5.3.orig/debian/rules.conf	2014-05-09 17:45:51.643563752 +0900
@@ -264,7 +264,7 @@
 endif
 
 AUTO_BUILD_DEP := m4, libtool,
-AUTO_BUILD_DEP += autoconf2.64, automake (>= 1:1.11), automake (<< 1:1.12),
+AUTO_BUILD_DEP += autoconf2.64, automake (>= 1:1.11),
 
 ifneq ($(DEB_CROSS),yes)
 LIBC_BUILD_DEP := libc6.1-dev (>= $(libc_dev_ver)) [alpha ia64] | libc0.3-dev (>= $(libc_dev_ver)) [hurd-i386] | libc0.1-dev (>= $(libc_dev_ver)) [kfreebsd-i386 kfreebsd-amd64] | libc6-dev (>= $(libc_dev_ver))
diff -urN debian/rules.defs gcc-4.5-4.5.3.orig/debian/rules.defs
--- debian/rules.defs	2014-05-09 17:45:51.608136816 +0900
+++ gcc-4.5-4.5.3.orig/debian/rules.defs	2014-10-21 19:34:08.969529519 +0900
@@ -820,7 +820,7 @@
   endif
 
   # libmudflap --------------
-  ifeq ($(with_mudflap)-$(with_common_libs),yes-yes)
+  ifeq ($(with_mudflap),yes)
       with_libmudflap := yes
   endif
 
@@ -947,6 +947,7 @@
 ifneq ($(findstring nocheck, $(DEB_BUILD_OPTIONS)),)
   with_check := disabled by DEB_BUILD_OPTIONS
 endif
+with_check := disabled for this build
 
 # not a dependency on all archs, but if available, use it for the testsuite
 ifneq (,$(wildcard /usr/bin/localedef))
diff -urN debian/rules.parameters gcc-4.5-4.5.3.orig/debian/rules.parameters
--- debian/rules.parameters	2014-05-09 17:45:51.608136816 +0900
+++ gcc-4.5-4.5.3.orig/debian/rules.parameters	2014-11-11 13:40:34.309219820 +0900
@@ -2,15 +2,15 @@
 GCC_VERSION	:= 4.5.3
 NEXT_GCC_VERSION	:= 4.5.4
 BASE_VERSION	:= 4.5
-SOURCE_VERSION	:= 4.5.3-12ubuntu1
-DEB_VERSION	:= 4.5.3-12ubuntu1
-DEB_EVERSION	:= 1:4.5.3-12ubuntu1
+SOURCE_VERSION	:= 4.5.3-12ubuntu2trusty3
+DEB_VERSION	:= 4.5.3-12ubuntu2trusty3
+DEB_EVERSION	:= 1:4.5.3-12ubuntu2trusty3
 GDC_BASE_VERSION  := 
 DEB_GDC_VERSION	:= 
 DEB_SOVERSION	:= 4.4
 DEB_SOEVERSION	:= 1:4.4
 DEB_LIBGCC_SOVERSION	:= 1:4.4
-DEB_LIBGCC_VERSION	:= 1:4.5.3-12ubuntu1
+DEB_LIBGCC_VERSION	:= 1:4.5.3-12ubuntu2trusty3
 DEB_STDCXX_SOVERSION	:= 4.4
 DEB_GCJ_SOVERSION	:= 4.4
 PKG_GCJ_EXT	:= 11
diff -urN debian/rules.patch gcc-4.5-4.5.3.orig/debian/rules.patch
--- debian/rules.patch	2014-05-09 17:45:51.608136816 +0900
+++ gcc-4.5-4.5.3.orig/debian/rules.patch	2014-05-09 17:45:51.643563752 +0900
@@ -273,6 +273,10 @@
 
 debian_patches += armhf-triplet-backport
 
+ifeq ($(distrelease),trusty)
+  debian_patches += makeinfo-itemx
+  debian_patches += i386-siginfo
+endif
 
 series_stamp = $(stampdir)/02-series-stamp
 series: $(series_stamp)
